//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The AS2 agreement acknowledgement connection settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AS2AcknowledgementConnectionSettings
	{
		
		/// <summary>
		/// Indicates whether to ignore mismatch in certificate name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ignoreCertificateNameMismatch")]
		public bool IgnoreCertificateNameMismatch { get; set; }
		
		/// <summary>
		/// Indicates whether to keep the connection alive.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keepHttpConnectionAlive")]
		public bool KeepHttpConnectionAlive { get; set; }
		
		/// <summary>
		/// Indicates whether to support HTTP status code 'CONTINUE'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="supportHttpStatusCodeContinue")]
		public bool SupportHttpStatusCodeContinue { get; set; }
		
		/// <summary>
		/// Indicates whether to unfold the HTTP headers.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unfoldHttpHeaders")]
		public bool UnfoldHttpHeaders { get; set; }
	}
	
	/// <summary>
	/// The integration account AS2 agreement content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AS2AgreementContent
	{
		
		/// <summary>
		/// The integration account AS2 one-way agreement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiveAgreement")]
		public AS2OneWayAgreement ReceiveAgreement { get; set; }
		
		/// <summary>
		/// The integration account AS2 one-way agreement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendAgreement")]
		public AS2OneWayAgreement SendAgreement { get; set; }
	}
	
	/// <summary>
	/// The integration account AS2 one-way agreement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AS2OneWayAgreement
	{
		
		/// <summary>
		/// The AS2 agreement protocol settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="protocolSettings")]
		public AS2ProtocolSettings ProtocolSettings { get; set; }
		
		/// <summary>
		/// The integration account partner's business identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiverBusinessIdentity")]
		public BusinessIdentity ReceiverBusinessIdentity { get; set; }
		
		/// <summary>
		/// The integration account partner's business identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="senderBusinessIdentity")]
		public BusinessIdentity SenderBusinessIdentity { get; set; }
	}
	
	/// <summary>
	/// The AS2 agreement protocol settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AS2ProtocolSettings
	{
		
		/// <summary>
		/// The AS2 agreement acknowledgement connection settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="acknowledgementConnectionSettings")]
		public AS2AcknowledgementConnectionSettings AcknowledgementConnectionSettings { get; set; }
		
		/// <summary>
		/// The AS2 agreement envelope settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="envelopeSettings")]
		public AS2EnvelopeSettings EnvelopeSettings { get; set; }
		
		/// <summary>
		/// The AS2 agreement error settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errorSettings")]
		public AS2ErrorSettings ErrorSettings { get; set; }
		
		/// <summary>
		/// The AS2 agreement mdn settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mdnSettings")]
		public AS2MdnSettings MdnSettings { get; set; }
		
		/// <summary>
		/// The AS2 agreement message connection settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageConnectionSettings")]
		public AS2MessageConnectionSettings MessageConnectionSettings { get; set; }
		
		/// <summary>
		/// The AS2 agreement security settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="securitySettings")]
		public AS2SecuritySettings SecuritySettings { get; set; }
		
		/// <summary>
		/// The AS2 agreement validation settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="validationSettings")]
		public AS2ValidationSettings ValidationSettings { get; set; }
	}
	
	/// <summary>
	/// The AS2 agreement envelope settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AS2EnvelopeSettings
	{
		
		/// <summary>
		/// The value indicating whether to auto generate file name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="autogenerateFileName")]
		public bool AutogenerateFileName { get; set; }
		
		/// <summary>
		/// The template for file name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileNameTemplate")]
		public string FileNameTemplate { get; set; }
		
		/// <summary>
		/// The message content type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageContentType")]
		public string MessageContentType { get; set; }
		
		/// <summary>
		/// The value indicating whether to suspend message on file name generation error.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="suspendMessageOnFileNameGenerationError")]
		public bool SuspendMessageOnFileNameGenerationError { get; set; }
		
		/// <summary>
		/// The value indicating whether to transmit file name in mime header.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transmitFileNameInMimeHeader")]
		public bool TransmitFileNameInMimeHeader { get; set; }
	}
	
	/// <summary>
	/// The AS2 agreement error settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AS2ErrorSettings
	{
		
		/// <summary>
		/// The value indicating whether to resend message If MDN is not received.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resendIfMDNNotReceived")]
		public bool ResendIfMDNNotReceived { get; set; }
		
		/// <summary>
		/// The value indicating whether to suspend duplicate message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="suspendDuplicateMessage")]
		public bool SuspendDuplicateMessage { get; set; }
	}
	
	/// <summary>
	/// The AS2 agreement mdn settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AS2MdnSettings
	{
		
		/// <summary>
		/// The disposition notification to header value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dispositionNotificationTo")]
		public string DispositionNotificationTo { get; set; }
		
		/// <summary>
		/// The MDN text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mdnText")]
		public string MdnText { get; set; }
		
		/// <summary>
		/// The signing or hashing algorithm.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="micHashingAlgorithm")]
		public AS2MdnSettingsMicHashingAlgorithm MicHashingAlgorithm { get; set; }
		
		/// <summary>
		/// The value indicating whether to send or request a MDN.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="needMDN")]
		public bool NeedMDN { get; set; }
		
		/// <summary>
		/// The receipt delivery URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiptDeliveryUrl")]
		public string ReceiptDeliveryUrl { get; set; }
		
		/// <summary>
		/// The value indicating whether to send inbound MDN to message box.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendInboundMDNToMessageBox")]
		public bool SendInboundMDNToMessageBox { get; set; }
		
		/// <summary>
		/// The value indicating whether to send the asynchronous MDN.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendMDNAsynchronously")]
		public bool SendMDNAsynchronously { get; set; }
		
		/// <summary>
		/// The value indicating whether the MDN needs to be signed or not.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="signMDN")]
		public bool SignMDN { get; set; }
		
		/// <summary>
		/// The value indicating whether to sign the outbound MDN if optional.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="signOutboundMDNIfOptional")]
		public bool SignOutboundMDNIfOptional { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AS2MdnSettingsMicHashingAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MD5 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA2256 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA2384 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA2512 = 6,
	}
	
	/// <summary>
	/// The AS2 agreement message connection settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AS2MessageConnectionSettings
	{
		
		/// <summary>
		/// The value indicating whether to ignore mismatch in certificate name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ignoreCertificateNameMismatch")]
		public bool IgnoreCertificateNameMismatch { get; set; }
		
		/// <summary>
		/// The value indicating whether to keep the connection alive.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keepHttpConnectionAlive")]
		public bool KeepHttpConnectionAlive { get; set; }
		
		/// <summary>
		/// The value indicating whether to support HTTP status code 'CONTINUE'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="supportHttpStatusCodeContinue")]
		public bool SupportHttpStatusCodeContinue { get; set; }
		
		/// <summary>
		/// The value indicating whether to unfold the HTTP headers.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unfoldHttpHeaders")]
		public bool UnfoldHttpHeaders { get; set; }
	}
	
	/// <summary>
	/// The AS2 agreement security settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AS2SecuritySettings
	{
		
		/// <summary>
		/// The value indicating whether to enable NRR for inbound decoded messages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enableNRRForInboundDecodedMessages")]
		public bool EnableNRRForInboundDecodedMessages { get; set; }
		
		/// <summary>
		/// The value indicating whether to enable NRR for inbound encoded messages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enableNRRForInboundEncodedMessages")]
		public bool EnableNRRForInboundEncodedMessages { get; set; }
		
		/// <summary>
		/// The value indicating whether to enable NRR for inbound MDN.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enableNRRForInboundMDN")]
		public bool EnableNRRForInboundMDN { get; set; }
		
		/// <summary>
		/// The value indicating whether to enable NRR for outbound decoded messages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enableNRRForOutboundDecodedMessages")]
		public bool EnableNRRForOutboundDecodedMessages { get; set; }
		
		/// <summary>
		/// The value indicating whether to enable NRR for outbound encoded messages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enableNRRForOutboundEncodedMessages")]
		public bool EnableNRRForOutboundEncodedMessages { get; set; }
		
		/// <summary>
		/// The value indicating whether to enable NRR for outbound MDN.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enableNRRForOutboundMDN")]
		public bool EnableNRRForOutboundMDN { get; set; }
		
		/// <summary>
		/// The name of the encryption certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionCertificateName")]
		public string EncryptionCertificateName { get; set; }
		
		/// <summary>
		/// The value indicating whether to send or request a MDN.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="overrideGroupSigningCertificate")]
		public bool OverrideGroupSigningCertificate { get; set; }
		
		/// <summary>
		/// The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha2AlgorithmFormat")]
		public string Sha2AlgorithmFormat { get; set; }
		
		/// <summary>
		/// The name of the signing certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signingCertificateName")]
		public string SigningCertificateName { get; set; }
	}
	
	/// <summary>
	/// The AS2 agreement validation settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AS2ValidationSettings
	{
		
		/// <summary>
		/// The value indicating whether to check for certificate revocation list on receive.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checkCertificateRevocationListOnReceive")]
		public bool CheckCertificateRevocationListOnReceive { get; set; }
		
		/// <summary>
		/// The value indicating whether to check for certificate revocation list on send.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checkCertificateRevocationListOnSend")]
		public bool CheckCertificateRevocationListOnSend { get; set; }
		
		/// <summary>
		/// The value indicating whether to check for duplicate message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checkDuplicateMessage")]
		public bool CheckDuplicateMessage { get; set; }
		
		/// <summary>
		/// The value indicating whether the message has to be compressed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="compressMessage")]
		public bool CompressMessage { get; set; }
		
		/// <summary>
		/// The value indicating whether the message has to be encrypted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encryptMessage")]
		public bool EncryptMessage { get; set; }
		
		/// <summary>
		/// The encryption algorithm.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encryptionAlgorithm")]
		public AS2ValidationSettingsEncryptionAlgorithm EncryptionAlgorithm { get; set; }
		
		/// <summary>
		/// The number of days to look back for duplicate interchange.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interchangeDuplicatesValidityDays")]
		public int InterchangeDuplicatesValidityDays { get; set; }
		
		/// <summary>
		/// The value indicating whether to override incoming message properties with those in agreement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="overrideMessageProperties")]
		public bool OverrideMessageProperties { get; set; }
		
		/// <summary>
		/// The value indicating whether the message has to be signed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="signMessage")]
		public bool SignMessage { get; set; }
		
		/// <summary>
		/// The signing or hashing algorithm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signingAlgorithm")]
		public System.Nullable<AS2ValidationSettingsSigningAlgorithm> SigningAlgorithm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AS2ValidationSettingsEncryptionAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DES3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RC2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES128 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES192 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES256 = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AS2ValidationSettingsSigningAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA2256 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA2384 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA2512 = 5,
	}
	
	/// <summary>
	/// The integration account partner's business identity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BusinessIdentity
	{
		
		/// <summary>
		/// The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="qualifier")]
		public string Qualifier { get; set; }
		
		/// <summary>
		/// The user defined business identity value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The integration account agreement content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AgreementContent
	{
		
		/// <summary>
		/// The integration account AS2 agreement content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aS2")]
		public AS2AgreementContent AS2 { get; set; }
		
		/// <summary>
		/// The Edifact agreement content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="edifact")]
		public EdifactAgreementContent Edifact { get; set; }
		
		/// <summary>
		/// The X12 agreement content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="x12")]
		public X12AgreementContent X12 { get; set; }
	}
	
	/// <summary>
	/// The Edifact agreement content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EdifactAgreementContent
	{
		
		/// <summary>
		/// The Edifact one way agreement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiveAgreement")]
		public EdifactOneWayAgreement ReceiveAgreement { get; set; }
		
		/// <summary>
		/// The Edifact one way agreement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendAgreement")]
		public EdifactOneWayAgreement SendAgreement { get; set; }
	}
	
	/// <summary>
	/// The Edifact one way agreement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EdifactOneWayAgreement
	{
		
		/// <summary>
		/// The Edifact agreement protocol settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="protocolSettings")]
		public EdifactProtocolSettings ProtocolSettings { get; set; }
		
		/// <summary>
		/// The integration account partner's business identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiverBusinessIdentity")]
		public BusinessIdentity ReceiverBusinessIdentity { get; set; }
		
		/// <summary>
		/// The integration account partner's business identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="senderBusinessIdentity")]
		public BusinessIdentity SenderBusinessIdentity { get; set; }
	}
	
	/// <summary>
	/// The Edifact agreement protocol settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EdifactProtocolSettings
	{
		
		/// <summary>
		/// The Edifact agreement acknowledgement settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="acknowledgementSettings")]
		public EdifactAcknowledgementSettings AcknowledgementSettings { get; set; }
		
		/// <summary>
		/// The EDIFACT delimiter override settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="edifactDelimiterOverrides")]
		public EdifactDelimiterOverride[] EdifactDelimiterOverrides { get; set; }
		
		/// <summary>
		/// The EDIFACT envelope override settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="envelopeOverrides")]
		public EdifactEnvelopeOverride[] EnvelopeOverrides { get; set; }
		
		/// <summary>
		/// The Edifact agreement envelope settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="envelopeSettings")]
		public EdifactEnvelopeSettings EnvelopeSettings { get; set; }
		
		/// <summary>
		/// The Edifact agreement framing settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="framingSettings")]
		public EdifactFramingSettings FramingSettings { get; set; }
		
		/// <summary>
		/// The Edifact message filter for odata query.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageFilter")]
		public EdifactMessageFilter MessageFilter { get; set; }
		
		/// <summary>
		/// The EDIFACT message filter list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageFilterList")]
		public EdifactMessageIdentifier[] MessageFilterList { get; set; }
		
		/// <summary>
		/// The Edifact agreement protocol settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="processingSettings")]
		public EdifactProcessingSettings ProcessingSettings { get; set; }
		
		/// <summary>
		/// The EDIFACT schema references.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schemaReferences")]
		public EdifactSchemaReference[] SchemaReferences { get; set; }
		
		/// <summary>
		/// The EDIFACT validation override settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validationOverrides")]
		public EdifactValidationOverride[] ValidationOverrides { get; set; }
		
		/// <summary>
		/// The Edifact agreement validation settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="validationSettings")]
		public EdifactValidationSettings ValidationSettings { get; set; }
	}
	
	/// <summary>
	/// The Edifact agreement acknowledgement settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EdifactAcknowledgementSettings
	{
		
		/// <summary>
		/// The acknowledgement control number lower bound.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="acknowledgementControlNumberLowerBound")]
		public int AcknowledgementControlNumberLowerBound { get; set; }
		
		/// <summary>
		/// The acknowledgement control number prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acknowledgementControlNumberPrefix")]
		public string AcknowledgementControlNumberPrefix { get; set; }
		
		/// <summary>
		/// The acknowledgement control number suffix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acknowledgementControlNumberSuffix")]
		public string AcknowledgementControlNumberSuffix { get; set; }
		
		/// <summary>
		/// The acknowledgement control number upper bound.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="acknowledgementControlNumberUpperBound")]
		public int AcknowledgementControlNumberUpperBound { get; set; }
		
		/// <summary>
		/// The value indicating whether to batch functional acknowledgements.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="batchFunctionalAcknowledgements")]
		public bool BatchFunctionalAcknowledgements { get; set; }
		
		/// <summary>
		/// The value indicating whether to batch the technical acknowledgements.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="batchTechnicalAcknowledgements")]
		public bool BatchTechnicalAcknowledgements { get; set; }
		
		/// <summary>
		/// The value indicating whether functional acknowledgement is needed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="needFunctionalAcknowledgement")]
		public bool NeedFunctionalAcknowledgement { get; set; }
		
		/// <summary>
		/// The value indicating whether a loop is needed for valid messages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="needLoopForValidMessages")]
		public bool NeedLoopForValidMessages { get; set; }
		
		/// <summary>
		/// The value indicating whether technical acknowledgement is needed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="needTechnicalAcknowledgement")]
		public bool NeedTechnicalAcknowledgement { get; set; }
		
		/// <summary>
		/// The value indicating whether to rollover acknowledgement control number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rolloverAcknowledgementControlNumber")]
		public bool RolloverAcknowledgementControlNumber { get; set; }
		
		/// <summary>
		/// The value indicating whether to send synchronous acknowledgement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendSynchronousAcknowledgement")]
		public bool SendSynchronousAcknowledgement { get; set; }
	}
	
	/// <summary>
	/// The Edifact delimiter override settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EdifactDelimiterOverride
	{
		
		/// <summary>
		/// The component separator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentSeparator")]
		public int ComponentSeparator { get; set; }
		
		/// <summary>
		/// The data element separator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataElementSeparator")]
		public int DataElementSeparator { get; set; }
		
		/// <summary>
		/// The edifact decimal indicator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decimalPointIndicator")]
		public EdifactDelimiterOverrideDecimalPointIndicator DecimalPointIndicator { get; set; }
		
		/// <summary>
		/// The message association assigned code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageAssociationAssignedCode")]
		public string MessageAssociationAssignedCode { get; set; }
		
		/// <summary>
		/// The message id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
		
		/// <summary>
		/// The message release.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageRelease")]
		public string MessageRelease { get; set; }
		
		/// <summary>
		/// The message version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageVersion")]
		public string MessageVersion { get; set; }
		
		/// <summary>
		/// The release indicator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="releaseIndicator")]
		public int ReleaseIndicator { get; set; }
		
		/// <summary>
		/// The repetition separator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repetitionSeparator")]
		public int RepetitionSeparator { get; set; }
		
		/// <summary>
		/// The segment terminator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="segmentTerminator")]
		public int SegmentTerminator { get; set; }
		
		/// <summary>
		/// The segment terminator suffix.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="segmentTerminatorSuffix")]
		public EdifactDelimiterOverrideSegmentTerminatorSuffix SegmentTerminatorSuffix { get; set; }
		
		/// <summary>
		/// The target namespace on which this delimiter settings has to be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetNamespace")]
		public string TargetNamespace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EdifactDelimiterOverrideDecimalPointIndicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Comma = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Decimal = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EdifactDelimiterOverrideSegmentTerminatorSuffix
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LF = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRLF = 4,
	}
	
	/// <summary>
	/// The Edifact envelope override settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EdifactEnvelopeOverride
	{
		
		/// <summary>
		/// The application password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationPassword")]
		public string ApplicationPassword { get; set; }
		
		/// <summary>
		/// The association assigned code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associationAssignedCode")]
		public string AssociationAssignedCode { get; set; }
		
		/// <summary>
		/// The controlling agency code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controllingAgencyCode")]
		public string ControllingAgencyCode { get; set; }
		
		/// <summary>
		/// The functional group id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="functionalGroupId")]
		public string FunctionalGroupId { get; set; }
		
		/// <summary>
		/// The group header message release.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupHeaderMessageRelease")]
		public string GroupHeaderMessageRelease { get; set; }
		
		/// <summary>
		/// The group header message version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupHeaderMessageVersion")]
		public string GroupHeaderMessageVersion { get; set; }
		
		/// <summary>
		/// The message association assigned code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageAssociationAssignedCode")]
		public string MessageAssociationAssignedCode { get; set; }
		
		/// <summary>
		/// The message id on which this envelope settings has to be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
		
		/// <summary>
		/// The message release version on which this envelope settings has to be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageRelease")]
		public string MessageRelease { get; set; }
		
		/// <summary>
		/// The message version on which this envelope settings has to be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageVersion")]
		public string MessageVersion { get; set; }
		
		/// <summary>
		/// The receiver application id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverApplicationId")]
		public string ReceiverApplicationId { get; set; }
		
		/// <summary>
		/// The receiver application qualifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverApplicationQualifier")]
		public string ReceiverApplicationQualifier { get; set; }
		
		/// <summary>
		/// The sender application id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="senderApplicationId")]
		public string SenderApplicationId { get; set; }
		
		/// <summary>
		/// The sender application qualifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="senderApplicationQualifier")]
		public string SenderApplicationQualifier { get; set; }
		
		/// <summary>
		/// The target namespace on which this envelope settings has to be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetNamespace")]
		public string TargetNamespace { get; set; }
	}
	
	/// <summary>
	/// The Edifact agreement envelope settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EdifactEnvelopeSettings
	{
		
		/// <summary>
		/// The application reference id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationReferenceId")]
		public string ApplicationReferenceId { get; set; }
		
		/// <summary>
		/// The value indicating whether to apply delimiter string advice.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applyDelimiterStringAdvice")]
		public bool ApplyDelimiterStringAdvice { get; set; }
		
		/// <summary>
		/// The communication agreement id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="communicationAgreementId")]
		public string CommunicationAgreementId { get; set; }
		
		/// <summary>
		/// The value indicating whether to create grouping segments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createGroupingSegments")]
		public bool CreateGroupingSegments { get; set; }
		
		/// <summary>
		/// The value indicating whether to enable default group headers.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enableDefaultGroupHeaders")]
		public bool EnableDefaultGroupHeaders { get; set; }
		
		/// <summary>
		/// The functional group id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="functionalGroupId")]
		public string FunctionalGroupId { get; set; }
		
		/// <summary>
		/// The group application password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupApplicationPassword")]
		public string GroupApplicationPassword { get; set; }
		
		/// <summary>
		/// The group application receiver id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupApplicationReceiverId")]
		public string GroupApplicationReceiverId { get; set; }
		
		/// <summary>
		/// The group application receiver qualifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupApplicationReceiverQualifier")]
		public string GroupApplicationReceiverQualifier { get; set; }
		
		/// <summary>
		/// The group application sender id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupApplicationSenderId")]
		public string GroupApplicationSenderId { get; set; }
		
		/// <summary>
		/// The group application sender qualifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupApplicationSenderQualifier")]
		public string GroupApplicationSenderQualifier { get; set; }
		
		/// <summary>
		/// The group association assigned code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupAssociationAssignedCode")]
		public string GroupAssociationAssignedCode { get; set; }
		
		/// <summary>
		/// The group control number lower bound.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groupControlNumberLowerBound")]
		public long GroupControlNumberLowerBound { get; set; }
		
		/// <summary>
		/// The group control number prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupControlNumberPrefix")]
		public string GroupControlNumberPrefix { get; set; }
		
		/// <summary>
		/// The group control number suffix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupControlNumberSuffix")]
		public string GroupControlNumberSuffix { get; set; }
		
		/// <summary>
		/// The group control number upper bound.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groupControlNumberUpperBound")]
		public long GroupControlNumberUpperBound { get; set; }
		
		/// <summary>
		/// The group controlling agency code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupControllingAgencyCode")]
		public string GroupControllingAgencyCode { get; set; }
		
		/// <summary>
		/// The group message release.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupMessageRelease")]
		public string GroupMessageRelease { get; set; }
		
		/// <summary>
		/// The group message version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupMessageVersion")]
		public string GroupMessageVersion { get; set; }
		
		/// <summary>
		/// The interchange control number lower bound.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interchangeControlNumberLowerBound")]
		public long InterchangeControlNumberLowerBound { get; set; }
		
		/// <summary>
		/// The interchange control number prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interchangeControlNumberPrefix")]
		public string InterchangeControlNumberPrefix { get; set; }
		
		/// <summary>
		/// The interchange control number suffix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interchangeControlNumberSuffix")]
		public string InterchangeControlNumberSuffix { get; set; }
		
		/// <summary>
		/// The interchange control number upper bound.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interchangeControlNumberUpperBound")]
		public long InterchangeControlNumberUpperBound { get; set; }
		
		/// <summary>
		/// The value indicating whether the message is a test interchange.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isTestInterchange")]
		public bool IsTestInterchange { get; set; }
		
		/// <summary>
		/// The value indicating whether to overwrite existing transaction set control number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="overwriteExistingTransactionSetControlNumber")]
		public bool OverwriteExistingTransactionSetControlNumber { get; set; }
		
		/// <summary>
		/// The processing priority code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processingPriorityCode")]
		public string ProcessingPriorityCode { get; set; }
		
		/// <summary>
		/// The receiver internal identification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverInternalIdentification")]
		public string ReceiverInternalIdentification { get; set; }
		
		/// <summary>
		/// The receiver internal sub identification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverInternalSubIdentification")]
		public string ReceiverInternalSubIdentification { get; set; }
		
		/// <summary>
		/// The receiver reverse routing address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverReverseRoutingAddress")]
		public string ReceiverReverseRoutingAddress { get; set; }
		
		/// <summary>
		/// The recipient reference password qualifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipientReferencePasswordQualifier")]
		public string RecipientReferencePasswordQualifier { get; set; }
		
		/// <summary>
		/// The recipient reference password value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipientReferencePasswordValue")]
		public string RecipientReferencePasswordValue { get; set; }
		
		/// <summary>
		/// The value indicating whether to rollover group control number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rolloverGroupControlNumber")]
		public bool RolloverGroupControlNumber { get; set; }
		
		/// <summary>
		/// The value indicating whether to rollover interchange control number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rolloverInterchangeControlNumber")]
		public bool RolloverInterchangeControlNumber { get; set; }
		
		/// <summary>
		/// The value indicating whether to rollover transaction set control number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rolloverTransactionSetControlNumber")]
		public bool RolloverTransactionSetControlNumber { get; set; }
		
		/// <summary>
		/// The sender internal identification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="senderInternalIdentification")]
		public string SenderInternalIdentification { get; set; }
		
		/// <summary>
		/// The sender internal sub identification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="senderInternalSubIdentification")]
		public string SenderInternalSubIdentification { get; set; }
		
		/// <summary>
		/// The sender reverse routing address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="senderReverseRoutingAddress")]
		public string SenderReverseRoutingAddress { get; set; }
		
		/// <summary>
		/// The transaction set control number lower bound.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionSetControlNumberLowerBound")]
		public long TransactionSetControlNumberLowerBound { get; set; }
		
		/// <summary>
		/// The transaction set control number prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionSetControlNumberPrefix")]
		public string TransactionSetControlNumberPrefix { get; set; }
		
		/// <summary>
		/// The transaction set control number suffix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionSetControlNumberSuffix")]
		public string TransactionSetControlNumberSuffix { get; set; }
		
		/// <summary>
		/// The transaction set control number upper bound.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionSetControlNumberUpperBound")]
		public long TransactionSetControlNumberUpperBound { get; set; }
	}
	
	/// <summary>
	/// The Edifact agreement framing settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EdifactFramingSettings
	{
		
		/// <summary>
		/// The character encoding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterEncoding")]
		public string CharacterEncoding { get; set; }
		
		/// <summary>
		/// The edifact character set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="characterSet")]
		public EdifactFramingSettingsCharacterSet CharacterSet { get; set; }
		
		/// <summary>
		/// The component separator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentSeparator")]
		public int ComponentSeparator { get; set; }
		
		/// <summary>
		/// The data element separator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataElementSeparator")]
		public int DataElementSeparator { get; set; }
		
		/// <summary>
		/// The edifact decimal indicator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decimalPointIndicator")]
		public EdifactDelimiterOverrideDecimalPointIndicator DecimalPointIndicator { get; set; }
		
		/// <summary>
		/// The protocol version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="protocolVersion")]
		public int ProtocolVersion { get; set; }
		
		/// <summary>
		/// The release indicator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="releaseIndicator")]
		public int ReleaseIndicator { get; set; }
		
		/// <summary>
		/// The repetition separator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repetitionSeparator")]
		public int RepetitionSeparator { get; set; }
		
		/// <summary>
		/// The segment terminator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="segmentTerminator")]
		public int SegmentTerminator { get; set; }
		
		/// <summary>
		/// The segment terminator suffix.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="segmentTerminatorSuffix")]
		public EdifactDelimiterOverrideSegmentTerminatorSuffix SegmentTerminatorSuffix { get; set; }
		
		/// <summary>
		/// The service code list directory version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceCodeListDirectoryVersion")]
		public string ServiceCodeListDirectoryVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EdifactFramingSettingsCharacterSet
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOC = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOF = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOG = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOH = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOI = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOJ = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOK = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOX = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOY = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KECA = 14,
	}
	
	/// <summary>
	/// The Edifact message filter for odata query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EdifactMessageFilter
	{
		
		/// <summary>
		/// The message filter type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageFilterType")]
		public EdifactMessageFilterMessageFilterType MessageFilterType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EdifactMessageFilterMessageFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Include = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Exclude = 2,
	}
	
	/// <summary>
	/// The Edifact message identifier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EdifactMessageIdentifier
	{
		
		/// <summary>
		/// The message id on which this envelope settings has to be applied.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
	}
	
	/// <summary>
	/// The Edifact agreement protocol settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EdifactProcessingSettings
	{
		
		/// <summary>
		/// The value indicating whether to create empty xml tags for trailing separators.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createEmptyXmlTagsForTrailingSeparators")]
		public bool CreateEmptyXmlTagsForTrailingSeparators { get; set; }
		
		/// <summary>
		/// The value indicating whether to mask security information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maskSecurityInfo")]
		public bool MaskSecurityInfo { get; set; }
		
		/// <summary>
		/// The value indicating whether to preserve interchange.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="preserveInterchange")]
		public bool PreserveInterchange { get; set; }
		
		/// <summary>
		/// The value indicating whether to suspend interchange on error.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="suspendInterchangeOnError")]
		public bool SuspendInterchangeOnError { get; set; }
		
		/// <summary>
		/// The value indicating whether to use dot as decimal separator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="useDotAsDecimalSeparator")]
		public bool UseDotAsDecimalSeparator { get; set; }
	}
	
	/// <summary>
	/// The Edifact schema reference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EdifactSchemaReference
	{
		
		/// <summary>
		/// The association assigned code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associationAssignedCode")]
		public string AssociationAssignedCode { get; set; }
		
		/// <summary>
		/// The message id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
		
		/// <summary>
		/// The message release version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageRelease")]
		public string MessageRelease { get; set; }
		
		/// <summary>
		/// The message version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageVersion")]
		public string MessageVersion { get; set; }
		
		/// <summary>
		/// The schema name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schemaName")]
		public string SchemaName { get; set; }
		
		/// <summary>
		/// The sender application id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="senderApplicationId")]
		public string SenderApplicationId { get; set; }
		
		/// <summary>
		/// The sender application qualifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="senderApplicationQualifier")]
		public string SenderApplicationQualifier { get; set; }
	}
	
	/// <summary>
	/// The Edifact validation override settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EdifactValidationOverride
	{
		
		/// <summary>
		/// The value indicating whether to allow leading and trailing spaces and zeroes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allowLeadingAndTrailingSpacesAndZeroes")]
		public bool AllowLeadingAndTrailingSpacesAndZeroes { get; set; }
		
		/// <summary>
		/// The value indicating whether to validate character Set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enforceCharacterSet")]
		public bool EnforceCharacterSet { get; set; }
		
		/// <summary>
		/// The message id on which the validation settings has to be applied.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
		
		/// <summary>
		/// The trailing separator policy.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trailingSeparatorPolicy")]
		public EdifactValidationOverrideTrailingSeparatorPolicy TrailingSeparatorPolicy { get; set; }
		
		/// <summary>
		/// The value indicating whether to trim leading and trailing spaces and zeroes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trimLeadingAndTrailingSpacesAndZeroes")]
		public bool TrimLeadingAndTrailingSpacesAndZeroes { get; set; }
		
		/// <summary>
		/// The value indicating whether to validate EDI types.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="validateEDITypes")]
		public bool ValidateEDITypes { get; set; }
		
		/// <summary>
		/// The value indicating whether to validate XSD types.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="validateXSDTypes")]
		public bool ValidateXSDTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EdifactValidationOverrideTrailingSeparatorPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotAllowed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Optional = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mandatory = 3,
	}
	
	/// <summary>
	/// The Edifact agreement validation settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EdifactValidationSettings
	{
		
		/// <summary>
		/// The value indicating whether to allow leading and trailing spaces and zeroes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allowLeadingAndTrailingSpacesAndZeroes")]
		public bool AllowLeadingAndTrailingSpacesAndZeroes { get; set; }
		
		/// <summary>
		/// The value indicating whether to check for duplicate group control number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checkDuplicateGroupControlNumber")]
		public bool CheckDuplicateGroupControlNumber { get; set; }
		
		/// <summary>
		/// The value indicating whether to check for duplicate interchange control number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checkDuplicateInterchangeControlNumber")]
		public bool CheckDuplicateInterchangeControlNumber { get; set; }
		
		/// <summary>
		/// The value indicating whether to check for duplicate transaction set control number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checkDuplicateTransactionSetControlNumber")]
		public bool CheckDuplicateTransactionSetControlNumber { get; set; }
		
		/// <summary>
		/// The validity period of interchange control number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interchangeControlNumberValidityDays")]
		public int InterchangeControlNumberValidityDays { get; set; }
		
		/// <summary>
		/// The trailing separator policy.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trailingSeparatorPolicy")]
		public EdifactValidationOverrideTrailingSeparatorPolicy TrailingSeparatorPolicy { get; set; }
		
		/// <summary>
		/// The value indicating whether to trim leading and trailing spaces and zeroes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trimLeadingAndTrailingSpacesAndZeroes")]
		public bool TrimLeadingAndTrailingSpacesAndZeroes { get; set; }
		
		/// <summary>
		/// The value indicating whether to validate character set in the message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="validateCharacterSet")]
		public bool ValidateCharacterSet { get; set; }
		
		/// <summary>
		/// The value indicating whether to Whether to validate EDI types.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="validateEDITypes")]
		public bool ValidateEDITypes { get; set; }
		
		/// <summary>
		/// The value indicating whether to Whether to validate XSD types.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="validateXSDTypes")]
		public bool ValidateXSDTypes { get; set; }
	}
	
	/// <summary>
	/// The X12 agreement content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class X12AgreementContent
	{
		
		/// <summary>
		/// The X12 one-way agreement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiveAgreement")]
		public X12OneWayAgreement ReceiveAgreement { get; set; }
		
		/// <summary>
		/// The X12 one-way agreement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendAgreement")]
		public X12OneWayAgreement SendAgreement { get; set; }
	}
	
	/// <summary>
	/// The X12 one-way agreement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class X12OneWayAgreement
	{
		
		/// <summary>
		/// The X12 agreement protocol settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="protocolSettings")]
		public X12ProtocolSettings ProtocolSettings { get; set; }
		
		/// <summary>
		/// The integration account partner's business identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiverBusinessIdentity")]
		public BusinessIdentity ReceiverBusinessIdentity { get; set; }
		
		/// <summary>
		/// The integration account partner's business identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="senderBusinessIdentity")]
		public BusinessIdentity SenderBusinessIdentity { get; set; }
	}
	
	/// <summary>
	/// The X12 agreement protocol settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class X12ProtocolSettings
	{
		
		/// <summary>
		/// The X12 agreement acknowledgement settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="acknowledgementSettings")]
		public X12AcknowledgementSettings AcknowledgementSettings { get; set; }
		
		/// <summary>
		/// The X12 envelope override settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="envelopeOverrides")]
		public X12EnvelopeOverride[] EnvelopeOverrides { get; set; }
		
		/// <summary>
		/// The X12 agreement envelope settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="envelopeSettings")]
		public X12EnvelopeSettings EnvelopeSettings { get; set; }
		
		/// <summary>
		/// The X12 agreement framing settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="framingSettings")]
		public X12FramingSettings FramingSettings { get; set; }
		
		/// <summary>
		/// The X12 message filter for odata query.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageFilter")]
		public X12MessageFilter MessageFilter { get; set; }
		
		/// <summary>
		/// The X12 message filter list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageFilterList")]
		public X12MessageIdentifier[] MessageFilterList { get; set; }
		
		/// <summary>
		/// The X12 processing settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="processingSettings")]
		public X12ProcessingSettings ProcessingSettings { get; set; }
		
		/// <summary>
		/// The X12 schema references.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schemaReferences")]
		public X12SchemaReference[] SchemaReferences { get; set; }
		
		/// <summary>
		/// The X12 agreement security settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="securitySettings")]
		public X12SecuritySettings SecuritySettings { get; set; }
		
		/// <summary>
		/// The X12 validation override settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validationOverrides")]
		public X12ValidationOverride[] ValidationOverrides { get; set; }
		
		/// <summary>
		/// The X12 agreement validation settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="validationSettings")]
		public X12ValidationSettings ValidationSettings { get; set; }
		
		/// <summary>
		/// The X12 delimiter override settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="x12DelimiterOverrides")]
		public X12DelimiterOverrides[] X12DelimiterOverrides { get; set; }
	}
	
	/// <summary>
	/// The X12 agreement acknowledgement settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class X12AcknowledgementSettings
	{
		
		/// <summary>
		/// The acknowledgement control number lower bound.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="acknowledgementControlNumberLowerBound")]
		public int AcknowledgementControlNumberLowerBound { get; set; }
		
		/// <summary>
		/// The acknowledgement control number prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acknowledgementControlNumberPrefix")]
		public string AcknowledgementControlNumberPrefix { get; set; }
		
		/// <summary>
		/// The acknowledgement control number suffix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acknowledgementControlNumberSuffix")]
		public string AcknowledgementControlNumberSuffix { get; set; }
		
		/// <summary>
		/// The acknowledgement control number upper bound.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="acknowledgementControlNumberUpperBound")]
		public int AcknowledgementControlNumberUpperBound { get; set; }
		
		/// <summary>
		/// The value indicating whether to batch functional acknowledgements.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="batchFunctionalAcknowledgements")]
		public bool BatchFunctionalAcknowledgements { get; set; }
		
		/// <summary>
		/// The value indicating whether to batch implementation acknowledgements.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="batchImplementationAcknowledgements")]
		public bool BatchImplementationAcknowledgements { get; set; }
		
		/// <summary>
		/// The value indicating whether to batch the technical acknowledgements.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="batchTechnicalAcknowledgements")]
		public bool BatchTechnicalAcknowledgements { get; set; }
		
		/// <summary>
		/// The functional acknowledgement version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="functionalAcknowledgementVersion")]
		public string FunctionalAcknowledgementVersion { get; set; }
		
		/// <summary>
		/// The implementation acknowledgement version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="implementationAcknowledgementVersion")]
		public string ImplementationAcknowledgementVersion { get; set; }
		
		/// <summary>
		/// The value indicating whether functional acknowledgement is needed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="needFunctionalAcknowledgement")]
		public bool NeedFunctionalAcknowledgement { get; set; }
		
		/// <summary>
		/// The value indicating whether implementation acknowledgement is needed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="needImplementationAcknowledgement")]
		public bool NeedImplementationAcknowledgement { get; set; }
		
		/// <summary>
		/// The value indicating whether a loop is needed for valid messages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="needLoopForValidMessages")]
		public bool NeedLoopForValidMessages { get; set; }
		
		/// <summary>
		/// The value indicating whether technical acknowledgement is needed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="needTechnicalAcknowledgement")]
		public bool NeedTechnicalAcknowledgement { get; set; }
		
		/// <summary>
		/// The value indicating whether to rollover acknowledgement control number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rolloverAcknowledgementControlNumber")]
		public bool RolloverAcknowledgementControlNumber { get; set; }
		
		/// <summary>
		/// The value indicating whether to send synchronous acknowledgement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendSynchronousAcknowledgement")]
		public bool SendSynchronousAcknowledgement { get; set; }
	}
	
	/// <summary>
	/// The X12 envelope override settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class X12EnvelopeOverride
	{
		
		/// <summary>
		/// The x12 date format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dateFormat")]
		public X12EnvelopeOverrideDateFormat DateFormat { get; set; }
		
		/// <summary>
		/// The functional identifier code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="functionalIdentifierCode")]
		public string FunctionalIdentifierCode { get; set; }
		
		/// <summary>
		/// The header version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="headerVersion")]
		public string HeaderVersion { get; set; }
		
		/// <summary>
		/// The message id on which this envelope settings has to be applied.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
		
		/// <summary>
		/// The protocol version on which this envelope settings has to be applied.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="protocolVersion")]
		public string ProtocolVersion { get; set; }
		
		/// <summary>
		/// The receiver application id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiverApplicationId")]
		public string ReceiverApplicationId { get; set; }
		
		/// <summary>
		/// The responsible agency code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="responsibleAgencyCode")]
		public string ResponsibleAgencyCode { get; set; }
		
		/// <summary>
		/// The sender application id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="senderApplicationId")]
		public string SenderApplicationId { get; set; }
		
		/// <summary>
		/// The target namespace on which this envelope settings has to be applied.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetNamespace")]
		public string TargetNamespace { get; set; }
		
		/// <summary>
		/// The x12 time format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeFormat")]
		public X12EnvelopeOverrideTimeFormat TimeFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum X12EnvelopeOverrideDateFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CCYYMMDD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YYMMDD = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum X12EnvelopeOverrideTimeFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HHMM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HHMMSS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HHMMSSdd = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HHMMSSd = 4,
	}
	
	/// <summary>
	/// The X12 agreement envelope settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class X12EnvelopeSettings
	{
		
		/// <summary>
		/// The controls standards id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="controlStandardsId")]
		public int ControlStandardsId { get; set; }
		
		/// <summary>
		/// The control version number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="controlVersionNumber")]
		public string ControlVersionNumber { get; set; }
		
		/// <summary>
		/// The value indicating whether to enable default group headers.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enableDefaultGroupHeaders")]
		public bool EnableDefaultGroupHeaders { get; set; }
		
		/// <summary>
		/// The functional group id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="functionalGroupId")]
		public string FunctionalGroupId { get; set; }
		
		/// <summary>
		/// The group control number lower bound.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groupControlNumberLowerBound")]
		public int GroupControlNumberLowerBound { get; set; }
		
		/// <summary>
		/// The group control number upper bound.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groupControlNumberUpperBound")]
		public int GroupControlNumberUpperBound { get; set; }
		
		/// <summary>
		/// The group header agency code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groupHeaderAgencyCode")]
		public string GroupHeaderAgencyCode { get; set; }
		
		/// <summary>
		/// The x12 date format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groupHeaderDateFormat")]
		public X12EnvelopeOverrideDateFormat GroupHeaderDateFormat { get; set; }
		
		/// <summary>
		/// The x12 time format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groupHeaderTimeFormat")]
		public X12EnvelopeOverrideTimeFormat GroupHeaderTimeFormat { get; set; }
		
		/// <summary>
		/// The group header version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groupHeaderVersion")]
		public string GroupHeaderVersion { get; set; }
		
		/// <summary>
		/// The interchange  control number lower bound.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interchangeControlNumberLowerBound")]
		public int InterchangeControlNumberLowerBound { get; set; }
		
		/// <summary>
		/// The interchange  control number upper bound.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interchangeControlNumberUpperBound")]
		public int InterchangeControlNumberUpperBound { get; set; }
		
		/// <summary>
		/// The value indicating whether to overwrite existing transaction set control number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="overwriteExistingTransactionSetControlNumber")]
		public bool OverwriteExistingTransactionSetControlNumber { get; set; }
		
		/// <summary>
		/// The receiver application id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiverApplicationId")]
		public string ReceiverApplicationId { get; set; }
		
		/// <summary>
		/// The value indicating whether to rollover group control number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rolloverGroupControlNumber")]
		public bool RolloverGroupControlNumber { get; set; }
		
		/// <summary>
		/// The value indicating whether to rollover interchange control number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rolloverInterchangeControlNumber")]
		public bool RolloverInterchangeControlNumber { get; set; }
		
		/// <summary>
		/// The value indicating whether to rollover transaction set control number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rolloverTransactionSetControlNumber")]
		public bool RolloverTransactionSetControlNumber { get; set; }
		
		/// <summary>
		/// The sender application id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="senderApplicationId")]
		public string SenderApplicationId { get; set; }
		
		/// <summary>
		/// The transaction set control number lower bound.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionSetControlNumberLowerBound")]
		public int TransactionSetControlNumberLowerBound { get; set; }
		
		/// <summary>
		/// The transaction set control number prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionSetControlNumberPrefix")]
		public string TransactionSetControlNumberPrefix { get; set; }
		
		/// <summary>
		/// The transaction set control number suffix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionSetControlNumberSuffix")]
		public string TransactionSetControlNumberSuffix { get; set; }
		
		/// <summary>
		/// The transaction set control number upper bound.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionSetControlNumberUpperBound")]
		public int TransactionSetControlNumberUpperBound { get; set; }
		
		/// <summary>
		/// The usage indicator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="usageIndicator")]
		public X12EnvelopeSettingsUsageIndicator UsageIndicator { get; set; }
		
		/// <summary>
		/// The value indicating whether to use control standards id as repetition character.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="useControlStandardsIdAsRepetitionCharacter")]
		public bool UseControlStandardsIdAsRepetitionCharacter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum X12EnvelopeSettingsUsageIndicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Test = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Information = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Production = 3,
	}
	
	/// <summary>
	/// The X12 agreement framing settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class X12FramingSettings
	{
		
		/// <summary>
		/// The X12 character set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="characterSet")]
		public X12FramingSettingsCharacterSet CharacterSet { get; set; }
		
		/// <summary>
		/// The component separator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentSeparator")]
		public int ComponentSeparator { get; set; }
		
		/// <summary>
		/// The data element separator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataElementSeparator")]
		public int DataElementSeparator { get; set; }
		
		/// <summary>
		/// The replacement character.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replaceCharacter")]
		public int ReplaceCharacter { get; set; }
		
		/// <summary>
		/// The value indicating whether to replace separators in payload.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replaceSeparatorsInPayload")]
		public bool ReplaceSeparatorsInPayload { get; set; }
		
		/// <summary>
		/// The segment terminator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="segmentTerminator")]
		public int SegmentTerminator { get; set; }
		
		/// <summary>
		/// The segment terminator suffix.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="segmentTerminatorSuffix")]
		public EdifactDelimiterOverrideSegmentTerminatorSuffix SegmentTerminatorSuffix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum X12FramingSettingsCharacterSet
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Extended = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UTF8 = 3,
	}
	
	/// <summary>
	/// The X12 message filter for odata query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class X12MessageFilter
	{
		
		/// <summary>
		/// The message filter type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageFilterType")]
		public EdifactMessageFilterMessageFilterType MessageFilterType { get; set; }
	}
	
	/// <summary>
	/// The X12 message identifier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class X12MessageIdentifier
	{
		
		/// <summary>
		/// The message id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
	}
	
	/// <summary>
	/// The X12 processing settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class X12ProcessingSettings
	{
		
		/// <summary>
		/// The value indicating whether to convert numerical type to implied decimal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="convertImpliedDecimal")]
		public bool ConvertImpliedDecimal { get; set; }
		
		/// <summary>
		/// The value indicating whether to create empty xml tags for trailing separators.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createEmptyXmlTagsForTrailingSeparators")]
		public bool CreateEmptyXmlTagsForTrailingSeparators { get; set; }
		
		/// <summary>
		/// The value indicating whether to mask security information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maskSecurityInfo")]
		public bool MaskSecurityInfo { get; set; }
		
		/// <summary>
		/// The value indicating whether to preserve interchange.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="preserveInterchange")]
		public bool PreserveInterchange { get; set; }
		
		/// <summary>
		/// The value indicating whether to suspend interchange on error.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="suspendInterchangeOnError")]
		public bool SuspendInterchangeOnError { get; set; }
		
		/// <summary>
		/// The value indicating whether to use dot as decimal separator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="useDotAsDecimalSeparator")]
		public bool UseDotAsDecimalSeparator { get; set; }
	}
	
	/// <summary>
	/// The X12 schema reference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class X12SchemaReference
	{
		
		/// <summary>
		/// The message id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
		
		/// <summary>
		/// The schema name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schemaName")]
		public string SchemaName { get; set; }
		
		/// <summary>
		/// The schema version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schemaVersion")]
		public string SchemaVersion { get; set; }
		
		/// <summary>
		/// The sender application id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="senderApplicationId")]
		public string SenderApplicationId { get; set; }
	}
	
	/// <summary>
	/// The X12 agreement security settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class X12SecuritySettings
	{
		
		/// <summary>
		/// The authorization qualifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authorizationQualifier")]
		public string AuthorizationQualifier { get; set; }
		
		/// <summary>
		/// The authorization value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationValue")]
		public string AuthorizationValue { get; set; }
		
		/// <summary>
		/// The password value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordValue")]
		public string PasswordValue { get; set; }
		
		/// <summary>
		/// The security qualifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="securityQualifier")]
		public string SecurityQualifier { get; set; }
	}
	
	/// <summary>
	/// The X12 validation override settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class X12ValidationOverride
	{
		
		/// <summary>
		/// The value indicating whether to allow leading and trailing spaces and zeroes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allowLeadingAndTrailingSpacesAndZeroes")]
		public bool AllowLeadingAndTrailingSpacesAndZeroes { get; set; }
		
		/// <summary>
		/// The message id on which the validation settings has to be applied.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
		
		/// <summary>
		/// The trailing separator policy.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trailingSeparatorPolicy")]
		public EdifactValidationOverrideTrailingSeparatorPolicy TrailingSeparatorPolicy { get; set; }
		
		/// <summary>
		/// The value indicating whether to trim leading and trailing spaces and zeroes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trimLeadingAndTrailingSpacesAndZeroes")]
		public bool TrimLeadingAndTrailingSpacesAndZeroes { get; set; }
		
		/// <summary>
		/// The value indicating whether to validate character Set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="validateCharacterSet")]
		public bool ValidateCharacterSet { get; set; }
		
		/// <summary>
		/// The value indicating whether to validate EDI types.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="validateEDITypes")]
		public bool ValidateEDITypes { get; set; }
		
		/// <summary>
		/// The value indicating whether to validate XSD types.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="validateXSDTypes")]
		public bool ValidateXSDTypes { get; set; }
	}
	
	/// <summary>
	/// The X12 agreement validation settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class X12ValidationSettings
	{
		
		/// <summary>
		/// The value indicating whether to allow leading and trailing spaces and zeroes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allowLeadingAndTrailingSpacesAndZeroes")]
		public bool AllowLeadingAndTrailingSpacesAndZeroes { get; set; }
		
		/// <summary>
		/// The value indicating whether to check for duplicate group control number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checkDuplicateGroupControlNumber")]
		public bool CheckDuplicateGroupControlNumber { get; set; }
		
		/// <summary>
		/// The value indicating whether to check for duplicate interchange control number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checkDuplicateInterchangeControlNumber")]
		public bool CheckDuplicateInterchangeControlNumber { get; set; }
		
		/// <summary>
		/// The value indicating whether to check for duplicate transaction set control number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checkDuplicateTransactionSetControlNumber")]
		public bool CheckDuplicateTransactionSetControlNumber { get; set; }
		
		/// <summary>
		/// The validity period of interchange control number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interchangeControlNumberValidityDays")]
		public int InterchangeControlNumberValidityDays { get; set; }
		
		/// <summary>
		/// The trailing separator policy.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trailingSeparatorPolicy")]
		public EdifactValidationOverrideTrailingSeparatorPolicy TrailingSeparatorPolicy { get; set; }
		
		/// <summary>
		/// The value indicating whether to trim leading and trailing spaces and zeroes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trimLeadingAndTrailingSpacesAndZeroes")]
		public bool TrimLeadingAndTrailingSpacesAndZeroes { get; set; }
		
		/// <summary>
		/// The value indicating whether to validate character set in the message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="validateCharacterSet")]
		public bool ValidateCharacterSet { get; set; }
		
		/// <summary>
		/// The value indicating whether to Whether to validate EDI types.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="validateEDITypes")]
		public bool ValidateEDITypes { get; set; }
		
		/// <summary>
		/// The value indicating whether to Whether to validate XSD types.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="validateXSDTypes")]
		public bool ValidateXSDTypes { get; set; }
	}
	
	/// <summary>
	/// The X12 delimiter override settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class X12DelimiterOverrides
	{
		
		/// <summary>
		/// The component separator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentSeparator")]
		public int ComponentSeparator { get; set; }
		
		/// <summary>
		/// The data element separator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataElementSeparator")]
		public int DataElementSeparator { get; set; }
		
		/// <summary>
		/// The message id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
		
		/// <summary>
		/// The protocol version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocolVersion")]
		public string ProtocolVersion { get; set; }
		
		/// <summary>
		/// The replacement character.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replaceCharacter")]
		public int ReplaceCharacter { get; set; }
		
		/// <summary>
		/// The value indicating whether to replace separators in payload.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replaceSeparatorsInPayload")]
		public bool ReplaceSeparatorsInPayload { get; set; }
		
		/// <summary>
		/// The segment terminator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="segmentTerminator")]
		public int SegmentTerminator { get; set; }
		
		/// <summary>
		/// The segment terminator suffix.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="segmentTerminatorSuffix")]
		public EdifactDelimiterOverrideSegmentTerminatorSuffix SegmentTerminatorSuffix { get; set; }
		
		/// <summary>
		/// The target namespace on which this delimiter settings has to be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetNamespace")]
		public string TargetNamespace { get; set; }
	}
	
	/// <summary>
	/// The agreement type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AgreementType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AS2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X12 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Edifact = 3,
	}
	
	/// <summary>
	/// The API deployment parameter metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiDeploymentParameterMetadata
	{
		
		/// <summary>
		/// The description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Indicates whether its required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRequired")]
		public System.Nullable<System.Boolean> IsRequired { get; set; }
		
		/// <summary>
		/// The type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The Api deployment parameter visibility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public System.Nullable<ApiDeploymentParameterMetadataVisibility> Visibility { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApiDeploymentParameterMetadataVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Internal = 2,
	}
	
	/// <summary>
	/// The API deployment parameters metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiDeploymentParameterMetadataSet
	{
		
		/// <summary>
		/// The API deployment parameter metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageContentLink")]
		public ApiDeploymentParameterMetadata PackageContentLink { get; set; }
		
		/// <summary>
		/// The API deployment parameter metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redisCacheConnectionString")]
		public ApiDeploymentParameterMetadata RedisCacheConnectionString { get; set; }
	}
	
	/// <summary>
	/// The Api deployment parameter visibility.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApiDeploymentParameterVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Internal = 2,
	}
	
	/// <summary>
	/// The api operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiOperation
	{
		
		/// <summary>
		/// The api operations properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ApiOperationPropertiesDefinition Properties { get; set; }
	}
	
	/// <summary>
	/// The api operations properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiOperationPropertiesDefinition
	{
		
		/// <summary>
		/// The Api Operation Annotation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotation")]
		public ApiOperationAnnotation Annotation { get; set; }
		
		/// <summary>
		/// The Api reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="api")]
		public ApiReference Api { get; set; }
		
		/// <summary>
		/// The description of the api operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The swagger schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputsDefinition")]
		public SwaggerSchema InputsDefinition { get; set; }
		
		/// <summary>
		/// Indicates whether the API operation is notification or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isNotification")]
		public System.Nullable<System.Boolean> IsNotification { get; set; }
		
		/// <summary>
		/// Indicates whether the API operation is webhook or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isWebhook")]
		public System.Nullable<System.Boolean> IsWebhook { get; set; }
		
		/// <summary>
		/// Indicates whether the api operation is pageable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageable")]
		public System.Nullable<System.Boolean> Pageable { get; set; }
		
		/// <summary>
		/// The operation responses definition schemas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responsesDefinition")]
		public System.Collections.Generic.Dictionary<string, SwaggerSchema> ResponsesDefinition { get; set; }
		
		/// <summary>
		/// The summary of the api operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// The trigger type of api operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trigger")]
		public string Trigger { get; set; }
		
		/// <summary>
		/// The trigger hint for the api operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerHint")]
		public string TriggerHint { get; set; }
		
		/// <summary>
		/// The visibility of the api operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public string Visibility { get; set; }
	}
	
	/// <summary>
	/// The Api Operation Annotation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiOperationAnnotation
	{
		
		/// <summary>
		/// The family.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// The revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// The status annotation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ApiOperationAnnotationStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApiOperationAnnotationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Preview = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Production = 2,
	}
	
	/// <summary>
	/// The Api reference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiReference
	{
		
		/// <summary>
		/// The brand color of the api.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandColor")]
		public string BrandColor { get; set; }
		
		/// <summary>
		/// The Api tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<ApiReferenceCategory> Category { get; set; }
		
		/// <summary>
		/// The description of the api.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The display name of the api.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The icon uri of the api.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconUri")]
		public string IconUri { get; set; }
		
		/// <summary>
		/// The resource reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationServiceEnvironment")]
		public ResourceReference IntegrationServiceEnvironment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="swagger")]
		public Object Swagger { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApiReferenceCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enterprise = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium = 3,
	}
	
	/// <summary>
	/// The resource reference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceReference
	{
		
		/// <summary>
		/// The resource id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Gets the resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Gets the resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Object
	{
	}
	
	/// <summary>
	/// The swagger schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SwaggerSchema
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalProperties")]
		public Object AdditionalProperties { get; set; }
		
		/// <summary>
		/// The schemas which must pass validation when this schema is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allOf")]
		public SwaggerSchema[] AllOf { get; set; }
		
		/// <summary>
		/// The discriminator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discriminator")]
		public string Discriminator { get; set; }
		
		/// <summary>
		/// The swagger custom dynamic list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicListNew")]
		public SwaggerCustomDynamicList DynamicListNew { get; set; }
		
		/// <summary>
		/// The swagger custom dynamic properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicSchemaNew")]
		public SwaggerCustomDynamicProperties DynamicSchemaNew { get; set; }
		
		/// <summary>
		/// The swagger custom dynamic schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicSchemaOld")]
		public SwaggerCustomDynamicSchema DynamicSchemaOld { get; set; }
		
		/// <summary>
		/// The swagger custom dynamic tree.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicTree")]
		public SwaggerCustomDynamicTree DynamicTree { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="example")]
		public Object Example { get; set; }
		
		/// <summary>
		/// The swagger external documentation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalDocs")]
		public SwaggerExternalDocumentation ExternalDocs { get; set; }
		
		/// <summary>
		/// The swagger schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public SwaggerSchema Items { get; set; }
		
		/// <summary>
		/// The maximum number of allowed properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxProperties")]
		public System.Nullable<System.Int32> MaxProperties { get; set; }
		
		/// <summary>
		/// The minimum number of allowed properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minProperties")]
		public System.Nullable<System.Int32> MinProperties { get; set; }
		
		/// <summary>
		/// Indicates the notification url extension. If this is set, the property's value should be a callback url for a webhook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationUrlExtension")]
		public System.Nullable<System.Boolean> NotificationUrlExtension { get; set; }
		
		/// <summary>
		/// The object properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, SwaggerSchema> Properties { get; set; }
		
		/// <summary>
		/// Indicates whether this property must be present in the a request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// The reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// The object required properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="required")]
		public string[] Required { get; set; }
		
		/// <summary>
		/// The title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The swagger schema type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<SwaggerSchemaType> Type { get; set; }
		
		/// <summary>
		/// The Swagger XML.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xml")]
		public SwaggerXml Xml { get; set; }
	}
	
	/// <summary>
	/// The swagger custom dynamic list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SwaggerCustomDynamicList
	{
		
		/// <summary>
		/// The built in operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="builtInOperation")]
		public string BuiltInOperation { get; set; }
		
		/// <summary>
		/// The path to an item property which defines the display name of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemTitlePath")]
		public string ItemTitlePath { get; set; }
		
		/// <summary>
		/// The path to a property which defines the value which should be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemValuePath")]
		public string ItemValuePath { get; set; }
		
		/// <summary>
		/// The path to a response property (relative to the response object, not the response body) which contains an array of dynamic value items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPath")]
		public string ItemsPath { get; set; }
		
		/// <summary>
		/// The operation id to fetch dynamic schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, SwaggerCustomDynamicProperties> Parameters { get; set; }
	}
	
	/// <summary>
	/// The swagger custom dynamic properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SwaggerCustomDynamicProperties
	{
		
		/// <summary>
		/// The operation id to fetch dynamic schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The operation parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, SwaggerCustomDynamicProperties> Parameters { get; set; }
		
		/// <summary>
		/// Json pointer to the dynamic schema on the response body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valuePath")]
		public string ValuePath { get; set; }
	}
	
	/// <summary>
	/// The swagger custom dynamic schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SwaggerCustomDynamicSchema
	{
		
		/// <summary>
		/// The operation id to fetch dynamic schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The operation parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, Object> Parameters { get; set; }
		
		/// <summary>
		/// Json pointer to the dynamic schema on the response body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valuePath")]
		public string ValuePath { get; set; }
	}
	
	/// <summary>
	/// The swagger custom dynamic tree.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SwaggerCustomDynamicTree
	{
		
		/// <summary>
		/// The swagger tree command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="browse")]
		public SwaggerCustomDynamicTreeCommand Browse { get; set; }
		
		/// <summary>
		/// The swagger tree command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="open")]
		public SwaggerCustomDynamicTreeCommand Open { get; set; }
		
		/// <summary>
		/// The swagger custom dynamic tree settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public SwaggerCustomDynamicTreeSettings Settings { get; set; }
	}
	
	/// <summary>
	/// The swagger tree command.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SwaggerCustomDynamicTreeCommand
	{
		
		/// <summary>
		/// The path to an item property which defines the display name of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemFullTitlePath")]
		public string ItemFullTitlePath { get; set; }
		
		/// <summary>
		/// The path to an item property which defines the display name of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemIsParent")]
		public string ItemIsParent { get; set; }
		
		/// <summary>
		/// The path to an item property which defines the display name of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemTitlePath")]
		public string ItemTitlePath { get; set; }
		
		/// <summary>
		/// The path to an item property which defines the display name of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemValuePath")]
		public string ItemValuePath { get; set; }
		
		/// <summary>
		/// The path to an item property which defines the display name of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPath")]
		public string ItemsPath { get; set; }
		
		/// <summary>
		/// The path to an item property which defines the display name of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, SwaggerCustomDynamicTreeParameter> Parameters { get; set; }
		
		/// <summary>
		/// The path to an item property which defines the display name of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectableFilter")]
		public string SelectableFilter { get; set; }
	}
	
	/// <summary>
	/// The swagger custom dynamic tree parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SwaggerCustomDynamicTreeParameter
	{
		
		/// <summary>
		/// The parameter reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameterReference")]
		public string ParameterReference { get; set; }
		
		/// <summary>
		/// Indicates whether the parameter is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		/// <summary>
		/// Gets or sets a path to a property in the currently selected item to pass as a value to a parameter for the given operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedItemValuePath")]
		public string SelectedItemValuePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Object Value { get; set; }
	}
	
	/// <summary>
	/// The swagger custom dynamic tree settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SwaggerCustomDynamicTreeSettings
	{
		
		/// <summary>
		/// Indicates whether leaf nodes can be selected.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CanSelectLeafNodes { get; set; }
		
		/// <summary>
		/// Indicates whether parent nodes can be selected.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CanSelectParentNodes { get; set; }
	}
	
	/// <summary>
	/// The swagger external documentation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SwaggerExternalDocumentation
	{
		
		/// <summary>
		/// The document description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The vendor extensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extensions")]
		public System.Collections.Generic.Dictionary<string, Object> Extensions { get; set; }
		
		/// <summary>
		/// The documentation Uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SwaggerSchemaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Number = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Integer = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Boolean = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Array = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		File = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Object = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Null = 7,
	}
	
	/// <summary>
	/// The Swagger XML.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SwaggerXml
	{
		
		/// <summary>
		/// Indicates whether the property should be an attribute instead of an element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public System.Nullable<System.Boolean> Attribute { get; set; }
		
		/// <summary>
		/// The vendor extensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extensions")]
		public System.Collections.Generic.Dictionary<string, Object> Extensions { get; set; }
		
		/// <summary>
		/// The xml element or attribute name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The xml namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		/// <summary>
		/// The name prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Indicates whether the array elements are wrapped in a container element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wrapped")]
		public System.Nullable<System.Boolean> Wrapped { get; set; }
	}
	
	/// <summary>
	/// The list of managed API operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiOperationListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The api operation definitions for an API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ApiOperation[] Value { get; set; }
	}
	
	/// <summary>
	/// The API backend service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiResourceBackendService
	{
		
		/// <summary>
		/// The service URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceUrl")]
		public string ServiceUrl { get; set; }
	}
	
	/// <summary>
	/// The Api resource definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiResourceDefinitions
	{
		
		/// <summary>
		/// The modified swagger url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedSwaggerUrl")]
		public string ModifiedSwaggerUrl { get; set; }
		
		/// <summary>
		/// The original swagger url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalSwaggerUrl")]
		public string OriginalSwaggerUrl { get; set; }
	}
	
	/// <summary>
	/// The API general information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiResourceGeneralInformation
	{
		
		/// <summary>
		/// The description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The icon url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconUrl")]
		public string IconUrl { get; set; }
		
		/// <summary>
		/// The release tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releaseTag")]
		public string ReleaseTag { get; set; }
		
		/// <summary>
		/// The terms of use url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="termsOfUseUrl")]
		public string TermsOfUseUrl { get; set; }
		
		/// <summary>
		/// The Api tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public ApiReferenceCategory Tier { get; set; }
	}
	
	/// <summary>
	/// The api resource metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiResourceMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<ApiResourceMetadataApiType> ApiType { get; set; }
		
		/// <summary>
		/// The brand color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandColor")]
		public string BrandColor { get; set; }
		
		/// <summary>
		/// The connection type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionType")]
		public string ConnectionType { get; set; }
		
		/// <summary>
		/// The API deployment parameters metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentParameters")]
		public ApiDeploymentParameterMetadataSet DeploymentParameters { get; set; }
		
		/// <summary>
		/// The hide key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hideKey")]
		public string HideKey { get; set; }
		
		/// <summary>
		/// The workflow provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<ApiResourceMetadataProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// The source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// The tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The WSDL import method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wsdlImportMethod")]
		public System.Nullable<ApiResourceMetadataWsdlImportMethod> WsdlImportMethod { get; set; }
		
		/// <summary>
		/// The WSDL service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wsdlService")]
		public WsdlService WsdlService { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApiResourceMetadataApiType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rest = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Soap = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApiResourceMetadataProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accepted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Moving = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Registering = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Registered = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unregistering = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unregistered = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 17,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApiResourceMetadataWsdlImportMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SoapToRest = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SoapPassThrough = 2,
	}
	
	/// <summary>
	/// The WSDL service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WsdlService
	{
		
		/// <summary>
		/// The list of endpoints' qualified names.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] EndpointQualifiedNames { get; set; }
		
		/// <summary>
		/// The qualified name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="qualifiedName")]
		public string QualifiedName { get; set; }
	}
	
	/// <summary>
	/// The API resource policies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiResourcePolicies
	{
		
		/// <summary>
		/// The API level only policies XML as embedded content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The content link to the policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLink")]
		public string ContentLink { get; set; }
	}
	
	/// <summary>
	/// The API resource properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiResourceProperties
	{
		
		/// <summary>
		/// The API definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiDefinitionUrl")]
		public string ApiDefinitionUrl { get; set; }
		
		/// <summary>
		/// The Api resource definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiDefinitions")]
		public ApiResourceDefinitions ApiDefinitions { get; set; }
		
		/// <summary>
		/// The API backend service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backendService")]
		public ApiResourceBackendService BackendService { get; set; }
		
		/// <summary>
		/// The capabilities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public string[] Capabilities { get; set; }
		
		/// <summary>
		/// The Api tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ApiReferenceCategory Category { get; set; }
		
		/// <summary>
		/// The connection parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionParameters")]
		public System.Collections.Generic.Dictionary<string, Object> ConnectionParameters { get; set; }
		
		/// <summary>
		/// The API general information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generalInformation")]
		public ApiResourceGeneralInformation GeneralInformation { get; set; }
		
		/// <summary>
		/// The resource reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationServiceEnvironment")]
		public ResourceReference IntegrationServiceEnvironment { get; set; }
		
		/// <summary>
		/// The api resource metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ApiResourceMetadata Metadata { get; set; }
		
		/// <summary>
		/// The name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The API resource policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public ApiResourcePolicies Policies { get; set; }
		
		/// <summary>
		/// The workflow provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ApiResourceMetadataProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The runtime urls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeUrls")]
		public string[] RuntimeUrls { get; set; }
	}
	
	/// <summary>
	/// The Api tier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApiTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enterprise = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApiType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rest = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Soap = 2,
	}
	
	/// <summary>
	/// The artifact content properties definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactContentPropertiesDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public object Content { get; set; }
		
		/// <summary>
		/// The content link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLink")]
		public ContentLink ContentLink { get; set; }
		
		/// <summary>
		/// The content type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
	}
	
	/// <summary>
	/// The content link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContentLink
	{
		
		/// <summary>
		/// The content hash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentHash")]
		public ContentHash ContentHash { get; set; }
		
		/// <summary>
		/// The content size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentSize")]
		public System.Nullable<System.Int64> ContentSize { get; set; }
		
		/// <summary>
		/// The content version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentVersion")]
		public string ContentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public Object Metadata { get; set; }
		
		/// <summary>
		/// The content link URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// The content hash.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContentHash
	{
		
		/// <summary>
		/// The algorithm of the content hash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public string Algorithm { get; set; }
		
		/// <summary>
		/// The value of the content hash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The artifact properties definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactProperties
	{
		
		/// <summary>
		/// The artifact changed time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changedTime")]
		public System.Nullable<System.DateTimeOffset> ChangedTime { get; set; }
		
		/// <summary>
		/// The artifact creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public object Metadata { get; set; }
	}
	
	/// <summary>
	/// A collection of assembly definitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AssemblyCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AssemblyDefinition[] Value { get; set; }
	}
	
	/// <summary>
	/// The assembly definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AssemblyDefinition
	{
		
		/// <summary>
		/// The assembly properties definition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AssemblyProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The assembly properties definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AssemblyProperties
	{
		
		/// <summary>
		/// The assembly culture.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assemblyCulture")]
		public string AssemblyCulture { get; set; }
		
		/// <summary>
		/// The assembly name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="assemblyName")]
		public string AssemblyName { get; set; }
		
		/// <summary>
		/// The assembly public key token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assemblyPublicKeyToken")]
		public string AssemblyPublicKeyToken { get; set; }
		
		/// <summary>
		/// The assembly version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assemblyVersion")]
		public string AssemblyVersion { get; set; }
	}
	
	/// <summary>
	/// The Azure async operation state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AzureAsyncOperationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 3,
	}
	
	/// <summary>
	/// The azure resource error info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureResourceErrorInfo
	{
		
		/// <summary>
		/// The error details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public AzureResourceErrorInfo[] Details { get; set; }
		
		/// <summary>
		/// The error message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The B2B partner content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class B2BPartnerContent
	{
		
		/// <summary>
		/// The list of partner business identities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessIdentities")]
		public BusinessIdentity[] BusinessIdentities { get; set; }
	}
	
	/// <summary>
	/// The batch configuration resource definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchConfiguration
	{
		
		/// <summary>
		/// The batch configuration properties definition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public BatchConfigurationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The batch configuration properties definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchConfigurationProperties
	{
		
		/// <summary>
		/// The name of the batch group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="batchGroupName")]
		public string BatchGroupName { get; set; }
		
		/// <summary>
		/// The changed time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changedTime")]
		public System.Nullable<System.DateTimeOffset> ChangedTime { get; set; }
		
		/// <summary>
		/// The created time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// The batch release criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="releaseCriteria")]
		public BatchReleaseCriteria ReleaseCriteria { get; set; }
	}
	
	/// <summary>
	/// The batch release criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchReleaseCriteria
	{
		
		/// <summary>
		/// The batch size in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchSize")]
		public System.Nullable<System.Int32> BatchSize { get; set; }
		
		/// <summary>
		/// The message count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageCount")]
		public System.Nullable<System.Int32> MessageCount { get; set; }
		
		/// <summary>
		/// The workflow trigger recurrence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurrence")]
		public WorkflowTriggerRecurrence Recurrence { get; set; }
	}
	
	/// <summary>
	/// The workflow trigger recurrence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowTriggerRecurrence
	{
		
		/// <summary>
		/// The end time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The recurrence frequency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public System.Nullable<WorkflowTriggerRecurrenceFrequency> Frequency { get; set; }
		
		/// <summary>
		/// The interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		/// <summary>
		/// The recurrence schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public RecurrenceSchedule Schedule { get; set; }
		
		/// <summary>
		/// The start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum WorkflowTriggerRecurrenceFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Second = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minute = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hour = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Year = 7,
	}
	
	/// <summary>
	/// The recurrence schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecurrenceSchedule
	{
		
		/// <summary>
		/// The hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public int[] Hours { get; set; }
		
		/// <summary>
		/// The minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutes")]
		public int[] Minutes { get; set; }
		
		/// <summary>
		/// The month days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthDays")]
		public int[] MonthDays { get; set; }
		
		/// <summary>
		/// The monthly occurrences.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthlyOccurrences")]
		public RecurrenceScheduleOccurrence[] MonthlyOccurrences { get; set; }
		
		/// <summary>
		/// The days of the week.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weekDays")]
		public RecurrenceScheduleOccurrenceDay[] WeekDays { get; set; }
	}
	
	/// <summary>
	/// The recurrence schedule occurrence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecurrenceScheduleOccurrence
	{
		
		/// <summary>
		/// The day of the week.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<RecurrenceScheduleOccurrenceDay> Day { get; set; }
		
		/// <summary>
		/// The occurrence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occurrence")]
		public System.Nullable<System.Int32> Occurrence { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RecurrenceScheduleOccurrenceDay
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sunday = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monday = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tuesday = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Wednesday = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Thursday = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Friday = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Saturday = 6,
	}
	
	/// <summary>
	/// A collection of batch configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchConfigurationCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public BatchConfiguration[] Value { get; set; }
	}
	
	/// <summary>
	/// The callback url.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CallbackUrl
	{
		
		/// <summary>
		/// The URL value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The correlation property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Correlation
	{
		
		/// <summary>
		/// The client tracking id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientTrackingId")]
		public string ClientTrackingId { get; set; }
	}
	
	/// <summary>
	/// The day of the week.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DayOfWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sunday = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monday = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tuesday = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Wednesday = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Thursday = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Friday = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Saturday = 6,
	}
	
	/// <summary>
	/// The edifact character set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EdifactCharacterSet
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOC = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOF = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOG = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOH = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOI = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOJ = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOK = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOX = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNOY = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KECA = 14,
	}
	
	/// <summary>
	/// The edifact decimal indicator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EdifactDecimalIndicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Comma = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Decimal = 2,
	}
	
	/// <summary>
	/// The encryption algorithm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EncryptionAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DES3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RC2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES128 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES192 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES256 = 6,
	}
	
	/// <summary>
	/// The error info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorInfo
	{
		
		/// <summary>
		/// The error code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
	}
	
	/// <summary>
	/// Error properties indicate why the Logic service was not able to process the incoming request. The reason is provided in the error message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorProperties
	{
		
		/// <summary>
		/// Error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Error response indicates Logic service is not able to process the incoming request. The error property contains the error details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error properties indicate why the Logic service was not able to process the incoming request. The reason is provided in the error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorProperties Error { get; set; }
	}
	
	/// <summary>
	/// The error response code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ErrorResponseCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IntegrationServiceEnvironmentNotFound = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalServerError = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidOperationId = 3,
	}
	
	/// <summary>
	/// The event level.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EventLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LogAlways = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Critical = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Warning = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Informational = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Verbose = 5,
	}
	
	/// <summary>
	/// The expression.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Expression
	{
		
		/// <summary>
		/// The azure resource error info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public AzureResourceErrorInfo Error { get; set; }
		
		/// <summary>
		/// The sub expressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subexpressions")]
		public Expression[] Subexpressions { get; set; }
		
		/// <summary>
		/// The text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	/// <summary>
	/// The expression root.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressionRoot
	{
		
		/// <summary>
		/// The path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// The expression traces.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressionTraces
	{
		
		[System.Runtime.Serialization.DataMember(Name="inputs")]
		public ExpressionRoot[] Inputs { get; set; }
	}
	
	/// <summary>
	/// The extended error info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExtendedErrorInfo
	{
		
		/// <summary>
		/// The error response code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public ErrorResponseCode Code { get; set; }
		
		/// <summary>
		/// The error message details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ExtendedErrorInfo[] Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="innerError")]
		public Object InnerError { get; set; }
		
		/// <summary>
		/// The error message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The flow endpoints configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FlowEndpoints
	{
		
		/// <summary>
		/// The access endpoint ip address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessEndpointIpAddresses")]
		public IpAddress[] AccessEndpointIpAddresses { get; set; }
		
		/// <summary>
		/// The outgoing ip address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outgoingIpAddresses")]
		public IpAddress[] OutgoingIpAddresses { get; set; }
	}
	
	/// <summary>
	/// The ip address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IpAddress
	{
		
		/// <summary>
		/// The address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
	}
	
	/// <summary>
	/// The endpoints configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FlowEndpointsConfiguration
	{
		
		/// <summary>
		/// The flow endpoints configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connector")]
		public FlowEndpoints Connector { get; set; }
		
		/// <summary>
		/// The flow endpoints configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workflow")]
		public FlowEndpoints Workflow { get; set; }
	}
	
	/// <summary>
	/// The parameters to generate upgraded definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GenerateUpgradedDefinitionParameters
	{
		
		/// <summary>
		/// The target schema version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetSchemaVersion")]
		public string TargetSchemaVersion { get; set; }
	}
	
	/// <summary>
	/// The callback url parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetCallbackUrlParameters
	{
		
		/// <summary>
		/// The key type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyType")]
		public System.Nullable<GetCallbackUrlParametersKeyType> KeyType { get; set; }
		
		/// <summary>
		/// The expiry time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notAfter")]
		public System.Nullable<System.DateTimeOffset> NotAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum GetCallbackUrlParametersKeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Primary = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Secondary = 2,
	}
	
	/// <summary>
	/// The signing or hashing algorithm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum HashingAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MD5 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA2256 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA2384 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA2512 = 6,
	}
	
	/// <summary>
	/// The integration account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccount
	{
		
		/// <summary>
		/// The integration account properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public IntegrationAccountProperties Properties { get; set; }
		
		/// <summary>
		/// The integration account sku.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public IntegrationAccountSku Sku { get; set; }
	}
	
	/// <summary>
	/// The integration account properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountProperties
	{
		
		/// <summary>
		/// The integration service environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationServiceEnvironment")]
		public IntegrationServiceEnvironment IntegrationServiceEnvironment { get; set; }
		
		/// <summary>
		/// The workflow state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public IntegrationServiceEnvironmentPropertiesState State { get; set; }
	}
	
	/// <summary>
	/// The integration service environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationServiceEnvironment
	{
		
		/// <summary>
		/// The integration service environment properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public IntegrationServiceEnvironmentProperties Properties { get; set; }
		
		/// <summary>
		/// The integration service environment sku.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public IntegrationServiceEnvironmentSku Sku { get; set; }
	}
	
	/// <summary>
	/// The integration service environment properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationServiceEnvironmentProperties
	{
		
		/// <summary>
		/// The endpoints configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointsConfiguration")]
		public FlowEndpointsConfiguration EndpointsConfiguration { get; set; }
		
		/// <summary>
		/// Gets the tracking id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationServiceEnvironmentId")]
		public string IntegrationServiceEnvironmentId { get; set; }
		
		/// <summary>
		/// The network configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkConfiguration")]
		public NetworkConfiguration NetworkConfiguration { get; set; }
		
		/// <summary>
		/// The workflow provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ApiResourceMetadataProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The workflow state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<IntegrationServiceEnvironmentPropertiesState> State { get; set; }
	}
	
	/// <summary>
	/// The network configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkConfiguration
	{
		
		/// <summary>
		/// The integration service environment access endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessEndpoint")]
		public IntegrationServiceEnvironmentAccessEndpoint AccessEndpoint { get; set; }
		
		/// <summary>
		/// The subnets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnets")]
		public ResourceReference[] Subnets { get; set; }
		
		/// <summary>
		/// Gets the virtual network address space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualNetworkAddressSpace")]
		public string VirtualNetworkAddressSpace { get; set; }
	}
	
	/// <summary>
	/// The integration service environment access endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationServiceEnvironmentAccessEndpoint
	{
		
		/// <summary>
		/// The integration service environment access endpoint type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<IntegrationServiceEnvironmentAccessEndpointType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IntegrationServiceEnvironmentAccessEndpointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		External = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Internal = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IntegrationServiceEnvironmentPropertiesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 5,
	}
	
	/// <summary>
	/// The integration service environment sku.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationServiceEnvironmentSku
	{
		
		/// <summary>
		/// The sku capacity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// The integration service environment sku name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public System.Nullable<IntegrationServiceEnvironmentSkuName> Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IntegrationServiceEnvironmentSkuName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Developer = 2,
	}
	
	/// <summary>
	/// The integration account sku.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountSku
	{
		
		/// <summary>
		/// The integration account sku name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public IntegrationAccountSkuName Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IntegrationAccountSkuName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Free = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 3,
	}
	
	/// <summary>
	/// The integration account agreement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountAgreement
	{
		
		/// <summary>
		/// The integration account agreement properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public IntegrationAccountAgreementProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The integration account agreement properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountAgreementProperties
	{
		
		/// <summary>
		/// The agreement type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="agreementType")]
		public AgreementType AgreementType { get; set; }
		
		/// <summary>
		/// The changed time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changedTime")]
		public System.Nullable<System.DateTimeOffset> ChangedTime { get; set; }
		
		/// <summary>
		/// The integration account agreement content.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content")]
		public AgreementContent Content { get; set; }
		
		/// <summary>
		/// The created time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// The integration account partner's business identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guestIdentity")]
		public BusinessIdentity GuestIdentity { get; set; }
		
		/// <summary>
		/// The integration account partner that is set as guest partner for this agreement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guestPartner")]
		public string GuestPartner { get; set; }
		
		/// <summary>
		/// The integration account partner's business identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hostIdentity")]
		public BusinessIdentity HostIdentity { get; set; }
		
		/// <summary>
		/// The integration account partner that is set as host partner for this agreement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hostPartner")]
		public string HostPartner { get; set; }
		
		/// <summary>
		/// The metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
	}
	
	/// <summary>
	/// The integration account agreement filter for odata query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountAgreementFilter
	{
		
		/// <summary>
		/// The agreement type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="agreementType")]
		public AgreementType AgreementType { get; set; }
	}
	
	/// <summary>
	/// The list of integration account agreements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountAgreementListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of integration account agreements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public IntegrationAccountAgreement[] Value { get; set; }
	}
	
	/// <summary>
	/// The integration account certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountCertificate
	{
		
		/// <summary>
		/// The integration account certificate properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public IntegrationAccountCertificateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The integration account certificate properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountCertificateProperties
	{
		
		/// <summary>
		/// The changed time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changedTime")]
		public System.Nullable<System.DateTimeOffset> ChangedTime { get; set; }
		
		/// <summary>
		/// The created time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// The reference to the key vault key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public KeyVaultKeyReference Key { get; set; }
		
		/// <summary>
		/// The metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
		
		/// <summary>
		/// The public certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicCertificate")]
		public string PublicCertificate { get; set; }
	}
	
	/// <summary>
	/// The reference to the key vault key.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyVaultKeyReference
	{
		
		/// <summary>
		/// The private key name in key vault.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
		
		/// <summary>
		/// The key vault reference.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyVault")]
		public KeyVaultKeyReferenceKeyVault KeyVault { get; set; }
		
		/// <summary>
		/// The private key version in key vault.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVersion")]
		public string KeyVersion { get; set; }
	}
	
	public class KeyVaultKeyReferenceKeyVault
	{
		
		/// <summary>
		/// The resource id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The list of integration account certificates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountCertificateListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of integration account certificates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public IntegrationAccountCertificate[] Value { get; set; }
	}
	
	/// <summary>
	/// The list of integration accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of integration accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public IntegrationAccount[] Value { get; set; }
	}
	
	/// <summary>
	/// The integration account map.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountMap
	{
		
		/// <summary>
		/// The integration account map.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public IntegrationAccountMapProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The integration account map.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountMapProperties
	{
		
		/// <summary>
		/// The changed time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changedTime")]
		public System.Nullable<System.DateTimeOffset> ChangedTime { get; set; }
		
		/// <summary>
		/// The content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The content link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLink")]
		public ContentLink ContentLink { get; set; }
		
		/// <summary>
		/// The content type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// The created time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// The map type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mapType")]
		public IntegrationAccountMapPropertiesMapType MapType { get; set; }
		
		/// <summary>
		/// The metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
		
		/// <summary>
		/// The parameters schema of integration account map.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parametersSchema")]
		public IntegrationAccountMapPropertiesParametersSchema ParametersSchema { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IntegrationAccountMapPropertiesMapType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Xslt = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Xslt20 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Xslt30 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Liquid = 4,
	}
	
	public class IntegrationAccountMapPropertiesParametersSchema
	{
		
		/// <summary>
		/// The reference name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
	}
	
	/// <summary>
	/// The integration account map filter for odata query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountMapFilter
	{
		
		/// <summary>
		/// The map type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mapType")]
		public IntegrationAccountMapPropertiesMapType MapType { get; set; }
	}
	
	/// <summary>
	/// The list of integration account maps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountMapListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of integration account maps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public IntegrationAccountMap[] Value { get; set; }
	}
	
	/// <summary>
	/// The integration account partner.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountPartner
	{
		
		/// <summary>
		/// The integration account partner properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public IntegrationAccountPartnerProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The integration account partner properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountPartnerProperties
	{
		
		/// <summary>
		/// The changed time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changedTime")]
		public System.Nullable<System.DateTimeOffset> ChangedTime { get; set; }
		
		/// <summary>
		/// The integration account partner content.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content")]
		public PartnerContent Content { get; set; }
		
		/// <summary>
		/// The created time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// The metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
		
		/// <summary>
		/// The partner type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partnerType")]
		public IntegrationAccountPartnerPropertiesPartnerType PartnerType { get; set; }
	}
	
	/// <summary>
	/// The integration account partner content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PartnerContent
	{
		
		/// <summary>
		/// The B2B partner content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="b2b")]
		public B2BPartnerContent B2b { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IntegrationAccountPartnerPropertiesPartnerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		B2B = 1,
	}
	
	/// <summary>
	/// The integration account partner filter for odata query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountPartnerFilter
	{
		
		/// <summary>
		/// The partner type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partnerType")]
		public IntegrationAccountPartnerPropertiesPartnerType PartnerType { get; set; }
	}
	
	/// <summary>
	/// The list of integration account partners.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountPartnerListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of integration account partners.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public IntegrationAccountPartner[] Value { get; set; }
	}
	
	/// <summary>
	/// The integration account schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountSchema
	{
		
		/// <summary>
		/// The integration account schema properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public IntegrationAccountSchemaProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The integration account schema properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountSchemaProperties
	{
		
		/// <summary>
		/// The changed time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changedTime")]
		public System.Nullable<System.DateTimeOffset> ChangedTime { get; set; }
		
		/// <summary>
		/// The content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The content link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLink")]
		public ContentLink ContentLink { get; set; }
		
		/// <summary>
		/// The content type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// The created time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// The document name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentName")]
		public string DocumentName { get; set; }
		
		/// <summary>
		/// The file name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		/// <summary>
		/// The metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
		
		/// <summary>
		/// The schema type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schemaType")]
		public IntegrationAccountSchemaPropertiesSchemaType SchemaType { get; set; }
		
		/// <summary>
		/// The target namespace of the schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetNamespace")]
		public string TargetNamespace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IntegrationAccountSchemaPropertiesSchemaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Xml = 1,
	}
	
	/// <summary>
	/// The integration account schema filter for odata query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountSchemaFilter
	{
		
		/// <summary>
		/// The schema type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schemaType")]
		public IntegrationAccountSchemaPropertiesSchemaType SchemaType { get; set; }
	}
	
	/// <summary>
	/// The list of integration account schemas.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountSchemaListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of integration account schemas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public IntegrationAccountSchema[] Value { get; set; }
	}
	
	/// <summary>
	/// The integration account session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountSession
	{
		
		/// <summary>
		/// The integration account session properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public IntegrationAccountSessionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The integration account session properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountSessionProperties
	{
		
		/// <summary>
		/// The changed time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changedTime")]
		public System.Nullable<System.DateTimeOffset> ChangedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public Object Content { get; set; }
		
		/// <summary>
		/// The created time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
	}
	
	/// <summary>
	/// The integration account session filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountSessionFilter
	{
		
		/// <summary>
		/// The changed time of integration account sessions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="changedTime")]
		public System.DateTimeOffset ChangedTime { get; set; }
	}
	
	/// <summary>
	/// The list of integration account sessions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationAccountSessionListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of integration account sessions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public IntegrationAccountSession[] Value { get; set; }
	}
	
	/// <summary>
	/// The list of integration service environments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationServiceEnvironmentListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public IntegrationServiceEnvironment[] Value { get; set; }
	}
	
	/// <summary>
	/// The azure async operation resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationServiceEnvironmentNetworkDependency
	{
		
		/// <summary>
		/// The integration service environment network dependency category type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<IntegrationServiceEnvironmentNetworkDependencyCategory> Category { get; set; }
		
		/// <summary>
		/// The display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The endpoints.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoints")]
		public IntegrationServiceEnvironmentNetworkEndpoint[] Endpoints { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IntegrationServiceEnvironmentNetworkDependencyCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureStorage = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureManagement = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureActiveDirectory = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSLCertificateVerification = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiagnosticLogsAndMetrics = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IntegrationServiceEnvironmentConnectors = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RedisCache = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccessEndpoints = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RecoveryService = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RegionalService = 11,
	}
	
	/// <summary>
	/// The network endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationServiceEnvironmentNetworkEndpoint
	{
		
		/// <summary>
		/// The integration service environment network endpoint accessibility state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessibility")]
		public System.Nullable<IntegrationServiceEnvironmentNetworkEndpointAccessibility> Accessibility { get; set; }
		
		/// <summary>
		/// The domain name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// The ports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ports")]
		public string[] Ports { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IntegrationServiceEnvironmentNetworkEndpointAccessibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Available = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotAvailable = 3,
	}
	
	/// <summary>
	/// The integration service environment network dependency category type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IntegrationServiceEnvironmentNetworkDependencyCategoryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureStorage = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureManagement = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureActiveDirectory = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSLCertificateVerification = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiagnosticLogsAndMetrics = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IntegrationServiceEnvironmentConnectors = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RedisCache = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccessEndpoints = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RecoveryService = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RegionalService = 11,
	}
	
	/// <summary>
	/// The integration service environment subnet network health.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationServiceEnvironmentNetworkDependencyHealth
	{
		
		/// <summary>
		/// The extended error info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ExtendedErrorInfo Error { get; set; }
		
		/// <summary>
		/// The integration service environment network dependency health state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<IntegrationServiceEnvironmentNetworkDependencyHealthState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IntegrationServiceEnvironmentNetworkDependencyHealthState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Healthy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unhealthy = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 3,
	}
	
	/// <summary>
	/// The integration service environment network endpoint accessibility state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IntegrationServiceEnvironmentNetworkEndPointAccessibilityState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Available = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotAvailable = 3,
	}
	
	/// <summary>
	/// The integration service environment network health of all the subnets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationServiceEnvironmentNetworkHealth
	{
	}
	
	/// <summary>
	/// The integration service environment sku capacity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationServiceEnvironmentSkuCapacity
	{
		
		/// <summary>
		/// The default capacity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Int32> Default { get; set; }
		
		/// <summary>
		/// The maximum capacity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public System.Nullable<System.Int32> Maximum { get; set; }
		
		/// <summary>
		/// The minimum capacity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public System.Nullable<System.Int32> Minimum { get; set; }
		
		/// <summary>
		/// The integration service environment sku scale type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleType")]
		public System.Nullable<IntegrationServiceEnvironmentSkuCapacityScaleType> ScaleType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IntegrationServiceEnvironmentSkuCapacityScaleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Manual = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Automatic = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 2,
	}
	
	/// <summary>
	/// The integration service environment sku definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationServiceEnvironmentSkuDefinition
	{
		
		/// <summary>
		/// The integration service environment sku capacity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public IntegrationServiceEnvironmentSkuCapacity Capacity { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// The sku.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public IntegrationServiceEnvironmentSkuDefinitionSku Sku { get; set; }
	}
	
	public class IntegrationServiceEnvironmentSkuDefinitionSku
	{
		
		/// <summary>
		/// The integration service environment sku name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public IntegrationServiceEnvironmentSkuName Name { get; set; }
		
		/// <summary>
		/// The sku tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	/// <summary>
	/// The list of integration service environment skus.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationServiceEnvironmentSkuList
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of integration service environment skus.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public IntegrationServiceEnvironmentSkuDefinition[] Value { get; set; }
	}
	
	/// <summary>
	/// The integration service environment sku scale type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IntegrationServiceEnvironmentSkuScaleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Manual = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Automatic = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 2,
	}
	
	/// <summary>
	/// The integration service environment subnet network health.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationServiceEnvironmentSubnetNetworkHealth
	{
		
		/// <summary>
		/// The integration service environment network endpoint accessibility state.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkDependencyHealthState")]
		public IntegrationServiceEnvironmentNetworkEndpointAccessibility NetworkDependencyHealthState { get; set; }
		
		/// <summary>
		/// The outbound network dependencies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outboundNetworkDependencies")]
		public IntegrationServiceEnvironmentNetworkDependency[] OutboundNetworkDependencies { get; set; }
		
		/// <summary>
		/// The integration service environment subnet network health.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outboundNetworkHealth")]
		public IntegrationServiceEnvironmentNetworkDependencyHealth OutboundNetworkHealth { get; set; }
	}
	
	/// <summary>
	/// The JSON schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JsonSchema
	{
		
		/// <summary>
		/// The JSON content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The JSON title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The key type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum KeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Primary = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Secondary = 2,
	}
	
	/// <summary>
	/// The key vault key.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyVaultKey
	{
		
		/// <summary>
		/// The key attributes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public KeyVaultKeyAttributes Attributes { get; set; }
		
		/// <summary>
		/// The key id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kid")]
		public string Kid { get; set; }
	}
	
	public class KeyVaultKeyAttributes
	{
		
		/// <summary>
		/// When the key was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.Int64> Created { get; set; }
		
		/// <summary>
		/// Whether the key is enabled or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// When the key was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.Int64> Updated { get; set; }
	}
	
	/// <summary>
	/// Collection of key vault keys.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyVaultKeyCollection
	{
		
		/// <summary>
		/// The skip token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipToken")]
		public string SkipToken { get; set; }
		
		/// <summary>
		/// The key vault keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public KeyVaultKey[] Value { get; set; }
	}
	
	/// <summary>
	/// The key vault reference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyVaultReference
	{
		
		/// <summary>
		/// The key vault name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The list key vault keys definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListKeyVaultKeysDefinition
	{
		
		/// <summary>
		/// The key vault reference.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyVault")]
		public KeyVaultReference KeyVault { get; set; }
		
		/// <summary>
		/// The skip token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipToken")]
		public string SkipToken { get; set; }
	}
	
	/// <summary>
	/// The managed api definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedApi
	{
		
		/// <summary>
		/// The API resource properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ApiResourceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The list of managed APIs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedApiListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The managed APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ManagedApi[] Value { get; set; }
	}
	
	/// <summary>
	/// The map type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MapType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Xslt = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Xslt20 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Xslt30 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Liquid = 4,
	}
	
	/// <summary>
	/// The message filter type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MessageFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Include = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Exclude = 2,
	}
	
	/// <summary>
	/// Logic REST API operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that represents the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplay Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class OperationDisplay
	{
		
		/// <summary>
		/// Operation type: Read, write, delete, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Service provider: Microsoft.Logic
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Resource on which the operation is performed: Profile, endpoint, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// Result of the request to list Logic operations. It contains a list of operations and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// URL to get the next set of operation list results if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Logic operations supported by the Logic resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// The operation result definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="inputs")]
		public Object Inputs { get; set; }
		
		/// <summary>
		/// The content link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputsLink")]
		public ContentLink InputsLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iterationCount")]
		public System.Nullable<System.Int32> IterationCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputs")]
		public Object Outputs { get; set; }
		
		/// <summary>
		/// The content link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputsLink")]
		public ContentLink OutputsLink { get; set; }
		
		/// <summary>
		/// Gets the retry histories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryHistory")]
		public RetryHistory[] RetryHistory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trackedProperties")]
		public Object TrackedProperties { get; set; }
		
		/// <summary>
		/// Gets the tracking id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
	}
	
	/// <summary>
	/// The retry history.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RetryHistory
	{
		
		/// <summary>
		/// Gets the client request Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientRequestId")]
		public string ClientRequestId { get; set; }
		
		/// <summary>
		/// Gets the status code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Gets the end time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Error response indicates Logic service is not able to process the incoming request. The error property contains the error details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorResponse Error { get; set; }
		
		/// <summary>
		/// Gets the service request Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceRequestId")]
		public string ServiceRequestId { get; set; }
		
		/// <summary>
		/// Gets the start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	/// <summary>
	/// The run operation result properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationResultProperties
	{
		
		/// <summary>
		/// The workflow scope repetition code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The workflow run action correlation properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlation")]
		public RunActionCorrelation Correlation { get; set; }
		
		/// <summary>
		/// The end time of the workflow scope repetition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public object Error { get; set; }
		
		/// <summary>
		/// The start time of the workflow scope repetition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The workflow status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<OperationResultPropertiesStatus> Status { get; set; }
	}
	
	/// <summary>
	/// The workflow run action correlation properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunActionCorrelation
	{
		
		/// <summary>
		/// The action tracking identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionTrackingId")]
		public string ActionTrackingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OperationResultPropertiesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Paused = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Waiting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Skipped = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Faulted = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimedOut = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Aborted = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ignored = 12,
	}
	
	/// <summary>
	/// The parameter type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ParameterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecureString = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Int = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Float = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bool = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Array = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Object = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecureObject = 8,
	}
	
	/// <summary>
	/// The partner type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PartnerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		B2B = 1,
	}
	
	/// <summary>
	/// The recurrence frequency.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RecurrenceFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Second = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minute = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hour = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Year = 7,
	}
	
	/// <summary>
	/// The access key regenerate action content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegenerateActionParameter
	{
		
		/// <summary>
		/// The key type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyType")]
		public GetCallbackUrlParametersKeyType KeyType { get; set; }
	}
	
	/// <summary>
	/// The workflow run action repetition index.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RepetitionIndex
	{
		
		/// <summary>
		/// The index.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="itemIndex")]
		public int ItemIndex { get; set; }
		
		/// <summary>
		/// The scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopeName")]
		public string ScopeName { get; set; }
	}
	
	/// <summary>
	/// A request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Request
	{
		
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public Object Headers { get; set; }
		
		/// <summary>
		/// The HTTP method used for the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// The destination for the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// The request history.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RequestHistory
	{
		
		/// <summary>
		/// The request history.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RequestHistoryProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The request history.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RequestHistoryProperties
	{
		
		/// <summary>
		/// The time the request ended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// A request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="request")]
		public Request Request { get; set; }
		
		/// <summary>
		/// A response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public Response Response { get; set; }
		
		/// <summary>
		/// The time the request started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	/// <summary>
	/// A response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Response
	{
		
		/// <summary>
		/// The content link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyLink")]
		public ContentLink BodyLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public Object Headers { get; set; }
		
		/// <summary>
		/// The status code of the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<System.Int32> StatusCode { get; set; }
	}
	
	/// <summary>
	/// The list of workflow request histories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RequestHistoryListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of workflow request histories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RequestHistory[] Value { get; set; }
	}
	
	/// <summary>
	/// The base resource type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// The resource id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Gets the resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Gets the resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The correlation properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunCorrelation
	{
		
		/// <summary>
		/// The client keywords.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientKeywords")]
		public string[] ClientKeywords { get; set; }
		
		/// <summary>
		/// The client tracking identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientTrackingId")]
		public string ClientTrackingId { get; set; }
	}
	
	/// <summary>
	/// The schema type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SchemaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Xml = 1,
	}
	
	/// <summary>
	/// The segment terminator suffix.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SegmentTerminatorSuffix
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LF = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRLF = 4,
	}
	
	/// <summary>
	/// The set trigger state action definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SetTriggerStateActionDefinition
	{
		
		/// <summary>
		/// The workflow trigger.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public WorkflowTrigger Source { get; set; }
	}
	
	/// <summary>
	/// The workflow trigger.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowTrigger
	{
		
		/// <summary>
		/// Gets the workflow trigger name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The workflow trigger properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WorkflowTriggerProperties Properties { get; set; }
		
		/// <summary>
		/// Gets the workflow trigger type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The workflow trigger properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowTriggerProperties
	{
		
		/// <summary>
		/// Gets the changed time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changedTime")]
		public System.Nullable<System.DateTimeOffset> ChangedTime { get; set; }
		
		/// <summary>
		/// Gets the created time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// Gets the last execution time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastExecutionTime")]
		public System.Nullable<System.DateTimeOffset> LastExecutionTime { get; set; }
		
		/// <summary>
		/// Gets the next execution time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextExecutionTime")]
		public System.Nullable<System.DateTimeOffset> NextExecutionTime { get; set; }
		
		/// <summary>
		/// The workflow trigger provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ApiResourceMetadataProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The workflow trigger recurrence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurrence")]
		public WorkflowTriggerRecurrence Recurrence { get; set; }
		
		/// <summary>
		/// The workflow state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public IntegrationServiceEnvironmentPropertiesState State { get; set; }
		
		/// <summary>
		/// The workflow status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public OperationResultPropertiesStatus Status { get; set; }
		
		/// <summary>
		/// The resource reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workflow")]
		public ResourceReference Workflow { get; set; }
	}
	
	/// <summary>
	/// The signing or hashing algorithm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SigningAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA2256 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA2384 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA2512 = 5,
	}
	
	/// <summary>
	/// The sku type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sku
	{
		
		/// <summary>
		/// The sku name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public SkuName Name { get; set; }
		
		/// <summary>
		/// The resource reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan")]
		public ResourceReference Plan { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SkuName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Free = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Shared = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium = 5,
	}
	
	/// <summary>
	/// The status annotation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum StatusAnnotation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Preview = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Production = 2,
	}
	
	/// <summary>
	/// The sub resource type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubResource
	{
		
		/// <summary>
		/// The resource id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The track events operation options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TrackEventsOperationOptions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DisableSourceInfoEnrich = 1,
	}
	
	/// <summary>
	/// The tracking event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrackingEvent
	{
		
		/// <summary>
		/// The tracking event error info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public TrackingEventErrorInfo Error { get; set; }
		
		/// <summary>
		/// The event level.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventLevel")]
		public EventLevel EventLevel { get; set; }
		
		/// <summary>
		/// The event time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventTime")]
		public System.DateTimeOffset EventTime { get; set; }
		
		/// <summary>
		/// The tracking record type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recordType")]
		public TrackingEventRecordType RecordType { get; set; }
	}
	
	/// <summary>
	/// The tracking event error info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrackingEventErrorInfo
	{
		
		/// <summary>
		/// The code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TrackingEventRecordType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Custom = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AS2Message = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AS2MDN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X12Interchange = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X12FunctionalGroup = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X12TransactionSet = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X12InterchangeAcknowledgment = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X12FunctionalGroupAcknowledgment = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X12TransactionSetAcknowledgment = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EdifactInterchange = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EdifactFunctionalGroup = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EdifactTransactionSet = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EdifactInterchangeAcknowledgment = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EdifactFunctionalGroupAcknowledgment = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EdifactTransactionSetAcknowledgment = 15,
	}
	
	/// <summary>
	/// The tracking events definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrackingEventsDefinition
	{
		
		/// <summary>
		/// The events.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="events")]
		public TrackingEvent[] Events { get; set; }
		
		/// <summary>
		/// The source type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceType")]
		public string SourceType { get; set; }
		
		/// <summary>
		/// The track events operation options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackEventsOptions")]
		public TrackEventsOperationOptions TrackEventsOptions { get; set; }
	}
	
	/// <summary>
	/// The tracking record type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TrackingRecordType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Custom = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AS2Message = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AS2MDN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X12Interchange = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X12FunctionalGroup = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X12TransactionSet = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X12InterchangeAcknowledgment = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X12FunctionalGroupAcknowledgment = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X12TransactionSetAcknowledgment = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EdifactInterchange = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EdifactFunctionalGroup = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EdifactTransactionSet = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EdifactInterchangeAcknowledgment = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EdifactFunctionalGroupAcknowledgment = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EdifactTransactionSetAcknowledgment = 15,
	}
	
	/// <summary>
	/// The trailing separator policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TrailingSeparatorPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotAllowed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Optional = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mandatory = 3,
	}
	
	/// <summary>
	/// The usage indicator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum UsageIndicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Test = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Information = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Production = 3,
	}
	
	/// <summary>
	/// The workflow type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Workflow
	{
		
		/// <summary>
		/// The workflow properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WorkflowProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The workflow properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowProperties
	{
		
		/// <summary>
		/// Gets the access endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessEndpoint")]
		public string AccessEndpoint { get; set; }
		
		/// <summary>
		/// Gets the changed time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changedTime")]
		public System.Nullable<System.DateTimeOffset> ChangedTime { get; set; }
		
		/// <summary>
		/// Gets the created time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public Object Definition { get; set; }
		
		/// <summary>
		/// The endpoints configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointsConfiguration")]
		public FlowEndpointsConfiguration EndpointsConfiguration { get; set; }
		
		/// <summary>
		/// The resource reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationAccount")]
		public ResourceReference IntegrationAccount { get; set; }
		
		/// <summary>
		/// The resource reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationServiceEnvironment")]
		public ResourceReference IntegrationServiceEnvironment { get; set; }
		
		/// <summary>
		/// The parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, WorkflowParameter> Parameters { get; set; }
		
		/// <summary>
		/// The workflow provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ApiResourceMetadataProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The sku type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
		
		/// <summary>
		/// The workflow state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public IntegrationServiceEnvironmentPropertiesState State { get; set; }
		
		/// <summary>
		/// Gets the version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// The workflow parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowParameter
	{
		
		/// <summary>
		/// The description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public Object Metadata { get; set; }
		
		/// <summary>
		/// The parameter type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ParameterType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Object Value { get; set; }
	}
	
	/// <summary>
	/// The workflow filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowFilter
	{
		
		/// <summary>
		/// The workflow state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public IntegrationServiceEnvironmentPropertiesState State { get; set; }
	}
	
	/// <summary>
	/// The list of workflows.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of workflows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Workflow[] Value { get; set; }
	}
	
	/// <summary>
	/// The workflow output parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowOutputParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Object Error { get; set; }
	}
	
	/// <summary>
	/// The workflow provisioning state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum WorkflowProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accepted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Moving = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Registering = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Registered = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unregistering = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unregistered = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 17,
	}
	
	/// <summary>
	/// The workflow run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowRun
	{
		
		/// <summary>
		/// Gets the workflow run name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The workflow run properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WorkflowRunProperties Properties { get; set; }
		
		/// <summary>
		/// Gets the workflow run type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The workflow run properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowRunProperties
	{
		
		/// <summary>
		/// Gets the code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The correlation property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlation")]
		public Correlation Correlation { get; set; }
		
		/// <summary>
		/// Gets the correlation id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		/// <summary>
		/// Gets the end time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Object Error { get; set; }
		
		/// <summary>
		/// Gets the outputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputs")]
		public System.Collections.Generic.Dictionary<string, WorkflowOutputParameter> Outputs { get; set; }
		
		/// <summary>
		/// The workflow run trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public WorkflowRunTrigger Response { get; set; }
		
		/// <summary>
		/// Gets the start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The workflow status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public OperationResultPropertiesStatus Status { get; set; }
		
		/// <summary>
		/// The workflow run trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trigger")]
		public WorkflowRunTrigger Trigger { get; set; }
		
		/// <summary>
		/// Gets the wait end time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitEndTime")]
		public System.Nullable<System.DateTimeOffset> WaitEndTime { get; set; }
		
		/// <summary>
		/// The resource reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workflow")]
		public ResourceReference Workflow { get; set; }
	}
	
	/// <summary>
	/// The workflow run trigger.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowRunTrigger
	{
		
		/// <summary>
		/// Gets the code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The correlation property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlation")]
		public Correlation Correlation { get; set; }
		
		/// <summary>
		/// Gets the end time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Object Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputs")]
		public Object Inputs { get; set; }
		
		/// <summary>
		/// The content link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputsLink")]
		public ContentLink InputsLink { get; set; }
		
		/// <summary>
		/// Gets the name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputs")]
		public Object Outputs { get; set; }
		
		/// <summary>
		/// The content link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputsLink")]
		public ContentLink OutputsLink { get; set; }
		
		/// <summary>
		/// Gets the scheduled time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledTime")]
		public System.Nullable<System.DateTimeOffset> ScheduledTime { get; set; }
		
		/// <summary>
		/// Gets the start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The workflow status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public OperationResultPropertiesStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trackedProperties")]
		public Object TrackedProperties { get; set; }
		
		/// <summary>
		/// Gets the tracking id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
	}
	
	/// <summary>
	/// The workflow run action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowRunAction
	{
		
		/// <summary>
		/// Gets the workflow run action name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The workflow run action properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WorkflowRunActionProperties Properties { get; set; }
		
		/// <summary>
		/// Gets the workflow run action type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The workflow run action properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowRunActionProperties
	{
		
		/// <summary>
		/// Gets the code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The correlation property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlation")]
		public Correlation Correlation { get; set; }
		
		/// <summary>
		/// Gets the end time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Object Error { get; set; }
		
		/// <summary>
		/// The content link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputsLink")]
		public ContentLink InputsLink { get; set; }
		
		/// <summary>
		/// The content link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputsLink")]
		public ContentLink OutputsLink { get; set; }
		
		/// <summary>
		/// Gets the retry histories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryHistory")]
		public RetryHistory[] RetryHistory { get; set; }
		
		/// <summary>
		/// Gets the start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The workflow status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public OperationResultPropertiesStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trackedProperties")]
		public Object TrackedProperties { get; set; }
		
		/// <summary>
		/// Gets the tracking id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
	}
	
	/// <summary>
	/// The workflow run action filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowRunActionFilter
	{
		
		/// <summary>
		/// The workflow status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public OperationResultPropertiesStatus Status { get; set; }
	}
	
	/// <summary>
	/// The list of workflow run actions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowRunActionListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of workflow run actions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WorkflowRunAction[] Value { get; set; }
	}
	
	/// <summary>
	/// The workflow run action repetition definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowRunActionRepetitionDefinition
	{
		
		/// <summary>
		/// The workflow run action repetition properties definition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WorkflowRunActionRepetitionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The workflow run action repetition properties definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowRunActionRepetitionProperties
	{
		
		/// <summary>
		/// The repetition indexes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repetitionIndexes")]
		public RepetitionIndex[] RepetitionIndexes { get; set; }
	}
	
	/// <summary>
	/// A collection of workflow run action repetitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowRunActionRepetitionDefinitionCollection
	{
		
		/// <summary>
		/// The link used to get the next page of recommendations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WorkflowRunActionRepetitionDefinition[] Value { get; set; }
	}
	
	/// <summary>
	/// The workflow run filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowRunFilter
	{
		
		/// <summary>
		/// The workflow status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public OperationResultPropertiesStatus Status { get; set; }
	}
	
	/// <summary>
	/// The list of workflow runs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowRunListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of workflow runs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WorkflowRun[] Value { get; set; }
	}
	
	/// <summary>
	/// The workflow state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum WorkflowState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 5,
	}
	
	/// <summary>
	/// The workflow status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum WorkflowStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Paused = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Waiting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Skipped = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Faulted = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimedOut = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Aborted = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ignored = 12,
	}
	
	/// <summary>
	/// The workflow trigger callback URL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowTriggerCallbackUrl
	{
		
		/// <summary>
		/// Gets the workflow trigger callback URL base path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basePath")]
		public string BasePath { get; set; }
		
		/// <summary>
		/// Gets the workflow trigger callback URL HTTP method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Gets the workflow trigger callback URL query parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queries")]
		public WorkflowTriggerListCallbackUrlQueries Queries { get; set; }
		
		/// <summary>
		/// Gets the workflow trigger callback URL relative path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relativePath")]
		public string RelativePath { get; set; }
		
		/// <summary>
		/// Gets the workflow trigger callback URL relative path parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relativePathParameters")]
		public string[] RelativePathParameters { get; set; }
		
		/// <summary>
		/// Gets the workflow trigger callback URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Gets the workflow trigger callback URL query parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowTriggerListCallbackUrlQueries
	{
		
		/// <summary>
		/// The api version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="api-version")]
		public string Api_version { get; set; }
		
		/// <summary>
		/// The SAS timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="se")]
		public string Se { get; set; }
		
		/// <summary>
		/// The SAS signature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sig")]
		public string Sig { get; set; }
		
		/// <summary>
		/// The SAS permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sp")]
		public string Sp { get; set; }
		
		/// <summary>
		/// The SAS version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sv")]
		public string Sv { get; set; }
	}
	
	/// <summary>
	/// The workflow trigger filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowTriggerFilter
	{
		
		/// <summary>
		/// The workflow state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public IntegrationServiceEnvironmentPropertiesState State { get; set; }
	}
	
	/// <summary>
	/// The workflow trigger history.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowTriggerHistory
	{
		
		/// <summary>
		/// Gets the workflow trigger history name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The workflow trigger history properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WorkflowTriggerHistoryProperties Properties { get; set; }
		
		/// <summary>
		/// Gets the workflow trigger history type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The workflow trigger history properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowTriggerHistoryProperties
	{
		
		/// <summary>
		/// Gets the code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The correlation property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlation")]
		public Correlation Correlation { get; set; }
		
		/// <summary>
		/// Gets the end time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Object Error { get; set; }
		
		/// <summary>
		/// The value indicating whether trigger was fired.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fired")]
		public System.Nullable<System.Boolean> Fired { get; set; }
		
		/// <summary>
		/// The content link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputsLink")]
		public ContentLink InputsLink { get; set; }
		
		/// <summary>
		/// The content link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputsLink")]
		public ContentLink OutputsLink { get; set; }
		
		/// <summary>
		/// The resource reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="run")]
		public ResourceReference Run { get; set; }
		
		/// <summary>
		/// Gets the start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The workflow status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public OperationResultPropertiesStatus Status { get; set; }
		
		/// <summary>
		/// Gets the tracking id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
	}
	
	/// <summary>
	/// The workflow trigger history filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowTriggerHistoryFilter
	{
		
		/// <summary>
		/// The workflow status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public OperationResultPropertiesStatus Status { get; set; }
	}
	
	/// <summary>
	/// The list of workflow trigger histories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowTriggerHistoryListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of workflow trigger histories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WorkflowTriggerHistory[] Value { get; set; }
	}
	
	/// <summary>
	/// The list of workflow triggers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowTriggerListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of workflow triggers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WorkflowTrigger[] Value { get; set; }
	}
	
	/// <summary>
	/// The workflow trigger provisioning state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum WorkflowTriggerProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accepted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Moving = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Registering = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Registered = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unregistering = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unregistered = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 17,
	}
	
	/// <summary>
	/// The workflow version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowVersion
	{
		
		/// <summary>
		/// The workflow version properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WorkflowVersionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The workflow version properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowVersionProperties
	{
		
		/// <summary>
		/// Gets the access endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessEndpoint")]
		public string AccessEndpoint { get; set; }
		
		/// <summary>
		/// Gets the changed time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changedTime")]
		public System.Nullable<System.DateTimeOffset> ChangedTime { get; set; }
		
		/// <summary>
		/// Gets the created time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public Object Definition { get; set; }
		
		/// <summary>
		/// The resource reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationAccount")]
		public ResourceReference IntegrationAccount { get; set; }
		
		/// <summary>
		/// The parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, WorkflowParameter> Parameters { get; set; }
		
		/// <summary>
		/// The sku type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
		
		/// <summary>
		/// The workflow state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public IntegrationServiceEnvironmentPropertiesState State { get; set; }
		
		/// <summary>
		/// Gets the version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// The list of workflow versions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowVersionListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of workflow versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WorkflowVersion[] Value { get; set; }
	}
	
	/// <summary>
	/// The WSDL import method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum WsdlImportMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SoapToRest = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SoapPassThrough = 2,
	}
	
	/// <summary>
	/// The X12 character set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum X12CharacterSet
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Extended = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UTF8 = 3,
	}
	
	/// <summary>
	/// The x12 date format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum X12DateFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CCYYMMDD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YYMMDD = 2,
	}
	
	/// <summary>
	/// The x12 time format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum X12TimeFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HHMM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HHMMSS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HHMMSSdd = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HHMMSSd = 4,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available Logic REST API operations.
		/// Operations_List providers/Microsoft.Logic/operations
		/// </summary>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Logic/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of integration accounts by subscription.
		/// IntegrationAccounts_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationAccounts
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="top">The number of items to be included in the result.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccountListResult> IntegrationAccounts_ListBySubscriptionAsync(string subscriptionId, string api_version, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Logic/integrationAccounts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccountListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of integration service environments by subscription.
		/// IntegrationServiceEnvironments_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationServiceEnvironments
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="top">The number of items to be included in the result.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationServiceEnvironmentListResult> IntegrationServiceEnvironments_ListBySubscriptionAsync(string subscriptionId, string api_version, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Logic/integrationServiceEnvironments&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationServiceEnvironmentListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of workflows by subscription.
		/// Workflows_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.Logic/workflows
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="top">The number of items to be included in the result.</param>
		/// <param name="filter">The filter to apply on the operation. Options for filters include: State, Trigger, and ReferencedResourceId.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowListResult> Workflows_ListBySubscriptionAsync(string subscriptionId, string api_version, int top, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Logic/workflows&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of integration accounts by resource group.
		/// IntegrationAccounts_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="top">The number of items to be included in the result.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccountListResult> IntegrationAccounts_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccountListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an integration account.
		/// IntegrationAccounts_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccount> IntegrationAccounts_GetAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an integration account.
		/// IntegrationAccounts_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The integration account.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccount> IntegrationAccounts_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string api_version, IntegrationAccount requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an integration account.
		/// IntegrationAccounts_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task IntegrationAccounts_DeleteAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an integration account.
		/// IntegrationAccounts_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The integration account.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccount> IntegrationAccounts_UpdateAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string api_version, IntegrationAccount requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of integration account agreements.
		/// IntegrationAccountAgreements_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="top">The number of items to be included in the result.</param>
		/// <param name="filter">The filter to apply on the operation. Options for filters include: AgreementType.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccountAgreementListResult> IntegrationAccountAgreements_ListAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string api_version, int top, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/agreements&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccountAgreementListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an integration account agreement.
		/// IntegrationAccountAgreements_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements/{agreementName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="agreementName">The integration account agreement name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccountAgreement> IntegrationAccountAgreements_GetAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string agreementName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/agreements/"+ (agreementName==null? "" : System.Uri.EscapeDataString(agreementName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccountAgreement>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an integration account agreement.
		/// IntegrationAccountAgreements_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements/{agreementName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="agreementName">The integration account agreement name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The integration account agreement.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccountAgreement> IntegrationAccountAgreements_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string agreementName, string api_version, IntegrationAccountAgreement requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/agreements/"+ (agreementName==null? "" : System.Uri.EscapeDataString(agreementName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccountAgreement>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an integration account agreement.
		/// IntegrationAccountAgreements_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements/{agreementName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="agreementName">The integration account agreement name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task IntegrationAccountAgreements_DeleteAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string agreementName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/agreements/"+ (agreementName==null? "" : System.Uri.EscapeDataString(agreementName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the content callback url.
		/// IntegrationAccountAgreements_ListContentCallbackUrl subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements/{agreementName}/listContentCallbackUrl
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="agreementName">The integration account agreement name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowTriggerCallbackUrl> IntegrationAccountAgreements_ListContentCallbackUrlAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string agreementName, string api_version, GetCallbackUrlParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/agreements/"+ (agreementName==null? "" : System.Uri.EscapeDataString(agreementName))+"/listContentCallbackUrl&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowTriggerCallbackUrl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the assemblies for an integration account.
		/// IntegrationAccountAssemblies_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<AssemblyCollection> IntegrationAccountAssemblies_ListAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/assemblies&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssemblyCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an assembly for an integration account.
		/// IntegrationAccountAssemblies_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="assemblyArtifactName">The assembly artifact name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<AssemblyDefinition> IntegrationAccountAssemblies_GetAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string assemblyArtifactName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/assemblies/"+ (assemblyArtifactName==null? "" : System.Uri.EscapeDataString(assemblyArtifactName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssemblyDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update an assembly for an integration account.
		/// IntegrationAccountAssemblies_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="assemblyArtifactName">The assembly artifact name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The assembly artifact.</param>
		/// <returns>OK</returns>
		public async Task<AssemblyDefinition> IntegrationAccountAssemblies_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string assemblyArtifactName, string api_version, AssemblyDefinition requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/assemblies/"+ (assemblyArtifactName==null? "" : System.Uri.EscapeDataString(assemblyArtifactName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssemblyDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an assembly for an integration account.
		/// IntegrationAccountAssemblies_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="assemblyArtifactName">The assembly artifact name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task IntegrationAccountAssemblies_DeleteAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string assemblyArtifactName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/assemblies/"+ (assemblyArtifactName==null? "" : System.Uri.EscapeDataString(assemblyArtifactName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the content callback url for an integration account assembly.
		/// IntegrationAccountAssemblies_ListContentCallbackUrl subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}/listContentCallbackUrl
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="assemblyArtifactName">The assembly artifact name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowTriggerCallbackUrl> IntegrationAccountAssemblies_ListContentCallbackUrlAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string assemblyArtifactName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/assemblies/"+ (assemblyArtifactName==null? "" : System.Uri.EscapeDataString(assemblyArtifactName))+"/listContentCallbackUrl&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowTriggerCallbackUrl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the batch configurations for an integration account.
		/// IntegrationAccountBatchConfigurations_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<BatchConfigurationCollection> IntegrationAccountBatchConfigurations_ListAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/batchConfigurations&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchConfigurationCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a batch configuration for an integration account.
		/// IntegrationAccountBatchConfigurations_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations/{batchConfigurationName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="batchConfigurationName">The batch configuration name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<BatchConfiguration> IntegrationAccountBatchConfigurations_GetAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string batchConfigurationName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/batchConfigurations/"+ (batchConfigurationName==null? "" : System.Uri.EscapeDataString(batchConfigurationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a batch configuration for an integration account.
		/// IntegrationAccountBatchConfigurations_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations/{batchConfigurationName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="batchConfigurationName">The batch configuration name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The batch configuration.</param>
		/// <returns>OK</returns>
		public async Task<BatchConfiguration> IntegrationAccountBatchConfigurations_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string batchConfigurationName, string api_version, BatchConfiguration requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/batchConfigurations/"+ (batchConfigurationName==null? "" : System.Uri.EscapeDataString(batchConfigurationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a batch configuration for an integration account.
		/// IntegrationAccountBatchConfigurations_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations/{batchConfigurationName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="batchConfigurationName">The batch configuration name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task IntegrationAccountBatchConfigurations_DeleteAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string batchConfigurationName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/batchConfigurations/"+ (batchConfigurationName==null? "" : System.Uri.EscapeDataString(batchConfigurationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of integration account certificates.
		/// IntegrationAccountCertificates_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/certificates
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="top">The number of items to be included in the result.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccountCertificateListResult> IntegrationAccountCertificates_ListAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string api_version, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/certificates&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccountCertificateListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an integration account certificate.
		/// IntegrationAccountCertificates_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/certificates/{certificateName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="certificateName">The integration account certificate name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccountCertificate> IntegrationAccountCertificates_GetAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string certificateName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/certificates/"+ (certificateName==null? "" : System.Uri.EscapeDataString(certificateName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccountCertificate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an integration account certificate.
		/// IntegrationAccountCertificates_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/certificates/{certificateName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="certificateName">The integration account certificate name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The integration account certificate.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccountCertificate> IntegrationAccountCertificates_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string certificateName, string api_version, IntegrationAccountCertificate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/certificates/"+ (certificateName==null? "" : System.Uri.EscapeDataString(certificateName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccountCertificate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an integration account certificate.
		/// IntegrationAccountCertificates_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/certificates/{certificateName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="certificateName">The integration account certificate name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task IntegrationAccountCertificates_DeleteAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string certificateName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/certificates/"+ (certificateName==null? "" : System.Uri.EscapeDataString(certificateName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the integration account callback URL.
		/// IntegrationAccounts_ListCallbackUrl subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/listCallbackUrl
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The callback URL parameters.</param>
		/// <returns>OK</returns>
		public async Task<CallbackUrl> IntegrationAccounts_ListCallbackUrlAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string api_version, GetCallbackUrlParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/listCallbackUrl&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CallbackUrl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the integration account's Key Vault keys.
		/// IntegrationAccounts_ListKeyVaultKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/listKeyVaultKeys
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The key vault parameters.</param>
		/// <returns>OK</returns>
		public async Task<KeyVaultKeyCollection> IntegrationAccounts_ListKeyVaultKeysAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string api_version, ListKeyVaultKeysDefinition requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/listKeyVaultKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KeyVaultKeyCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Logs the integration account's tracking events.
		/// IntegrationAccounts_LogTrackingEvents subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/logTrackingEvents
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The callback URL parameters.</param>
		/// <returns>OK</returns>
		public async Task IntegrationAccounts_LogTrackingEventsAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string api_version, TrackingEventsDefinition requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/logTrackingEvents&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of integration account maps.
		/// IntegrationAccountMaps_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="top">The number of items to be included in the result.</param>
		/// <param name="filter">The filter to apply on the operation. Options for filters include: MapType.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccountMapListResult> IntegrationAccountMaps_ListAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string api_version, int top, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/maps&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccountMapListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an integration account map.
		/// IntegrationAccountMaps_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps/{mapName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="mapName">The integration account map name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccountMap> IntegrationAccountMaps_GetAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string mapName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/maps/"+ (mapName==null? "" : System.Uri.EscapeDataString(mapName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccountMap>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an integration account map.
		/// IntegrationAccountMaps_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps/{mapName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="mapName">The integration account map name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The integration account map.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccountMap> IntegrationAccountMaps_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string mapName, string api_version, IntegrationAccountMap requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/maps/"+ (mapName==null? "" : System.Uri.EscapeDataString(mapName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccountMap>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an integration account map.
		/// IntegrationAccountMaps_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps/{mapName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="mapName">The integration account map name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task IntegrationAccountMaps_DeleteAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string mapName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/maps/"+ (mapName==null? "" : System.Uri.EscapeDataString(mapName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the content callback url.
		/// IntegrationAccountMaps_ListContentCallbackUrl subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps/{mapName}/listContentCallbackUrl
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="mapName">The integration account map name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowTriggerCallbackUrl> IntegrationAccountMaps_ListContentCallbackUrlAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string mapName, string api_version, GetCallbackUrlParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/maps/"+ (mapName==null? "" : System.Uri.EscapeDataString(mapName))+"/listContentCallbackUrl&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowTriggerCallbackUrl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of integration account partners.
		/// IntegrationAccountPartners_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/partners
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="top">The number of items to be included in the result.</param>
		/// <param name="filter">The filter to apply on the operation. Options for filters include: PartnerType.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccountPartnerListResult> IntegrationAccountPartners_ListAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string api_version, int top, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/partners&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccountPartnerListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an integration account partner.
		/// IntegrationAccountPartners_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/partners/{partnerName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="partnerName">The integration account partner name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccountPartner> IntegrationAccountPartners_GetAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string partnerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/partners/"+ (partnerName==null? "" : System.Uri.EscapeDataString(partnerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccountPartner>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an integration account partner.
		/// IntegrationAccountPartners_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/partners/{partnerName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="partnerName">The integration account partner name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The integration account partner.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccountPartner> IntegrationAccountPartners_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string partnerName, string api_version, IntegrationAccountPartner requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/partners/"+ (partnerName==null? "" : System.Uri.EscapeDataString(partnerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccountPartner>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an integration account partner.
		/// IntegrationAccountPartners_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/partners/{partnerName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="partnerName">The integration account partner name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task IntegrationAccountPartners_DeleteAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string partnerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/partners/"+ (partnerName==null? "" : System.Uri.EscapeDataString(partnerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the content callback url.
		/// IntegrationAccountPartners_ListContentCallbackUrl subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/partners/{partnerName}/listContentCallbackUrl
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="partnerName">The integration account partner name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowTriggerCallbackUrl> IntegrationAccountPartners_ListContentCallbackUrlAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string partnerName, string api_version, GetCallbackUrlParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/partners/"+ (partnerName==null? "" : System.Uri.EscapeDataString(partnerName))+"/listContentCallbackUrl&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowTriggerCallbackUrl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Regenerates the integration account access key.
		/// IntegrationAccounts_RegenerateAccessKey subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/regenerateAccessKey
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The access key type.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccount> IntegrationAccounts_RegenerateAccessKeyAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string api_version, RegenerateActionParameter requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/regenerateAccessKey&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of integration account schemas.
		/// IntegrationAccountSchemas_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/schemas
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="top">The number of items to be included in the result.</param>
		/// <param name="filter">The filter to apply on the operation. Options for filters include: SchemaType.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccountSchemaListResult> IntegrationAccountSchemas_ListAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string api_version, int top, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/schemas&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccountSchemaListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an integration account schema.
		/// IntegrationAccountSchemas_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/schemas/{schemaName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="schemaName">The integration account schema name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccountSchema> IntegrationAccountSchemas_GetAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string schemaName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccountSchema>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an integration account schema.
		/// IntegrationAccountSchemas_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/schemas/{schemaName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="schemaName">The integration account schema name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The integration account schema.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccountSchema> IntegrationAccountSchemas_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string schemaName, string api_version, IntegrationAccountSchema requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccountSchema>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an integration account schema.
		/// IntegrationAccountSchemas_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/schemas/{schemaName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="schemaName">The integration account schema name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task IntegrationAccountSchemas_DeleteAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string schemaName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the content callback url.
		/// IntegrationAccountSchemas_ListContentCallbackUrl subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/schemas/{schemaName}/listContentCallbackUrl
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="schemaName">The integration account schema name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowTriggerCallbackUrl> IntegrationAccountSchemas_ListContentCallbackUrlAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string schemaName, string api_version, GetCallbackUrlParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/listContentCallbackUrl&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowTriggerCallbackUrl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of integration account sessions.
		/// IntegrationAccountSessions_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/sessions
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="top">The number of items to be included in the result.</param>
		/// <param name="filter">The filter to apply on the operation. Options for filters include: ChangedTime.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccountSessionListResult> IntegrationAccountSessions_ListAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string api_version, int top, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/sessions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccountSessionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an integration account session.
		/// IntegrationAccountSessions_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/sessions/{sessionName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="sessionName">The integration account session name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccountSession> IntegrationAccountSessions_GetAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string sessionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/sessions/"+ (sessionName==null? "" : System.Uri.EscapeDataString(sessionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccountSession>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an integration account session.
		/// IntegrationAccountSessions_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/sessions/{sessionName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="sessionName">The integration account session name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The integration account session.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationAccountSession> IntegrationAccountSessions_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string sessionName, string api_version, IntegrationAccountSession requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/sessions/"+ (sessionName==null? "" : System.Uri.EscapeDataString(sessionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationAccountSession>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an integration account session.
		/// IntegrationAccountSessions_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/sessions/{sessionName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="integrationAccountName">The integration account name.</param>
		/// <param name="sessionName">The integration account session name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task IntegrationAccountSessions_DeleteAsync(string subscriptionId, string resourceGroupName, string integrationAccountName, string sessionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/integrationAccounts/"+ (integrationAccountName==null? "" : System.Uri.EscapeDataString(integrationAccountName))+"/sessions/"+ (sessionName==null? "" : System.Uri.EscapeDataString(sessionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Validates the workflow definition.
		/// Workflows_ValidateByLocation subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/locations/{location}/workflows/{workflowName}/validate
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="location">The workflow location.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task Workflows_ValidateByLocationAsync(string subscriptionId, string resourceGroupName, string location, string workflowName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/validate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of workflows by resource group.
		/// Workflows_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="top">The number of items to be included in the result.</param>
		/// <param name="filter">The filter to apply on the operation. Options for filters include: State, Trigger, and ReferencedResourceId.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowListResult> Workflows_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version, int top, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a workflow.
		/// Workflows_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<Workflow> Workflows_GetAsync(string subscriptionId, string resourceGroupName, string workflowName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Workflow>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a workflow.
		/// Workflows_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The workflow.</param>
		/// <returns>OK</returns>
		public async Task<Workflow> Workflows_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string workflowName, string api_version, Workflow requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Workflow>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a workflow.
		/// Workflows_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task Workflows_DeleteAsync(string subscriptionId, string resourceGroupName, string workflowName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a workflow.
		/// Workflows_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The workflow.</param>
		/// <returns>OK</returns>
		public async Task<Workflow> Workflows_UpdateAsync(string subscriptionId, string resourceGroupName, string workflowName, string api_version, Workflow requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Workflow>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disables a workflow.
		/// Workflows_Disable subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/disable
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task Workflows_DisableAsync(string subscriptionId, string resourceGroupName, string workflowName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/disable&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables a workflow.
		/// Workflows_Enable subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/enable
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task Workflows_EnableAsync(string subscriptionId, string resourceGroupName, string workflowName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/enable&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates the upgraded definition for a workflow.
		/// Workflows_GenerateUpgradedDefinition subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/generateUpgradedDefinition
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">Parameters for generating an upgraded definition.</param>
		/// <returns>OK</returns>
		public async Task<Object> Workflows_GenerateUpgradedDefinitionAsync(string subscriptionId, string resourceGroupName, string workflowName, string api_version, GenerateUpgradedDefinitionParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/generateUpgradedDefinition&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the workflow callback Url.
		/// Workflows_ListCallbackUrl subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/listCallbackUrl
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">Which callback url to list.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowTriggerCallbackUrl> Workflows_ListCallbackUrlAsync(string subscriptionId, string resourceGroupName, string workflowName, string api_version, GetCallbackUrlParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/listCallbackUrl&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowTriggerCallbackUrl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets an OpenAPI definition for the workflow.
		/// Workflows_ListSwagger subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/listSwagger
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<Object> Workflows_ListSwaggerAsync(string subscriptionId, string resourceGroupName, string workflowName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/listSwagger&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Moves an existing workflow.
		/// Workflows_Move subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/move
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The workflow to move.</param>
		/// <returns>OK</returns>
		public async Task Workflows_MoveAsync(string subscriptionId, string resourceGroupName, string workflowName, string api_version, Workflow requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/move&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Regenerates the callback URL access key for request triggers.
		/// Workflows_RegenerateAccessKey subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/regenerateAccessKey
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The access key type.</param>
		/// <returns>OK</returns>
		public async Task Workflows_RegenerateAccessKeyAsync(string subscriptionId, string resourceGroupName, string workflowName, string api_version, RegenerateActionParameter requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/regenerateAccessKey&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of workflow runs.
		/// WorkflowRuns_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="top">The number of items to be included in the result.</param>
		/// <param name="filter">The filter to apply on the operation. Options for filters include: Status, StartTime, and ClientTrackingId.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowRunListResult> WorkflowRuns_ListAsync(string subscriptionId, string resourceGroupName, string workflowName, string api_version, int top, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/runs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowRunListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a workflow run.
		/// WorkflowRuns_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="runName">The workflow run name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowRun> WorkflowRuns_GetAsync(string subscriptionId, string resourceGroupName, string workflowName, string runName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/runs/"+ (runName==null? "" : System.Uri.EscapeDataString(runName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of workflow run actions.
		/// WorkflowRunActions_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="runName">The workflow run name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="top">The number of items to be included in the result.</param>
		/// <param name="filter">The filter to apply on the operation. Options for filters include: Status.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowRunActionListResult> WorkflowRunActions_ListAsync(string subscriptionId, string resourceGroupName, string workflowName, string runName, string api_version, int top, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/runs/"+ (runName==null? "" : System.Uri.EscapeDataString(runName))+"/actions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowRunActionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a workflow run action.
		/// WorkflowRunActions_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="runName">The workflow run name.</param>
		/// <param name="actionName">The workflow action name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowRunAction> WorkflowRunActions_GetAsync(string subscriptionId, string resourceGroupName, string workflowName, string runName, string actionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/runs/"+ (runName==null? "" : System.Uri.EscapeDataString(runName))+"/actions/"+ (actionName==null? "" : System.Uri.EscapeDataString(actionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowRunAction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists a workflow run expression trace.
		/// WorkflowRunActions_ListExpressionTraces subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/listExpressionTraces
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="runName">The workflow run name.</param>
		/// <param name="actionName">The workflow action name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<ExpressionTraces> WorkflowRunActions_ListExpressionTracesAsync(string subscriptionId, string resourceGroupName, string workflowName, string runName, string actionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/runs/"+ (runName==null? "" : System.Uri.EscapeDataString(runName))+"/actions/"+ (actionName==null? "" : System.Uri.EscapeDataString(actionName))+"/listExpressionTraces&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExpressionTraces>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all of a workflow run action repetitions.
		/// WorkflowRunActionRepetitions_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="runName">The workflow run name.</param>
		/// <param name="actionName">The workflow action name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowRunActionRepetitionDefinitionCollection> WorkflowRunActionRepetitions_ListAsync(string subscriptionId, string resourceGroupName, string workflowName, string runName, string actionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/runs/"+ (runName==null? "" : System.Uri.EscapeDataString(runName))+"/actions/"+ (actionName==null? "" : System.Uri.EscapeDataString(actionName))+"/repetitions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowRunActionRepetitionDefinitionCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a workflow run action repetition.
		/// WorkflowRunActionRepetitions_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="runName">The workflow run name.</param>
		/// <param name="actionName">The workflow action name.</param>
		/// <param name="repetitionName">The workflow repetition.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowRunActionRepetitionDefinition> WorkflowRunActionRepetitions_GetAsync(string subscriptionId, string resourceGroupName, string workflowName, string runName, string actionName, string repetitionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/runs/"+ (runName==null? "" : System.Uri.EscapeDataString(runName))+"/actions/"+ (actionName==null? "" : System.Uri.EscapeDataString(actionName))+"/repetitions/"+ (repetitionName==null? "" : System.Uri.EscapeDataString(repetitionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowRunActionRepetitionDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists a workflow run expression trace.
		/// WorkflowRunActionRepetitions_ListExpressionTraces subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}/listExpressionTraces
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="runName">The workflow run name.</param>
		/// <param name="actionName">The workflow action name.</param>
		/// <param name="repetitionName">The workflow repetition.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<ExpressionTraces> WorkflowRunActionRepetitions_ListExpressionTracesAsync(string subscriptionId, string resourceGroupName, string workflowName, string runName, string actionName, string repetitionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/runs/"+ (runName==null? "" : System.Uri.EscapeDataString(runName))+"/actions/"+ (actionName==null? "" : System.Uri.EscapeDataString(actionName))+"/repetitions/"+ (repetitionName==null? "" : System.Uri.EscapeDataString(repetitionName))+"/listExpressionTraces&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExpressionTraces>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List a workflow run repetition request history.
		/// WorkflowRunActionRepetitionsRequestHistories_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}/requestHistories
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="runName">The workflow run name.</param>
		/// <param name="actionName">The workflow action name.</param>
		/// <param name="repetitionName">The workflow repetition.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<RequestHistoryListResult> WorkflowRunActionRepetitionsRequestHistories_ListAsync(string subscriptionId, string resourceGroupName, string workflowName, string runName, string actionName, string repetitionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/runs/"+ (runName==null? "" : System.Uri.EscapeDataString(runName))+"/actions/"+ (actionName==null? "" : System.Uri.EscapeDataString(actionName))+"/repetitions/"+ (repetitionName==null? "" : System.Uri.EscapeDataString(repetitionName))+"/requestHistories&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RequestHistoryListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a workflow run repetition request history.
		/// WorkflowRunActionRepetitionsRequestHistories_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}/requestHistories/{requestHistoryName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="runName">The workflow run name.</param>
		/// <param name="actionName">The workflow action name.</param>
		/// <param name="repetitionName">The workflow repetition.</param>
		/// <param name="requestHistoryName">The request history name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<RequestHistory> WorkflowRunActionRepetitionsRequestHistories_GetAsync(string subscriptionId, string resourceGroupName, string workflowName, string runName, string actionName, string repetitionName, string requestHistoryName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/runs/"+ (runName==null? "" : System.Uri.EscapeDataString(runName))+"/actions/"+ (actionName==null? "" : System.Uri.EscapeDataString(actionName))+"/repetitions/"+ (repetitionName==null? "" : System.Uri.EscapeDataString(repetitionName))+"/requestHistories/"+ (requestHistoryName==null? "" : System.Uri.EscapeDataString(requestHistoryName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RequestHistory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List a workflow run request history.
		/// WorkflowRunActionRequestHistories_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/requestHistories
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="runName">The workflow run name.</param>
		/// <param name="actionName">The workflow action name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<RequestHistoryListResult> WorkflowRunActionRequestHistories_ListAsync(string subscriptionId, string resourceGroupName, string workflowName, string runName, string actionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/runs/"+ (runName==null? "" : System.Uri.EscapeDataString(runName))+"/actions/"+ (actionName==null? "" : System.Uri.EscapeDataString(actionName))+"/requestHistories&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RequestHistoryListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a workflow run request history.
		/// WorkflowRunActionRequestHistories_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/requestHistories/{requestHistoryName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="runName">The workflow run name.</param>
		/// <param name="actionName">The workflow action name.</param>
		/// <param name="requestHistoryName">The request history name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<RequestHistory> WorkflowRunActionRequestHistories_GetAsync(string subscriptionId, string resourceGroupName, string workflowName, string runName, string actionName, string requestHistoryName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/runs/"+ (runName==null? "" : System.Uri.EscapeDataString(runName))+"/actions/"+ (actionName==null? "" : System.Uri.EscapeDataString(actionName))+"/requestHistories/"+ (requestHistoryName==null? "" : System.Uri.EscapeDataString(requestHistoryName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RequestHistory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the workflow run action scoped repetitions.
		/// WorkflowRunActionScopeRepetitions_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/scopeRepetitions
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="runName">The workflow run name.</param>
		/// <param name="actionName">The workflow action name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowRunActionRepetitionDefinitionCollection> WorkflowRunActionScopeRepetitions_ListAsync(string subscriptionId, string resourceGroupName, string workflowName, string runName, string actionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/runs/"+ (runName==null? "" : System.Uri.EscapeDataString(runName))+"/actions/"+ (actionName==null? "" : System.Uri.EscapeDataString(actionName))+"/scopeRepetitions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowRunActionRepetitionDefinitionCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a workflow run action scoped repetition.
		/// WorkflowRunActionScopeRepetitions_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/scopeRepetitions/{repetitionName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="runName">The workflow run name.</param>
		/// <param name="actionName">The workflow action name.</param>
		/// <param name="repetitionName">The workflow repetition.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowRunActionRepetitionDefinition> WorkflowRunActionScopeRepetitions_GetAsync(string subscriptionId, string resourceGroupName, string workflowName, string runName, string actionName, string repetitionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/runs/"+ (runName==null? "" : System.Uri.EscapeDataString(runName))+"/actions/"+ (actionName==null? "" : System.Uri.EscapeDataString(actionName))+"/scopeRepetitions/"+ (repetitionName==null? "" : System.Uri.EscapeDataString(repetitionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowRunActionRepetitionDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a workflow run.
		/// WorkflowRuns_Cancel subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/cancel
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="runName">The workflow run name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task WorkflowRuns_CancelAsync(string subscriptionId, string resourceGroupName, string workflowName, string runName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/runs/"+ (runName==null? "" : System.Uri.EscapeDataString(runName))+"/cancel&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an operation for a run.
		/// WorkflowRunOperations_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/operations/{operationId}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="runName">The workflow run name.</param>
		/// <param name="operationId">The workflow operation id.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowRun> WorkflowRunOperations_GetAsync(string subscriptionId, string resourceGroupName, string workflowName, string runName, string operationId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/runs/"+ (runName==null? "" : System.Uri.EscapeDataString(runName))+"/operations/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of workflow triggers.
		/// WorkflowTriggers_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="top">The number of items to be included in the result.</param>
		/// <param name="filter">The filter to apply on the operation.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowTriggerListResult> WorkflowTriggers_ListAsync(string subscriptionId, string resourceGroupName, string workflowName, string api_version, int top, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/triggers&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowTriggerListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a workflow trigger.
		/// WorkflowTriggers_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="triggerName">The workflow trigger name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowTrigger> WorkflowTriggers_GetAsync(string subscriptionId, string resourceGroupName, string workflowName, string triggerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowTrigger>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of workflow trigger histories.
		/// WorkflowTriggerHistories_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/histories
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="triggerName">The workflow trigger name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="top">The number of items to be included in the result.</param>
		/// <param name="filter">The filter to apply on the operation. Options for filters include: Status, StartTime, and ClientTrackingId.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowTriggerHistoryListResult> WorkflowTriggerHistories_ListAsync(string subscriptionId, string resourceGroupName, string workflowName, string triggerName, string api_version, int top, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"/histories&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowTriggerHistoryListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a workflow trigger history.
		/// WorkflowTriggerHistories_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/histories/{historyName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="triggerName">The workflow trigger name.</param>
		/// <param name="historyName">The workflow trigger history name. Corresponds to the run name for triggers that resulted in a run.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowTriggerHistory> WorkflowTriggerHistories_GetAsync(string subscriptionId, string resourceGroupName, string workflowName, string triggerName, string historyName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"/histories/"+ (historyName==null? "" : System.Uri.EscapeDataString(historyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowTriggerHistory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resubmits a workflow run based on the trigger history.
		/// WorkflowTriggerHistories_Resubmit subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/histories/{historyName}/resubmit
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="triggerName">The workflow trigger name.</param>
		/// <param name="historyName">The workflow trigger history name. Corresponds to the run name for triggers that resulted in a run.</param>
		/// <param name="api_version">The API version.</param>
		public async Task WorkflowTriggerHistories_ResubmitAsync(string subscriptionId, string resourceGroupName, string workflowName, string triggerName, string historyName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"/histories/"+ (historyName==null? "" : System.Uri.EscapeDataString(historyName))+"/resubmit&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the callback URL for a workflow trigger.
		/// WorkflowTriggers_ListCallbackUrl subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/listCallbackUrl
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="triggerName">The workflow trigger name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowTriggerCallbackUrl> WorkflowTriggers_ListCallbackUrlAsync(string subscriptionId, string resourceGroupName, string workflowName, string triggerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"/listCallbackUrl&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowTriggerCallbackUrl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets a workflow trigger.
		/// WorkflowTriggers_Reset subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/reset
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="triggerName">The workflow trigger name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task WorkflowTriggers_ResetAsync(string subscriptionId, string resourceGroupName, string workflowName, string triggerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"/reset&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs a workflow trigger.
		/// WorkflowTriggers_Run subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/run
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="triggerName">The workflow trigger name.</param>
		/// <param name="api_version">The API version.</param>
		public async Task WorkflowTriggers_RunAsync(string subscriptionId, string resourceGroupName, string workflowName, string triggerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"/run&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the trigger schema as JSON.
		/// WorkflowTriggers_GetSchemaJson subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/schemas/json
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="triggerName">The workflow trigger name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<JsonSchema> WorkflowTriggers_GetSchemaJsonAsync(string subscriptionId, string resourceGroupName, string workflowName, string triggerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"/schemas/json&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JsonSchema>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the state of a workflow trigger.
		/// WorkflowTriggers_SetState subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/setState
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="triggerName">The workflow trigger name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The workflow trigger state.</param>
		/// <returns>OK</returns>
		public async Task WorkflowTriggers_SetStateAsync(string subscriptionId, string resourceGroupName, string workflowName, string triggerName, string api_version, SetTriggerStateActionDefinition requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"/setState&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Validates the workflow.
		/// Workflows_ValidateByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/validate
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The workflow.</param>
		/// <returns>OK</returns>
		public async Task Workflows_ValidateByResourceGroupAsync(string subscriptionId, string resourceGroupName, string workflowName, string api_version, Workflow requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/validate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of workflow versions.
		/// WorkflowVersions_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/versions
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="top">The number of items to be included in the result.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowVersionListResult> WorkflowVersions_ListAsync(string subscriptionId, string resourceGroupName, string workflowName, string api_version, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/versions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowVersionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a workflow version.
		/// WorkflowVersions_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/versions/{versionId}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="versionId">The workflow versionId.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowVersion> WorkflowVersions_GetAsync(string subscriptionId, string resourceGroupName, string workflowName, string versionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/versions/"+ (versionId==null? "" : System.Uri.EscapeDataString(versionId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowVersion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the callback url for a trigger of a workflow version.
		/// WorkflowVersionTriggers_ListCallbackUrl subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/versions/{versionId}/triggers/{triggerName}/listCallbackUrl
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="workflowName">The workflow name.</param>
		/// <param name="versionId">The workflow versionId.</param>
		/// <param name="triggerName">The workflow trigger name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The callback URL parameters.</param>
		/// <returns>OK</returns>
		public async Task<WorkflowTriggerCallbackUrl> WorkflowVersionTriggers_ListCallbackUrlAsync(string subscriptionId, string resourceGroupName, string workflowName, string versionId, string triggerName, string api_version, GetCallbackUrlParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Logic/workflows/"+ (workflowName==null? "" : System.Uri.EscapeDataString(workflowName))+"/versions/"+ (versionId==null? "" : System.Uri.EscapeDataString(versionId))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"/listCallbackUrl&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowTriggerCallbackUrl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of integration service environments by resource group.
		/// IntegrationServiceEnvironments_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroup">The resource group.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="top">The number of items to be included in the result.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationServiceEnvironmentListResult> IntegrationServiceEnvironments_ListByResourceGroupAsync(string subscriptionId, string resourceGroup, string api_version, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Logic/integrationServiceEnvironments&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationServiceEnvironmentListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an integration service environment.
		/// IntegrationServiceEnvironments_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroup">The resource group.</param>
		/// <param name="integrationServiceEnvironmentName">The integration service environment name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationServiceEnvironment> IntegrationServiceEnvironments_GetAsync(string subscriptionId, string resourceGroup, string integrationServiceEnvironmentName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Logic/integrationServiceEnvironments/"+ (integrationServiceEnvironmentName==null? "" : System.Uri.EscapeDataString(integrationServiceEnvironmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationServiceEnvironment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an integration service environment.
		/// IntegrationServiceEnvironments_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroup">The resource group.</param>
		/// <param name="integrationServiceEnvironmentName">The integration service environment name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The integration service environment.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationServiceEnvironment> IntegrationServiceEnvironments_CreateOrUpdateAsync(string subscriptionId, string resourceGroup, string integrationServiceEnvironmentName, string api_version, IntegrationServiceEnvironment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Logic/integrationServiceEnvironments/"+ (integrationServiceEnvironmentName==null? "" : System.Uri.EscapeDataString(integrationServiceEnvironmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationServiceEnvironment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an integration service environment.
		/// IntegrationServiceEnvironments_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroup">The resource group.</param>
		/// <param name="integrationServiceEnvironmentName">The integration service environment name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task IntegrationServiceEnvironments_DeleteAsync(string subscriptionId, string resourceGroup, string integrationServiceEnvironmentName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Logic/integrationServiceEnvironments/"+ (integrationServiceEnvironmentName==null? "" : System.Uri.EscapeDataString(integrationServiceEnvironmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an integration service environment.
		/// IntegrationServiceEnvironments_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroup">The resource group.</param>
		/// <param name="integrationServiceEnvironmentName">The integration service environment name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The integration service environment.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationServiceEnvironment> IntegrationServiceEnvironments_UpdateAsync(string subscriptionId, string resourceGroup, string integrationServiceEnvironmentName, string api_version, IntegrationServiceEnvironment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Logic/integrationServiceEnvironments/"+ (integrationServiceEnvironmentName==null? "" : System.Uri.EscapeDataString(integrationServiceEnvironmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationServiceEnvironment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the integration service environment network health.
		/// IntegrationServiceEnvironmentNetworkHealth_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/health/network
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroup">The resource group.</param>
		/// <param name="integrationServiceEnvironmentName">The integration service environment name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationServiceEnvironmentNetworkHealth> IntegrationServiceEnvironmentNetworkHealth_GetAsync(string subscriptionId, string resourceGroup, string integrationServiceEnvironmentName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Logic/integrationServiceEnvironments/"+ (integrationServiceEnvironmentName==null? "" : System.Uri.EscapeDataString(integrationServiceEnvironmentName))+"/health/network&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationServiceEnvironmentNetworkHealth>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the integration service environment managed Apis.
		/// IntegrationServiceEnvironmentManagedApis_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/managedApis
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroup">The resource group.</param>
		/// <param name="integrationServiceEnvironmentName">The integration service environment name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<ManagedApiListResult> IntegrationServiceEnvironmentManagedApis_ListAsync(string subscriptionId, string resourceGroup, string integrationServiceEnvironmentName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Logic/integrationServiceEnvironments/"+ (integrationServiceEnvironmentName==null? "" : System.Uri.EscapeDataString(integrationServiceEnvironmentName))+"/managedApis&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManagedApiListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the integration service environment managed Api.
		/// IntegrationServiceEnvironmentManagedApis_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/managedApis/{apiName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroup">The resource group name.</param>
		/// <param name="integrationServiceEnvironmentName">The integration service environment name.</param>
		/// <param name="apiName">The api name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<ManagedApi> IntegrationServiceEnvironmentManagedApis_GetAsync(string subscriptionId, string resourceGroup, string integrationServiceEnvironmentName, string apiName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Logic/integrationServiceEnvironments/"+ (integrationServiceEnvironmentName==null? "" : System.Uri.EscapeDataString(integrationServiceEnvironmentName))+"/managedApis/"+ (apiName==null? "" : System.Uri.EscapeDataString(apiName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManagedApi>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Puts the integration service environment managed Api.
		/// IntegrationServiceEnvironmentManagedApis_Put subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/managedApis/{apiName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroup">The resource group name.</param>
		/// <param name="integrationServiceEnvironmentName">The integration service environment name.</param>
		/// <param name="apiName">The api name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<ManagedApi> IntegrationServiceEnvironmentManagedApis_PutAsync(string subscriptionId, string resourceGroup, string integrationServiceEnvironmentName, string apiName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Logic/integrationServiceEnvironments/"+ (integrationServiceEnvironmentName==null? "" : System.Uri.EscapeDataString(integrationServiceEnvironmentName))+"/managedApis/"+ (apiName==null? "" : System.Uri.EscapeDataString(apiName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManagedApi>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the integration service environment managed Api.
		/// IntegrationServiceEnvironmentManagedApis_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/managedApis/{apiName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroup">The resource group.</param>
		/// <param name="integrationServiceEnvironmentName">The integration service environment name.</param>
		/// <param name="apiName">The api name.</param>
		/// <param name="api_version">The API version.</param>
		public async Task IntegrationServiceEnvironmentManagedApis_DeleteAsync(string subscriptionId, string resourceGroup, string integrationServiceEnvironmentName, string apiName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Logic/integrationServiceEnvironments/"+ (integrationServiceEnvironmentName==null? "" : System.Uri.EscapeDataString(integrationServiceEnvironmentName))+"/managedApis/"+ (apiName==null? "" : System.Uri.EscapeDataString(apiName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the managed Api operations.
		/// IntegrationServiceEnvironmentManagedApiOperations_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/managedApis/{apiName}/apiOperations
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroup">The resource group.</param>
		/// <param name="integrationServiceEnvironmentName">The integration service environment name.</param>
		/// <param name="apiName">The api name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<ApiOperationListResult> IntegrationServiceEnvironmentManagedApiOperations_ListAsync(string subscriptionId, string resourceGroup, string integrationServiceEnvironmentName, string apiName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Logic/integrationServiceEnvironments/"+ (integrationServiceEnvironmentName==null? "" : System.Uri.EscapeDataString(integrationServiceEnvironmentName))+"/managedApis/"+ (apiName==null? "" : System.Uri.EscapeDataString(apiName))+"/apiOperations&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiOperationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restarts an integration service environment.
		/// IntegrationServiceEnvironments_Restart subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/restart
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroup">The resource group.</param>
		/// <param name="integrationServiceEnvironmentName">The integration service environment name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task IntegrationServiceEnvironments_RestartAsync(string subscriptionId, string resourceGroup, string integrationServiceEnvironmentName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Logic/integrationServiceEnvironments/"+ (integrationServiceEnvironmentName==null? "" : System.Uri.EscapeDataString(integrationServiceEnvironmentName))+"/restart&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of integration service environment Skus.
		/// IntegrationServiceEnvironmentSkus_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/skus
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroup">The resource group.</param>
		/// <param name="integrationServiceEnvironmentName">The integration service environment name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK</returns>
		public async Task<IntegrationServiceEnvironmentSkuList> IntegrationServiceEnvironmentSkus_ListAsync(string subscriptionId, string resourceGroup, string integrationServiceEnvironmentName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Logic/integrationServiceEnvironments/"+ (integrationServiceEnvironmentName==null? "" : System.Uri.EscapeDataString(integrationServiceEnvironmentName))+"/skus&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationServiceEnvironmentSkuList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
