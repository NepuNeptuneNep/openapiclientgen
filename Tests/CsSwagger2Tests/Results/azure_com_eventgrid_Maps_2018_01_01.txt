//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Schema of the Data property of an EventGridEvent for a Microsoft.Maps.GeofenceEntered event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MapsGeofenceEnteredEventData
	{
	}
	
	/// <summary>
	/// Schema of the Data property of an EventGridEvent for a Geofence event (GeofenceEntered, GeofenceExited, GeofenceResult).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MapsGeofenceEventProperties
	{
		
		/// <summary>
		/// Lists of the geometry ID of the geofence which is expired relative to the user time in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiredGeofenceGeometryId")]
		public string[] ExpiredGeofenceGeometryId { get; set; }
		
		/// <summary>
		/// Lists the fence geometries that either fully contain the coordinate position or have an overlap with the searchBuffer around the fence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geometries")]
		public MapsGeofenceGeometry[] Geometries { get; set; }
		
		/// <summary>
		/// Lists of the geometry ID of the geofence which is in invalid period relative to the user time in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invalidPeriodGeofenceGeometryId")]
		public string[] InvalidPeriodGeofenceGeometryId { get; set; }
		
		/// <summary>
		/// True if at least one event is published to the Azure Maps event subscriber, false if no event is published to the Azure Maps event subscriber.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEventPublished")]
		public System.Nullable<System.Boolean> IsEventPublished { get; set; }
	}
	
	/// <summary>
	/// The geofence geometry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MapsGeofenceGeometry
	{
		
		/// <summary>
		/// ID of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// Distance from the coordinate to the closest border of the geofence. Positive means the coordinate is outside of the geofence. If the coordinate is outside of the geofence, but more than the value of searchBuffer away from the closest geofence border, then the value is 999. Negative means the coordinate is inside of the geofence. If the coordinate is inside the polygon, but more than the value of searchBuffer away from the closest geofencing border,then the value is -999. A value of 999 means that there is great confidence the coordinate is well outside the geofence. A value of -999 means that there is great confidence the coordinate is well within the geofence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distance")]
		public System.Nullable<System.Double> Distance { get; set; }
		
		/// <summary>
		/// The unique ID for the geofence geometry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geometryId")]
		public string GeometryId { get; set; }
		
		/// <summary>
		/// Latitude of the nearest point of the geometry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nearestLat")]
		public System.Nullable<System.Double> NearestLat { get; set; }
		
		/// <summary>
		/// Longitude of the nearest point of the geometry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nearestLon")]
		public System.Nullable<System.Double> NearestLon { get; set; }
		
		/// <summary>
		/// The unique id returned from user upload service when uploading a geofence. Will not be included in geofencing post API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="udId")]
		public string UdId { get; set; }
	}
	
	/// <summary>
	/// Schema of the Data property of an EventGridEvent for a Microsoft.Maps.GeofenceExited event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MapsGeofenceExitedEventData
	{
	}
	
	/// <summary>
	/// Schema of the Data property of an EventGridEvent for a Microsoft.Maps.GeofenceResult event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MapsGeofenceResultEventData
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
