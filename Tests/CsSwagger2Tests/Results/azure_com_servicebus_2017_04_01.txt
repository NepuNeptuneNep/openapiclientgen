//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Namespace/ServiceBus Connection String
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AccessKeys
	{
		
		/// <summary>
		/// Primary connection string of the alias if GEO DR is enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aliasPrimaryConnectionString")]
		public string AliasPrimaryConnectionString { get; set; }
		
		/// <summary>
		/// Secondary  connection string of the alias if GEO DR is enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aliasSecondaryConnectionString")]
		public string AliasSecondaryConnectionString { get; set; }
		
		/// <summary>
		/// A string that describes the authorization rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Primary connection string of the created namespace authorization rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryConnectionString")]
		public string PrimaryConnectionString { get; set; }
		
		/// <summary>
		/// A base64-encoded 256-bit primary key for signing and validating the SAS token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryKey")]
		public string PrimaryKey { get; set; }
		
		/// <summary>
		/// Secondary connection string of the created namespace authorization rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryConnectionString")]
		public string SecondaryConnectionString { get; set; }
		
		/// <summary>
		/// A base64-encoded 256-bit primary key for signing and validating the SAS token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryKey")]
		public string SecondaryKey { get; set; }
	}
	
	/// <summary>
	/// Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Action
	{
		
		/// <summary>
		/// This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compatibilityLevel")]
		public System.Nullable<System.Int32> CompatibilityLevel { get; set; }
		
		/// <summary>
		/// Value that indicates whether the rule action requires preprocessing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiresPreprocessing")]
		public System.Nullable<System.Boolean> RequiresPreprocessing { get; set; }
		
		/// <summary>
		/// SQL expression. e.g. MyProperty='ABC'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlExpression")]
		public string SqlExpression { get; set; }
	}
	
	/// <summary>
	/// Single item in List or Get Alias(Disaster Recovery configuration) operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArmDisasterRecovery : Resource
	{
		
		/// <summary>
		/// Properties required to the Create Or Update Alias(Disaster Recovery configurations)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// The result of the List Alias(Disaster Recovery configuration) operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArmDisasterRecoveryListResult
	{
		
		/// <summary>
		/// Link to the next set of results. Not empty if Value contains incomplete list of Alias(Disaster Recovery configuration)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Alias(Disaster Recovery configurations)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ArmDisasterRecovery[] Value { get; set; }
	}
	
	/// <summary>
	/// AuthorizationRule properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AuthorizationRuleProperties
	{
		
		/// <summary>
		/// The rights associated with the rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rights")]
		public string[] Rights { get; set; }
	}
	
	/// <summary>
	/// Properties to configure capture description for eventhub
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CaptureDescription
	{
		
		/// <summary>
		/// Capture storage details for capture description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public Destination Destination { get; set; }
		
		/// <summary>
		/// A value that indicates whether capture description is enabled. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Enumerates the possible values for the encoding format of capture description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public System.Nullable<CaptureDescriptionEncoding> Encoding { get; set; }
		
		/// <summary>
		/// The time window allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds
		/// Minimum: 60
		/// Maximum: 900
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalInSeconds")]
		[System.ComponentModel.DataAnnotations.Range(60, 900)]
		public System.Nullable<System.Int32> IntervalInSeconds { get; set; }
		
		/// <summary>
		/// The size window defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 and 524288000 bytes
		/// Minimum: 10485760
		/// Maximum: 524288000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeLimitInBytes")]
		[System.ComponentModel.DataAnnotations.Range(10485760, 524288000)]
		public System.Nullable<System.Int32> SizeLimitInBytes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CaptureDescriptionEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Avro = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AvroDeflate = 1,
	}
	
	/// <summary>
	/// Description of a Check Name availability request properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailability
	{
		
		/// <summary>
		/// The Name to check the namespace name availability and The namespace name can contain only letters, numbers, and hyphens. The namespace must start with a letter, and it must end with a letter or number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Description of a Check Name availability request properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityResult
	{
		
		/// <summary>
		/// The detailed info regarding the reason associated with the namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Value indicating namespace is availability, true if the namespace is available; otherwise, false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// Specifies the reason for the unavailability of the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<CheckNameAvailabilityResultReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckNameAvailabilityResultReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidName = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SubscriptionIsDisabled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NameInUse = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NameInLockdown = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TooManyNamespaceInCurrentSubscription = 5,
	}
	
	/// <summary>
	/// Represents the correlation filter expression.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CorrelationFilter
	{
		
		/// <summary>
		/// Content type of the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// Identifier of the correlation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		/// <summary>
		/// Application specific label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Identifier of the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
		
		/// <summary>
		/// dictionary object for custom filters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// Address of the queue to reply to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replyTo")]
		public string ReplyTo { get; set; }
		
		/// <summary>
		/// Session identifier to reply to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replyToSessionId")]
		public string ReplyToSessionId { get; set; }
		
		/// <summary>
		/// Value that indicates whether the rule action requires preprocessing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiresPreprocessing")]
		public System.Nullable<System.Boolean> RequiresPreprocessing { get; set; }
		
		/// <summary>
		/// Session identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		/// <summary>
		/// Address to send to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
	}
	
	/// <summary>
	/// Capture storage details for capture description
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Destination
	{
		
		/// <summary>
		/// Name for capture destination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Properties describing the storage account, blob container and archive name format for capture destination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Entity status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EntityStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Restoring = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SendDisabled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReceiveDisabled = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Renaming = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 8,
	}
	
	/// <summary>
	/// Error response indicates ServiceBus service is not able to process the incoming request. The reason is provided in the error message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The result of the List EventHubs operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventHubListResult
	{
		
		/// <summary>
		/// Link to the next set of results. Not empty if Value contains incomplete list of EventHubs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Result of the List EventHubs operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Eventhub[] Value { get; set; }
	}
	
	/// <summary>
	/// Single item in List or Get Event Hub operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Eventhub : Resource
	{
		
		/// <summary>
		/// Properties supplied to the Create Or Update Event Hub operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Rule filter types
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum FilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SqlFilter = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CorrelationFilter = 1,
	}
	
	/// <summary>
	/// Message Count Details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MessageCountDetails
	{
		
		/// <summary>
		/// Number of active messages in the queue, topic, or subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeMessageCount")]
		public System.Nullable<System.Int64> ActiveMessageCount { get; set; }
		
		/// <summary>
		/// Number of messages that are dead lettered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deadLetterMessageCount")]
		public System.Nullable<System.Int64> DeadLetterMessageCount { get; set; }
		
		/// <summary>
		/// Number of scheduled messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledMessageCount")]
		public System.Nullable<System.Int64> ScheduledMessageCount { get; set; }
		
		/// <summary>
		/// Number of messages transferred into dead letters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferDeadLetterMessageCount")]
		public System.Nullable<System.Int64> TransferDeadLetterMessageCount { get; set; }
		
		/// <summary>
		/// Number of messages transferred to another queue, topic, or subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferMessageCount")]
		public System.Nullable<System.Int64> TransferMessageCount { get; set; }
	}
	
	/// <summary>
	/// The result of the List migrationConfigurations operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MigrationConfigListResult
	{
		
		/// <summary>
		/// Link to the next set of results. Not empty if Value contains incomplete list of migrationConfigurations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Migration Configs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MigrationConfigProperties[] Value { get; set; }
	}
	
	/// <summary>
	/// Single item in List or Get Migration Config operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MigrationConfigProperties : Resource
	{
		
		/// <summary>
		/// Properties required to the Create Migration Configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Description of NetWorkRuleSet - IpRules resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NWRuleSetIpRules
	{
		
		/// <summary>
		/// The IP Filter Action
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<NWRuleSetIpRulesAction> Action { get; set; }
		
		/// <summary>
		/// IP Mask
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipMask")]
		public string IpMask { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum NWRuleSetIpRulesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Allow = 0,
	}
	
	/// <summary>
	/// Description of VirtualNetworkRules - NetworkRules resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NWRuleSetVirtualNetworkRules
	{
		
		/// <summary>
		/// Value that indicates whether to ignore missing VNet Service Endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreMissingVnetServiceEndpoint")]
		public System.Nullable<System.Boolean> IgnoreMissingVnetServiceEndpoint { get; set; }
		
		/// <summary>
		/// Properties supplied for Subnet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnet")]
		public Subnet Subnet { get; set; }
	}
	
	/// <summary>
	/// Description of NetworkRuleSet resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkRuleSet : Resource
	{
		
		/// <summary>
		/// NetworkRuleSet properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// The response of the List NetworkRuleSet operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkRuleSetListResult
	{
		
		/// <summary>
		/// Link to the next set of results. Not empty if Value contains incomplete list of NetworkRuleSet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Result of the List NetworkRuleSet operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public NetworkRuleSet[] Value { get; set; }
	}
	
	/// <summary>
	/// A ServiceBus REST API operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that represents the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Result of the request to list ServiceBus operations. It contains a list of operations and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// URL to get the next set of operation list results if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of ServiceBus operations supported by the Microsoft.ServiceBus resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// Premium Messaging Region
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PremiumMessagingRegions : ResourceNamespacePatch
	{
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// The response of the List PremiumMessagingRegions operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PremiumMessagingRegionsListResult
	{
		
		/// <summary>
		/// Link to the next set of results. Not empty if Value contains incomplete list of PremiumMessagingRegions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Result of the List PremiumMessagingRegions type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PremiumMessagingRegions[] Value { get; set; }
	}
	
	/// <summary>
	/// Parameters supplied to the Regenerate Authorization Rule operation, specifies which key needs to be reset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegenerateAccessKeyParameters
	{
		
		/// <summary>
		/// Optional, if the key value provided, is reset for KeyType value or autogenerate Key value set for keyType
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The access key to regenerate.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyType")]
		public RegenerateAccessKeyParametersKeyType KeyType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RegenerateAccessKeyParametersKeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PrimaryKey = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecondaryKey = 1,
	}
	
	/// <summary>
	/// The Resource definition for other than namespace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The Resource definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceNamespacePatch : Resource
	{
		
		/// <summary>
		/// Resource location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Description of Rule Resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Rule : Resource
	{
		
		/// <summary>
		/// Description of Rule Resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public Ruleproperties Properties { get; set; }
	}
	
	/// <summary>
	/// The response of the List rule operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RuleListResult
	{
		
		/// <summary>
		/// Link to the next set of results. Not empty if Value contains incomplete list of rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Result of the List Rules operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Rule[] Value { get; set; }
	}
	
	/// <summary>
	/// Description of Rule Resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Ruleproperties
	{
		
		/// <summary>
		/// Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public Action Action { get; set; }
		
		/// <summary>
		/// Represents the correlation filter expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlationFilter")]
		public CorrelationFilter CorrelationFilter { get; set; }
		
		/// <summary>
		/// Rule filter types
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterType")]
		public FilterType FilterType { get; set; }
		
		/// <summary>
		/// Represents a filter which is a composition of an expression and an action that is executed in the pub/sub pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlFilter")]
		public SqlFilter SqlFilter { get; set; }
	}
	
	/// <summary>
	/// Represents a filter which is a composition of an expression and an action that is executed in the pub/sub pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlFilter
	{
		
		/// <summary>
		/// This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
		/// Minimum: 20
		/// Maximum: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compatibilityLevel")]
		[System.ComponentModel.DataAnnotations.Range(20, 20)]
		public System.Nullable<System.Int32> CompatibilityLevel { get; set; }
		
		/// <summary>
		/// Value that indicates whether the rule action requires preprocessing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiresPreprocessing")]
		public System.Nullable<System.Boolean> RequiresPreprocessing { get; set; }
		
		/// <summary>
		/// The SQL expression. e.g. MyProperty='ABC'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlExpression")]
		public string SqlExpression { get; set; }
	}
	
	/// <summary>
	/// Description of a namespace authorization rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SBAuthorizationRule : Resource
	{
		
		/// <summary>
		/// AuthorizationRule properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// The response to the List Namespace operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SBAuthorizationRuleListResult
	{
		
		/// <summary>
		/// Link to the next set of results. Not empty if Value contains incomplete list of Authorization Rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Result of the List Authorization Rules operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SBAuthorizationRule[] Value { get; set; }
	}
	
	/// <summary>
	/// Description of a namespace resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SBNamespace : TrackedResource
	{
		
		/// <summary>
		/// Properties of the namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SBNamespaceProperties Properties { get; set; }
		
		/// <summary>
		/// SKU of the namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public SBSku Sku { get; set; }
	}
	
	/// <summary>
	/// SKU of the namespace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SBSku
	{
		
		/// <summary>
		/// The specified messaging units for the tier. For Premium tier, capacity are 1,2 and 4.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// Name of this SKU.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public SBSkuName Name { get; set; }
		
		/// <summary>
		/// The billing tier of this particular SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public SBSkuName Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SBSkuName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium = 2,
	}
	
	/// <summary>
	/// The response of the List Namespace operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SBNamespaceListResult
	{
		
		/// <summary>
		/// Link to the next set of results. Not empty if Value contains incomplete list of Namespaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Result of the List Namespace operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SBNamespace[] Value { get; set; }
	}
	
	/// <summary>
	/// Namespace Migrate Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SBNamespaceMigrate
	{
		
		/// <summary>
		/// Type of namespaces
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetNamespaceType")]
		public SBNamespaceMigrateTargetNamespaceType TargetNamespaceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SBNamespaceMigrateTargetNamespaceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Messaging = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationHub = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mixed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EventHub = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Relay = 4,
	}
	
	/// <summary>
	/// Properties of the namespace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SBNamespaceProperties
	{
		
		/// <summary>
		/// The time the namespace was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Identifier for Azure Insights metrics
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricId")]
		public string MetricId { get; set; }
		
		/// <summary>
		/// Provisioning state of the namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// Endpoint you can use to perform Service Bus operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceBusEndpoint")]
		public string ServiceBusEndpoint { get; set; }
		
		/// <summary>
		/// The time the namespace was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	/// <summary>
	/// Description of a namespace resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SBNamespaceUpdateParameters : ResourceNamespacePatch
	{
		
		/// <summary>
		/// Properties of the namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SBNamespaceProperties Properties { get; set; }
		
		/// <summary>
		/// SKU of the namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public SBSku Sku { get; set; }
	}
	
	/// <summary>
	/// Description of queue Resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SBQueue : Resource
	{
		
		/// <summary>
		/// The Queue Properties definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SBQueueProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The response to the List Queues operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SBQueueListResult
	{
		
		/// <summary>
		/// Link to the next set of results. Not empty if Value contains incomplete list of queues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Result of the List Queues operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SBQueue[] Value { get; set; }
	}
	
	/// <summary>
	/// The Queue Properties definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SBQueueProperties
	{
		
		/// <summary>
		/// Last time a message was sent, or the last time there was a receive request to this queue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessedAt")]
		public System.Nullable<System.DateTimeOffset> AccessedAt { get; set; }
		
		/// <summary>
		/// ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDeleteOnIdle")]
		public string AutoDeleteOnIdle { get; set; }
		
		/// <summary>
		/// Message Count Details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countDetails")]
		public MessageCountDetails CountDetails { get; set; }
		
		/// <summary>
		/// The exact time the message was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// A value that indicates whether this queue has dead letter support when a message expires.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deadLetteringOnMessageExpiration")]
		public System.Nullable<System.Boolean> DeadLetteringOnMessageExpiration { get; set; }
		
		/// <summary>
		/// ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultMessageTimeToLive")]
		public string DefaultMessageTimeToLive { get; set; }
		
		/// <summary>
		/// ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplicateDetectionHistoryTimeWindow")]
		public string DuplicateDetectionHistoryTimeWindow { get; set; }
		
		/// <summary>
		/// Value that indicates whether server-side batched operations are enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableBatchedOperations")]
		public System.Nullable<System.Boolean> EnableBatchedOperations { get; set; }
		
		/// <summary>
		/// A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableExpress")]
		public System.Nullable<System.Boolean> EnableExpress { get; set; }
		
		/// <summary>
		/// A value that indicates whether the queue is to be partitioned across multiple message brokers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablePartitioning")]
		public System.Nullable<System.Boolean> EnablePartitioning { get; set; }
		
		/// <summary>
		/// Queue/Topic name to forward the Dead Letter message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forwardDeadLetteredMessagesTo")]
		public string ForwardDeadLetteredMessagesTo { get; set; }
		
		/// <summary>
		/// Queue/Topic name to forward the messages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forwardTo")]
		public string ForwardTo { get; set; }
		
		/// <summary>
		/// ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockDuration")]
		public string LockDuration { get; set; }
		
		/// <summary>
		/// The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDeliveryCount")]
		public System.Nullable<System.Int32> MaxDeliveryCount { get; set; }
		
		/// <summary>
		/// The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSizeInMegabytes")]
		public System.Nullable<System.Int32> MaxSizeInMegabytes { get; set; }
		
		/// <summary>
		/// The number of messages in the queue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageCount")]
		public System.Nullable<System.Int64> MessageCount { get; set; }
		
		/// <summary>
		/// A value indicating if this queue requires duplicate detection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiresDuplicateDetection")]
		public System.Nullable<System.Boolean> RequiresDuplicateDetection { get; set; }
		
		/// <summary>
		/// A value that indicates whether the queue supports the concept of sessions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiresSession")]
		public System.Nullable<System.Boolean> RequiresSession { get; set; }
		
		/// <summary>
		/// The size of the queue, in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeInBytes")]
		public System.Nullable<System.Int64> SizeInBytes { get; set; }
		
		/// <summary>
		/// Entity status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EntityStatus Status { get; set; }
		
		/// <summary>
		/// The exact time the message was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	/// <summary>
	/// Description of subscription resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SBSubscription : Resource
	{
		
		/// <summary>
		/// Description of Subscription Resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SBSubscriptionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The response to the List Subscriptions operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SBSubscriptionListResult
	{
		
		/// <summary>
		/// Link to the next set of results. Not empty if Value contains incomplete list of subscriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Result of the List Subscriptions operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SBSubscription[] Value { get; set; }
	}
	
	/// <summary>
	/// Description of Subscription Resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SBSubscriptionProperties
	{
		
		/// <summary>
		/// Last time there was a receive request to this subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessedAt")]
		public System.Nullable<System.DateTimeOffset> AccessedAt { get; set; }
		
		/// <summary>
		/// ISO 8061 timeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDeleteOnIdle")]
		public string AutoDeleteOnIdle { get; set; }
		
		/// <summary>
		/// Message Count Details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countDetails")]
		public MessageCountDetails CountDetails { get; set; }
		
		/// <summary>
		/// Exact time the message was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deadLetteringOnFilterEvaluationExceptions")]
		public System.Nullable<System.Boolean> DeadLetteringOnFilterEvaluationExceptions { get; set; }
		
		/// <summary>
		/// Value that indicates whether a subscription has dead letter support when a message expires.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deadLetteringOnMessageExpiration")]
		public System.Nullable<System.Boolean> DeadLetteringOnMessageExpiration { get; set; }
		
		/// <summary>
		/// ISO 8061 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultMessageTimeToLive")]
		public string DefaultMessageTimeToLive { get; set; }
		
		/// <summary>
		/// ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplicateDetectionHistoryTimeWindow")]
		public string DuplicateDetectionHistoryTimeWindow { get; set; }
		
		/// <summary>
		/// Value that indicates whether server-side batched operations are enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableBatchedOperations")]
		public System.Nullable<System.Boolean> EnableBatchedOperations { get; set; }
		
		/// <summary>
		/// Queue/Topic name to forward the Dead Letter message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forwardDeadLetteredMessagesTo")]
		public string ForwardDeadLetteredMessagesTo { get; set; }
		
		/// <summary>
		/// Queue/Topic name to forward the messages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forwardTo")]
		public string ForwardTo { get; set; }
		
		/// <summary>
		/// ISO 8061 lock duration timespan for the subscription. The default value is 1 minute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockDuration")]
		public string LockDuration { get; set; }
		
		/// <summary>
		/// Number of maximum deliveries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDeliveryCount")]
		public System.Nullable<System.Int32> MaxDeliveryCount { get; set; }
		
		/// <summary>
		/// Number of messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageCount")]
		public System.Nullable<System.Int64> MessageCount { get; set; }
		
		/// <summary>
		/// Value indicating if a subscription supports the concept of sessions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiresSession")]
		public System.Nullable<System.Boolean> RequiresSession { get; set; }
		
		/// <summary>
		/// Entity status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EntityStatus Status { get; set; }
		
		/// <summary>
		/// The exact time the message was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	/// <summary>
	/// Description of topic resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SBTopic : Resource
	{
		
		/// <summary>
		/// The Topic Properties definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SBTopicProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The response to the List Topics operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SBTopicListResult
	{
		
		/// <summary>
		/// Link to the next set of results. Not empty if Value contains incomplete list of topics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Result of the List Topics operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SBTopic[] Value { get; set; }
	}
	
	/// <summary>
	/// The Topic Properties definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SBTopicProperties
	{
		
		/// <summary>
		/// Last time the message was sent, or a request was received, for this topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessedAt")]
		public System.Nullable<System.DateTimeOffset> AccessedAt { get; set; }
		
		/// <summary>
		/// ISO 8601 timespan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDeleteOnIdle")]
		public string AutoDeleteOnIdle { get; set; }
		
		/// <summary>
		/// Message Count Details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countDetails")]
		public MessageCountDetails CountDetails { get; set; }
		
		/// <summary>
		/// Exact time the message was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// ISO 8601 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultMessageTimeToLive")]
		public string DefaultMessageTimeToLive { get; set; }
		
		/// <summary>
		/// ISO8601 timespan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplicateDetectionHistoryTimeWindow")]
		public string DuplicateDetectionHistoryTimeWindow { get; set; }
		
		/// <summary>
		/// Value that indicates whether server-side batched operations are enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableBatchedOperations")]
		public System.Nullable<System.Boolean> EnableBatchedOperations { get; set; }
		
		/// <summary>
		/// Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableExpress")]
		public System.Nullable<System.Boolean> EnableExpress { get; set; }
		
		/// <summary>
		/// Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablePartitioning")]
		public System.Nullable<System.Boolean> EnablePartitioning { get; set; }
		
		/// <summary>
		/// Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic. Default is 1024.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSizeInMegabytes")]
		public System.Nullable<System.Int32> MaxSizeInMegabytes { get; set; }
		
		/// <summary>
		/// Value indicating if this topic requires duplicate detection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiresDuplicateDetection")]
		public System.Nullable<System.Boolean> RequiresDuplicateDetection { get; set; }
		
		/// <summary>
		/// Size of the topic, in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeInBytes")]
		public System.Nullable<System.Int64> SizeInBytes { get; set; }
		
		/// <summary>
		/// Entity status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EntityStatus Status { get; set; }
		
		/// <summary>
		/// Number of subscriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionCount")]
		public System.Nullable<System.Int32> SubscriptionCount { get; set; }
		
		/// <summary>
		/// Value that indicates whether the topic supports ordering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportOrdering")]
		public System.Nullable<System.Boolean> SupportOrdering { get; set; }
		
		/// <summary>
		/// The exact time the message was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	/// <summary>
	/// Represents set of actions written in SQL language-based syntax that is performed against a ServiceBus.Messaging.BrokeredMessage 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlRuleAction
	{
		
		/// <summary>
		/// This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compatibilityLevel")]
		public System.Nullable<System.Int32> CompatibilityLevel { get; set; }
		
		/// <summary>
		/// Value that indicates whether the rule action requires preprocessing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiresPreprocessing")]
		public System.Nullable<System.Boolean> RequiresPreprocessing { get; set; }
		
		/// <summary>
		/// SQL expression. e.g. MyProperty='ABC'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlExpression")]
		public string SqlExpression { get; set; }
	}
	
	/// <summary>
	/// Properties supplied for Subnet
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Subnet
	{
		
		/// <summary>
		/// Resource ID of Virtual Network Subnet
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The Resource definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrackedResource : Resource
	{
		
		/// <summary>
		/// The Geo-location where the resource lives
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Specifies the reason for the unavailability of the service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum UnavailableReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidName = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SubscriptionIsDisabled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NameInUse = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NameInLockdown = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TooManyNamespaceInCurrentSubscription = 5,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available ServiceBus REST API operations.
		/// Operations_List providers/Microsoft.ServiceBus/operations
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.ServiceBus/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check the give namespace name availability.
		/// Namespaces_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/CheckNameAvailability
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters to check availability of the given namespace name</param>
		/// <returns>check availability returned successfully.</returns>
		public async Task<CheckNameAvailabilityResult> Namespaces_CheckNameAvailabilityAsync(string api_version, string subscriptionId, CheckNameAvailability requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.ServiceBus/CheckNameAvailability?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CheckNameAvailabilityResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the available namespaces within the subscription, irrespective of the resource groups.
		/// Namespaces_List subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/namespaces
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespaces successfully returned.</returns>
		public async Task<SBNamespaceListResult> Namespaces_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.ServiceBus/namespaces?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBNamespaceListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the available premium messaging regions for servicebus
		/// PremiumMessagingRegions_List subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/premiumMessagingRegions
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Premium messaging regions successfully returned.</returns>
		public async Task<PremiumMessagingRegionsListResult> PremiumMessagingRegions_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.ServiceBus/premiumMessagingRegions?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PremiumMessagingRegionsListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the available Regions for a given sku
		/// Regions_ListBySku subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/sku/{sku}/regions
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="sku">The sku type.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <returns>Regions successfully returned.</returns>
		public async Task<PremiumMessagingRegionsListResult> Regions_ListBySkuAsync(string api_version, string subscriptionId, string sku)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.ServiceBus/sku/"+ (sku==null? "" : System.Uri.EscapeDataString(sku))+"/regions?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PremiumMessagingRegionsListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the available namespaces within a resource group.
		/// Namespaces_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespaces successfully returned.</returns>
		public async Task<SBNamespaceListResult> Namespaces_ListByResourceGroupAsync(string resourceGroupName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBNamespaceListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a description for the specified namespace.
		/// Namespaces_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespace successfully returned.</returns>
		public async Task<SBNamespace> Namespaces_GetAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBNamespace>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a service namespace. Once created, this namespace's resource manifest is immutable. This operation is idempotent.
		/// Namespaces_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to create a namespace resource.</param>
		/// <returns>Namespace created successfully.</returns>
		public async Task<SBNamespace> Namespaces_CreateOrUpdateAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId, SBNamespace requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBNamespace>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing namespace. This operation also removes all associated resources under the namespace.
		/// Namespaces_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespace successfully deleted.</returns>
		public async Task Namespaces_DeleteAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a service namespace. Once created, this namespace's resource manifest is immutable. This operation is idempotent.
		/// Namespaces_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to update a namespace resource.</param>
		/// <returns>Namespace updated successfully.</returns>
		public async Task<SBNamespace> Namespaces_UpdateAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId, SBNamespaceUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBNamespace>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the authorization rules for a namespace.
		/// Namespaces_ListAuthorizationRules subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespace authorization rules returned successfully.</returns>
		public async Task<SBAuthorizationRuleListResult> Namespaces_ListAuthorizationRulesAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/AuthorizationRules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBAuthorizationRuleListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an authorization rule for a namespace by rule name.
		/// Namespaces_GetAuthorizationRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespace authorization rule returned successfully.</returns>
		public async Task<SBAuthorizationRule> Namespaces_GetAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string authorizationRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/AuthorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBAuthorizationRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an authorization rule for a namespace.
		/// Namespaces_CreateOrUpdateAuthorizationRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The shared access authorization rule.</param>
		/// <returns>Namespace authorization rule created.</returns>
		public async Task<SBAuthorizationRule> Namespaces_CreateOrUpdateAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string authorizationRuleName, string api_version, string subscriptionId, SBAuthorizationRule requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/AuthorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBAuthorizationRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a namespace authorization rule.
		/// Namespaces_DeleteAuthorizationRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespace authorization rule successfully deleted.</returns>
		public async Task Namespaces_DeleteAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string authorizationRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/AuthorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the primary and secondary connection strings for the namespace.
		/// Namespaces_ListKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}/listKeys
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Connection strings successfully returned.</returns>
		public async Task<AccessKeys> Namespaces_ListKeysAsync(string resourceGroupName, string namespaceName, string authorizationRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/AuthorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"/listKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccessKeys>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerates the primary or secondary connection strings for the namespace.
		/// Namespaces_RegenerateKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}/regenerateKeys
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to regenerate the authorization rule.</param>
		/// <returns>Authorization rule successfully regenerated.</returns>
		public async Task<AccessKeys> Namespaces_RegenerateKeysAsync(string resourceGroupName, string namespaceName, string authorizationRuleName, string api_version, string subscriptionId, RegenerateAccessKeyParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/AuthorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"/regenerateKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccessKeys>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all Alias(Disaster Recovery configurations)
		/// DisasterRecoveryConfigs_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Successfully retrieved the list of Alias(Disaster Recovery configurations) for servicebus namespace</returns>
		public async Task<ArmDisasterRecoveryListResult> DisasterRecoveryConfigs_ListAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/disasterRecoveryConfigs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ArmDisasterRecoveryListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check the give namespace name availability.
		/// DisasterRecoveryConfigs_CheckNameAvailability subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/CheckNameAvailability
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters to check availability of the given namespace name</param>
		/// <returns>check availability returned successfully.</returns>
		public async Task<CheckNameAvailabilityResult> DisasterRecoveryConfigs_CheckNameAvailabilityAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId, CheckNameAvailability requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/disasterRecoveryConfigs/CheckNameAvailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CheckNameAvailabilityResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves Alias(Disaster Recovery configuration) for primary or secondary namespace
		/// DisasterRecoveryConfigs_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="alias">The Disaster Recovery configuration name
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Successfully retrieved the Alias(Disaster Recovery configurations)</returns>
		public async Task<ArmDisasterRecovery> DisasterRecoveryConfigs_GetAsync(string resourceGroupName, string namespaceName, string alias, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/disasterRecoveryConfigs/"+ (alias==null? "" : System.Uri.EscapeDataString(alias))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ArmDisasterRecovery>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a new Alias(Disaster Recovery configuration)
		/// DisasterRecoveryConfigs_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="alias">The Disaster Recovery configuration name
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters required to create an Alias(Disaster Recovery configuration)</param>
		/// <returns>Alias(Disaster Recovery configuration) successfully created</returns>
		public async Task<ArmDisasterRecovery> DisasterRecoveryConfigs_CreateOrUpdateAsync(string resourceGroupName, string namespaceName, string alias, string api_version, string subscriptionId, ArmDisasterRecovery requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/disasterRecoveryConfigs/"+ (alias==null? "" : System.Uri.EscapeDataString(alias))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ArmDisasterRecovery>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an Alias(Disaster Recovery configuration)
		/// DisasterRecoveryConfigs_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="alias">The Disaster Recovery configuration name
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Delete Alias(Disaster Recovery configuration) request accepted</returns>
		public async Task DisasterRecoveryConfigs_DeleteAsync(string resourceGroupName, string namespaceName, string alias, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/disasterRecoveryConfigs/"+ (alias==null? "" : System.Uri.EscapeDataString(alias))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the authorization rules for a namespace.
		/// DisasterRecoveryConfigs_ListAuthorizationRules subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/AuthorizationRules
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="alias">The Disaster Recovery configuration name
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>DisasterRecoveryConfigs authorization rules returned successfully.</returns>
		public async Task<SBAuthorizationRuleListResult> DisasterRecoveryConfigs_ListAuthorizationRulesAsync(string resourceGroupName, string namespaceName, string alias, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/disasterRecoveryConfigs/"+ (alias==null? "" : System.Uri.EscapeDataString(alias))+"/AuthorizationRules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBAuthorizationRuleListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an authorization rule for a namespace by rule name.
		/// DisasterRecoveryConfigs_GetAuthorizationRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/AuthorizationRules/{authorizationRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="alias">The Disaster Recovery configuration name
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>DisasterRecoveryConfigs authorization rule returned successfully.</returns>
		public async Task<SBAuthorizationRule> DisasterRecoveryConfigs_GetAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string alias, string authorizationRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/disasterRecoveryConfigs/"+ (alias==null? "" : System.Uri.EscapeDataString(alias))+"/AuthorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBAuthorizationRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the primary and secondary connection strings for the namespace.
		/// DisasterRecoveryConfigs_ListKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/AuthorizationRules/{authorizationRuleName}/listKeys
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="alias">The Disaster Recovery configuration name
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Connection strings successfully returned.</returns>
		public async Task<AccessKeys> DisasterRecoveryConfigs_ListKeysAsync(string resourceGroupName, string namespaceName, string alias, string authorizationRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/disasterRecoveryConfigs/"+ (alias==null? "" : System.Uri.EscapeDataString(alias))+"/AuthorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"/listKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccessKeys>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation disables the Disaster Recovery and stops replicating changes from primary to secondary namespaces
		/// DisasterRecoveryConfigs_BreakPairing subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/breakPairing
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="alias">The Disaster Recovery configuration name
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Break-Pairing operation is successful.</returns>
		public async Task DisasterRecoveryConfigs_BreakPairingAsync(string resourceGroupName, string namespaceName, string alias, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/disasterRecoveryConfigs/"+ (alias==null? "" : System.Uri.EscapeDataString(alias))+"/breakPairing&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Invokes GEO DR failover and reconfigure the alias to point to the secondary namespace
		/// DisasterRecoveryConfigs_FailOver subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/failover
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="alias">The Disaster Recovery configuration name
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Failover operation is successful.</returns>
		public async Task DisasterRecoveryConfigs_FailOverAsync(string resourceGroupName, string namespaceName, string alias, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/disasterRecoveryConfigs/"+ (alias==null? "" : System.Uri.EscapeDataString(alias))+"/failover&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the Event Hubs in a service bus Namespace.
		/// EventHubs_ListByNamespace subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/eventhubs
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Successfully retrieved the list of Event Hubs.</returns>
		public async Task<EventHubListResult> EventHubs_ListByNamespaceAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/eventhubs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EventHubListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation Migrate the given namespace to provided name type
		/// Namespaces_Migrate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrate
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to migrate namespace type.</param>
		/// <returns>Migrate Namespace type is successful.</returns>
		public async Task Namespaces_MigrateAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId, SBNamespaceMigrate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/migrate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all migrationConfigurations
		/// MigrationConfigs_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Successfully retrieved the list of migrationConfigurations for servicebus namespace</returns>
		public async Task<MigrationConfigListResult> MigrationConfigs_ListAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/migrationConfigurations&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MigrationConfigListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves Migration Config
		/// MigrationConfigs_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations/{configName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="configName">The configuration name. Should always be "$default".</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Successfully retrieved Migration Config)</returns>
		public async Task<MigrationConfigProperties> MigrationConfigs_GetAsync(string resourceGroupName, string namespaceName, MigrationConfigs_GetConfigName configName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/migrationConfigurations/"+configName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MigrationConfigProperties>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates Migration configuration and starts migration of entities from Standard to Premium namespace
		/// MigrationConfigs_CreateAndStartMigration subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations/{configName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="configName">The configuration name. Should always be "$default".</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters required to create Migration Configuration</param>
		/// <returns>Migration Config successfully created</returns>
		public async Task<MigrationConfigProperties> MigrationConfigs_CreateAndStartMigrationAsync(string resourceGroupName, string namespaceName, MigrationConfigs_CreateAndStartMigrationConfigName configName, string api_version, string subscriptionId, MigrationConfigProperties requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/migrationConfigurations/"+configName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MigrationConfigProperties>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a MigrationConfiguration
		/// MigrationConfigs_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations/{configName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="configName">The configuration name. Should always be "$default".</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Delete Migration Config request accepted</returns>
		public async Task MigrationConfigs_DeleteAsync(string resourceGroupName, string namespaceName, MigrationConfigs_DeleteConfigName configName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/migrationConfigurations/"+configName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation reverts Migration
		/// MigrationConfigs_Revert subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations/{configName}/revert
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="configName">The configuration name. Should always be "$default".</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>MigrationConfig Revert operation is successful.</returns>
		public async Task MigrationConfigs_RevertAsync(string resourceGroupName, string namespaceName, MigrationConfigs_RevertConfigName configName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/migrationConfigurations/"+configName+"/revert&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation Completes Migration of entities by pointing the connection strings to Premium namespace and any entities created after the operation will be under Premium Namespace. CompleteMigration operation will fail when entity migration is in-progress.
		/// MigrationConfigs_CompleteMigration subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations/{configName}/upgrade
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="configName">The configuration name. Should always be "$default".</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>upgrade operation of Migration Config is successful.</returns>
		public async Task MigrationConfigs_CompleteMigrationAsync(string resourceGroupName, string namespaceName, MigrationConfigs_CompleteMigrationConfigName configName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/migrationConfigurations/"+configName+"/upgrade&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of NetworkRuleSet for a Namespace.
		/// Namespaces_ListNetworkRuleSets subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/networkRuleSets
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>List of NetworkRuleSets for Namespace successfully returned.</returns>
		public async Task<NetworkRuleSetListResult> Namespaces_ListNetworkRuleSetsAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/networkRuleSets&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NetworkRuleSetListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets NetworkRuleSet for a Namespace.
		/// Namespaces_GetNetworkRuleSet subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/networkRuleSets/default
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespace NetworkRuleSet successfully returned.</returns>
		public async Task<NetworkRuleSet> Namespaces_GetNetworkRuleSetAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/networkRuleSets/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NetworkRuleSet>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update NetworkRuleSet for a Namespace.
		/// Namespaces_CreateOrUpdateNetworkRuleSet subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/networkRuleSets/default
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The Namespace IpFilterRule.</param>
		/// <returns>Namespace NetworkRuleSet successfully returned.</returns>
		public async Task<NetworkRuleSet> Namespaces_CreateOrUpdateNetworkRuleSetAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId, NetworkRuleSet requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/networkRuleSets/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NetworkRuleSet>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the queues within a namespace.
		/// Queues_ListByNamespace subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="skip">Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls.
		/// Minimum: 0
		/// Maximum: 1000
		// </param>
		/// <param name="top">May be used to limit the number of results to the most recent N usageDetails.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Queues successfully returned.</returns>
		public async Task<SBQueueListResult> Queues_ListByNamespaceAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId, int skip, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/queues&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skip="+skip+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBQueueListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a description for the specified queue.
		/// Queues_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="queueName">The queue name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Queue description successfully returned.</returns>
		public async Task<SBQueue> Queues_GetAsync(string resourceGroupName, string namespaceName, string queueName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/queues/"+ (queueName==null? "" : System.Uri.EscapeDataString(queueName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBQueue>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a Service Bus queue. This operation is idempotent.
		/// Queues_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="queueName">The queue name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to create or update a queue resource.</param>
		/// <returns>Queue successfully created.</returns>
		public async Task<SBQueue> Queues_CreateOrUpdateAsync(string resourceGroupName, string namespaceName, string queueName, string api_version, string subscriptionId, SBQueue requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/queues/"+ (queueName==null? "" : System.Uri.EscapeDataString(queueName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBQueue>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a queue from the specified namespace in a resource group.
		/// Queues_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="queueName">The queue name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Queue successfully deleted.</returns>
		public async Task Queues_DeleteAsync(string resourceGroupName, string namespaceName, string queueName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/queues/"+ (queueName==null? "" : System.Uri.EscapeDataString(queueName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all authorization rules for a queue.
		/// Queues_ListAuthorizationRules subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="queueName">The queue name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Authorization rules successfully returned.</returns>
		public async Task<SBAuthorizationRuleListResult> Queues_ListAuthorizationRulesAsync(string resourceGroupName, string namespaceName, string queueName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/queues/"+ (queueName==null? "" : System.Uri.EscapeDataString(queueName))+"/authorizationRules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBAuthorizationRuleListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an authorization rule for a queue by rule name.
		/// Queues_GetAuthorizationRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="queueName">The queue name.
		/// Min length: 1
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Authorization rule successfully returned.</returns>
		public async Task<SBAuthorizationRule> Queues_GetAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string queueName, string authorizationRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/queues/"+ (queueName==null? "" : System.Uri.EscapeDataString(queueName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBAuthorizationRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an authorization rule for a queue.
		/// Queues_CreateOrUpdateAuthorizationRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="queueName">The queue name.
		/// Min length: 1
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The shared access authorization rule.</param>
		/// <returns>Authorization rule successfully created.</returns>
		public async Task<SBAuthorizationRule> Queues_CreateOrUpdateAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string queueName, string authorizationRuleName, string api_version, string subscriptionId, SBAuthorizationRule requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/queues/"+ (queueName==null? "" : System.Uri.EscapeDataString(queueName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBAuthorizationRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a queue authorization rule.
		/// Queues_DeleteAuthorizationRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="queueName">The queue name.
		/// Min length: 1
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Authorization rule successfully deleted.</returns>
		public async Task Queues_DeleteAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string queueName, string authorizationRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/queues/"+ (queueName==null? "" : System.Uri.EscapeDataString(queueName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Primary and secondary connection strings to the queue.
		/// Queues_ListKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}/ListKeys
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="queueName">The queue name.
		/// Min length: 1
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Connection strings successfully returned.</returns>
		public async Task<AccessKeys> Queues_ListKeysAsync(string resourceGroupName, string namespaceName, string queueName, string authorizationRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/queues/"+ (queueName==null? "" : System.Uri.EscapeDataString(queueName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"/ListKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccessKeys>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerates the primary or secondary connection strings to the queue.
		/// Queues_RegenerateKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}/regenerateKeys
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="queueName">The queue name.
		/// Min length: 1
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to regenerate the authorization rule.</param>
		/// <returns>Connection strings successfully regenerated.</returns>
		public async Task<AccessKeys> Queues_RegenerateKeysAsync(string resourceGroupName, string namespaceName, string queueName, string authorizationRuleName, string api_version, string subscriptionId, RegenerateAccessKeyParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/queues/"+ (queueName==null? "" : System.Uri.EscapeDataString(queueName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"/regenerateKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccessKeys>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the topics in a namespace.
		/// Topics_ListByNamespace subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="skip">Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls.
		/// Minimum: 0
		/// Maximum: 1000
		// </param>
		/// <param name="top">May be used to limit the number of results to the most recent N usageDetails.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Successfully retrieved list of topics.</returns>
		public async Task<SBTopicListResult> Topics_ListByNamespaceAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId, int skip, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/topics&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skip="+skip+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBTopicListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a description for the specified topic.
		/// Topics_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="topicName">The topic name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Topic description successfully retrieved.</returns>
		public async Task<SBTopic> Topics_GetAsync(string resourceGroupName, string namespaceName, string topicName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBTopic>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a topic in the specified namespace.
		/// Topics_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="topicName">The topic name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to create a topic resource.</param>
		/// <returns>Topic successfully created.</returns>
		public async Task<SBTopic> Topics_CreateOrUpdateAsync(string resourceGroupName, string namespaceName, string topicName, string api_version, string subscriptionId, SBTopic requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBTopic>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a topic from the specified namespace and resource group.
		/// Topics_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="topicName">The topic name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Topic successfully deleted.</returns>
		public async Task Topics_DeleteAsync(string resourceGroupName, string namespaceName, string topicName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets authorization rules for a topic.
		/// Topics_ListAuthorizationRules subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="topicName">The topic name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Authorization rules successfully returned.</returns>
		public async Task<SBAuthorizationRuleListResult> Topics_ListAuthorizationRulesAsync(string resourceGroupName, string namespaceName, string topicName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"/authorizationRules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBAuthorizationRuleListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the specified authorization rule.
		/// Topics_GetAuthorizationRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="topicName">The topic name.
		/// Min length: 1
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Topic authorization rule returned successfully.</returns>
		public async Task<SBAuthorizationRule> Topics_GetAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string topicName, string authorizationRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBAuthorizationRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an authorization rule for the specified topic.
		/// Topics_CreateOrUpdateAuthorizationRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="topicName">The topic name.
		/// Min length: 1
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The shared access authorization rule.</param>
		/// <returns>Topic authorization rule successfully created.</returns>
		public async Task<SBAuthorizationRule> Topics_CreateOrUpdateAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string topicName, string authorizationRuleName, string api_version, string subscriptionId, SBAuthorizationRule requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBAuthorizationRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a topic authorization rule.
		/// Topics_DeleteAuthorizationRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="topicName">The topic name.
		/// Min length: 1
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Topic authorization rule successfully deleted.</returns>
		public async Task Topics_DeleteAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string topicName, string authorizationRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the primary and secondary connection strings for the topic.
		/// Topics_ListKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}/ListKeys
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="topicName">The topic name.
		/// Min length: 1
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Connection strings successfully retrieved.</returns>
		public async Task<AccessKeys> Topics_ListKeysAsync(string resourceGroupName, string namespaceName, string topicName, string authorizationRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"/ListKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccessKeys>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerates primary or secondary connection strings for the topic.
		/// Topics_RegenerateKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}/regenerateKeys
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="topicName">The topic name.
		/// Min length: 1
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to regenerate the authorization rule.</param>
		/// <returns>Connection strings successfully regenerated.</returns>
		public async Task<AccessKeys> Topics_RegenerateKeysAsync(string resourceGroupName, string namespaceName, string topicName, string authorizationRuleName, string api_version, string subscriptionId, RegenerateAccessKeyParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"/regenerateKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccessKeys>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all the subscriptions under a specified topic.
		/// Subscriptions_ListByTopic subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="topicName">The topic name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="skip">Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls.
		/// Minimum: 0
		/// Maximum: 1000
		// </param>
		/// <param name="top">May be used to limit the number of results to the most recent N usageDetails.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Successfully retrieved list of subscriptions.</returns>
		public async Task<SBSubscriptionListResult> Subscriptions_ListByTopicAsync(string resourceGroupName, string namespaceName, string topicName, string api_version, string subscriptionId, int skip, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"/subscriptions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skip="+skip+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBSubscriptionListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a subscription description for the specified topic.
		/// Subscriptions_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="topicName">The topic name.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionName">The subscription name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Successfully retrieved subscription description.</returns>
		public async Task<SBSubscription> Subscriptions_GetAsync(string resourceGroupName, string namespaceName, string topicName, string subscriptionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"/subscriptions/"+ (subscriptionName==null? "" : System.Uri.EscapeDataString(subscriptionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBSubscription>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a topic subscription.
		/// Subscriptions_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="topicName">The topic name.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionName">The subscription name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to create a subscription resource.</param>
		/// <returns>Subscription create request accepted.</returns>
		public async Task<SBSubscription> Subscriptions_CreateOrUpdateAsync(string resourceGroupName, string namespaceName, string topicName, string subscriptionName, string api_version, string subscriptionId, SBSubscription requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"/subscriptions/"+ (subscriptionName==null? "" : System.Uri.EscapeDataString(subscriptionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SBSubscription>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a subscription from the specified topic.
		/// Subscriptions_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="topicName">The topic name.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionName">The subscription name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Subscription successfully deleted.</returns>
		public async Task Subscriptions_DeleteAsync(string resourceGroupName, string namespaceName, string topicName, string subscriptionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"/subscriptions/"+ (subscriptionName==null? "" : System.Uri.EscapeDataString(subscriptionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all the rules within given topic-subscription
		/// Rules_ListBySubscriptions subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}/rules
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="topicName">The topic name.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionName">The subscription name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="skip">Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls.
		/// Minimum: 0
		/// Maximum: 1000
		// </param>
		/// <param name="top">May be used to limit the number of results to the most recent N usageDetails.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Successfully retrieved list of Rules.</returns>
		public async Task<RuleListResult> Rules_ListBySubscriptionsAsync(string resourceGroupName, string namespaceName, string topicName, string subscriptionName, string api_version, string subscriptionId, int skip, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"/subscriptions/"+ (subscriptionName==null? "" : System.Uri.EscapeDataString(subscriptionName))+"/rules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skip="+skip+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RuleListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the description for the specified rule.
		/// Rules_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}/rules/{ruleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="topicName">The topic name.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionName">The subscription name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="ruleName">The rule name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Successfully retrieved rule description.</returns>
		public async Task<Rule> Rules_GetAsync(string resourceGroupName, string namespaceName, string topicName, string subscriptionName, string ruleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"/subscriptions/"+ (subscriptionName==null? "" : System.Uri.EscapeDataString(subscriptionName))+"/rules/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Rule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new rule and updates an existing rule
		/// Rules_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}/rules/{ruleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="topicName">The topic name.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionName">The subscription name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="ruleName">The rule name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to create a rule.</param>
		/// <returns>Rule created.</returns>
		public async Task<Rule> Rules_CreateOrUpdateAsync(string resourceGroupName, string namespaceName, string topicName, string subscriptionName, string ruleName, string api_version, string subscriptionId, Rule requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"/subscriptions/"+ (subscriptionName==null? "" : System.Uri.EscapeDataString(subscriptionName))+"/rules/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Rule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing rule.
		/// Rules_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}/rules/{ruleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="topicName">The topic name.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionName">The subscription name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="ruleName">The rule name.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Rule deleted.</returns>
		public async Task Rules_DeleteAsync(string resourceGroupName, string namespaceName, string topicName, string subscriptionName, string ruleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServiceBus/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"/subscriptions/"+ (subscriptionName==null? "" : System.Uri.EscapeDataString(subscriptionName))+"/rules/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum MigrationConfigs_GetConfigName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="$default")]
		_default = 0,
	}
	
	public enum MigrationConfigs_CreateAndStartMigrationConfigName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="$default")]
		_default = 0,
	}
	
	public enum MigrationConfigs_DeleteConfigName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="$default")]
		_default = 0,
	}
	
	public enum MigrationConfigs_RevertConfigName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="$default")]
		_default = 0,
	}
	
	public enum MigrationConfigs_CompleteMigrationConfigName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="$default")]
		_default = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
