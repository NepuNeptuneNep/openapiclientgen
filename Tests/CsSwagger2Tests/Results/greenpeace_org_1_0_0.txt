//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Coordinates
	{
		
		/// <summary>
		/// Signed decimal format, example: 52.1234
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public string Latitude { get; set; }
		
		/// <summary>
		/// Signed decimal format, example -77.022223
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public string Longitude { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Event
	{
		
		/// <summary>
		/// The date in YYYY-MM-DD HH:MM:SS format, example: 2015-12-31 23:59:59
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		/// <summary>
		/// A string containing sanitized HTML code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The date in YYYY-MM-DD HH:MM:SS format, example: 2015-12-31 23:59:59
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_date")]
		public string End_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public GroupLite[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		/// <summary>
		/// The date in YYYY-MM-DD HH:MM:SS format, example: 2015-12-31 23:59:59
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modified")]
		public string Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizers")]
		public VolunteerLite[] Organizers { get; set; }
		
		/// <summary>
		/// A resource location, example: https://greenwire.greenpeace.org
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="picture")]
		public string Picture { get; set; }
		
		/// <summary>
		/// The primary key in Drupal, e.g the entity/node id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serial")]
		public string Serial { get; set; }
		
		/// <summary>
		/// The date in YYYY-MM-DD HH:MM:SS format, example: 2015-12-31 23:59:59
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_date")]
		public string Start_date { get; set; }
		
		/// <summary>
		/// Universally unique identifier in canonical format, example: de305d54-75b4-431b-adb2-eb6b9e546014
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class GroupLite
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The primary key in Drupal, e.g the entity/node id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serial")]
		public string Serial { get; set; }
		
		/// <summary>
		/// Universally unique identifier in canonical format, example: de305d54-75b4-431b-adb2-eb6b9e546014
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coordinates")]
		public Coordinates Coordinates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postcode")]
		public string Postcode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streetname")]
		public string Streetname { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class VolunteerLite
	{
		
		/// <summary>
		/// The primary key in Drupal, e.g the entity/node id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serial")]
		public string Serial { get; set; }
		
		/// <summary>
		/// Universally unique identifier in canonical format, example: de305d54-75b4-431b-adb2-eb6b9e546014
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Group
	{
		
		/// <summary>
		/// The date in YYYY-MM-DD HH:MM:SS format, example: 2015-12-31 23:59:59
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		/// <summary>
		/// A string containing sanitized HTML code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="group_type")]
		public System.Nullable<GroupGroup_type> Group_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mission")]
		public string Mission { get; set; }
		
		/// <summary>
		/// The date in YYYY-MM-DD HH:MM:SS format, example: 2015-12-31 23:59:59
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modified")]
		public string Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A resource location, example: https://greenwire.greenpeace.org
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="picture")]
		public string Picture { get; set; }
		
		/// <summary>
		/// The primary key in Drupal, e.g the entity/node id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serial")]
		public string Serial { get; set; }
		
		/// <summary>
		/// Universally unique identifier in canonical format, example: de305d54-75b4-431b-adb2-eb6b9e546014
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum GroupGroup_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Country group")]
		Country_group = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Campaign Project group")]
		Campaign_Project_group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Local group")]
		Local_group = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Discussion group")]
		Discussion_group = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Interest group")]
		Interest_group = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Skills-based group")]
		SkillsMinusbased_group = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum GroupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Country group")]
		Country_group = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Campaign Project group")]
		Campaign_Project_group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Local group")]
		Local_group = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Discussion group")]
		Discussion_group = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Interest group")]
		Interest_group = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Skills-based group")]
		SkillsMinusbased_group = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class HeaderError
	{
		
		/// <summary>
		/// https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// the error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// transaction nonce
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public string Pagination { get; set; }
		
		/// <summary>
		/// The name of the requested object/model/resource. Plural if a collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public System.Nullable<HeaderErrorResources> Resources { get; set; }
		
		/// <summary>
		/// https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum HeaderErrorResources
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		groups = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event")]
		_event = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		events = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		volunteer = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		volunteers = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class HeaderSuccess
	{
		
		/// <summary>
		/// https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// transaction nonce
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The name of the requested object/model/resource. Plural if a collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public System.Nullable<HeaderSuccessResources> Resources { get; set; }
		
		/// <summary>
		/// https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Pagination
	{
		
		/// <summary>
		/// the nubmer of items per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// the current page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// the total number of pages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum HeaderSuccessResources
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		groups = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event")]
		_event = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		events = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		volunteer = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		volunteers = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class LocationSimple
	{
		
		/// <summary>
		/// Country code see. https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
	}
	
	/// <summary>
	/// The name of the requested object/model/resource. Plural if a collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		groups = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event")]
		_event = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		events = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		volunteer = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		volunteers = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Volunteer
	{
		
		/// <summary>
		/// A resource location, example: https://greenwire.greenpeace.org
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avatar")]
		public string Avatar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public LocationSimple[] Locations { get; set; }
		
		/// <summary>
		/// Universally unique identifier in canonical format, example: de305d54-75b4-431b-adb2-eb6b9e546014
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Return the upcoming events (e.g. start date >= today). Gets an array of `Event` object. Mandatory query param of **domain** determines the site / country the event belongs to.
		/// EventsGetByDomainAndLimit events
		/// </summary>
		/// <param name="domain">the site the groups belongs to, example: netherlands</param>
		/// <param name="limit">the number of desired records</param>
		/// <returns>Successful response</returns>
		public async Task<object> EventsGetByDomainAndLimitAsync(string domain, string limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get one `Event` object by specifying its UUID in the url path.
		/// Events_UUIDGet events/{UUID}
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<object> Events_UUIDGetAsync(string UUID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events/"+ (UUID==null? "" : System.Uri.EscapeDataString(UUID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an array of `Group` object. Mandatory query param of **domain** determines the site / country the group belongs to.
		/// GroupsGetByDomainAndLimit groups
		/// </summary>
		/// <param name="domain">the site the groups belongs to, example: netherlands</param>
		/// <param name="limit">the number of desired records</param>
		/// <returns>Successful response</returns>
		public async Task<object> GroupsGetByDomainAndLimitAsync(string domain, string limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get one `Group` object by specifying its UUID in the url path.
		/// Groups_UUIDGet groups/{UUID}
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<object> Groups_UUIDGetAsync(string UUID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+ (UUID==null? "" : System.Uri.EscapeDataString(UUID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an array of `Volunteer` object. Mandatory query param of **domain** determines the site / country the volunteers are from.
		/// VolunteersGetByDomainAndLimitAndMust_have_default_avatar volunteers
		/// </summary>
		/// <param name="domain">the site the users are registered on, example: netherlands</param>
		/// <param name="limit">the number of desired records. Default is 5.</param>
		/// <param name="must_have_default_avatar">1 or 0. filter on people that have the default avatar or not.</param>
		/// <returns>Successful response</returns>
		public async Task<object> VolunteersGetByDomainAndLimitAndMust_have_default_avatarAsync(string domain, string limit, bool must_have_default_avatar, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "volunteers?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&must_have_default_avatar="+must_have_default_avatar;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get one specific `Volunteer` object by specifying its UUID in the url path.
		/// Volunteers_UUIDGet volunteers/{UUID}
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<object> Volunteers_UUIDGetAsync(string UUID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "volunteers/"+ (UUID==null? "" : System.Uri.EscapeDataString(UUID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
