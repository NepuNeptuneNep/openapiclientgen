//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The acquisition of the page BLOB.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Acquisition
	{
		
		/// <summary>
		/// The ID of page BLOB acquisition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acquisitionid")]
		public string Acquisitionid { get; set; }
		
		/// <summary>
		/// The name of the page BLOB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blob")]
		public string Blob { get; set; }
		
		/// <summary>
		/// The container associated with the page BLOB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="container")]
		public string Container { get; set; }
		
		/// <summary>
		/// The file path of the page BLOB file on storage cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		/// <summary>
		/// The file path unc of the page BLOB file on storage cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filePathUnc")]
		public string FilePathUnc { get; set; }
		
		/// <summary>
		/// The maximum size of the page BLOB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumblobsize")]
		public System.Nullable<System.Int64> Maximumblobsize { get; set; }
		
		/// <summary>
		/// The status of page BLOB acquisition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<AcquisitionStatus> Status { get; set; }
		
		/// <summary>
		/// The storage account that holds the page BLOB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageaccount")]
		public string Storageaccount { get; set; }
		
		/// <summary>
		/// ID of the subscription associated with the page BLOB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="susbcriptionid")]
		public string Susbcriptionid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AcquisitionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotAcquired = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
	}
	
	/// <summary>
	/// The list of page BLOB acquisitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AcquisitionList
	{
		
		/// <summary>
		/// List of acquisitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Acquisition[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns a list of BLOB acquisitions.
		/// Acquisitions_List subscriptions/{subscriptionId}/providers/Microsoft.Storage.Admin/locations/{location}/acquisitions
		/// </summary>
		/// <param name="subscriptionId">Subscription Id.</param>
		/// <param name="location">Resource location.</param>
		/// <param name="api_version">REST Api Version.</param>
		/// <returns>OK -- The list of acquisitions has been returned.</returns>
		public async Task<AcquisitionList> Acquisitions_ListAsync(string subscriptionId, string location, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Storage.Admin/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/acquisitions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AcquisitionList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
