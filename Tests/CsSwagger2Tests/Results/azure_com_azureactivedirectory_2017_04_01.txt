//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The diagnostic settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiagnosticSettings
	{
		
		/// <summary>
		/// The resource Id for the event hub authorization rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventHubAuthorizationRuleId")]
		public string EventHubAuthorizationRuleId { get; set; }
		
		/// <summary>
		/// The name of the event hub. If none is specified, the default event hub will be selected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventHubName")]
		public string EventHubName { get; set; }
		
		/// <summary>
		/// The list of logs settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logs")]
		public LogSettings[] Logs { get; set; }
		
		/// <summary>
		/// The service bus rule Id of the diagnostic setting. This is here to maintain backwards compatibility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceBusRuleId")]
		public string ServiceBusRuleId { get; set; }
		
		/// <summary>
		/// The resource ID of the storage account to which you would like to send Diagnostic Logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountId")]
		public string StorageAccountId { get; set; }
		
		/// <summary>
		/// The workspace ID (resource ID of a Log Analytics workspace) for a Log Analytics workspace to which you would like to send Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		public string WorkspaceId { get; set; }
	}
	
	/// <summary>
	/// Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular log.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LogSettings
	{
		
		/// <summary>
		/// Name of a Diagnostic Log category for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<LogSettingsCategory> Category { get; set; }
		
		/// <summary>
		/// A value indicating whether this log is enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// Specifies the retention policy for the log.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionPolicy")]
		public RetentionPolicy RetentionPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum LogSettingsCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AuditLogs = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SignInLogs = 1,
	}
	
	/// <summary>
	/// The diagnostic settings Category.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiagnosticSettingsCategory
	{
		
		/// <summary>
		/// The type of the diagnostic settings category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryType")]
		public System.Nullable<DiagnosticSettingsCategoryCategoryType> CategoryType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DiagnosticSettingsCategoryCategoryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Logs = 0,
	}
	
	/// <summary>
	/// The diagnostic settings category resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiagnosticSettingsCategoryResource
	{
		
		/// <summary>
		/// The diagnostic settings Category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DiagnosticSettingsCategory Properties { get; set; }
	}
	
	/// <summary>
	/// Represents a collection of diagnostic setting category resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiagnosticSettingsCategoryResourceCollection
	{
		
		/// <summary>
		/// The collection of diagnostic settings category resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DiagnosticSettingsCategoryResource[] Value { get; set; }
	}
	
	/// <summary>
	/// The diagnostic setting resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiagnosticSettingsResource
	{
		
		/// <summary>
		/// The diagnostic settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DiagnosticSettings Properties { get; set; }
	}
	
	/// <summary>
	/// Represents a collection of alert rule resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiagnosticSettingsResourceCollection
	{
		
		/// <summary>
		/// The collection of diagnostic settings resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DiagnosticSettingsResource[] Value { get; set; }
	}
	
	/// <summary>
	/// Contains the localized display information for this particular operation / action. These value will be used by several clients for (1) custom role definitions for RBAC; (2) complex query filters for the event service; and (3) audit history / records for management operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Display
	{
		
		/// <summary>
		/// The description. The localized friendly description for the operation, as it should be shown to the user. It should be thorough, yet concise – it will be used in tool tips and detailed views. Prescriptive guidance for namespaces: Read any 'display.provider' resource Create or Update any 'display.provider' resource Delete any 'display.provider' resource Perform any other action on any 'display.provider' resource Prescriptive guidance for namespaces: Read any 'display.resource' Create or Update any 'display.resource' Delete any 'display.resource' 'ActionName' any 'display.resources'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The operation. The localized friendly name for the operation, as it should be shown to the user. It should be concise (to fit in drop downs) but clear (i.e. self-documenting). It should use Title Casing. Prescriptive guidance: Read Create or Update Delete 'ActionName'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// The provider. The localized friendly form of the resource provider name – it is expected to also include the publisher/company responsible. It should use Title Casing and begin with "Microsoft" for 1st party services. e.g. "Microsoft Monitoring Insights" or "Microsoft Compute."
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// The publisher. The localized friendly form of the resource publisher name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// The resource. The localized friendly form of the resource related to this action/operation – it should match the public documentation for the resource provider. It should use Title Casing. This value should be unique for a particular URL type (e.g. nested types should *not* reuse their parent’s display.resource field). e.g. "Virtual Machines" or "Scheduler Job Collections", or "Virtual Machine VM Sizes" or "Scheduler Jobs"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// Error definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorDefinition
	{
		
		/// <summary>
		/// Service specific error code which serves as the substatus for the HTTP error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Internal error details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ErrorDefinition[] Details { get; set; }
		
		/// <summary>
		/// Description of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorDefinition Error { get; set; }
	}
	
	/// <summary>
	/// Operations discovery class.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationsDiscovery
	{
		
		/// <summary>
		/// Contains the localized display information for this particular operation / action. These value will be used by several clients for (1) custom role definitions for RBAC; (2) complex query filters for the event service; and (3) audit history / records for management operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public Display Display { get; set; }
		
		/// <summary>
		/// Name of the API. The name of the operation being performed on this particular object. It should match the action name that appears in RBAC / the event service. Examples of operations include: * Microsoft.Compute/virtualMachine/capture/action * Microsoft.Compute/virtualMachine/restart/action * Microsoft.Compute/virtualMachine/write * Microsoft.Compute/virtualMachine/read * Microsoft.Compute/virtualMachine/delete Each action should include, in order: (1) Resource Provider Namespace (2) Type hierarchy for which the action applies (e.g. server/databases for a SQL Azure database) (3) Read, Write, Action or Delete indicating which type applies. If it is a PUT/PATCH on a collection or named value, Write should be used. If it is a GET, Read should be used. If it is a DELETE, Delete should be used. If it is a POST, Action should be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Origin. The intended executor of the operation; governs the display of the operation in the RBAC UX and the audit logs UX. Default value is "user,system"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// ClientDiscovery properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public OperationsDiscoveryProperties Properties { get; set; }
	}
	
	/// <summary>
	/// ClientDiscovery properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationsDiscoveryProperties
	{
	}
	
	/// <summary>
	/// Collection of ClientDiscovery details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationsDiscoveryCollection
	{
		
		/// <summary>
		/// The ClientDiscovery details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public OperationsDiscovery[] Value { get; set; }
	}
	
	/// <summary>
	/// A proxy only azure resource object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProxyOnlyResource
	{
		
		/// <summary>
		/// Azure resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Azure resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Azure resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Specifies the retention policy for the log.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RetentionPolicy
	{
		
		/// <summary>
		/// The number of days for the retention in days. A value of 0 will retain the events indefinitely.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="days")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int Days { get; set; }
		
		/// <summary>
		/// A value indicating whether the retention policy is enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets the active diagnostic settings list for AadIam.
		/// DiagnosticSettings_List providers/microsoft.aadiam/diagnosticSettings
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successful request to get more information about AadIam diagnostic settings</returns>
		public async Task<DiagnosticSettingsResourceCollection> DiagnosticSettings_ListAsync(string api_version)
		{
			var requestUri = "providers/microsoft.aadiam/diagnosticSettings?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiagnosticSettingsResourceCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the active diagnostic setting for AadIam.
		/// DiagnosticSettings_Get providers/microsoft.aadiam/diagnosticSettings/{name}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="name">The name of the diagnostic setting.</param>
		/// <returns>Successful request to get more information about diagnostic setting</returns>
		public async Task<DiagnosticSettingsResource> DiagnosticSettings_GetAsync(string api_version, string name)
		{
			var requestUri = "providers/microsoft.aadiam/diagnosticSettings/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiagnosticSettingsResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates diagnostic settings for AadIam.
		/// DiagnosticSettings_CreateOrUpdate providers/microsoft.aadiam/diagnosticSettings/{name}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="name">The name of the diagnostic setting.</param>
		/// <param name="requestBody">Parameters supplied to the operation.</param>
		/// <returns>Successful request to create AadIam diagnostic setting.</returns>
		public async Task<DiagnosticSettingsResource> DiagnosticSettings_CreateOrUpdateAsync(string api_version, string name, DiagnosticSettingsResource requestBody)
		{
			var requestUri = "providers/microsoft.aadiam/diagnosticSettings/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiagnosticSettingsResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes existing diagnostic setting for AadIam.
		/// DiagnosticSettings_Delete providers/microsoft.aadiam/diagnosticSettings/{name}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="name">The name of the diagnostic setting.</param>
		/// <returns>Successful request to remove a diagnostic setting</returns>
		public async Task DiagnosticSettings_DeleteAsync(string api_version, string name)
		{
			var requestUri = "providers/microsoft.aadiam/diagnosticSettings/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the diagnostic settings categories for AadIam.
		/// DiagnosticSettingsCategory_List providers/microsoft.aadiam/diagnosticSettingsCategories
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successful request to get list of diagnostic setting categories</returns>
		public async Task<DiagnosticSettingsCategoryResourceCollection> DiagnosticSettingsCategory_ListAsync(string api_version)
		{
			var requestUri = "providers/microsoft.aadiam/diagnosticSettingsCategories?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiagnosticSettingsCategoryResourceCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Operation to return the list of available operations.
		/// Operations_List providers/microsoft.aadiam/operations
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successful request to get list of AadIam operations.</returns>
		public async Task<OperationsDiscoveryCollection> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/microsoft.aadiam/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationsDiscoveryCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
