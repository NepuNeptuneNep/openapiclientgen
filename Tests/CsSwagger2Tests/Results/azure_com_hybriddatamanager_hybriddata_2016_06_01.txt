//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Class represents provider operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AvailableProviderOperation
	{
		
		/// <summary>
		/// Contains the localized display information for this particular operation / action. 
		///These value will be used by several clients for 
		///(1) custom role definitions for RBAC; 
		///(2) complex query filters for the event service; and (3) audit history / records for management operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public AvailableProviderOperationDisplay Display { get; set; }
		
		/// <summary>
		/// Gets or Sets Name of the operations
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Gets or sets Origin
		///The intended executor of the operation; governs the display of the operation in the RBAC UX and the audit logs UX.
		///Default value is “user,system”
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// Class represents Properties in AvailableProviderOperations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AvailableProviderOperationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Contains the localized display information for this particular operation / action. 
	///These value will be used by several clients for 
	///(1) custom role definitions for RBAC; 
	///(2) complex query filters for the event service; and (3) audit history / records for management operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AvailableProviderOperationDisplay
	{
		
		/// <summary>
		/// Gets or sets Description
		///The localized friendly description for the operation, as it should be shown to the user. 
		///It should be thorough, yet concise – it will be used in tool tips and detailed views.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Gets or sets Operation
		///The localized friendly name for the operation, as it should be shown to the user. 
		///It should be concise (to fit in drop downs) but clear (i.e. self-documenting). It should use Title Casing and include the entity/resource to which it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Gets or sets Provider
		///The localized friendly form of the resource provider name – it is expected to also include the publisher/company responsible. 
		///It should use Title Casing and begin with “Microsoft” for 1st party services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Gets or sets Resource
		///The localized friendly form of the resource type related to this action/operation – it should match the public documentation for the resource provider. 
		///It should use Title Casing – for examples, please refer to the “name” section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// Class represents Properties in AvailableProviderOperations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AvailableProviderOperationProperties
	{
	}
	
	/// <summary>
	/// Class for set of operations used for discovery of available provider operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AvailableProviderOperations
	{
		
		/// <summary>
		/// Link for the next set of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AvailableProviderOperation[] Value { get; set; }
	}
	
	/// <summary>
	/// The pair of customer secret.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomerSecret
	{
		
		/// <summary>
		/// The encryption algorithm used to encrypt data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public CustomerSecretAlgorithm Algorithm { get; set; }
		
		/// <summary>
		/// The identifier to the data service input object which this secret corresponds to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyIdentifier")]
		public string KeyIdentifier { get; set; }
		
		/// <summary>
		/// It contains the encrypted customer secret.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyValue")]
		public string KeyValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CustomerSecretAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA1_5 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_OAEP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PlainText = 3,
	}
	
	/// <summary>
	/// The DataManager resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataManager
	{
		
		/// <summary>
		/// Etag of the Resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
	}
	
	/// <summary>
	/// DataManager resources Collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataManagerList
	{
		
		/// <summary>
		/// Link for the next set of data stores.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of data manager resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DataManager[] Value { get; set; }
	}
	
	/// <summary>
	/// The DataManagerUpdateParameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataManagerUpdateParameter
	{
		
		/// <summary>
		/// The sku type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
		
		/// <summary>
		/// The list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource
		///(across resource groups).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The sku type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sku
	{
		
		/// <summary>
		/// The sku name. Required for data manager creation, optional for update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The sku tier. This is based on the SKU name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	/// <summary>
	/// Data Service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataService
	{
		
		/// <summary>
		/// Data Service properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DataServiceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Data Service properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataServiceProperties
	{
		
		/// <summary>
		/// State of the data service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public DataServicePropertiesState State { get; set; }
		
		/// <summary>
		/// Supported data store types which can be used as a sink.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedDataSinkTypes")]
		public string[] SupportedDataSinkTypes { get; set; }
		
		/// <summary>
		/// Supported data store types which can be used as a source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedDataSourceTypes")]
		public string[] SupportedDataSourceTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataServicePropertiesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Supported = 2,
	}
	
	/// <summary>
	/// Data Service Collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataServiceList
	{
		
		/// <summary>
		/// Link for the next set of data services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of data services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DataService[] Value { get; set; }
	}
	
	/// <summary>
	/// Data store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataStore
	{
		
		/// <summary>
		/// Data Store for sources and sinks
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DataStoreProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Data Store for sources and sinks
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataStoreProperties
	{
		
		/// <summary>
		/// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerSecrets")]
		public CustomerSecret[] CustomerSecrets { get; set; }
		
		/// <summary>
		/// The arm id of the data store type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataStoreTypeId")]
		public string DataStoreTypeId { get; set; }
		
		/// <summary>
		/// A generic json used differently by each data source type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extendedProperties")]
		public string ExtendedProperties { get; set; }
		
		/// <summary>
		/// Arm Id for the manager resource to which the data source is associated. This is optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositoryId")]
		public string RepositoryId { get; set; }
		
		/// <summary>
		/// State of the data source.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public DataServicePropertiesState State { get; set; }
	}
	
	/// <summary>
	/// Contains the information about the filters for the DataStore.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataStoreFilter
	{
		
		/// <summary>
		/// The data store type id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataStoreTypeId")]
		public string DataStoreTypeId { get; set; }
	}
	
	/// <summary>
	/// Data Store Collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataStoreList
	{
		
		/// <summary>
		/// Link for the next set of data stores.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of data stores.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DataStore[] Value { get; set; }
	}
	
	/// <summary>
	/// Data Store Type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataStoreType
	{
		
		/// <summary>
		/// Data Store Type properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DataStoreTypeProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Data Store Type properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataStoreTypeProperties
	{
		
		/// <summary>
		/// Arm type for the manager resource to which the data source type is associated. This is optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositoryType")]
		public string RepositoryType { get; set; }
		
		/// <summary>
		/// State of the data store type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public DataServicePropertiesState State { get; set; }
		
		/// <summary>
		/// Supported data services where it can be used as a sink.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedDataServicesAsSink")]
		public string[] SupportedDataServicesAsSink { get; set; }
		
		/// <summary>
		/// Supported data services where it can be used as a source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedDataServicesAsSource")]
		public string[] SupportedDataServicesAsSource { get; set; }
	}
	
	/// <summary>
	/// Data Store Type Collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataStoreTypeList
	{
		
		/// <summary>
		/// Link for the next set of data store types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of DataStoreType.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DataStoreType[] Value { get; set; }
	}
	
	/// <summary>
	/// Base class for all objects under DataManager Service
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DmsBaseObject
	{
		
		/// <summary>
		/// Id of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Top level error for the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Error
	{
		
		/// <summary>
		/// Error code that can be used to programmatically identify the error.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Describes the error in detail and provides debugging information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Error Details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorDetails
	{
		
		/// <summary>
		/// Error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public System.Nullable<System.Int32> ErrorCode { get; set; }
		
		/// <summary>
		/// Error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Contains the non localized exception message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exceptionMessage")]
		public string ExceptionMessage { get; set; }
		
		/// <summary>
		/// Recommended action for the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendedAction")]
		public string RecommendedAction { get; set; }
	}
	
	/// <summary>
	/// Data service job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Job
	{
		
		/// <summary>
		/// Time at which the job ended in UTC ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Top level error for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error Error { get; set; }
		
		/// <summary>
		/// Job Properties
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public JobProperties Properties { get; set; }
		
		/// <summary>
		/// Time at which the job was started in UTC ISO 8601 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Status of the job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStagesStageStatus Status { get; set; }
	}
	
	/// <summary>
	/// Job Properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobProperties
	{
		
		/// <summary>
		/// Number of bytes processed by the job as of now.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bytesProcessed")]
		public System.Nullable<System.Int64> BytesProcessed { get; set; }
		
		/// <summary>
		/// Name of the data sink on which the job was triggered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSinkName")]
		public string DataSinkName { get; set; }
		
		/// <summary>
		/// Name of the data source on which the job was triggered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceName")]
		public string DataSourceName { get; set; }
		
		/// <summary>
		/// Job details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public JobDetails Details { get; set; }
		
		/// <summary>
		/// Describes whether the job is cancellable.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isCancellable")]
		public JobPropertiesIsCancellable IsCancellable { get; set; }
		
		/// <summary>
		/// Number of items processed by the job as of now
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsProcessed")]
		public System.Nullable<System.Int64> ItemsProcessed { get; set; }
		
		/// <summary>
		/// Number of bytes to be processed by the job in total.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalBytesToProcess")]
		public System.Nullable<System.Int64> TotalBytesToProcess { get; set; }
		
		/// <summary>
		/// Number of items to be processed by the job in total
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalItemsToProcess")]
		public System.Nullable<System.Int64> TotalItemsToProcess { get; set; }
	}
	
	/// <summary>
	/// Job details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobDetails
	{
		
		/// <summary>
		/// Error details for failure. This is optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorDetails")]
		public ErrorDetails[] ErrorDetails { get; set; }
		
		/// <summary>
		/// Item Details Link to download files or see details
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemDetailsLink")]
		public string ItemDetailsLink { get; set; }
		
		/// <summary>
		/// Job Definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobDefinition")]
		public JobDefinition JobDefinition { get; set; }
		
		/// <summary>
		/// List of stages that ran in the job
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobStages")]
		public JobStages[] JobStages { get; set; }
	}
	
	/// <summary>
	/// Job Definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobDefinition
	{
		
		/// <summary>
		/// Job Definition
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public JobDefinitionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Job Definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobDefinitionProperties
	{
		
		/// <summary>
		/// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerSecrets")]
		public CustomerSecret[] CustomerSecrets { get; set; }
		
		/// <summary>
		/// A generic json used differently by each data service type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataServiceInput")]
		public string DataServiceInput { get; set; }
		
		/// <summary>
		/// Data Sink Id associated to the job definition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSinkId")]
		public string DataSinkId { get; set; }
		
		/// <summary>
		/// Data Source Id associated to the job definition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSourceId")]
		public string DataSourceId { get; set; }
		
		/// <summary>
		/// Last modified time of the job definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		/// <summary>
		/// This is the preferred geo location for the job to run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runLocation")]
		public System.Nullable<JobDefinitionPropertiesRunLocation> RunLocation { get; set; }
		
		/// <summary>
		/// Schedule for running the job definition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedules")]
		public Schedule[] Schedules { get; set; }
		
		/// <summary>
		/// State of the job definition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public DataServicePropertiesState State { get; set; }
		
		/// <summary>
		/// Enum to detect if user confirmation is required. If not passed will default to NotRequired.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userConfirmation")]
		public System.Nullable<JobDefinitionPropertiesUserConfirmation> UserConfirmation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobDefinitionPropertiesRunLocation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		australiaeast = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		australiasoutheast = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		brazilsouth = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		canadacentral = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		canadaeast = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		centralindia = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		centralus = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eastasia = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eastus = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eastus2 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		japaneast = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		japanwest = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		koreacentral = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		koreasouth = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		southeastasia = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		southcentralus = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		southindia = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		northcentralus = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		northeurope = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uksouth = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ukwest = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		westcentralus = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		westeurope = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		westindia = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		westus = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		westus2 = 26,
	}
	
	/// <summary>
	/// Schedule for the job run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Schedule
	{
		
		/// <summary>
		/// Name of the schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A list of repetition intervals in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyList")]
		public string[] PolicyList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobDefinitionPropertiesUserConfirmation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotRequired = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Required = 1,
	}
	
	/// <summary>
	/// Job stages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobStages
	{
		
		/// <summary>
		/// Error details for the stage. This is optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorDetails")]
		public ErrorDetails[] ErrorDetails { get; set; }
		
		/// <summary>
		/// Job Stage Details
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobStageDetails")]
		public string JobStageDetails { get; set; }
		
		/// <summary>
		/// Name of the job stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stageName")]
		public string StageName { get; set; }
		
		/// <summary>
		/// Status of the job stage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stageStatus")]
		public JobStagesStageStatus StageStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobStagesStageStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WaitingForAction = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelling = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobPropertiesIsCancellable
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotCancellable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancellable = 1,
	}
	
	/// <summary>
	/// Contains the supported job definition filters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobDefinitionFilter
	{
		
		/// <summary>
		/// The data source associated with the job definition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSource")]
		public string DataSource { get; set; }
		
		/// <summary>
		/// The last modified date time of the data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// The state of the job definition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public DataServicePropertiesState State { get; set; }
	}
	
	/// <summary>
	/// Job Definition Collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobDefinitionList
	{
		
		/// <summary>
		/// Link for the next set of job definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of job definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public JobDefinition[] Value { get; set; }
	}
	
	/// <summary>
	/// Contains the information about the filters for the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobFilter
	{
		
		/// <summary>
		/// The start time of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The status of the job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStagesStageStatus Status { get; set; }
	}
	
	/// <summary>
	/// Job Collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobList
	{
		
		/// <summary>
		/// Link for the next set of jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Job[] Value { get; set; }
	}
	
	/// <summary>
	/// Encryption Key.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Key
	{
		
		/// <summary>
		/// The maximum byte size that can be encrypted by the key. For a key size larger than the size, break into chunks and encrypt each chunk, append each encrypted chunk with : to mark the end of the chunk.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encryptionChunkSizeInBytes")]
		public int EncryptionChunkSizeInBytes { get; set; }
		
		/// <summary>
		/// Exponent of the encryption key.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyExponent")]
		public string KeyExponent { get; set; }
		
		/// <summary>
		/// Modulus of the encryption key.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyModulus")]
		public string KeyModulus { get; set; }
	}
	
	/// <summary>
	/// Public key
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PublicKey
	{
		
		/// <summary>
		/// PublicKey Properties
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PublicKeyProperties Properties { get; set; }
	}
	
	/// <summary>
	/// PublicKey Properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PublicKeyProperties
	{
		
		/// <summary>
		/// Encryption Key.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataServiceLevel1Key")]
		public Key DataServiceLevel1Key { get; set; }
		
		/// <summary>
		/// Encryption Key.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataServiceLevel2Key")]
		public Key DataServiceLevel2Key { get; set; }
	}
	
	/// <summary>
	/// PublicKey Collection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PublicKeyList
	{
		
		/// <summary>
		/// Link for the next set of public keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of public keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PublicKey[] Value { get; set; }
	}
	
	/// <summary>
	/// Model of the Resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// The Resource Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The location of the resource. This will be one of the supported and registered Azure Geo Regions (e.g. West US, East
		///US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created, but if an identical geo
		///region is specified on update the request will succeed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The Resource Name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The sku type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
		
		/// <summary>
		/// The list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource
		///(across resource groups).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The Resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Run parameters for a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunParameters
	{
		
		/// <summary>
		/// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerSecrets")]
		public CustomerSecret[] CustomerSecrets { get; set; }
		
		/// <summary>
		/// A generic json used differently by each data service type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataServiceInput")]
		public string DataServiceInput { get; set; }
		
		/// <summary>
		/// Enum to detect if user confirmation is required. If not passed will default to NotRequired.
		/// </summary>
		[System.ComponentModel.DefaultValue(JobDefinitionPropertiesUserConfirmation.NotRequired)]
		[System.Runtime.Serialization.DataMember(Name="userConfirmation")]
		public JobDefinitionPropertiesUserConfirmation UserConfirmation { get; set; } = JobDefinitionPropertiesUserConfirmation.NotRequired;
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// This method gets all the operations.
		/// Operations_List providers/Microsoft.HybridData/operations
		/// </summary>
		/// <param name="api_version">The API Version</param>
		/// <returns>This method gets all the operations.</returns>
		public async Task<AvailableProviderOperations> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.HybridData/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AvailableProviderOperations>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the data manager resources available under the subscription.
		/// DataManagers_List subscriptions/{subscriptionId}/providers/Microsoft.HybridData/dataManagers
		/// </summary>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="api_version">The API Version</param>
		/// <returns>List of data manager resources available under the subscription.</returns>
		public async Task<DataManagerList> DataManagers_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.HybridData/dataManagers&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataManagerList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the data manager resources available under the given resource group.
		/// DataManagers_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers
		/// </summary>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="api_version">The API Version</param>
		/// <returns>List of data manager resources by resource group.</returns>
		public async Task<DataManagerList> DataManagers_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataManagerList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified data manager resource.
		/// DataManagers_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}
		/// </summary>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		/// <returns>Data Manager Resource object.</returns>
		public async Task<DataManager> DataManagers_GetAsync(string subscriptionId, string resourceGroupName, string dataManagerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataManager>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new data manager resource with the specified parameters. Existing resources cannot be updated with this API
		/// and should instead be updated with the Update data manager resource API.
		/// DataManagers_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}
		/// </summary>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		/// <param name="requestBody">Data manager resource details from request body.</param>
		/// <returns>Data Manager Resource object.</returns>
		public async Task<DataManager> DataManagers_CreateAsync(string subscriptionId, string resourceGroupName, string dataManagerName, string api_version, DataManager requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataManager>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a data manager resource in Microsoft Azure.
		/// DataManagers_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}
		/// </summary>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		public async Task DataManagers_DeleteAsync(string subscriptionId, string resourceGroupName, string dataManagerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the properties of an existing data manager resource.
		/// DataManagers_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}
		/// </summary>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		/// <param name="requestBody">Data manager resource details from request body.</param>
		/// <returns>Data Manager Resource object.</returns>
		public async Task<DataManager> DataManagers_UpdateAsync(string subscriptionId, string resourceGroupName, string dataManagerName, string api_version, DataManagerUpdateParameter requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataManager>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method gets all the data services.
		/// DataServices_ListByDataManager subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices
		/// </summary>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		/// <returns>The list of data services.</returns>
		public async Task<DataServiceList> DataServices_ListByDataManagerAsync(string subscriptionId, string resourceGroupName, string dataManagerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/dataServices&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataServiceList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the data service that match the data service name given.
		/// DataServices_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}
		/// </summary>
		/// <param name="dataServiceName">The name of the data service that is being queried.</param>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		/// <returns>The data service that matches the name.</returns>
		public async Task<DataService> DataServices_GetAsync(string dataServiceName, string subscriptionId, string resourceGroupName, string dataManagerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/dataServices/"+ (dataServiceName==null? "" : System.Uri.EscapeDataString(dataServiceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataService>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method gets all the job definitions of the given data service name.
		/// JobDefinitions_ListByDataService subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions
		/// </summary>
		/// <param name="dataServiceName">The data service type of interest.</param>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		/// <param name="filter">OData Filter options</param>
		/// <returns>The list of job definitions of the given data service type.</returns>
		public async Task<JobDefinitionList> JobDefinitions_ListByDataServiceAsync(string dataServiceName, string subscriptionId, string resourceGroupName, string dataManagerName, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/dataServices/"+ (dataServiceName==null? "" : System.Uri.EscapeDataString(dataServiceName))+"/jobDefinitions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobDefinitionList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method gets job definition object by name.
		/// JobDefinitions_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}
		/// </summary>
		/// <param name="dataServiceName">The data service name of the job definition</param>
		/// <param name="jobDefinitionName">The job definition name that is being queried.</param>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		/// <returns>The job definition that matches the criteria.</returns>
		public async Task<JobDefinition> JobDefinitions_GetAsync(string dataServiceName, string jobDefinitionName, string subscriptionId, string resourceGroupName, string dataManagerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/dataServices/"+ (dataServiceName==null? "" : System.Uri.EscapeDataString(dataServiceName))+"/jobDefinitions/"+ (jobDefinitionName==null? "" : System.Uri.EscapeDataString(jobDefinitionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobDefinition>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a job definition.
		/// JobDefinitions_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}
		/// </summary>
		/// <param name="dataServiceName">The data service type of the job definition.</param>
		/// <param name="jobDefinitionName">The job definition name to be created or updated.</param>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		/// <param name="requestBody">Job Definition object to be created or updated.</param>
		/// <returns>JobDefinition object.</returns>
		public async Task<JobDefinition> JobDefinitions_CreateOrUpdateAsync(string dataServiceName, string jobDefinitionName, string subscriptionId, string resourceGroupName, string dataManagerName, string api_version, JobDefinition requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/dataServices/"+ (dataServiceName==null? "" : System.Uri.EscapeDataString(dataServiceName))+"/jobDefinitions/"+ (jobDefinitionName==null? "" : System.Uri.EscapeDataString(jobDefinitionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobDefinition>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method deletes the given job definition.
		/// JobDefinitions_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}
		/// </summary>
		/// <param name="dataServiceName">The data service type of the job definition.</param>
		/// <param name="jobDefinitionName">The job definition name to be deleted.</param>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		public async Task JobDefinitions_DeleteAsync(string dataServiceName, string jobDefinitionName, string subscriptionId, string resourceGroupName, string dataManagerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/dataServices/"+ (dataServiceName==null? "" : System.Uri.EscapeDataString(dataServiceName))+"/jobDefinitions/"+ (jobDefinitionName==null? "" : System.Uri.EscapeDataString(jobDefinitionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method gets all the jobs of a given job definition.
		/// Jobs_ListByJobDefinition subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs
		/// </summary>
		/// <param name="dataServiceName">The name of the data service of the job definition.</param>
		/// <param name="jobDefinitionName">The name of the job definition for which jobs are needed.</param>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		/// <param name="filter">OData Filter options</param>
		/// <returns>The list of jobs.</returns>
		public async Task<JobList> Jobs_ListByJobDefinitionAsync(string dataServiceName, string jobDefinitionName, string subscriptionId, string resourceGroupName, string dataManagerName, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/dataServices/"+ (dataServiceName==null? "" : System.Uri.EscapeDataString(dataServiceName))+"/jobDefinitions/"+ (jobDefinitionName==null? "" : System.Uri.EscapeDataString(jobDefinitionName))+"/jobs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method gets a data manager job given the jobId.
		/// Jobs_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}
		/// </summary>
		/// <param name="dataServiceName">The name of the data service of the job definition.</param>
		/// <param name="jobDefinitionName">The name of the job definition of the job.</param>
		/// <param name="jobId">The job id of the job queried.</param>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		/// <param name="expand">$expand is supported on details parameter for job, which provides details on the job stages.</param>
		/// <returns>The job that matches the given criteria.</returns>
		public async Task<Job> Jobs_GetAsync(string dataServiceName, string jobDefinitionName, string jobId, string subscriptionId, string resourceGroupName, string dataManagerName, string api_version, string expand)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/dataServices/"+ (dataServiceName==null? "" : System.Uri.EscapeDataString(dataServiceName))+"/jobDefinitions/"+ (jobDefinitionName==null? "" : System.Uri.EscapeDataString(jobDefinitionName))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Job>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels the given job.
		/// Jobs_Cancel subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}/cancel
		/// </summary>
		/// <param name="dataServiceName">The name of the data service of the job definition.</param>
		/// <param name="jobDefinitionName">The name of the job definition of the job.</param>
		/// <param name="jobId">The job id of the job queried.</param>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		public async Task Jobs_CancelAsync(string dataServiceName, string jobDefinitionName, string jobId, string subscriptionId, string resourceGroupName, string dataManagerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/dataServices/"+ (dataServiceName==null? "" : System.Uri.EscapeDataString(dataServiceName))+"/jobDefinitions/"+ (jobDefinitionName==null? "" : System.Uri.EscapeDataString(jobDefinitionName))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/cancel&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resumes the given job.
		/// Jobs_Resume subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}/resume
		/// </summary>
		/// <param name="dataServiceName">The name of the data service of the job definition.</param>
		/// <param name="jobDefinitionName">The name of the job definition of the job.</param>
		/// <param name="jobId">The job id of the job queried.</param>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		public async Task Jobs_ResumeAsync(string dataServiceName, string jobDefinitionName, string jobId, string subscriptionId, string resourceGroupName, string dataManagerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/dataServices/"+ (dataServiceName==null? "" : System.Uri.EscapeDataString(dataServiceName))+"/jobDefinitions/"+ (jobDefinitionName==null? "" : System.Uri.EscapeDataString(jobDefinitionName))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/resume&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method runs a job instance of the given job definition.
		/// JobDefinitions_Run subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/run
		/// </summary>
		/// <param name="dataServiceName">The data service type of the job definition.</param>
		/// <param name="jobDefinitionName">Name of the job definition.</param>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		/// <param name="requestBody">Run time parameters for the job definition.</param>
		public async Task JobDefinitions_RunAsync(string dataServiceName, string jobDefinitionName, string subscriptionId, string resourceGroupName, string dataManagerName, string api_version, RunParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/dataServices/"+ (dataServiceName==null? "" : System.Uri.EscapeDataString(dataServiceName))+"/jobDefinitions/"+ (jobDefinitionName==null? "" : System.Uri.EscapeDataString(jobDefinitionName))+"/run&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method gets all the jobs of a data service type in a given resource.
		/// Jobs_ListByDataService subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobs
		/// </summary>
		/// <param name="dataServiceName">The name of the data service of interest.</param>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		/// <param name="filter">OData Filter options</param>
		/// <returns>The list of jobs that match the service and resource.</returns>
		public async Task<JobList> Jobs_ListByDataServiceAsync(string dataServiceName, string subscriptionId, string resourceGroupName, string dataManagerName, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/dataServices/"+ (dataServiceName==null? "" : System.Uri.EscapeDataString(dataServiceName))+"/jobs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the data store/repository types that the resource supports.
		/// DataStoreTypes_ListByDataManager subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStoreTypes
		/// </summary>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		/// <returns>The list of data store types that are supported.</returns>
		public async Task<DataStoreTypeList> DataStoreTypes_ListByDataManagerAsync(string subscriptionId, string resourceGroupName, string dataManagerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/dataStoreTypes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataStoreTypeList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the data store/repository type given its name.
		/// DataStoreTypes_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStoreTypes/{dataStoreTypeName}
		/// </summary>
		/// <param name="dataStoreTypeName">The data store/repository type name for which details are needed.</param>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		/// <returns>The data store/repository type.</returns>
		public async Task<DataStoreType> DataStoreTypes_GetAsync(string dataStoreTypeName, string subscriptionId, string resourceGroupName, string dataManagerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/dataStoreTypes/"+ (dataStoreTypeName==null? "" : System.Uri.EscapeDataString(dataStoreTypeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataStoreType>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the data stores/repositories in the given resource.
		/// DataStores_ListByDataManager subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores
		/// </summary>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		/// <param name="filter">OData Filter options</param>
		/// <returns>The list of data stores/repositories in the given resource.</returns>
		public async Task<DataStoreList> DataStores_ListByDataManagerAsync(string subscriptionId, string resourceGroupName, string dataManagerName, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/dataStores&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataStoreList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method gets the data store/repository by name.
		/// DataStores_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}
		/// </summary>
		/// <param name="dataStoreName">The data store/repository name queried.</param>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		/// <returns>The data store/repository which matches the name given.</returns>
		public async Task<DataStore> DataStores_GetAsync(string dataStoreName, string subscriptionId, string resourceGroupName, string dataManagerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/dataStores/"+ (dataStoreName==null? "" : System.Uri.EscapeDataString(dataStoreName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataStore>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the data store/repository in the data manager.
		/// DataStores_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}
		/// </summary>
		/// <param name="dataStoreName">The data store/repository name to be created or updated.</param>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		/// <param name="requestBody">The data store/repository object to be created or updated.</param>
		/// <returns>The data store/repository object.</returns>
		public async Task<DataStore> DataStores_CreateOrUpdateAsync(string dataStoreName, string subscriptionId, string resourceGroupName, string dataManagerName, string api_version, DataStore requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/dataStores/"+ (dataStoreName==null? "" : System.Uri.EscapeDataString(dataStoreName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataStore>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method deletes the given data store/repository.
		/// DataStores_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}
		/// </summary>
		/// <param name="dataStoreName">The data store/repository name to be deleted.</param>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		public async Task DataStores_DeleteAsync(string dataStoreName, string subscriptionId, string resourceGroupName, string dataManagerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/dataStores/"+ (dataStoreName==null? "" : System.Uri.EscapeDataString(dataStoreName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method gets all the job definitions of the given data manager resource.
		/// JobDefinitions_ListByDataManager subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/jobDefinitions
		/// </summary>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		/// <param name="filter">OData Filter options</param>
		/// <returns>The list of job definitions in that resource.OK</returns>
		public async Task<JobDefinitionList> JobDefinitions_ListByDataManagerAsync(string subscriptionId, string resourceGroupName, string dataManagerName, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/jobDefinitions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobDefinitionList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method gets all the jobs at the data manager resource level.
		/// Jobs_ListByDataManager subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/jobs
		/// </summary>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		/// <param name="filter">OData Filter options</param>
		/// <returns>The list of jobs in the resource specified.</returns>
		public async Task<JobList> Jobs_ListByDataManagerAsync(string subscriptionId, string resourceGroupName, string dataManagerName, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/jobs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method gets the list view of public keys, however it will only have one element.
		/// PublicKeys_ListByDataManager subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/publicKeys
		/// </summary>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		/// <returns>The list of public keys.</returns>
		public async Task<PublicKeyList> PublicKeys_ListByDataManagerAsync(string subscriptionId, string resourceGroupName, string dataManagerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/publicKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublicKeyList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method gets the public keys.
		/// PublicKeys_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/publicKeys/{publicKeyName}
		/// </summary>
		/// <param name="publicKeyName">Name of the public key.</param>
		/// <param name="subscriptionId">The Subscription Id</param>
		/// <param name="resourceGroupName">The Resource Group Name</param>
		/// <param name="dataManagerName">The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API Version</param>
		/// <returns>The public keys.</returns>
		public async Task<PublicKey> PublicKeys_GetAsync(string publicKeyName, string subscriptionId, string resourceGroupName, string dataManagerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridData/dataManagers/"+ (dataManagerName==null? "" : System.Uri.EscapeDataString(dataManagerName))+"/publicKeys/"+ (publicKeyName==null? "" : System.Uri.EscapeDataString(publicKeyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublicKey>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
