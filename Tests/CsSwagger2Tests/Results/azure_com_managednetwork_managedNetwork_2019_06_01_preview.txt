//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The collection of Connectivity related groups and policies within the Managed Network
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnectivityCollection
	{
		
		/// <summary>
		/// The collection of connectivity related Managed Network Groups within the Managed Network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public ManagedNetworkGroup[] Groups { get; set; }
		
		/// <summary>
		/// The collection of Managed Network Peering Policies within the Managed Network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peerings")]
		public ManagedNetworkPeeringPolicy[] Peerings { get; set; }
	}
	
	/// <summary>
	/// The Managed Network Group resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedNetworkGroup : ProxyResource
	{
		
		/// <summary>
		/// Responsibility role under which this Managed Network Group will be created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<ManagedNetworkGroupKind> Kind { get; set; }
		
		/// <summary>
		/// Properties of a Managed Network Group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ManagedNetworkGroupProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ManagedNetworkGroupKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Connectivity = 0,
	}
	
	/// <summary>
	/// The Managed Network Peering Policy resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedNetworkPeeringPolicy : ProxyResource
	{
		
		/// <summary>
		/// Properties of a Managed Network Peering Policy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ManagedNetworkPeeringPolicyProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The error response that indicates why an operation has failed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Properties of a Hub and Spoke Peering Policy
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HubAndSpokePeeringPolicyProperties : ManagedNetworkPeeringPolicyProperties
	{
		
		/// <summary>
		/// Generic pointer to a resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hub")]
		public ResourceId Hub { get; set; }
		
		/// <summary>
		/// Gets or sets the spokes group IDs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spokes")]
		public ResourceId[] Spokes { get; set; }
	}
	
	/// <summary>
	/// Generic pointer to a resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceId
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The Managed Network resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedNetwork : TrackedResource
	{
		
		/// <summary>
		/// Properties of Managed Network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ManagedNetworkProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of Managed Network
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedNetworkProperties
	{
		
		/// <summary>
		/// The collection of Connectivity related groups and policies within the Managed Network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectivity")]
		public ConnectivityCollection Connectivity { get; set; }
		
		/// <summary>
		/// Scope of a Managed Network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public Scope Scope { get; set; }
	}
	
	/// <summary>
	/// Result of the request to list Managed Network Groups. It contains a list of groups and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedNetworkGroupListResult
	{
		
		/// <summary>
		/// Gets the URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Gets a page of ManagedNetworkGroup
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ManagedNetworkGroup[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of a Managed Network Group
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedNetworkGroupProperties : ResourceProperties
	{
		
		/// <summary>
		/// The collection of management groups covered by the Managed Network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managementGroups")]
		public ResourceId[] ManagementGroups { get; set; }
		
		/// <summary>
		/// The collection of  subnets covered by the Managed Network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnets")]
		public ResourceId[] Subnets { get; set; }
		
		/// <summary>
		/// The collection of subscriptions covered by the Managed Network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptions")]
		public ResourceId[] Subscriptions { get; set; }
		
		/// <summary>
		/// The collection of virtual nets covered by the Managed Network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualNetworks")]
		public ResourceId[] VirtualNetworks { get; set; }
	}
	
	/// <summary>
	/// Result of the request to list Managed Network. It contains a list of Managed Networks and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedNetworkListResult
	{
		
		/// <summary>
		/// Gets the URL to get the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Gets a page of ManagedNetworks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ManagedNetwork[] Value { get; set; }
	}
	
	/// <summary>
	/// Result of the request to list Managed Network Peering Policies. It contains a list of policies and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedNetworkPeeringPolicyListResult
	{
		
		/// <summary>
		/// Gets the URL to get the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Gets a page of Peering Policies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ManagedNetworkPeeringPolicy[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of a Managed Network Peering Policy
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedNetworkPeeringPolicyProperties : ResourceProperties
	{
		
		/// <summary>
		/// Generic pointer to a resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hub")]
		public ResourceId Hub { get; set; }
		
		/// <summary>
		/// Gets or sets the mesh group IDs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mesh")]
		public ResourceId[] Mesh { get; set; }
		
		/// <summary>
		/// Gets or sets the spokes group IDs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spokes")]
		public ResourceId[] Spokes { get; set; }
		
		/// <summary>
		/// Gets or sets the connectivity type of a network structure policy
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ManagedNetworkPeeringPolicyPropertiesType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ManagedNetworkPeeringPolicyPropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HubAndSpokeTopology = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeshTopology = 1,
	}
	
	/// <summary>
	/// Update Tags of Managed Network
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedNetworkUpdate
	{
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Properties of a Mesh Peering Policy
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MeshPeeringPolicyProperties : ManagedNetworkPeeringPolicyProperties
	{
		
		/// <summary>
		/// Gets or sets the mesh group IDs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mesh")]
		public ResourceId[] Mesh { get; set; }
	}
	
	/// <summary>
	/// REST API operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that represents the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Result of the request to list Managed Network operations. It contains a list of operations and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// URL to get the next set of operation list results if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Resource Provider operations supported by the Managed Network resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// The resource model definition for a ARM proxy resource. It will have everything other than required location and tags
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProxyResource
	{
	}
	
	/// <summary>
	/// The general resource model definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The geo-location where the resource lives
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Base for resource properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceProperties
	{
		
		/// <summary>
		/// A unique read-only string that changes whenever the resource is updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Provisioning state of the ManagedNetwork resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<ResourcePropertiesProvisioningState> ProvisioningState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ResourcePropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
	}
	
	/// <summary>
	/// Scope of a Managed Network
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Scope
	{
		
		/// <summary>
		/// The collection of management groups covered by the Managed Network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managementGroups")]
		public ResourceId[] ManagementGroups { get; set; }
		
		/// <summary>
		/// The collection of  subnets covered by the Managed Network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnets")]
		public ResourceId[] Subnets { get; set; }
		
		/// <summary>
		/// The collection of subscriptions covered by the Managed Network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptions")]
		public ResourceId[] Subscriptions { get; set; }
		
		/// <summary>
		/// The collection of virtual nets covered by the Managed Network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualNetworks")]
		public ResourceId[] VirtualNetworks { get; set; }
	}
	
	/// <summary>
	/// The Managed Network resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScopeAssignment : ProxyResource
	{
		
		/// <summary>
		/// Properties of Managed Network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ScopeAssignmentProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of Managed Network
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScopeAssignmentProperties
	{
		
		/// <summary>
		/// The managed network ID with scope will be assigned to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedManagedNetwork")]
		public string AssignedManagedNetwork { get; set; }
	}
	
	/// <summary>
	/// Result of the request to list ScopeAssignment. It contains a list of groups and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScopeAssignmentListResult
	{
		
		/// <summary>
		/// Gets the URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Gets a page of ScopeAssignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ScopeAssignment[] Value { get; set; }
	}
	
	/// <summary>
	/// The resource model definition for a ARM tracked top level resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrackedResource : Resource
	{
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available MNC operations.
		/// Operations_List providers/Microsoft.ManagedNetwork/operations
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.ManagedNetwork/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The ListBySubscription  ManagedNetwork operation retrieves all the Managed Network Resources in the current subscription in a paginated format.
		/// ManagedNetworks_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.ManagedNetwork/managedNetworks
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="top">May be used to limit the number of results in a page for list queries.</param>
		/// <param name="skiptoken">Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.</param>
		/// <returns>Get successful. The operation returns all Managed Network resources under the current subscription in a paginated format.</returns>
		public async Task<ManagedNetworkListResult> ManagedNetworks_ListBySubscriptionAsync(string api_version, string subscriptionId, int top, string skiptoken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.ManagedNetwork/managedNetworks?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top+"&$skiptoken=" + (skiptoken==null? "" : System.Uri.EscapeDataString(skiptoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManagedNetworkListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The ListByResourceGroup ManagedNetwork operation retrieves all the Managed Network resources in a resource group in a paginated format.
		/// ManagedNetworks_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetwork/managedNetworks
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="top">May be used to limit the number of results in a page for list queries.</param>
		/// <param name="skiptoken">Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.</param>
		/// <returns>Get successful. The operation returns all Managed Network resources under the specified resource group in a paginated format</returns>
		public async Task<ManagedNetworkListResult> ManagedNetworks_ListByResourceGroupAsync(string api_version, string subscriptionId, string resourceGroupName, int top, string skiptoken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ManagedNetwork/managedNetworks?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top+"&$skiptoken=" + (skiptoken==null? "" : System.Uri.EscapeDataString(skiptoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManagedNetworkListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The Get ManagedNetworks operation gets a Managed Network Resource, specified by the resource group and Managed Network name
		/// ManagedNetworks_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetwork/managedNetworks/{managedNetworkName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="managedNetworkName">The name of the Managed Network.</param>
		/// <returns>Get successful. The operation returns the specified Managed Network resource.</returns>
		public async Task<ManagedNetwork> ManagedNetworks_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string managedNetworkName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ManagedNetwork/managedNetworks/"+ (managedNetworkName==null? "" : System.Uri.EscapeDataString(managedNetworkName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManagedNetwork>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The Put ManagedNetworks operation creates/updates a Managed Network Resource, specified by resource group and Managed Network name
		/// ManagedNetworks_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetwork/managedNetworks/{managedNetworkName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="managedNetworkName">The name of the Managed Network.</param>
		/// <param name="requestBody">Parameters supplied to the create/update a Managed Network Resource</param>
		/// <returns>Update successful. The operation returns the resulting Managed Network resource.</returns>
		public async Task<ManagedNetwork> ManagedNetworks_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string managedNetworkName, ManagedNetwork requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ManagedNetwork/managedNetworks/"+ (managedNetworkName==null? "" : System.Uri.EscapeDataString(managedNetworkName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManagedNetwork>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The Delete ManagedNetworks operation deletes a Managed Network Resource, specified by the  resource group and Managed Network name
		/// ManagedNetworks_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetwork/managedNetworks/{managedNetworkName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="managedNetworkName">The name of the Managed Network.</param>
		/// <returns>Delete successful.</returns>
		public async Task ManagedNetworks_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string managedNetworkName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ManagedNetwork/managedNetworks/"+ (managedNetworkName==null? "" : System.Uri.EscapeDataString(managedNetworkName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified Managed Network resource tags.
		/// ManagedNetworks_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetwork/managedNetworks/{managedNetworkName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="managedNetworkName">The name of the Managed Network.</param>
		/// <param name="requestBody">Parameters supplied to update application gateway tags and/or scope.</param>
		/// <returns>Update successful. The operation returns the updated Managed Network resource.</returns>
		public async Task<ManagedNetwork> ManagedNetworks_UpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string managedNetworkName, ManagedNetworkUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ManagedNetwork/managedNetworks/"+ (managedNetworkName==null? "" : System.Uri.EscapeDataString(managedNetworkName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManagedNetwork>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The ListByManagedNetwork ManagedNetworkGroup operation retrieves all the Managed Network Groups in a specified Managed Networks in a paginated format.
		/// ManagedNetworkGroups_ListByManagedNetwork subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetwork/managedNetworks/{managedNetworkName}/managedNetworkGroups
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="managedNetworkName">The name of the Managed Network.</param>
		/// <param name="top">May be used to limit the number of results in a page for list queries.</param>
		/// <param name="skiptoken">Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.</param>
		/// <returns>Get successful. The operation returns all Managed Network Group resources under the specified Managed Network in a paginated format.</returns>
		public async Task<ManagedNetworkGroupListResult> ManagedNetworkGroups_ListByManagedNetworkAsync(string api_version, string subscriptionId, string resourceGroupName, string managedNetworkName, int top, string skiptoken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ManagedNetwork/managedNetworks/"+ (managedNetworkName==null? "" : System.Uri.EscapeDataString(managedNetworkName))+"/managedNetworkGroups?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top+"&$skiptoken=" + (skiptoken==null? "" : System.Uri.EscapeDataString(skiptoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManagedNetworkGroupListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The Get ManagedNetworkGroups operation gets a Managed Network Group specified by the resource group, Managed Network name, and group name
		/// ManagedNetworkGroups_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetwork/managedNetworks/{managedNetworkName}/managedNetworkGroups/{managedNetworkGroupName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="managedNetworkName">The name of the Managed Network.</param>
		/// <param name="managedNetworkGroupName">The name of the Managed Network Group.</param>
		/// <returns>Get successful. The operation returns the specified Managed Network Group resource.</returns>
		public async Task<ManagedNetworkGroup> ManagedNetworkGroups_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string managedNetworkName, string managedNetworkGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ManagedNetwork/managedNetworks/"+ (managedNetworkName==null? "" : System.Uri.EscapeDataString(managedNetworkName))+"/managedNetworkGroups/"+ (managedNetworkGroupName==null? "" : System.Uri.EscapeDataString(managedNetworkGroupName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManagedNetworkGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The Put ManagedNetworkGroups operation creates or updates a Managed Network Group resource
		/// ManagedNetworkGroups_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetwork/managedNetworks/{managedNetworkName}/managedNetworkGroups/{managedNetworkGroupName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="managedNetworkName">The name of the Managed Network.</param>
		/// <param name="managedNetworkGroupName">The name of the Managed Network Group.</param>
		/// <param name="requestBody">Parameters supplied to the create/update a Managed Network Group resource</param>
		/// <returns>Update successful. The operation returns the resulting Managed Network Group resource.</returns>
		public async Task<ManagedNetworkGroup> ManagedNetworkGroups_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string managedNetworkName, string managedNetworkGroupName, ManagedNetworkGroup requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ManagedNetwork/managedNetworks/"+ (managedNetworkName==null? "" : System.Uri.EscapeDataString(managedNetworkName))+"/managedNetworkGroups/"+ (managedNetworkGroupName==null? "" : System.Uri.EscapeDataString(managedNetworkGroupName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManagedNetworkGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The Delete ManagedNetworkGroups operation deletes a Managed Network Group specified by the resource group, Managed Network name, and group name
		/// ManagedNetworkGroups_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetwork/managedNetworks/{managedNetworkName}/managedNetworkGroups/{managedNetworkGroupName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="managedNetworkName">The name of the Managed Network.</param>
		/// <param name="managedNetworkGroupName">The name of the Managed Network Group.</param>
		/// <returns>Delete successful.</returns>
		public async Task ManagedNetworkGroups_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string managedNetworkName, string managedNetworkGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ManagedNetwork/managedNetworks/"+ (managedNetworkName==null? "" : System.Uri.EscapeDataString(managedNetworkName))+"/managedNetworkGroups/"+ (managedNetworkGroupName==null? "" : System.Uri.EscapeDataString(managedNetworkGroupName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The ListByManagedNetwork PeeringPolicies operation retrieves all the Managed Network Peering Policies in a specified Managed Network, in a paginated format.
		/// ManagedNetworkPeeringPolicies_ListByManagedNetwork subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetwork/managedNetworks/{managedNetworkName}/managedNetworkPeeringPolicies
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="managedNetworkName">The name of the Managed Network.</param>
		/// <param name="top">May be used to limit the number of results in a page for list queries.</param>
		/// <param name="skiptoken">Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.</param>
		/// <returns>Get successful. The operation returns all Managed Network Peering Policy resources in the specified Managed Network, in a paginated format</returns>
		public async Task<ManagedNetworkPeeringPolicyListResult> ManagedNetworkPeeringPolicies_ListByManagedNetworkAsync(string api_version, string subscriptionId, string resourceGroupName, string managedNetworkName, int top, string skiptoken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ManagedNetwork/managedNetworks/"+ (managedNetworkName==null? "" : System.Uri.EscapeDataString(managedNetworkName))+"/managedNetworkPeeringPolicies?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top+"&$skiptoken=" + (skiptoken==null? "" : System.Uri.EscapeDataString(skiptoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManagedNetworkPeeringPolicyListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The Get ManagedNetworkPeeringPolicies operation gets a Managed Network Peering Policy resource, specified by the  resource group, Managed Network name, and peering policy name
		/// ManagedNetworkPeeringPolicies_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetwork/managedNetworks/{managedNetworkName}/managedNetworkPeeringPolicies/{managedNetworkPeeringPolicyName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="managedNetworkName">The name of the Managed Network.</param>
		/// <param name="managedNetworkPeeringPolicyName">The name of the Managed Network Peering Policy.</param>
		/// <returns>Get successful. The operation returns the specified Managed Network Peering Policy resource.</returns>
		public async Task<ManagedNetworkPeeringPolicy> ManagedNetworkPeeringPolicies_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string managedNetworkName, string managedNetworkPeeringPolicyName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ManagedNetwork/managedNetworks/"+ (managedNetworkName==null? "" : System.Uri.EscapeDataString(managedNetworkName))+"/managedNetworkPeeringPolicies/"+ (managedNetworkPeeringPolicyName==null? "" : System.Uri.EscapeDataString(managedNetworkPeeringPolicyName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManagedNetworkPeeringPolicy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The Put ManagedNetworkPeeringPolicies operation creates/updates a new Managed Network Peering Policy
		/// ManagedNetworkPeeringPolicies_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetwork/managedNetworks/{managedNetworkName}/managedNetworkPeeringPolicies/{managedNetworkPeeringPolicyName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="managedNetworkName">The name of the Managed Network.</param>
		/// <param name="managedNetworkPeeringPolicyName">The name of the Managed Network Peering Policy.</param>
		/// <param name="requestBody">Parameters supplied to create/update a Managed Network Peering Policy</param>
		/// <returns>Update successful. The operation returns the resulting Managed Network Peering Policy resource.</returns>
		public async Task<ManagedNetworkPeeringPolicy> ManagedNetworkPeeringPolicies_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string managedNetworkName, string managedNetworkPeeringPolicyName, ManagedNetworkPeeringPolicy requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ManagedNetwork/managedNetworks/"+ (managedNetworkName==null? "" : System.Uri.EscapeDataString(managedNetworkName))+"/managedNetworkPeeringPolicies/"+ (managedNetworkPeeringPolicyName==null? "" : System.Uri.EscapeDataString(managedNetworkPeeringPolicyName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManagedNetworkPeeringPolicy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The Delete ManagedNetworkPeeringPolicies operation deletes a Managed Network Peering Policy, specified by the  resource group, Managed Network name, and peering policy name
		/// ManagedNetworkPeeringPolicies_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetwork/managedNetworks/{managedNetworkName}/managedNetworkPeeringPolicies/{managedNetworkPeeringPolicyName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="managedNetworkName">The name of the Managed Network.</param>
		/// <param name="managedNetworkPeeringPolicyName">The name of the Managed Network Peering Policy.</param>
		/// <returns>Delete successful.</returns>
		public async Task ManagedNetworkPeeringPolicies_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string managedNetworkName, string managedNetworkPeeringPolicyName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ManagedNetwork/managedNetworks/"+ (managedNetworkName==null? "" : System.Uri.EscapeDataString(managedNetworkName))+"/managedNetworkPeeringPolicies/"+ (managedNetworkPeeringPolicyName==null? "" : System.Uri.EscapeDataString(managedNetworkPeeringPolicyName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the specified scope assignment.
		/// ScopeAssignments_List {scope}/providers/Microsoft.ManagedNetwork/scopeAssignments
		/// </summary>
		/// <param name="scope">The base resource of the scope assignment.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK - Returns information about the scope assignment.</returns>
		public async Task<ScopeAssignmentListResult> ScopeAssignments_ListAsync(string scope, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.ManagedNetwork/scopeAssignments&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScopeAssignmentListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the specified scope assignment.
		/// ScopeAssignments_Get {scope}/providers/Microsoft.ManagedNetwork/scopeAssignments/{scopeAssignmentName}
		/// </summary>
		/// <param name="scope">The base resource of the scope assignment.</param>
		/// <param name="scopeAssignmentName">The name of the scope assignment to get.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK - Returns information about the scope assignment.</returns>
		public async Task<ScopeAssignment> ScopeAssignments_GetAsync(string scope, string scopeAssignmentName, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.ManagedNetwork/scopeAssignments/"+ (scopeAssignmentName==null? "" : System.Uri.EscapeDataString(scopeAssignmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScopeAssignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a scope assignment.
		/// ScopeAssignments_CreateOrUpdate {scope}/providers/Microsoft.ManagedNetwork/scopeAssignments/{scopeAssignmentName}
		/// </summary>
		/// <param name="scope">The base resource of the scope assignment to create. The scope can be any REST resource instance. For example, use 'subscriptions/{subscription-id}' for a subscription, 'subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and 'subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}' for a resource.</param>
		/// <param name="scopeAssignmentName">The name of the scope assignment to create.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the specify which Managed Network this scope is being assigned</param>
		/// <returns>Updated - Returns information about the scope assignment.</returns>
		public async Task<ScopeAssignment> ScopeAssignments_CreateOrUpdateAsync(string scope, string scopeAssignmentName, string api_version, ScopeAssignment requestBody)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.ManagedNetwork/scopeAssignments/"+ (scopeAssignmentName==null? "" : System.Uri.EscapeDataString(scopeAssignmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScopeAssignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a scope assignment.
		/// ScopeAssignments_Delete {scope}/providers/Microsoft.ManagedNetwork/scopeAssignments/{scopeAssignmentName}
		/// </summary>
		/// <param name="scope">The scope of the scope assignment to delete.</param>
		/// <param name="scopeAssignmentName">The name of the scope assignment to delete.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Delete Succeed.</returns>
		public async Task ScopeAssignments_DeleteAsync(string scope, string scopeAssignmentName, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.ManagedNetwork/scopeAssignments/"+ (scopeAssignmentName==null? "" : System.Uri.EscapeDataString(scopeAssignmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
