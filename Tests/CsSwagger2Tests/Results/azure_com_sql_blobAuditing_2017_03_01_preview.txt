//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A database blob auditing policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseBlobAuditingPolicy
	{
		
		/// <summary>
		/// Resource kind.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Properties of a database blob auditing policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DatabaseBlobAuditingPolicyProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a database blob auditing policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseBlobAuditingPolicyProperties
	{
		
		/// <summary>
		/// Specifies the Actions-Groups and Actions to audit.
		///
		///The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:
		///
		///BATCH_COMPLETED_GROUP,
		///SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
		///FAILED_DATABASE_AUTHENTICATION_GROUP.
		///
		///This above combination is also the set that is configured by default when enabling auditing from the Azure portal.
		///
		///The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):
		///
		///APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
		///BACKUP_RESTORE_GROUP
		///DATABASE_LOGOUT_GROUP
		///DATABASE_OBJECT_CHANGE_GROUP
		///DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
		///DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
		///DATABASE_OPERATION_GROUP
		///DATABASE_PERMISSION_CHANGE_GROUP
		///DATABASE_PRINCIPAL_CHANGE_GROUP
		///DATABASE_PRINCIPAL_IMPERSONATION_GROUP
		///DATABASE_ROLE_MEMBER_CHANGE_GROUP
		///FAILED_DATABASE_AUTHENTICATION_GROUP
		///SCHEMA_OBJECT_ACCESS_GROUP
		///SCHEMA_OBJECT_CHANGE_GROUP
		///SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
		///SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
		///SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
		///USER_CHANGE_PASSWORD_GROUP
		///BATCH_STARTED_GROUP
		///BATCH_COMPLETED_GROUP
		///
		///These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.
		///
		///For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
		///
		///For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:
		///SELECT
		///UPDATE
		///INSERT
		///DELETE
		///EXECUTE
		///RECEIVE
		///REFERENCES
		///
		///The general form for defining an action to be audited is:
		///{action} ON {object} BY {principal}
		///
		///Note that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
		///
		///For example:
		///SELECT on dbo.myTable by public
		///SELECT on DATABASE::myDatabase by public
		///SELECT on SCHEMA::mySchema by public
		///
		///For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditActionsAndGroups")]
		public string[] AuditActionsAndGroups { get; set; }
		
		/// <summary>
		/// Specifies whether audit events are sent to Azure Monitor. 
		///In order to send the events to Azure Monitor, specify 'state' as 'Enabled' and 'isAzureMonitorTargetEnabled' as true.
		///
		///When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.
		///Note that for server level audit you should use the 'master' database as {databaseName}.
		///
		///Diagnostic Settings URI format:
		///PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
		///
		///For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
		///or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAzureMonitorTargetEnabled")]
		public System.Nullable<System.Boolean> IsAzureMonitorTargetEnabled { get; set; }
		
		/// <summary>
		/// Specifies whether storageAccountAccessKey value is the storage's secondary key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isStorageSecondaryKeyInUse")]
		public System.Nullable<System.Boolean> IsStorageSecondaryKeyInUse { get; set; }
		
		/// <summary>
		/// Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.
		///The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queueDelayMs")]
		public System.Nullable<System.Int32> QueueDelayMs { get; set; }
		
		/// <summary>
		/// Specifies the number of days to keep in the audit logs in the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionDays")]
		public System.Nullable<System.Int32> RetentionDays { get; set; }
		
		/// <summary>
		/// Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public DatabaseBlobAuditingPolicyPropertiesState State { get; set; }
		
		/// <summary>
		/// Specifies the identifier key of the auditing storage account. If state is Enabled and storageEndpoint is specified, storageAccountAccessKey is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountAccessKey")]
		public string StorageAccountAccessKey { get; set; }
		
		/// <summary>
		/// Specifies the blob storage subscription Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountSubscriptionId")]
		public string StorageAccountSubscriptionId { get; set; }
		
		/// <summary>
		/// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageEndpoint")]
		public string StorageEndpoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DatabaseBlobAuditingPolicyPropertiesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// A list of database auditing settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseBlobAuditingPolicyListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DatabaseBlobAuditingPolicy[] Value { get; set; }
	}
	
	/// <summary>
	/// An extended database blob auditing policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExtendedDatabaseBlobAuditingPolicy
	{
		
		/// <summary>
		/// Properties of an extended database blob auditing policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ExtendedDatabaseBlobAuditingPolicyProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of an extended database blob auditing policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExtendedDatabaseBlobAuditingPolicyProperties
	{
		
		/// <summary>
		/// Specifies the Actions-Groups and Actions to audit.
		///
		///The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:
		///
		///BATCH_COMPLETED_GROUP,
		///SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
		///FAILED_DATABASE_AUTHENTICATION_GROUP.
		///
		///This above combination is also the set that is configured by default when enabling auditing from the Azure portal.
		///
		///The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):
		///
		///APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
		///BACKUP_RESTORE_GROUP
		///DATABASE_LOGOUT_GROUP
		///DATABASE_OBJECT_CHANGE_GROUP
		///DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
		///DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
		///DATABASE_OPERATION_GROUP
		///DATABASE_PERMISSION_CHANGE_GROUP
		///DATABASE_PRINCIPAL_CHANGE_GROUP
		///DATABASE_PRINCIPAL_IMPERSONATION_GROUP
		///DATABASE_ROLE_MEMBER_CHANGE_GROUP
		///FAILED_DATABASE_AUTHENTICATION_GROUP
		///SCHEMA_OBJECT_ACCESS_GROUP
		///SCHEMA_OBJECT_CHANGE_GROUP
		///SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
		///SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
		///SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
		///USER_CHANGE_PASSWORD_GROUP
		///BATCH_STARTED_GROUP
		///BATCH_COMPLETED_GROUP
		///
		///These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.
		///
		///For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
		///
		///For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:
		///SELECT
		///UPDATE
		///INSERT
		///DELETE
		///EXECUTE
		///RECEIVE
		///REFERENCES
		///
		///The general form for defining an action to be audited is:
		///{action} ON {object} BY {principal}
		///
		///Note that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
		///
		///For example:
		///SELECT on dbo.myTable by public
		///SELECT on DATABASE::myDatabase by public
		///SELECT on SCHEMA::mySchema by public
		///
		///For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditActionsAndGroups")]
		public string[] AuditActionsAndGroups { get; set; }
		
		/// <summary>
		/// Specifies whether audit events are sent to Azure Monitor. 
		///In order to send the events to Azure Monitor, specify 'state' as 'Enabled' and 'isAzureMonitorTargetEnabled' as true.
		///
		///When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.
		///Note that for server level audit you should use the 'master' database as {databaseName}.
		///
		///Diagnostic Settings URI format:
		///PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
		///
		///For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
		///or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAzureMonitorTargetEnabled")]
		public System.Nullable<System.Boolean> IsAzureMonitorTargetEnabled { get; set; }
		
		/// <summary>
		/// Specifies whether storageAccountAccessKey value is the storage's secondary key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isStorageSecondaryKeyInUse")]
		public System.Nullable<System.Boolean> IsStorageSecondaryKeyInUse { get; set; }
		
		/// <summary>
		/// Specifies condition of where clause when creating an audit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predicateExpression")]
		public string PredicateExpression { get; set; }
		
		/// <summary>
		/// Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.
		///The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queueDelayMs")]
		public System.Nullable<System.Int32> QueueDelayMs { get; set; }
		
		/// <summary>
		/// Specifies the number of days to keep in the audit logs in the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionDays")]
		public System.Nullable<System.Int32> RetentionDays { get; set; }
		
		/// <summary>
		/// Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public DatabaseBlobAuditingPolicyPropertiesState State { get; set; }
		
		/// <summary>
		/// Specifies the identifier key of the auditing storage account. If state is Enabled and storageEndpoint is specified, storageAccountAccessKey is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountAccessKey")]
		public string StorageAccountAccessKey { get; set; }
		
		/// <summary>
		/// Specifies the blob storage subscription Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountSubscriptionId")]
		public string StorageAccountSubscriptionId { get; set; }
		
		/// <summary>
		/// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageEndpoint")]
		public string StorageEndpoint { get; set; }
	}
	
	/// <summary>
	/// An extended server blob auditing policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExtendedServerBlobAuditingPolicy
	{
		
		/// <summary>
		/// Properties of an extended server blob auditing policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ExtendedServerBlobAuditingPolicyProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of an extended server blob auditing policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExtendedServerBlobAuditingPolicyProperties
	{
		
		/// <summary>
		/// Specifies the Actions-Groups and Actions to audit.
		///
		///The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:
		///
		///BATCH_COMPLETED_GROUP,
		///SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
		///FAILED_DATABASE_AUTHENTICATION_GROUP.
		///
		///This above combination is also the set that is configured by default when enabling auditing from the Azure portal.
		///
		///The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):
		///
		///APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
		///BACKUP_RESTORE_GROUP
		///DATABASE_LOGOUT_GROUP
		///DATABASE_OBJECT_CHANGE_GROUP
		///DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
		///DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
		///DATABASE_OPERATION_GROUP
		///DATABASE_PERMISSION_CHANGE_GROUP
		///DATABASE_PRINCIPAL_CHANGE_GROUP
		///DATABASE_PRINCIPAL_IMPERSONATION_GROUP
		///DATABASE_ROLE_MEMBER_CHANGE_GROUP
		///FAILED_DATABASE_AUTHENTICATION_GROUP
		///SCHEMA_OBJECT_ACCESS_GROUP
		///SCHEMA_OBJECT_CHANGE_GROUP
		///SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
		///SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
		///SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
		///USER_CHANGE_PASSWORD_GROUP
		///BATCH_STARTED_GROUP
		///BATCH_COMPLETED_GROUP
		///
		///These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.
		///
		///For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
		///
		///For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:
		///SELECT
		///UPDATE
		///INSERT
		///DELETE
		///EXECUTE
		///RECEIVE
		///REFERENCES
		///
		///The general form for defining an action to be audited is:
		///{action} ON {object} BY {principal}
		///
		///Note that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
		///
		///For example:
		///SELECT on dbo.myTable by public
		///SELECT on DATABASE::myDatabase by public
		///SELECT on SCHEMA::mySchema by public
		///
		///For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditActionsAndGroups")]
		public string[] AuditActionsAndGroups { get; set; }
		
		/// <summary>
		/// Specifies whether audit events are sent to Azure Monitor. 
		///In order to send the events to Azure Monitor, specify 'state' as 'Enabled' and 'isAzureMonitorTargetEnabled' as true.
		///
		///When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.
		///Note that for server level audit you should use the 'master' database as {databaseName}.
		///
		///Diagnostic Settings URI format:
		///PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
		///
		///For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
		///or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAzureMonitorTargetEnabled")]
		public System.Nullable<System.Boolean> IsAzureMonitorTargetEnabled { get; set; }
		
		/// <summary>
		/// Specifies whether storageAccountAccessKey value is the storage's secondary key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isStorageSecondaryKeyInUse")]
		public System.Nullable<System.Boolean> IsStorageSecondaryKeyInUse { get; set; }
		
		/// <summary>
		/// Specifies condition of where clause when creating an audit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predicateExpression")]
		public string PredicateExpression { get; set; }
		
		/// <summary>
		/// Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.
		///The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queueDelayMs")]
		public System.Nullable<System.Int32> QueueDelayMs { get; set; }
		
		/// <summary>
		/// Specifies the number of days to keep in the audit logs in the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionDays")]
		public System.Nullable<System.Int32> RetentionDays { get; set; }
		
		/// <summary>
		/// Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public DatabaseBlobAuditingPolicyPropertiesState State { get; set; }
		
		/// <summary>
		/// Specifies the identifier key of the auditing storage account. If state is Enabled and storageEndpoint is specified, storageAccountAccessKey is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountAccessKey")]
		public string StorageAccountAccessKey { get; set; }
		
		/// <summary>
		/// Specifies the blob storage subscription Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountSubscriptionId")]
		public string StorageAccountSubscriptionId { get; set; }
		
		/// <summary>
		/// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageEndpoint")]
		public string StorageEndpoint { get; set; }
	}
	
	/// <summary>
	/// A server blob auditing policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerBlobAuditingPolicy
	{
		
		/// <summary>
		/// Properties of a server blob auditing policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ServerBlobAuditingPolicyProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a server blob auditing policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerBlobAuditingPolicyProperties
	{
		
		/// <summary>
		/// Specifies the Actions-Groups and Actions to audit.
		///
		///The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:
		///
		///BATCH_COMPLETED_GROUP,
		///SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
		///FAILED_DATABASE_AUTHENTICATION_GROUP.
		///
		///This above combination is also the set that is configured by default when enabling auditing from the Azure portal.
		///
		///The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):
		///
		///APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
		///BACKUP_RESTORE_GROUP
		///DATABASE_LOGOUT_GROUP
		///DATABASE_OBJECT_CHANGE_GROUP
		///DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
		///DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
		///DATABASE_OPERATION_GROUP
		///DATABASE_PERMISSION_CHANGE_GROUP
		///DATABASE_PRINCIPAL_CHANGE_GROUP
		///DATABASE_PRINCIPAL_IMPERSONATION_GROUP
		///DATABASE_ROLE_MEMBER_CHANGE_GROUP
		///FAILED_DATABASE_AUTHENTICATION_GROUP
		///SCHEMA_OBJECT_ACCESS_GROUP
		///SCHEMA_OBJECT_CHANGE_GROUP
		///SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
		///SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
		///SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
		///USER_CHANGE_PASSWORD_GROUP
		///BATCH_STARTED_GROUP
		///BATCH_COMPLETED_GROUP
		///
		///These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.
		///
		///For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
		///
		///For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:
		///SELECT
		///UPDATE
		///INSERT
		///DELETE
		///EXECUTE
		///RECEIVE
		///REFERENCES
		///
		///The general form for defining an action to be audited is:
		///{action} ON {object} BY {principal}
		///
		///Note that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
		///
		///For example:
		///SELECT on dbo.myTable by public
		///SELECT on DATABASE::myDatabase by public
		///SELECT on SCHEMA::mySchema by public
		///
		///For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditActionsAndGroups")]
		public string[] AuditActionsAndGroups { get; set; }
		
		/// <summary>
		/// Specifies whether audit events are sent to Azure Monitor. 
		///In order to send the events to Azure Monitor, specify 'state' as 'Enabled' and 'isAzureMonitorTargetEnabled' as true.
		///
		///When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.
		///Note that for server level audit you should use the 'master' database as {databaseName}.
		///
		///Diagnostic Settings URI format:
		///PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
		///
		///For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
		///or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAzureMonitorTargetEnabled")]
		public System.Nullable<System.Boolean> IsAzureMonitorTargetEnabled { get; set; }
		
		/// <summary>
		/// Specifies whether storageAccountAccessKey value is the storage's secondary key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isStorageSecondaryKeyInUse")]
		public System.Nullable<System.Boolean> IsStorageSecondaryKeyInUse { get; set; }
		
		/// <summary>
		/// Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.
		///The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queueDelayMs")]
		public System.Nullable<System.Int32> QueueDelayMs { get; set; }
		
		/// <summary>
		/// Specifies the number of days to keep in the audit logs in the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionDays")]
		public System.Nullable<System.Int32> RetentionDays { get; set; }
		
		/// <summary>
		/// Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public DatabaseBlobAuditingPolicyPropertiesState State { get; set; }
		
		/// <summary>
		/// Specifies the identifier key of the auditing storage account. If state is Enabled and storageEndpoint is specified, storageAccountAccessKey is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountAccessKey")]
		public string StorageAccountAccessKey { get; set; }
		
		/// <summary>
		/// Specifies the blob storage subscription Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountSubscriptionId")]
		public string StorageAccountSubscriptionId { get; set; }
		
		/// <summary>
		/// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageEndpoint")]
		public string StorageEndpoint { get; set; }
	}
	
	/// <summary>
	/// A list of server auditing settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerBlobAuditingPolicyListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ServerBlobAuditingPolicy[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists auditing settings of a server.
		/// ServerBlobAuditingPolicies_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/auditingSettings
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved server auditing settings.</returns>
		public async Task<ServerBlobAuditingPolicyListResult> ServerBlobAuditingPolicies_ListByServerAsync(string resourceGroupName, string serverName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/auditingSettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServerBlobAuditingPolicyListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a server's blob auditing policy.
		/// ServerBlobAuditingPolicies_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/auditingSettings/{blobAuditingPolicyName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="blobAuditingPolicyName">The name of the blob auditing policy.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the server blob auditing policy.</returns>
		public async Task<ServerBlobAuditingPolicy> ServerBlobAuditingPolicies_GetAsync(string resourceGroupName, string serverName, ServerBlobAuditingPolicies_GetBlobAuditingPolicyName blobAuditingPolicyName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/auditingSettings/"+blobAuditingPolicyName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServerBlobAuditingPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a server's blob auditing policy.
		/// ServerBlobAuditingPolicies_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/auditingSettings/{blobAuditingPolicyName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="blobAuditingPolicyName">The name of the blob auditing policy.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="requestBody">Properties of blob auditing policy</param>
		/// <returns>Successfully updated the auditing settings.</returns>
		public async Task<ServerBlobAuditingPolicy> ServerBlobAuditingPolicies_CreateOrUpdateAsync(string resourceGroupName, string serverName, ServerBlobAuditingPolicies_CreateOrUpdateBlobAuditingPolicyName blobAuditingPolicyName, string subscriptionId, string api_version, ServerBlobAuditingPolicy requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/auditingSettings/"+blobAuditingPolicyName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServerBlobAuditingPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists auditing settings of a database.
		/// DatabaseBlobAuditingPolicies_ListByDatabase subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/auditingSettings
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved database auditing settings.</returns>
		public async Task<DatabaseBlobAuditingPolicyListResult> DatabaseBlobAuditingPolicies_ListByDatabaseAsync(string resourceGroupName, string serverName, string databaseName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/auditingSettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DatabaseBlobAuditingPolicyListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a database's blob auditing policy.
		/// DatabaseBlobAuditingPolicies_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/auditingSettings/{blobAuditingPolicyName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="blobAuditingPolicyName">The name of the blob auditing policy.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the database blob auditing policy.</returns>
		public async Task<DatabaseBlobAuditingPolicy> DatabaseBlobAuditingPolicies_GetAsync(string resourceGroupName, string serverName, string databaseName, DatabaseBlobAuditingPolicies_GetBlobAuditingPolicyName blobAuditingPolicyName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/auditingSettings/"+blobAuditingPolicyName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DatabaseBlobAuditingPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a database's blob auditing policy.
		/// DatabaseBlobAuditingPolicies_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/auditingSettings/{blobAuditingPolicyName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="blobAuditingPolicyName">The name of the blob auditing policy.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="requestBody">The database blob auditing policy.</param>
		/// <returns>Successfully set the database blob auditing policy.</returns>
		public async Task<DatabaseBlobAuditingPolicy> DatabaseBlobAuditingPolicies_CreateOrUpdateAsync(string resourceGroupName, string serverName, string databaseName, DatabaseBlobAuditingPolicies_CreateOrUpdateBlobAuditingPolicyName blobAuditingPolicyName, string subscriptionId, string api_version, DatabaseBlobAuditingPolicy requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/auditingSettings/"+blobAuditingPolicyName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DatabaseBlobAuditingPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an extended database's blob auditing policy.
		/// ExtendedDatabaseBlobAuditingPolicies_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extendedAuditingSettings/{blobAuditingPolicyName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="blobAuditingPolicyName">The name of the blob auditing policy.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the extended database blob auditing policy.</returns>
		public async Task<ExtendedDatabaseBlobAuditingPolicy> ExtendedDatabaseBlobAuditingPolicies_GetAsync(string resourceGroupName, string serverName, string databaseName, ExtendedDatabaseBlobAuditingPolicies_GetBlobAuditingPolicyName blobAuditingPolicyName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/extendedAuditingSettings/"+blobAuditingPolicyName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExtendedDatabaseBlobAuditingPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an extended database's blob auditing policy.
		/// ExtendedDatabaseBlobAuditingPolicies_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extendedAuditingSettings/{blobAuditingPolicyName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="blobAuditingPolicyName">The name of the blob auditing policy.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="requestBody">The extended database blob auditing policy.</param>
		/// <returns>Successfully set the extended database blob auditing policy.</returns>
		public async Task<ExtendedDatabaseBlobAuditingPolicy> ExtendedDatabaseBlobAuditingPolicies_CreateOrUpdateAsync(string resourceGroupName, string serverName, string databaseName, ExtendedDatabaseBlobAuditingPolicies_CreateOrUpdateBlobAuditingPolicyName blobAuditingPolicyName, string subscriptionId, string api_version, ExtendedDatabaseBlobAuditingPolicy requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/extendedAuditingSettings/"+blobAuditingPolicyName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExtendedDatabaseBlobAuditingPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an extended server's blob auditing policy.
		/// ExtendedServerBlobAuditingPolicies_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/extendedAuditingSettings/{blobAuditingPolicyName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="blobAuditingPolicyName">The name of the blob auditing policy.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the extended server blob auditing policy.</returns>
		public async Task<ExtendedServerBlobAuditingPolicy> ExtendedServerBlobAuditingPolicies_GetAsync(string resourceGroupName, string serverName, ExtendedServerBlobAuditingPolicies_GetBlobAuditingPolicyName blobAuditingPolicyName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/extendedAuditingSettings/"+blobAuditingPolicyName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExtendedServerBlobAuditingPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an extended server's blob auditing policy.
		/// ExtendedServerBlobAuditingPolicies_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/extendedAuditingSettings/{blobAuditingPolicyName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="blobAuditingPolicyName">The name of the blob auditing policy.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="requestBody">Properties of extended blob auditing policy</param>
		/// <returns>Successfully updated the extended auditing settings.</returns>
		public async Task<ExtendedServerBlobAuditingPolicy> ExtendedServerBlobAuditingPolicies_CreateOrUpdateAsync(string resourceGroupName, string serverName, ExtendedServerBlobAuditingPolicies_CreateOrUpdateBlobAuditingPolicyName blobAuditingPolicyName, string subscriptionId, string api_version, ExtendedServerBlobAuditingPolicy requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/extendedAuditingSettings/"+blobAuditingPolicyName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExtendedServerBlobAuditingPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum ServerBlobAuditingPolicies_GetBlobAuditingPolicyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
	
	public enum ServerBlobAuditingPolicies_CreateOrUpdateBlobAuditingPolicyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
	
	public enum DatabaseBlobAuditingPolicies_GetBlobAuditingPolicyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
	
	public enum DatabaseBlobAuditingPolicies_CreateOrUpdateBlobAuditingPolicyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
	
	public enum ExtendedDatabaseBlobAuditingPolicies_GetBlobAuditingPolicyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
	
	public enum ExtendedDatabaseBlobAuditingPolicies_CreateOrUpdateBlobAuditingPolicyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
	
	public enum ExtendedServerBlobAuditingPolicies_GetBlobAuditingPolicyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
	
	public enum ExtendedServerBlobAuditingPolicies_CreateOrUpdateBlobAuditingPolicyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
