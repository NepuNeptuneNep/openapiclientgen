//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Properties for a product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Product
	{
		
		/// <summary>
		/// Legal terms for the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legalTerms")]
		public string LegalTerms { get; set; }
		
		/// <summary>
		/// List of product links.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ProductLinks[] ProductLinks { get; set; }
		
		/// <summary>
		/// Privacy policy of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privacyPolicy")]
		public string PrivacyPolicy { get; set; }
		
		/// <summary>
		/// The provisioning state of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<ProductProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// Extension type of the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmExtensionType")]
		public string VmExtensionType { get; set; }
	}
	
	public class ProductLinks
	{
		
		/// <summary>
		/// Displayed name of product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// URI to product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ProductProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Starting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Downloading = 5,
	}
	
	/// <summary>
	/// Product resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProductResource
	{
		
		/// <summary>
		/// Properties for a product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public Product Properties { get; set; }
	}
	
	/// <summary>
	/// Holds an array of products and the next link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProductResourcesPage
	{
		
		/// <summary>
		/// URI to the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ProductResource[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Return product name.
		/// Products_List subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.AzureBridge.Admin/activations/{activationName}/products
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroup">The resource group the resource is located under.</param>
		/// <param name="activationName">Name of the activation.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<ProductResourcesPage> Products_ListAsync(string subscriptionId, string resourceGroup, string activationName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.AzureBridge.Admin/activations/"+ (activationName==null? "" : System.Uri.EscapeDataString(activationName))+"/products&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProductResourcesPage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return product name.
		/// Products_Get subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.AzureBridge.Admin/activations/{activationName}/products/{productName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroup">The resource group the resource is located under.</param>
		/// <param name="activationName">Name of the activation.</param>
		/// <param name="productName">Name of the product.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<ProductResource> Products_GetAsync(string subscriptionId, string resourceGroup, string activationName, string productName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.AzureBridge.Admin/activations/"+ (activationName==null? "" : System.Uri.EscapeDataString(activationName))+"/products/"+ (productName==null? "" : System.Uri.EscapeDataString(productName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProductResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Downloads a product from azure marketplace.
		/// Products_Download subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.AzureBridge.Admin/activations/{activationName}/products/{productName}/download
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroup">The resource group the resource is located under.</param>
		/// <param name="activationName">Name of the activation.</param>
		/// <param name="productName">Name of the product.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Accepted</returns>
		public async Task<Products_DownloadReturn> Products_DownloadAsync(string subscriptionId, string resourceGroup, string activationName, string productName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.AzureBridge.Admin/activations/"+ (activationName==null? "" : System.Uri.EscapeDataString(activationName))+"/products/"+ (productName==null? "" : System.Uri.EscapeDataString(productName))+"/download&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Products_DownloadReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class Products_DownloadReturn
	{
		
		/// <summary>
		/// Properties for aggregate usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public Products_DownloadReturnProperties Properties { get; set; }
	}
	
	public class Products_DownloadReturnProperties
	{
		
		/// <summary>
		/// The URI to the .azpkg file that provides information required for showing product in the gallery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="galleryPackageBlobSasUri")]
		public string GalleryPackageBlobSasUri { get; set; }
		
		/// <summary>
		/// Legal terms for the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legalTerms")]
		public string LegalTerms { get; set; }
		
		/// <summary>
		/// List of product links.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Products_DownloadReturnPropertiesLinks[] Products_DownloadReturnPropertiesLinks { get; set; }
		
		/// <summary>
		/// Privacy policy of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privacyPolicy")]
		public string PrivacyPolicy { get; set; }
		
		/// <summary>
		/// Product information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productDetailsProperties")]
		public string ProductDetailsProperties { get; set; }
		
		/// <summary>
		/// The provisioning state of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ProductProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Extension type of the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmExtensionType")]
		public string VmExtensionType { get; set; }
	}
	
	public class Products_DownloadReturnPropertiesLinks
	{
		
		/// <summary>
		/// Displayed name of product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// URI to product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
