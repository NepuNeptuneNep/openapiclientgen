//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// This is the base type that represents an advanced filter. To configure an advanced filter, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc. depending on the type of the key based on which you want to filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AdvancedFilter
	{
		
		/// <summary>
		/// The field/property in the event based on which you want to filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operatorType")]
		public AdvancedFilterOperatorType OperatorType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AdvancedFilterOperatorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NumberIn = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NumberNotIn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NumberLessThan = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NumberGreaterThan = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NumberLessThanOrEquals = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NumberGreaterThanOrEquals = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BoolEquals = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringIn = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringNotIn = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringBeginsWith = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringEndsWith = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringContains = 11,
	}
	
	/// <summary>
	/// Information about the azure function destination for an event subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureFunctionEventSubscriptionDestination
	{
		
		/// <summary>
		/// The properties that represent the Azure Function destination of an event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AzureFunctionEventSubscriptionDestinationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties that represent the Azure Function destination of an event subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureFunctionEventSubscriptionDestinationProperties
	{
		
		/// <summary>
		/// Maximum number of events per batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxEventsPerBatch")]
		public System.Nullable<System.Int32> MaxEventsPerBatch { get; set; }
		
		/// <summary>
		/// Preferred batch size in Kilobytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferredBatchSizeInKilobytes")]
		public System.Nullable<System.Int32> PreferredBatchSizeInKilobytes { get; set; }
		
		/// <summary>
		/// The Azure Resource Id that represents the endpoint of the Azure Function destination of an event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	/// <summary>
	/// BoolEquals Advanced Filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BoolEqualsAdvancedFilter
	{
		
		/// <summary>
		/// The boolean filter value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Boolean> Value { get; set; }
	}
	
	/// <summary>
	/// Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeadLetterDestination
	{
		
		/// <summary>
		/// Type of the endpoint for the dead letter destination
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpointType")]
		public DeadLetterDestinationEndpointType EndpointType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DeadLetterDestinationEndpointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StorageBlob = 0,
	}
	
	/// <summary>
	/// EventGrid Domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Domain
	{
		
		/// <summary>
		/// Properties of the Domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DomainProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the Domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DomainProperties
	{
		
		/// <summary>
		/// This determines if IP filtering rules ought to be evaluated or not. By default it will not evaluate and will allow traffic from all IPs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowTrafficFromAllIPs")]
		public System.Nullable<System.Boolean> AllowTrafficFromAllIPs { get; set; }
		
		/// <summary>
		/// Endpoint for the domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// This determines the IP filtering rules that ought be applied when events are received on this domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inboundIpRules")]
		public InboundIpRule[] InboundIpRules { get; set; }
		
		/// <summary>
		/// This determines the format that Event Grid should expect for incoming events published to the domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputSchema")]
		public System.Nullable<DomainPropertiesInputSchema> InputSchema { get; set; }
		
		/// <summary>
		/// By default, Event Grid expects events to be in the Event Grid event schema. Specifying an input schema mapping enables publishing to Event Grid using a custom input schema. Currently, the only supported type of InputSchemaMapping is 'JsonInputSchemaMapping'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputSchemaMapping")]
		public InputSchemaMapping InputSchemaMapping { get; set; }
		
		/// <summary>
		/// Metric resource id for the domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricResourceId")]
		public string MetricResourceId { get; set; }
		
		/// <summary>
		/// Provisioning state of the domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<DomainPropertiesProvisioningState> ProvisioningState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InboundIpRule
	{
		
		/// <summary>
		/// Action to perform based on the match or no match of the IpMask.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<InboundIpRuleAction> Action { get; set; }
		
		/// <summary>
		/// IP Address in CIDR notation e.g., 10.0.0.0/8.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipMask")]
		public string IpMask { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum InboundIpRuleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Allow = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DomainPropertiesInputSchema
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EventGridSchema = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CustomEventSchema = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudEventSchemaV1_0 = 2,
	}
	
	/// <summary>
	/// By default, Event Grid expects events to be in the Event Grid event schema. Specifying an input schema mapping enables publishing to Event Grid using a custom input schema. Currently, the only supported type of InputSchemaMapping is 'JsonInputSchemaMapping'.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InputSchemaMapping
	{
		
		/// <summary>
		/// Type of the custom mapping
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputSchemaMappingType")]
		public InputSchemaMappingInputSchemaMappingType InputSchemaMappingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum InputSchemaMappingInputSchemaMappingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Json = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DomainPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 5,
	}
	
	/// <summary>
	/// Domain regenerate share access key request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DomainRegenerateKeyRequest
	{
		
		/// <summary>
		/// Key name to regenerate key1 or key2.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
	}
	
	/// <summary>
	/// Shared access keys of the Domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DomainSharedAccessKeys
	{
		
		/// <summary>
		/// Shared access key1 for the domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key1")]
		public string Key1 { get; set; }
		
		/// <summary>
		/// Shared access key2 for the domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key2")]
		public string Key2 { get; set; }
	}
	
	/// <summary>
	/// Domain Topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DomainTopic
	{
		
		/// <summary>
		/// Properties of the Domain Topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DomainTopicProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the Domain Topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DomainTopicProperties
	{
		
		/// <summary>
		/// Provisioning state of the domain topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public DomainPropertiesProvisioningState ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// Result of the List Domain Topics operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DomainTopicsListResult
	{
		
		/// <summary>
		/// A link for the next page of domain topics
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A collection of Domain Topics
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DomainTopic[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of the Domain update
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DomainUpdateParameters
	{
		
		/// <summary>
		/// This determines if IP filtering rules ought to be evaluated or not. By default it will not evaluate and will allow traffic from all IPs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowTrafficFromAllIPs")]
		public System.Nullable<System.Boolean> AllowTrafficFromAllIPs { get; set; }
		
		/// <summary>
		/// This determines the IP filtering rules that ought be applied when events are received on this domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inboundIpRules")]
		public InboundIpRule[] InboundIpRules { get; set; }
		
		/// <summary>
		/// Tags of the domains resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Result of the List Domains operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DomainsListResult
	{
		
		/// <summary>
		/// A link for the next page of domains
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A collection of Domains
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Domain[] Value { get; set; }
	}
	
	/// <summary>
	/// Information about the event hub destination for an event subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventHubEventSubscriptionDestination
	{
		
		/// <summary>
		/// The properties for a event hub destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public EventHubEventSubscriptionDestinationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties for a event hub destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventHubEventSubscriptionDestinationProperties
	{
		
		/// <summary>
		/// The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	/// <summary>
	/// Event Subscription
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventSubscription
	{
		
		/// <summary>
		/// Properties of the Event Subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public EventSubscriptionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the Event Subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventSubscriptionProperties
	{
		
		/// <summary>
		/// Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deadLetterDestination")]
		public DeadLetterDestination DeadLetterDestination { get; set; }
		
		/// <summary>
		/// Information about the destination for an event subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public EventSubscriptionDestination Destination { get; set; }
		
		/// <summary>
		/// The event delivery schema for the event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventDeliverySchema")]
		public System.Nullable<EventSubscriptionPropertiesEventDeliverySchema> EventDeliverySchema { get; set; }
		
		/// <summary>
		/// Expiration time of the event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTimeUtc")]
		public System.Nullable<System.DateTimeOffset> ExpirationTimeUtc { get; set; }
		
		/// <summary>
		/// Filter for the Event Subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public EventSubscriptionFilter Filter { get; set; }
		
		/// <summary>
		/// List of user defined labels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// Provisioning state of the event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<EventSubscriptionPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// Information about the retry policy for an event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryPolicy")]
		public RetryPolicy RetryPolicy { get; set; }
		
		/// <summary>
		/// Name of the topic of the event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
	}
	
	/// <summary>
	/// Information about the destination for an event subscription
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventSubscriptionDestination
	{
		
		/// <summary>
		/// Type of the endpoint for the event subscription destination
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpointType")]
		public EventSubscriptionDestinationEndpointType EndpointType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EventSubscriptionDestinationEndpointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WebHook = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EventHub = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StorageQueue = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HybridConnection = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceBusQueue = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceBusTopic = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureFunction = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EventSubscriptionPropertiesEventDeliverySchema
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EventGridSchema = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CustomInputSchema = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudEventSchemaV1_0 = 2,
	}
	
	/// <summary>
	/// Filter for the Event Subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventSubscriptionFilter
	{
		
		/// <summary>
		/// An array of advanced filters that are used for filtering event subscriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advancedFilters")]
		public AdvancedFilter[] AdvancedFilters { get; set; }
		
		/// <summary>
		/// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedEventTypes")]
		public string[] IncludedEventTypes { get; set; }
		
		/// <summary>
		/// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
		///should be compared in a case sensitive manner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSubjectCaseSensitive")]
		public System.Nullable<System.Boolean> IsSubjectCaseSensitive { get; set; }
		
		/// <summary>
		/// An optional string to filter events for an event subscription based on a resource path prefix.
		///The format of this depends on the publisher of the events.
		///Wildcard characters are not supported in this path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subjectBeginsWith")]
		public string SubjectBeginsWith { get; set; }
		
		/// <summary>
		/// An optional string to filter events for an event subscription based on a resource path suffix.
		///Wildcard characters are not supported in this path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subjectEndsWith")]
		public string SubjectEndsWith { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EventSubscriptionPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AwaitingManualAction = 6,
	}
	
	/// <summary>
	/// Information about the retry policy for an event subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RetryPolicy
	{
		
		/// <summary>
		/// Time To Live (in minutes) for events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTimeToLiveInMinutes")]
		public System.Nullable<System.Int32> EventTimeToLiveInMinutes { get; set; }
		
		/// <summary>
		/// Maximum number of delivery retry attempts for events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDeliveryAttempts")]
		public System.Nullable<System.Int32> MaxDeliveryAttempts { get; set; }
	}
	
	/// <summary>
	/// Full endpoint url of an event subscription
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventSubscriptionFullUrl
	{
		
		/// <summary>
		/// The URL that represents the endpoint of the destination of an event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointUrl")]
		public string EndpointUrl { get; set; }
	}
	
	/// <summary>
	/// Properties of the Event Subscription update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventSubscriptionUpdateParameters
	{
		
		/// <summary>
		/// Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deadLetterDestination")]
		public DeadLetterDestination DeadLetterDestination { get; set; }
		
		/// <summary>
		/// Information about the destination for an event subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public EventSubscriptionDestination Destination { get; set; }
		
		/// <summary>
		/// The event delivery schema for the event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventDeliverySchema")]
		public EventSubscriptionPropertiesEventDeliverySchema EventDeliverySchema { get; set; }
		
		/// <summary>
		/// Information about the expiration time for the event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTimeUtc")]
		public System.Nullable<System.DateTimeOffset> ExpirationTimeUtc { get; set; }
		
		/// <summary>
		/// Filter for the Event Subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public EventSubscriptionFilter Filter { get; set; }
		
		/// <summary>
		/// List of user defined labels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// Information about the retry policy for an event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryPolicy")]
		public RetryPolicy RetryPolicy { get; set; }
	}
	
	/// <summary>
	/// Result of the List EventSubscriptions operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventSubscriptionsListResult
	{
		
		/// <summary>
		/// A link for the next page of event subscriptions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A collection of EventSubscriptions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public EventSubscription[] Value { get; set; }
	}
	
	/// <summary>
	/// Event Type for a subject under a topic
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventType
	{
		
		/// <summary>
		/// Properties of the event type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public EventTypeProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the event type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventTypeProperties
	{
		
		/// <summary>
		/// Description of the event type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Display name of the event type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// IsInDefaultSet flag of the event type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isInDefaultSet")]
		public System.Nullable<System.Boolean> IsInDefaultSet { get; set; }
		
		/// <summary>
		/// Url of the schema for this event type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaUrl")]
		public string SchemaUrl { get; set; }
	}
	
	/// <summary>
	/// Result of the List Event Types operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventTypesListResult
	{
		
		/// <summary>
		/// A collection of event types
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public EventType[] Value { get; set; }
	}
	
	/// <summary>
	/// Information about the HybridConnection destination for an event subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HybridConnectionEventSubscriptionDestination
	{
		
		/// <summary>
		/// The properties for a hybrid connection destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public HybridConnectionEventSubscriptionDestinationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties for a hybrid connection destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HybridConnectionEventSubscriptionDestinationProperties
	{
		
		/// <summary>
		/// The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	/// <summary>
	/// This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JsonField
	{
		
		/// <summary>
		/// Name of a field in the input event schema that's to be used as the source of a mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceField")]
		public string SourceField { get; set; }
	}
	
	/// <summary>
	/// This is used to express the source of an input schema mapping for a single target field
	///in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
	///'eventtype' and 'dataversion' properties. This represents a field in the input event schema
	///along with a default value to be used, and at least one of these two properties should be provided.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JsonFieldWithDefault
	{
		
		/// <summary>
		/// The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Name of a field in the input event schema that's to be used as the source of a mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceField")]
		public string SourceField { get; set; }
	}
	
	/// <summary>
	/// This enables publishing to Event Grid using a custom input schema. This can be used to map properties from a custom input JSON schema to the Event Grid event schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JsonInputSchemaMapping
	{
		
		/// <summary>
		/// This can be used to map properties of a source schema (or default values, for certain supported properties) to properties of the EventGridEvent schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public JsonInputSchemaMappingProperties Properties { get; set; }
	}
	
	/// <summary>
	/// This can be used to map properties of a source schema (or default values, for certain supported properties) to properties of the EventGridEvent schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JsonInputSchemaMappingProperties
	{
		
		/// <summary>
		/// This is used to express the source of an input schema mapping for a single target field
		///in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
		///'eventtype' and 'dataversion' properties. This represents a field in the input event schema
		///along with a default value to be used, and at least one of these two properties should be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataVersion")]
		public JsonFieldWithDefault DataVersion { get; set; }
		
		/// <summary>
		/// This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTime")]
		public JsonField EventTime { get; set; }
		
		/// <summary>
		/// This is used to express the source of an input schema mapping for a single target field
		///in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
		///'eventtype' and 'dataversion' properties. This represents a field in the input event schema
		///along with a default value to be used, and at least one of these two properties should be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public JsonFieldWithDefault EventType { get; set; }
		
		/// <summary>
		/// This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public JsonField Id { get; set; }
		
		/// <summary>
		/// This is used to express the source of an input schema mapping for a single target field
		///in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
		///'eventtype' and 'dataversion' properties. This represents a field in the input event schema
		///along with a default value to be used, and at least one of these two properties should be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public JsonFieldWithDefault Subject { get; set; }
		
		/// <summary>
		/// This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public JsonField Topic { get; set; }
	}
	
	/// <summary>
	/// NumberGreaterThan Advanced Filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NumberGreaterThanAdvancedFilter
	{
		
		/// <summary>
		/// The filter value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// NumberGreaterThanOrEquals Advanced Filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NumberGreaterThanOrEqualsAdvancedFilter
	{
		
		/// <summary>
		/// The filter value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// NumberIn Advanced Filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NumberInAdvancedFilter
	{
		
		/// <summary>
		/// The set of filter values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public double[] Values { get; set; }
	}
	
	/// <summary>
	/// NumberLessThan Advanced Filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NumberLessThanAdvancedFilter
	{
		
		/// <summary>
		/// The filter value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// NumberLessThanOrEquals Advanced Filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NumberLessThanOrEqualsAdvancedFilter
	{
		
		/// <summary>
		/// The filter value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// NumberNotIn Advanced Filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NumberNotInAdvancedFilter
	{
		
		/// <summary>
		/// The set of filter values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public double[] Values { get; set; }
	}
	
	/// <summary>
	/// Represents an operation returned by the GetOperations request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// Information about an operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationInfo Display { get; set; }
		
		/// <summary>
		/// Name of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Origin of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// Properties of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public string Properties { get; set; }
	}
	
	/// <summary>
	/// Information about an operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationInfo
	{
		
		/// <summary>
		/// Description of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Name of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Name of the provider
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Name of the resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// Result of the List Operations operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationsListResult
	{
		
		/// <summary>
		/// A collection of operations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// Definition of a Resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Fully qualified identifier of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Information about the service bus destination for an event subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceBusQueueEventSubscriptionDestination
	{
		
		/// <summary>
		/// The properties that represent the Service Bus destination of an event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ServiceBusQueueEventSubscriptionDestinationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties that represent the Service Bus destination of an event subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceBusQueueEventSubscriptionDestinationProperties
	{
		
		/// <summary>
		/// The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	/// <summary>
	/// Information about the service bus topic destination for an event subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceBusTopicEventSubscriptionDestination
	{
		
		/// <summary>
		/// The properties that represent the Service Bus Topic destination of an event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ServiceBusTopicEventSubscriptionDestinationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties that represent the Service Bus Topic destination of an event subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceBusTopicEventSubscriptionDestinationProperties
	{
		
		/// <summary>
		/// The Azure Resource Id that represents the endpoint of the Service Bus Topic destination of an event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	/// <summary>
	/// Information about the storage blob based dead letter destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageBlobDeadLetterDestination
	{
		
		/// <summary>
		/// Properties of the storage blob based dead letter destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public StorageBlobDeadLetterDestinationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the storage blob based dead letter destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageBlobDeadLetterDestinationProperties
	{
		
		/// <summary>
		/// The name of the Storage blob container that is the destination of the deadletter events
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobContainerName")]
		public string BlobContainerName { get; set; }
		
		/// <summary>
		/// The Azure Resource ID of the storage account that is the destination of the deadletter events
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	/// <summary>
	/// Information about the storage queue destination for an event subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageQueueEventSubscriptionDestination
	{
		
		/// <summary>
		/// The properties for a storage queue destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public StorageQueueEventSubscriptionDestinationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties for a storage queue destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageQueueEventSubscriptionDestinationProperties
	{
		
		/// <summary>
		/// The name of the Storage queue under a storage account that is the destination of an event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queueName")]
		public string QueueName { get; set; }
		
		/// <summary>
		/// The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	/// <summary>
	/// StringBeginsWith Advanced Filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StringBeginsWithAdvancedFilter
	{
		
		/// <summary>
		/// The set of filter values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// StringContains Advanced Filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StringContainsAdvancedFilter
	{
		
		/// <summary>
		/// The set of filter values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// StringEndsWith Advanced Filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StringEndsWithAdvancedFilter
	{
		
		/// <summary>
		/// The set of filter values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// StringIn Advanced Filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StringInAdvancedFilter
	{
		
		/// <summary>
		/// The set of filter values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// StringNotIn Advanced Filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StringNotInAdvancedFilter
	{
		
		/// <summary>
		/// The set of filter values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// EventGrid Topic
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Topic
	{
		
		/// <summary>
		/// Properties of the Topic
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public TopicProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the Topic
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopicProperties
	{
		
		/// <summary>
		/// This determines if IP filtering rules ought to be evaluated or not. By default it will not evaluate and will allow traffic from all IPs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowTrafficFromAllIPs")]
		public System.Nullable<System.Boolean> AllowTrafficFromAllIPs { get; set; }
		
		/// <summary>
		/// Endpoint for the topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// This determines the IP filtering rules that ought to be applied when events are received on this topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inboundIpRules")]
		public InboundIpRule[] InboundIpRules { get; set; }
		
		/// <summary>
		/// This determines the format that Event Grid should expect for incoming events published to the topic.
		/// </summary>
		[System.ComponentModel.DefaultValue(DomainPropertiesInputSchema.EventGridSchema)]
		[System.Runtime.Serialization.DataMember(Name="inputSchema")]
		public DomainPropertiesInputSchema InputSchema { get; set; } = DomainPropertiesInputSchema.EventGridSchema;
		
		/// <summary>
		/// By default, Event Grid expects events to be in the Event Grid event schema. Specifying an input schema mapping enables publishing to Event Grid using a custom input schema. Currently, the only supported type of InputSchemaMapping is 'JsonInputSchemaMapping'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputSchemaMapping")]
		public InputSchemaMapping InputSchemaMapping { get; set; }
		
		/// <summary>
		/// Metric resource id for the topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricResourceId")]
		public string MetricResourceId { get; set; }
		
		/// <summary>
		/// Provisioning state of the topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public DomainPropertiesProvisioningState ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// Topic regenerate share access key request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopicRegenerateKeyRequest
	{
		
		/// <summary>
		/// Key name to regenerate key1 or key2
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
	}
	
	/// <summary>
	/// Shared access keys of the Topic
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopicSharedAccessKeys
	{
		
		/// <summary>
		/// Shared access key1 for the topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key1")]
		public string Key1 { get; set; }
		
		/// <summary>
		/// Shared access key2 for the topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key2")]
		public string Key2 { get; set; }
	}
	
	/// <summary>
	/// Properties of a topic type info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopicTypeInfo
	{
		
		/// <summary>
		/// Properties of a topic type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public TopicTypeProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a topic type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopicTypeProperties
	{
		
		/// <summary>
		/// Description of the topic type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Display Name for the topic type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Namespace of the provider of the topic type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Provisioning state of the topic type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public DomainPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Region type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceRegionType")]
		public System.Nullable<TopicTypePropertiesResourceRegionType> ResourceRegionType { get; set; }
		
		/// <summary>
		/// Source resource format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceResourceFormat")]
		public string SourceResourceFormat { get; set; }
		
		/// <summary>
		/// List of locations supported by this topic type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedLocations")]
		public string[] SupportedLocations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TopicTypePropertiesResourceRegionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RegionalResource = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GlobalResource = 1,
	}
	
	/// <summary>
	/// Result of the List Topic Types operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopicTypesListResult
	{
		
		/// <summary>
		/// A collection of topic types
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public TopicTypeInfo[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of the Topic update
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopicUpdateParameters
	{
		
		/// <summary>
		/// This determines if IP filtering rules ought to be evaluated or not. By default it will not evaluate and will allow traffic from all IPs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowTrafficFromAllIPs")]
		public System.Nullable<System.Boolean> AllowTrafficFromAllIPs { get; set; }
		
		/// <summary>
		/// This determines the IP filtering rules that ought be applied when events are received on this domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inboundIpRules")]
		public InboundIpRule[] InboundIpRules { get; set; }
		
		/// <summary>
		/// Tags of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Result of the List Topics operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopicsListResult
	{
		
		/// <summary>
		/// A link for the next page of topics
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A collection of Topics
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Topic[] Value { get; set; }
	}
	
	/// <summary>
	/// Definition of a Tracked Resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrackedResource
	{
		
		/// <summary>
		/// Location of the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Tags of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Information about the webhook destination for an event subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WebHookEventSubscriptionDestination
	{
		
		/// <summary>
		/// Information about the webhook destination properties for an event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WebHookEventSubscriptionDestinationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Information about the webhook destination properties for an event subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WebHookEventSubscriptionDestinationProperties
	{
		
		/// <summary>
		/// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureActiveDirectoryApplicationIdOrUri")]
		public string AzureActiveDirectoryApplicationIdOrUri { get; set; }
		
		/// <summary>
		/// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureActiveDirectoryTenantId")]
		public string AzureActiveDirectoryTenantId { get; set; }
		
		/// <summary>
		/// The base URL that represents the endpoint of the destination of an event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointBaseUrl")]
		public string EndpointBaseUrl { get; set; }
		
		/// <summary>
		/// The URL that represents the endpoint of the destination of an event subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointUrl")]
		public string EndpointUrl { get; set; }
		
		/// <summary>
		/// Maximum number of events per batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxEventsPerBatch")]
		public System.Nullable<System.Int32> MaxEventsPerBatch { get; set; }
		
		/// <summary>
		/// Preferred batch size in Kilobytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferredBatchSizeInKilobytes")]
		public System.Nullable<System.Int32> PreferredBatchSizeInKilobytes { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List available operations.
		/// List the available operations supported by the Microsoft.EventGrid resource provider.
		/// Operations_List providers/Microsoft.EventGrid/operations
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<OperationsListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.EventGrid/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List topic types.
		/// List all registered topic types.
		/// TopicTypes_List providers/Microsoft.EventGrid/topicTypes
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<TopicTypesListResult> TopicTypes_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.EventGrid/topicTypes?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TopicTypesListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a topic type.
		/// Get information about a topic type.
		/// TopicTypes_Get providers/Microsoft.EventGrid/topicTypes/{topicTypeName}
		/// </summary>
		/// <param name="topicTypeName">Name of the topic type.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<TopicTypeInfo> TopicTypes_GetAsync(string topicTypeName, string api_version)
		{
			var requestUri = "providers/Microsoft.EventGrid/topicTypes/"+ (topicTypeName==null? "" : System.Uri.EscapeDataString(topicTypeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TopicTypeInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List event types.
		/// List event types for a topic type.
		/// TopicTypes_ListEventTypes providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventTypes
		/// </summary>
		/// <param name="topicTypeName">Name of the topic type.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<EventTypesListResult> TopicTypes_ListEventTypesAsync(string topicTypeName, string api_version)
		{
			var requestUri = "providers/Microsoft.EventGrid/topicTypes/"+ (topicTypeName==null? "" : System.Uri.EscapeDataString(topicTypeName))+"/eventTypes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventTypesListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List domains under an Azure subscription.
		/// List all the domains under an Azure subscription.
		/// Domains_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/domains
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="filter">The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.</param>
		/// <param name="top">The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.</param>
		/// <returns>OK</returns>
		public async Task<DomainsListResult> Domains_ListBySubscriptionAsync(string subscriptionId, string api_version, string filter, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.EventGrid/domains&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DomainsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an aggregated list of all global event subscriptions under an Azure subscription.
		/// List all aggregated global event subscriptions under a specific Azure subscription.
		/// EventSubscriptions_ListGlobalBySubscription subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/eventSubscriptions
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="filter">The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.</param>
		/// <param name="top">The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.</param>
		/// <returns>OK</returns>
		public async Task<EventSubscriptionsListResult> EventSubscriptions_ListGlobalBySubscriptionAsync(string subscriptionId, string api_version, string filter, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.EventGrid/eventSubscriptions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventSubscriptionsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all regional event subscriptions under an Azure subscription.
		/// List all event subscriptions from the given location under a specific Azure subscription.
		/// EventSubscriptions_ListRegionalBySubscription subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="location">Name of the location.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="filter">The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.</param>
		/// <param name="top">The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.</param>
		/// <returns>OK</returns>
		public async Task<EventSubscriptionsListResult> EventSubscriptions_ListRegionalBySubscriptionAsync(string subscriptionId, string location, string api_version, string filter, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.EventGrid/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/eventSubscriptions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventSubscriptionsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all regional event subscriptions under an Azure subscription for a topic type.
		/// List all event subscriptions from the given location under a specific Azure subscription and topic type.
		/// EventSubscriptions_ListRegionalBySubscriptionForTopicType subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="location">Name of the location.</param>
		/// <param name="topicTypeName">Name of the topic type.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="filter">The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.</param>
		/// <param name="top">The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.</param>
		/// <returns>OK</returns>
		public async Task<EventSubscriptionsListResult> EventSubscriptions_ListRegionalBySubscriptionForTopicTypeAsync(string subscriptionId, string location, string topicTypeName, string api_version, string filter, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.EventGrid/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/topicTypes/"+ (topicTypeName==null? "" : System.Uri.EscapeDataString(topicTypeName))+"/eventSubscriptions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventSubscriptionsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all global event subscriptions for a topic type.
		/// List all global event subscriptions under an Azure subscription for a topic type.
		/// EventSubscriptions_ListGlobalBySubscriptionForTopicType subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="topicTypeName">Name of the topic type.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="filter">The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.</param>
		/// <param name="top">The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.</param>
		/// <returns>OK</returns>
		public async Task<EventSubscriptionsListResult> EventSubscriptions_ListGlobalBySubscriptionForTopicTypeAsync(string subscriptionId, string topicTypeName, string api_version, string filter, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.EventGrid/topicTypes/"+ (topicTypeName==null? "" : System.Uri.EscapeDataString(topicTypeName))+"/eventSubscriptions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventSubscriptionsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List topics under an Azure subscription.
		/// List all the topics under an Azure subscription.
		/// Topics_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/topics
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="filter">The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.</param>
		/// <param name="top">The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.</param>
		/// <returns>OK</returns>
		public async Task<TopicsListResult> Topics_ListBySubscriptionAsync(string subscriptionId, string api_version, string filter, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.EventGrid/topics&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TopicsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List domains under a resource group.
		/// List all the domains under a resource group.
		/// Domains_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="filter">The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.</param>
		/// <param name="top">The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.</param>
		/// <returns>OK</returns>
		public async Task<DomainsListResult> Domains_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version, string filter, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/domains&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DomainsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a domain.
		/// Get properties of a domain.
		/// Domains_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="domainName">Name of the domain.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<Domain> Domains_GetAsync(string subscriptionId, string resourceGroupName, string domainName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/domains/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Domain>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a domain.
		/// Asynchronously creates or updates a new domain with the specified parameters.
		/// Domains_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="domainName">Name of the domain.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">Domain information.</param>
		public async Task Domains_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string domainName, string api_version, Domain requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/domains/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a domain.
		/// Delete existing domain.
		/// Domains_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="domainName">Name of the domain.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		public async Task Domains_DeleteAsync(string subscriptionId, string resourceGroupName, string domainName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/domains/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a domain.
		/// Asynchronously updates a domain with the specified parameters.
		/// Domains_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="domainName">Name of the domain.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">Domain update information.</param>
		public async Task Domains_UpdateAsync(string subscriptionId, string resourceGroupName, string domainName, string api_version, DomainUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/domains/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List keys for a domain.
		/// List the two keys used to publish to a domain.
		/// Domains_ListSharedAccessKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/listKeys
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="domainName">Name of the domain.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<DomainSharedAccessKeys> Domains_ListSharedAccessKeysAsync(string subscriptionId, string resourceGroupName, string domainName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/domains/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/listKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DomainSharedAccessKeys>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerate key for a domain.
		/// Regenerate a shared access key for a domain.
		/// Domains_RegenerateKey subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/regenerateKey
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="domainName">Name of the domain.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">Request body to regenerate key.</param>
		/// <returns>OK</returns>
		public async Task<DomainSharedAccessKeys> Domains_RegenerateKeyAsync(string subscriptionId, string resourceGroupName, string domainName, string api_version, DomainRegenerateKeyRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/domains/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/regenerateKey&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DomainSharedAccessKeys>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List domain topics.
		/// List all the topics in a domain.
		/// DomainTopics_ListByDomain subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="domainName">Domain name.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="filter">The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.</param>
		/// <param name="top">The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.</param>
		/// <returns>OK</returns>
		public async Task<DomainTopicsListResult> DomainTopics_ListByDomainAsync(string subscriptionId, string resourceGroupName, string domainName, string api_version, string filter, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/domains/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/topics&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DomainTopicsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a domain topic.
		/// Get properties of a domain topic.
		/// DomainTopics_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{domainTopicName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="domainName">Name of the domain.</param>
		/// <param name="domainTopicName">Name of the topic.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<DomainTopic> DomainTopics_GetAsync(string subscriptionId, string resourceGroupName, string domainName, string domainTopicName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/domains/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/topics/"+ (domainTopicName==null? "" : System.Uri.EscapeDataString(domainTopicName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DomainTopic>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a domain topic.
		/// Asynchronously creates or updates a new domain topic with the specified parameters.
		/// DomainTopics_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{domainTopicName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="domainName">Name of the domain.</param>
		/// <param name="domainTopicName">Name of the domain topic.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		public async Task DomainTopics_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string domainName, string domainTopicName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/domains/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/topics/"+ (domainTopicName==null? "" : System.Uri.EscapeDataString(domainTopicName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a domain topic.
		/// Delete existing domain topic.
		/// DomainTopics_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{domainTopicName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="domainName">Name of the domain.</param>
		/// <param name="domainTopicName">Name of the domain topic.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		public async Task DomainTopics_DeleteAsync(string subscriptionId, string resourceGroupName, string domainName, string domainTopicName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/domains/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/topics/"+ (domainTopicName==null? "" : System.Uri.EscapeDataString(domainTopicName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all event subscriptions for a specific domain topic.
		/// List all event subscriptions that have been created for a specific domain topic.
		/// EventSubscriptions_ListByDomainTopic subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{topicName}/providers/Microsoft.EventGrid/eventSubscriptions
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="domainName">Name of the top level domain.</param>
		/// <param name="topicName">Name of the domain topic.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="filter">The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.</param>
		/// <param name="top">The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.</param>
		/// <returns>OK</returns>
		public async Task<EventSubscriptionsListResult> EventSubscriptions_ListByDomainTopicAsync(string subscriptionId, string resourceGroupName, string domainName, string topicName, string api_version, string filter, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/domains/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"/providers/Microsoft.EventGrid/eventSubscriptions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventSubscriptionsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all global event subscriptions under an Azure subscription and resource group.
		/// List all global event subscriptions under a specific Azure subscription and resource group.
		/// EventSubscriptions_ListGlobalByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/eventSubscriptions
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="filter">The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.</param>
		/// <param name="top">The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.</param>
		/// <returns>OK</returns>
		public async Task<EventSubscriptionsListResult> EventSubscriptions_ListGlobalByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version, string filter, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/eventSubscriptions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventSubscriptionsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all regional event subscriptions under an Azure subscription and resource group.
		/// List all event subscriptions from the given location under a specific Azure subscription and resource group.
		/// EventSubscriptions_ListRegionalByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="location">Name of the location.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="filter">The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.</param>
		/// <param name="top">The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.</param>
		/// <returns>OK</returns>
		public async Task<EventSubscriptionsListResult> EventSubscriptions_ListRegionalByResourceGroupAsync(string subscriptionId, string resourceGroupName, string location, string api_version, string filter, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/eventSubscriptions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventSubscriptionsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all regional event subscriptions under an Azure subscription and resource group for a topic type.
		/// List all event subscriptions from the given location under a specific Azure subscription and resource group and topic type.
		/// EventSubscriptions_ListRegionalByResourceGroupForTopicType subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="location">Name of the location.</param>
		/// <param name="topicTypeName">Name of the topic type.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="filter">The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.</param>
		/// <param name="top">The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.</param>
		/// <returns>OK</returns>
		public async Task<EventSubscriptionsListResult> EventSubscriptions_ListRegionalByResourceGroupForTopicTypeAsync(string subscriptionId, string resourceGroupName, string location, string topicTypeName, string api_version, string filter, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/topicTypes/"+ (topicTypeName==null? "" : System.Uri.EscapeDataString(topicTypeName))+"/eventSubscriptions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventSubscriptionsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all global event subscriptions under a resource group for a topic type.
		/// List all global event subscriptions under a resource group for a specific topic type.
		/// EventSubscriptions_ListGlobalByResourceGroupForTopicType subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="topicTypeName">Name of the topic type.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="filter">The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.</param>
		/// <param name="top">The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.</param>
		/// <returns>OK</returns>
		public async Task<EventSubscriptionsListResult> EventSubscriptions_ListGlobalByResourceGroupForTopicTypeAsync(string subscriptionId, string resourceGroupName, string topicTypeName, string api_version, string filter, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/topicTypes/"+ (topicTypeName==null? "" : System.Uri.EscapeDataString(topicTypeName))+"/eventSubscriptions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventSubscriptionsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List topics under a resource group.
		/// List all the topics under a resource group.
		/// Topics_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="filter">The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.</param>
		/// <param name="top">The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.</param>
		/// <returns>OK</returns>
		public async Task<TopicsListResult> Topics_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version, string filter, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/topics&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TopicsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a topic.
		/// Get properties of a topic.
		/// Topics_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="topicName">Name of the topic.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<Topic> Topics_GetAsync(string subscriptionId, string resourceGroupName, string topicName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Topic>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a topic.
		/// Asynchronously creates a new topic with the specified parameters.
		/// Topics_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="topicName">Name of the topic.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">Topic information.</param>
		public async Task Topics_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string topicName, string api_version, Topic requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a topic.
		/// Delete existing topic.
		/// Topics_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="topicName">Name of the topic.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		public async Task Topics_DeleteAsync(string subscriptionId, string resourceGroupName, string topicName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a topic.
		/// Asynchronously updates a topic with the specified parameters.
		/// Topics_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="topicName">Name of the topic.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">Topic update information.</param>
		public async Task Topics_UpdateAsync(string subscriptionId, string resourceGroupName, string topicName, string api_version, TopicUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List keys for a topic.
		/// List the two keys used to publish to a topic.
		/// Topics_ListSharedAccessKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}/listKeys
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="topicName">Name of the topic.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<TopicSharedAccessKeys> Topics_ListSharedAccessKeysAsync(string subscriptionId, string resourceGroupName, string topicName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"/listKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TopicSharedAccessKeys>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerate key for a topic.
		/// Regenerate a shared access key for a topic.
		/// Topics_RegenerateKey subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}/regenerateKey
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="topicName">Name of the topic.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">Request body to regenerate key.</param>
		/// <returns>OK</returns>
		public async Task<TopicSharedAccessKeys> Topics_RegenerateKeyAsync(string subscriptionId, string resourceGroupName, string topicName, string api_version, TopicRegenerateKeyRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventGrid/topics/"+ (topicName==null? "" : System.Uri.EscapeDataString(topicName))+"/regenerateKey&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TopicSharedAccessKeys>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all event subscriptions for a specific topic.
		/// List all event subscriptions that have been created for a specific topic.
		/// EventSubscriptions_ListByResource subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceTypeName}/{resourceName}/providers/Microsoft.EventGrid/eventSubscriptions
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="providerNamespace">Namespace of the provider of the topic.</param>
		/// <param name="resourceTypeName">Name of the resource type.</param>
		/// <param name="resourceName">Name of the resource.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="filter">The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.</param>
		/// <param name="top">The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.</param>
		/// <returns>OK</returns>
		public async Task<EventSubscriptionsListResult> EventSubscriptions_ListByResourceAsync(string subscriptionId, string resourceGroupName, string providerNamespace, string resourceTypeName, string resourceName, string api_version, string filter, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (providerNamespace==null? "" : System.Uri.EscapeDataString(providerNamespace))+"/"+ (resourceTypeName==null? "" : System.Uri.EscapeDataString(resourceTypeName))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.EventGrid/eventSubscriptions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventSubscriptionsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List topic event types.
		/// List event types for a topic.
		/// Topics_ListEventTypes subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceTypeName}/{resourceName}/providers/Microsoft.EventGrid/eventTypes
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="providerNamespace">Namespace of the provider of the topic.</param>
		/// <param name="resourceTypeName">Name of the topic type.</param>
		/// <param name="resourceName">Name of the topic.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<EventTypesListResult> Topics_ListEventTypesAsync(string subscriptionId, string resourceGroupName, string providerNamespace, string resourceTypeName, string resourceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (providerNamespace==null? "" : System.Uri.EscapeDataString(providerNamespace))+"/"+ (resourceTypeName==null? "" : System.Uri.EscapeDataString(resourceTypeName))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.EventGrid/eventTypes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventTypesListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an event subscription.
		/// Get properties of an event subscription.
		/// EventSubscriptions_Get {scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}
		/// </summary>
		/// <param name="scope">The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.</param>
		/// <param name="eventSubscriptionName">Name of the event subscription.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<EventSubscription> EventSubscriptions_GetAsync(string scope, string eventSubscriptionName, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.EventGrid/eventSubscriptions/"+ (eventSubscriptionName==null? "" : System.Uri.EscapeDataString(eventSubscriptionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventSubscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update an event subscription.
		/// Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
		/// EventSubscriptions_CreateOrUpdate {scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}
		/// </summary>
		/// <param name="scope">The identifier of the resource to which the event subscription needs to be created or updated. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.</param>
		/// <param name="eventSubscriptionName">Name of the event subscription. Event subscription names must be between 3 and 64 characters in length and should use alphanumeric letters only.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">Event subscription properties containing the destination and filter information.</param>
		public async Task EventSubscriptions_CreateOrUpdateAsync(string scope, string eventSubscriptionName, string api_version, EventSubscription requestBody)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.EventGrid/eventSubscriptions/"+ (eventSubscriptionName==null? "" : System.Uri.EscapeDataString(eventSubscriptionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an event subscription.
		/// Delete an existing event subscription.
		/// EventSubscriptions_Delete {scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}
		/// </summary>
		/// <param name="scope">The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.</param>
		/// <param name="eventSubscriptionName">Name of the event subscription.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task EventSubscriptions_DeleteAsync(string scope, string eventSubscriptionName, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.EventGrid/eventSubscriptions/"+ (eventSubscriptionName==null? "" : System.Uri.EscapeDataString(eventSubscriptionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an event subscription.
		/// Asynchronously updates an existing event subscription.
		/// EventSubscriptions_Update {scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}
		/// </summary>
		/// <param name="scope">The scope of existing event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.</param>
		/// <param name="eventSubscriptionName">Name of the event subscription to be updated.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">Updated event subscription information.</param>
		public async Task EventSubscriptions_UpdateAsync(string scope, string eventSubscriptionName, string api_version, EventSubscriptionUpdateParameters requestBody)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.EventGrid/eventSubscriptions/"+ (eventSubscriptionName==null? "" : System.Uri.EscapeDataString(eventSubscriptionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get full URL of an event subscription.
		/// Get the full endpoint URL for an event subscription.
		/// EventSubscriptions_GetFullUrl {scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}/getFullUrl
		/// </summary>
		/// <param name="scope">The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.</param>
		/// <param name="eventSubscriptionName">Name of the event subscription.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<EventSubscriptionFullUrl> EventSubscriptions_GetFullUrlAsync(string scope, string eventSubscriptionName, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.EventGrid/eventSubscriptions/"+ (eventSubscriptionName==null? "" : System.Uri.EscapeDataString(eventSubscriptionName))+"/getFullUrl&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventSubscriptionFullUrl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
