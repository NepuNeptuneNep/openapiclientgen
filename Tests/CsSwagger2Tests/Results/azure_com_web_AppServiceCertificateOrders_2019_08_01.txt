//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Key Vault container for a certificate that is purchased through Azure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AppServiceCertificate
	{
		
		/// <summary>
		/// Key Vault resource Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVaultId")]
		public string KeyVaultId { get; set; }
		
		/// <summary>
		/// Key Vault secret name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVaultSecretName")]
		public string KeyVaultSecretName { get; set; }
		
		/// <summary>
		/// Status of the Key Vault secret.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<AppServiceCertificateProvisioningState> ProvisioningState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AppServiceCertificateProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Initialized = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WaitingOnCertificateOrder = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CertificateOrderFailed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OperationNotPermittedOnKeyVault = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureServiceUnauthorizedToAccessKeyVault = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyVaultDoesNotExist = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyVaultSecretDoesNotExist = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnknownError = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExternalPrivateKey = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 10,
	}
	
	/// <summary>
	/// Collection of certificate order certificates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AppServiceCertificateCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AppServiceCertificateResource[] Value { get; set; }
	}
	
	/// <summary>
	/// Key Vault container ARM resource for a certificate that is purchased through Azure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AppServiceCertificateResource
	{
		
		/// <summary>
		/// Key Vault container for a certificate that is purchased through Azure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AppServiceCertificate Properties { get; set; }
	}
	
	/// <summary>
	/// SSL certificate purchase order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AppServiceCertificateOrder
	{
		
		/// <summary>
		/// AppServiceCertificateOrder resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of certificate orders.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AppServiceCertificateOrderCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AppServiceCertificateOrder[] Value { get; set; }
	}
	
	/// <summary>
	/// ARM resource for a certificate order that is purchased through Azure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AppServiceCertificateOrderPatchResource
	{
		
		/// <summary>
		/// AppServiceCertificateOrderPatchResource resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Key Vault container ARM resource for a certificate that is purchased through Azure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AppServiceCertificatePatchResource
	{
		
		/// <summary>
		/// Key Vault container for a certificate that is purchased through Azure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AppServiceCertificate Properties { get; set; }
	}
	
	/// <summary>
	/// SSL certificate details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CertificateDetails
	{
		
		/// <summary>
		/// Certificate Issuer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuer")]
		public string Issuer { get; set; }
		
		/// <summary>
		/// Date Certificate is valid to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notAfter")]
		public System.Nullable<System.DateTimeOffset> NotAfter { get; set; }
		
		/// <summary>
		/// Date Certificate is valid from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notBefore")]
		public System.Nullable<System.DateTimeOffset> NotBefore { get; set; }
		
		/// <summary>
		/// Raw certificate data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawData")]
		public string RawData { get; set; }
		
		/// <summary>
		/// Certificate Serial Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serialNumber")]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// Certificate Signature algorithm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signatureAlgorithm")]
		public string SignatureAlgorithm { get; set; }
		
		/// <summary>
		/// Certificate Subject.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
		
		/// <summary>
		/// Certificate Thumbprint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbprint")]
		public string Thumbprint { get; set; }
		
		/// <summary>
		/// Certificate Version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// SSL certificate email.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CertificateEmail
	{
		
		/// <summary>
		/// CertificateEmail resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Certificate order action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CertificateOrderAction
	{
		
		/// <summary>
		/// CertificateOrderAction resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Class representing certificate reissue request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ReissueCertificateOrderRequest
	{
		
		/// <summary>
		/// ReissueCertificateOrderRequest resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Class representing certificate renew request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RenewCertificateOrderRequest
	{
		
		/// <summary>
		/// RenewCertificateOrderRequest resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Site seal
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SiteSeal
	{
		
		/// <summary>
		/// HTML snippet
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="html")]
		public string Html { get; set; }
	}
	
	/// <summary>
	/// Site seal request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SiteSealRequest
	{
		
		/// <summary>
		/// If <code>true</code> use the light color theme for site seal; otherwise, use the default color theme.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lightTheme")]
		public System.Nullable<System.Boolean> LightTheme { get; set; }
		
		/// <summary>
		/// Locale of site seal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List all certificate orders in a subscription.
		/// Description for List all certificate orders in a subscription.
		/// AppServiceCertificateOrders_List subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/certificateOrders
		/// </summary>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<AppServiceCertificateOrderCollection> AppServiceCertificateOrders_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.CertificateRegistration/certificateOrders&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServiceCertificateOrderCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Validate information for a certificate order.
		/// Description for Validate information for a certificate order.
		/// AppServiceCertificateOrders_ValidatePurchaseInformation subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation
		/// </summary>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Information for a certificate order.</param>
		public async Task AppServiceCertificateOrders_ValidatePurchaseInformationAsync(string subscriptionId, string api_version, AppServiceCertificateOrder requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get certificate orders in a resource group.
		/// Description for Get certificate orders in a resource group.
		/// AppServiceCertificateOrders_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<AppServiceCertificateOrderCollection> AppServiceCertificateOrders_ListByResourceGroupAsync(string resourceGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CertificateRegistration/certificateOrders&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServiceCertificateOrderCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a certificate order.
		/// Description for Get a certificate order.
		/// AppServiceCertificateOrders_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="certificateOrderName">Name of the certificate order..</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<AppServiceCertificateOrder> AppServiceCertificateOrders_GetAsync(string resourceGroupName, string certificateOrderName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CertificateRegistration/certificateOrders/"+ (certificateOrderName==null? "" : System.Uri.EscapeDataString(certificateOrderName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServiceCertificateOrder>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a certificate purchase order.
		/// Description for Create or update a certificate purchase order.
		/// AppServiceCertificateOrders_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="certificateOrderName">Name of the certificate order.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Distinguished name to use for the certificate order.</param>
		/// <returns>App Service Certificate Order is created.</returns>
		public async Task<AppServiceCertificateOrder> AppServiceCertificateOrders_CreateOrUpdateAsync(string resourceGroupName, string certificateOrderName, string subscriptionId, string api_version, AppServiceCertificateOrder requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CertificateRegistration/certificateOrders/"+ (certificateOrderName==null? "" : System.Uri.EscapeDataString(certificateOrderName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServiceCertificateOrder>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an existing certificate order.
		/// Description for Delete an existing certificate order.
		/// AppServiceCertificateOrders_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="certificateOrderName">Name of the certificate order.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted certificate order.</returns>
		public async Task AppServiceCertificateOrders_DeleteAsync(string resourceGroupName, string certificateOrderName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CertificateRegistration/certificateOrders/"+ (certificateOrderName==null? "" : System.Uri.EscapeDataString(certificateOrderName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a certificate purchase order.
		/// Description for Create or update a certificate purchase order.
		/// AppServiceCertificateOrders_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="certificateOrderName">Name of the certificate order.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Distinguished name to use for the certificate order.</param>
		/// <returns>App Service Certificate Order is created.</returns>
		public async Task<AppServiceCertificateOrder> AppServiceCertificateOrders_UpdateAsync(string resourceGroupName, string certificateOrderName, string subscriptionId, string api_version, AppServiceCertificateOrderPatchResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CertificateRegistration/certificateOrders/"+ (certificateOrderName==null? "" : System.Uri.EscapeDataString(certificateOrderName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServiceCertificateOrder>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all certificates associated with a certificate order.
		/// Description for List all certificates associated with a certificate order.
		/// AppServiceCertificateOrders_ListCertificates subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="certificateOrderName">Name of the certificate order.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<AppServiceCertificateCollection> AppServiceCertificateOrders_ListCertificatesAsync(string resourceGroupName, string certificateOrderName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CertificateRegistration/certificateOrders/"+ (certificateOrderName==null? "" : System.Uri.EscapeDataString(certificateOrderName))+"/certificates&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServiceCertificateCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the certificate associated with a certificate order.
		/// Description for Get the certificate associated with a certificate order.
		/// AppServiceCertificateOrders_GetCertificate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="certificateOrderName">Name of the certificate order.</param>
		/// <param name="name">Name of the certificate.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<AppServiceCertificateResource> AppServiceCertificateOrders_GetCertificateAsync(string resourceGroupName, string certificateOrderName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CertificateRegistration/certificateOrders/"+ (certificateOrderName==null? "" : System.Uri.EscapeDataString(certificateOrderName))+"/certificates/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServiceCertificateResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a certificate and associates with key vault secret.
		/// Description for Creates or updates a certificate and associates with key vault secret.
		/// AppServiceCertificateOrders_CreateOrUpdateCertificate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="certificateOrderName">Name of the certificate order.</param>
		/// <param name="name">Name of the certificate.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Key vault certificate resource Id.</param>
		/// <returns>App Service Certificate is created.</returns>
		public async Task<AppServiceCertificateResource> AppServiceCertificateOrders_CreateOrUpdateCertificateAsync(string resourceGroupName, string certificateOrderName, string name, string subscriptionId, string api_version, AppServiceCertificateResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CertificateRegistration/certificateOrders/"+ (certificateOrderName==null? "" : System.Uri.EscapeDataString(certificateOrderName))+"/certificates/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServiceCertificateResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete the certificate associated with a certificate order.
		/// Description for Delete the certificate associated with a certificate order.
		/// AppServiceCertificateOrders_DeleteCertificate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="certificateOrderName">Name of the certificate order.</param>
		/// <param name="name">Name of the certificate.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted certificate.</returns>
		public async Task AppServiceCertificateOrders_DeleteCertificateAsync(string resourceGroupName, string certificateOrderName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CertificateRegistration/certificateOrders/"+ (certificateOrderName==null? "" : System.Uri.EscapeDataString(certificateOrderName))+"/certificates/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a certificate and associates with key vault secret.
		/// Description for Creates or updates a certificate and associates with key vault secret.
		/// AppServiceCertificateOrders_UpdateCertificate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="certificateOrderName">Name of the certificate order.</param>
		/// <param name="name">Name of the certificate.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Key vault certificate resource Id.</param>
		/// <returns>App Service Certificate is created.</returns>
		public async Task<AppServiceCertificateResource> AppServiceCertificateOrders_UpdateCertificateAsync(string resourceGroupName, string certificateOrderName, string name, string subscriptionId, string api_version, AppServiceCertificatePatchResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CertificateRegistration/certificateOrders/"+ (certificateOrderName==null? "" : System.Uri.EscapeDataString(certificateOrderName))+"/certificates/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServiceCertificateResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reissue an existing certificate order.
		/// Description for Reissue an existing certificate order.
		/// AppServiceCertificateOrders_Reissue subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/reissue
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="certificateOrderName">Name of the certificate order.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Parameters for the reissue.</param>
		public async Task AppServiceCertificateOrders_ReissueAsync(string resourceGroupName, string certificateOrderName, string subscriptionId, string api_version, ReissueCertificateOrderRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CertificateRegistration/certificateOrders/"+ (certificateOrderName==null? "" : System.Uri.EscapeDataString(certificateOrderName))+"/reissue&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Renew an existing certificate order.
		/// Description for Renew an existing certificate order.
		/// AppServiceCertificateOrders_Renew subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/renew
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="certificateOrderName">Name of the certificate order.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Renew parameters</param>
		public async Task AppServiceCertificateOrders_RenewAsync(string resourceGroupName, string certificateOrderName, string subscriptionId, string api_version, RenewCertificateOrderRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CertificateRegistration/certificateOrders/"+ (certificateOrderName==null? "" : System.Uri.EscapeDataString(certificateOrderName))+"/renew&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Resend certificate email.
		/// Description for Resend certificate email.
		/// AppServiceCertificateOrders_ResendEmail subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/resendEmail
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="certificateOrderName">Name of the certificate order.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task AppServiceCertificateOrders_ResendEmailAsync(string resourceGroupName, string certificateOrderName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CertificateRegistration/certificateOrders/"+ (certificateOrderName==null? "" : System.Uri.EscapeDataString(certificateOrderName))+"/resendEmail&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verify domain ownership for this certificate order.
		/// Description for Verify domain ownership for this certificate order.
		/// AppServiceCertificateOrders_ResendRequestEmails subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/resendRequestEmails
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="certificateOrderName">Name of the certificate order.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Email address</param>
		public async Task AppServiceCertificateOrders_ResendRequestEmailsAsync(string resourceGroupName, string certificateOrderName, string subscriptionId, string api_version, AppServiceCertificateOrders_ResendRequestEmailsPostBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CertificateRegistration/certificateOrders/"+ (certificateOrderName==null? "" : System.Uri.EscapeDataString(certificateOrderName))+"/resendRequestEmails&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Verify domain ownership for this certificate order.
		/// Description for Verify domain ownership for this certificate order.
		/// AppServiceCertificateOrders_RetrieveSiteSeal subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/retrieveSiteSeal
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="certificateOrderName">Name of the certificate order.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Site seal request.</param>
		/// <returns>OK</returns>
		public async Task<SiteSeal> AppServiceCertificateOrders_RetrieveSiteSealAsync(string resourceGroupName, string certificateOrderName, string subscriptionId, string api_version, SiteSealRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CertificateRegistration/certificateOrders/"+ (certificateOrderName==null? "" : System.Uri.EscapeDataString(certificateOrderName))+"/retrieveSiteSeal&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SiteSeal>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Verify domain ownership for this certificate order.
		/// Description for Verify domain ownership for this certificate order.
		/// AppServiceCertificateOrders_VerifyDomainOwnership subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/verifyDomainOwnership
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="certificateOrderName">Name of the certificate order.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task AppServiceCertificateOrders_VerifyDomainOwnershipAsync(string resourceGroupName, string certificateOrderName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CertificateRegistration/certificateOrders/"+ (certificateOrderName==null? "" : System.Uri.EscapeDataString(certificateOrderName))+"/verifyDomainOwnership&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the list of certificate actions.
		/// Description for Retrieve the list of certificate actions.
		/// AppServiceCertificateOrders_RetrieveCertificateActions subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveCertificateActions
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="name">Name of the certificate order.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<CertificateOrderAction[]> AppServiceCertificateOrders_RetrieveCertificateActionsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CertificateRegistration/certificateOrders/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/retrieveCertificateActions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CertificateOrderAction[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve email history.
		/// Description for Retrieve email history.
		/// AppServiceCertificateOrders_RetrieveCertificateEmailHistory subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveEmailHistory
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="name">Name of the certificate order.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<CertificateEmail[]> AppServiceCertificateOrders_RetrieveCertificateEmailHistoryAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CertificateRegistration/certificateOrders/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/retrieveEmailHistory&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CertificateEmail[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class AppServiceCertificateOrders_ResendRequestEmailsPostBody
	{
		
		/// <summary>
		/// Name of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
