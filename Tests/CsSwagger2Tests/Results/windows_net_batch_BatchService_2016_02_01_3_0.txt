//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Response to an AccountOperation.ListNodeAgentSkus request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AccountListNodeAgentSkusResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		/// <summary>
		/// The list of supported node agent SKUs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public NodeAgentSku[] Value { get; set; }
	}
	
	/// <summary>
	/// A node agent SKU supported by the Batch service. The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NodeAgentSku
	{
		
		/// <summary>
		/// The node agent SKU id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of operating system compatible with the node agent SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public System.Nullable<NodeAgentSkuOsType> OsType { get; set; }
		
		/// <summary>
		/// The list of images verified to be compatible with this node agent SKU. This collection is not exhaustive (the node agent may be compatible with other images).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedImageReferences")]
		public ImageReference[] VerifiedImageReferences { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum NodeAgentSkuOsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		linux = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		windows = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unmapped = 2,
	}
	
	/// <summary>
	/// A reference to an Azure Virtual Machines Marketplace image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageReference
	{
		
		/// <summary>
		/// The offer type of the Azure Virtual Machines Marketplace image. For example, UbuntuServer or WindowsServer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offer")]
		public string Offer { get; set; }
		
		/// <summary>
		/// The publisher of the Azure Virtual Machines Marketplace image. For example, Canonical or MicrosoftWindowsServer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// The SKU of the Azure Virtual Machines Marketplace image. For example, 14.04.0-LTS or 2012-R2-Datacenter.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// The version of the Azure Virtual Machines Marketplace image. A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// A locality hint that can be used by the Batch service to select a compute node on which to start a task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AffinityInformation
	{
		
		/// <summary>
		/// An opaque string representing the location of a compute node or a task that has run previously. You can pass the AffinityId of a compute node or task to indicate that this task needs to be placed close to the node or task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affinityId")]
		public string AffinityId { get; set; }
	}
	
	/// <summary>
	/// Response to a ApplicationOperations.List request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		/// <summary>
		/// The list of applications available in the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ApplicationSummary[] Value { get; set; }
	}
	
	/// <summary>
	/// Contains information about an application in an Azure Batch account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationSummary
	{
		
		/// <summary>
		/// The display name for the application.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// A string that uniquely identifies the application within the account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public string[] Versions { get; set; }
	}
	
	/// <summary>
	/// A reference to an application package to be installed on compute nodes in a pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationPackageReference
	{
		
		/// <summary>
		/// The id of the application to install.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		/// <summary>
		/// The version of the application to install. If omitted, the default version is installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Specifies characteristics for a temporary 'auto pool'. The Batch service will create this auto pool, run all the tasks for the job on it, and will delete the pool once the job has completed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoPoolSpecification
	{
		
		/// <summary>
		/// A prefix to be added to the unique identifier when a pool is automatically created. The prefix can be up to 20 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoPoolIdPrefix")]
		public string AutoPoolIdPrefix { get; set; }
		
		/// <summary>
		/// Whether to keep an auto pool alive after its lifetime expires.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keepAlive")]
		public System.Nullable<System.Boolean> KeepAlive { get; set; }
		
		/// <summary>
		/// Specification for creating a new pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pool")]
		public PoolSpecification Pool { get; set; }
		
		/// <summary>
		/// The minimum lifetime of created auto pools, and how multiple jobs on a schedule are assigned to pools.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="poolLifetimeOption")]
		public AutoPoolSpecificationPoolLifetimeOption PoolLifetimeOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AutoPoolSpecificationPoolLifetimeOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		jobschedule = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		job = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unmapped = 2,
	}
	
	/// <summary>
	/// The results and errors from an execution of a pool autoscale formula.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoScaleRun
	{
		
		/// <summary>
		/// An error that occurred when executing or evaluating a pool autoscale formula.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public AutoScaleRunError Error { get; set; }
		
		/// <summary>
		/// The final values of all variables used in the evaluation of the autoscale formula. Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public string Results { get; set; }
		
		/// <summary>
		/// The time at which the autoscale formula was last evaluated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	/// <summary>
	/// An error that occurred when executing or evaluating a pool autoscale formula.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoScaleRunError
	{
		
		/// <summary>
		/// An identifier for the autoscale error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A message describing the autoscale error, intended to be suitable for display in a user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// A list of additional error details related to the autoscale error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public NameValuePair[] Values { get; set; }
	}
	
	/// <summary>
	/// Represents a name-value pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NameValuePair
	{
		
		/// <summary>
		/// The name in the name-value pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value in the name-value pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// An error response received from the Azure Batch service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchError
	{
		
		/// <summary>
		/// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// An error message received in an Azure Batch error response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public ErrorMessage Message { get; set; }
		
		/// <summary>
		/// A collection of key-value pairs containing additional details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public BatchErrorDetail[] Values { get; set; }
	}
	
	/// <summary>
	/// An item of additional information included in an Azure Batch error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchErrorDetail
	{
		
		/// <summary>
		/// An identifier specifying the meaning of the Value property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The additional information included with the error response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A certificate that can be installed on compute nodes and can be used to authenticate operations on the machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Certificate
	{
		
		/// <summary>
		/// An error encountered by the Batch service when deleting a certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteCertificateError")]
		public DeleteCertificateError DeleteCertificateError { get; set; }
		
		/// <summary>
		/// The previous state of the certificate. This property is not set if the certificate is in its initial Active state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousState")]
		public System.Nullable<CertificatePreviousState> PreviousState { get; set; }
		
		/// <summary>
		/// The time at which the certificate entered its previous state. This property is not set if the certificate is in its initial Active state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> PreviousStateTransitionTime { get; set; }
		
		/// <summary>
		/// The public part of the certificate as a base-64 encoded .cer file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicData")]
		public string PublicData { get; set; }
		
		/// <summary>
		/// The current state of the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CertificatePreviousState State { get; set; }
		
		/// <summary>
		/// The time at which the certificate entered its current state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> StateTransitionTime { get; set; }
		
		/// <summary>
		/// The X.509 thumbprint of the certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbprint")]
		public string Thumbprint { get; set; }
		
		/// <summary>
		/// The algorithm used to derive the thumbprint. This must be sha1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbprintAlgorithm")]
		public string ThumbprintAlgorithm { get; set; }
		
		/// <summary>
		/// The URL of the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CertificatePreviousState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deletefailed = 2,
	}
	
	/// <summary>
	/// A certificate that can be installed on compute nodes and can be used to authenticate operations on the machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CertificateAddParameter
	{
		
		/// <summary>
		/// The format of the certificate data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateFormat")]
		public System.Nullable<CertificateAddParameterCertificateFormat> CertificateFormat { get; set; }
		
		/// <summary>
		/// The base64-encoded contents of the certificate. The maximum size is 10KB.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// The password to access the certificate's private key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The X.509 thumbprint of the certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thumbprint")]
		public string Thumbprint { get; set; }
		
		/// <summary>
		/// The algorithm used to derive the thumbprint. This must be sha1.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thumbprintAlgorithm")]
		public string ThumbprintAlgorithm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CertificateAddParameterCertificateFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pfx = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unmapped = 2,
	}
	
	/// <summary>
	/// Response to a CertificateOperation.List request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CertificateListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		/// <summary>
		/// The list of certificates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Certificate[] Value { get; set; }
	}
	
	/// <summary>
	/// A reference to a certificate to be installed on compute nodes in a pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CertificateReference
	{
		
		/// <summary>
		/// The location of the certificate store on the compute node into which to install the certificate. The default value is CurrentUser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeLocation")]
		public System.Nullable<CertificateReferenceStoreLocation> StoreLocation { get; set; }
		
		/// <summary>
		/// The name of the certificate store on the compute node into which to install the certificate. The default value is My.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeName")]
		public string StoreName { get; set; }
		
		/// <summary>
		/// The thumbprint of the certificate.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thumbprint")]
		public string Thumbprint { get; set; }
		
		/// <summary>
		/// The algorithm with which the thumbprint is associated. This must be sha1.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thumbprintAlgorithm")]
		public string ThumbprintAlgorithm { get; set; }
		
		/// <summary>
		/// Which user accounts on the compute node should have access to the private data of the certificate. This may be any subset of the values 'starttask', 'task' and 'remoteuser', separated by commas. The default is all accounts, corresponding to the string 'starttask,task,remoteuser'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public string[] Visibility { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CertificateReferenceStoreLocation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		currentuser = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		localmachine = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unmapped = 2,
	}
	
	/// <summary>
	/// An Azure Batch job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudJob
	{
		
		/// <summary>
		/// The list of common environment variable settings. These environment variables are set for all tasks in the job (including the Job Manager, Job Preparation and Job Release tasks).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonEnvironmentSettings")]
		public EnvironmentSetting[] CommonEnvironmentSettings { get; set; }
		
		/// <summary>
		/// Specifies the execution constraints for jobs created on a schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public JobConstraints Constraints { get; set; }
		
		/// <summary>
		/// The creation time of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// The display name for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The ETag of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eTag")]
		public string ETag { get; set; }
		
		/// <summary>
		/// Contains information about the execution of a job in the Azure Batch service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionInfo")]
		public JobExecutionInformation ExecutionInfo { get; set; }
		
		/// <summary>
		/// A string that uniquely identifies the job within the account. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. It is common to use a GUID for the id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Specifies details of a Job Manager task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobManagerTask")]
		public JobManagerTask JobManagerTask { get; set; }
		
		/// <summary>
		/// A Job Preparation task to run before any tasks of the job on any given compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobPreparationTask")]
		public JobPreparationTask JobPreparationTask { get; set; }
		
		/// <summary>
		/// A Job Release task to run on job completion on any compute node where the job has run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobReleaseTask")]
		public JobReleaseTask JobReleaseTask { get; set; }
		
		/// <summary>
		/// The last modified time of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// A list of name-value pairs associated with the job as metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// Specifies how a job should be assigned to a pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolInfo")]
		public PoolInformation PoolInfo { get; set; }
		
		/// <summary>
		/// The previous state of the job. This property is not set if the job is in its initial Active state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousState")]
		public System.Nullable<CloudJobPreviousState> PreviousState { get; set; }
		
		/// <summary>
		/// The time at which the job entered its previous state. This property is not set if the job is in its initial Active state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> PreviousStateTransitionTime { get; set; }
		
		/// <summary>
		/// The priority of the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// The current state of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CloudJobPreviousState State { get; set; }
		
		/// <summary>
		/// The time at which the job entered its current state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> StateTransitionTime { get; set; }
		
		/// <summary>
		/// Resource usage statistics for a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public JobStatistics Stats { get; set; }
		
		/// <summary>
		/// The URL of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The flag that determines if this job will use tasks with dependencies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usesTaskDependencies")]
		public System.Nullable<System.Boolean> UsesTaskDependencies { get; set; }
	}
	
	/// <summary>
	/// An environment variable to be set on a task process.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnvironmentSetting
	{
		
		/// <summary>
		/// The name of the environment variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the environment variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A name-value pair associated with a Batch service resource. The Batch service does not assign any meaning to this metadata; it is solely for the use of user code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetadataItem
	{
		
		/// <summary>
		/// The name of the metadata item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the metadata item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CloudJobPreviousState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabling = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enabling = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminating = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 6,
	}
	
	/// <summary>
	/// Response to a CloudJobOperations.ListPreparationAndReleaseTaskStatus request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudJobListPreparationAndReleaseTaskStatusResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		/// <summary>
		/// A list of Job Preparation and Job Release task execution information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public JobPreparationAndReleaseTaskExecutionInformation[] Value { get; set; }
	}
	
	/// <summary>
	/// The status of the Job Preparation and Job Release tasks on a compute node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobPreparationAndReleaseTaskExecutionInformation
	{
		
		/// <summary>
		/// Contains information about the execution of a Job Preparation task on a compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobPreparationTaskExecutionInfo")]
		public JobPreparationTaskExecutionInformation JobPreparationTaskExecutionInfo { get; set; }
		
		/// <summary>
		/// Contains information about the execution of a Job Release task on a compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobReleaseTaskExecutionInfo")]
		public JobReleaseTaskExecutionInformation JobReleaseTaskExecutionInfo { get; set; }
		
		/// <summary>
		/// The id of the compute node to which this entry refers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeId")]
		public string NodeId { get; set; }
		
		/// <summary>
		/// The URL of the compute node to which this entry refers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeUrl")]
		public string NodeUrl { get; set; }
		
		/// <summary>
		/// The id of the pool containing the compute node to which this entry refers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolId")]
		public string PoolId { get; set; }
	}
	
	/// <summary>
	/// Response to a CloudJobOperation.List or ListFromJobSchedule request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudJobListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		/// <summary>
		/// The list of jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CloudJob[] Value { get; set; }
	}
	
	/// <summary>
	/// A job schedule that allows recurring jobs by specifying when to run jobs and a specification used to create each job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudJobSchedule
	{
		
		/// <summary>
		/// The creation time of the job schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// The display name for the schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The ETag of the job schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eTag")]
		public string ETag { get; set; }
		
		/// <summary>
		/// Specifies how tasks should be run in a job associated with a job schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionInfo")]
		public JobScheduleExecutionInformation ExecutionInfo { get; set; }
		
		/// <summary>
		/// A string that uniquely identifies the schedule within the account. A GUID is recommended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Specifies details of the jobs to be created on a schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobSpecification")]
		public JobSpecification JobSpecification { get; set; }
		
		/// <summary>
		/// The last modified time of the job schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// A list of name-value pairs associated with the schedule as metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// The previous state of the job schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousState")]
		public System.Nullable<CloudJobSchedulePreviousState> PreviousState { get; set; }
		
		/// <summary>
		/// The time at which the job schedule entered its previous state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> PreviousStateTransitionTime { get; set; }
		
		/// <summary>
		/// The schedule according to which jobs will be created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public Schedule Schedule { get; set; }
		
		/// <summary>
		/// The current state of the job schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CloudJobSchedulePreviousState State { get; set; }
		
		/// <summary>
		/// The time at which the job schedule entered the current state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> StateTransitionTime { get; set; }
		
		/// <summary>
		/// Resource usage statistics for a job schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public JobScheduleStatistics Stats { get; set; }
		
		/// <summary>
		/// The URL of the job schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CloudJobSchedulePreviousState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminating = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 4,
	}
	
	/// <summary>
	/// Response to a CloudJobScheduleOperation.List request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudJobScheduleListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		/// <summary>
		/// The list of job schedules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CloudJobSchedule[] Value { get; set; }
	}
	
	/// <summary>
	/// A pool in the Azure Batch service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudPool
	{
		
		/// <summary>
		/// Whether the pool is resizing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocationState")]
		public System.Nullable<CloudPoolAllocationState> AllocationState { get; set; }
		
		/// <summary>
		/// The time at which the pool entered its current allocation state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocationStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> AllocationStateTransitionTime { get; set; }
		
		/// <summary>
		/// The list of application packages to be installed on each compute node in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationPackageReferences")]
		public ApplicationPackageReference[] ApplicationPackageReferences { get; set; }
		
		/// <summary>
		/// A time interval for the desired AutoScale evaluation period in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoScaleEvaluationInterval")]
		public string AutoScaleEvaluationInterval { get; set; }
		
		/// <summary>
		/// A formula for the desired number of compute nodes in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoScaleFormula")]
		public string AutoScaleFormula { get; set; }
		
		/// <summary>
		/// The results and errors from an execution of a pool autoscale formula.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoScaleRun")]
		public AutoScaleRun AutoScaleRun { get; set; }
		
		/// <summary>
		/// The list of certificates to be installed on each compute node in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateReferences")]
		public CertificateReference[] CertificateReferences { get; set; }
		
		/// <summary>
		/// The configuration for nodes in a pool based on the Azure Cloud Services platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudServiceConfiguration")]
		public CloudServiceConfiguration CloudServiceConfiguration { get; set; }
		
		/// <summary>
		/// The creation time of the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// The number of compute nodes currently in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentDedicated")]
		public System.Nullable<System.Int32> CurrentDedicated { get; set; }
		
		/// <summary>
		/// The display name for the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The ETag of the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eTag")]
		public string ETag { get; set; }
		
		/// <summary>
		/// Whether the pool size should automatically adjust over time. If true, the AutoScaleFormula property must be set. If false, the TargetDedicated property must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutoScale")]
		public System.Nullable<System.Boolean> EnableAutoScale { get; set; }
		
		/// <summary>
		/// Whether the pool permits direct communication between nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableInterNodeCommunication")]
		public System.Nullable<System.Boolean> EnableInterNodeCommunication { get; set; }
		
		/// <summary>
		/// A string that uniquely identifies the pool within the account. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The last modified time of the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// The maximum number of tasks that can run concurrently on a single compute node in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTasksPerNode")]
		public System.Nullable<System.Int32> MaxTasksPerNode { get; set; }
		
		/// <summary>
		/// A list of name-value pairs associated with the pool as metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// An error that occurred when resizing a pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resizeError")]
		public ResizeError ResizeError { get; set; }
		
		/// <summary>
		/// The timeout for allocation of compute nodes to the pool. In a Get Pool operation, this is the timeout for the most recent resize operation. The default value is 10 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resizeTimeout")]
		public string ResizeTimeout { get; set; }
		
		/// <summary>
		/// A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTask")]
		public StartTask StartTask { get; set; }
		
		/// <summary>
		/// The current state of the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<CloudPoolState> State { get; set; }
		
		/// <summary>
		/// The time at which the pool entered its current state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> StateTransitionTime { get; set; }
		
		/// <summary>
		/// Contains utilization and resource usage statistics for the lifetime of a pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public PoolStatistics Stats { get; set; }
		
		/// <summary>
		/// The desired number of compute nodes in the pool. This property must have the default value if EnableAutoScale is true. It is required if EnableAutoScale is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetDedicated")]
		public System.Nullable<System.Int32> TargetDedicated { get; set; }
		
		/// <summary>
		/// Specifies how tasks should be distributed across compute nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskSchedulingPolicy")]
		public TaskSchedulingPolicy TaskSchedulingPolicy { get; set; }
		
		/// <summary>
		/// The URL of the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The configuration for compute nodes in a pool based on the Azure Virtual Machines infrastructure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachineConfiguration")]
		public VirtualMachineConfiguration VirtualMachineConfiguration { get; set; }
		
		/// <summary>
		/// The size of virtual machines in the pool. All virtual machines in a pool are the same size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmSize")]
		public string VmSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CloudPoolAllocationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		steady = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		resizing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stopping = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CloudPoolState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		upgrading = 2,
	}
	
	/// <summary>
	/// Response to a CloudPoolOperations.List request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudPoolListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		/// <summary>
		/// The list of pools.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CloudPool[] Value { get; set; }
	}
	
	/// <summary>
	/// The configuration for nodes in a pool based on the Azure Cloud Services platform.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudServiceConfiguration
	{
		
		/// <summary>
		/// The Azure Guest OS Version currently installed on the virtual machines in the pool. This may differ from TargetOSVersion if the pool state is Upgrading.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentOSVersion")]
		public string CurrentOSVersion { get; set; }
		
		/// <summary>
		/// The Azure Guest OS family to be installed on the virtual machines in the pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="osFamily")]
		public string OsFamily { get; set; }
		
		/// <summary>
		/// The Azure Guest OS version to be installed on the virtual machines in the pool. The default value is * which specifies the latest operating system version for the specified OS family.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetOSVersion")]
		public string TargetOSVersion { get; set; }
	}
	
	/// <summary>
	/// An Azure Batch task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudTask
	{
		
		/// <summary>
		/// A locality hint that can be used by the Batch service to select a compute node on which to start a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affinityInfo")]
		public AffinityInformation AffinityInfo { get; set; }
		
		/// <summary>
		/// The command line of the task. For multi-instance tasks, the command line is executed on the primary subtask after all the subtasks have finished executing the coordination command line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandLine")]
		public string CommandLine { get; set; }
		
		/// <summary>
		/// Constraints to apply to the Job Manager task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public TaskConstraints Constraints { get; set; }
		
		/// <summary>
		/// The creation time of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// Specifies any dependencies of a task. Any task that is explicitly specified or within a dependency range must complete before the dependant task will be scheduled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependsOn")]
		public TaskDependencies DependsOn { get; set; }
		
		/// <summary>
		/// A display name for the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The ETag of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eTag")]
		public string ETag { get; set; }
		
		/// <summary>
		/// A list of environment variable settings for the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentSettings")]
		public EnvironmentSetting[] EnvironmentSettings { get; set; }
		
		/// <summary>
		/// Information about the execution of a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionInfo")]
		public TaskExecutionInformation ExecutionInfo { get; set; }
		
		/// <summary>
		/// A string that uniquely identifies the task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The last modified time of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// Settings which specify how to run a multi-instance task. Multi-instance tasks are commonly used to support MPI tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiInstanceSettings")]
		public MultiInstanceSettings MultiInstanceSettings { get; set; }
		
		/// <summary>
		/// Information about the compute node on which a task ran.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeInfo")]
		public ComputeNodeInformation NodeInfo { get; set; }
		
		/// <summary>
		/// The previous state of the task. This property is not set if the task is in its initial Active state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousState")]
		public System.Nullable<CloudTaskPreviousState> PreviousState { get; set; }
		
		/// <summary>
		/// The time at which the task entered its previous state. This property is not set if the task is in its initial Active state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> PreviousStateTransitionTime { get; set; }
		
		/// <summary>
		/// A list of files that the Batch service will download to the compute node before running the command line. For multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary subtask is executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceFiles")]
		public ResourceFile[] ResourceFiles { get; set; }
		
		/// <summary>
		/// Whether to run the task in elevated mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runElevated")]
		public System.Nullable<System.Boolean> RunElevated { get; set; }
		
		/// <summary>
		/// The current state of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CloudTaskPreviousState State { get; set; }
		
		/// <summary>
		/// The time at which the task entered its current state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> StateTransitionTime { get; set; }
		
		/// <summary>
		/// Resource usage statistics for a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public TaskStatistics Stats { get; set; }
		
		/// <summary>
		/// The URL of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CloudTaskPreviousState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		preparing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 3,
	}
	
	/// <summary>
	/// A file to be downloaded from Azure blob storage to a compute node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceFile
	{
		
		/// <summary>
		/// The URL of the file within Azure Blob Storage. This URL should include a shared access signature if the blob is not publicly readable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobSource")]
		public string BlobSource { get; set; }
		
		/// <summary>
		/// The file mode attribute in octal format. This property will be ignored if it is specified for a resourceFile which will be downloaded to a Windows compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileMode")]
		public string FileMode { get; set; }
		
		/// <summary>
		/// The location to which to download the file, relative to the task's working directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
	}
	
	/// <summary>
	/// Response to a CloudTaskOperations.List request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudTaskListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		/// <summary>
		/// The list of tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CloudTask[] Value { get; set; }
	}
	
	/// <summary>
	/// Response to a CloudTaskOperations.ListSubtasks request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudTaskListSubtasksResult
	{
		
		/// <summary>
		/// The list of information of subtasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SubtaskInformation[] Value { get; set; }
	}
	
	/// <summary>
	/// Information about an Azure Batch subtask.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubtaskInformation
	{
		
		/// <summary>
		/// The time at which the subtask completed. This property is set only if the subtask is in the Completed state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The exit code of the subtask. This property is set only if the subtask is in the Completed state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCode")]
		public System.Nullable<System.Int32> ExitCode { get; set; }
		
		/// <summary>
		/// The id of the subtask.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Information about the compute node on which a task ran.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeInfo")]
		public ComputeNodeInformation NodeInfo { get; set; }
		
		/// <summary>
		/// The previous state of the subtask. This property is not set if the subtask is in its initial Active state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousState")]
		public CloudTaskPreviousState PreviousState { get; set; }
		
		/// <summary>
		/// The time at which the subtask entered its previous state. This property is not set if the subtask is in its initial Active state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> PreviousStateTransitionTime { get; set; }
		
		/// <summary>
		/// Information about an error when scheduling a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedulingError")]
		public TaskSchedulingError SchedulingError { get; set; }
		
		/// <summary>
		/// The time at which the subtask started running. If the subtask has been restarted or retried, this is the most recent time at which the subtask started running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The current state of the subtask.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CloudTaskPreviousState State { get; set; }
		
		/// <summary>
		/// The time at which the subtask entered its current state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> StateTransitionTime { get; set; }
	}
	
	/// <summary>
	/// A compute node in the Batch service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputeNode
	{
		
		/// <summary>
		/// An identifier which can be passed in the Add Task API to request that the task be scheduled close to this compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affinityId")]
		public string AffinityId { get; set; }
		
		/// <summary>
		/// The time at which this compute node was allocated to the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocationTime")]
		public System.Nullable<System.DateTimeOffset> AllocationTime { get; set; }
		
		/// <summary>
		/// The list of certificates installed on the compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateReferences")]
		public CertificateReference[] CertificateReferences { get; set; }
		
		/// <summary>
		/// The list of errors that are currently being encountered by the compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ComputeNodeError[] Errors { get; set; }
		
		/// <summary>
		/// The id of the compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The IP address that other compute nodes can use to communicate with this compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// The time at which the compute node was started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastBootTime")]
		public System.Nullable<System.DateTimeOffset> LastBootTime { get; set; }
		
		/// <summary>
		/// The list of tasks that are currently running on the compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recentTasks")]
		public TaskInformation[] RecentTasks { get; set; }
		
		/// <summary>
		/// The total number of currently running job tasks on the compute node. This includes Job Preparation, Job Release, and Job Manager tasks, but not the pool start task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runningTasksCount")]
		public System.Nullable<System.Int32> RunningTasksCount { get; set; }
		
		/// <summary>
		/// Whether the compute node should be available for task scheduling.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedulingState")]
		public System.Nullable<ComputeNodeSchedulingState> SchedulingState { get; set; }
		
		/// <summary>
		/// A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTask")]
		public StartTask StartTask { get; set; }
		
		/// <summary>
		/// Information about a start task running on a compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTaskInfo")]
		public StartTaskInformation StartTaskInfo { get; set; }
		
		/// <summary>
		/// The current state of the compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ComputeNodeState> State { get; set; }
		
		/// <summary>
		/// The time at which the compute node entered its current state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> StateTransitionTime { get; set; }
		
		/// <summary>
		/// The total number of job tasks completed on the compute node. This includes Job Preparation, Job Release and Job Manager tasks, but not the pool start task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalTasksRun")]
		public System.Nullable<System.Int32> TotalTasksRun { get; set; }
		
		/// <summary>
		/// The total number of job tasks which completed successfully (with exitCode 0) on the compute node. This includes Job Preparation, Job Release, and Job Manager tasks, but not the pool start task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalTasksSucceeded")]
		public System.Nullable<System.Int32> TotalTasksSucceeded { get; set; }
		
		/// <summary>
		/// The URL of the compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The size of the virtual machine hosting the compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmSize")]
		public string VmSize { get; set; }
	}
	
	/// <summary>
	/// An error encountered by a compute node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputeNodeError
	{
		
		/// <summary>
		/// An identifier for the compute node error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The list of additional error details related to the compute node error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorDetails")]
		public NameValuePair[] ErrorDetails { get; set; }
		
		/// <summary>
		/// A message describing the compute node error, intended to be suitable for display in a user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Information about a task running on a compute node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskInformation
	{
		
		/// <summary>
		/// Information about the execution of a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionInfo")]
		public TaskExecutionInformation ExecutionInfo { get; set; }
		
		/// <summary>
		/// The id of the job to which the task belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// The id of the subtask if the task is a multi-instance task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtaskId")]
		public System.Nullable<System.Int32> SubtaskId { get; set; }
		
		/// <summary>
		/// The id of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
		
		/// <summary>
		/// The current state of the task.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskState")]
		public CloudTaskPreviousState TaskState { get; set; }
		
		/// <summary>
		/// The URL of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskUrl")]
		public string TaskUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ComputeNodeSchedulingState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ComputeNodeState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		idle = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rebooting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reimaging = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		running = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unusable = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		creating = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		starting = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		waitingforstarttask = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		starttaskfailed = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		leavingpool = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		offline = 11,
	}
	
	/// <summary>
	/// Response to a ComputeNodeOperation.GetRemoteLoginSettings request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputeNodeGetRemoteLoginSettingsResult
	{
		
		/// <summary>
		/// The IP address used for remote login to the compute node.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remoteLoginIPAddress")]
		public string RemoteLoginIPAddress { get; set; }
		
		/// <summary>
		/// The port used for remote login to the compute node.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remoteLoginPort")]
		public int RemoteLoginPort { get; set; }
	}
	
	/// <summary>
	/// Information about the compute node on which a task ran.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputeNodeInformation
	{
		
		/// <summary>
		/// An identifier for the compute node on which the task ran, which can be passed when adding a task to request that the task be scheduled close to this compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affinityId")]
		public string AffinityId { get; set; }
		
		/// <summary>
		/// The id of the node on which the task ran.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeId")]
		public string NodeId { get; set; }
		
		/// <summary>
		/// The URL of the node on which the task ran. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeUrl")]
		public string NodeUrl { get; set; }
		
		/// <summary>
		/// The id of the pool on which the task ran.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolId")]
		public string PoolId { get; set; }
		
		/// <summary>
		/// The root directory of the task on the compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskRootDirectory")]
		public string TaskRootDirectory { get; set; }
		
		/// <summary>
		/// The URL to the root directory of the task on the compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskRootDirectoryUrl")]
		public string TaskRootDirectoryUrl { get; set; }
	}
	
	/// <summary>
	/// Response to a ComputeNodeOperation.List request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputeNodeListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		/// <summary>
		/// The list of compute nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ComputeNode[] Value { get; set; }
	}
	
	/// <summary>
	/// An user account on a compute node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputeNodeUser
	{
		
		/// <summary>
		/// The time at which the account should expire. If omitted, the default is 1 day from the current time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiryTime")]
		public System.Nullable<System.DateTimeOffset> ExpiryTime { get; set; }
		
		/// <summary>
		/// Whether the account should be an administrator on the compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAdmin")]
		public System.Nullable<System.Boolean> IsAdmin { get; set; }
		
		/// <summary>
		/// The user name of the account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The password of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The SSH public key that can be used for remote login to the compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sshPublicKey")]
		public string SshPublicKey { get; set; }
	}
	
	/// <summary>
	/// An error encountered by the Batch service when deleting a certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeleteCertificateError
	{
		
		/// <summary>
		/// An identifier for the certificate deletion error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A message describing the certificate deletion error, intended to be suitable for display in a user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// A list of additional error details related to the certificate deletion error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public NameValuePair[] Values { get; set; }
	}
	
	/// <summary>
	/// An error message received in an Azure Batch error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorMessage
	{
		
		/// <summary>
		/// The language code of the error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lang")]
		public string Lang { get; set; }
		
		/// <summary>
		/// The text of the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The properties of a file on a compute node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FileProperties
	{
		
		/// <summary>
		/// The length of the file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contentLength")]
		public long ContentLength { get; set; }
		
		/// <summary>
		/// The content type of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// The file creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// The file mode attribute in octal format. This property will be returned only from a Linux compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileMode")]
		public string FileMode { get; set; }
		
		/// <summary>
		/// The time at which the file was last modified.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.DateTimeOffset LastModified { get; set; }
	}
	
	/// <summary>
	/// An Azure Batch job to add.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobAddParameter
	{
		
		/// <summary>
		/// The list of common environment variable settings. These environment variables are set for all tasks in the job (including the Job Manager, Job Preparation and Job Release tasks).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonEnvironmentSettings")]
		public EnvironmentSetting[] CommonEnvironmentSettings { get; set; }
		
		/// <summary>
		/// Specifies the execution constraints for jobs created on a schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public JobConstraints Constraints { get; set; }
		
		/// <summary>
		/// The display name for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// A string that uniquely identifies the job within the account. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. It is common to use a GUID for the id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Specifies details of a Job Manager task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobManagerTask")]
		public JobManagerTask JobManagerTask { get; set; }
		
		/// <summary>
		/// A Job Preparation task to run before any tasks of the job on any given compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobPreparationTask")]
		public JobPreparationTask JobPreparationTask { get; set; }
		
		/// <summary>
		/// A Job Release task to run on job completion on any compute node where the job has run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobReleaseTask")]
		public JobReleaseTask JobReleaseTask { get; set; }
		
		/// <summary>
		/// A list of name-value pairs associated with the job as metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// Specifies how a job should be assigned to a pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="poolInfo")]
		public PoolInformation PoolInfo { get; set; }
		
		/// <summary>
		/// The priority of the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// The flag that determines if this job will use tasks with dependencies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usesTaskDependencies")]
		public System.Nullable<System.Boolean> UsesTaskDependencies { get; set; }
	}
	
	/// <summary>
	/// Specifies the execution constraints for jobs created on a schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobConstraints
	{
		
		/// <summary>
		/// The maximum number of times each task may be retried. The Batch service retries a task if its exit code is nonzero.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTaskRetryCount")]
		public System.Nullable<System.Int32> MaxTaskRetryCount { get; set; }
		
		/// <summary>
		/// The maximum elapsed time that the job may run, measured from the time the job starts. If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxWallClockTime")]
		public string MaxWallClockTime { get; set; }
	}
	
	/// <summary>
	/// Parameters for a CloudJobOperations.Disable request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobDisableParameter
	{
		
		/// <summary>
		/// What to do with active tasks associated with the job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="disableTasks")]
		public JobDisableParameterDisableTasks DisableTasks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobDisableParameterDisableTasks
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requeue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wait = 2,
	}
	
	/// <summary>
	/// Contains information about the execution of a job in the Azure Batch service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobExecutionInformation
	{
		
		/// <summary>
		/// The completion time of the job. This property is set only if the job is in the completed state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The id of the pool to which this job is assigned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolId")]
		public string PoolId { get; set; }
		
		/// <summary>
		/// An error encountered by the Batch service when scheduling a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedulingError")]
		public JobSchedulingError SchedulingError { get; set; }
		
		/// <summary>
		/// The start time of the job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// A string describing the reason the job ended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="terminateReason")]
		public string TerminateReason { get; set; }
	}
	
	/// <summary>
	/// Specifies details of a Job Manager task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobManagerTask
	{
		
		/// <summary>
		/// The command line of the Job Manager task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandLine")]
		public string CommandLine { get; set; }
		
		/// <summary>
		/// Constraints to apply to the Job Manager task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public TaskConstraints Constraints { get; set; }
		
		/// <summary>
		/// The display name of the Job Manager task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// A list of environment variable settings for the Job Manager task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentSettings")]
		public EnvironmentSetting[] EnvironmentSettings { get; set; }
		
		/// <summary>
		/// A string that uniquely identifies the Job Manager task. A GUID is recommended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether completion of the Job Manager task signifies completion of the entire job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="killJobOnCompletion")]
		public System.Nullable<System.Boolean> KillJobOnCompletion { get; set; }
		
		/// <summary>
		/// A list of files that the Batch service will download to the compute node before running the command line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceFiles")]
		public ResourceFile[] ResourceFiles { get; set; }
		
		/// <summary>
		/// Whether to run the Job Manager task in elevated mode. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runElevated")]
		public System.Nullable<System.Boolean> RunElevated { get; set; }
		
		/// <summary>
		/// Whether the Job Manager task requires exclusive use of the compute node where it runs. If true, no other tasks will run on the same compute node for as long as the Job Manager is running. If false, other tasks can run simultaneously with the Job Manager on a compute node. (The Job Manager task counts normally against the node's concurrent task limit, so this is only relevant if the node allows multiple concurrent tasks.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runExclusive")]
		public System.Nullable<System.Boolean> RunExclusive { get; set; }
	}
	
	/// <summary>
	/// Parameters for a CloudJobOperations.Patch request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobPatchParameter
	{
		
		/// <summary>
		/// Specifies the execution constraints for jobs created on a schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public JobConstraints Constraints { get; set; }
		
		/// <summary>
		/// A list of name-value pairs associated with the job as metadata. If omitted, the existing job metadata is left unchanged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// Specifies how a job should be assigned to a pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolInfo")]
		public PoolInformation PoolInfo { get; set; }
		
		/// <summary>
		/// The priority of the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, the priority of the job is left unchanged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
	}
	
	/// <summary>
	/// A Job Preparation task to run before any tasks of the job on any given compute node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobPreparationTask
	{
		
		/// <summary>
		/// The command line of the Job Preparation task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandLine")]
		public string CommandLine { get; set; }
		
		/// <summary>
		/// Constraints to apply to the Job Manager task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public TaskConstraints Constraints { get; set; }
		
		/// <summary>
		/// A list of environment variable settings for the Job Preparation task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentSettings")]
		public EnvironmentSetting[] EnvironmentSettings { get; set; }
		
		/// <summary>
		/// A string that uniquely identifies the job preparation task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether the Batch service should rerun the Job Preparation task after a compute node reboots. Note that the Job Preparation task should still be written to be idempotent because it can be rerun if the compute node is rebooted while Job Preparation task is still running. The default value is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rerunOnNodeRebootAfterSuccess")]
		public System.Nullable<System.Boolean> RerunOnNodeRebootAfterSuccess { get; set; }
		
		/// <summary>
		/// A list of files that the Batch service will download to the compute node before running the command line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceFiles")]
		public ResourceFile[] ResourceFiles { get; set; }
		
		/// <summary>
		/// Whether to run the Job Preparation task in elevated mode. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runElevated")]
		public System.Nullable<System.Boolean> RunElevated { get; set; }
		
		/// <summary>
		/// Whether the Batch service should wait for the Job Preparation task to complete successfully before scheduling any other tasks of the job on the compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitForSuccess")]
		public System.Nullable<System.Boolean> WaitForSuccess { get; set; }
	}
	
	/// <summary>
	/// Contains information about the execution of a Job Preparation task on a compute node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobPreparationTaskExecutionInformation
	{
		
		/// <summary>
		/// The time at which the Job Preparation task completed. This property is set only if the task is in the Completed state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The exit code of the Job Preparation task. This property is set only if the task is in the Completed state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCode")]
		public System.Nullable<System.Int32> ExitCode { get; set; }
		
		/// <summary>
		/// The most recent time at which a retry of the Job Preparation task started running. This property is set only if the task was retried (i.e. retryCount is nonzero).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRetryTime")]
		public System.Nullable<System.DateTimeOffset> LastRetryTime { get; set; }
		
		/// <summary>
		/// The number of times the task has been retried by the Batch service. Every time the task exits with a non-zero exit code, it is deemed a task failure. The Batch service will retry the task up to the limit specified by the constraints.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="retryCount")]
		public int RetryCount { get; set; }
		
		/// <summary>
		/// Information about an error when scheduling a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedulingError")]
		public TaskSchedulingError SchedulingError { get; set; }
		
		/// <summary>
		/// The time at which the task started running. Note that every time the task is restarted, this value is updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// The current state of the Job Preparation task.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public JobPreparationTaskExecutionInformationState State { get; set; }
		
		/// <summary>
		/// The root directory of the Job Preparation task on the compute node. You can use this path to retrieve files created by the task, such as log files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskRootDirectory")]
		public string TaskRootDirectory { get; set; }
		
		/// <summary>
		/// The URL to the root directory of the Job Preparation task on the compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskRootDirectoryUrl")]
		public string TaskRootDirectoryUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobPreparationTaskExecutionInformationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		running = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 1,
	}
	
	/// <summary>
	/// A Job Release task to run on job completion on any compute node where the job has run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobReleaseTask
	{
		
		/// <summary>
		/// The command line of the Job Release task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandLine")]
		public string CommandLine { get; set; }
		
		/// <summary>
		/// A list of environment variable settings for the Job Release task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentSettings")]
		public EnvironmentSetting[] EnvironmentSettings { get; set; }
		
		/// <summary>
		/// A string that uniquely identifies the Job Release task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The maximum elapsed time that the Job Release task may run on a given compute node, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxWallClockTime")]
		public string MaxWallClockTime { get; set; }
		
		/// <summary>
		/// A list of files that the Batch service will download to the compute node before running the command line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceFiles")]
		public ResourceFile[] ResourceFiles { get; set; }
		
		/// <summary>
		/// The minimum time to retain the working directory for the Job Release task on the compute node. After this time, the Batch service may delete the working directory and all its contents. The default is infinite.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionTime")]
		public string RetentionTime { get; set; }
		
		/// <summary>
		/// Whether to run the Job Release task in elevated mode. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runElevated")]
		public System.Nullable<System.Boolean> RunElevated { get; set; }
	}
	
	/// <summary>
	/// Contains information about the execution of a Job Release task on a compute node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobReleaseTaskExecutionInformation
	{
		
		/// <summary>
		/// The time at which the Job Release task completed. This property is set only if the task is in the Completed state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The exit code of the Job Release task. This property is set only if the task is in the Completed state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCode")]
		public System.Nullable<System.Int32> ExitCode { get; set; }
		
		/// <summary>
		/// Information about an error when scheduling a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedulingError")]
		public TaskSchedulingError SchedulingError { get; set; }
		
		/// <summary>
		/// The time at which the task started running. Note that every time the task is restarted, this value is updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// The current state of the Job Release task.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public JobPreparationTaskExecutionInformationState State { get; set; }
		
		/// <summary>
		/// The root directory of the Job Release task on the compute node. You can use this path to retrieve files created by the task, such as log files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskRootDirectory")]
		public string TaskRootDirectory { get; set; }
		
		/// <summary>
		/// The URL to the root directory of the Job Release task on the compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskRootDirectoryUrl")]
		public string TaskRootDirectoryUrl { get; set; }
	}
	
	/// <summary>
	/// A job schedule that allows recurring jobs by specifying when to run jobs and a specification used to create each job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobScheduleAddParameter
	{
		
		/// <summary>
		/// The display name for the schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// A string that uniquely identifies the schedule within the account. A GUID is recommended.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Specifies details of the jobs to be created on a schedule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobSpecification")]
		public JobSpecification JobSpecification { get; set; }
		
		/// <summary>
		/// A list of name-value pairs associated with the schedule as metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// The schedule according to which jobs will be created
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public Schedule Schedule { get; set; }
	}
	
	/// <summary>
	/// Specifies how tasks should be run in a job associated with a job schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobScheduleExecutionInformation
	{
		
		/// <summary>
		/// The time at which the schedule ended. This property is set only if the job schedule is in the completed state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The next time at which a job will be created under this schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextRunTime")]
		public System.Nullable<System.DateTimeOffset> NextRunTime { get; set; }
		
		/// <summary>
		/// Information about the most recent job to run under the job schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recentJob")]
		public RecentJob RecentJob { get; set; }
	}
	
	/// <summary>
	/// Parameters for a CloudJobScheduleOperations.Patch request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobSchedulePatchParameter
	{
		
		/// <summary>
		/// Specifies details of the jobs to be created on a schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobSpecification")]
		public JobSpecification JobSpecification { get; set; }
		
		/// <summary>
		/// A list of name-value pairs associated with the job schedule as metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// The schedule according to which jobs will be created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public Schedule Schedule { get; set; }
	}
	
	/// <summary>
	/// Resource usage statistics for a job schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobScheduleStatistics
	{
		
		/// <summary>
		/// The total kernel mode CPU time (summed across all cores and all compute nodes) consumed by all tasks in all jobs created under the schedule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kernelCPUTime")]
		public string KernelCPUTime { get; set; }
		
		/// <summary>
		/// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		/// <summary>
		/// The total number of tasks that failed during the given time range in jobs created under the schedule. A task fails if it exhausts its maximum retry count without returning exit code 0.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numFailedTasks")]
		public long NumFailedTasks { get; set; }
		
		/// <summary>
		/// The total number of tasks successfully completed during the given time range in jobs created under the schedule. A task completes successfully if it returns exit code 0.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numSucceededTasks")]
		public long NumSucceededTasks { get; set; }
		
		/// <summary>
		/// The total number of retries during the given time range on all tasks in all jobs created under the schedule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numTaskRetries")]
		public long NumTaskRetries { get; set; }
		
		/// <summary>
		/// The total gibibytes read from disk by all tasks in all jobs created under the schedule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="readIOGiB")]
		public double ReadIOGiB { get; set; }
		
		/// <summary>
		/// The total number of disk read operations made by all tasks in all jobs created under the schedule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="readIOps")]
		public long ReadIOps { get; set; }
		
		/// <summary>
		/// The start time of the time range covered by the statistics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// The URL of the statistics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The total user mode CPU time (summed across all cores and all compute nodes) consumed by all tasks in all jobs created under the schedule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userCPUTime")]
		public string UserCPUTime { get; set; }
		
		/// <summary>
		/// The total wait time of all tasks in all jobs created under the schedule. The wait time for a task is defined as the elapsed time between the creation of the task and the start of task execution. (If the task is retried due to failures, the wait time is the time to the most recent task execution.)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waitTime")]
		public string WaitTime { get; set; }
		
		/// <summary>
		/// The total wall clock time of all the tasks in all the jobs created under the schedule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wallClockTime")]
		public string WallClockTime { get; set; }
		
		/// <summary>
		/// The total gibibytes written to disk by all tasks in all jobs created under the schedule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="writeIOGiB")]
		public double WriteIOGiB { get; set; }
		
		/// <summary>
		/// The total number of disk write operations made by all tasks in all jobs created under the schedule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="writeIOps")]
		public long WriteIOps { get; set; }
	}
	
	/// <summary>
	/// Parameters for a CloudJobScheduleOperations.Update request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobScheduleUpdateParameter
	{
		
		/// <summary>
		/// Specifies details of the jobs to be created on a schedule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobSpecification")]
		public JobSpecification JobSpecification { get; set; }
		
		/// <summary>
		/// A list of name-value pairs associated with the job schedule as metadata. If you do not specify this element, it takes the default value of an empty list; in effect, any existing metadata is deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// The schedule according to which jobs will be created
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public Schedule Schedule { get; set; }
	}
	
	/// <summary>
	/// An error encountered by the Batch service when scheduling a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobSchedulingError
	{
		
		/// <summary>
		/// The category of the job scheduling error.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public JobSchedulingErrorCategory Category { get; set; }
		
		/// <summary>
		/// An identifier for the job scheduling error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A list of additional error details related to the scheduling error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public NameValuePair[] Details { get; set; }
		
		/// <summary>
		/// A message describing the job scheduling error, intended to be suitable for display in a user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobSchedulingErrorCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		usererror = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		servererror = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unmapped = 2,
	}
	
	/// <summary>
	/// Specifies details of the jobs to be created on a schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobSpecification
	{
		
		/// <summary>
		/// A list of common environment variable settings. These environment variables are set for all tasks in jobs created under this schedule (including the Job Manager, Job Preparation and Job Release tasks).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonEnvironmentSettings")]
		public EnvironmentSetting[] CommonEnvironmentSettings { get; set; }
		
		/// <summary>
		/// Specifies the execution constraints for jobs created on a schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public JobConstraints Constraints { get; set; }
		
		/// <summary>
		/// The display name for jobs created under this schedule. It need not be unique and can contain any Unicode characters up to a maximum length of 1024.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Specifies details of a Job Manager task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobManagerTask")]
		public JobManagerTask JobManagerTask { get; set; }
		
		/// <summary>
		/// A Job Preparation task to run before any tasks of the job on any given compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobPreparationTask")]
		public JobPreparationTask JobPreparationTask { get; set; }
		
		/// <summary>
		/// A Job Release task to run on job completion on any compute node where the job has run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobReleaseTask")]
		public JobReleaseTask JobReleaseTask { get; set; }
		
		/// <summary>
		/// A list of name-value pairs associated with each job created under this schedule as metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// Specifies how a job should be assigned to a pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolInfo")]
		public PoolInformation PoolInfo { get; set; }
		
		/// <summary>
		/// The priority of jobs created under this schedule. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// The flag that determines if this job will use tasks with dependencies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usesTaskDependencies")]
		public System.Nullable<System.Boolean> UsesTaskDependencies { get; set; }
	}
	
	/// <summary>
	/// Resource usage statistics for a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobStatistics
	{
		
		/// <summary>
		/// The total kernel mode CPU time (summed across all cores and all compute nodes) consumed by all tasks in the job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kernelCPUTime")]
		public string KernelCPUTime { get; set; }
		
		/// <summary>
		/// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		/// <summary>
		/// The total number of tasks in the job that failed during the given time range.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numFailedTasks")]
		public long NumFailedTasks { get; set; }
		
		/// <summary>
		/// The total number of tasks successfully completed in the job during the given time range.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numSucceededTasks")]
		public long NumSucceededTasks { get; set; }
		
		/// <summary>
		/// The total number of retries on all the tasks in the job during the given time range.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numTaskRetries")]
		public long NumTaskRetries { get; set; }
		
		/// <summary>
		/// The total gibibytes read from disk by all tasks in the job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="readIOGiB")]
		public double ReadIOGiB { get; set; }
		
		/// <summary>
		/// The total number of disk read operations made by all tasks in the job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="readIOps")]
		public long ReadIOps { get; set; }
		
		/// <summary>
		/// The start time of the time range covered by the statistics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// The URL of the statistics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The total user mode CPU time (summed across all cores and all compute nodes) consumed by all tasks in the job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userCPUTime")]
		public string UserCPUTime { get; set; }
		
		/// <summary>
		/// The total wait time of all tasks in the job. The wait time for a task is defined as the elapsed time between the creation of the task and the start of task execution. (If the task is retried due to failures, the wait time is the time to the most recent task execution.)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waitTime")]
		public string WaitTime { get; set; }
		
		/// <summary>
		/// The total wall clock time of all tasks in the job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wallClockTime")]
		public string WallClockTime { get; set; }
		
		/// <summary>
		/// The total gibibytes written to disk by all tasks in the job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="writeIOGiB")]
		public double WriteIOGiB { get; set; }
		
		/// <summary>
		/// The total number of disk write operations made by all tasks in the job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="writeIOps")]
		public long WriteIOps { get; set; }
	}
	
	/// <summary>
	/// Parameters for a CloudJobOperations.Terminate request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobTerminateParameter
	{
		
		/// <summary>
		/// The text you want to appear as the job's TerminateReason. The default is 'UserTerminate'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="terminateReason")]
		public string TerminateReason { get; set; }
	}
	
	/// <summary>
	/// Parameters for a CloudJobOperations.Update request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobUpdateParameter
	{
		
		/// <summary>
		/// Specifies the execution constraints for jobs created on a schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public JobConstraints Constraints { get; set; }
		
		/// <summary>
		/// A list of name-value pairs associated with the job as metadata. If omitted, the existing job metadata is left unchanged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// Specifies how a job should be assigned to a pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="poolInfo")]
		public PoolInformation PoolInfo { get; set; }
		
		/// <summary>
		/// The priority of the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, the priority of the job is left unchanged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
	}
	
	/// <summary>
	/// Settings which specify how to run a multi-instance task. Multi-instance tasks are commonly used to support MPI tasks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MultiInstanceSettings
	{
		
		/// <summary>
		/// A list of files that the Batch service will download before running the coordination command line. The difference between common resource files and task resource files is that common resource files are downloaded for all subtasks including the primary, whereas task resource files are downloaded only for the primary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonResourceFiles")]
		public ResourceFile[] CommonResourceFiles { get; set; }
		
		/// <summary>
		/// The command to run on the compute node instances for coordinating among the subtasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coordinationCommandLine")]
		public string CoordinationCommandLine { get; set; }
		
		/// <summary>
		/// The number of compute nodes required by the multi-instance task.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numberOfInstances")]
		public int NumberOfInstances { get; set; }
	}
	
	/// <summary>
	/// Parameters for a ComputeNodeOperations.DisableScheduling request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NodeDisableSchedulingParameter
	{
		
		/// <summary>
		/// What to do with currently running tasks when disable task scheduling on the compute node. The default value is requeue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeDisableSchedulingOption")]
		public System.Nullable<NodeDisableSchedulingParameterNodeDisableSchedulingOption> NodeDisableSchedulingOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum NodeDisableSchedulingParameterNodeDisableSchedulingOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requeue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		taskcompletion = 2,
	}
	
	/// <summary>
	/// Information about a file or directory on a compute node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NodeFile
	{
		
		/// <summary>
		/// Whether the object represents a directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDirectory")]
		public System.Nullable<System.Boolean> IsDirectory { get; set; }
		
		/// <summary>
		/// The file path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The properties of a file on a compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public FileProperties Properties { get; set; }
		
		/// <summary>
		/// The URL of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Response to a FileOperation.ListFromComputeNode or FileOperation.ListFromTask request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NodeFileListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		/// <summary>
		/// The list of files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public NodeFile[] Value { get; set; }
	}
	
	/// <summary>
	/// Parameters for a ComputeNodeOperations.Reboot request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NodeRebootParameter
	{
		
		/// <summary>
		/// When to reboot the compute node and what to do with currently running tasks. The default value is requeue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeRebootOption")]
		public System.Nullable<NodeRebootParameterNodeRebootOption> NodeRebootOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum NodeRebootParameterNodeRebootOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requeue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		taskcompletion = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		retaineddata = 3,
	}
	
	/// <summary>
	/// Parameters for a ComputeNodeOperations.Reimage request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NodeReimageParameter
	{
		
		/// <summary>
		/// When to reimage the compute node and what to do with currently running tasks. The default value is requeue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeReimageOption")]
		public NodeRebootParameterNodeRebootOption NodeReimageOption { get; set; }
	}
	
	/// <summary>
	/// Parameters for a ComputeNodeOperations.Remove request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NodeRemoveParameter
	{
		
		/// <summary>
		/// When compute nodes may be removed from the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeDeallocationOption")]
		public NodeRebootParameterNodeRebootOption NodeDeallocationOption { get; set; }
		
		/// <summary>
		/// A list containing the id of the compute nodes to be removed from the specified pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeList")]
		public string[] NodeList { get; set; }
		
		/// <summary>
		/// The timeout for removal of compute nodes to the pool. The default value is 10 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resizeTimeout")]
		public string ResizeTimeout { get; set; }
	}
	
	/// <summary>
	/// Parameters for a ComputeNodeOperations.UpdateUser request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NodeUpdateUserParameter
	{
		
		/// <summary>
		/// The time at which the account should expire. If omitted, the default is 1 day from the current time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiryTime")]
		public System.Nullable<System.DateTimeOffset> ExpiryTime { get; set; }
		
		/// <summary>
		/// The password of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The SSH public key that can be used for remote login to the compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sshPublicKey")]
		public string SshPublicKey { get; set; }
	}
	
	/// <summary>
	/// A pool in the Azure Batch service to add.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolAddParameter
	{
		
		/// <summary>
		/// The list of application packages to be installed on each compute node in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationPackageReferences")]
		public ApplicationPackageReference[] ApplicationPackageReferences { get; set; }
		
		/// <summary>
		/// A time interval for the desired autoscale evaluation period in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoScaleEvaluationInterval")]
		public string AutoScaleEvaluationInterval { get; set; }
		
		/// <summary>
		/// A formula for the desired number of compute nodes in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoScaleFormula")]
		public string AutoScaleFormula { get; set; }
		
		/// <summary>
		/// The list of certificates to be installed on each compute node in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateReferences")]
		public CertificateReference[] CertificateReferences { get; set; }
		
		/// <summary>
		/// The configuration for nodes in a pool based on the Azure Cloud Services platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudServiceConfiguration")]
		public CloudServiceConfiguration CloudServiceConfiguration { get; set; }
		
		/// <summary>
		/// The display name for the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Whether the pool size should automatically adjust over time. If true, the AutoScaleFormula property must be set. If false, the TargetDedicated property must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutoScale")]
		public System.Nullable<System.Boolean> EnableAutoScale { get; set; }
		
		/// <summary>
		/// Whether the pool permits direct communication between nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableInterNodeCommunication")]
		public System.Nullable<System.Boolean> EnableInterNodeCommunication { get; set; }
		
		/// <summary>
		/// A string that uniquely identifies the pool within the account. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The maximum number of tasks that can run concurrently on a single compute node in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTasksPerNode")]
		public System.Nullable<System.Int32> MaxTasksPerNode { get; set; }
		
		/// <summary>
		/// A list of name-value pairs associated with the pool as metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// The timeout for allocation of compute nodes to the pool. In a Get Pool operation, this is the timeout for the most recent resize operation. The default value is 10 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resizeTimeout")]
		public string ResizeTimeout { get; set; }
		
		/// <summary>
		/// A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTask")]
		public StartTask StartTask { get; set; }
		
		/// <summary>
		/// The desired number of compute nodes in the pool. This property must have the default value if EnableAutoScale is true. It is required if EnableAutoScale is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetDedicated")]
		public System.Nullable<System.Int32> TargetDedicated { get; set; }
		
		/// <summary>
		/// Specifies how tasks should be distributed across compute nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskSchedulingPolicy")]
		public TaskSchedulingPolicy TaskSchedulingPolicy { get; set; }
		
		/// <summary>
		/// The configuration for compute nodes in a pool based on the Azure Virtual Machines infrastructure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachineConfiguration")]
		public VirtualMachineConfiguration VirtualMachineConfiguration { get; set; }
		
		/// <summary>
		/// The size of virtual machines in the pool. All virtual machines in a pool are the same size.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vmSize")]
		public string VmSize { get; set; }
	}
	
	/// <summary>
	/// Parameters for a CloudPoolOperations.EnableAutoScale request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolEnableAutoScaleParameter
	{
		
		/// <summary>
		/// A time interval for the desired autoscale evaluation period in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoScaleEvaluationInterval")]
		public string AutoScaleEvaluationInterval { get; set; }
		
		/// <summary>
		/// The formula for the desired number of compute nodes in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoScaleFormula")]
		public string AutoScaleFormula { get; set; }
	}
	
	/// <summary>
	/// Parameters for a CloudJobOperations.EvaluateAutoScale request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolEvaluateAutoScaleParameter
	{
		
		/// <summary>
		/// A formula for the desired number of compute nodes in the pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="autoScaleFormula")]
		public string AutoScaleFormula { get; set; }
	}
	
	/// <summary>
	/// Specifies how a job should be assigned to a pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolInformation
	{
		
		/// <summary>
		/// Specifies characteristics for a temporary 'auto pool'. The Batch service will create this auto pool, run all the tasks for the job on it, and will delete the pool once the job has completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoPoolSpecification")]
		public AutoPoolSpecification AutoPoolSpecification { get; set; }
		
		/// <summary>
		/// The id of an existing pool. All the tasks of the job will run on the specified pool. You must specify either PoolId or AutoPoolSpecification, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolId")]
		public string PoolId { get; set; }
	}
	
	/// <summary>
	/// Response to an AccountOperation.ListPoolUsageMetrics request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolListPoolUsageMetricsResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		/// <summary>
		/// The pool usage metrics data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PoolUsageMetrics[] Value { get; set; }
	}
	
	/// <summary>
	/// Usage metrics for a pool across an aggregation interval.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolUsageMetrics
	{
		
		/// <summary>
		/// The cross data center network egress in GiB from the pool during this interval.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataEgressGiB")]
		public double DataEgressGiB { get; set; }
		
		/// <summary>
		/// The cross data center network ingress in GiB to the pool during this interval.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataIngressGiB")]
		public double DataIngressGiB { get; set; }
		
		/// <summary>
		/// The end time of the aggregation interval.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// The id of the pool whose metrics are being aggregated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="poolId")]
		public string PoolId { get; set; }
		
		/// <summary>
		/// The start time of the aggregation interval.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// The total core hours used in the pool during this aggregation interval.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCoreHours")]
		public double TotalCoreHours { get; set; }
		
		/// <summary>
		/// The size of virtual machines in the pool. All VMs in a pool are the same size.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vmSize")]
		public string VmSize { get; set; }
	}
	
	/// <summary>
	/// Parameters for a CloudPoolOperations.Patch request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolPatchParameter
	{
		
		/// <summary>
		/// A list of application packages to be installed on each compute node in the pool. If omitted, any existing application package references are left unchanged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationPackageReferences")]
		public ApplicationPackageReference[] ApplicationPackageReferences { get; set; }
		
		/// <summary>
		/// A list of certificates to be installed on each compute node in the pool. If omitted, any existing certificate references are left unchanged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateReferences")]
		public CertificateReference[] CertificateReferences { get; set; }
		
		/// <summary>
		/// A list of name-value pairs associated with the pool as metadata. If omitted, any existing metadata is left unchanged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTask")]
		public StartTask StartTask { get; set; }
	}
	
	/// <summary>
	/// Parameters for a CloudPoolOperations.Resize request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolResizeParameter
	{
		
		/// <summary>
		/// When nodes may be removed from the pool, if the pool size is decreasing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeDeallocationOption")]
		public NodeRebootParameterNodeRebootOption NodeDeallocationOption { get; set; }
		
		/// <summary>
		/// The timeout for allocation of compute nodes to the pool or removal of compute nodes from the pool. The default value is 10 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resizeTimeout")]
		public string ResizeTimeout { get; set; }
		
		/// <summary>
		/// The desired number of compute nodes in the pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetDedicated")]
		public int TargetDedicated { get; set; }
	}
	
	/// <summary>
	/// Specification for creating a new pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolSpecification
	{
		
		/// <summary>
		/// The list of application packages to be installed on each compute node in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationPackageReferences")]
		public ApplicationPackageReference[] ApplicationPackageReferences { get; set; }
		
		/// <summary>
		/// A time interval for the desired AutoScale evaluation period in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoScaleEvaluationInterval")]
		public string AutoScaleEvaluationInterval { get; set; }
		
		/// <summary>
		/// The formula for the desired number of compute nodes in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoScaleFormula")]
		public string AutoScaleFormula { get; set; }
		
		/// <summary>
		/// A list of certificates to be installed on each compute node in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateReferences")]
		public CertificateReference[] CertificateReferences { get; set; }
		
		/// <summary>
		/// The configuration for nodes in a pool based on the Azure Cloud Services platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudServiceConfiguration")]
		public CloudServiceConfiguration CloudServiceConfiguration { get; set; }
		
		/// <summary>
		/// The display name for the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Whether the pool size should automatically adjust over time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutoScale")]
		public System.Nullable<System.Boolean> EnableAutoScale { get; set; }
		
		/// <summary>
		/// Whether the pool permits direct communication between nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableInterNodeCommunication")]
		public System.Nullable<System.Boolean> EnableInterNodeCommunication { get; set; }
		
		/// <summary>
		/// The maximum number of tasks that can run concurrently on a single compute node in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTasksPerNode")]
		public System.Nullable<System.Int32> MaxTasksPerNode { get; set; }
		
		/// <summary>
		/// A list of name-value pairs associated with the pool as metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// The timeout for allocation of compute nodes to the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resizeTimeout")]
		public string ResizeTimeout { get; set; }
		
		/// <summary>
		/// A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTask")]
		public StartTask StartTask { get; set; }
		
		/// <summary>
		/// The desired number of compute nodes in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetDedicated")]
		public System.Nullable<System.Int32> TargetDedicated { get; set; }
		
		/// <summary>
		/// Specifies how tasks should be distributed across compute nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskSchedulingPolicy")]
		public TaskSchedulingPolicy TaskSchedulingPolicy { get; set; }
		
		/// <summary>
		/// The configuration for compute nodes in a pool based on the Azure Virtual Machines infrastructure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachineConfiguration")]
		public VirtualMachineConfiguration VirtualMachineConfiguration { get; set; }
		
		/// <summary>
		/// The size of the virtual machines in the pool. All virtual machines in a pool are the same size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmSize")]
		public string VmSize { get; set; }
	}
	
	/// <summary>
	/// Contains utilization and resource usage statistics for the lifetime of a pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolStatistics
	{
		
		/// <summary>
		/// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		/// <summary>
		/// Statistics related to resource consumption by compute nodes in a pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceStats")]
		public ResourceStatistics ResourceStats { get; set; }
		
		/// <summary>
		/// The start time of the time range covered by the statistics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// The URL for the statistics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Statistics related to pool usage information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usageStats")]
		public UsageStatistics UsageStats { get; set; }
	}
	
	/// <summary>
	/// Parameters for a CloudPoolOperations.UpdateProperties request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolUpdatePropertiesParameter
	{
		
		/// <summary>
		/// A list of application packages to be installed on each compute node in the pool. If you specify an empty collection, any existing application packages references are removed from the pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationPackageReferences")]
		public ApplicationPackageReference[] ApplicationPackageReferences { get; set; }
		
		/// <summary>
		/// A list of certificates to be installed on each compute node in the pool. If you specify an empty collection, any existing certificate references are removed from the pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certificateReferences")]
		public CertificateReference[] CertificateReferences { get; set; }
		
		/// <summary>
		/// A list of name-value pairs associated with the pool as metadata. If you specify an empty collection, any existing metadata is removed from the pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTask")]
		public StartTask StartTask { get; set; }
	}
	
	/// <summary>
	/// Parameters for a CloudPoolOperations.UpgradeOS request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolUpgradeOSParameter
	{
		
		/// <summary>
		/// The Azure Guest OS version to be installed on the virtual machines in the pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetOSVersion")]
		public string TargetOSVersion { get; set; }
	}
	
	/// <summary>
	/// Information about the most recent job to run under the job schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecentJob
	{
		
		/// <summary>
		/// The id of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The URL of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// An error that occurred when resizing a pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResizeError
	{
		
		/// <summary>
		/// An identifier for the pool resize error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A message describing the pool resize error, intended to be suitable for display in a user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// A list of additional error details related to the pool resize error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public NameValuePair[] Values { get; set; }
	}
	
	/// <summary>
	/// Statistics related to resource consumption by compute nodes in a pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceStatistics
	{
		
		/// <summary>
		/// The average CPU usage across all nodes in the pool (percentage per node).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="avgCPUPercentage")]
		public double AvgCPUPercentage { get; set; }
		
		/// <summary>
		/// The average used disk space in GiB across all nodes in the pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="avgDiskGiB")]
		public double AvgDiskGiB { get; set; }
		
		/// <summary>
		/// The average memory usage in GiB across all nodes in the pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="avgMemoryGiB")]
		public double AvgMemoryGiB { get; set; }
		
		/// <summary>
		/// The total amount of data in GiB of disk reads across all nodes in the pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskReadGiB")]
		public double DiskReadGiB { get; set; }
		
		/// <summary>
		/// The total number of disk read operations across all nodes in the pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskReadIOps")]
		public long DiskReadIOps { get; set; }
		
		/// <summary>
		/// The total amount of data in GiB of disk writes across all nodes in the pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskWriteGiB")]
		public double DiskWriteGiB { get; set; }
		
		/// <summary>
		/// The total number of disk write operations across all nodes in the pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskWriteIOps")]
		public long DiskWriteIOps { get; set; }
		
		/// <summary>
		/// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		/// <summary>
		/// The total amount of data in GiB of network reads across all nodes in the pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkReadGiB")]
		public double NetworkReadGiB { get; set; }
		
		/// <summary>
		/// The total amount of data in GiB of network writes across all nodes in the pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkWriteGiB")]
		public double NetworkWriteGiB { get; set; }
		
		/// <summary>
		/// The peak used disk space in GiB across all nodes in the pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="peakDiskGiB")]
		public double PeakDiskGiB { get; set; }
		
		/// <summary>
		/// The peak memory usage in GiB across all nodes in the pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="peakMemoryGiB")]
		public double PeakMemoryGiB { get; set; }
		
		/// <summary>
		/// The start time of the time range covered by the statistics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
	}
	
	/// <summary>
	/// The schedule according to which jobs will be created
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Schedule
	{
		
		/// <summary>
		/// A time after which no job will be created under this job schedule. The schedule will move to the completed state as soon as this deadline is past and there is no active job under this job schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doNotRunAfter")]
		public System.Nullable<System.DateTimeOffset> DoNotRunAfter { get; set; }
		
		/// <summary>
		/// The earliest time at which any job may be created under this job schedule. If you do not specify a doNotRunUntil time, the schedule becomes ready to create jobs immediately.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doNotRunUntil")]
		public System.Nullable<System.DateTimeOffset> DoNotRunUntil { get; set; }
		
		/// <summary>
		/// The time interval between the start times of two successive jobs under the job schedule. A job schedule can have at most one active job under it at any given time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurrenceInterval")]
		public string RecurrenceInterval { get; set; }
		
		/// <summary>
		/// The time interval, starting from the time at which the schedule indicates a job should be created, within which a job must be created. If a job is not created within the startWindow interval, then the 'opportunity' is lost; no job will be created until the next recurrence of the schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startWindow")]
		public string StartWindow { get; set; }
	}
	
	/// <summary>
	/// A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StartTask
	{
		
		/// <summary>
		/// The command line of the start task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandLine")]
		public string CommandLine { get; set; }
		
		/// <summary>
		/// A list of environment variable settings for the start task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentSettings")]
		public EnvironmentSetting[] EnvironmentSettings { get; set; }
		
		/// <summary>
		/// The maximum number of times the task may be retried.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTaskRetryCount")]
		public System.Nullable<System.Int32> MaxTaskRetryCount { get; set; }
		
		/// <summary>
		/// A list of files that the Batch service will download to the compute node before running the command line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceFiles")]
		public ResourceFile[] ResourceFiles { get; set; }
		
		/// <summary>
		/// Whether to run the start task in elevated mode. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runElevated")]
		public System.Nullable<System.Boolean> RunElevated { get; set; }
		
		/// <summary>
		/// Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitForSuccess")]
		public System.Nullable<System.Boolean> WaitForSuccess { get; set; }
	}
	
	/// <summary>
	/// Information about a start task running on a compute node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StartTaskInformation
	{
		
		/// <summary>
		/// The time at which the start task stopped running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The exit code of the start task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCode")]
		public System.Nullable<System.Int32> ExitCode { get; set; }
		
		/// <summary>
		/// The most recent time at which a retry of the task started running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRetryTime")]
		public System.Nullable<System.DateTimeOffset> LastRetryTime { get; set; }
		
		/// <summary>
		/// The number of times the task has been retried by the Batch service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="retryCount")]
		public int RetryCount { get; set; }
		
		/// <summary>
		/// Information about an error when scheduling a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedulingError")]
		public TaskSchedulingError SchedulingError { get; set; }
		
		/// <summary>
		/// The time at which the start task started running.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// The state of the start task on the compute node.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public JobPreparationTaskExecutionInformationState State { get; set; }
	}
	
	/// <summary>
	/// A collection of Azure Batch tasks to add.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskAddCollectionParameter
	{
		
		/// <summary>
		/// The collection of tasks to add.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public TaskAddParameter[] Value { get; set; }
	}
	
	/// <summary>
	/// An Azure Batch task to add.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskAddParameter
	{
		
		/// <summary>
		/// A locality hint that can be used by the Batch service to select a compute node on which to start a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affinityInfo")]
		public AffinityInformation AffinityInfo { get; set; }
		
		/// <summary>
		/// The command line of the task. For multi-instance tasks, the command line is executed on the primary subtask after all the subtasks have finished executing the coordination command line.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commandLine")]
		public string CommandLine { get; set; }
		
		/// <summary>
		/// Constraints to apply to the Job Manager task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public TaskConstraints Constraints { get; set; }
		
		/// <summary>
		/// Specifies any dependencies of a task. Any task that is explicitly specified or within a dependency range must complete before the dependant task will be scheduled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependsOn")]
		public TaskDependencies DependsOn { get; set; }
		
		/// <summary>
		/// A display name for the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// A list of environment variable settings for the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentSettings")]
		public EnvironmentSetting[] EnvironmentSettings { get; set; }
		
		/// <summary>
		/// A string that uniquely identifies the task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Settings which specify how to run a multi-instance task. Multi-instance tasks are commonly used to support MPI tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiInstanceSettings")]
		public MultiInstanceSettings MultiInstanceSettings { get; set; }
		
		/// <summary>
		/// A list of files that the Batch service will download to the compute node before running the command line. For multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary subtask is executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceFiles")]
		public ResourceFile[] ResourceFiles { get; set; }
		
		/// <summary>
		/// Whether to run the task in elevated mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runElevated")]
		public System.Nullable<System.Boolean> RunElevated { get; set; }
	}
	
	/// <summary>
	/// Response to a TaskOperations.AddCollection request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskAddCollectionResult
	{
		
		/// <summary>
		/// The results of the add task collection operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public TaskAddResult[] Value { get; set; }
	}
	
	/// <summary>
	/// Result for a single task added as part of an add task collection operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskAddResult
	{
		
		/// <summary>
		/// The ETag of the task, if the task was successfully added.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eTag")]
		public string ETag { get; set; }
		
		/// <summary>
		/// An error response received from the Azure Batch service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public BatchError Error { get; set; }
		
		/// <summary>
		/// The last modified time of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// The URL of the task, if the task was successfully added.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The status of the add task request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public TaskAddResultStatus Status { get; set; }
		
		/// <summary>
		/// The id of the task for which this is the result.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TaskAddResultStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		clienterror = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		servererror = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unmapped = 3,
	}
	
	/// <summary>
	/// Constraints to apply to the Job Manager task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskConstraints
	{
		
		/// <summary>
		/// The maximum number of times the task may be retried. The Batch service retries a task if its exit code is nonzero.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTaskRetryCount")]
		public System.Nullable<System.Int32> MaxTaskRetryCount { get; set; }
		
		/// <summary>
		/// The maximum elapsed time that the task may run, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxWallClockTime")]
		public string MaxWallClockTime { get; set; }
		
		/// <summary>
		/// The minimum time to retain the working directory for the task on the compute node where it ran, from the time it completes execution. After this time, the Batch service may delete the working directory and all its contents. The default is infinite.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionTime")]
		public string RetentionTime { get; set; }
	}
	
	/// <summary>
	/// Specifies any dependencies of a task. Any task that is explicitly specified or within a dependency range must complete before the dependant task will be scheduled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskDependencies
	{
		
		/// <summary>
		/// The list of task ranges that must complete before this task can be scheduled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskIdRanges")]
		public TaskIdRange[] TaskIdRanges { get; set; }
		
		/// <summary>
		/// The list of task ids that must complete before this task can be scheduled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskIds")]
		public string[] TaskIds { get; set; }
	}
	
	/// <summary>
	/// A range of task ids that a task can depend on. All tasks with ids in the range must complete successfully before the dependent task can be scheduled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskIdRange
	{
		
		/// <summary>
		/// The last task id in the range.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="end")]
		public int End { get; set; }
		
		/// <summary>
		/// The first task id in the range.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start")]
		public int Start { get; set; }
	}
	
	/// <summary>
	/// Information about the execution of a task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskExecutionInformation
	{
		
		/// <summary>
		/// The time at which the task completed. This property is set only if the task is in the Completed state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The exit code of the task. This property is set only if the task is in completed state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCode")]
		public System.Nullable<System.Int32> ExitCode { get; set; }
		
		/// <summary>
		/// The most recent time at which the task has been requeued by the Batch service as the result of a user request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRequeueTime")]
		public System.Nullable<System.DateTimeOffset> LastRequeueTime { get; set; }
		
		/// <summary>
		/// The most recent time at which a retry of the task started running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRetryTime")]
		public System.Nullable<System.DateTimeOffset> LastRetryTime { get; set; }
		
		/// <summary>
		/// The number of times the task has been requeued by the Batch service as the result of a user request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requeueCount")]
		public int RequeueCount { get; set; }
		
		/// <summary>
		/// The number of times the task has been retried by the Batch service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="retryCount")]
		public int RetryCount { get; set; }
		
		/// <summary>
		/// Information about an error when scheduling a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedulingError")]
		public TaskSchedulingError SchedulingError { get; set; }
		
		/// <summary>
		/// The time at which the task started running. If the task has been restarted or retried, this is the most recent time at which the task started running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	/// <summary>
	/// Information about an error when scheduling a task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskSchedulingError
	{
		
		/// <summary>
		/// The category of the task scheduling error.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public JobSchedulingErrorCategory Category { get; set; }
		
		/// <summary>
		/// An identifier for the task scheduling error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The list of additional error details related to the scheduling error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public NameValuePair[] Details { get; set; }
		
		/// <summary>
		/// A message describing the task scheduling error, intended to be suitable for display in a user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Specifies how tasks should be distributed across compute nodes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskSchedulingPolicy
	{
		
		/// <summary>
		/// How tasks should be distributed across compute nodes
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeFillType")]
		public TaskSchedulingPolicyNodeFillType NodeFillType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TaskSchedulingPolicyNodeFillType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		spread = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pack = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unmapped = 2,
	}
	
	/// <summary>
	/// Resource usage statistics for a task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskStatistics
	{
		
		/// <summary>
		/// The total kernel mode CPU time (summed across all cores and all compute nodes) consumed by the task.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kernelCPUTime")]
		public string KernelCPUTime { get; set; }
		
		/// <summary>
		/// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		/// <summary>
		/// The total gibibytes read from disk by the task.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="readIOGiB")]
		public double ReadIOGiB { get; set; }
		
		/// <summary>
		/// The total number of disk read operations made by the task.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="readIOps")]
		public long ReadIOps { get; set; }
		
		/// <summary>
		/// The start time of the time range covered by the statistics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// The URL of the statistics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The total user mode CPU time (summed across all cores and all compute nodes) consumed by the task.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userCPUTime")]
		public string UserCPUTime { get; set; }
		
		/// <summary>
		/// The total wait time of the task. The wait time for a task is defined as the elapsed time between the creation of the task and the start of task execution. (If the task is retried due to failures, the wait time is the time to the most recent task execution.)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waitTime")]
		public string WaitTime { get; set; }
		
		/// <summary>
		/// The total wall clock time of the task.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wallClockTime")]
		public string WallClockTime { get; set; }
		
		/// <summary>
		/// The total gibibytes written to disk by the task.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="writeIOGiB")]
		public double WriteIOGiB { get; set; }
		
		/// <summary>
		/// The total number of disk write operations made by the task.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="writeIOps")]
		public long WriteIOps { get; set; }
	}
	
	/// <summary>
	/// Parameters for a CloudTaskOperations.Update request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskUpdateParameter
	{
		
		/// <summary>
		/// Constraints to apply to the Job Manager task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public TaskConstraints Constraints { get; set; }
	}
	
	/// <summary>
	/// Statistics related to pool usage information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UsageStatistics
	{
		
		/// <summary>
		/// The aggregated wall-clock time of the dedicated compute node cores being part of the pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dedicatedCoreTime")]
		public string DedicatedCoreTime { get; set; }
		
		/// <summary>
		/// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		/// <summary>
		/// The start time of the time range covered by the statistics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
	}
	
	/// <summary>
	/// The configuration for compute nodes in a pool based on the Azure Virtual Machines infrastructure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualMachineConfiguration
	{
		
		/// <summary>
		/// A reference to an Azure Virtual Machines Marketplace image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageReference")]
		public ImageReference ImageReference { get; set; }
		
		/// <summary>
		/// The SKU of Batch Node Agent to be provisioned on the compute node. The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeAgentSKUId")]
		public string NodeAgentSKUId { get; set; }
		
		/// <summary>
		/// Windows operating system settings to apply to the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowsConfiguration")]
		public WindowsConfiguration WindowsConfiguration { get; set; }
	}
	
	/// <summary>
	/// Windows operating system settings to apply to the virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WindowsConfiguration
	{
		
		/// <summary>
		/// Whether automatic updates are enabled on the virtual machine. If omitted, the default value is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutomaticUpdates")]
		public System.Nullable<System.Boolean> EnableAutomaticUpdates { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the applications available in the specified account.
		/// Application_List applications
		/// </summary>
		/// <param name="maxresults">The maximum number of items to return in the response.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<ApplicationListResult> Application_ListAsync(int maxresults, int timeout, string api_version)
		{
			var requestUri = "applications?maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplicationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified application.
		/// Application_Get applications/{applicationId}
		/// </summary>
		/// <param name="applicationId">The id of the application.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<ApplicationSummary> Application_GetAsync(string applicationId, int timeout, string api_version)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplicationSummary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the certificates that have been added to the specified account.
		/// Certificate_List certificates
		/// </summary>
		/// <param name="filter">An OData $filter clause.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="maxresults">The maximum number of items to return in the response.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>Gets the list of certificates.</returns>
		public async Task<CertificateListResult> Certificate_ListAsync(string filter, string select, int maxresults, int timeout, string api_version)
		{
			var requestUri = "certificates?$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CertificateListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified certificate.
		/// Certificate_Get certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})
		/// </summary>
		/// <param name="thumbprintAlgorithm">The algorithm used to derive the thumbprint parameter. This must be sha1.</param>
		/// <param name="thumbprint">The thumbprint of the certificate to get.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<Certificate> Certificate_GetAsync(string thumbprintAlgorithm, string thumbprint, string select, int timeout, string api_version)
		{
			var requestUri = "certificates(thumbprintAlgorithm="+ (thumbprintAlgorithm==null? "" : System.Uri.EscapeDataString(thumbprintAlgorithm))+",thumbprint="+ (thumbprint==null? "" : System.Uri.EscapeDataString(thumbprint))+")&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Certificate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a certificate from the specified account.
		/// Certificate_Delete certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})
		/// </summary>
		/// <param name="thumbprintAlgorithm">The algorithm used to derive the thumbprint parameter. This must be sha1.</param>
		/// <param name="thumbprint">The thumbprint of the certificate to be deleted.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task Certificate_DeleteAsync(string thumbprintAlgorithm, string thumbprint, int timeout, string api_version)
		{
			var requestUri = "certificates(thumbprintAlgorithm="+ (thumbprintAlgorithm==null? "" : System.Uri.EscapeDataString(thumbprintAlgorithm))+",thumbprint="+ (thumbprint==null? "" : System.Uri.EscapeDataString(thumbprint))+")&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a failed deletion of a certificate from the specified account.
		/// Certificate_CancelDeletion certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})/canceldelete
		/// </summary>
		/// <param name="thumbprintAlgorithm">The algorithm used to derive the thumbprint parameter. This must be sha1.</param>
		/// <param name="thumbprint">The thumbprint of the certificate being deleted.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task Certificate_CancelDeletionAsync(string thumbprintAlgorithm, string thumbprint, int timeout, string api_version)
		{
			var requestUri = "certificates(thumbprintAlgorithm="+ (thumbprintAlgorithm==null? "" : System.Uri.EscapeDataString(thumbprintAlgorithm))+",thumbprint="+ (thumbprint==null? "" : System.Uri.EscapeDataString(thumbprint))+")/canceldelete&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the jobs in the specified account.
		/// Job_List jobs
		/// </summary>
		/// <param name="filter">An OData $filter clause.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="expand">An OData $expand clause.</param>
		/// <param name="maxresults">The maximum number of items to return in the response.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<CloudJobListResult> Job_ListAsync(string filter, string select, string expand, int maxresults, int timeout, string api_version)
		{
			var requestUri = "jobs?$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudJobListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified job.
		/// Job_Get jobs/{jobId}
		/// </summary>
		/// <param name="jobId">The id of the job.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="expand">An OData $expand clause.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<CloudJob> Job_GetAsync(string jobId, string select, string expand, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudJob>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a job.
		/// Job_Delete jobs/{jobId}
		/// </summary>
		/// <param name="jobId">The id of the job to delete.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task Job_DeleteAsync(string jobId, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables the specified job, allowing new tasks to run.
		/// Job_Enable jobs/{jobId}/enable
		/// </summary>
		/// <param name="jobId">The id of the job to enable.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task Job_EnableAsync(string jobId, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/enable&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run.
		/// Job_ListPreparationAndReleaseTaskStatus jobs/{jobId}/jobpreparationandreleasetaskstatus
		/// </summary>
		/// <param name="jobId">The id of the job.</param>
		/// <param name="filter">An OData $filter clause.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="maxresults">The maximum number of items to return in the response.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<CloudJobListPreparationAndReleaseTaskStatusResult> Job_ListPreparationAndReleaseTaskStatusAsync(string jobId, string filter, string select, int maxresults, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/jobpreparationandreleasetaskstatus&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudJobListPreparationAndReleaseTaskStatusResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the tasks that are associated with the specified job.
		/// Task_List jobs/{jobId}/tasks
		/// </summary>
		/// <param name="jobId">The id of the job.</param>
		/// <param name="filter">An OData $filter clause.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="expand">An OData $expand clause.</param>
		/// <param name="maxresults">The maximum number of items to return in the response.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<CloudTaskListResult> Task_ListAsync(string jobId, string filter, string select, string expand, int maxresults, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/tasks&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudTaskListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified task.
		/// Task_Get jobs/{jobId}/tasks/{taskId}
		/// </summary>
		/// <param name="jobId">The id of the job that contains the task.</param>
		/// <param name="taskId">The id of the task to get information about.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="expand">An OData $expand clause.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<CloudTask> Task_GetAsync(string jobId, string taskId, string select, string expand, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudTask>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a task from the specified job.
		/// Task_Delete jobs/{jobId}/tasks/{taskId}
		/// </summary>
		/// <param name="jobId">The id of the job from which to delete the task.</param>
		/// <param name="taskId">The id of the task to delete.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task Task_DeleteAsync(string jobId, string taskId, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the files in a task's directory on its compute node.
		/// File_ListFromTask jobs/{jobId}/tasks/{taskId}/files
		/// </summary>
		/// <param name="jobId">The id of the job that contains the task.</param>
		/// <param name="taskId">The id of the task whose files you want to list.</param>
		/// <param name="filter">An OData $filter clause.</param>
		/// <param name="recursive">Whether to list children of a directory.</param>
		/// <param name="maxresults">The maximum number of items to return in the response.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<NodeFileListResult> File_ListFromTaskAsync(string jobId, string taskId, string filter, bool recursive, int maxresults, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"/files&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&recursive="+recursive+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NodeFileListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the content of the specified task file.
		/// File_GetFromTask jobs/{jobId}/tasks/{taskId}/files/{fileName}
		/// </summary>
		/// <param name="jobId">The id of the job that contains the task.</param>
		/// <param name="taskId">The id of the task whose file you want to retrieve.</param>
		/// <param name="fileName">The path to the task file that you want to get the content of.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<string> File_GetFromTaskAsync(string jobId, string taskId, string fileName, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"/files/"+ (fileName==null? "" : System.Uri.EscapeDataString(fileName))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified task file from the compute node where the task ran.
		/// File_DeleteFromTask jobs/{jobId}/tasks/{taskId}/files/{fileName}
		/// </summary>
		/// <param name="jobId">The id of the job that contains the task.</param>
		/// <param name="taskId">The id of the task whose file you want to delete.</param>
		/// <param name="fileName">The path to the task file that you want to delete.</param>
		/// <param name="recursive">Whether to delete children of a directory. If the fileName parameter represents a directory instead of a file, you can set Recursive to true to delete the directory and all of the files and subdirectories in it. If Recursive is false then the directory must be empty or deletion will fail.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task File_DeleteFromTaskAsync(string jobId, string taskId, string fileName, bool recursive, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"/files/"+ (fileName==null? "" : System.Uri.EscapeDataString(fileName))+"&recursive="+recursive+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the subtasks that are associated with the specified multi-instance task.
		/// Task_ListSubtasks jobs/{jobId}/tasks/{taskId}/subtasksinfo
		/// </summary>
		/// <param name="jobId">The id of the job.</param>
		/// <param name="taskId">The id of the task.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<CloudTaskListSubtasksResult> Task_ListSubtasksAsync(string jobId, string taskId, string select, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"/subtasksinfo&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudTaskListSubtasksResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Terminates the specified task.
		/// Task_Terminate jobs/{jobId}/tasks/{taskId}/terminate
		/// </summary>
		/// <param name="jobId">The id of the job containing the task.</param>
		/// <param name="taskId">The id of the task to terminate.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task Task_TerminateAsync(string jobId, string taskId, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"/terminate&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the job schedules in the specified account.
		/// JobSchedule_List jobschedules
		/// </summary>
		/// <param name="filter">An OData $filter clause.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="expand">An OData $expand clause.</param>
		/// <param name="maxresults">The maximum number of items to return in the response.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<CloudJobScheduleListResult> JobSchedule_ListAsync(string filter, string select, string expand, int maxresults, int timeout, string api_version)
		{
			var requestUri = "jobschedules?$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudJobScheduleListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified job schedule.
		/// JobSchedule_Get jobschedules/{jobScheduleId}
		/// </summary>
		/// <param name="jobScheduleId">The id of the job schedule to get.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="expand">An OData $expand clause.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<CloudJobSchedule> JobSchedule_GetAsync(string jobScheduleId, string select, string expand, int timeout, string api_version)
		{
			var requestUri = "jobschedules/"+ (jobScheduleId==null? "" : System.Uri.EscapeDataString(jobScheduleId))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudJobSchedule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a job schedule from the specified account.
		/// JobSchedule_Delete jobschedules/{jobScheduleId}
		/// </summary>
		/// <param name="jobScheduleId">The id of the job schedule to delete.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task JobSchedule_DeleteAsync(string jobScheduleId, int timeout, string api_version)
		{
			var requestUri = "jobschedules/"+ (jobScheduleId==null? "" : System.Uri.EscapeDataString(jobScheduleId))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables a job schedule.
		/// JobSchedule_Disable jobschedules/{jobScheduleId}/disable
		/// </summary>
		/// <param name="jobScheduleId">The id of the job schedule to disable.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task JobSchedule_DisableAsync(string jobScheduleId, int timeout, string api_version)
		{
			var requestUri = "jobschedules/"+ (jobScheduleId==null? "" : System.Uri.EscapeDataString(jobScheduleId))+"/disable&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables a job schedule.
		/// JobSchedule_Enable jobschedules/{jobScheduleId}/enable
		/// </summary>
		/// <param name="jobScheduleId">The id of the job schedule to enable.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task JobSchedule_EnableAsync(string jobScheduleId, int timeout, string api_version)
		{
			var requestUri = "jobschedules/"+ (jobScheduleId==null? "" : System.Uri.EscapeDataString(jobScheduleId))+"/enable&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the jobs that have been created under the specified job schedule.
		/// Job_ListFromJobSchedule jobschedules/{jobScheduleId}/jobs
		/// </summary>
		/// <param name="jobScheduleId">The id of the job schedule from which you want to get a list of jobs.</param>
		/// <param name="filter">An OData $filter clause.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="expand">An OData $expand clause.</param>
		/// <param name="maxresults">The maximum number of items to return in the response.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<CloudJobListResult> Job_ListFromJobScheduleAsync(string jobScheduleId, string filter, string select, string expand, int maxresults, int timeout, string api_version)
		{
			var requestUri = "jobschedules/"+ (jobScheduleId==null? "" : System.Uri.EscapeDataString(jobScheduleId))+"/jobs&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudJobListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Terminates a job schedule.
		/// JobSchedule_Terminate jobschedules/{jobScheduleId}/terminate
		/// </summary>
		/// <param name="jobScheduleId">The id of the job schedule to terminates.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task JobSchedule_TerminateAsync(string jobScheduleId, int timeout, string api_version)
		{
			var requestUri = "jobschedules/"+ (jobScheduleId==null? "" : System.Uri.EscapeDataString(jobScheduleId))+"/terminate&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets lifetime summary statistics for all of the jobs in the specified account. Statistics are aggregated across all jobs that have ever existed in the account, from account creation to the last update time of the statistics.
		/// Job_GetAllJobsLifetimeStatistics lifetimejobstats
		/// </summary>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<JobStatistics> Job_GetAllJobsLifetimeStatisticsAsync(int timeout, string api_version)
		{
			var requestUri = "lifetimejobstats?timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobStatistics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets lifetime summary statistics for all of the pools in the specified account. Statistics are aggregated across all pools that have ever existed in the account, from account creation to the last update time of the statistics.
		/// Pool_GetAllPoolsLifetimeStatistics lifetimepoolstats
		/// </summary>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<PoolStatistics> Pool_GetAllPoolsLifetimeStatisticsAsync(int timeout, string api_version)
		{
			var requestUri = "lifetimepoolstats?timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PoolStatistics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all node agent SKUs supported by the Azure Batch service.
		/// Account_ListNodeAgentSkus nodeagentskus
		/// </summary>
		/// <param name="filter">An OData $filter clause.</param>
		/// <param name="maxresults">The maximum number of items to return in the response.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<AccountListNodeAgentSkusResult> Account_ListNodeAgentSkusAsync(string filter, int maxresults, int timeout, string api_version)
		{
			var requestUri = "nodeagentskus?$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountListNodeAgentSkusResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the pools in the specified account.
		/// Pool_List pools
		/// </summary>
		/// <param name="filter">An OData $filter clause.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="expand">An OData $expand clause.</param>
		/// <param name="maxresults">The maximum number of items to return in the response.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<CloudPoolListResult> Pool_ListAsync(string filter, string select, string expand, int maxresults, int timeout, string api_version)
		{
			var requestUri = "pools?$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudPoolListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified pool.
		/// Pool_Get pools/{poolId}
		/// </summary>
		/// <param name="poolId">The id of the pool to get.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="expand">An OData $expand clause.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<CloudPool> Pool_GetAsync(string poolId, string select, string expand, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudPool>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a pool from the specified account.
		/// Pool_Delete pools/{poolId}
		/// </summary>
		/// <param name="poolId">The id of the pool to delete.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task Pool_DeleteAsync(string poolId, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables automatic scaling for a pool.
		/// Pool_DisableAutoScale pools/{poolId}/disableautoscale
		/// </summary>
		/// <param name="poolId">The id of the pool on which to disable automatic scaling.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task Pool_DisableAutoScaleAsync(string poolId, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/disableautoscale&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the compute nodes in the specified pool.
		/// ComputeNode_List pools/{poolId}/nodes
		/// </summary>
		/// <param name="poolId">The id of the pool from which you want to list nodes.</param>
		/// <param name="filter">An OData $filter clause.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="maxresults">The maximum number of items to return in the response.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<ComputeNodeListResult> ComputeNode_ListAsync(string poolId, string filter, string select, int maxresults, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/nodes&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ComputeNodeListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified compute node.
		/// ComputeNode_Get pools/{poolId}/nodes/{nodeId}
		/// </summary>
		/// <param name="poolId">The id of the pool that contains the compute node.</param>
		/// <param name="nodeId">The id of the compute node that you want to get information about.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<ComputeNode> ComputeNode_GetAsync(string poolId, string nodeId, string select, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/nodes/"+ (nodeId==null? "" : System.Uri.EscapeDataString(nodeId))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ComputeNode>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable task scheduling of the specified compute node.
		/// ComputeNode_EnableScheduling pools/{poolId}/nodes/{nodeId}/enablescheduling
		/// </summary>
		/// <param name="poolId">The id of the pool that contains the compute node.</param>
		/// <param name="nodeId">The id of the compute node that you want to enable task scheduling.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task ComputeNode_EnableSchedulingAsync(string poolId, string nodeId, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/nodes/"+ (nodeId==null? "" : System.Uri.EscapeDataString(nodeId))+"/enablescheduling&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the files in task directories on the specified compute node.
		/// File_ListFromComputeNode pools/{poolId}/nodes/{nodeId}/files
		/// </summary>
		/// <param name="poolId">The id of the pool that contains the compute node.</param>
		/// <param name="nodeId">The id of the compute node whose files you want to list.</param>
		/// <param name="filter">An OData $filter clause.</param>
		/// <param name="recursive">Whether to list children of a directory.</param>
		/// <param name="maxresults">The maximum number of items to return in the response.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<NodeFileListResult> File_ListFromComputeNodeAsync(string poolId, string nodeId, string filter, bool recursive, int maxresults, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/nodes/"+ (nodeId==null? "" : System.Uri.EscapeDataString(nodeId))+"/files&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&recursive="+recursive+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NodeFileListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the content of the specified task file.
		/// File_GetFromComputeNode pools/{poolId}/nodes/{nodeId}/files/{fileName}
		/// </summary>
		/// <param name="poolId">The id of the pool that contains the compute node.</param>
		/// <param name="nodeId">The id of the compute node that contains the file.</param>
		/// <param name="fileName">The path to the task file that you want to get the content of.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<string> File_GetFromComputeNodeAsync(string poolId, string nodeId, string fileName, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/nodes/"+ (nodeId==null? "" : System.Uri.EscapeDataString(nodeId))+"/files/"+ (fileName==null? "" : System.Uri.EscapeDataString(fileName))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified task file from the compute node.
		/// File_DeleteFromComputeNode pools/{poolId}/nodes/{nodeId}/files/{fileName}
		/// </summary>
		/// <param name="poolId">The id of the pool that contains the compute node.</param>
		/// <param name="nodeId">The id of the compute node from which you want to delete the file.</param>
		/// <param name="fileName">The path to the file that you want to delete.</param>
		/// <param name="recursive">Whether to delete children of a directory. If the fileName parameter represents a directory instead of a file, you can set Recursive to true to delete the directory and all of the files and subdirectories in it. If Recursive is false then the directory must be empty or deletion will fail.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task File_DeleteFromComputeNodeAsync(string poolId, string nodeId, string fileName, bool recursive, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/nodes/"+ (nodeId==null? "" : System.Uri.EscapeDataString(nodeId))+"/files/"+ (fileName==null? "" : System.Uri.EscapeDataString(fileName))+"&recursive="+recursive+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Remote Desktop Protocol file for the specified compute node.
		/// ComputeNode_GetRemoteDesktop pools/{poolId}/nodes/{nodeId}/rdp
		/// </summary>
		/// <param name="poolId">The id of the pool that contains the compute node.</param>
		/// <param name="nodeId">The id of the compute node for which you want to get the Remote Desktop Protocol file.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<string> ComputeNode_GetRemoteDesktopAsync(string poolId, string nodeId, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/nodes/"+ (nodeId==null? "" : System.Uri.EscapeDataString(nodeId))+"/rdp&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the settings required for remote login to a compute node.
		/// ComputeNode_GetRemoteLoginSettings pools/{poolId}/nodes/{nodeId}/remoteloginsettings
		/// </summary>
		/// <param name="poolId">The id of the pool that contains the compute node.</param>
		/// <param name="nodeId">The id of the compute node for which to obtain the remote login settings.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<ComputeNodeGetRemoteLoginSettingsResult> ComputeNode_GetRemoteLoginSettingsAsync(string poolId, string nodeId, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/nodes/"+ (nodeId==null? "" : System.Uri.EscapeDataString(nodeId))+"/remoteloginsettings&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ComputeNodeGetRemoteLoginSettingsResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a user account from the specified compute node.
		/// ComputeNode_DeleteUser pools/{poolId}/nodes/{nodeId}/users/{userName}
		/// </summary>
		/// <param name="poolId">The id of the pool that contains the compute node.</param>
		/// <param name="nodeId">The id of the machine on which you want to delete a user account.</param>
		/// <param name="userName">The name of the user account to delete.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task ComputeNode_DeleteUserAsync(string poolId, string nodeId, string userName, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/nodes/"+ (nodeId==null? "" : System.Uri.EscapeDataString(nodeId))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops an ongoing resize operation on the pool. This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state.
		/// Pool_StopResize pools/{poolId}/stopresize
		/// </summary>
		/// <param name="poolId">The id of the pool whose resizing you want to stop.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task Pool_StopResizeAsync(string poolId, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/stopresize&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account.
		/// Pool_ListPoolUsageMetrics poolusagemetrics
		/// </summary>
		/// <param name="starttime">The earliest time from which to include metrics. This must be at least two and a half hours before the current time.</param>
		/// <param name="endtime">The latest time from which to include metrics. This must be at least two hours before the current time.</param>
		/// <param name="filter">An OData $filter clause.</param>
		/// <param name="maxresults">The maximum number of items to return in the response.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task<PoolListPoolUsageMetricsResult> Pool_ListPoolUsageMetricsAsync(System.DateTimeOffset starttime, System.DateTimeOffset endtime, string filter, int maxresults, int timeout, string api_version)
		{
			var requestUri = "poolusagemetrics?starttime=" + starttime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endtime=" + endtime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PoolListPoolUsageMetricsResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
