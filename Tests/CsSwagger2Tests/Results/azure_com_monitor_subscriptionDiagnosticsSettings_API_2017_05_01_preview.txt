//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Describes the format of Error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The subscription diagnostic settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubscriptionDiagnosticSettings
	{
		
		/// <summary>
		/// The resource Id for the event hub authorization rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventHubAuthorizationRuleId")]
		public string EventHubAuthorizationRuleId { get; set; }
		
		/// <summary>
		/// The name of the event hub. If none is specified, the default event hub will be selected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventHubName")]
		public string EventHubName { get; set; }
		
		/// <summary>
		/// The list of logs settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logs")]
		public SubscriptionLogSettings[] Logs { get; set; }
		
		/// <summary>
		/// The service bus rule Id of the diagnostic setting. This is here to maintain backwards compatibility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceBusRuleId")]
		public string ServiceBusRuleId { get; set; }
		
		/// <summary>
		/// The resource ID of the storage account to which you would like to send Diagnostic Logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountId")]
		public string StorageAccountId { get; set; }
		
		/// <summary>
		/// The full ARM resource ID of the Log Analytics workspace to which you would like to send Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		public string WorkspaceId { get; set; }
	}
	
	/// <summary>
	/// Part of Subscription diagnostic setting. Specifies the settings for a particular log.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubscriptionLogSettings
	{
		
		/// <summary>
		/// Name of a Subscription Diagnostic Log category for a resource type this setting is applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// a value indicating whether this log is enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
	}
	
	/// <summary>
	/// The subscription diagnostic setting resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubscriptionDiagnosticSettingsResource
	{
		
		/// <summary>
		/// The subscription diagnostic settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SubscriptionDiagnosticSettings Properties { get; set; }
	}
	
	/// <summary>
	/// Represents a collection of subscription diagnostic settings resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubscriptionDiagnosticSettingsResourceCollection
	{
		
		/// <summary>
		/// The collection of subscription diagnostic settings resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SubscriptionDiagnosticSettingsResource[] Value { get; set; }
	}
	
	/// <summary>
	/// A proxy only azure resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubscriptionProxyOnlyResource
	{
		
		/// <summary>
		/// Azure resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Location of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Azure resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Azure resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets the active subscription diagnostic settings list for the specified subscriptionId.
		/// SubscriptionDiagnosticSettings_List subscriptions/{subscriptionId}/providers/microsoft.insights/diagnosticSettings
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successful request to get more information about subscription diagnostic setting</returns>
		public async Task<SubscriptionDiagnosticSettingsResourceCollection> SubscriptionDiagnosticSettings_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/microsoft.insights/diagnosticSettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubscriptionDiagnosticSettingsResourceCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the active subscription diagnostic settings for the specified resource.
		/// SubscriptionDiagnosticSettings_Get subscriptions/{subscriptionId}/providers/microsoft.insights/diagnosticSettings/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="name">The name of the diagnostic setting.</param>
		/// <returns>Successful request to get more information about diagnostic setting.</returns>
		public async Task<SubscriptionDiagnosticSettingsResource> SubscriptionDiagnosticSettings_GetAsync(string subscriptionId, string api_version, string name)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/microsoft.insights/diagnosticSettings/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubscriptionDiagnosticSettingsResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates subscription diagnostic settings for the specified resource.
		/// SubscriptionDiagnosticSettings_CreateOrUpdate subscriptions/{subscriptionId}/providers/microsoft.insights/diagnosticSettings/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="name">The name of the diagnostic setting.</param>
		/// <param name="requestBody">Parameters supplied to the operation.</param>
		/// <returns>Successful request to create a subscription diagnostic setting</returns>
		public async Task<SubscriptionDiagnosticSettingsResource> SubscriptionDiagnosticSettings_CreateOrUpdateAsync(string subscriptionId, string api_version, string name, SubscriptionDiagnosticSettingsResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/microsoft.insights/diagnosticSettings/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubscriptionDiagnosticSettingsResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes existing subscription diagnostic settings for the specified resource.
		/// SubscriptionDiagnosticSettings_Delete subscriptions/{subscriptionId}/providers/microsoft.insights/diagnosticSettings/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="name">The name of the diagnostic setting.</param>
		/// <returns>Successful request to remove a subscription diagnostic setting</returns>
		public async Task SubscriptionDiagnosticSettings_DeleteAsync(string subscriptionId, string api_version, string name)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/microsoft.insights/diagnosticSettings/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
