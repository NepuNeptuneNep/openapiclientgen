//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Return all layers
		/// GET_layers___format_ layers
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET_layers___format_Async()
		{
			var requestUri = "layers";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create new layer
		/// POST_layers___format_ layers
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task POST_layers___format_Async()
		{
			var requestUri = "layers";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Return single layer
		/// GET_layers__layer___format_ layers/{layer}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET_layers__layer___format_Async(string layer)
		{
			var requestUri = "layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a layer
		/// DELETE_layers__layer___format_ layers/{layer}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task DELETE_layers__layer___format_Async(string layer)
		{
			var requestUri = "layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Edit a layer
		/// PATCH_layers__layer___format_ layers/{layer}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task PATCH_layers__layer___format_Async(string layer)
		{
			var requestUri = "layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Return JSON-LD context of single layer
		/// GET_layers__layer_context___format_ layers/{layer}/context
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET_layers__layer_context___format_Async(string layer)
		{
			var requestUri = "layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer))+"/context";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Overwrite JSON-LD context of single layer
		/// PUT_layers__layer_context___format_ layers/{layer}/context
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task PUT_layers__layer_context___format_Async(string layer)
		{
			var requestUri = "layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer))+"/context";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Return all fields of single layer
		/// GET_layers__layer_fields___format_ layers/{layer}/fields
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET_layers__layer_fields___format_Async(string layer)
		{
			var requestUri = "layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer))+"/fields";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create new field for single layer
		/// POST_layers__layer_fields___format_ layers/{layer}/fields
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task POST_layers__layer_fields___format_Async(string layer)
		{
			var requestUri = "layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer))+"/fields";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Return single field of single layer
		/// GET_layers__layer_fields__field___format_ layers/{layer}/fields/{field}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET_layers__layer_fields__field___format_Async(string layer, string field)
		{
			var requestUri = "layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer))+"/fields/"+ (field==null? "" : System.Uri.EscapeDataString(field));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Overwrite single field on single layer
		/// PUT_layers__layer_fields__field___format_ layers/{layer}/fields/{field}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task PUT_layers__layer_fields__field___format_Async(string layer, string field)
		{
			var requestUri = "layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer))+"/fields/"+ (field==null? "" : System.Uri.EscapeDataString(field));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a single field on single layer
		/// DELETE_layers__layer_fields__field___format_ layers/{layer}/fields/{field}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task DELETE_layers__layer_fields__field___format_Async(string layer, string field)
		{
			var requestUri = "layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer))+"/fields/"+ (field==null? "" : System.Uri.EscapeDataString(field));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Edit single field on single layer
		/// PATCH_layers__layer_fields__field___format_ layers/{layer}/fields/{field}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task PATCH_layers__layer_fields__field___format_Async(string layer, string field)
		{
			var requestUri = "layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer))+"/fields/"+ (field==null? "" : System.Uri.EscapeDataString(field));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Return all objects with data on single layer
		/// GET_layers__layer_objects___format_ layers/{layer}/objects
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET_layers__layer_objects___format_Async(string layer)
		{
			var requestUri = "layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer))+"/objects";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create one or more objects with data on single layer, or add data to existing objects (or a combination thereof)
		/// POST_layers__layer_objects___format_ layers/{layer}/objects
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task POST_layers__layer_objects___format_Async(string layer)
		{
			var requestUri = "layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer))+"/objects";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete all objects from a single layer
		/// DELETE_layers__layer_objects___format_ layers/{layer}/objects
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task DELETE_layers__layer_objects___format_Async(string layer)
		{
			var requestUri = "layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer))+"/objects";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Edit one or more objects and data on single layer
		/// PATCH_layers__layer_objects___format_ layers/{layer}/objects
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task PATCH_layers__layer_objects___format_Async(string layer)
		{
			var requestUri = "layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer))+"/objects";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Return metadata of single layer about single object, e.g. the date the data was added/modified, etc.
		/// GET_layers__layer_objects__cdk_id___format_ layers/{layer}/objects/{cdk_id}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET_layers__layer_objects__cdk_id___format_Async(string layer, string cdk_id)
		{
			var requestUri = "layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer))+"/objects/"+ (cdk_id==null? "" : System.Uri.EscapeDataString(cdk_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Return all owners associated with single layer
		/// GET_layers__layer_owners___format_ layers/{layer}/owners
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET_layers__layer_owners___format_Async(string layer)
		{
			var requestUri = "layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer))+"/owners";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Return single context entity
		/// GET_ngsi10_contextEntities__entity___format_ ngsi10/contextEntities/{entity}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET_ngsi10_contextEntities__entity___format_Async(string entity)
		{
			var requestUri = "ngsi10/contextEntities/"+ (entity==null? "" : System.Uri.EscapeDataString(entity));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update attributes for single context entity
		/// PUT_ngsi10_contextEntities__entity_attributes___format_ ngsi10/contextEntities/{entity}/attributes
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task PUT_ngsi10_contextEntities__entity_attributes___format_Async(string entity)
		{
			var requestUri = "ngsi10/contextEntities/"+ (entity==null? "" : System.Uri.EscapeDataString(entity))+"/attributes";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Return single context entity attribute
		/// GET_ngsi10_contextEntities__entity_attributes__attribute___format_ ngsi10/contextEntities/{entity}/attributes/{attribute}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET_ngsi10_contextEntities__entity_attributes__attribute___format_Async(string entity, string attribute)
		{
			var requestUri = "ngsi10/contextEntities/"+ (entity==null? "" : System.Uri.EscapeDataString(entity))+"/attributes/"+ (attribute==null? "" : System.Uri.EscapeDataString(attribute));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Return objects of particular type
		/// GET_ngsi10_contextEntityTypes__cetype___format_ ngsi10/contextEntityTypes/{cetype}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET_ngsi10_contextEntityTypes__cetype___format_Async(string cetype)
		{
			var requestUri = "ngsi10/contextEntityTypes/"+ (cetype==null? "" : System.Uri.EscapeDataString(cetype));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Return objects of particular type
		/// GET_ngsi10_contextEntityTypes__cetype_attributes__attribute___format_ ngsi10/contextEntityTypes/{cetype}/attributes/{attribute}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET_ngsi10_contextEntityTypes__cetype_attributes__attribute___format_Async(string cetype, string attribute)
		{
			var requestUri = "ngsi10/contextEntityTypes/"+ (cetype==null? "" : System.Uri.EscapeDataString(cetype))+"/attributes/"+ (attribute==null? "" : System.Uri.EscapeDataString(attribute));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Query context broker for contextElements
		/// POST_ngsi10_queryContext___format_ ngsi10/queryContext
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task POST_ngsi10_queryContext___format_Async()
		{
			var requestUri = "ngsi10/queryContext";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new context subscription
		/// POST_ngsi10_subscribeContext___format_ ngsi10/subscribeContext
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task POST_ngsi10_subscribeContext___format_Async()
		{
			var requestUri = "ngsi10/subscribeContext";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a context subscription
		/// POST_ngsi10_unsubscribeContext___format_ ngsi10/unsubscribeContext
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task POST_ngsi10_unsubscribeContext___format_Async()
		{
			var requestUri = "ngsi10/unsubscribeContext";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add or update NGSI contextElements
		/// POST_ngsi10_updateContext___format_ ngsi10/updateContext
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task POST_ngsi10_updateContext___format_Async()
		{
			var requestUri = "ngsi10/updateContext";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update/edit a context subscription
		/// POST_ngsi10_updateContextSubscription___format_ ngsi10/updateContextSubscription
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task POST_ngsi10_updateContextSubscription___format_Async()
		{
			var requestUri = "ngsi10/updateContextSubscription";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Return all objects
		/// GET_objects___format_ objects
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET_objects___format_Async()
		{
			var requestUri = "objects";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a single object
		/// GET_objects__cdk_id___format_ objects/{cdk_id}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET_objects__cdk_id___format_Async(string cdk_id)
		{
			var requestUri = "objects/"+ (cdk_id==null? "" : System.Uri.EscapeDataString(cdk_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a single object
		/// DELETE_objects__cdk_id___format_ objects/{cdk_id}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task DELETE_objects__cdk_id___format_Async(string cdk_id)
		{
			var requestUri = "objects/"+ (cdk_id==null? "" : System.Uri.EscapeDataString(cdk_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Edit a single object
		/// PATCH_objects__cdk_id___format_ objects/{cdk_id}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task PATCH_objects__cdk_id___format_Async(string cdk_id)
		{
			var requestUri = "objects/"+ (cdk_id==null? "" : System.Uri.EscapeDataString(cdk_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all layers that contain data of single object
		/// GET_objects__cdk_id_layers___format_ objects/{cdk_id}/layers
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET_objects__cdk_id_layers___format_Async(string cdk_id)
		{
			var requestUri = "objects/"+ (cdk_id==null? "" : System.Uri.EscapeDataString(cdk_id))+"/layers";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Return all data on single layer of single object
		/// GET_objects__cdk_id_layers__layer___format_ objects/{cdk_id}/layers/{layer}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET_objects__cdk_id_layers__layer___format_Async(string cdk_id, string layer)
		{
			var requestUri = "objects/"+ (cdk_id==null? "" : System.Uri.EscapeDataString(cdk_id))+"/layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Overwrite data on layer to single object
		/// PUT_objects__cdk_id_layers__layer___format_ objects/{cdk_id}/layers/{layer}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task PUT_objects__cdk_id_layers__layer___format_Async(string cdk_id, string layer)
		{
			var requestUri = "objects/"+ (cdk_id==null? "" : System.Uri.EscapeDataString(cdk_id))+"/layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add data on layer to single object
		/// POST_objects__cdk_id_layers__layer___format_ objects/{cdk_id}/layers/{layer}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task POST_objects__cdk_id_layers__layer___format_Async(string cdk_id, string layer)
		{
			var requestUri = "objects/"+ (cdk_id==null? "" : System.Uri.EscapeDataString(cdk_id))+"/layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Remove data on layer from single object
		/// DELETE_objects__cdk_id_layers__layer___format_ objects/{cdk_id}/layers/{layer}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task DELETE_objects__cdk_id_layers__layer___format_Async(string cdk_id, string layer)
		{
			var requestUri = "objects/"+ (cdk_id==null? "" : System.Uri.EscapeDataString(cdk_id))+"/layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update data on layer to single object
		/// PATCH_objects__cdk_id_layers__layer___format_ objects/{cdk_id}/layers/{layer}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task PATCH_objects__cdk_id_layers__layer___format_Async(string cdk_id, string layer)
		{
			var requestUri = "objects/"+ (cdk_id==null? "" : System.Uri.EscapeDataString(cdk_id))+"/layers/"+ (layer==null? "" : System.Uri.EscapeDataString(layer));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Return all owners
		/// GET_owners___format_ owners
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET_owners___format_Async()
		{
			var requestUri = "owners";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create new owner
		/// POST_owners___format_ owners
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task POST_owners___format_Async()
		{
			var requestUri = "owners";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a single owner
		/// GET_owners__owner___format_ owners/{owner}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET_owners__owner___format_Async(string owner)
		{
			var requestUri = "owners/"+ (owner==null? "" : System.Uri.EscapeDataString(owner));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete owner - and all layers and data belonging to this owner
		/// DELETE_owners__owner___format_ owners/{owner}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task DELETE_owners__owner___format_Async(string owner)
		{
			var requestUri = "owners/"+ (owner==null? "" : System.Uri.EscapeDataString(owner));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Edit an owner
		/// PATCH_owners__owner___format_ owners/{owner}
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task PATCH_owners__owner___format_Async(string owner)
		{
			var requestUri = "owners/"+ (owner==null? "" : System.Uri.EscapeDataString(owner));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Return all layers belonging to a single owner
		/// GET_owners__owner_layers___format_ owners/{owner}/layers
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET_owners__owner_layers___format_Async(string owner)
		{
			var requestUri = "owners/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"/layers";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Return a session key
		/// GET_session___format_ session
		/// </summary>
		/// <param name="name">Login name.</param>
		/// <param name="password">Login password.</param>
		/// <returns>No response was specified</returns>
		public async Task GET_session___format_Async(string name, string password)
		{
			var requestUri = "session?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&password=" + (password==null? "" : System.Uri.EscapeDataString(password));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Close session
		/// DELETE_session___format_ session
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task DELETE_session___format_Async()
		{
			var requestUri = "session";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
