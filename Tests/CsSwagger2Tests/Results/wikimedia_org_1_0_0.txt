//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Absolute_bytes_difference
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Absolute_bytes_differenceItems[] Absolute_bytes_differenceItems { get; set; }
	}
	
	public class Absolute_bytes_differenceItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="editor-type")]
		public string Editor_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page-type")]
		public string Page_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Absolute_bytes_differenceItemsResults[] Absolute_bytes_differenceItemsResults { get; set; }
	}
	
	public class Absolute_bytes_differenceItemsResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="abs_bytes_diff")]
		public System.Nullable<System.Int64> Abs_bytes_diff { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Absolute_bytes_difference_per_editor
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Absolute_bytes_difference_per_editorItems[] Absolute_bytes_difference_per_editorItems { get; set; }
	}
	
	public class Absolute_bytes_difference_per_editorItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page-type")]
		public string Page_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Absolute_bytes_difference_per_editorItemsResults[] Absolute_bytes_difference_per_editorItemsResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user-text")]
		public string User_text { get; set; }
	}
	
	public class Absolute_bytes_difference_per_editorItemsResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="abs_bytes_diff")]
		public System.Nullable<System.Int64> Abs_bytes_diff { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Absolute_bytes_difference_per_page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Absolute_bytes_difference_per_pageItems[] Absolute_bytes_difference_per_pageItems { get; set; }
	}
	
	public class Absolute_bytes_difference_per_pageItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="editor-type")]
		public string Editor_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page-title")]
		public string Page_title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Absolute_bytes_difference_per_pageItemsResults[] Absolute_bytes_difference_per_pageItemsResults { get; set; }
	}
	
	public class Absolute_bytes_difference_per_pageItemsResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="abs_bytes_diff")]
		public System.Nullable<System.Int64> Abs_bytes_diff { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Availability
	{
		
		/// <summary>
		/// domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="in_the_news")]
		public string[] In_the_news { get; set; }
		
		/// <summary>
		/// domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="most_read")]
		public string[] Most_read { get; set; }
		
		/// <summary>
		/// domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="on_this_day")]
		public string[] On_this_day { get; set; }
		
		/// <summary>
		/// domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="picture_of_the_day")]
		public string[] Picture_of_the_day { get; set; }
		
		/// <summary>
		/// domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="todays_featured_article")]
		public string[] Todays_featured_article { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class By_country
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public By_countryItems[] By_countryItems { get; set; }
	}
	
	public class By_countryItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="access")]
		public string Access { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countries")]
		public By_countryItemsCountries[] By_countryItemsCountries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="month")]
		public string Month { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="year")]
		public string Year { get; set; }
	}
	
	public class By_countryItemsCountries
	{
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="views")]
		public System.Nullable<System.Int64> Views { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Cx_dict
	{
		
		/// <summary>
		/// the original word to look up
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// the translations found
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="translations")]
		public Cx_dictTranslations[] Cx_dictTranslations { get; set; }
	}
	
	public class Cx_dictTranslations
	{
		
		/// <summary>
		/// extra information about the phrase
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="info")]
		public string Info { get; set; }
		
		/// <summary>
		/// the translated phrase
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phrase")]
		public string Phrase { get; set; }
		
		/// <summary>
		/// the source dictionary used for the translation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public string Sources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Cx_languagepairs
	{
		
		/// <summary>
		/// the list of available source languages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string[] Source { get; set; }
		
		/// <summary>
		/// the list of available destination languages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string[] Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Cx_list_pairs_for_tool
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Cx_list_tools
	{
		
		/// <summary>
		/// the list of tools available for the given language pair
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tools")]
		public string[] Tools { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Cx_mt
	{
		
		/// <summary>
		/// the translated content
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Edited_pages
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Edited_pagesItems[] Edited_pagesItems { get; set; }
	}
	
	public class Edited_pagesItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="activity-level")]
		public string Activity_level { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editor-type")]
		public string Editor_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page-type")]
		public string Page_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Edited_pagesItemsResults[] Edited_pagesItemsResults { get; set; }
	}
	
	public class Edited_pagesItemsResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="edited_pages")]
		public System.Nullable<System.Int32> Edited_pages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Editors
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public EditorsItems[] EditorsItems { get; set; }
	}
	
	public class EditorsItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="activity-level")]
		public string Activity_level { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editor-type")]
		public string Editor_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page-type")]
		public string Page_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public EditorsItemsResults[] EditorsItemsResults { get; set; }
	}
	
	public class EditorsItemsResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="editors")]
		public System.Nullable<System.Int32> Editors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Edits
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public EditsItems[] EditsItems { get; set; }
	}
	
	public class EditsItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="editor-type")]
		public string Editor_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page-type")]
		public string Page_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public EditsItemsResults[] EditsItemsResults { get; set; }
	}
	
	public class EditsItemsResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="edits")]
		public System.Nullable<System.Int64> Edits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Edits_per_editor
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Edits_per_editorItems[] Edits_per_editorItems { get; set; }
	}
	
	public class Edits_per_editorItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page-type")]
		public string Page_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Edits_per_editorItemsResults[] Edits_per_editorItemsResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user-text")]
		public string User_text { get; set; }
	}
	
	public class Edits_per_editorItemsResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="edits")]
		public System.Nullable<System.Int64> Edits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Edits_per_page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Edits_per_pageItems[] Edits_per_pageItems { get; set; }
	}
	
	public class Edits_per_pageItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="editor-type")]
		public string Editor_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page-title")]
		public string Page_title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Edits_per_pageItemsResults[] Edits_per_pageItemsResults { get; set; }
	}
	
	public class Edits_per_pageItemsResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="edits")]
		public System.Nullable<System.Int64> Edits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	/// <summary>
	/// The result format for listings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Listing
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public string[] Items { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Net_bytes_difference
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Net_bytes_differenceItems[] Net_bytes_differenceItems { get; set; }
	}
	
	public class Net_bytes_differenceItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="editor-type")]
		public string Editor_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page-type")]
		public string Page_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Net_bytes_differenceItemsResults[] Net_bytes_differenceItemsResults { get; set; }
	}
	
	public class Net_bytes_differenceItemsResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="net_bytes_diff")]
		public System.Nullable<System.Int64> Net_bytes_diff { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Net_bytes_difference_per_editor
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Net_bytes_difference_per_editorItems[] Net_bytes_difference_per_editorItems { get; set; }
	}
	
	public class Net_bytes_difference_per_editorItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page-type")]
		public string Page_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Net_bytes_difference_per_editorItemsResults[] Net_bytes_difference_per_editorItemsResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user-text")]
		public string User_text { get; set; }
	}
	
	public class Net_bytes_difference_per_editorItemsResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="net_bytes_diff")]
		public System.Nullable<System.Int64> Net_bytes_diff { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Net_bytes_difference_per_page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Net_bytes_difference_per_pageItems[] Net_bytes_difference_per_pageItems { get; set; }
	}
	
	public class Net_bytes_difference_per_pageItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="editor-type")]
		public string Editor_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page-title")]
		public string Page_title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Net_bytes_difference_per_pageItemsResults[] Net_bytes_difference_per_pageItemsResults { get; set; }
	}
	
	public class Net_bytes_difference_per_pageItemsResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="net_bytes_diff")]
		public System.Nullable<System.Int64> Net_bytes_diff { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class New_pages
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public New_pagesItems[] New_pagesItems { get; set; }
	}
	
	public class New_pagesItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="editor-type")]
		public string Editor_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page-type")]
		public string Page_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public New_pagesItemsResults[] New_pagesItemsResults { get; set; }
	}
	
	public class New_pagesItemsResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="new_pages")]
		public System.Nullable<System.Int32> New_pages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class New_registered_users
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public New_registered_usersItems[] New_registered_usersItems { get; set; }
	}
	
	public class New_registered_usersItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public New_registered_usersItemsResults[] New_registered_usersItemsResults { get; set; }
	}
	
	public class New_registered_usersItemsResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="new_registered_users")]
		public System.Nullable<System.Int32> New_registered_users { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Originalimage
	{
		
		/// <summary>
		/// Original image height
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="height")]
		public int Height { get; set; }
		
		/// <summary>
		/// Original image URI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Original image width
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="width")]
		public int Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Pagecounts_project
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Pagecounts_projectItems[] Pagecounts_projectItems { get; set; }
	}
	
	public class Pagecounts_projectItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="access-site")]
		public string Access_site { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Pageview_article
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Pageview_articleItems[] Pageview_articleItems { get; set; }
	}
	
	public class Pageview_articleItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="access")]
		public string Access { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="agent")]
		public string Agent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="article")]
		public string Article { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="views")]
		public System.Nullable<System.Int64> Views { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Pageview_project
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Pageview_projectItems[] Pageview_projectItems { get; set; }
	}
	
	public class Pageview_projectItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="access")]
		public string Access { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="agent")]
		public string Agent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="views")]
		public System.Nullable<System.Int64> Views { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Pageview_tops
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Pageview_topsItems[] Pageview_topsItems { get; set; }
	}
	
	public class Pageview_topsItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="access")]
		public string Access { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="articles")]
		public Pageview_topsItemsArticles[] Pageview_topsItemsArticles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="day")]
		public string Day { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="month")]
		public string Month { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="year")]
		public string Year { get; set; }
	}
	
	public class Pageview_topsItemsArticles
	{
		
		[System.Runtime.Serialization.DataMember(Name="article")]
		public string Article { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="views")]
		public System.Nullable<System.Int64> Views { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Problem
	{
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Summary
	{
		
		/// <summary>
		/// The coordinates of the item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coordinates")]
		public SummaryCoordinates Coordinates { get; set; }
		
		/// <summary>
		/// Wikidata description for the page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The page language direction code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dir")]
		public string Dir { get; set; }
		
		/// <summary>
		/// The page title how it should be shown to the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displaytitle")]
		public string Displaytitle { get; set; }
		
		/// <summary>
		/// First several sentences of an article in plain text
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="extract")]
		public string Extract { get; set; }
		
		/// <summary>
		/// First several sentences of an article in simple HTML format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extract_html")]
		public string Extract_html { get; set; }
		
		/// <summary>
		/// The page language code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lang")]
		public string Lang { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originalimage")]
		public Originalimage Originalimage { get; set; }
		
		/// <summary>
		/// The page ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageid")]
		public System.Nullable<System.Int32> Pageid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbnail")]
		public Thumbnail Thumbnail { get; set; }
		
		/// <summary>
		/// The time when the page was last editted in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// The page title
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class SummaryCoordinates
	{
		
		/// <summary>
		/// The latitude
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public double Lat { get; set; }
		
		/// <summary>
		/// The longitude
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public double Lon { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Thumbnail
	{
		
		/// <summary>
		/// Thumnail height
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="height")]
		public int Height { get; set; }
		
		/// <summary>
		/// Thumbnail image URI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Thumbnail width
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="width")]
		public int Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Top_edited_pages_by_abs_bytes_diff
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Top_edited_pages_by_abs_bytes_diffItems[] Top_edited_pages_by_abs_bytes_diffItems { get; set; }
	}
	
	public class Top_edited_pages_by_abs_bytes_diffItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="editor-type")]
		public string Editor_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page-type")]
		public string Page_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Top_edited_pages_by_abs_bytes_diffItemsResults[] Top_edited_pages_by_abs_bytes_diffItemsResults { get; set; }
	}
	
	public class Top_edited_pages_by_abs_bytes_diffItemsResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="top")]
		public Top_edited_pages_by_abs_bytes_diffItemsResultsTop[] Top_edited_pages_by_abs_bytes_diffItemsResultsTop { get; set; }
	}
	
	public class Top_edited_pages_by_abs_bytes_diffItemsResultsTop
	{
		
		[System.Runtime.Serialization.DataMember(Name="abs_bytes_diff")]
		public System.Nullable<System.Int64> Abs_bytes_diff { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_title")]
		public string Page_title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public System.Nullable<System.Int32> Rank { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Top_edited_pages_by_edits
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Top_edited_pages_by_editsItems[] Top_edited_pages_by_editsItems { get; set; }
	}
	
	public class Top_edited_pages_by_editsItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="editor-type")]
		public string Editor_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page-type")]
		public string Page_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Top_edited_pages_by_editsItemsResults[] Top_edited_pages_by_editsItemsResults { get; set; }
	}
	
	public class Top_edited_pages_by_editsItemsResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="top")]
		public Top_edited_pages_by_editsItemsResultsTop[] Top_edited_pages_by_editsItemsResultsTop { get; set; }
	}
	
	public class Top_edited_pages_by_editsItemsResultsTop
	{
		
		[System.Runtime.Serialization.DataMember(Name="edits")]
		public System.Nullable<System.Int64> Edits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_title")]
		public string Page_title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public System.Nullable<System.Int32> Rank { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Top_edited_pages_by_net_bytes_diff
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Top_edited_pages_by_net_bytes_diffItems[] Top_edited_pages_by_net_bytes_diffItems { get; set; }
	}
	
	public class Top_edited_pages_by_net_bytes_diffItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="editor-type")]
		public string Editor_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page-type")]
		public string Page_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Top_edited_pages_by_net_bytes_diffItemsResults[] Top_edited_pages_by_net_bytes_diffItemsResults { get; set; }
	}
	
	public class Top_edited_pages_by_net_bytes_diffItemsResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="top")]
		public Top_edited_pages_by_net_bytes_diffItemsResultsTop[] Top_edited_pages_by_net_bytes_diffItemsResultsTop { get; set; }
	}
	
	public class Top_edited_pages_by_net_bytes_diffItemsResultsTop
	{
		
		[System.Runtime.Serialization.DataMember(Name="net_bytes_diff")]
		public System.Nullable<System.Int64> Net_bytes_diff { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_title")]
		public string Page_title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public System.Nullable<System.Int32> Rank { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Top_editors_by_abs_bytes_diff
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Top_editors_by_abs_bytes_diffItems[] Top_editors_by_abs_bytes_diffItems { get; set; }
	}
	
	public class Top_editors_by_abs_bytes_diffItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="editor-type")]
		public string Editor_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page-type")]
		public string Page_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Top_editors_by_abs_bytes_diffItemsResults[] Top_editors_by_abs_bytes_diffItemsResults { get; set; }
	}
	
	public class Top_editors_by_abs_bytes_diffItemsResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="top")]
		public Top_editors_by_abs_bytes_diffItemsResultsTop[] Top_editors_by_abs_bytes_diffItemsResultsTop { get; set; }
	}
	
	public class Top_editors_by_abs_bytes_diffItemsResultsTop
	{
		
		[System.Runtime.Serialization.DataMember(Name="abs_bytes_diff")]
		public System.Nullable<System.Int64> Abs_bytes_diff { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_text")]
		public string User_text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Top_editors_by_edits
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Top_editors_by_editsItems[] Top_editors_by_editsItems { get; set; }
	}
	
	public class Top_editors_by_editsItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="editor-type")]
		public string Editor_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page-type")]
		public string Page_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Top_editors_by_editsItemsResults[] Top_editors_by_editsItemsResults { get; set; }
	}
	
	public class Top_editors_by_editsItemsResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="top")]
		public Top_editors_by_editsItemsResultsTop[] Top_editors_by_editsItemsResultsTop { get; set; }
	}
	
	public class Top_editors_by_editsItemsResultsTop
	{
		
		[System.Runtime.Serialization.DataMember(Name="edits")]
		public System.Nullable<System.Int64> Edits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_text")]
		public string User_text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Top_editors_by_net_bytes_diff
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Top_editors_by_net_bytes_diffItems[] Top_editors_by_net_bytes_diffItems { get; set; }
	}
	
	public class Top_editors_by_net_bytes_diffItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="editor-type")]
		public string Editor_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page-type")]
		public string Page_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Top_editors_by_net_bytes_diffItemsResults[] Top_editors_by_net_bytes_diffItemsResults { get; set; }
	}
	
	public class Top_editors_by_net_bytes_diffItemsResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="top")]
		public Top_editors_by_net_bytes_diffItemsResultsTop[] Top_editors_by_net_bytes_diffItemsResultsTop { get; set; }
	}
	
	public class Top_editors_by_net_bytes_diffItemsResultsTop
	{
		
		[System.Runtime.Serialization.DataMember(Name="net_bytes_diff")]
		public System.Nullable<System.Int64> Net_bytes_diff { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_text")]
		public string User_text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Unique_devices
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Unique_devicesItems[] Unique_devicesItems { get; set; }
	}
	
	public class Unique_devicesItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="access-site")]
		public string Access_site { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="devices")]
		public System.Nullable<System.Int64> Devices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public string Granularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets availability of featured feed content for the apps by wiki domain.
		/// Gets availability of featured feed content for the apps by wiki domain.
		/// 
		/// Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
		/// 
		/// FeedAvailabilityGet feed/availability
		/// </summary>
		/// <returns>JSON containing lists of wiki domains for which feed content is available.</returns>
		public async Task FeedAvailabilityGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "feed/availability";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a previously-stored formula
		/// Returns the previously-stored formula via `/media/math/check/{type}` for
		/// the given hash.
		/// 
		/// Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).
		/// 
		/// MediaMathFormula_hashGet media/math/formula/{hash}
		/// </summary>
		/// <param name="hash">The hash string of the previous POST data</param>
		/// <returns>Information about the checked formula</returns>
		public async Task MediaMathFormula_hashGetAsync(string hash, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "media/math/formula/"+ (hash==null? "" : System.Uri.EscapeDataString(hash));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get rendered formula in the given format.
		/// Given a request hash, renders a TeX formula into its mathematic
		/// representation in the given format. When a request is issued to the
		/// `/media/math/check/{format}` POST endpoint, the response contains the
		/// `x-resource-location` header denoting the hash ID of the POST data. Once
		/// obtained, this endpoint has to be used to obtain the actual render.
		/// 
		/// Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).
		/// 
		/// MediaMathRender_format_hashGet media/math/render/{format}/{hash}
		/// </summary>
		/// <param name="format">The output format; can be svg or mml</param>
		/// <param name="hash">The hash string of the previous POST data</param>
		/// <returns>The rendered formula</returns>
		public async Task MediaMathRender_format_hashGetAsync(MediaMathRender_format_hashGetFormat format, string hash, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "media/math/render/"+format+"/"+ (hash==null? "" : System.Uri.EscapeDataString(hash));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the sum of absolute value of text bytes difference between current edit and
		/// previous one.
		/// 
		/// Given a Mediawiki project and a date range, returns a timeseries of absolute bytes
		/// difference sums. You can filter by editors-type (all-editor-types, anonymous, group-bot,
		/// name-bot, user) and page-type (all-page-types, content, non-content). You can choose
		/// between daily and monthly granularity as well.
		/// 
		/// - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
		/// - Rate limit: 25 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsBytes_differenceAbsoluteAggregate_project_editor_type_page_type_granularity_start_endGet metrics/bytes-difference/absolute/aggregate/{project}/{editor_type}/{page_type}/{granularity}/{start}/{end}
		/// </summary>
		/// <param name="project">The name of any Wikimedia project formatted like {language code}.{project name},
		///for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
		///off. For projects like commons without language codes, use commons.wikimedia. For
		///projects like www.mediawiki.org, you can use that full string, or just use mediawiki
		///or mediawiki.org. If you're interested in the aggregation of all projects, use
		///all-projects.
		///</param>
		/// <param name="editor_type">If you want to filter by editor-type, use one of anonymous, group-bot (registered
		///accounts belonging to the bot group), name-bot (registered accounts not belonging to
		///the bot group but having bot-like names) or user (registered account not in bot group
		///nor having bot-like name). If you are interested in edits regardless of their
		///editor-type, use all-editor-types.
		///</param>
		/// <param name="page_type">If you want to filter by page-type, use one of content (edits on pages in content
		///namespaces) or non-content (edits on pages in non-content namespaces). If you are
		///interested in edits regardless of their page-type, use all-page-types.
		///</param>
		/// <param name="granularity">Time unit for the response data. As of today, supported values are daily and monthly
		///</param>
		/// <param name="start">The date of the first day to include, in YYYYMMDD format</param>
		/// <param name="end">The date of the last day to include, in YYYYMMDD format</param>
		/// <returns>The list of values</returns>
		public async Task<Absolute_bytes_difference> MetricsBytes_differenceAbsoluteAggregate_project_editor_type_page_type_granularity_start_endGetAsync(string project, MetricsBytes_differenceAbsoluteAggregate_project_editor_type_page_type_granularity_start_endGetEditor_type editor_type, MetricsBytes_differenceAbsoluteAggregate_project_editor_type_page_type_granularity_start_endGetPage_type page_type, MetricsBytes_differenceAbsoluteAggregate_project_editor_type_page_type_granularity_start_endGetGranularity granularity, string start, string end, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/bytes-difference/absolute/aggregate/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/{editor_type}/{page_type}/"+granularity+"/"+ (start==null? "" : System.Uri.EscapeDataString(start))+"/"+ (end==null? "" : System.Uri.EscapeDataString(end));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Absolute_bytes_difference>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the sum of absolute text bytes difference per page.
		/// Given a Mediawiki project, a page-title prefixed with canonical namespace (for
		/// instance 'User:Jimbo_Wales') and a date range, returns a timeseries of bytes
		/// difference absolute sums. You can filter by editors-type (all-editor-types, anonymous,
		/// group-bot, name-bot, user). You can choose between daily and monthly granularity as well.
		/// 
		/// - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
		/// - Rate limit: 25 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsBytes_differenceAbsolutePer_page_project_page_title_editor_type_granularity_start_endGet metrics/bytes-difference/absolute/per-page/{project}/{page_title}/{editor_type}/{granularity}/{start}/{end}
		/// </summary>
		/// <param name="project">The name of any Wikimedia project formatted like {language code}.{project name},
		///for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
		///off. For projects like commons without language codes, use commons.wikimedia. For
		///projects like www.mediawiki.org, you can use that full string, or just use mediawiki
		///or mediawiki.org.
		///</param>
		/// <param name="page_title">The page-title to request absolute bytes-difference for. Should be prefixed with the
		///page canonical namespace.
		///</param>
		/// <param name="editor_type">If you want to filter by editor-type, use one of anonymous, group-bot (registered
		///accounts belonging to the bot group), name-bot (registered accounts not belonging to
		///the bot group but having bot-like names) or user (registered account not in bot group
		///nor having bot-like name). If you are interested in edits regardless of their
		///editor-type, use all-editor-types.
		///</param>
		/// <param name="granularity">Time unit for the response data. As of today, supported values are daily and monthly
		///</param>
		/// <param name="start">The date of the first day to include, in YYYYMMDD format</param>
		/// <param name="end">The date of the last day to include, in YYYYMMDD format</param>
		/// <returns>The list of values</returns>
		public async Task<Absolute_bytes_difference_per_page> MetricsBytes_differenceAbsolutePer_page_project_page_title_editor_type_granularity_start_endGetAsync(string project, string page_title, MetricsBytes_differenceAbsolutePer_page_project_page_title_editor_type_granularity_start_endGetEditor_type editor_type, MetricsBytes_differenceAbsoluteAggregate_project_editor_type_page_type_granularity_start_endGetGranularity granularity, string start, string end, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/bytes-difference/absolute/per-page/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/{page_title}/{editor_type}/"+granularity+"/"+ (start==null? "" : System.Uri.EscapeDataString(start))+"/"+ (end==null? "" : System.Uri.EscapeDataString(end));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Absolute_bytes_difference_per_page>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the sum of net text bytes difference between current edit and previous one.
		/// Given a Mediawiki project and a date range, returns a timeseries of bytes difference net
		/// sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot,
		/// user) and page-type (all-page-types, content or non-content). You can choose between
		/// daily and monthly granularity as well.
		/// 
		/// - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
		/// - Rate limit: 25 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsBytes_differenceNetAggregate_project_editor_type_page_type_granularity_start_endGet metrics/bytes-difference/net/aggregate/{project}/{editor_type}/{page_type}/{granularity}/{start}/{end}
		/// </summary>
		/// <param name="project">The name of any Wikimedia project formatted like {language code}.{project name},
		///for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
		///off. For projects like commons without language codes, use commons.wikimedia. For
		///projects like www.mediawiki.org, you can use that full string, or just use mediawiki
		///or mediawiki.org. If you're interested in the aggregation of all projects, use
		///all-projects.
		///</param>
		/// <param name="editor_type">If you want to filter by editor-type, use one of anonymous, group-bot (registered
		///accounts belonging to the bot group), name-bot (registered accounts not belonging to
		///the bot group but having bot-like names) or user (registered account not in bot group
		///nor having bot-like name). If you are interested in edits regardless of their
		///editor-type, use all-editor-types.
		///</param>
		/// <param name="page_type">If you want to filter by page-type, use one of content (edits on pages in content
		///namespaces) or non-content (edits on pages in non-content namespaces). If you are
		///interested in edits regardless of their page-type, use all-page-types.
		///</param>
		/// <param name="granularity">Time unit for the response data. As of today, supported values are daily and monthly
		///</param>
		/// <param name="start">The date of the first day to include, in YYYYMMDD format</param>
		/// <param name="end">The date of the last day to include, in YYYYMMDD format</param>
		/// <returns>The list of values</returns>
		public async Task<Net_bytes_difference> MetricsBytes_differenceNetAggregate_project_editor_type_page_type_granularity_start_endGetAsync(string project, MetricsBytes_differenceNetAggregate_project_editor_type_page_type_granularity_start_endGetEditor_type editor_type, MetricsBytes_differenceNetAggregate_project_editor_type_page_type_granularity_start_endGetPage_type page_type, MetricsBytes_differenceAbsoluteAggregate_project_editor_type_page_type_granularity_start_endGetGranularity granularity, string start, string end, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/bytes-difference/net/aggregate/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/{editor_type}/{page_type}/"+granularity+"/"+ (start==null? "" : System.Uri.EscapeDataString(start))+"/"+ (end==null? "" : System.Uri.EscapeDataString(end));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Net_bytes_difference>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the sum of net text bytes difference per page.
		/// Given a Mediawiki project, a page-title prefixed with canonical namespace (for
		/// instance 'User:Jimbo_Wales') and a date range, returns a timeseries of bytes
		/// difference net sums. You can filter by editors-type (all-editor-types, anonymous,
		/// group-bot, name-bot, user). You can choose between daily and monthly granularity as well.
		/// 
		/// - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
		/// - Rate limit: 25 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsBytes_differenceNetPer_page_project_page_title_editor_type_granularity_start_endGet metrics/bytes-difference/net/per-page/{project}/{page_title}/{editor_type}/{granularity}/{start}/{end}
		/// </summary>
		/// <param name="project">The name of any Wikimedia project formatted like {language code}.{project name},
		///for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
		///off. For projects like commons without language codes, use commons.wikimedia. For
		///projects like www.mediawiki.org, you can use that full string, or just use mediawiki
		///or mediawiki.org.
		///</param>
		/// <param name="page_title">The page-title to request net bytes-difference for. Should be prefixed with the
		///page canonical namespace.
		///</param>
		/// <param name="editor_type">If you want to filter by editor-type, use one of anonymous, group-bot (registered
		///accounts belonging to the bot group), name-bot (registered accounts not belonging to
		///the bot group but having bot-like names) or user (registered account not in bot group
		///nor having bot-like name). If you are interested in edits regardless of their
		///editor-type, use all-editor-types.
		///</param>
		/// <param name="granularity">Time unit for the response data. As of today, supported values are daily and monthly
		///</param>
		/// <param name="start">The date of the first day to include, in YYYYMMDD format</param>
		/// <param name="end">The date of the last day to include, in YYYYMMDD format</param>
		/// <returns>The list of values</returns>
		public async Task<Net_bytes_difference_per_page> MetricsBytes_differenceNetPer_page_project_page_title_editor_type_granularity_start_endGetAsync(string project, string page_title, MetricsBytes_differenceNetPer_page_project_page_title_editor_type_granularity_start_endGetEditor_type editor_type, MetricsBytes_differenceAbsoluteAggregate_project_editor_type_page_type_granularity_start_endGetGranularity granularity, string start, string end, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/bytes-difference/net/per-page/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/{page_title}/{editor_type}/"+granularity+"/"+ (start==null? "" : System.Uri.EscapeDataString(start))+"/"+ (end==null? "" : System.Uri.EscapeDataString(end));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Net_bytes_difference_per_page>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get edited-pages counts for a project.
		/// Given a Mediawiki project and a date range, returns a timeseries of its edited-pages counts.
		/// You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user),
		/// page-type (all-page-types, content or non-content) or activity-level (1..4-edits,
		/// 5..24-edits, 25..99-edits, 100..-edits). You can choose between daily and monthly
		/// granularity as well.
		/// 
		/// - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
		/// - Rate limit: 25 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsEdited_pagesAggregate_project_editor_type_page_type_activity_level_granularity_start_endGet metrics/edited-pages/aggregate/{project}/{editor_type}/{page_type}/{activity_level}/{granularity}/{start}/{end}
		/// </summary>
		/// <param name="project">The name of any Wikimedia project formatted like {language code}.{project name},
		///for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
		///off.  For projects like commons without language codes, use commons.wikimedia.
		///For projects like www.mediawiki.org, you can use that full string, or just use
		///mediawiki or mediawiki.org.
		///</param>
		/// <param name="editor_type">If you want to filter by editor-type, use one of anonymous, group-bot (registered
		///accounts belonging to the bot group), name-bot (registered accounts not belonging to
		///the bot group but having bot-like names) or user (registered account not in bot group
		///nor having bot-like name). If you are interested in edits regardless of their
		///editor-type, use all-editor-types.
		///</param>
		/// <param name="page_type">If you want to filter by page-type, use one of content (edited-pages in content
		///namespaces) or non-content (edited-pages in non-content namespaces). If you are
		///interested in edited-pages regardless of their page-type, use all-page-types.
		///</param>
		/// <param name="activity_level">If you want to filter by activity-level, use one of 1..4-edits, 5..24-edits,
		///25..99-edits or 100..-edits. If you are interested in edited-pages regardless
		///of their activity level, use all-activity-levels.
		///</param>
		/// <param name="granularity">The time unit for the response data. As of today, supported values are
		///daily and monthly.
		///</param>
		/// <param name="start">The date of the first day to include, in YYYYMMDD format</param>
		/// <param name="end">The date of the last day to include, in YYYYMMDD format</param>
		/// <returns>The list of values</returns>
		public async Task<Edited_pages> MetricsEdited_pagesAggregate_project_editor_type_page_type_activity_level_granularity_start_endGetAsync(string project, MetricsEdited_pagesAggregate_project_editor_type_page_type_activity_level_granularity_start_endGetEditor_type editor_type, MetricsEdited_pagesAggregate_project_editor_type_page_type_activity_level_granularity_start_endGetPage_type page_type, MetricsEdited_pagesAggregate_project_editor_type_page_type_activity_level_granularity_start_endGetActivity_level activity_level, MetricsBytes_differenceAbsoluteAggregate_project_editor_type_page_type_granularity_start_endGetGranularity granularity, string start, string end, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/edited-pages/aggregate/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/{editor_type}/{page_type}/{activity_level}/"+granularity+"/"+ (start==null? "" : System.Uri.EscapeDataString(start))+"/"+ (end==null? "" : System.Uri.EscapeDataString(end));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Edited_pages>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get new pages counts for a project.
		/// Given a Mediawiki project and a date range, returns a timeseries of its new pages counts.
		/// You can filter by editor type (all-editor-types, anonymous, group-bot, name-bot, user)
		/// or page-type (all-page-types, content or non-content). You can choose between daily and
		/// monthly granularity as well.
		/// 
		/// - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
		/// - Rate limit: 25 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsEdited_pagesNew_project_editor_type_page_type_granularity_start_endGet metrics/edited-pages/new/{project}/{editor_type}/{page_type}/{granularity}/{start}/{end}
		/// </summary>
		/// <param name="project">The name of any Wikimedia project formatted like {language code}.{project name},
		///for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
		///off.  For projects like commons without language codes, use commons.wikimedia.
		///For projects like www.mediawiki.org, you can use that full string, or just use
		///mediawiki or mediawiki.org. If you're interested in the aggregation of all
		///projects, use all-projects.
		///</param>
		/// <param name="editor_type">If you want to filter by editor-type, use one of anonymous, group-bot (registered
		///accounts belonging to the bot group), name-bot (registered accounts not belonging
		///to the bot group but having bot-like names) or user (registered account not in bot
		///group nor having bot-like name). If you are interested in edits regardless of
		///their editor-type, use all-editor-types.
		///</param>
		/// <param name="page_type">If you want to filter by page-type, use one of content (new pages in content
		///namespaces) or non-content (new pages in non-content namespaces). If you are
		///interested in new-articles regardless of their page-type, use all-page-types.
		///</param>
		/// <param name="granularity">The time unit for the response data. As of today, supported values are
		///daily and monthly.
		///</param>
		/// <param name="start">The date of the first day to include, in YYYYMMDD format</param>
		/// <param name="end">The date of the last day to include, in YYYYMMDD format</param>
		/// <returns>The list of values</returns>
		public async Task<New_pages> MetricsEdited_pagesNew_project_editor_type_page_type_granularity_start_endGetAsync(string project, MetricsEdited_pagesNew_project_editor_type_page_type_granularity_start_endGetEditor_type editor_type, MetricsEdited_pagesNew_project_editor_type_page_type_granularity_start_endGetPage_type page_type, MetricsBytes_differenceAbsoluteAggregate_project_editor_type_page_type_granularity_start_endGetGranularity granularity, string start, string end, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/edited-pages/new/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/{editor_type}/{page_type}/"+granularity+"/"+ (start==null? "" : System.Uri.EscapeDataString(start))+"/"+ (end==null? "" : System.Uri.EscapeDataString(end));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<New_pages>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get top 100 edited-pages by absolute bytes-difference.
		/// Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100
		/// edited-pages by absolute bytes-difference. You can filter by editor-type (all-editor-types,
		/// anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).
		/// 
		/// - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
		/// - Rate limit: 25 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsEdited_pagesTop_by_absolute_bytes_difference_project_editor_type_page_type_year_month_dayGet metrics/edited-pages/top-by-absolute-bytes-difference/{project}/{editor_type}/{page_type}/{year}/{month}/{day}
		/// </summary>
		/// <param name="project">The name of any Wikimedia project formatted like {language code}.{project name},
		///for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
		///off. For projects like commons without language codes, use commons.wikimedia. For
		///projects like www.mediawiki.org, you can use that full string, or just use mediawiki
		///or mediawiki.org.
		///</param>
		/// <param name="editor_type">If you want to filter by editor-type, use one of anonymous, group-bot (registered
		///accounts belonging to the bot group), name-bot (registered accounts not belonging to
		///the bot group but having bot-like names) or user (registered account not in bot group
		///nor having bot-like name). If you are interested in edits regardless of their
		///editor-type, use all-editor-types.
		///</param>
		/// <param name="page_type">If you want to filter by page-type, use one of content (edits on pages in content
		///namespaces) or non-content (edits on pages in non-content namespaces). If you are
		///interested in edits regardless of their page-type, use all-page-types.
		///</param>
		/// <param name="year">The year of the date for which to retrieve top edited-pages, in YYYY format.</param>
		/// <param name="month">The month of the date for which to retrieve top edited-pages, in MM format. If you want to get the top edited-pages of a whole month, the day parameter should be all-days.</param>
		/// <param name="day">The day of the date for which to retrieve top edited-pages, in DD format, or all-days for a monthly value.</param>
		/// <returns>The list of values</returns>
		public async Task<Top_edited_pages_by_abs_bytes_diff> MetricsEdited_pagesTop_by_absolute_bytes_difference_project_editor_type_page_type_year_month_dayGetAsync(string project, MetricsEdited_pagesTop_by_absolute_bytes_difference_project_editor_type_page_type_year_month_dayGetEditor_type editor_type, MetricsEdited_pagesTop_by_absolute_bytes_difference_project_editor_type_page_type_year_month_dayGetPage_type page_type, string year, string month, string day, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/edited-pages/top-by-absolute-bytes-difference/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/{editor_type}/{page_type}/"+ (year==null? "" : System.Uri.EscapeDataString(year))+"/"+ (month==null? "" : System.Uri.EscapeDataString(month))+"/"+ (day==null? "" : System.Uri.EscapeDataString(day));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Top_edited_pages_by_abs_bytes_diff>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get top 100 edited-pages by edits count.
		/// Given a Mediawiki project and a date (day or month), returns a timeseries of the top
		/// 100 edited-pages by edits count. You can filter by editor-type (all-editor-types,
		/// anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or
		/// non-content).
		/// 
		/// - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
		/// - Rate limit: 25 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsEdited_pagesTop_by_edits_project_editor_type_page_type_year_month_dayGet metrics/edited-pages/top-by-edits/{project}/{editor_type}/{page_type}/{year}/{month}/{day}
		/// </summary>
		/// <param name="project">The name of any Wikimedia project formatted like {language code}.{project name},
		///for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
		///off. For projects like commons without language codes, use commons.wikimedia. For
		///projects like www.mediawiki.org, you can use that full string, or just use mediawiki
		///or mediawiki.org.
		///</param>
		/// <param name="editor_type">If you want to filter by editor-type, use one of anonymous, group-bot (registered
		///accounts belonging to the bot group), name-bot (registered accounts not belonging to
		///the bot group but having bot-like names) or user (registered account not in bot group
		///nor having bot-like name). If you are interested in edits regardless of their
		///editor-type, use all-editor-types.
		///</param>
		/// <param name="page_type">If you want to filter by page-type, use one of content (edits on pages in content
		///namespaces) or non-content (edits on pages in non-content namespaces). If you are
		///interested in edits regardless of their page-type, use all-page-types.
		///</param>
		/// <param name="year">The year of the date for which to retrieve top edited-pages, in YYYY format.</param>
		/// <param name="month">The month of the date for which to retrieve top edited-pages, in MM format. If you want to get the top edited-pages of a whole month, the day parameter should be all-days.</param>
		/// <param name="day">The day of the date for which to retrieve top edited-pages, in DD format, or all-days for a monthly value.</param>
		/// <returns>The list of values</returns>
		public async Task<Top_edited_pages_by_edits> MetricsEdited_pagesTop_by_edits_project_editor_type_page_type_year_month_dayGetAsync(string project, MetricsEdited_pagesTop_by_edits_project_editor_type_page_type_year_month_dayGetEditor_type editor_type, MetricsEdited_pagesTop_by_edits_project_editor_type_page_type_year_month_dayGetPage_type page_type, string year, string month, string day, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/edited-pages/top-by-edits/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/{editor_type}/{page_type}/"+ (year==null? "" : System.Uri.EscapeDataString(year))+"/"+ (month==null? "" : System.Uri.EscapeDataString(month))+"/"+ (day==null? "" : System.Uri.EscapeDataString(day));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Top_edited_pages_by_edits>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get top 100 edited-pages by net bytes-difference.
		/// Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100
		/// edited-pages by net bytes-difference. You can filter by editor-type (all-editor-types,
		/// anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).
		/// 
		/// - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
		/// - Rate limit: 25 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsEdited_pagesTop_by_net_bytes_difference_project_editor_type_page_type_year_month_dayGet metrics/edited-pages/top-by-net-bytes-difference/{project}/{editor_type}/{page_type}/{year}/{month}/{day}
		/// </summary>
		/// <param name="project">The name of any Wikimedia project formatted like {language code}.{project name},
		///for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
		///off. For projects like commons without language codes, use commons.wikimedia. For
		///projects like www.mediawiki.org, you can use that full string, or just use mediawiki
		///or mediawiki.org.
		///</param>
		/// <param name="editor_type">If you want to filter by editor-type, use one of anonymous, group-bot (registered
		///accounts belonging to the bot group), name-bot (registered accounts not belonging to
		///the bot group but having bot-like names) or user (registered account not in bot group
		///nor having bot-like name). If you are interested in edits regardless of their
		///editor-type, use all-editor-types.
		///</param>
		/// <param name="page_type">If you want to filter by page-type, use one of content (edits on pages in content
		///namespaces) or non-content (edits on pages in non-content namespaces). If you are
		///interested in edits regardless of their page-type, use all-page-types.
		///</param>
		/// <param name="year">The year of the date for which to retrieve top edited-pages, in YYYY format.</param>
		/// <param name="month">The month of the date for which to retrieve top edited-pages, in MM format. If you want to get the top edited-pages of a whole month, the day parameter should be all-days.</param>
		/// <param name="day">The day of the date for which to retrieve top edited-pages, in DD format, or all-days for a monthly value.</param>
		/// <returns>The list of values</returns>
		public async Task<Top_edited_pages_by_net_bytes_diff> MetricsEdited_pagesTop_by_net_bytes_difference_project_editor_type_page_type_year_month_dayGetAsync(string project, MetricsEdited_pagesTop_by_net_bytes_difference_project_editor_type_page_type_year_month_dayGetEditor_type editor_type, MetricsEdited_pagesTop_by_net_bytes_difference_project_editor_type_page_type_year_month_dayGetPage_type page_type, string year, string month, string day, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/edited-pages/top-by-net-bytes-difference/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/{editor_type}/{page_type}/"+ (year==null? "" : System.Uri.EscapeDataString(year))+"/"+ (month==null? "" : System.Uri.EscapeDataString(month))+"/"+ (day==null? "" : System.Uri.EscapeDataString(day));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Top_edited_pages_by_net_bytes_diff>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get editors counts for a project.
		/// Given a Mediawiki project and a date range, returns a timeseries of its editors counts.
		/// You can filter by editory-type (all-editor-types, anonymous, group-bot, name-bot, user),
		/// page-type (all-page-types, content or non-content) or activity-level (1..4-edits,
		/// 5..24-edits, 25..99-edits or 100..-edits). You can choose between daily and monthly
		/// granularity as well.
		/// 
		/// - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
		/// - Rate limit: 25 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsEditorsAggregate_project_editor_type_page_type_activity_level_granularity_start_endGet metrics/editors/aggregate/{project}/{editor_type}/{page_type}/{activity_level}/{granularity}/{start}/{end}
		/// </summary>
		/// <param name="project">The name of any Wikimedia project formatted like {language code}.{project name},
		///for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
		///off.  For projects like commons without language codes, use commons.wikimedia.
		///For projects like www.mediawiki.org, you can use that full string, or just use
		///mediawiki or mediawiki.org.
		///</param>
		/// <param name="editor_type">If you want to filter by editor-type, use one of anonymous, group-bot (registered
		///accounts belonging to the bot group), name-bot (registered accounts not belonging
		///to the bot group but having bot-like names) or user (registered account not in bot
		///group nor having bot-like name). If you are interested in edits regardless
		///of their editor-type, use all-editor-types.
		///</param>
		/// <param name="page_type">If you want to filter by page-type, use one of content (edits made in content
		///namespaces) or non-content (edits made in non-content namespaces). If you are
		///interested in editors regardless of their page-type, use all-page-types.
		///</param>
		/// <param name="activity_level">If you want to filter by activity-level, use one of 1..4-edits, 5..24-edits,
		///25..99-edits or 100..-edits. If you are interested in editors regardless
		///of their activity-level, use all-activity-levels.
		///</param>
		/// <param name="granularity">The time unit for the response data. As of today, supported values are
		///daily and monthly.
		///</param>
		/// <param name="start">The date of the first day to include, in YYYYMMDD format</param>
		/// <param name="end">The date of the last day to include, in YYYYMMDD format</param>
		/// <returns>The list of values</returns>
		public async Task<Editors> MetricsEditorsAggregate_project_editor_type_page_type_activity_level_granularity_start_endGetAsync(string project, MetricsEditorsAggregate_project_editor_type_page_type_activity_level_granularity_start_endGetEditor_type editor_type, MetricsEditorsAggregate_project_editor_type_page_type_activity_level_granularity_start_endGetPage_type page_type, MetricsEditorsAggregate_project_editor_type_page_type_activity_level_granularity_start_endGetActivity_level activity_level, MetricsBytes_differenceAbsoluteAggregate_project_editor_type_page_type_granularity_start_endGetGranularity granularity, string start, string end, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/editors/aggregate/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/{editor_type}/{page_type}/{activity_level}/"+granularity+"/"+ (start==null? "" : System.Uri.EscapeDataString(start))+"/"+ (end==null? "" : System.Uri.EscapeDataString(end));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Editors>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get top 100 editors by absolute bytes-difference.
		/// Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100
		/// editors by absolute bytes-difference. You can filter by editor-type (all-editor-types,
		/// anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).
		/// The user_text returned is either the mediawiki user_text if the user is registered, or
		/// null if user is anonymous.
		/// 
		/// - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
		/// - Rate limit: 25 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsEditorsTop_by_absolute_bytes_difference_project_editor_type_page_type_year_month_dayGet metrics/editors/top-by-absolute-bytes-difference/{project}/{editor_type}/{page_type}/{year}/{month}/{day}
		/// </summary>
		/// <param name="project">The name of any Wikimedia project formatted like {language code}.{project name},
		///for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
		///off. For projects like commons without language codes, use commons.wikimedia. For
		///projects like www.mediawiki.org, you can use that full string, or just use mediawiki
		///or mediawiki.org.
		///</param>
		/// <param name="editor_type">If you want to filter by editor-type, use one of anonymous, group-bot (registered
		///accounts belonging to the bot group), name-bot (registered accounts not belonging to
		///the bot group but having bot-like names) or user (registered account not in bot group
		///nor having bot-like name). If you are interested in edits regardless of their
		///editor-type, use all-editor-types.
		///</param>
		/// <param name="page_type">If you want to filter by page-type, use one of content (edits on pages in content
		///namespaces) or non-content (edits on pages in non-content namespaces). If you are
		///interested in edits regardless of their page-type, use all-page-types.
		///</param>
		/// <param name="year">The year of the date for which to retrieve top editors, in YYYY format.</param>
		/// <param name="month">The month of the date for which to retrieve top editors, in MM format. If you want to get the top editors of a whole month, the day parameter should be all-days.</param>
		/// <param name="day">The day of the date for which to retrieve top editors, in DD format, or all-days for a monthly value.</param>
		/// <returns>The list of values</returns>
		public async Task<Top_editors_by_abs_bytes_diff> MetricsEditorsTop_by_absolute_bytes_difference_project_editor_type_page_type_year_month_dayGetAsync(string project, MetricsEditorsTop_by_absolute_bytes_difference_project_editor_type_page_type_year_month_dayGetEditor_type editor_type, MetricsEditorsTop_by_absolute_bytes_difference_project_editor_type_page_type_year_month_dayGetPage_type page_type, string year, string month, string day, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/editors/top-by-absolute-bytes-difference/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/{editor_type}/{page_type}/"+ (year==null? "" : System.Uri.EscapeDataString(year))+"/"+ (month==null? "" : System.Uri.EscapeDataString(month))+"/"+ (day==null? "" : System.Uri.EscapeDataString(day));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Top_editors_by_abs_bytes_diff>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get top 100 editors by edits count.
		/// Given a Mediawiki project and a date (day or month), returns a timeseries of the top
		/// 100 editors by edits count. You can filter by editor-type (all-editor-types,
		/// anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or
		/// non-content). The user_text returned is either the mediawiki user_text if the user is
		/// registered, or null if user is anonymous.
		/// 
		/// - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
		/// - Rate limit: 25 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsEditorsTop_by_edits_project_editor_type_page_type_year_month_dayGet metrics/editors/top-by-edits/{project}/{editor_type}/{page_type}/{year}/{month}/{day}
		/// </summary>
		/// <param name="project">The name of any Wikimedia project formatted like {language code}.{project name},
		///for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
		///off. For projects like commons without language codes, use commons.wikimedia. For
		///projects like www.mediawiki.org, you can use that full string, or just use mediawiki
		///or mediawiki.org.
		///</param>
		/// <param name="editor_type">If you want to filter by editor-type, use one of anonymous, group-bot (registered
		///accounts belonging to the bot group), name-bot (registered accounts not belonging to
		///the bot group but having bot-like names) or user (registered account not in bot group
		///nor having bot-like name). If you are interested in edits regardless of their
		///editor-type, use all-editor-types.
		///</param>
		/// <param name="page_type">If you want to filter by page-type, use one of content (edits on pages in content
		///namespaces) or non-content (edits on pages in non-content namespaces). If you are
		///interested in edits regardless of their page-type, use all-page-types.
		///</param>
		/// <param name="year">The year of the date for which to retrieve top editors, in YYYY format.</param>
		/// <param name="month">The month of the date for which to retrieve top editors, in MM format. If you want to get the top editors of a whole month, the day parameter should be all-days.</param>
		/// <param name="day">The day of the date for which to retrieve top editors, in DD format, or all-days for a monthly value.</param>
		/// <returns>The list of values</returns>
		public async Task<Top_editors_by_edits> MetricsEditorsTop_by_edits_project_editor_type_page_type_year_month_dayGetAsync(string project, MetricsEditorsTop_by_edits_project_editor_type_page_type_year_month_dayGetEditor_type editor_type, MetricsEditorsTop_by_edits_project_editor_type_page_type_year_month_dayGetPage_type page_type, string year, string month, string day, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/editors/top-by-edits/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/{editor_type}/{page_type}/"+ (year==null? "" : System.Uri.EscapeDataString(year))+"/"+ (month==null? "" : System.Uri.EscapeDataString(month))+"/"+ (day==null? "" : System.Uri.EscapeDataString(day));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Top_editors_by_edits>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get top 100 editors by net bytes-difference.
		/// Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100
		/// editors by net bytes-difference. You can filter by editor-type (all-editor-types, anonymous,
		/// group-bot, name-bot, user) or page-type (all-page-types, content or non-content). The
		/// user_text returned is either the mediawiki user_text if the user is registered, or
		/// "Anonymous Editor" if user is anonymous.
		/// 
		/// - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
		/// - Rate limit: 25 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsEditorsTop_by_net_bytes_difference_project_editor_type_page_type_year_month_dayGet metrics/editors/top-by-net-bytes-difference/{project}/{editor_type}/{page_type}/{year}/{month}/{day}
		/// </summary>
		/// <param name="project">The name of any Wikimedia project formatted like {language code}.{project name},
		///for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
		///off. For projects like commons without language codes, use commons.wikimedia. For
		///projects like www.mediawiki.org, you can use that full string, or just use mediawiki
		///or mediawiki.org.
		///</param>
		/// <param name="editor_type">If you want to filter by editor-type, use one of anonymous, group-bot (registered
		///accounts belonging to the bot group), name-bot (registered accounts not belonging to
		///the bot group but having bot-like names) or user (registered account not in bot group
		///nor having bot-like name). If you are interested in edits regardless of their
		///editor-type, use all-editor-types.
		///</param>
		/// <param name="page_type">If you want to filter by page-type, use one of content (edits on pages in content
		///namespaces) or non-content (edits on pages in non-content namespaces). If you are
		///interested in edits regardless of their page-type, use all-page-types.
		///</param>
		/// <param name="year">The year of the date for which to retrieve top editors, in YYYY format.</param>
		/// <param name="month">The month of the date for which to retrieve top editors, in MM format. If you want to get the top editors of a whole month, the day parameter should be all-days.</param>
		/// <param name="day">The day of the date for which to retrieve top editors, in DD format, or all-days for a monthly value.</param>
		/// <returns>The list of values</returns>
		public async Task<Top_editors_by_net_bytes_diff> MetricsEditorsTop_by_net_bytes_difference_project_editor_type_page_type_year_month_dayGetAsync(string project, MetricsEditorsTop_by_net_bytes_difference_project_editor_type_page_type_year_month_dayGetEditor_type editor_type, MetricsEditorsTop_by_net_bytes_difference_project_editor_type_page_type_year_month_dayGetPage_type page_type, string year, string month, string day, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/editors/top-by-net-bytes-difference/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/{editor_type}/{page_type}/"+ (year==null? "" : System.Uri.EscapeDataString(year))+"/"+ (month==null? "" : System.Uri.EscapeDataString(month))+"/"+ (day==null? "" : System.Uri.EscapeDataString(day));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Top_editors_by_net_bytes_diff>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get edits counts for a project.
		/// Given a Mediawiki project and a date range, returns a timeseries of edits counts.
		/// You can filter by editors-type (all-editor-types, anonymous, bot, registered) and
		/// page-type (all-page-types, content or non-content). You can choose between daily and
		/// monthly granularity as well.
		/// 
		/// - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
		/// - Rate limit: 25 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsEditsAggregate_project_editor_type_page_type_granularity_start_endGet metrics/edits/aggregate/{project}/{editor_type}/{page_type}/{granularity}/{start}/{end}
		/// </summary>
		/// <param name="project">The name of any Wikimedia project formatted like {language code}.{project name},
		///for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
		///off.  For projects like commons without language codes, use commons.wikimedia.
		///For projects like www.mediawiki.org, you can use that full string, or just use
		///mediawiki or mediawiki.org. If you're interested in the aggregation of
		///all projects, use all-projects.
		///</param>
		/// <param name="editor_type">If you want to filter by editor-type, use one of anonymous, group-bot (registered
		///accounts belonging to the bot group), name-bot (registered accounts not belonging
		///to the bot group but having bot-like names) or user (registered account not in bot
		///group nor having bot-like name). If you are interested in edits regardless
		///of their editor-type, use all-editor-types.
		///</param>
		/// <param name="page_type">If you want to filter by page-type, use one of content (edits on pages in content
		///namespaces) or non-content (edits on pages in non-content namespaces). If you are
		///interested in edits regardless of their page-type, use all-page-types.
		///</param>
		/// <param name="granularity">The time unit for the response data. As of today, supported values are
		///daily and monthly.
		///</param>
		/// <param name="start">The date of the first day to include, in YYYYMMDD format</param>
		/// <param name="end">The date of the last day to include, in YYYYMMDD format</param>
		/// <returns>The list of values</returns>
		public async Task<Edits> MetricsEditsAggregate_project_editor_type_page_type_granularity_start_endGetAsync(string project, MetricsEditsAggregate_project_editor_type_page_type_granularity_start_endGetEditor_type editor_type, MetricsEditsAggregate_project_editor_type_page_type_granularity_start_endGetPage_type page_type, MetricsBytes_differenceAbsoluteAggregate_project_editor_type_page_type_granularity_start_endGetGranularity granularity, string start, string end, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/edits/aggregate/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/{editor_type}/{page_type}/"+granularity+"/"+ (start==null? "" : System.Uri.EscapeDataString(start))+"/"+ (end==null? "" : System.Uri.EscapeDataString(end));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Edits>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get edit counts for a page in a project.
		/// Given a Mediawiki project, a page-title prefixed with its canonical namespace (for
		/// instance 'User:Jimbo_Wales') and a date range, returns a timeseries of edit counts.
		/// You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user).
		/// You can choose between daily and monthly granularity as well.
		/// 
		/// - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
		/// - Rate limit: 25 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsEditsPer_page_project_page_title_editor_type_granularity_start_endGet metrics/edits/per-page/{project}/{page_title}/{editor_type}/{granularity}/{start}/{end}
		/// </summary>
		/// <param name="project">The name of any Wikimedia project formatted like {language code}.{project name},
		///for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
		///off. For projects like commons without language codes, use commons.wikimedia. For
		///projects like www.mediawiki.org, you can use that full string, or just use mediawiki
		///or mediawiki.org.
		///</param>
		/// <param name="page_title">The page-title to request edits for. It should be prefixed with canonical namespace.
		///Spaces will be converted to underscores.
		///</param>
		/// <param name="editor_type">If you want to filter by editor-type, use one of anonymous, group-bot (registered
		///accounts belonging to the bot group), name-bot (registered accounts not belonging to
		///the bot group but having bot-like names) or user (registered account not in bot group
		///nor having bot-like name). If you are interested in edits regardless of their
		///editor-type, use all-editor-types.
		///</param>
		/// <param name="granularity">Time unit for the response data. As of today, supported values are daily and monthly
		///</param>
		/// <param name="start">The date of the first day to include, in YYYYMMDD format</param>
		/// <param name="end">The date of the last day to include, in YYYYMMDD format</param>
		/// <returns>The list of values</returns>
		public async Task<Edits_per_page> MetricsEditsPer_page_project_page_title_editor_type_granularity_start_endGetAsync(string project, string page_title, MetricsEditsPer_page_project_page_title_editor_type_granularity_start_endGetEditor_type editor_type, MetricsBytes_differenceAbsoluteAggregate_project_editor_type_page_type_granularity_start_endGetGranularity granularity, string start, string end, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/edits/per-page/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/{page_title}/{editor_type}/"+granularity+"/"+ (start==null? "" : System.Uri.EscapeDataString(start))+"/"+ (end==null? "" : System.Uri.EscapeDataString(end));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Edits_per_page>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Given a project and a date range, returns a timeseries of pagecounts.
		/// You can filter by access site (mobile or desktop) and you can choose between monthly,
		/// daily and hourly granularity as well.
		/// 
		/// - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
		/// - Rate limit: 100 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsLegacyPagecountsAggregate_project_access_site_granularity_start_endGet metrics/legacy/pagecounts/aggregate/{project}/{access_site}/{granularity}/{start}/{end}
		/// </summary>
		/// <param name="project">The name of any Wikimedia project formatted like {language code}.{project name},
		///for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
		///off. For projects like commons without language codes, use commons.wikimedia.
		///</param>
		/// <param name="access_site">If you want to filter by access site, use one of desktop-site or mobile-site. If you are interested in pagecounts regardless of access site use all-sites.</param>
		/// <param name="granularity">The time unit for the response data. As of today, the supported granularities for
		///this endpoint are hourly, daily and monthly.
		///</param>
		/// <param name="start">The timestamp of the first hour/day/month to include, in YYYYMMDDHH format.</param>
		/// <param name="end">The timestamp of the last hour/day/month to include, in YYYYMMDDHH format.
		///In hourly and daily granularities this value is inclusive, in the monthly granularity
		///this value is exclusive.
		///</param>
		/// <returns>The list of values</returns>
		public async Task<Pagecounts_project> MetricsLegacyPagecountsAggregate_project_access_site_granularity_start_endGetAsync(string project, MetricsLegacyPagecountsAggregate_project_access_site_granularity_start_endGetAccess_site access_site, MetricsLegacyPagecountsAggregate_project_access_site_granularity_start_endGetGranularity granularity, string start, string end, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/legacy/pagecounts/aggregate/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/{access_site}/"+granularity+"/"+ (start==null? "" : System.Uri.EscapeDataString(start))+"/"+ (end==null? "" : System.Uri.EscapeDataString(end));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Pagecounts_project>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get pageview counts for a project.
		/// Given a date range, returns a timeseries of pageview counts. You can filter by project,
		/// access method and/or agent type. You can choose between daily and hourly granularity
		/// as well.
		/// 
		/// - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
		/// - Rate limit: 100 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsPageviewsAggregate_project_access_agent_granularity_start_endGet metrics/pageviews/aggregate/{project}/{access}/{agent}/{granularity}/{start}/{end}
		/// </summary>
		/// <param name="project">If you want to filter by project, use the domain of any Wikimedia project,
		///for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.
		///If you are interested in all pageviews regardless of project, use all-projects.
		///</param>
		/// <param name="access">If you want to filter by access method, use one of desktop, mobile-app or mobile-web.
		///If you are interested in pageviews regardless of access method, use all-access.
		///</param>
		/// <param name="agent">If you want to filter by agent type, use one of user or spider. If you are interested
		///in pageviews regardless of agent type, use all-agents.
		///</param>
		/// <param name="granularity">The time unit for the response data. As of today, the supported granularities for this
		///endpoint are hourly, daily, and monthly.
		///</param>
		/// <param name="start">The timestamp of the first hour/day/month to include, in YYYYMMDDHH format</param>
		/// <param name="end">The timestamp of the last hour/day/month to include, in YYYYMMDDHH format</param>
		/// <returns>The list of values</returns>
		public async Task<Pageview_project> MetricsPageviewsAggregate_project_access_agent_granularity_start_endGetAsync(string project, MetricsPageviewsAggregate_project_access_agent_granularity_start_endGetAccess access, MetricsPageviewsAggregate_project_access_agent_granularity_start_endGetAgent agent, MetricsLegacyPagecountsAggregate_project_access_site_granularity_start_endGetGranularity granularity, string start, string end, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/pageviews/aggregate/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+access+"/"+agent+"/"+granularity+"/"+ (start==null? "" : System.Uri.EscapeDataString(start))+"/"+ (end==null? "" : System.Uri.EscapeDataString(end));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Pageview_project>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get pageview counts for a page.
		/// Given a Mediawiki article and a date range, returns a daily timeseries of its pageview
		/// counts. You can also filter by access method and/or agent type.
		/// 
		/// - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
		/// - Rate limit: 100 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsPageviewsPer_article_project_access_agent_article_granularity_start_endGet metrics/pageviews/per-article/{project}/{access}/{agent}/{article}/{granularity}/{start}/{end}
		/// </summary>
		/// <param name="project">If you want to filter by project, use the domain of any Wikimedia project,
		///for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.
		///</param>
		/// <param name="access">If you want to filter by access method, use one of desktop, mobile-app
		///or mobile-web. If you are interested in pageviews regardless of access method,
		///use all-access.
		///</param>
		/// <param name="agent">If you want to filter by agent type, use one of user, bot or spider. If you are
		///interested in pageviews regardless of agent type, use all-agents.
		///</param>
		/// <param name="article">'The title of any article in the specified project. Any spaces should be replaced
		///with underscores. It also should be URI-encoded, so that non-URI-safe characters like
		///%, / or ? are accepted. Example: Are_You_the_One%3F'.
		///</param>
		/// <param name="granularity">The time unit for the response data. As of today, the only supported granularity for
		///this endpoint is daily and monthly.
		///</param>
		/// <param name="start">The date of the first day to include, in YYYYMMDD or YYYYMMDDHH format</param>
		/// <param name="end">The date of the last day to include, in YYYYMMDD or YYYYMMDDHH format</param>
		/// <returns>The list of values</returns>
		public async Task<Pageview_article> MetricsPageviewsPer_article_project_access_agent_article_granularity_start_endGetAsync(string project, MetricsPageviewsPer_article_project_access_agent_article_granularity_start_endGetAccess access, MetricsPageviewsPer_article_project_access_agent_article_granularity_start_endGetAgent agent, string article, MetricsBytes_differenceAbsoluteAggregate_project_editor_type_page_type_granularity_start_endGetGranularity granularity, string start, string end, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/pageviews/per-article/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+access+"/"+agent+"/"+ (article==null? "" : System.Uri.EscapeDataString(article))+"/"+granularity+"/"+ (start==null? "" : System.Uri.EscapeDataString(start))+"/"+ (end==null? "" : System.Uri.EscapeDataString(end));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Pageview_article>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get pageviews by country and access method.
		/// Lists the pageviews to this project, split by country of origin for a given month.
		/// Because of privacy reasons, pageviews are given in a bucketed format, and countries
		/// with less than 100 views do not get reported.
		/// Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
		/// - Rate limit: 100 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsPageviewsTop_by_country_project_access_year_monthGet metrics/pageviews/top-by-country/{project}/{access}/{year}/{month}
		/// </summary>
		/// <param name="project">If you want to filter by project, use the domain of any Wikimedia project,
		///for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.
		///</param>
		/// <param name="access">If you want to filter by access method, use one of desktop, mobile-app or mobile-web.
		///If you are interested in pageviews regardless of access method, use all-access.
		///</param>
		/// <param name="year">The year of the date for which to retrieve top countries, in YYYY format.</param>
		/// <param name="month">The month of the date for which to retrieve top countries, in MM format.
		///</param>
		/// <returns>The list of top countries by pageviews in the project</returns>
		public async Task<By_country> MetricsPageviewsTop_by_country_project_access_year_monthGetAsync(string project, MetricsPageviewsTop_by_country_project_access_year_monthGetAccess access, string year, string month, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/pageviews/top-by-country/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+access+"/"+ (year==null? "" : System.Uri.EscapeDataString(year))+"/"+ (month==null? "" : System.Uri.EscapeDataString(month));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<By_country>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the most viewed articles for a project.
		/// Lists the 1000 most viewed articles for a given project and timespan (month or day).
		/// You can filter by access method.
		/// 
		/// - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
		/// - Rate limit: 100 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsPageviewsTop_project_access_year_month_dayGet metrics/pageviews/top/{project}/{access}/{year}/{month}/{day}
		/// </summary>
		/// <param name="project">If you want to filter by project, use the domain of any Wikimedia project,
		///for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.
		///</param>
		/// <param name="access">If you want to filter by access method, use one of desktop, mobile-app or mobile-web.
		///If you are interested in pageviews regardless of access method, use all-access.
		///</param>
		/// <param name="year">The year of the date for which to retrieve top articles, in YYYY format.</param>
		/// <param name="month">The month of the date for which to retrieve top articles, in MM format. If you want
		///to get the top articles of a whole month, the day parameter should be all-days.
		///</param>
		/// <param name="day">The day of the date for which to retrieve top articles, in DD format.</param>
		/// <returns>The list of top articles in the project</returns>
		public async Task<Pageview_tops> MetricsPageviewsTop_project_access_year_month_dayGetAsync(string project, MetricsPageviewsTop_project_access_year_month_dayGetAccess access, string year, string month, string day, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/pageviews/top/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+access+"/"+ (year==null? "" : System.Uri.EscapeDataString(year))+"/"+ (month==null? "" : System.Uri.EscapeDataString(month))+"/"+ (day==null? "" : System.Uri.EscapeDataString(day));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Pageview_tops>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get newly registered users counts for a project.
		/// Given a Mediawiki project and a date range, returns a timeseries of its newly registered
		/// users counts. You can choose between daily and monthly granularity. The newly registered
		/// users value is computed with self-created users only, not auto-login created ones.
		/// 
		/// - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
		/// - Rate limit: 25 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsRegistered_usersNew_project_granularity_start_endGet metrics/registered-users/new/{project}/{granularity}/{start}/{end}
		/// </summary>
		/// <param name="project">The name of any Wikimedia project formatted like {language code}.{project name},
		///for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
		///off.  For projects like commons without language codes, use commons.wikimedia.
		///For projects like www.mediawiki.org, you can use that full string, or just use
		///mediawiki or mediawiki.org. If you're interested in the aggregation of
		///all projects, use all.
		///</param>
		/// <param name="granularity">The time unit for the response data. As of today, supported values are
		///daily and monthly.
		///</param>
		/// <param name="start">The date of the first day to include, in YYYYMMDD format</param>
		/// <param name="end">The date of the last day to include, in YYYYMMDD format</param>
		/// <returns>The list of values</returns>
		public async Task<New_registered_users> MetricsRegistered_usersNew_project_granularity_start_endGetAsync(string project, MetricsBytes_differenceAbsoluteAggregate_project_editor_type_page_type_granularity_start_endGetGranularity granularity, string start, string end, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/registered-users/new/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+granularity+"/"+ (start==null? "" : System.Uri.EscapeDataString(start))+"/"+ (end==null? "" : System.Uri.EscapeDataString(end));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<New_registered_users>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get unique devices count per project
		/// Given a project and a date range, returns a timeseries of unique devices counts.
		/// You need to specify a project, and can filter by accessed site (mobile or desktop).
		/// You can choose between daily and hourly granularity as well.
		/// 
		/// - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
		/// - Rate limit: 100 req/s
		/// - License: Data accessible via this endpoint is available under the
		/// [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
		/// 
		/// MetricsUnique_devices_project_access_site_granularity_start_endGet metrics/unique-devices/{project}/{access_site}/{granularity}/{start}/{end}
		/// </summary>
		/// <param name="project">If you want to filter by project, use the domain of any Wikimedia project,
		///for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.
		///</param>
		/// <param name="access_site">If you want to filter by accessed site, use one of desktop-site or mobile-site.
		///If you are interested in unique devices regardless of accessed site, use or all-sites.
		///</param>
		/// <param name="granularity">The time unit for the response data. As of today, the supported granularities
		///for this endpoint are daily and monthly.
		///</param>
		/// <param name="start">The timestamp of the first day/month to include, in YYYYMMDD format</param>
		/// <param name="end">The timestamp of the last day/month to include, in YYYYMMDD format</param>
		/// <returns>The list of values</returns>
		public async Task<Unique_devices> MetricsUnique_devices_project_access_site_granularity_start_endGetAsync(string project, MetricsUnique_devices_project_access_site_granularity_start_endGetAccess_site access_site, MetricsBytes_differenceAbsoluteAggregate_project_editor_type_page_type_granularity_start_endGetGranularity granularity, string start, string end, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/unique-devices/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/{access_site}/"+granularity+"/"+ (start==null? "" : System.Uri.EscapeDataString(start))+"/"+ (end==null? "" : System.Uri.EscapeDataString(end));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Unique_devices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the language pairs supported by the back-end
		/// Fetches the list of language pairs the back-end service can translate
		/// 
		/// Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
		/// 
		/// TransformListLanguagepairsGet transform/list/languagepairs/
		/// </summary>
		/// <returns>the list of source and target languages supported by the API</returns>
		public async Task<Cx_languagepairs> TransformListLanguagepairsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transform/list/languagepairs/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Cx_languagepairs>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tools available for a language pair
		/// Fetches the list of tools that are available for the given pair of languages.
		/// 
		/// Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
		/// 
		/// TransformListPair_from_toGet transform/list/pair/{from}/{to}/
		/// </summary>
		/// <param name="from">The source language code</param>
		/// <param name="to">The target language code</param>
		/// <returns>the list of tools available for the language pair</returns>
		public async Task<Cx_list_tools> TransformListPair_from_toGetAsync(string from, string to, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transform/list/pair/"+ (from==null? "" : System.Uri.EscapeDataString(from))+"/"+ (to==null? "" : System.Uri.EscapeDataString(to))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Cx_list_tools>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tools and language pairs available for the given tool category
		/// Fetches the list of tools and all of the language pairs it can translate
		/// 
		/// Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
		/// 
		/// TransformListTool_toolGet transform/list/tool/{tool}
		/// </summary>
		/// <param name="tool">The tool category to list tools and language pairs for</param>
		/// <returns>the list of language pairs available for a given translation tool</returns>
		public async Task<Cx_list_pairs_for_tool> TransformListTool_toolGetAsync(TransformListTool_toolGetTool tool, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transform/list/tool/"+tool;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Cx_list_pairs_for_tool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tools and language pairs available for the given tool category
		/// Fetches the list of tools and all of the language pairs it can translate
		/// 
		/// Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
		/// 
		/// TransformListTool_tool_fromGet transform/list/tool/{tool}/{from}
		/// </summary>
		/// <param name="tool">The tool category to list tools and language pairs for</param>
		/// <param name="from">The source language code</param>
		/// <returns>the list of language pairs available for a given translation tool</returns>
		public async Task<Cx_list_pairs_for_tool> TransformListTool_tool_fromGetAsync(TransformListTool_toolGetTool tool, string from, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transform/list/tool/"+tool+"/"+ (from==null? "" : System.Uri.EscapeDataString(from));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Cx_list_pairs_for_tool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tools and language pairs available for the given tool category
		/// Fetches the list of tools and all of the language pairs it can translate
		/// 
		/// Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
		/// 
		/// TransformListTool_tool_from_toGet transform/list/tool/{tool}/{from}/{to}
		/// </summary>
		/// <param name="tool">The tool category to list tools and language pairs for</param>
		/// <param name="from">The source language code</param>
		/// <param name="to">The target language code</param>
		/// <returns>the list of language pairs available for a given translation tool</returns>
		public async Task<Cx_list_pairs_for_tool> TransformListTool_tool_from_toGetAsync(TransformListTool_toolGetTool tool, string from, string to, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transform/list/tool/"+tool+"/"+ (from==null? "" : System.Uri.EscapeDataString(from))+"/"+ (to==null? "" : System.Uri.EscapeDataString(to));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Cx_list_pairs_for_tool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetch the dictionary meaning of a word
		/// Fetches the dictionary meaning of a word from a language and displays
		/// it in the target language.
		/// 
		/// Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
		/// 
		/// TransformWordFrom_from_langTo_to_lang_wordGet transform/word/from/{from_lang}/to/{to_lang}/{word}
		/// </summary>
		/// <param name="from_lang">The source language code</param>
		/// <param name="to_lang">The target language code</param>
		/// <param name="word">The word to lookup</param>
		/// <returns>the dictionary translation for the given word</returns>
		public async Task<Cx_dict> TransformWordFrom_from_langTo_to_lang_wordGetAsync(string from_lang, string to_lang, string word, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transform/word/from/"+ (from_lang==null? "" : System.Uri.EscapeDataString(from_lang))+"/to/"+ (to_lang==null? "" : System.Uri.EscapeDataString(to_lang))+"/"+ (word==null? "" : System.Uri.EscapeDataString(word));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Cx_dict>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetch the dictionary meaning of a word
		/// Fetches the dictionary meaning of a word from a language and displays
		/// it in the target language.
		/// 
		/// Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
		/// 
		/// TransformWordFrom_from_langTo_to_lang_word_providerGet transform/word/from/{from_lang}/to/{to_lang}/{word}/{provider}
		/// </summary>
		/// <param name="from_lang">The source language code</param>
		/// <param name="to_lang">The target language code</param>
		/// <param name="word">The word to lookup</param>
		/// <param name="provider">The dictionary provider id</param>
		/// <returns>the dictionary translation for the given word</returns>
		public async Task<Cx_dict> TransformWordFrom_from_langTo_to_lang_word_providerGetAsync(string from_lang, string to_lang, string word, TransformWordFrom_from_langTo_to_lang_word_providerGetProvider provider, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transform/word/from/"+ (from_lang==null? "" : System.Uri.EscapeDataString(from_lang))+"/to/"+ (to_lang==null? "" : System.Uri.EscapeDataString(to_lang))+"/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/"+provider;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Cx_dict>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum MediaMathCheck_typePostType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tex = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inline-tex")]
		inlineMinustex = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		chem = 2,
	}
	
	public enum MediaMathRender_format_hashGetFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		svg = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mml = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		png = 2,
	}
	
	public enum MetricsBytes_differenceAbsoluteAggregate_project_editor_type_page_type_granularity_start_endGetEditor_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-editor-types")]
		allMinuseditorMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anonymous = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group-bot")]
		groupMinusbot = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name-bot")]
		nameMinusbot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 4,
	}
	
	public enum MetricsBytes_differenceAbsoluteAggregate_project_editor_type_page_type_granularity_start_endGetPage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-page-types")]
		allMinuspageMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		content = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="non-content")]
		nonMinuscontent = 2,
	}
	
	public enum MetricsBytes_differenceAbsoluteAggregate_project_editor_type_page_type_granularity_start_endGetGranularity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		daily = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		monthly = 1,
	}
	
	public enum MetricsBytes_differenceAbsolutePer_page_project_page_title_editor_type_granularity_start_endGetEditor_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-editor-types")]
		allMinuseditorMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anonymous = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group-bot")]
		groupMinusbot = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name-bot")]
		nameMinusbot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 4,
	}
	
	public enum MetricsBytes_differenceNetAggregate_project_editor_type_page_type_granularity_start_endGetEditor_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-editor-types")]
		allMinuseditorMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anonymous = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group-bot")]
		groupMinusbot = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name-bot")]
		nameMinusbot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 4,
	}
	
	public enum MetricsBytes_differenceNetAggregate_project_editor_type_page_type_granularity_start_endGetPage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-page-types")]
		allMinuspageMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		content = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="non-content")]
		nonMinuscontent = 2,
	}
	
	public enum MetricsBytes_differenceNetPer_page_project_page_title_editor_type_granularity_start_endGetEditor_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-editor-types")]
		allMinuseditorMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anonymous = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group-bot")]
		groupMinusbot = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name-bot")]
		nameMinusbot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 4,
	}
	
	public enum MetricsEdited_pagesAggregate_project_editor_type_page_type_activity_level_granularity_start_endGetEditor_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-editor-types")]
		allMinuseditorMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anonymous = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group-bot")]
		groupMinusbot = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name-bot")]
		nameMinusbot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 4,
	}
	
	public enum MetricsEdited_pagesAggregate_project_editor_type_page_type_activity_level_granularity_start_endGetPage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-page-types")]
		allMinuspageMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		content = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="non-content")]
		nonMinuscontent = 2,
	}
	
	public enum MetricsEdited_pagesAggregate_project_editor_type_page_type_activity_level_granularity_start_endGetActivity_level
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-activity-levels")]
		allMinusactivityMinuslevels = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1..4-edits")]
		_1__4Minusedits = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5..24-edits")]
		_5__24Minusedits = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25..99-edits")]
		_25__99Minusedits = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="100..-edits")]
		_100__Minusedits = 4,
	}
	
	public enum MetricsEdited_pagesNew_project_editor_type_page_type_granularity_start_endGetEditor_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-editor-types")]
		allMinuseditorMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anonymous = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group-bot")]
		groupMinusbot = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name-bot")]
		nameMinusbot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 4,
	}
	
	public enum MetricsEdited_pagesNew_project_editor_type_page_type_granularity_start_endGetPage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-page-types")]
		allMinuspageMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		content = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="non-content")]
		nonMinuscontent = 2,
	}
	
	public enum MetricsEdited_pagesTop_by_absolute_bytes_difference_project_editor_type_page_type_year_month_dayGetEditor_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-editor-types")]
		allMinuseditorMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anonymous = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group-bot")]
		groupMinusbot = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name-bot")]
		nameMinusbot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 4,
	}
	
	public enum MetricsEdited_pagesTop_by_absolute_bytes_difference_project_editor_type_page_type_year_month_dayGetPage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-page-types")]
		allMinuspageMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		content = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="non-content")]
		nonMinuscontent = 2,
	}
	
	public enum MetricsEdited_pagesTop_by_edits_project_editor_type_page_type_year_month_dayGetEditor_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-editor-types")]
		allMinuseditorMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anonymous = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group-bot")]
		groupMinusbot = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name-bot")]
		nameMinusbot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 4,
	}
	
	public enum MetricsEdited_pagesTop_by_edits_project_editor_type_page_type_year_month_dayGetPage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-page-types")]
		allMinuspageMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		content = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="non-content")]
		nonMinuscontent = 2,
	}
	
	public enum MetricsEdited_pagesTop_by_net_bytes_difference_project_editor_type_page_type_year_month_dayGetEditor_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-editor-types")]
		allMinuseditorMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anonymous = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group-bot")]
		groupMinusbot = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name-bot")]
		nameMinusbot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 4,
	}
	
	public enum MetricsEdited_pagesTop_by_net_bytes_difference_project_editor_type_page_type_year_month_dayGetPage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-page-types")]
		allMinuspageMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		content = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="non-content")]
		nonMinuscontent = 2,
	}
	
	public enum MetricsEditorsAggregate_project_editor_type_page_type_activity_level_granularity_start_endGetEditor_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-editor-types")]
		allMinuseditorMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anonymous = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group-bot")]
		groupMinusbot = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name-bot")]
		nameMinusbot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 4,
	}
	
	public enum MetricsEditorsAggregate_project_editor_type_page_type_activity_level_granularity_start_endGetPage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-page-types")]
		allMinuspageMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		content = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="non-content")]
		nonMinuscontent = 2,
	}
	
	public enum MetricsEditorsAggregate_project_editor_type_page_type_activity_level_granularity_start_endGetActivity_level
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-activity-levels")]
		allMinusactivityMinuslevels = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1..4-edits")]
		_1__4Minusedits = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5..24-edits")]
		_5__24Minusedits = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25..99-edits")]
		_25__99Minusedits = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="100..-edits")]
		_100__Minusedits = 4,
	}
	
	public enum MetricsEditorsTop_by_absolute_bytes_difference_project_editor_type_page_type_year_month_dayGetEditor_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-editor-types")]
		allMinuseditorMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anonymous = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group-bot")]
		groupMinusbot = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name-bot")]
		nameMinusbot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 4,
	}
	
	public enum MetricsEditorsTop_by_absolute_bytes_difference_project_editor_type_page_type_year_month_dayGetPage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-page-types")]
		allMinuspageMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		content = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="non-content")]
		nonMinuscontent = 2,
	}
	
	public enum MetricsEditorsTop_by_edits_project_editor_type_page_type_year_month_dayGetEditor_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-editor-types")]
		allMinuseditorMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anonymous = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group-bot")]
		groupMinusbot = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name-bot")]
		nameMinusbot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 4,
	}
	
	public enum MetricsEditorsTop_by_edits_project_editor_type_page_type_year_month_dayGetPage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-page-types")]
		allMinuspageMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		content = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="non-content")]
		nonMinuscontent = 2,
	}
	
	public enum MetricsEditorsTop_by_net_bytes_difference_project_editor_type_page_type_year_month_dayGetEditor_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-editor-types")]
		allMinuseditorMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anonymous = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group-bot")]
		groupMinusbot = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name-bot")]
		nameMinusbot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 4,
	}
	
	public enum MetricsEditorsTop_by_net_bytes_difference_project_editor_type_page_type_year_month_dayGetPage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-page-types")]
		allMinuspageMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		content = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="non-content")]
		nonMinuscontent = 2,
	}
	
	public enum MetricsEditsAggregate_project_editor_type_page_type_granularity_start_endGetEditor_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-editor-types")]
		allMinuseditorMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anonymous = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group-bot")]
		groupMinusbot = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name-bot")]
		nameMinusbot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 4,
	}
	
	public enum MetricsEditsAggregate_project_editor_type_page_type_granularity_start_endGetPage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-page-types")]
		allMinuspageMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		content = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="non-content")]
		nonMinuscontent = 2,
	}
	
	public enum MetricsEditsPer_page_project_page_title_editor_type_granularity_start_endGetEditor_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-editor-types")]
		allMinuseditorMinustypes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anonymous = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group-bot")]
		groupMinusbot = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name-bot")]
		nameMinusbot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 4,
	}
	
	public enum MetricsLegacyPagecountsAggregate_project_access_site_granularity_start_endGetAccess_site
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-sites")]
		allMinussites = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="desktop-site")]
		desktopMinussite = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mobile-site")]
		mobileMinussite = 2,
	}
	
	public enum MetricsLegacyPagecountsAggregate_project_access_site_granularity_start_endGetGranularity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hourly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		daily = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		monthly = 2,
	}
	
	public enum MetricsPageviewsAggregate_project_access_agent_granularity_start_endGetAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-access")]
		allMinusaccess = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desktop = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mobile-app")]
		mobileMinusapp = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mobile-web")]
		mobileMinusweb = 3,
	}
	
	public enum MetricsPageviewsAggregate_project_access_agent_granularity_start_endGetAgent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-agents")]
		allMinusagents = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		spider = 2,
	}
	
	public enum MetricsPageviewsPer_article_project_access_agent_article_granularity_start_endGetAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-access")]
		allMinusaccess = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desktop = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mobile-app")]
		mobileMinusapp = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mobile-web")]
		mobileMinusweb = 3,
	}
	
	public enum MetricsPageviewsPer_article_project_access_agent_article_granularity_start_endGetAgent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-agents")]
		allMinusagents = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		spider = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bot = 3,
	}
	
	public enum MetricsPageviewsTop_by_country_project_access_year_monthGetAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-access")]
		allMinusaccess = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desktop = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mobile-app")]
		mobileMinusapp = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mobile-web")]
		mobileMinusweb = 3,
	}
	
	public enum MetricsPageviewsTop_project_access_year_month_dayGetAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-access")]
		allMinusaccess = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desktop = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mobile-app")]
		mobileMinusapp = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mobile-web")]
		mobileMinusweb = 3,
	}
	
	public enum MetricsUnique_devices_project_access_site_granularity_start_endGetAccess_site
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all-sites")]
		allMinussites = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="desktop-site")]
		desktopMinussite = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mobile-site")]
		mobileMinussite = 2,
	}
	
	public enum TransformHtmlFrom_from_langTo_to_lang_providerPostProvider
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Apertium = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yandex = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Youdao = 2,
	}
	
	public enum TransformListTool_toolGetTool
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mt = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dictionary = 1,
	}
	
	public enum TransformWordFrom_from_langTo_to_lang_word_providerGetProvider
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JsonDict = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dictd = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
