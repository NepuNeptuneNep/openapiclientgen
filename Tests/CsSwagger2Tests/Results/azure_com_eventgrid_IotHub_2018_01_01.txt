//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Information about the device connection state event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeviceConnectionStateEventInfo
	{
		
		/// <summary>
		/// Sequence number is string representation of a hexadecimal number. string compare can be used to identify the larger number because both in ASCII and HEX numbers come after alphabets. If you are converting the string to hex, then the number is a 256 bit number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sequenceNumber")]
		public string SequenceNumber { get; set; }
	}
	
	/// <summary>
	/// Schema of the Data property of an EventGridEvent for a device connection state event (DeviceConnected, DeviceDisconnected).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeviceConnectionStateEventProperties
	{
		
		/// <summary>
		/// Information about the device connection state event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceConnectionStateEventInfo")]
		public DeviceConnectionStateEventInfo DeviceConnectionStateEventInfo { get; set; }
		
		/// <summary>
		/// The unique identifier of the device. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &#35; * ? ! ( ) , = @ ; $ '.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// Name of the IoT Hub where the device was created or deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hubName")]
		public string HubName { get; set; }
		
		/// <summary>
		/// The unique identifier of the module. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &#35; * ? ! ( ) , = @ ; $ '.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moduleId")]
		public string ModuleId { get; set; }
	}
	
	/// <summary>
	/// Schema of the Data property of an EventGridEvent for a device life cycle event (DeviceCreated, DeviceDeleted).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeviceLifeCycleEventProperties
	{
		
		/// <summary>
		/// The unique identifier of the device. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &#35; * ? ! ( ) , = @ ; $ '.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// Name of the IoT Hub where the device was created or deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hubName")]
		public string HubName { get; set; }
		
		/// <summary>
		/// Information about the device twin, which is the cloud representation of application device metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="twin")]
		public DeviceTwinInfo Twin { get; set; }
	}
	
	/// <summary>
	/// Information about the device twin, which is the cloud representation of application device metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeviceTwinInfo
	{
		
		/// <summary>
		/// Authentication type used for this device: either SAS, SelfSigned, or CertificateAuthority.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authenticationType")]
		public string AuthenticationType { get; set; }
		
		/// <summary>
		/// Count of cloud to device messages sent to this device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudToDeviceMessageCount")]
		public System.Nullable<System.Double> CloudToDeviceMessageCount { get; set; }
		
		/// <summary>
		/// Whether the device is connected or disconnected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionState")]
		public string ConnectionState { get; set; }
		
		/// <summary>
		/// The unique identifier of the device twin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// A piece of information that describes the content of the device twin. Each etag is guaranteed to be unique per device twin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ISO8601 timestamp of the last activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastActivityTime")]
		public string LastActivityTime { get; set; }
		
		/// <summary>
		/// Properties JSON element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DeviceTwinInfoProperties Properties { get; set; }
		
		/// <summary>
		/// Whether the device twin is enabled or disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The ISO8601 timestamp of the last device twin status update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusUpdateTime")]
		public string StatusUpdateTime { get; set; }
		
		/// <summary>
		/// An integer that is incremented by one each time the device twin is updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Double> Version { get; set; }
		
		/// <summary>
		/// The thumbprint is a unique value for the x509 certificate, commonly used to find a particular certificate in a certificate store. The thumbprint is dynamically generated using the SHA1 algorithm, and does not physically exist in the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="x509Thumbprint")]
		public DeviceTwinInfoX509Thumbprint X509Thumbprint { get; set; }
	}
	
	public class DeviceTwinInfoProperties
	{
		
		/// <summary>
		/// A portion of the properties that can be written only by the application back-end, and read by the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desired")]
		public DeviceTwinProperties Desired { get; set; }
		
		/// <summary>
		/// A portion of the properties that can be written only by the application back-end, and read by the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reported")]
		public DeviceTwinProperties Reported { get; set; }
	}
	
	/// <summary>
	/// A portion of the properties that can be written only by the application back-end, and read by the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeviceTwinProperties
	{
		
		/// <summary>
		/// Metadata information for the properties JSON document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public DeviceTwinMetadata Metadata { get; set; }
		
		/// <summary>
		/// Version of device twin properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Double> Version { get; set; }
	}
	
	/// <summary>
	/// Metadata information for the properties JSON document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeviceTwinMetadata
	{
		
		/// <summary>
		/// The ISO8601 timestamp of the last time the properties were updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
	}
	
	public class DeviceTwinInfoX509Thumbprint
	{
		
		/// <summary>
		/// Primary thumbprint for the x509 certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryThumbprint")]
		public string PrimaryThumbprint { get; set; }
		
		/// <summary>
		/// Secondary thumbprint for the x509 certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryThumbprint")]
		public string SecondaryThumbprint { get; set; }
	}
	
	/// <summary>
	/// Schema of the Data property of an EventGridEvent for a device telemetry event (DeviceTelemetry).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeviceTelemetryEventProperties
	{
		
		/// <summary>
		/// The content of the message from the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Application properties are user-defined strings that can be added to the message. These fields are optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// System properties help identify contents and source of the messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemProperties")]
		public System.Collections.Generic.Dictionary<string, string> SystemProperties { get; set; }
	}
	
	/// <summary>
	/// Event data for Microsoft.Devices.DeviceConnected event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IotHubDeviceConnectedEventData
	{
	}
	
	/// <summary>
	/// Event data for Microsoft.Devices.DeviceCreated event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IotHubDeviceCreatedEventData
	{
	}
	
	/// <summary>
	/// Event data for Microsoft.Devices.DeviceDeleted event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IotHubDeviceDeletedEventData
	{
	}
	
	/// <summary>
	/// Event data for Microsoft.Devices.DeviceDisconnected event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IotHubDeviceDisconnectedEventData
	{
	}
	
	/// <summary>
	/// Event data for Microsoft.Devices.DeviceTelemetry event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IotHubDeviceTelemetryEventData
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
