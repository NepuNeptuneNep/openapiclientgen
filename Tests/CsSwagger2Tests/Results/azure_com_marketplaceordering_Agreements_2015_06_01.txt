//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Agreement Terms definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AgreementProperties
	{
		
		/// <summary>
		/// If any version of the terms have been accepted, otherwise false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accepted")]
		public System.Nullable<System.Boolean> Accepted { get; set; }
		
		/// <summary>
		/// Link to HTML with Microsoft and Publisher terms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licenseTextLink")]
		public string LicenseTextLink { get; set; }
		
		/// <summary>
		/// Plan identifier string of image being deployed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan")]
		public string Plan { get; set; }
		
		/// <summary>
		/// Link to the privacy policy of the publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privacyPolicyLink")]
		public string PrivacyPolicyLink { get; set; }
		
		/// <summary>
		/// Offer identifier string of image being deployed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public string Product { get; set; }
		
		/// <summary>
		/// Publisher identifier string of image being deployed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// Date and time in UTC of when the terms were accepted. This is empty if Accepted is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retrieveDatetime")]
		public System.Nullable<System.DateTimeOffset> RetrieveDatetime { get; set; }
		
		/// <summary>
		/// Terms signature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signature")]
		public string Signature { get; set; }
	}
	
	/// <summary>
	/// Terms properties for provided Publisher/Offer/Plan tuple
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AgreementTerms : Resource
	{
		
		/// <summary>
		/// Agreement Terms definition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AgreementProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Error response indicates Microsoft.MarketplaceOrdering service is not able to process the incoming request. The reason is provided in the error message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// The details of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public object Error { get; set; }
	}
	
	/// <summary>
	/// Microsoft.MarketplaceOrdering REST API operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that represents the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Result of the request to list MarketplaceOrdering operations. It contains a list of operations and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// URL to get the next set of operation list results if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Microsoft.MarketplaceOrdering operations supported by the Microsoft.MarketplaceOrdering resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// ARM resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available Microsoft.MarketplaceOrdering REST API operations.
		/// Operations_List providers/Microsoft.MarketplaceOrdering/operations
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.MarketplaceOrdering/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List marketplace agreements in the subscription.
		/// MarketplaceAgreements_List subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <returns>Terms returned successfully</returns>
		public async Task<AgreementTerms[]> MarketplaceAgreements_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.MarketplaceOrdering/agreements?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AgreementTerms[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get marketplace agreement.
		/// MarketplaceAgreements_GetAgreement subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="publisherId">Publisher identifier string of image being deployed.</param>
		/// <param name="offerId">Offer identifier string of image being deployed.</param>
		/// <param name="planId">Plan identifier string of image being deployed.</param>
		/// <returns>Terms returned successfully</returns>
		public async Task<AgreementTerms> MarketplaceAgreements_GetAgreementAsync(string api_version, string subscriptionId, string publisherId, string offerId, string planId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.MarketplaceOrdering/agreements/"+ (publisherId==null? "" : System.Uri.EscapeDataString(publisherId))+"/offers/"+ (offerId==null? "" : System.Uri.EscapeDataString(offerId))+"/plans/"+ (planId==null? "" : System.Uri.EscapeDataString(planId))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AgreementTerms>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancel marketplace terms.
		/// MarketplaceAgreements_Cancel subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}/cancel
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="publisherId">Publisher identifier string of image being deployed.</param>
		/// <param name="offerId">Offer identifier string of image being deployed.</param>
		/// <param name="planId">Plan identifier string of image being deployed.</param>
		/// <returns>OK. The request was successfully processed and the terms were rejected.</returns>
		public async Task<AgreementTerms> MarketplaceAgreements_CancelAsync(string api_version, string subscriptionId, string publisherId, string offerId, string planId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.MarketplaceOrdering/agreements/"+ (publisherId==null? "" : System.Uri.EscapeDataString(publisherId))+"/offers/"+ (offerId==null? "" : System.Uri.EscapeDataString(offerId))+"/plans/"+ (planId==null? "" : System.Uri.EscapeDataString(planId))+"/cancel?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AgreementTerms>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sign marketplace terms.
		/// MarketplaceAgreements_Sign subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}/sign
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="publisherId">Publisher identifier string of image being deployed.</param>
		/// <param name="offerId">Offer identifier string of image being deployed.</param>
		/// <param name="planId">Plan identifier string of image being deployed.</param>
		/// <returns>OK. The request was successfully processed and the terms were accepted.</returns>
		public async Task<AgreementTerms> MarketplaceAgreements_SignAsync(string api_version, string subscriptionId, string publisherId, string offerId, string planId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.MarketplaceOrdering/agreements/"+ (publisherId==null? "" : System.Uri.EscapeDataString(publisherId))+"/offers/"+ (offerId==null? "" : System.Uri.EscapeDataString(offerId))+"/plans/"+ (planId==null? "" : System.Uri.EscapeDataString(planId))+"/sign?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AgreementTerms>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get marketplace terms.
		/// MarketplaceAgreements_Get subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="offerType">Offer Type, currently only virtualmachine type is supported.</param>
		/// <param name="publisherId">Publisher identifier string of image being deployed.</param>
		/// <param name="offerId">Offer identifier string of image being deployed.</param>
		/// <param name="planId">Plan identifier string of image being deployed.</param>
		/// <returns>Terms returned successfully</returns>
		public async Task<AgreementTerms> MarketplaceAgreements_GetAsync(string api_version, string subscriptionId, MarketplaceAgreements_GetOfferType offerType, string publisherId, string offerId, string planId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.MarketplaceOrdering/offerTypes/"+offerType+"/publishers/"+ (publisherId==null? "" : System.Uri.EscapeDataString(publisherId))+"/offers/"+ (offerId==null? "" : System.Uri.EscapeDataString(offerId))+"/plans/"+ (planId==null? "" : System.Uri.EscapeDataString(planId))+"/agreements/current?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AgreementTerms>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Save marketplace terms.
		/// MarketplaceAgreements_Create subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="offerType">Offer Type, currently only virtualmachine type is supported.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="publisherId">Publisher identifier string of image being deployed.</param>
		/// <param name="offerId">Offer identifier string of image being deployed.</param>
		/// <param name="planId">Plan identifier string of image being deployed.</param>
		/// <param name="requestBody">Parameters supplied to the Create Marketplace Terms operation.</param>
		/// <returns>OK. The request was successfully processed and the terms were accepted or acceptance revoked as per the request body.</returns>
		public async Task<AgreementTerms> MarketplaceAgreements_CreateAsync(string api_version, MarketplaceAgreements_GetOfferType offerType, string subscriptionId, string publisherId, string offerId, string planId, AgreementTerms requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.MarketplaceOrdering/offerTypes/"+offerType+"/publishers/"+ (publisherId==null? "" : System.Uri.EscapeDataString(publisherId))+"/offers/"+ (offerId==null? "" : System.Uri.EscapeDataString(offerId))+"/plans/"+ (planId==null? "" : System.Uri.EscapeDataString(planId))+"/agreements/current?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AgreementTerms>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum MarketplaceAgreements_GetOfferType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		virtualmachine = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
