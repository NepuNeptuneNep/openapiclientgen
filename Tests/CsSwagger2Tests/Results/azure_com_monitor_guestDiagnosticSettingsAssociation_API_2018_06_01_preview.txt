//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Describes the format of Error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// A guest diagnostic settings association.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GuestDiagnosticSettingsAssociation
	{
		
		/// <summary>
		/// The guest diagnostic settings name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guestDiagnosticSettingsName")]
		public string GuestDiagnosticSettingsName { get; set; }
	}
	
	/// <summary>
	/// A list of guest diagnostic settings association.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GuestDiagnosticSettingsAssociationList
	{
		
		/// <summary>
		/// Provides the link to retrieve the next set of elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of guest diagnostic settings association.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public GuestDiagnosticSettingsAssociationResource[] Value { get; set; }
	}
	
	/// <summary>
	/// Virtual machine guest diagnostic settings resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GuestDiagnosticSettingsAssociationResource
	{
		
		/// <summary>
		/// A guest diagnostic settings association.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GuestDiagnosticSettingsAssociation Properties { get; set; }
	}
	
	/// <summary>
	/// Guest diagnostic setting resource for patch operations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GuestDiagnosticSettingsAssociationResourcePatch
	{
		
		/// <summary>
		/// A guest diagnostic settings association.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GuestDiagnosticSettingsAssociation Properties { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public object Tags { get; set; }
	}
	
	/// <summary>
	/// An azure resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Azure resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Azure resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public object Tags { get; set; }
		
		/// <summary>
		/// Azure resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get a list of all guest diagnostic settings association in a subscription.
		/// GuestDiagnosticsSettingsAssociation_List subscriptions/{subscriptionId}/providers/microsoft.insights/guestDiagnosticSettingsAssociations
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>The request succeeded.</returns>
		public async Task<GuestDiagnosticSettingsAssociationList> GuestDiagnosticsSettingsAssociation_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/microsoft.insights/guestDiagnosticSettingsAssociations&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GuestDiagnosticSettingsAssociationList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of all guest diagnostic settings association in a resource group.
		/// GuestDiagnosticsSettingsAssociation_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/guestDiagnosticSettingsAssociations
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>The request succeeded.</returns>
		public async Task<GuestDiagnosticSettingsAssociationList> GuestDiagnosticsSettingsAssociation_ListByResourceGroupAsync(string resourceGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/guestDiagnosticSettingsAssociations&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GuestDiagnosticSettingsAssociationList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets guest diagnostics association settings.
		/// GuestDiagnosticsSettingsAssociation_Get {resourceUri}/providers/microsoft.insights/guestDiagnosticSettingsAssociation/{associationName}
		/// </summary>
		/// <param name="resourceUri">The fully qualified ID of the resource, including the resource name and resource type.</param>
		/// <param name="associationName">The name of the diagnostic settings association.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>The request succeeded.</returns>
		public async Task<GuestDiagnosticSettingsAssociationResource> GuestDiagnosticsSettingsAssociation_GetAsync(string resourceUri, string associationName, string api_version)
		{
			var requestUri = ""+ (resourceUri==null? "" : System.Uri.EscapeDataString(resourceUri))+"/providers/microsoft.insights/guestDiagnosticSettingsAssociation/"+ (associationName==null? "" : System.Uri.EscapeDataString(associationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GuestDiagnosticSettingsAssociationResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates guest diagnostics settings association.
		/// GuestDiagnosticsSettingsAssociation_CreateOrUpdate {resourceUri}/providers/microsoft.insights/guestDiagnosticSettingsAssociation/{associationName}
		/// </summary>
		/// <param name="resourceUri">The fully qualified ID of the resource, including the resource name and resource type.</param>
		/// <param name="associationName">The name of the diagnostic settings association.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The diagnostic settings association to create or update.</param>
		/// <returns>An existing guest diagnostic settings association was successfully updated.</returns>
		public async Task<GuestDiagnosticSettingsAssociationResource> GuestDiagnosticsSettingsAssociation_CreateOrUpdateAsync(string resourceUri, string associationName, string api_version, GuestDiagnosticSettingsAssociationResource requestBody)
		{
			var requestUri = ""+ (resourceUri==null? "" : System.Uri.EscapeDataString(resourceUri))+"/providers/microsoft.insights/guestDiagnosticSettingsAssociation/"+ (associationName==null? "" : System.Uri.EscapeDataString(associationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GuestDiagnosticSettingsAssociationResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete guest diagnostics association settings.
		/// GuestDiagnosticsSettingsAssociation_Delete {resourceUri}/providers/microsoft.insights/guestDiagnosticSettingsAssociation/{associationName}
		/// </summary>
		/// <param name="resourceUri">The fully qualified ID of the resource, including the resource name and resource type.</param>
		/// <param name="associationName">The name of the diagnostic settings association.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>The diagnostic settings association was successfully deleted.</returns>
		public async Task GuestDiagnosticsSettingsAssociation_DeleteAsync(string resourceUri, string associationName, string api_version)
		{
			var requestUri = ""+ (resourceUri==null? "" : System.Uri.EscapeDataString(resourceUri))+"/providers/microsoft.insights/guestDiagnosticSettingsAssociation/"+ (associationName==null? "" : System.Uri.EscapeDataString(associationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing guestDiagnosticsSettingsAssociation Resource. To update other fields use the CreateOrUpdate method
		/// GuestDiagnosticsSettingsAssociation_Update {resourceUri}/providers/microsoft.insights/guestDiagnosticSettingsAssociation/{associationName}
		/// </summary>
		/// <param name="resourceUri">The fully qualified ID of the resource, including the resource name and resource type.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="associationName">The name of the diagnostic settings association.</param>
		/// <param name="requestBody">Parameters supplied to the operation.</param>
		/// <returns>An existing guest diagnostics setting resource was successfully updated.</returns>
		public async Task<GuestDiagnosticSettingsAssociationResource> GuestDiagnosticsSettingsAssociation_UpdateAsync(string resourceUri, string api_version, string associationName, GuestDiagnosticSettingsAssociationResourcePatch requestBody)
		{
			var requestUri = ""+ (resourceUri==null? "" : System.Uri.EscapeDataString(resourceUri))+"/providers/microsoft.insights/guestDiagnosticSettingsAssociation/"+ (associationName==null? "" : System.Uri.EscapeDataString(associationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GuestDiagnosticSettingsAssociationResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
