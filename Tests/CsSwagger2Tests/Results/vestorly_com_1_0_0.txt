//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Advisor
	{
		
		[System.Runtime.Serialization.DataMember(Name="about")]
		public string About { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="account_type")]
		public string Account_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adv_brochure")]
		public string Adv_brochure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="api_key")]
		public string Api_key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="company")]
		public string Company { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="compliance_bcc_email_address")]
		public string Compliance_bcc_email_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dashboard_url")]
		public string Dashboard_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disclosure")]
		public string Disclosure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email_report_blast")]
		public string Email_report_blast { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="external_options")]
		public string External_options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkedin")]
		public string Linkedin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plan")]
		public string Plan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profile_picture")]
		public string Profile_picture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reg_number")]
		public string Reg_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="twitter_handle")]
		public string Twitter_handle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Advisorresponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="advisor")]
		public Advisor Advisor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Advisors
	{
		
		[System.Runtime.Serialization.DataMember(Name="advisors")]
		public Advisor[] Advisors1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Article
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="external_url")]
		public string External_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="external_url_source")]
		public string External_url_source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="external_url_type")]
		public string External_url_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_height")]
		public System.Nullable<System.Int32> Image_height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_path")]
		public string Image_path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_width")]
		public System.Nullable<System.Int32> Image_width { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_mobile_proxy_needed")]
		public System.Nullable<System.Boolean> Is_mobile_proxy_needed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_proxy_needed")]
		public System.Nullable<System.Boolean> Is_proxy_needed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_responsive")]
		public System.Nullable<System.Boolean> Is_responsive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logo_url")]
		public string Logo_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="needs_sanitize")]
		public System.Nullable<System.Boolean> Needs_sanitize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proxy_url")]
		public string Proxy_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="redirector_link")]
		public string Redirector_link { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="square_logo_url")]
		public string Square_logo_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suitability_score")]
		public string Suitability_score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArticlePhrase
	{
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.Int32> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArticlePhraseresponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="article_phrase")]
		public ArticlePhrase Article_phrase { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArticlePhrases
	{
		
		[System.Runtime.Serialization.DataMember(Name="article_phrases")]
		public ArticlePhrase[] Article_phrases { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Articleresponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="article")]
		public Article Article { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Articles
	{
		
		[System.Runtime.Serialization.DataMember(Name="articles")]
		public Article[] Articles1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomFeed
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="custom_feed_filter_id")]
		public string Custom_feed_filter_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="custom_feed_permission_id")]
		public string Custom_feed_permission_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="custom_feed_template_id")]
		public string Custom_feed_template_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="custom_feed_visibility")]
		public System.Nullable<System.Int32> Custom_feed_visibility { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Boolean> Default { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_label")]
		public string Display_label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_auto_curated_newsletter_custom_feed")]
		public System.Nullable<System.Boolean> Is_auto_curated_newsletter_custom_feed { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="popularity")]
		public System.Nullable<System.Single> Popularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="premium_content")]
		public System.Nullable<System.Boolean> Premium_content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seed_custom_feed_id")]
		public string Seed_custom_feed_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="third_party_articles_custom_feed_id")]
		public string Third_party_articles_custom_feed_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomFeedFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="custom_feed_id")]
		public string Custom_feed_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_ids")]
		public string[] Source_ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomFeedFilterInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="custom_feed_id")]
		public string Custom_feed_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_ids")]
		public string[] Source_ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomFeedFilterresponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="custom_feed_filter")]
		public CustomFeedFilter Custom_feed_filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomFeedFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="custom_feed_filters")]
		public CustomFeedFilter[] Custom_feed_filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomFeedInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="custom_feed_filter_id")]
		public string Custom_feed_filter_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="custom_feed_permission_id")]
		public string Custom_feed_permission_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="custom_feed_visibility")]
		public System.Nullable<System.Int32> Custom_feed_visibility { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Boolean> Default { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_auto_curated_newsletter_custom_feed")]
		public System.Nullable<System.Boolean> Is_auto_curated_newsletter_custom_feed { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="popularity")]
		public System.Nullable<System.Single> Popularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="premium_content")]
		public System.Nullable<System.Boolean> Premium_content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seed_custom_feed_id")]
		public string Seed_custom_feed_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="social_posting_id")]
		public string Social_posting_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="third_party_articles_custom_feed_id")]
		public string Third_party_articles_custom_feed_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomFeedresponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="custom_feed")]
		public CustomFeed Custom_feed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomFeeds
	{
		
		[System.Runtime.Serialization.DataMember(Name="custom_feeds")]
		public CustomFeed[] Custom_feeds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Event
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="advisor_id")]
		public string Advisor_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_content")]
		public EventContent Event_content { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="original_url")]
		public string Original_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originator_email")]
		public string Originator_email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originator_id")]
		public string Originator_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent_event_id")]
		public string Parent_event_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referer")]
		public string Referer { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subject_email")]
		public string Subject_email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subject_id")]
		public string Subject_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EventType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		page_view = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sign_up = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sign_in = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		content_posted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		create_post = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publish_post = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		update_post = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		delete_post = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unpublish_post = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invite = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publish_newsletter = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publish_social = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		click = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		delivered = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		open = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dropped = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bounce = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventContent
	{
		
		/// <summary>
		/// Mongo id of event
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content_field")]
		public string Content_field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content_id")]
		public string Content_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content_type")]
		public string Content_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slug")]
		public string Slug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="advisor_id")]
		public string Advisor_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_content")]
		public EventContent Event_content { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="original_url")]
		public string Original_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originator_email")]
		public string Originator_email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originator_id")]
		public string Originator_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent_event_id")]
		public string Parent_event_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referer")]
		public string Referer { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subject_email")]
		public string Subject_email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subject_id")]
		public string Subject_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EventType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Eventcreateresponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Eventresponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="event")]
		public Event Event { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Events
	{
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public Event[] Events1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Features
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Group
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autopublish")]
		public System.Nullable<System.Boolean> Autopublish { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_default")]
		public System.Nullable<System.Boolean> Is_default { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_hidden")]
		public System.Nullable<System.Boolean> Is_hidden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new_weekly_mailer_content")]
		public string New_weekly_mailer_content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newsletter_subject")]
		public string Newsletter_subject { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number_articles_per_group")]
		public System.Nullable<System.Int32> Number_articles_per_group { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number_articles_per_newsletter")]
		public System.Nullable<System.Int32> Number_articles_per_newsletter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GroupInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autopublish")]
		public System.Nullable<System.Boolean> Autopublish { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_default")]
		public System.Nullable<System.Boolean> Is_default { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_hidden")]
		public System.Nullable<System.Boolean> Is_hidden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new_weekly_mailer_content")]
		public string New_weekly_mailer_content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newsletter_subject")]
		public string Newsletter_subject { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number_articles_per_group")]
		public System.Nullable<System.Int32> Number_articles_per_group { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number_articles_per_newsletter")]
		public System.Nullable<System.Int32> Number_articles_per_newsletter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Groupresponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="group")]
		public Group Group { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Groups
	{
		
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public Group[] Groups1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Member
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="age")]
		public string Age { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assets")]
		public string Assets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data_estimated")]
		public System.Nullable<System.Boolean> Data_estimated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="education")]
		public string Education { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="estimated_location")]
		public string Estimated_location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="estimated_zip")]
		public string Estimated_zip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="genuine_email")]
		public System.Nullable<System.Boolean> Genuine_email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="high_net_worth")]
		public System.Nullable<System.Boolean> High_net_worth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="home_market_value")]
		public string Home_market_value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="home_owner_status")]
		public string Home_owner_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hometown")]
		public string Hometown { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="household_income")]
		public string Household_income { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interest_consultation")]
		public string Interest_consultation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interest_in_new_advisor")]
		public string Interest_in_new_advisor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invited_by")]
		public string Invited_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invited_on")]
		public string Invited_on { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_client")]
		public System.Nullable<System.Boolean> Is_client { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_hidden")]
		public System.Nullable<System.Boolean> Is_hidden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_active_date")]
		public string Last_active_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marital_status")]
		public string Marital_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="occupation")]
		public string Occupation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="picture_url")]
		public string Picture_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="portfolio_size")]
		public string Portfolio_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profile_url")]
		public string Profile_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="register_ip_addr")]
		public string Register_ip_addr { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signed_up_with")]
		public string Signed_up_with { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscribed_group_ids")]
		public string[] Subscribed_group_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unsubscribed")]
		public System.Nullable<System.Boolean> Unsubscribed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unsubscribed_date")]
		public System.Nullable<System.Boolean> Unsubscribed_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_type")]
		public string User_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MemberEvent
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content_url")]
		public string Content_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_date")]
		public string Event_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_source")]
		public string Event_source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_type")]
		public string Event_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="member_id")]
		public string Member_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="original_url")]
		public string Original_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originator_email")]
		public string Originator_email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originator_group_id")]
		public string Originator_group_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originator_id")]
		public string Originator_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		public string Originator_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originator_type")]
		public string Originator_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent_event_id")]
		public string Parent_event_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent_originator_id")]
		public string Parent_originator_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referer")]
		public string Referer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subject_id")]
		public string Subject_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MemberEvents
	{
		
		[System.Runtime.Serialization.DataMember(Name="member_events")]
		public MemberEvent[] Member_events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public TruncatedMember[] Members { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TruncatedMember
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="added_on")]
		public string Added_on { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="picture_url")]
		public string Picture_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MemberReport
	{
		
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_count")]
		public System.Nullable<System.Int32> Event_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originator_group_id")]
		public string Originator_group_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent_originator_id")]
		public string Parent_originator_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MemberReports
	{
		
		[System.Runtime.Serialization.DataMember(Name="member_reports")]
		public MemberReport[] Member_reports { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Memberresponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="member")]
		public Member Member { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Members
	{
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public Member[] Members1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="more_results")]
		public System.Nullable<System.Boolean> More_results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Meta
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Newsletter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="click_count")]
		public System.Nullable<System.Int64> Click_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_default")]
		public System.Nullable<System.Boolean> Is_default { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_sent")]
		public System.Nullable<System.Boolean> Is_sent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_click_count")]
		public System.Nullable<System.Int64> Total_click_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unique_click_count")]
		public System.Nullable<System.Int64> Unique_click_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NewsletterInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="click_count")]
		public System.Nullable<System.Int64> Click_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_default")]
		public System.Nullable<System.Boolean> Is_default { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_sent")]
		public System.Nullable<System.Boolean> Is_sent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_click_count")]
		public System.Nullable<System.Int64> Total_click_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unique_click_count")]
		public System.Nullable<System.Int64> Unique_click_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NewsletterSetting
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="banner_color")]
		public string Banner_color { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="body_html")]
		public string Body_html { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email_accent_color")]
		public string Email_accent_color { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email_day_of_week")]
		public System.Nullable<System.Int32> Email_day_of_week { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email_hour")]
		public System.Nullable<System.Int32> Email_hour { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email_status")]
		public string Email_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="facebook_active_wall")]
		public string Facebook_active_wall { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="footer_email_font")]
		public string Footer_email_font { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="footer_html")]
		public string Footer_html { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="footer_image_url")]
		public string Footer_image_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public string Group_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="header_background_color")]
		public string Header_background_color { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="header_image_url")]
		public string Header_image_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intro_text")]
		public string Intro_text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkedin_active_wall")]
		public string Linkedin_active_wall { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="montage_enabled")]
		public System.Nullable<System.Boolean> Montage_enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="montage_facebook_image_url")]
		public string Montage_facebook_image_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="montage_linkedin_image_url")]
		public string Montage_linkedin_image_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="montage_title")]
		public string Montage_title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="montage_twitter_image_url")]
		public string Montage_twitter_image_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newsletter_ids")]
		public string[] Newsletter_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newsletter_type")]
		public string Newsletter_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primary_email_font")]
		public string Primary_email_font { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salutation_text")]
		public string Salutation_text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="social_day_of_week")]
		public System.Nullable<System.Int32> Social_day_of_week { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="social_description")]
		public string Social_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="social_posting_text")]
		public string Social_posting_text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="social_title")]
		public string Social_title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title_color")]
		public string Title_color { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NewsletterSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="newsletter_settings")]
		public NewsletterSetting[] Newsletter_settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NewsletterSettingsInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="newsletter_setting")]
		public NewsletterSetting Newsletter_setting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Newsletterresponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="newsletter")]
		public Newsletter Newsletter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Newsletters
	{
		
		[System.Runtime.Serialization.DataMember(Name="newsletters")]
		public Newsletter[] Newsletters1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Newslettersettingresponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="newsletter_setting")]
		public NewsletterSetting Newsletter_setting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OrgSetting
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="company_address")]
		public string Company_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="company_contact_email")]
		public string Company_contact_email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="company_homepage_url")]
		public string Company_homepage_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_default")]
		public System.Nullable<System.Boolean> Is_default { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy_policy_url")]
		public string Privacy_policy_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="site_url")]
		public string Site_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="terms_and_conditions_url")]
		public string Terms_and_conditions_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PersonalSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Post
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="advisor_id")]
		public string Advisor_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approval_status")]
		public string Approval_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approval_transactions")]
		public string[] Approval_transactions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="article_id")]
		public string Article_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_date")]
		public string Display_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_summary")]
		public string Display_summary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_tag")]
		public string Display_tag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="external_url")]
		public string External_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="external_url_source")]
		public string External_url_source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="external_url_type")]
		public string External_url_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="group_ids")]
		public string[] Group_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_height")]
		public string Image_height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_path")]
		public string Image_path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_width")]
		public string Image_width { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_featured")]
		public System.Nullable<System.Boolean> Is_featured { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_mobile_proxy_needed")]
		public System.Nullable<System.Boolean> Is_mobile_proxy_needed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_proxy_needed")]
		public System.Nullable<System.Boolean> Is_proxy_needed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_published")]
		public System.Nullable<System.Boolean> Is_published { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_responsive")]
		public System.Nullable<System.Boolean> Is_responsive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logo_url")]
		public string Logo_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="needs_sanitize")]
		public string Needs_sanitize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newsletter_ids")]
		public string[] Newsletter_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="post_date")]
		public string Post_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proxy_url")]
		public string Proxy_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="redirector_link")]
		public string Redirector_link { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slug")]
		public string Slug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="square_logo_url")]
		public string Square_logo_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suitability_score")]
		public string Suitability_score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vestorly_url")]
		public string Vestorly_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="video")]
		public string Video { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="video_id")]
		public string Video_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PostInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="advisor_id")]
		public string Advisor_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approval_status")]
		public string Approval_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approval_transactions")]
		public string[] Approval_transactions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="article_id")]
		public string Article_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_date")]
		public string Display_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_summary")]
		public string Display_summary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_tag")]
		public string Display_tag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="external_url")]
		public string External_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="external_url_source")]
		public string External_url_source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="external_url_type")]
		public string External_url_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="group_ids")]
		public string[] Group_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_height")]
		public string Image_height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_path")]
		public string Image_path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_width")]
		public string Image_width { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_featured")]
		public System.Nullable<System.Boolean> Is_featured { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_mobile_proxy_needed")]
		public System.Nullable<System.Boolean> Is_mobile_proxy_needed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_proxy_needed")]
		public System.Nullable<System.Boolean> Is_proxy_needed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_published")]
		public System.Nullable<System.Boolean> Is_published { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_responsive")]
		public System.Nullable<System.Boolean> Is_responsive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logo_url")]
		public string Logo_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="needs_sanitize")]
		public string Needs_sanitize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newsletter_ids")]
		public string[] Newsletter_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="post_date")]
		public string Post_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proxy_url")]
		public string Proxy_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slug")]
		public string Slug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="square_logo_url")]
		public string Square_logo_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suitability_score")]
		public string Suitability_score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vestorly_url")]
		public string Vestorly_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="video")]
		public string Video { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="video_id")]
		public string Video_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Postrequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="post")]
		public PostInput Post { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Postresponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="post")]
		public Post Post { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Posts
	{
		
		[System.Runtime.Serialization.DataMember(Name="posts")]
		public Post[] Posts1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SeedCustomFeed
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="article_id")]
		public string Article_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="custom_feed_id")]
		public string Custom_feed_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="not_article_id")]
		public string Not_article_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="not_seeds")]
		public string[] Not_seeds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seeds")]
		public string[] Seeds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sort_by")]
		public string Sort_by { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SeedCustomFeedInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="article_id")]
		public string Article_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="custom_feed_id")]
		public string Custom_feed_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="not_article_id")]
		public string Not_article_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="not_seeds")]
		public string[] Not_seeds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seeds")]
		public string[] Seeds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sort_by")]
		public string Sort_by { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SeedCustomFeedresponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="seed_custom_feed")]
		public SeedCustomFeed Seed_custom_feed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SeedCustomFeeds
	{
		
		[System.Runtime.Serialization.DataMember(Name="seed_custom_feeds")]
		public SeedCustomFeed[] Seed_custom_feeds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Session
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="current_user")]
		public User Current_user { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new_user")]
		public System.Nullable<System.Boolean> New_user { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public Settings Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vestorly-auth")]
		public string Vestorly_auth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SessionLogoutResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Settings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adv_brochure")]
		public string Adv_brochure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="company")]
		public string Company { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disclosure")]
		public string Disclosure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="feature")]
		public Features Feature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orgsetting")]
		public OrgSetting Orgsetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="personalsetting")]
		public PersonalSettings Personalsetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="picture_url")]
		public string Picture_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slug")]
		public string Slug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Source
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="custom_rss_feed")]
		public System.Nullable<System.Boolean> Custom_rss_feed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logo_url")]
		public string Logo_url { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rss_publisher")]
		public string Rss_publisher { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="custom_rss_feed")]
		public System.Nullable<System.Boolean> Custom_rss_feed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logo_url")]
		public string Logo_url { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rss_publisher")]
		public string Rss_publisher { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sourceresponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sources
	{
		
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public Source[] Sources1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class User
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="company")]
		public string Company { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new_user")]
		public System.Nullable<System.Boolean> New_user { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="picture_url")]
		public string Picture_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plan_expired")]
		public System.Nullable<System.Boolean> Plan_expired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plan_id")]
		public string Plan_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plan_setup")]
		public System.Nullable<System.Boolean> Plan_setup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plan_status")]
		public string Plan_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plan_stripe")]
		public System.Nullable<System.Boolean> Plan_stripe { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="show_tour")]
		public System.Nullable<System.Boolean> Show_tour { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slug")]
		public string Slug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_type")]
		public string User_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns a single advisor given their ID
		/// FindAdvisorByID advisors/{id}
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">Advisor Id to fetch</param>
		/// <returns>Advisor response</returns>
		public async Task FindAdvisorByIDAsync(string vestorly_auth, string access_token, string id)
		{
			var requestUri = "advisors/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns phrases used in Categories
		/// FindArticlePhrases article_phrases
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="text_search">Text to search phrases</param>
		/// <param name="size">Number of returned phrases</param>
		/// <param name="from">Number of phrases to skip</param>
		/// <returns>Response</returns>
		public async Task FindArticlePhrasesAsync(string vestorly_auth, string access_token, string text_search, int size, int from)
		{
			var requestUri = "article_phrases?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token))+"&text_search=" + (text_search==null? "" : System.Uri.EscapeDataString(text_search))+"&size="+size+"&from="+from;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all articles
		/// FindArticles articles
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="limit">Limit on the number of articles to return</param>
		/// <param name="text_query">Search query parameter</param>
		/// <param name="sort_direction">Direction of sort (used with sort_by parameter)</param>
		/// <param name="sort_by">Field on model to sort by</param>
		/// <returns>Response</returns>
		public async Task FindArticlesAsync(string vestorly_auth, string access_token, int limit, string text_query, string sort_direction, string sort_by)
		{
			var requestUri = "articles?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token))+"&limit="+limit+"&text_query=" + (text_query==null? "" : System.Uri.EscapeDataString(text_query))+"&sort_direction=" + (sort_direction==null? "" : System.Uri.EscapeDataString(sort_direction))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single article
		/// FindArticleByID articles/{id}
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">Article Id to fetch</param>
		/// <returns>Article response</returns>
		public async Task FindArticleByIDAsync(string vestorly_auth, string access_token, string id)
		{
			var requestUri = "articles/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all Categorie's filters
		/// FindCustomFeedFilters custom_feed_filters
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <returns>Response</returns>
		public async Task FindCustomFeedFiltersAsync(string vestorly_auth, string access_token)
		{
			var requestUri = "custom_feed_filters?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Category filter
		/// CreateCustomFeedFilter custom_feed_filters
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="requestBody">Category filter to add</param>
		/// <returns>Custom Feed Filter response</returns>
		public async Task<CustomFeedFilterresponse> CreateCustomFeedFilterAsync(string vestorly_auth, string access_token, CustomFeedFilterInput requestBody)
		{
			var requestUri = "custom_feed_filters?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomFeedFilterresponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single Category's filter
		/// FindCustomFeedFilterByID custom_feed_filters/{id}
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">Custom Feed Filter Id to fetch</param>
		/// <returns>Custom Feed Filter response</returns>
		public async Task FindCustomFeedFilterByIDAsync(string vestorly_auth, string access_token, string id)
		{
			var requestUri = "custom_feed_filters/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Category Feed Filter
		/// UpdateCustomFeedFilterById custom_feed_filters/{id}
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">id of category filter to update</param>
		/// <param name="requestBody">Category filter to add</param>
		/// <returns>Custom Feed Filter response</returns>
		public async Task<CustomFeedFilterresponse> UpdateCustomFeedFilterByIdAsync(string vestorly_auth, string access_token, string id, CustomFeedFilterInput requestBody)
		{
			var requestUri = "custom_feed_filters/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomFeedFilterresponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the Category's filter
		/// DeleteCustomFeedFilter custom_feed_filters/{id}
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">id of category filter to delete</param>
		/// <returns>Custom Feed Filter response</returns>
		public async Task<CustomFeedFilterresponse> DeleteCustomFeedFilterAsync(string vestorly_auth, string access_token, string id)
		{
			var requestUri = "custom_feed_filters/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomFeedFilterresponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all Categories
		/// FindCustomFeeds custom_feeds
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <returns>Response</returns>
		public async Task FindCustomFeedsAsync(string vestorly_auth, string access_token)
		{
			var requestUri = "custom_feeds?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Category
		/// CreateCustomFeed custom_feeds
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="requestBody">Category to add</param>
		/// <returns>Custom Feed response</returns>
		public async Task<CustomFeedresponse> CreateCustomFeedAsync(string vestorly_auth, string access_token, CustomFeedInput requestBody)
		{
			var requestUri = "custom_feeds?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomFeedresponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single Category
		/// FindCustomFeedByID custom_feeds/{id}
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">Custom Feed Id to fetch</param>
		/// <returns>Custom Feed response</returns>
		public async Task FindCustomFeedByIDAsync(string vestorly_auth, string access_token, string id)
		{
			var requestUri = "custom_feeds/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Category
		/// UpdateCategoryById custom_feeds/{id}
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">id of category to update</param>
		/// <param name="requestBody">Category to add</param>
		/// <returns>Custom Feed response</returns>
		public async Task<CustomFeedresponse> UpdateCategoryByIdAsync(string vestorly_auth, string access_token, string id, CustomFeedInput requestBody)
		{
			var requestUri = "custom_feeds/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomFeedresponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a new Category
		/// DeleteCustomFeed custom_feeds/{id}
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">id of category to delete</param>
		/// <returns>Custom Feed response</returns>
		public async Task<CustomFeedresponse> DeleteCustomFeedAsync(string vestorly_auth, string access_token, string id)
		{
			var requestUri = "custom_feeds/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomFeedresponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns Articles by Category
		/// FindCustomFeedArticles custom_feeds/{id}/articles
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">Category Id to fetch</param>
		/// <param name="limit">Limit on the number of articles to return</param>
		/// <param name="sort_by">Field on model to sort by</param>
		/// <param name="start">Field where the fetch will start from</param>
		/// <param name="created_at_gte_days_ago">Filter retrieved articles since this date</param>
		/// <param name="text_query">Search query parameter</param>
		/// <returns>Response</returns>
		public async Task FindCustomFeedArticlesAsync(string vestorly_auth, string access_token, string id, int limit, string sort_by, int start, string created_at_gte_days_ago, string text_query)
		{
			var requestUri = "custom_feeds/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/articles?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token))+"&limit="+limit+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by))+"&start="+start+"&created_at_gte_days_ago=" + (created_at_gte_days_ago==null? "" : System.Uri.EscapeDataString(created_at_gte_days_ago))+"&text_query=" + (text_query==null? "" : System.Uri.EscapeDataString(text_query));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Duplicates Category
		/// DuplicateCustomFeed custom_feeds/{id}/duplicates
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">id of category to duplicate</param>
		/// <returns>Custom Feed response</returns>
		public async Task DuplicateCustomFeedAsync(string vestorly_auth, string access_token, string id)
		{
			var requestUri = "custom_feeds/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/duplicates?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all events
		/// FindEvents events
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <returns>Event response</returns>
		public async Task FindEventsAsync(string vestorly_auth, string access_token)
		{
			var requestUri = "events?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new event in the system
		/// CreateEvent events
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="requestBody">Event</param>
		/// <returns>Event response</returns>
		public async Task CreateEventAsync(string vestorly_auth, string access_token, EventInput requestBody)
		{
			var requestUri = "events?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single event if the user has access
		/// FindEventByID events/{id}
		/// </summary>
		/// <param name="id">Mongo ID of event to fetch</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <returns>Event response</returns>
		public async Task FindEventByIDAsync(string id, string access_token, string vestorly_auth)
		{
			var requestUri = "events/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token))+"&vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all groups
		/// FindGroups groups
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <returns>Group response</returns>
		public async Task FindGroupsAsync(string vestorly_auth, string access_token)
		{
			var requestUri = "groups?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Group
		/// CreateGroup groups
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="requestBody">Group to add</param>
		/// <returns>group response</returns>
		public async Task<Groupresponse> CreateGroupAsync(string vestorly_auth, string access_token, GroupInput requestBody)
		{
			var requestUri = "groups?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Groupresponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single group if user has access
		/// FindGroupByID groups/{id}
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">Mongo ID of group to fetch</param>
		/// <returns>Group response</returns>
		public async Task FindGroupByIDAsync(string vestorly_auth, string access_token, string id)
		{
			var requestUri = "groups/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Group
		/// UpdateGroupById groups/{id}
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">id of group to update</param>
		/// <param name="requestBody">Group to update</param>
		/// <returns>group response</returns>
		public async Task<Groupresponse> UpdateGroupByIdAsync(string vestorly_auth, string access_token, string id, GroupInput requestBody)
		{
			var requestUri = "groups/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Groupresponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Group
		/// DeleteGroup groups/{id}
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">id of group to delete</param>
		/// <returns>group response</returns>
		public async Task<Groupresponse> DeleteGroupAsync(string vestorly_auth, string access_token, string id)
		{
			var requestUri = "groups/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Groupresponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all MemberEvents
		/// FindMemberEvents member_events
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <returns>member event response</returns>
		public async Task FindMemberEventsAsync(string vestorly_auth, string access_token)
		{
			var requestUri = "member_events?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all member reports
		/// FindMemberReports member_reports
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <returns>member reports response</returns>
		public async Task FindMemberReportsAsync(string vestorly_auth, string access_token)
		{
			var requestUri = "member_reports?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all members
		/// FindMembers members
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="start">Skips number of members from start</param>
		/// <param name="limit">Number of members to return</param>
		/// <returns>Member response</returns>
		public async Task FindMembersAsync(string vestorly_auth, string access_token, int start, int limit)
		{
			var requestUri = "members?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token))+"&start="+start+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new member in the Vestorly Platform
		/// CreateMember members
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="requestBody">Member you want to create</param>
		/// <returns>member response</returns>
		public async Task CreateMemberAsync(string vestorly_auth, string access_token, Member requestBody)
		{
			var requestUri = "members?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single member
		/// FindMemberByID members/{id}
		/// </summary>
		/// <param name="id">Mongo ID of member to fetch</param>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <returns>Member response</returns>
		public async Task FindMemberByIDAsync(string id, string vestorly_auth, string access_token)
		{
			var requestUri = "members/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a single member
		/// UpdateMemberByID members/{id}
		/// </summary>
		/// <param name="id">Mongo ID of member to fetch</param>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="requestBody">Member you want to update</param>
		/// <returns>Member response</returns>
		public async Task UpdateMemberByIDAsync(string id, string vestorly_auth, string access_token, Member requestBody)
		{
			var requestUri = "members/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all newsletter settings
		/// FindNewsletterSettings newsletter_settings
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <returns>newsletter settings response</returns>
		public async Task FindNewsletterSettingsAsync(string vestorly_auth, string access_token)
		{
			var requestUri = "newsletter_settings?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single newsletter settings if the user has access
		/// FindNewsletterSettingsByID newsletter_settings/{id}
		/// </summary>
		/// <param name="id">Mongo ID of newsletter settings to fetch</param>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <returns>newsletting setting response</returns>
		public async Task FindNewsletterSettingsByIDAsync(string id, string vestorly_auth, string access_token)
		{
			var requestUri = "newsletter_settings/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a single newsletter setting by ID
		/// UpdateNewsletterSettingsByID newsletter_settings/{id}
		/// </summary>
		/// <param name="id">Mongo ID of newsletter settings to update</param>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="requestBody">newsletter settings</param>
		/// <returns>newsletter settings response</returns>
		public async Task UpdateNewsletterSettingsByIDAsync(string id, string vestorly_auth, string access_token, NewsletterSettingsInput requestBody)
		{
			var requestUri = "newsletter_settings/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all newsletters
		/// FindNewsletters newsletters
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <returns>Newsletter response</returns>
		public async Task FindNewslettersAsync(string vestorly_auth, string access_token)
		{
			var requestUri = "newsletters?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a newsletter by ID
		/// GetNewsletterByID newsletters/{id}
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">Mongo ID of event to get</param>
		/// <returns>Newsletter response</returns>
		public async Task GetNewsletterByIDAsync(string vestorly_auth, string access_token, string id)
		{
			var requestUri = "newsletters/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a newsletter
		/// UpdateNewsletterByID newsletters/{id}
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">Mongo ID of event to update</param>
		/// <param name="requestBody">Newsletter</param>
		/// <returns>Newsletter response</returns>
		public async Task UpdateNewsletterByIDAsync(string vestorly_auth, string access_token, string id, NewsletterInput requestBody)
		{
			var requestUri = "newsletters/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Query all posts
		/// FindPosts posts
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="text_query">Filter post by parameters</param>
		/// <param name="external_url">Filter by External URL</param>
		/// <param name="is_published">Filter by is_published boolean</param>
		/// <returns>posts response</returns>
		public async Task FindPostsAsync(string vestorly_auth, string access_token, string text_query, string external_url, string is_published)
		{
			var requestUri = "posts?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token))+"&text_query=" + (text_query==null? "" : System.Uri.EscapeDataString(text_query))+"&external_url=" + (external_url==null? "" : System.Uri.EscapeDataString(external_url))+"&is_published=" + (is_published==null? "" : System.Uri.EscapeDataString(is_published));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new post in the Vestorly Platform
		/// CreatePost posts
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="requestBody">Post you want to create</param>
		/// <returns>posts response</returns>
		public async Task CreatePostAsync(string vestorly_auth, string access_token, PostInput requestBody)
		{
			var requestUri = "posts?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Query all posts
		/// GetPostByID posts/{id}
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">ID of post to fetch</param>
		/// <returns>post response</returns>
		public async Task GetPostByIDAsync(string vestorly_auth, string access_token, string id)
		{
			var requestUri = "posts/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update A Post
		/// UpdatePostByID posts/{id}
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">id of post to update</param>
		/// <param name="requestBody">Post you want to update</param>
		/// <returns>post response</returns>
		public async Task UpdatePostByIDAsync(string vestorly_auth, string access_token, string id, Post requestBody)
		{
			var requestUri = "posts/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all Categories keywords
		/// FindSeedCustomFeeds seed_custom_feeds
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <returns>Response</returns>
		public async Task FindSeedCustomFeedsAsync(string vestorly_auth, string access_token)
		{
			var requestUri = "seed_custom_feeds?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Category Keyword
		/// CreateSeedCustomFeed seed_custom_feeds
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="requestBody">Category to add</param>
		/// <returns>Seed Custom Feed response</returns>
		public async Task<SeedCustomFeedresponse> CreateSeedCustomFeedAsync(string vestorly_auth, string access_token, SeedCustomFeedInput requestBody)
		{
			var requestUri = "seed_custom_feeds?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SeedCustomFeedresponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single Category keyword
		/// FindSeedCustomFeedByID seed_custom_feeds/{id}
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">Seed Custom Feed Id to fetch</param>
		/// <returns>Seed Custom Feed response</returns>
		public async Task FindSeedCustomFeedByIDAsync(string vestorly_auth, string access_token, string id)
		{
			var requestUri = "seed_custom_feeds/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Category keywords
		/// UpdateSeedCustomFeedById seed_custom_feeds/{id}
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">id of seed category to update</param>
		/// <param name="requestBody">Category keywords to add</param>
		/// <returns>Seed Custom Feed response</returns>
		public async Task<SeedCustomFeedresponse> UpdateSeedCustomFeedByIdAsync(string vestorly_auth, string access_token, string id, SeedCustomFeedInput requestBody)
		{
			var requestUri = "seed_custom_feeds/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SeedCustomFeedresponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Category keywords
		/// DeleteSeedCustomFeed seed_custom_feeds/{id}
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">id of seed category to delete</param>
		/// <returns>Seed Custom Feed response</returns>
		public async Task<SeedCustomFeedresponse> DeleteSeedCustomFeedAsync(string vestorly_auth, string access_token, string id)
		{
			var requestUri = "seed_custom_feeds/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SeedCustomFeedresponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Login To Vestorly Platform
		/// Login sessions
		/// </summary>
		/// <param name="username">Username in the vestorly platform</param>
		/// <param name="password">Password in Vestorly Platform</param>
		/// <returns>Response</returns>
		public async Task LoginAsync(string username, string password)
		{
			var requestUri = "sessions?username=" + (username==null? "" : System.Uri.EscapeDataString(username))+"&password=" + (password==null? "" : System.Uri.EscapeDataString(password));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Logout of the vestorly platform
		/// Logout sessions/{id}
		/// </summary>
		/// <param name="vestorly_auth">Authenication token</param>
		/// <param name="id">ID of pet to session</param>
		/// <returns>You have successfully logged out of the vestorly platform</returns>
		public async Task LogoutAsync(string vestorly_auth, string id)
		{
			var requestUri = "sessions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all sources
		/// FindSources sources
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <returns>source response</returns>
		public async Task FindSourcesAsync(string vestorly_auth, string access_token)
		{
			var requestUri = "sources?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create source
		/// CreateSource sources
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="requestBody">Source</param>
		/// <returns>source response</returns>
		public async Task CreateSourceAsync(string vestorly_auth, string access_token, SourceInput requestBody)
		{
			var requestUri = "sources?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Source By ID
		/// GetSourceByID sources/{id}
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">ID of source to fetch</param>
		/// <returns>source response</returns>
		public async Task GetSourceByIDAsync(string vestorly_auth, string access_token, string id)
		{
			var requestUri = "sources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Source By ID
		/// UpdateSourceByID sources/{id}
		/// </summary>
		/// <param name="vestorly_auth">Vestorly Auth Token</param>
		/// <param name="access_token">OAuth Token</param>
		/// <param name="id">ID of source to fetch</param>
		/// <param name="requestBody">Source</param>
		/// <returns>source response</returns>
		public async Task UpdateSourceByIDAsync(string vestorly_auth, string access_token, string id, SourceInput requestBody)
		{
			var requestUri = "sources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?vestorly_auth=" + (vestorly_auth==null? "" : System.Uri.EscapeDataString(vestorly_auth))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
