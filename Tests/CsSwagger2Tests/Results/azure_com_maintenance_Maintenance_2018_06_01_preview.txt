//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Apply Update request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplyUpdate
	{
		
		/// <summary>
		/// Properties for apply update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ApplyUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties for apply update
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplyUpdateProperties
	{
		
		/// <summary>
		/// Last Update time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
		
		/// <summary>
		/// The resourceId
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// The status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ApplyUpdatePropertiesStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApplyUpdatePropertiesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RetryNow = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RetryLater = 4,
	}
	
	/// <summary>
	/// Configuration Assignment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConfigurationAssignment
	{
		
		/// <summary>
		/// Location of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Properties for configuration assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ConfigurationAssignmentProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties for configuration assignment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConfigurationAssignmentProperties
	{
		
		/// <summary>
		/// The maintenance configuration Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceConfigurationId")]
		public string MaintenanceConfigurationId { get; set; }
		
		/// <summary>
		/// The unique resourceId
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	/// <summary>
	/// An error response details received from the Azure Maintenance service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorDetails
	{
		
		/// <summary>
		/// Service-defined error code. This code serves as a sub-status for the HTTP error code specified in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Human-readable representation of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Response for ConfigurationAssignments list
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListConfigurationAssignmentsResult
	{
		
		/// <summary>
		/// The list of configuration Assignments
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ConfigurationAssignment[] Value { get; set; }
	}
	
	/// <summary>
	/// Response for MaintenanceConfigurations list
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListMaintenanceConfigurationsResult
	{
		
		/// <summary>
		/// The list of maintenance Configurations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MaintenanceConfiguration[] Value { get; set; }
	}
	
	/// <summary>
	/// Maintenance configuration record type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MaintenanceConfiguration
	{
		
		/// <summary>
		/// Gets or sets location of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Properties for maintenance configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MaintenanceConfigurationProperties Properties { get; set; }
		
		/// <summary>
		/// Gets or sets tags of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Properties for maintenance configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MaintenanceConfigurationProperties
	{
		
		/// <summary>
		/// Gets or sets extensionProperties of the maintenanceConfiguration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extensionProperties")]
		public System.Collections.Generic.Dictionary<string, string> ExtensionProperties { get; set; }
		
		/// <summary>
		/// Gets or sets maintenanceScope of the configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceScope")]
		public System.Nullable<MaintenanceConfigurationPropertiesMaintenanceScope> MaintenanceScope { get; set; }
		
		/// <summary>
		/// Gets or sets namespace of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MaintenanceConfigurationPropertiesMaintenanceScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Host = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Resource = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InResource = 3,
	}
	
	/// <summary>
	/// Response for Updates list
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListUpdatesResult
	{
		
		/// <summary>
		/// The pending updates
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Update[] Value { get; set; }
	}
	
	/// <summary>
	/// Maintenance update on a resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Update
	{
		
		/// <summary>
		/// Duration of impact in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impactDurationInSec")]
		public System.Nullable<System.Int32> ImpactDurationInSec { get; set; }
		
		/// <summary>
		/// The impact type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impactType")]
		public System.Nullable<UpdateImpactType> ImpactType { get; set; }
		
		/// <summary>
		/// The impact area
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceScope")]
		public MaintenanceConfigurationPropertiesMaintenanceScope MaintenanceScope { get; set; }
		
		/// <summary>
		/// Time when Azure will start force updates if not self-updated by customer before this time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notBefore")]
		public System.Nullable<System.DateTimeOffset> NotBefore { get; set; }
		
		/// <summary>
		/// Properties for update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UpdateProperties Properties { get; set; }
		
		/// <summary>
		/// The status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ApplyUpdatePropertiesStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum UpdateImpactType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Freeze = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Restart = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Redeploy = 3,
	}
	
	/// <summary>
	/// Properties for update
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateProperties
	{
		
		/// <summary>
		/// The resourceId
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	/// <summary>
	/// An error response received from the Azure Maintenance service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MaintenanceError
	{
		
		/// <summary>
		/// An error response details received from the Azure Maintenance service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorDetails Error { get; set; }
	}
	
	/// <summary>
	/// Represents an operation returned by the GetOperations request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// Information about an operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationInfo Display { get; set; }
		
		/// <summary>
		/// Name of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Origin of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// Properties of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public string Properties { get; set; }
	}
	
	/// <summary>
	/// Information about an operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationInfo
	{
		
		/// <summary>
		/// Description of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Name of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Name of the provider
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Name of the resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// Result of the List Operations operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationsListResult
	{
		
		/// <summary>
		/// A collection of operations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// Definition of a Resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Fully qualified identifier of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List available operations
		/// List the available operations supported by the Microsoft.Maintenance resource provider
		/// Operations_List providers/Microsoft.Maintenance/operations
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<OperationsListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Maintenance/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationsListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Configuration records within a subscription
		/// MaintenanceConfigurations_List subscriptions/{subscriptionId}/providers/Microsoft.Maintenance/maintenanceConfigurations
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<ListMaintenanceConfigurationsResult> MaintenanceConfigurations_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Maintenance/maintenanceConfigurations&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListMaintenanceConfigurationsResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Configuration record
		/// MaintenanceConfigurations_Get subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Maintenance/maintenanceConfigurations/{resourceName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Resource Group Name</param>
		/// <param name="resourceName">Resource Identifier</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<MaintenanceConfiguration> MaintenanceConfigurations_GetAsync(string subscriptionId, string resourceGroupName, string resourceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Maintenance/maintenanceConfigurations/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MaintenanceConfiguration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or Update configuration record
		/// MaintenanceConfigurations_CreateOrUpdate subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Maintenance/maintenanceConfigurations/{resourceName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Resource Group Name</param>
		/// <param name="resourceName">Resource Identifier</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">The configuration</param>
		/// <returns>OK</returns>
		public async Task<MaintenanceConfiguration> MaintenanceConfigurations_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string resourceName, string api_version, MaintenanceConfiguration requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Maintenance/maintenanceConfigurations/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MaintenanceConfiguration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Configuration record
		/// MaintenanceConfigurations_Delete subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Maintenance/maintenanceConfigurations/{resourceName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Resource Group Name</param>
		/// <param name="resourceName">Resource Identifier</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<MaintenanceConfiguration> MaintenanceConfigurations_DeleteAsync(string subscriptionId, string resourceGroupName, string resourceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Maintenance/maintenanceConfigurations/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MaintenanceConfiguration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patch configuration record
		/// MaintenanceConfigurations_Update subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Maintenance/maintenanceConfigurations/{resourceName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Resource Group Name</param>
		/// <param name="resourceName">Resource Identifier</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">The configuration</param>
		/// <returns>OK</returns>
		public async Task<MaintenanceConfiguration> MaintenanceConfigurations_UpdateAsync(string subscriptionId, string resourceGroupName, string resourceName, string api_version, MaintenanceConfiguration requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Maintenance/maintenanceConfigurations/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MaintenanceConfiguration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Apply Updates to resource with parent
		/// Apply maintenance updates to resource with parent
		/// ApplyUpdates_CreateOrUpdateParent subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/applyUpdates/default
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Resource group name</param>
		/// <param name="providerName">Resource provider name</param>
		/// <param name="resourceParentType">Resource parent type</param>
		/// <param name="resourceParentName">Resource parent identifier</param>
		/// <param name="resourceType">Resource type</param>
		/// <param name="resourceName">Resource identifier</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<ApplyUpdate> ApplyUpdates_CreateOrUpdateParentAsync(string subscriptionId, string resourceGroupName, string providerName, string resourceParentType, string resourceParentName, string resourceType, string resourceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (providerName==null? "" : System.Uri.EscapeDataString(providerName))+"/"+ (resourceParentType==null? "" : System.Uri.EscapeDataString(resourceParentType))+"/"+ (resourceParentName==null? "" : System.Uri.EscapeDataString(resourceParentName))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.Maintenance/applyUpdates/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplyUpdate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Track Updates to resource with parent
		/// Track maintenance updates to resource with parent
		/// ApplyUpdates_GetParent subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/applyUpdates/{applyUpdateName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Resource group name</param>
		/// <param name="resourceParentType">Resource parent type</param>
		/// <param name="resourceParentName">Resource parent identifier</param>
		/// <param name="providerName">Resource provider name</param>
		/// <param name="resourceType">Resource type</param>
		/// <param name="resourceName">Resource identifier</param>
		/// <param name="applyUpdateName">applyUpdate Id</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<ApplyUpdate> ApplyUpdates_GetParentAsync(string subscriptionId, string resourceGroupName, string resourceParentType, string resourceParentName, string providerName, string resourceType, string resourceName, string applyUpdateName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (providerName==null? "" : System.Uri.EscapeDataString(providerName))+"/"+ (resourceParentType==null? "" : System.Uri.EscapeDataString(resourceParentType))+"/"+ (resourceParentName==null? "" : System.Uri.EscapeDataString(resourceParentName))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.Maintenance/applyUpdates/"+ (applyUpdateName==null? "" : System.Uri.EscapeDataString(applyUpdateName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplyUpdate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List configurationAssignments for resource
		/// List configurationAssignments for resource.
		/// ConfigurationAssignments_ListParent subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Resource group name</param>
		/// <param name="providerName">Resource provider name</param>
		/// <param name="resourceParentType">Resource parent type</param>
		/// <param name="resourceParentName">Resource parent identifier</param>
		/// <param name="resourceType">Resource type</param>
		/// <param name="resourceName">Resource identifier</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<ListConfigurationAssignmentsResult> ConfigurationAssignments_ListParentAsync(string subscriptionId, string resourceGroupName, string providerName, string resourceParentType, string resourceParentName, string resourceType, string resourceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (providerName==null? "" : System.Uri.EscapeDataString(providerName))+"/"+ (resourceParentType==null? "" : System.Uri.EscapeDataString(resourceParentType))+"/"+ (resourceParentName==null? "" : System.Uri.EscapeDataString(resourceParentName))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.Maintenance/configurationAssignments&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListConfigurationAssignmentsResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create configuration assignment
		/// Register configuration for resource.
		/// ConfigurationAssignments_CreateOrUpdateParent subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Resource group name</param>
		/// <param name="providerName">Resource provider name</param>
		/// <param name="resourceParentType">Resource parent type</param>
		/// <param name="resourceParentName">Resource parent identifier</param>
		/// <param name="resourceType">Resource type</param>
		/// <param name="resourceName">Resource identifier</param>
		/// <param name="configurationAssignmentName">Configuration assignment name</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">The configurationAssignment</param>
		/// <returns>OK</returns>
		public async Task<ConfigurationAssignment> ConfigurationAssignments_CreateOrUpdateParentAsync(string subscriptionId, string resourceGroupName, string providerName, string resourceParentType, string resourceParentName, string resourceType, string resourceName, string configurationAssignmentName, string api_version, ConfigurationAssignment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (providerName==null? "" : System.Uri.EscapeDataString(providerName))+"/"+ (resourceParentType==null? "" : System.Uri.EscapeDataString(resourceParentType))+"/"+ (resourceParentName==null? "" : System.Uri.EscapeDataString(resourceParentName))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.Maintenance/configurationAssignments/"+ (configurationAssignmentName==null? "" : System.Uri.EscapeDataString(configurationAssignmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConfigurationAssignment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unregister configuration for resource
		/// Unregister configuration for resource.
		/// ConfigurationAssignments_DeleteParent subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Resource group name</param>
		/// <param name="providerName">Resource provider name</param>
		/// <param name="resourceParentType">Resource parent type</param>
		/// <param name="resourceParentName">Resource parent identifier</param>
		/// <param name="resourceType">Resource type</param>
		/// <param name="resourceName">Resource identifier</param>
		/// <param name="configurationAssignmentName">Unique configuration assignment name</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<ConfigurationAssignment> ConfigurationAssignments_DeleteParentAsync(string subscriptionId, string resourceGroupName, string providerName, string resourceParentType, string resourceParentName, string resourceType, string resourceName, string configurationAssignmentName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (providerName==null? "" : System.Uri.EscapeDataString(providerName))+"/"+ (resourceParentType==null? "" : System.Uri.EscapeDataString(resourceParentType))+"/"+ (resourceParentName==null? "" : System.Uri.EscapeDataString(resourceParentName))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.Maintenance/configurationAssignments/"+ (configurationAssignmentName==null? "" : System.Uri.EscapeDataString(configurationAssignmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConfigurationAssignment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Updates to resource
		/// Get updates to resources.
		/// Updates_ListParent subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/updates
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Resource group name</param>
		/// <param name="providerName">Resource provider name</param>
		/// <param name="resourceParentType">Resource parent type</param>
		/// <param name="resourceParentName">Resource parent identifier</param>
		/// <param name="resourceType">Resource type</param>
		/// <param name="resourceName">Resource identifier</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<ListUpdatesResult> Updates_ListParentAsync(string subscriptionId, string resourceGroupName, string providerName, string resourceParentType, string resourceParentName, string resourceType, string resourceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (providerName==null? "" : System.Uri.EscapeDataString(providerName))+"/"+ (resourceParentType==null? "" : System.Uri.EscapeDataString(resourceParentType))+"/"+ (resourceParentName==null? "" : System.Uri.EscapeDataString(resourceParentName))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.Maintenance/updates&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListUpdatesResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Apply Updates to resource
		/// Apply maintenance updates to resource
		/// ApplyUpdates_CreateOrUpdate subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/applyUpdates/default
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Resource group name</param>
		/// <param name="providerName">Resource provider name</param>
		/// <param name="resourceType">Resource type</param>
		/// <param name="resourceName">Resource identifier</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<ApplyUpdate> ApplyUpdates_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string providerName, string resourceType, string resourceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (providerName==null? "" : System.Uri.EscapeDataString(providerName))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.Maintenance/applyUpdates/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplyUpdate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Track Updates to resource
		/// Track maintenance updates to resource
		/// ApplyUpdates_Get subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/applyUpdates/{applyUpdateName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Resource group name</param>
		/// <param name="providerName">Resource provider name</param>
		/// <param name="resourceType">Resource type</param>
		/// <param name="resourceName">Resource identifier</param>
		/// <param name="applyUpdateName">applyUpdate Id</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<ApplyUpdate> ApplyUpdates_GetAsync(string subscriptionId, string resourceGroupName, string providerName, string resourceType, string resourceName, string applyUpdateName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (providerName==null? "" : System.Uri.EscapeDataString(providerName))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.Maintenance/applyUpdates/"+ (applyUpdateName==null? "" : System.Uri.EscapeDataString(applyUpdateName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplyUpdate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List configurationAssignments for resource
		/// List configurationAssignments for resource.
		/// ConfigurationAssignments_List subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Resource group name</param>
		/// <param name="providerName">Resource provider name</param>
		/// <param name="resourceType">Resource type</param>
		/// <param name="resourceName">Resource identifier</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<ListConfigurationAssignmentsResult> ConfigurationAssignments_ListAsync(string subscriptionId, string resourceGroupName, string providerName, string resourceType, string resourceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (providerName==null? "" : System.Uri.EscapeDataString(providerName))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.Maintenance/configurationAssignments&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListConfigurationAssignmentsResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create configuration assignment
		/// Register configuration for resource.
		/// ConfigurationAssignments_CreateOrUpdate subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Resource group name</param>
		/// <param name="providerName">Resource provider name</param>
		/// <param name="resourceType">Resource type</param>
		/// <param name="resourceName">Resource identifier</param>
		/// <param name="configurationAssignmentName">Configuration assignment name</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">The configurationAssignment</param>
		/// <returns>OK</returns>
		public async Task<ConfigurationAssignment> ConfigurationAssignments_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string providerName, string resourceType, string resourceName, string configurationAssignmentName, string api_version, ConfigurationAssignment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (providerName==null? "" : System.Uri.EscapeDataString(providerName))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.Maintenance/configurationAssignments/"+ (configurationAssignmentName==null? "" : System.Uri.EscapeDataString(configurationAssignmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConfigurationAssignment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unregister configuration for resource
		/// Unregister configuration for resource.
		/// ConfigurationAssignments_Delete subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Resource group name</param>
		/// <param name="providerName">Resource provider name</param>
		/// <param name="resourceType">Resource type</param>
		/// <param name="resourceName">Resource identifier</param>
		/// <param name="configurationAssignmentName">Unique configuration assignment name</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<ConfigurationAssignment> ConfigurationAssignments_DeleteAsync(string subscriptionId, string resourceGroupName, string providerName, string resourceType, string resourceName, string configurationAssignmentName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (providerName==null? "" : System.Uri.EscapeDataString(providerName))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.Maintenance/configurationAssignments/"+ (configurationAssignmentName==null? "" : System.Uri.EscapeDataString(configurationAssignmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConfigurationAssignment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Updates to resource
		/// Get updates to resources.
		/// Updates_List subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/updates
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Resource group name</param>
		/// <param name="providerName">Resource provider name</param>
		/// <param name="resourceType">Resource type</param>
		/// <param name="resourceName">Resource identifier</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<ListUpdatesResult> Updates_ListAsync(string subscriptionId, string resourceGroupName, string providerName, string resourceType, string resourceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (providerName==null? "" : System.Uri.EscapeDataString(providerName))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.Maintenance/updates&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListUpdatesResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
