//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An Azure action group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ActionGroup
	{
		
		/// <summary>
		/// The list of ARM role receivers that are part of this action group. Roles are Azure RBAC roles and only built-in roles are supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="armRoleReceivers")]
		public ArmRoleReceiver[] ArmRoleReceivers { get; set; }
		
		/// <summary>
		/// The list of AutomationRunbook receivers that are part of this action group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="automationRunbookReceivers")]
		public AutomationRunbookReceiver[] AutomationRunbookReceivers { get; set; }
		
		/// <summary>
		/// The list of AzureAppPush receivers that are part of this action group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureAppPushReceivers")]
		public AzureAppPushReceiver[] AzureAppPushReceivers { get; set; }
		
		/// <summary>
		/// The list of azure function receivers that are part of this action group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureFunctionReceivers")]
		public AzureFunctionReceiver[] AzureFunctionReceivers { get; set; }
		
		/// <summary>
		/// The list of email receivers that are part of this action group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailReceivers")]
		public EmailReceiver[] EmailReceivers { get; set; }
		
		/// <summary>
		/// Indicates whether this action group is enabled. If an action group is not enabled, then none of its receivers will receive communications.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; } = true;
		
		/// <summary>
		/// The short name of the action group. This will be used in SMS messages.
		/// Required
		/// Max length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groupShortName")]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public string GroupShortName { get; set; }
		
		/// <summary>
		/// The list of ITSM receivers that are part of this action group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itsmReceivers")]
		public ItsmReceiver[] ItsmReceivers { get; set; }
		
		/// <summary>
		/// The list of logic app receivers that are part of this action group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logicAppReceivers")]
		public LogicAppReceiver[] LogicAppReceivers { get; set; }
		
		/// <summary>
		/// The list of SMS receivers that are part of this action group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smsReceivers")]
		public SmsReceiver[] SmsReceivers { get; set; }
		
		/// <summary>
		/// The list of voice receivers that are part of this action group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voiceReceivers")]
		public VoiceReceiver[] VoiceReceivers { get; set; }
		
		/// <summary>
		/// The list of webhook receivers that are part of this action group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookReceivers")]
		public WebhookReceiver[] WebhookReceivers { get; set; }
	}
	
	/// <summary>
	/// An arm role receiver.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArmRoleReceiver
	{
		
		/// <summary>
		/// The name of the arm role receiver. Names must be unique across all receivers within an action group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The arm role id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleId")]
		public string RoleId { get; set; }
		
		/// <summary>
		/// Indicates whether to use common alert schema.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="useCommonAlertSchema")]
		public bool UseCommonAlertSchema { get; set; }
	}
	
	/// <summary>
	/// The Azure Automation Runbook notification receiver.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutomationRunbookReceiver
	{
		
		/// <summary>
		/// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="automationAccountId")]
		public string AutomationAccountId { get; set; }
		
		/// <summary>
		/// Indicates whether this instance is global runbook.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isGlobalRunbook")]
		public bool IsGlobalRunbook { get; set; }
		
		/// <summary>
		/// Indicates name of the webhook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The name for this runbook.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="runbookName")]
		public string RunbookName { get; set; }
		
		/// <summary>
		/// The URI where webhooks should be sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceUri")]
		public string ServiceUri { get; set; }
		
		/// <summary>
		/// Indicates whether to use common alert schema.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="useCommonAlertSchema")]
		public bool UseCommonAlertSchema { get; set; }
		
		/// <summary>
		/// The resource id for webhook linked to this runbook.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhookResourceId")]
		public string WebhookResourceId { get; set; }
	}
	
	/// <summary>
	/// The Azure mobile App push notification receiver.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureAppPushReceiver
	{
		
		/// <summary>
		/// The email address registered for the Azure mobile app.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// An azure function receiver.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureFunctionReceiver
	{
		
		/// <summary>
		/// The azure resource id of the function app.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="functionAppResourceId")]
		public string FunctionAppResourceId { get; set; }
		
		/// <summary>
		/// The function name in the function app.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="functionName")]
		public string FunctionName { get; set; }
		
		/// <summary>
		/// The http trigger url where http request sent to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="httpTriggerUrl")]
		public string HttpTriggerUrl { get; set; }
		
		/// <summary>
		/// The name of the azure function receiver. Names must be unique across all receivers within an action group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates whether to use common alert schema.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="useCommonAlertSchema")]
		public bool UseCommonAlertSchema { get; set; }
	}
	
	/// <summary>
	/// An email receiver.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EmailReceiver
	{
		
		/// <summary>
		/// The email address of this receiver.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// The name of the email receiver. Names must be unique across all receivers within an action group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<EmailReceiverStatus> Status { get; set; }
		
		/// <summary>
		/// Indicates whether to use common alert schema.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="useCommonAlertSchema")]
		public bool UseCommonAlertSchema { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EmailReceiverStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 2,
	}
	
	/// <summary>
	/// An Itsm receiver.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ItsmReceiver
	{
		
		/// <summary>
		/// Unique identification of ITSM connection among multiple defined in above workspace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectionId")]
		public string ConnectionId { get; set; }
		
		/// <summary>
		/// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ticketConfiguration")]
		public string TicketConfiguration { get; set; }
		
		/// <summary>
		/// OMS LA instance identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		public string WorkspaceId { get; set; }
	}
	
	/// <summary>
	/// A logic app receiver.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LogicAppReceiver
	{
		
		/// <summary>
		/// The callback url where http request sent to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="callbackUrl")]
		public string CallbackUrl { get; set; }
		
		/// <summary>
		/// The name of the logic app receiver. Names must be unique across all receivers within an action group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The azure resource id of the logic app receiver.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Indicates whether to use common alert schema.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="useCommonAlertSchema")]
		public bool UseCommonAlertSchema { get; set; }
	}
	
	/// <summary>
	/// An SMS receiver.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SmsReceiver
	{
		
		/// <summary>
		/// The country code of the SMS receiver.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// The name of the SMS receiver. Names must be unique across all receivers within an action group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The phone number of the SMS receiver.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EmailReceiverStatus Status { get; set; }
	}
	
	/// <summary>
	/// A voice receiver.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VoiceReceiver
	{
		
		/// <summary>
		/// The country code of the voice receiver.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// The name of the voice receiver. Names must be unique across all receivers within an action group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The phone number of the voice receiver.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	/// <summary>
	/// A webhook receiver.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WebhookReceiver
	{
		
		/// <summary>
		/// Indicates the identifier uri for aad auth.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifierUri")]
		public string IdentifierUri { get; set; }
		
		/// <summary>
		/// The name of the webhook receiver. Names must be unique across all receivers within an action group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates the webhook app object Id for aad auth.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// The URI where webhooks should be sent.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceUri")]
		public string ServiceUri { get; set; }
		
		/// <summary>
		/// Indicates the tenant id for aad auth.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Indicates whether or not use AAD authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useAadAuth")]
		public System.Nullable<System.Boolean> UseAadAuth { get; set; }
		
		/// <summary>
		/// Indicates whether to use common alert schema.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="useCommonAlertSchema")]
		public bool UseCommonAlertSchema { get; set; }
	}
	
	/// <summary>
	/// A list of action groups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ActionGroupList
	{
		
		/// <summary>
		/// Provides the link to retrieve the next set of elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of action groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ActionGroupResource[] Value { get; set; }
	}
	
	/// <summary>
	/// An action group resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ActionGroupResource : Resource
	{
		
		/// <summary>
		/// An Azure action group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ActionGroup Properties { get; set; }
	}
	
	/// <summary>
	/// An Azure action group for patch operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ActionGroupPatch
	{
		
		/// <summary>
		/// Indicates whether this action group is enabled. If an action group is not enabled, then none of its actions will be activated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// An action group object for the body of patch operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ActionGroupPatchBody
	{
		
		/// <summary>
		/// An Azure action group for patch operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ActionGroupPatch Properties { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public object Tags { get; set; }
	}
	
	/// <summary>
	/// Describes a receiver that should be resubscribed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnableRequest
	{
		
		/// <summary>
		/// The name of the receiver to resubscribe.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
	}
	
	/// <summary>
	/// Describes the format of Error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ReceiverStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 2,
	}
	
	/// <summary>
	/// An azure resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Azure resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Azure resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public object Tags { get; set; }
		
		/// <summary>
		/// Azure resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get a list of all action groups in a subscription.
		/// ActionGroups_ListBySubscriptionId subscriptions/{subscriptionId}/providers/microsoft.insights/actionGroups
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>The request succeeded.</returns>
		public async Task<ActionGroupList> ActionGroups_ListBySubscriptionIdAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/microsoft.insights/actionGroups&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ActionGroupList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of all action groups in a resource group.
		/// ActionGroups_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>The request succeeded.</returns>
		public async Task<ActionGroupList> ActionGroups_ListByResourceGroupAsync(string resourceGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/actionGroups&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ActionGroupList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an action group.
		/// ActionGroups_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="actionGroupName">The name of the action group.</param>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>The request succeeded.</returns>
		public async Task<ActionGroupResource> ActionGroups_GetAsync(string resourceGroupName, string actionGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/actionGroups/"+ (actionGroupName==null? "" : System.Uri.EscapeDataString(actionGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ActionGroupResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new action group or update an existing one.
		/// ActionGroups_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="actionGroupName">The name of the action group.</param>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The action group to create or use for the update.</param>
		/// <returns>An existing action group was successfully updated.</returns>
		public async Task<ActionGroupResource> ActionGroups_CreateOrUpdateAsync(string resourceGroupName, string actionGroupName, string subscriptionId, string api_version, ActionGroupResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/actionGroups/"+ (actionGroupName==null? "" : System.Uri.EscapeDataString(actionGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ActionGroupResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an action group.
		/// ActionGroups_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="actionGroupName">The name of the action group.</param>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>The action group was successfully deleted.</returns>
		public async Task ActionGroups_DeleteAsync(string resourceGroupName, string actionGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/actionGroups/"+ (actionGroupName==null? "" : System.Uri.EscapeDataString(actionGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing action group's tags. To update other fields use the CreateOrUpdate method.
		/// ActionGroups_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="actionGroupName">The name of the action group.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the operation.</param>
		/// <returns>An existing action group was successfully updated.</returns>
		public async Task<ActionGroupResource> ActionGroups_UpdateAsync(string subscriptionId, string resourceGroupName, string actionGroupName, string api_version, ActionGroupPatchBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/actionGroups/"+ (actionGroupName==null? "" : System.Uri.EscapeDataString(actionGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ActionGroupResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable a receiver in an action group. This changes the receiver's status from Disabled to Enabled. This operation is only supported for Email or SMS receivers.
		/// ActionGroups_EnableReceiver subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}/subscribe
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="actionGroupName">The name of the action group.</param>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The receiver to re-enable.</param>
		/// <returns>The receiver was successfully enabled.</returns>
		public async Task ActionGroups_EnableReceiverAsync(string resourceGroupName, string actionGroupName, string subscriptionId, string api_version, EnableRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/actionGroups/"+ (actionGroupName==null? "" : System.Uri.EscapeDataString(actionGroupName))+"/subscribe&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
