//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public class AttachedDatabaseConfiguration
	{
	}
	
	/// <summary>
	/// The list attached database configurations operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AttachedDatabaseConfigurationListResult
	{
		
		/// <summary>
		/// The list of attached database configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AttachedDatabaseConfiguration[] Value { get; set; }
	}
	
	/// <summary>
	/// Class representing the an attached database configuration properties of kind specific.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AttachedDatabaseConfigurationProperties
	{
		
		/// <summary>
		/// The list of databases from the clusterResourceId which are currently attached to the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachedDatabaseNames")]
		public string[] AttachedDatabaseNames { get; set; }
		
		/// <summary>
		/// The resource id of the cluster where the databases you would like to attach reside.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clusterResourceId")]
		public string ClusterResourceId { get; set; }
		
		/// <summary>
		/// The name of the database which you would like to attach, use * if you want to follow all current and future databases.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// The default principals modification kind
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultPrincipalsModificationKind")]
		public AttachedDatabaseConfigurationPropertiesDefaultPrincipalsModificationKind DefaultPrincipalsModificationKind { get; set; }
		
		/// <summary>
		/// The provisioned state of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<AttachedDatabaseConfigurationPropertiesProvisioningState> ProvisioningState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AttachedDatabaseConfigurationPropertiesDefaultPrincipalsModificationKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Union = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Replace = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AttachedDatabaseConfigurationPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Moving = 5,
	}
	
	/// <summary>
	/// Azure capacity definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureCapacity
	{
		
		/// <summary>
		/// The default capacity that would be used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="default")]
		public int Default { get; set; }
		
		/// <summary>
		/// Maximum allowed capacity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public int Maximum { get; set; }
		
		/// <summary>
		/// Minimum allowed capacity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public int Minimum { get; set; }
		
		/// <summary>
		/// Scale type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scaleType")]
		public AzureCapacityScaleType ScaleType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AzureCapacityScaleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		automatic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		manual = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 2,
	}
	
	/// <summary>
	/// Azure resource SKU definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureResourceSku
	{
		
		/// <summary>
		/// Azure capacity definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public AzureCapacity Capacity { get; set; }
		
		/// <summary>
		/// Resource Namespace and Type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Azure SKU definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public AzureSku Sku { get; set; }
	}
	
	/// <summary>
	/// Azure SKU definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureSku
	{
		
		/// <summary>
		/// The number of instances of the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// SKU name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AzureSkuName Name { get; set; }
		
		/// <summary>
		/// SKU tier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public AzureSkuTier Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AzureSkuName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Standard_DS13_v2+1TB_PS")]
		Standard_DS13_v2Plus1TB_PS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Standard_DS13_v2+2TB_PS")]
		Standard_DS13_v2Plus2TB_PS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Standard_DS14_v2+3TB_PS")]
		Standard_DS14_v2Plus3TB_PS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Standard_DS14_v2+4TB_PS")]
		Standard_DS14_v2Plus4TB_PS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D13_v2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D14_v2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_L8s = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_L16s = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D11_v2 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D12_v2 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_L4s = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Dev(No SLA)_Standard_D11_v2")]
		DevNo_SLA_Standard_D11_v2 = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AzureSkuTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 1,
	}
	
	/// <summary>
	/// The result returned from a database check name availability request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameRequest
	{
		
		/// <summary>
		/// Resource name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of resource, for instance Microsoft.Kusto/clusters/databases.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CheckNameRequestType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckNameRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.Kusto/clusters/databases")]
		Microsoft_Kusto_clusters_databases = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.Kusto/clusters/attachedDatabaseConfigurations")]
		Microsoft_Kusto_clusters_attachedDatabaseConfigurations = 1,
	}
	
	/// <summary>
	/// The result returned from a check name availability request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameResult
	{
		
		/// <summary>
		/// Message indicating an unavailable name due to a conflict, or a description of the naming rules that are violated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The name that was checked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specifies a Boolean value that indicates if the name is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// Message providing the reason why the given name is invalid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<CheckNameResultReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckNameResultReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlreadyExists = 1,
	}
	
	/// <summary>
	/// An error response from Kusto.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// An error response from Kusto.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CloudErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// An error response from Kusto.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudErrorBody
	{
		
		/// <summary>
		/// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A list of additional details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public CloudErrorBody[] Details { get; set; }
		
		/// <summary>
		/// A message describing the error, intended to be suitable for displaying in a user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error. For example, the name of the property in error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	public class Cluster
	{
	}
	
	/// <summary>
	/// The result returned from a cluster check name availability request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterCheckNameRequest
	{
		
		/// <summary>
		/// Cluster name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of resource, Microsoft.Kusto/clusters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ClusterCheckNameRequestType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ClusterCheckNameRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.Kusto/clusters")]
		Microsoft_Kusto_clusters = 0,
	}
	
	/// <summary>
	/// The list Kusto clusters operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterListResult
	{
		
		/// <summary>
		/// The list of Kusto clusters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Cluster[] Value { get; set; }
	}
	
	public class ClusterPrincipalAssignment
	{
	}
	
	/// <summary>
	/// A principal assignment check name availability request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterPrincipalAssignmentCheckNameRequest
	{
		
		/// <summary>
		/// Principal Assignment resource name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of resource, Microsoft.Kusto/clusters/principalAssignments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ClusterPrincipalAssignmentCheckNameRequestType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ClusterPrincipalAssignmentCheckNameRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.Kusto/clusters/principalAssignments")]
		Microsoft_Kusto_clusters_principalAssignments = 0,
	}
	
	/// <summary>
	/// The list Kusto cluster principal assignments operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterPrincipalAssignmentListResult
	{
		
		/// <summary>
		/// The list of Kusto cluster principal assignments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ClusterPrincipalAssignment[] Value { get; set; }
	}
	
	/// <summary>
	/// A class representing cluster principal property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterPrincipalProperties
	{
		
		/// <summary>
		/// The principal ID assigned to the cluster principal. It can be a user email, application ID, or security group name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The principal name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalName")]
		public string PrincipalName { get; set; }
		
		/// <summary>
		/// Principal type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principalType")]
		public ClusterPrincipalPropertiesPrincipalType PrincipalType { get; set; }
		
		/// <summary>
		/// The provisioned state of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public AttachedDatabaseConfigurationPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Cluster principal role.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="role")]
		public ClusterPrincipalPropertiesRole Role { get; set; }
		
		/// <summary>
		/// The tenant id of the principal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The tenant name of the principal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantName")]
		public string TenantName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ClusterPrincipalPropertiesPrincipalType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		App = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		User = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ClusterPrincipalPropertiesRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllDatabasesAdmin = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllDatabasesViewer = 1,
	}
	
	/// <summary>
	/// Class representing the Kusto cluster properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterProperties
	{
		
		/// <summary>
		/// The cluster data ingestion URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataIngestionUri")]
		public string DataIngestionUri { get; set; }
		
		/// <summary>
		/// A boolean value that indicates if the cluster's disks are encrypted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableDiskEncryption")]
		public System.Nullable<System.Boolean> EnableDiskEncryption { get; set; }
		
		/// <summary>
		/// A boolean value that indicates if the streaming ingest is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableStreamingIngest")]
		public System.Nullable<System.Boolean> EnableStreamingIngest { get; set; }
		
		/// <summary>
		/// Properties of the key vault.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVaultProperties")]
		public KeyVaultProperties KeyVaultProperties { get; set; }
		
		/// <summary>
		/// A class that contains the optimized auto scale definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optimizedAutoscale")]
		public OptimizedAutoscale OptimizedAutoscale { get; set; }
		
		/// <summary>
		/// The provisioned state of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public AttachedDatabaseConfigurationPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The state of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ClusterPropertiesState> State { get; set; }
		
		/// <summary>
		/// The reason for the cluster's current state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateReason")]
		public string StateReason { get; set; }
		
		/// <summary>
		/// The cluster's external tenants.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trustedExternalTenants")]
		public TrustedExternalTenant[] TrustedExternalTenants { get; set; }
		
		/// <summary>
		/// The cluster URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// A class that contains virtual network definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualNetworkConfiguration")]
		public VirtualNetworkConfiguration VirtualNetworkConfiguration { get; set; }
	}
	
	/// <summary>
	/// A class that contains the optimized auto scale definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OptimizedAutoscale
	{
		
		/// <summary>
		/// A boolean value that indicate if the optimized autoscale feature is enabled or not.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public bool IsEnabled { get; set; }
		
		/// <summary>
		/// Maximum allowed instances count.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public int Maximum { get; set; }
		
		/// <summary>
		/// Minimum allowed instances count.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public int Minimum { get; set; }
		
		/// <summary>
		/// The version of the template defined, for instance 1.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public int Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ClusterPropertiesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unavailable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Starting = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 8,
	}
	
	/// <summary>
	/// Represents a tenant ID that is trusted by the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrustedExternalTenant
	{
		
		/// <summary>
		/// GUID representing an external tenant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A class that contains virtual network definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetworkConfiguration
	{
		
		/// <summary>
		/// Data management's service public IP address resource id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataManagementPublicIpId")]
		public string DataManagementPublicIpId { get; set; }
		
		/// <summary>
		/// Engine service's public IP address resource id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enginePublicIpId")]
		public string EnginePublicIpId { get; set; }
		
		/// <summary>
		/// The subnet resource id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subnetId")]
		public string SubnetId { get; set; }
	}
	
	public class ClusterUpdate
	{
	}
	
	/// <summary>
	/// The compression type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum Compression
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZip = 1,
	}
	
	public class DataConnection
	{
	}
	
	/// <summary>
	/// A data connection check name availability request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataConnectionCheckNameRequest
	{
		
		/// <summary>
		/// Data Connection name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of resource, Microsoft.Kusto/clusters/databases/dataConnections.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DataConnectionCheckNameRequestType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataConnectionCheckNameRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.Kusto/clusters/databases/dataConnections")]
		Microsoft_Kusto_clusters_databases_dataConnections = 0,
	}
	
	/// <summary>
	/// The list Kusto data connections operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataConnectionListResult
	{
		
		/// <summary>
		/// The list of Kusto data connections.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DataConnection[] Value { get; set; }
	}
	
	/// <summary>
	/// Class representing an data connection validation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataConnectionValidation
	{
		
		/// <summary>
		/// The name of the data connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataConnectionName")]
		public string DataConnectionName { get; set; }
		
		/// <summary>
		/// Class representing an data connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DataConnection Properties { get; set; }
	}
	
	/// <summary>
	/// The list Kusto data connection validation result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataConnectionValidationListResult
	{
		
		/// <summary>
		/// The list of Kusto data connection validation errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DataConnectionValidationResult[] Value { get; set; }
	}
	
	/// <summary>
	/// The result returned from a data connection validation request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataConnectionValidationResult
	{
		
		/// <summary>
		/// A message which indicates a problem in data connection validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	public class Database
	{
	}
	
	/// <summary>
	/// The list Kusto databases operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseListResult
	{
		
		/// <summary>
		/// The list of Kusto databases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Database[] Value { get; set; }
	}
	
	/// <summary>
	/// A class representing database principal entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabasePrincipal
	{
		
		/// <summary>
		/// Application id - relevant only for application principal type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Database principal email if exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Database principal fully qualified name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fqn")]
		public string Fqn { get; set; }
		
		/// <summary>
		/// Database principal name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Database principal role.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="role")]
		public DatabasePrincipalRole Role { get; set; }
		
		/// <summary>
		/// The tenant name of the principal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantName")]
		public string TenantName { get; set; }
		
		/// <summary>
		/// Database principal type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ClusterPrincipalPropertiesPrincipalType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DatabasePrincipalRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Admin = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ingestor = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monitor = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		User = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnrestrictedViewers = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Viewer = 5,
	}
	
	public class DatabasePrincipalAssignment
	{
	}
	
	/// <summary>
	/// A principal assignment check name availability request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabasePrincipalAssignmentCheckNameRequest
	{
		
		/// <summary>
		/// Principal Assignment resource name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of resource, Microsoft.Kusto/clusters/databases/principalAssignments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DatabasePrincipalAssignmentCheckNameRequestType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DatabasePrincipalAssignmentCheckNameRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.Kusto/clusters/databases/principalAssignments")]
		Microsoft_Kusto_clusters_databases_principalAssignments = 0,
	}
	
	/// <summary>
	/// The list Kusto database principal assignments operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabasePrincipalAssignmentListResult
	{
		
		/// <summary>
		/// The list of Kusto database principal assignments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DatabasePrincipalAssignment[] Value { get; set; }
	}
	
	/// <summary>
	/// The list Kusto database principals operation request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabasePrincipalListRequest
	{
		
		/// <summary>
		/// The list of Kusto database principals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DatabasePrincipal[] Value { get; set; }
	}
	
	/// <summary>
	/// The list Kusto database principals operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabasePrincipalListResult
	{
		
		/// <summary>
		/// The list of Kusto database principals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DatabasePrincipal[] Value { get; set; }
	}
	
	/// <summary>
	/// A class representing database principal property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabasePrincipalProperties
	{
		
		/// <summary>
		/// The principal ID assigned to the database principal. It can be a user email, application ID, or security group name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The principal name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalName")]
		public string PrincipalName { get; set; }
		
		/// <summary>
		/// Principal type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principalType")]
		public ClusterPrincipalPropertiesPrincipalType PrincipalType { get; set; }
		
		/// <summary>
		/// The provisioned state of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public AttachedDatabaseConfigurationPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Database principal role.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="role")]
		public DatabasePrincipalRole Role { get; set; }
		
		/// <summary>
		/// The tenant id of the principal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The tenant name of the principal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantName")]
		public string TenantName { get; set; }
	}
	
	/// <summary>
	/// A class that contains database statistics information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseStatistics
	{
		
		/// <summary>
		/// The database size - the total size of compressed data and index in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Double> Size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiagnoseVirtualNetworkResult
	{
		
		/// <summary>
		/// The list of network connectivity diagnostic finding
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="findings")]
		public string[] Findings { get; set; }
	}
	
	/// <summary>
	/// Class representing the Kusto event grid connection properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventGridConnectionProperties
	{
		
		/// <summary>
		/// The event hub consumer group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="consumerGroup")]
		public string ConsumerGroup { get; set; }
		
		/// <summary>
		/// The data format of the message. Optionally the data format can be added to each message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataFormat")]
		public EventGridConnectionPropertiesDataFormat DataFormat { get; set; }
		
		/// <summary>
		/// The resource ID where the event grid is configured to send events.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventHubResourceId")]
		public string EventHubResourceId { get; set; }
		
		/// <summary>
		/// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mappingRuleName")]
		public string MappingRuleName { get; set; }
		
		/// <summary>
		/// The resource ID of the storage account where the data resides.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageAccountResourceId")]
		public string StorageAccountResourceId { get; set; }
		
		/// <summary>
		/// The table where the data should be ingested. Optionally the table information can be added to each message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tableName")]
		public string TableName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EventGridConnectionPropertiesDataFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIJSON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSV = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCSV = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOHSV = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PSV = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TXT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAW = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLEJSON = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVRO = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSVE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARQUET = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORC = 13,
	}
	
	/// <summary>
	/// Class representing an Event Grid data connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventGridDataConnection : DataConnection
	{
		
		/// <summary>
		/// Class representing the Kusto event grid connection properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public EventGridConnectionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The data format of the message. Optionally the data format can be added to each message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EventGridDataFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIJSON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSV = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCSV = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOHSV = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PSV = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TXT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAW = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLEJSON = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVRO = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSVE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARQUET = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORC = 13,
	}
	
	/// <summary>
	/// Class representing the Kusto event hub connection properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventHubConnectionProperties
	{
		
		/// <summary>
		/// The compression type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compression")]
		public Compression Compression { get; set; }
		
		/// <summary>
		/// The event hub consumer group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="consumerGroup")]
		public string ConsumerGroup { get; set; }
		
		/// <summary>
		/// The data format of the message. Optionally the data format can be added to each message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataFormat")]
		public EventGridConnectionPropertiesDataFormat DataFormat { get; set; }
		
		/// <summary>
		/// The resource ID of the event hub to be used to create a data connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventHubResourceId")]
		public string EventHubResourceId { get; set; }
		
		/// <summary>
		/// System properties of the event hub
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventSystemProperties")]
		public string[] EventSystemProperties { get; set; }
		
		/// <summary>
		/// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mappingRuleName")]
		public string MappingRuleName { get; set; }
		
		/// <summary>
		/// The table where the data should be ingested. Optionally the table information can be added to each message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableName")]
		public string TableName { get; set; }
	}
	
	/// <summary>
	/// Class representing an event hub data connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventHubDataConnection : DataConnection
	{
		
		/// <summary>
		/// Class representing the Kusto event hub connection properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public EventHubConnectionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The data format of the message. Optionally the data format can be added to each message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EventHubDataFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIJSON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSV = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCSV = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOHSV = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PSV = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TXT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAW = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLEJSON = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVRO = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSVE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARQUET = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORC = 13,
	}
	
	/// <summary>
	/// A class representing follower database request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FollowerDatabaseDefinition
	{
		
		/// <summary>
		/// Resource name of the attached database configuration in the follower cluster.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attachedDatabaseConfigurationName")]
		public string AttachedDatabaseConfigurationName { get; set; }
		
		/// <summary>
		/// Resource id of the cluster that follows a database owned by this cluster.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clusterResourceId")]
		public string ClusterResourceId { get; set; }
		
		/// <summary>
		/// The database name owned by this cluster that was followed. * in case following all databases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
	}
	
	/// <summary>
	/// The list Kusto database principals operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FollowerDatabaseListResult
	{
		
		/// <summary>
		/// The list of follower database result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public FollowerDatabaseDefinition[] Value { get; set; }
	}
	
	/// <summary>
	/// Identity for the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Identity
	{
		
		/// <summary>
		/// The principal ID of resource identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The tenant ID of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The identity type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public IdentityType Type { get; set; }
		
		/// <summary>
		/// The list of user identities associated with the Kusto cluster. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, IdentityUserAssignedIdentities> UserAssignedIdentities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemAssigned = 1,
	}
	
	public class IdentityUserAssignedIdentities
	{
		
		/// <summary>
		/// The client id of user assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// The principal id of user assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	/// <summary>
	/// Class representing the Kusto Iot hub connection properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IotHubConnectionProperties
	{
		
		/// <summary>
		/// The iot hub consumer group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="consumerGroup")]
		public string ConsumerGroup { get; set; }
		
		/// <summary>
		/// The data format of the message. Optionally the data format can be added to each message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataFormat")]
		public EventGridConnectionPropertiesDataFormat DataFormat { get; set; }
		
		/// <summary>
		/// System properties of the iot hub
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventSystemProperties")]
		public string[] EventSystemProperties { get; set; }
		
		/// <summary>
		/// The resource ID of the Iot hub to be used to create a data connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iotHubResourceId")]
		public string IotHubResourceId { get; set; }
		
		/// <summary>
		/// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mappingRuleName")]
		public string MappingRuleName { get; set; }
		
		/// <summary>
		/// The name of the share access policy
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sharedAccessPolicyName")]
		public string SharedAccessPolicyName { get; set; }
		
		/// <summary>
		/// The table where the data should be ingested. Optionally the table information can be added to each message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableName")]
		public string TableName { get; set; }
	}
	
	/// <summary>
	/// Class representing an iot hub data connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IotHubDataConnection : DataConnection
	{
		
		/// <summary>
		/// Class representing the Kusto Iot hub connection properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public IotHubConnectionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The data format of the message. Optionally the data format can be added to each message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IotHubDataFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIJSON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSV = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCSV = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOHSV = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PSV = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TXT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAW = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLEJSON = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVRO = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSVE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARQUET = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORC = 13,
	}
	
	/// <summary>
	/// Properties of the key vault.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyVaultProperties
	{
		
		/// <summary>
		/// The name of the key vault key.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
		
		/// <summary>
		/// The Uri of the key vault.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyVaultUri")]
		public string KeyVaultUri { get; set; }
		
		/// <summary>
		/// The version of the key vault key.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyVersion")]
		public string KeyVersion { get; set; }
	}
	
	/// <summary>
	/// List of available SKUs for a Kusto Cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListResourceSkusResult
	{
		
		/// <summary>
		/// The collection of available SKUs for an existing resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AzureResourceSku[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// This is of the format {provider}/{resource}/{operation}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public string Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// Class representing a read only following database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ReadOnlyFollowingDatabase : Database
	{
		
		/// <summary>
		/// Class representing the Kusto database properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ReadOnlyFollowingDatabaseProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Class representing the Kusto database properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ReadOnlyFollowingDatabaseProperties
	{
		
		/// <summary>
		/// The name of the attached database configuration cluster
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachedDatabaseConfigurationName")]
		public string AttachedDatabaseConfigurationName { get; set; }
		
		/// <summary>
		/// The time the data should be kept in cache for fast queries in TimeSpan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hotCachePeriod")]
		public string HotCachePeriod { get; set; }
		
		/// <summary>
		/// The name of the leader cluster
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leaderClusterResourceId")]
		public string LeaderClusterResourceId { get; set; }
		
		/// <summary>
		/// The principals modification kind of the database
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalsModificationKind")]
		public AttachedDatabaseConfigurationPropertiesDefaultPrincipalsModificationKind PrincipalsModificationKind { get; set; }
		
		/// <summary>
		/// The provisioned state of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public AttachedDatabaseConfigurationPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The time the data should be kept before it stops being accessible to queries in TimeSpan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="softDeletePeriod")]
		public string SoftDeletePeriod { get; set; }
		
		/// <summary>
		/// A class that contains database statistics information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public DatabaseStatistics Statistics { get; set; }
	}
	
	/// <summary>
	/// Class representing a read write database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ReadWriteDatabase : Database
	{
		
		/// <summary>
		/// Class representing the Kusto database properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ReadWriteDatabaseProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Class representing the Kusto database properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ReadWriteDatabaseProperties
	{
		
		/// <summary>
		/// The time the data should be kept in cache for fast queries in TimeSpan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hotCachePeriod")]
		public string HotCachePeriod { get; set; }
		
		/// <summary>
		/// Indicates whether the database is followed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isFollowed")]
		public string IsFollowed { get; set; }
		
		/// <summary>
		/// The provisioned state of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public AttachedDatabaseConfigurationPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The time the data should be kept before it stops being accessible to queries in TimeSpan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="softDeletePeriod")]
		public string SoftDeletePeriod { get; set; }
		
		/// <summary>
		/// A class that contains database statistics information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public DatabaseStatistics Statistics { get; set; }
	}
	
	/// <summary>
	/// The Kusto SKU description of given resource type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkuDescription
	{
		
		/// <summary>
		/// Locations and zones
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationInfo")]
		public SkuLocationInfoItem[] LocationInfo { get; set; }
		
		/// <summary>
		/// The set of locations that the SKU is available
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public string[] Locations { get; set; }
		
		/// <summary>
		/// The name of the SKU
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// The restrictions because of which SKU cannot be used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public string[] Restrictions { get; set; }
		
		/// <summary>
		/// The tier of the SKU
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	/// <summary>
	/// The locations and zones info for SKU.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkuLocationInfoItem
	{
		
		/// <summary>
		/// The available location of the SKU.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The available zone of the SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zones")]
		public string[] Zones { get; set; }
	}
	
	/// <summary>
	/// The list of the EngagementFabric SKU descriptions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkuDescriptionList
	{
		
		/// <summary>
		/// SKU descriptions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SkuDescription[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists available operations for the Microsoft.Kusto provider.
		/// Operations_List providers/Microsoft.Kusto/operations
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>The operation was successful. The response contains the list of available operations.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Kusto/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Kusto clusters within a subscription.
		/// Clusters_List subscriptions/{subscriptionId}/providers/Microsoft.Kusto/clusters
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>OK.</returns>
		public async Task<ClusterListResult> Clusters_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Kusto/clusters&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ClusterListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks that the cluster name is valid and is not already in use.
		/// Clusters_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.Kusto/locations/{location}/checkNameAvailability
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="location">Azure location.</param>
		/// <param name="requestBody">The name of the cluster.</param>
		/// <returns>OK -- Operation to check the kusto resource name availability was successful.</returns>
		public async Task<CheckNameResult> Clusters_CheckNameAvailabilityAsync(string api_version, string subscriptionId, string location, ClusterCheckNameRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Kusto/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/checkNameAvailability?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CheckNameResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists eligible SKUs for Kusto resource provider.
		/// Clusters_ListSkus subscriptions/{subscriptionId}/providers/Microsoft.Kusto/skus
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK.</returns>
		public async Task<SkuDescriptionList> Clusters_ListSkusAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Kusto/skus?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SkuDescriptionList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Kusto clusters within a resource group.
		/// Clusters_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>OK.</returns>
		public async Task<ClusterListResult> Clusters_ListByResourceGroupAsync(string resourceGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ClusterListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Kusto cluster.
		/// Clusters_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>The Kusto cluster.</returns>
		public async Task<Cluster> Clusters_GetAsync(string resourceGroupName, string clusterName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Cluster>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a Kusto cluster.
		/// Clusters_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="requestBody">The Kusto cluster parameters supplied to the CreateOrUpdate operation.</param>
		/// <returns>Successfully updated the Cluster.</returns>
		public async Task<Cluster> Clusters_CreateOrUpdateAsync(string resourceGroupName, string clusterName, string subscriptionId, string api_version, Cluster requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Cluster>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Kusto cluster.
		/// Clusters_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>OK -- cluster deleted successfully.</returns>
		public async Task Clusters_DeleteAsync(string resourceGroupName, string clusterName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Kusto cluster.
		/// Clusters_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="requestBody">The Kusto cluster parameters supplied to the Update operation.</param>
		/// <returns>Successfully updated the Cluster.</returns>
		public async Task<Cluster> Clusters_UpdateAsync(string resourceGroupName, string clusterName, string subscriptionId, string api_version, ClusterUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Cluster>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the list of attached database configurations of the given Kusto cluster.
		/// AttachedDatabaseConfigurations_ListByCluster subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/attachedDatabaseConfigurations
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>Successfully retrieved the list of attached database configurations.</returns>
		public async Task<AttachedDatabaseConfigurationListResult> AttachedDatabaseConfigurations_ListByClusterAsync(string resourceGroupName, string clusterName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/attachedDatabaseConfigurations&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AttachedDatabaseConfigurationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an attached database configuration.
		/// AttachedDatabaseConfigurations_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/attachedDatabaseConfigurations/{attachedDatabaseConfigurationName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="attachedDatabaseConfigurationName">The name of the attached database configuration.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>Successfully retrieved the specified attached database configuration.</returns>
		public async Task<AttachedDatabaseConfiguration> AttachedDatabaseConfigurations_GetAsync(string resourceGroupName, string clusterName, string attachedDatabaseConfigurationName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/attachedDatabaseConfigurations/"+ (attachedDatabaseConfigurationName==null? "" : System.Uri.EscapeDataString(attachedDatabaseConfigurationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AttachedDatabaseConfiguration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an attached database configuration.
		/// AttachedDatabaseConfigurations_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/attachedDatabaseConfigurations/{attachedDatabaseConfigurationName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="attachedDatabaseConfigurationName">The name of the attached database configuration.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="requestBody">The database parameters supplied to the CreateOrUpdate operation.</param>
		/// <returns>Successfully updated the database.</returns>
		public async Task<AttachedDatabaseConfiguration> AttachedDatabaseConfigurations_CreateOrUpdateAsync(string resourceGroupName, string clusterName, string attachedDatabaseConfigurationName, string subscriptionId, string api_version, AttachedDatabaseConfiguration requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/attachedDatabaseConfigurations/"+ (attachedDatabaseConfigurationName==null? "" : System.Uri.EscapeDataString(attachedDatabaseConfigurationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AttachedDatabaseConfiguration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the attached database configuration with the given name.
		/// AttachedDatabaseConfigurations_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/attachedDatabaseConfigurations/{attachedDatabaseConfigurationName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="attachedDatabaseConfigurationName">The name of the attached database configuration.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>Successfully deleted the database.</returns>
		public async Task AttachedDatabaseConfigurations_DeleteAsync(string resourceGroupName, string clusterName, string attachedDatabaseConfigurationName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/attachedDatabaseConfigurations/"+ (attachedDatabaseConfigurationName==null? "" : System.Uri.EscapeDataString(attachedDatabaseConfigurationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks that the database name is valid and is not already in use.
		/// Databases_CheckNameAvailability subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/checkNameAvailability
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The name of the resource.</param>
		/// <returns>OK -- Operation to check the kusto resource name availability was successful.</returns>
		public async Task<CheckNameResult> Databases_CheckNameAvailabilityAsync(string resourceGroupName, string clusterName, string api_version, string subscriptionId, CheckNameRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/checkNameAvailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CheckNameResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks that the principal assignment name is valid and is not already in use.
		/// ClusterPrincipalAssignments_CheckNameAvailability subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/checkPrincipalAssignmentNameAvailability
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The name of the principal assignment.</param>
		/// <returns>OK -- Operation to check the kusto resource name availability was successful.</returns>
		public async Task<CheckNameResult> ClusterPrincipalAssignments_CheckNameAvailabilityAsync(string resourceGroupName, string clusterName, string api_version, string subscriptionId, ClusterPrincipalAssignmentCheckNameRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/checkPrincipalAssignmentNameAvailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CheckNameResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the list of databases of the given Kusto cluster.
		/// Databases_ListByCluster subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>Successfully retrieved the list of databases.</returns>
		public async Task<DatabaseListResult> Databases_ListByClusterAsync(string resourceGroupName, string clusterName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/databases&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DatabaseListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a database.
		/// Databases_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="databaseName">The name of the database in the Kusto cluster.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>Successfully retrieved the specified database.</returns>
		public async Task<Database> Databases_GetAsync(string resourceGroupName, string clusterName, string databaseName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Database>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a database.
		/// Databases_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="databaseName">The name of the database in the Kusto cluster.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="requestBody">The database parameters supplied to the CreateOrUpdate operation.</param>
		/// <returns>Successfully updated the database.</returns>
		public async Task<Database> Databases_CreateOrUpdateAsync(string resourceGroupName, string clusterName, string databaseName, string subscriptionId, string api_version, Database requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Database>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the database with the given name.
		/// Databases_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="databaseName">The name of the database in the Kusto cluster.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>Successfully deleted the database.</returns>
		public async Task Databases_DeleteAsync(string resourceGroupName, string clusterName, string databaseName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a database.
		/// Databases_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="databaseName">The name of the database in the Kusto cluster.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="requestBody">The database parameters supplied to the Update operation.</param>
		/// <returns>Successfully updated the database.</returns>
		public async Task<Database> Databases_UpdateAsync(string resourceGroupName, string clusterName, string databaseName, string subscriptionId, string api_version, Database requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Database>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add Database principals permissions.
		/// Databases_AddPrincipals subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/addPrincipals
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="databaseName">The name of the database in the Kusto cluster.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="requestBody">List of database principals to add.</param>
		/// <returns>OK -- Successfully added the list of database principals. Returns the updated list of principals.</returns>
		public async Task<DatabasePrincipalListResult> Databases_AddPrincipalsAsync(string resourceGroupName, string clusterName, string databaseName, string subscriptionId, string api_version, DatabasePrincipalListRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/addPrincipals&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DatabasePrincipalListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks that the data connection name is valid and is not already in use.
		/// DataConnections_CheckNameAvailability subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/checkNameAvailability
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="databaseName">The name of the database in the Kusto cluster.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The name of the data connection.</param>
		/// <returns>OK -- Operation to check the Kusto resource name availability was successful.</returns>
		public async Task<CheckNameResult> DataConnections_CheckNameAvailabilityAsync(string resourceGroupName, string clusterName, string databaseName, string api_version, string subscriptionId, DataConnectionCheckNameRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/checkNameAvailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CheckNameResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks that the database principal assignment is valid and is not already in use.
		/// DatabasePrincipalAssignments_CheckNameAvailability subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/checkPrincipalAssignmentNameAvailability
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="databaseName">The name of the database in the Kusto cluster.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The name of the resource.</param>
		/// <returns>OK -- Operation to check the kusto resource name availability was successful.</returns>
		public async Task<CheckNameResult> DatabasePrincipalAssignments_CheckNameAvailabilityAsync(string resourceGroupName, string clusterName, string databaseName, string api_version, string subscriptionId, DatabasePrincipalAssignmentCheckNameRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/checkPrincipalAssignmentNameAvailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CheckNameResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks that the data connection parameters are valid.
		/// DataConnections_dataConnectionValidation subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnectionValidation
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="databaseName">The name of the database in the Kusto cluster.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The data connection parameters supplied to the CreateOrUpdate operation.</param>
		/// <returns>OK -- Operation to check the kusto resource name availability was successful.</returns>
		public async Task<DataConnectionValidationListResult> DataConnections_dataConnectionValidationAsync(string resourceGroupName, string clusterName, string databaseName, string api_version, string subscriptionId, DataConnectionValidation requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/dataConnectionValidation&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataConnectionValidationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the list of data connections of the given Kusto database.
		/// DataConnections_ListByDatabase subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="databaseName">The name of the database in the Kusto cluster.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>Successfully retrieved the list of data connections.</returns>
		public async Task<DataConnectionListResult> DataConnections_ListByDatabaseAsync(string resourceGroupName, string clusterName, string databaseName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/dataConnections&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataConnectionListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a data connection.
		/// DataConnections_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections/{dataConnectionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="databaseName">The name of the database in the Kusto cluster.</param>
		/// <param name="dataConnectionName">The name of the data connection.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>Successfully retrieved the specified data connection.</returns>
		public async Task<DataConnection> DataConnections_GetAsync(string resourceGroupName, string clusterName, string databaseName, string dataConnectionName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/dataConnections/"+ (dataConnectionName==null? "" : System.Uri.EscapeDataString(dataConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataConnection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a data connection.
		/// DataConnections_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections/{dataConnectionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="databaseName">The name of the database in the Kusto cluster.</param>
		/// <param name="dataConnectionName">The name of the data connection.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="requestBody">The data connection parameters supplied to the CreateOrUpdate operation.</param>
		/// <returns>Successfully updated the data connection.</returns>
		public async Task<DataConnection> DataConnections_CreateOrUpdateAsync(string resourceGroupName, string clusterName, string databaseName, string dataConnectionName, string subscriptionId, string api_version, DataConnection requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/dataConnections/"+ (dataConnectionName==null? "" : System.Uri.EscapeDataString(dataConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataConnection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the data connection with the given name.
		/// DataConnections_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections/{dataConnectionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="databaseName">The name of the database in the Kusto cluster.</param>
		/// <param name="dataConnectionName">The name of the data connection.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>Successfully deleted the data connection.</returns>
		public async Task DataConnections_DeleteAsync(string resourceGroupName, string clusterName, string databaseName, string dataConnectionName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/dataConnections/"+ (dataConnectionName==null? "" : System.Uri.EscapeDataString(dataConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a data connection.
		/// DataConnections_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections/{dataConnectionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="databaseName">The name of the database in the Kusto cluster.</param>
		/// <param name="dataConnectionName">The name of the data connection.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="requestBody">The data connection parameters supplied to the Update operation.</param>
		/// <returns>Successfully updated the data connection.</returns>
		public async Task<DataConnection> DataConnections_UpdateAsync(string resourceGroupName, string clusterName, string databaseName, string dataConnectionName, string subscriptionId, string api_version, DataConnection requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/dataConnections/"+ (dataConnectionName==null? "" : System.Uri.EscapeDataString(dataConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataConnection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of database principals of the given Kusto cluster and database.
		/// Databases_ListPrincipals subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/listPrincipals
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="databaseName">The name of the database in the Kusto cluster.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>Successfully retrieved the list of database principals.</returns>
		public async Task<DatabasePrincipalListResult> Databases_ListPrincipalsAsync(string resourceGroupName, string clusterName, string databaseName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/listPrincipals&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DatabasePrincipalListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Kusto cluster database principalAssignments.
		/// DatabasePrincipalAssignments_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/principalAssignments
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="databaseName">The name of the database in the Kusto cluster.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>OK.</returns>
		public async Task<DatabasePrincipalAssignmentListResult> DatabasePrincipalAssignments_ListAsync(string subscriptionId, string resourceGroupName, string clusterName, string databaseName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/principalAssignments&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DatabasePrincipalAssignmentListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Kusto cluster database principalAssignment.
		/// DatabasePrincipalAssignments_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/principalAssignments/{principalAssignmentName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="databaseName">The name of the database in the Kusto cluster.</param>
		/// <param name="principalAssignmentName">The name of the Kusto principalAssignment.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>The Kusto cluster database principal assignment object.</returns>
		public async Task<DatabasePrincipalAssignment> DatabasePrincipalAssignments_GetAsync(string subscriptionId, string resourceGroupName, string clusterName, string databaseName, string principalAssignmentName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/principalAssignments/"+ (principalAssignmentName==null? "" : System.Uri.EscapeDataString(principalAssignmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DatabasePrincipalAssignment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Kusto cluster database principalAssignment.
		/// DatabasePrincipalAssignments_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/principalAssignments/{principalAssignmentName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="databaseName">The name of the database in the Kusto cluster.</param>
		/// <param name="principalAssignmentName">The name of the Kusto principalAssignment.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="requestBody">The Kusto principalAssignments parameters supplied for the operation.</param>
		/// <returns>Successfully updated the PrincipalAssignments.</returns>
		public async Task<DatabasePrincipalAssignment> DatabasePrincipalAssignments_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string clusterName, string databaseName, string principalAssignmentName, string api_version, DatabasePrincipalAssignment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/principalAssignments/"+ (principalAssignmentName==null? "" : System.Uri.EscapeDataString(principalAssignmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DatabasePrincipalAssignment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Kusto principalAssignment.
		/// DatabasePrincipalAssignments_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/principalAssignments/{principalAssignmentName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="databaseName">The name of the database in the Kusto cluster.</param>
		/// <param name="principalAssignmentName">The name of the Kusto principalAssignment.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>OK -- principalAssignments deleted successfully.</returns>
		public async Task DatabasePrincipalAssignments_DeleteAsync(string subscriptionId, string resourceGroupName, string clusterName, string databaseName, string principalAssignmentName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/principalAssignments/"+ (principalAssignmentName==null? "" : System.Uri.EscapeDataString(principalAssignmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove Database principals permissions.
		/// Databases_RemovePrincipals subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/removePrincipals
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="databaseName">The name of the database in the Kusto cluster.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="requestBody">List of database principals to remove.</param>
		/// <returns>OK -- Successfully removed the list of database principals. Returns the updated list of principals.</returns>
		public async Task<DatabasePrincipalListResult> Databases_RemovePrincipalsAsync(string resourceGroupName, string clusterName, string databaseName, string subscriptionId, string api_version, DatabasePrincipalListRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/removePrincipals&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DatabasePrincipalListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Detaches all followers of a database owned by this cluster.
		/// Clusters_DetachFollowerDatabases subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/detachFollowerDatabases
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="requestBody">The follower databases properties to remove.</param>
		/// <returns>OK.</returns>
		public async Task Clusters_DetachFollowerDatabasesAsync(string resourceGroupName, string clusterName, string subscriptionId, string api_version, FollowerDatabaseDefinition requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/detachFollowerDatabases&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Diagnoses network connectivity status for external resources on which the service is dependent on.
		/// Clusters_DiagnoseVirtualNetwork subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/diagnoseVirtualNetwork
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>OK.</returns>
		public async Task<DiagnoseVirtualNetworkResult> Clusters_DiagnoseVirtualNetworkAsync(string resourceGroupName, string clusterName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/diagnoseVirtualNetwork&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiagnoseVirtualNetworkResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of databases that are owned by this cluster and were followed by another cluster.
		/// Clusters_ListFollowerDatabases subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/listFollowerDatabases
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>Successfully retrieved the list of followed databases.</returns>
		public async Task<FollowerDatabaseListResult> Clusters_ListFollowerDatabasesAsync(string resourceGroupName, string clusterName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/listFollowerDatabases&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FollowerDatabaseListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Kusto cluster principalAssignments.
		/// ClusterPrincipalAssignments_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/principalAssignments
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>OK.</returns>
		public async Task<ClusterPrincipalAssignmentListResult> ClusterPrincipalAssignments_ListAsync(string subscriptionId, string resourceGroupName, string clusterName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/principalAssignments&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ClusterPrincipalAssignmentListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Kusto cluster principalAssignment.
		/// ClusterPrincipalAssignments_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/principalAssignments/{principalAssignmentName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="principalAssignmentName">The name of the Kusto principalAssignment.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>The Kusto cluster principal assignment object.</returns>
		public async Task<ClusterPrincipalAssignment> ClusterPrincipalAssignments_GetAsync(string subscriptionId, string resourceGroupName, string clusterName, string principalAssignmentName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/principalAssignments/"+ (principalAssignmentName==null? "" : System.Uri.EscapeDataString(principalAssignmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ClusterPrincipalAssignment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Kusto cluster principalAssignment.
		/// ClusterPrincipalAssignments_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/principalAssignments/{principalAssignmentName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="principalAssignmentName">The name of the Kusto principalAssignment.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="requestBody">The Kusto cluster principalAssignment's parameters supplied for the operation.</param>
		/// <returns>Successfully updated the PrincipalAssignment.</returns>
		public async Task<ClusterPrincipalAssignment> ClusterPrincipalAssignments_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string clusterName, string principalAssignmentName, string api_version, ClusterPrincipalAssignment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/principalAssignments/"+ (principalAssignmentName==null? "" : System.Uri.EscapeDataString(principalAssignmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ClusterPrincipalAssignment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Kusto cluster principalAssignment.
		/// ClusterPrincipalAssignments_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/principalAssignments/{principalAssignmentName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="principalAssignmentName">The name of the Kusto principalAssignment.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>OK -- principalAssignments deleted successfully.</returns>
		public async Task ClusterPrincipalAssignments_DeleteAsync(string subscriptionId, string resourceGroupName, string clusterName, string principalAssignmentName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/principalAssignments/"+ (principalAssignmentName==null? "" : System.Uri.EscapeDataString(principalAssignmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the SKUs available for the provided resource.
		/// Clusters_ListSkusByResource subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/skus
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK.</returns>
		public async Task<ListResourceSkusResult> Clusters_ListSkusByResourceAsync(string resourceGroupName, string clusterName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/skus&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListResourceSkusResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a Kusto cluster.
		/// Clusters_Start subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/start
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>OK.</returns>
		public async Task Clusters_StartAsync(string resourceGroupName, string clusterName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/start&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops a Kusto cluster.
		/// Clusters_Stop subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/stop
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Kusto cluster.</param>
		/// <param name="clusterName">The name of the Kusto cluster.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>OK.</returns>
		public async Task Clusters_StopAsync(string resourceGroupName, string clusterName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Kusto/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/stop&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
