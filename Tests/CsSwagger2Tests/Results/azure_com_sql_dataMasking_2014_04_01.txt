//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public class DataMaskingPolicy
	{
	}
	
	/// <summary>
	/// The properties of a database data masking policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataMaskingPolicyProperties
	{
		
		/// <summary>
		/// The list of the application principals. This is a legacy parameter and is no longer used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationPrincipals")]
		public string ApplicationPrincipals { get; set; }
		
		/// <summary>
		/// The state of the data masking policy.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataMaskingState")]
		public DataMaskingPolicyPropertiesDataMaskingState DataMaskingState { get; set; }
		
		/// <summary>
		/// The list of the exempt principals. Specifies the semicolon-separated list of database users for which the data masking policy does not apply. The specified users receive data results without masking for all of the database queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptPrincipals")]
		public string ExemptPrincipals { get; set; }
		
		/// <summary>
		/// The masking level. This is a legacy parameter and is no longer used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maskingLevel")]
		public string MaskingLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataMaskingPolicyPropertiesDataMaskingState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
	}
	
	public class DataMaskingRule
	{
	}
	
	/// <summary>
	/// The response to a list data masking rules request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataMaskingRuleListResult
	{
		
		/// <summary>
		/// The list of database data masking rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DataMaskingRule[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of a database data masking rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataMaskingRuleProperties
	{
		
		/// <summary>
		/// The alias name. This is a legacy parameter and is no longer used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aliasName")]
		public string AliasName { get; set; }
		
		/// <summary>
		/// The column name on which the data masking rule is applied.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="columnName")]
		public string ColumnName { get; set; }
		
		/// <summary>
		/// The rule Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The masking function that is used for the data masking rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maskingFunction")]
		public DataMaskingRulePropertiesMaskingFunction MaskingFunction { get; set; }
		
		/// <summary>
		/// The numberFrom property of the masking rule. Required if maskingFunction is set to Number, otherwise this parameter will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberFrom")]
		public string NumberFrom { get; set; }
		
		/// <summary>
		/// The numberTo property of the data masking rule. Required if maskingFunction is set to Number, otherwise this parameter will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberTo")]
		public string NumberTo { get; set; }
		
		/// <summary>
		/// If maskingFunction is set to Text, the number of characters to show unmasked in the beginning of the string. Otherwise, this parameter will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prefixSize")]
		public string PrefixSize { get; set; }
		
		/// <summary>
		/// If maskingFunction is set to Text, the character to use for masking the unexposed part of the string. Otherwise, this parameter will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replacementString")]
		public string ReplacementString { get; set; }
		
		/// <summary>
		/// The rule state. Used to delete a rule. To delete an existing rule, specify the schemaName, tableName, columnName, maskingFunction, and specify ruleState as disabled. However, if the rule doesn't already exist, the rule will be created with ruleState set to enabled, regardless of the provided value of ruleState.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ruleState")]
		public DataMaskingPolicyPropertiesDataMaskingState RuleState { get; set; }
		
		/// <summary>
		/// The schema name on which the data masking rule is applied.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schemaName")]
		public string SchemaName { get; set; }
		
		/// <summary>
		/// If maskingFunction is set to Text, the number of characters to show unmasked at the end of the string. Otherwise, this parameter will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suffixSize")]
		public string SuffixSize { get; set; }
		
		/// <summary>
		/// The table name on which the data masking rule is applied.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tableName")]
		public string TableName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataMaskingRulePropertiesMaskingFunction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CCN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Email = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Number = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Text = 5,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a database data masking policy.
		/// DataMaskingPolicies_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/{dataMaskingPolicyName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="dataMaskingPolicyName">The name of the database for which the data masking rule applies.</param>
		/// <returns>OK</returns>
		public async Task<DataMaskingPolicy> DataMaskingPolicies_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string databaseName, DataMaskingPolicies_GetDataMaskingPolicyName dataMaskingPolicyName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/dataMaskingPolicies/"+dataMaskingPolicyName+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataMaskingPolicy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a database data masking policy
		/// DataMaskingPolicies_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/{dataMaskingPolicyName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="dataMaskingPolicyName">The name of the database for which the data masking rule applies.</param>
		/// <param name="requestBody">Parameters for creating or updating a data masking policy.</param>
		/// <returns>OK</returns>
		public async Task<DataMaskingPolicy> DataMaskingPolicies_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string databaseName, DataMaskingPolicies_GetDataMaskingPolicyName dataMaskingPolicyName, DataMaskingPolicy requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/dataMaskingPolicies/"+dataMaskingPolicyName+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataMaskingPolicy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of database data masking rules.
		/// DataMaskingRules_ListByDatabase subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/{dataMaskingPolicyName}/rules
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="dataMaskingPolicyName">The name of the database for which the data masking rule applies.</param>
		/// <returns>OK</returns>
		public async Task<DataMaskingRuleListResult> DataMaskingRules_ListByDatabaseAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string databaseName, DataMaskingPolicies_GetDataMaskingPolicyName dataMaskingPolicyName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/dataMaskingPolicies/"+dataMaskingPolicyName+"/rules?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataMaskingRuleListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a database data masking rule.
		/// DataMaskingRules_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/{dataMaskingPolicyName}/rules/{dataMaskingRuleName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="dataMaskingPolicyName">The name of the database for which the data masking rule applies.</param>
		/// <param name="dataMaskingRuleName">The name of the data masking rule.</param>
		/// <param name="requestBody">The required parameters for creating or updating a data masking rule.</param>
		/// <returns>OK</returns>
		public async Task<DataMaskingRule> DataMaskingRules_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string databaseName, DataMaskingPolicies_GetDataMaskingPolicyName dataMaskingPolicyName, string dataMaskingRuleName, DataMaskingRule requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/dataMaskingPolicies/"+dataMaskingPolicyName+"/rules/"+ (dataMaskingRuleName==null? "" : System.Uri.EscapeDataString(dataMaskingRuleName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataMaskingRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum DataMaskingPolicies_GetDataMaskingPolicyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
