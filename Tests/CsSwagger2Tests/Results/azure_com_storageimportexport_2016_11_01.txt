//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// BitLocker recovery key or password to the specified drive
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DriveBitLockerKey
	{
		
		/// <summary>
		/// BitLocker recovery key or password
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitLockerKey")]
		public string BitLockerKey { get; set; }
		
		/// <summary>
		/// Drive ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveId")]
		public string DriveId { get; set; }
	}
	
	/// <summary>
	/// Provides information about the drive's status
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DriveStatus
	{
		
		/// <summary>
		/// The BitLocker key used to encrypt the drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitLockerKey")]
		public string BitLockerKey { get; set; }
		
		/// <summary>
		/// Bytes successfully transferred for the drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bytesSucceeded")]
		public System.Nullable<System.Int64> BytesSucceeded { get; set; }
		
		/// <summary>
		/// Detailed status about the data transfer process. This field is not returned in the response until the drive is in the Transferring state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyStatus")]
		public string CopyStatus { get; set; }
		
		/// <summary>
		/// The drive header hash value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveHeaderHash")]
		public string DriveHeaderHash { get; set; }
		
		/// <summary>
		/// The drive's hardware serial number, without spaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveId")]
		public string DriveId { get; set; }
		
		/// <summary>
		/// A URI that points to the blob containing the error log for the data transfer operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorLogUri")]
		public string ErrorLogUri { get; set; }
		
		/// <summary>
		/// The relative path of the manifest file on the drive. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manifestFile")]
		public string ManifestFile { get; set; }
		
		/// <summary>
		/// The Base16-encoded MD5 hash of the manifest file on the drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manifestHash")]
		public string ManifestHash { get; set; }
		
		/// <summary>
		/// A URI that points to the blob containing the drive manifest file. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manifestUri")]
		public string ManifestUri { get; set; }
		
		/// <summary>
		/// Percentage completed for the drive. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentComplete")]
		public System.Nullable<System.Int32> PercentComplete { get; set; }
		
		/// <summary>
		/// The drive's current state. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<DriveStatusState> State { get; set; }
		
		/// <summary>
		/// A URI that points to the blob containing the verbose log for the data transfer operation. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verboseLogUri")]
		public string VerboseLogUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DriveStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Specified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Received = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NeverReceived = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Transferring = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CompletedMoreInfo = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ShippedBack = 6,
	}
	
	/// <summary>
	/// Response when errors occurred
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Describes the error information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public object Error { get; set; }
	}
	
	/// <summary>
	/// A property containing information about the blobs to be exported for an export job. This property is required for export jobs, but must not be specified for import jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Export
	{
		
		/// <summary>
		/// A list of the blobs to be exported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobList")]
		public object BlobList { get; set; }
		
		/// <summary>
		/// The relative URI to the block blob that contains the list of blob paths or blob path prefixes as defined above, beginning with the container name. If the blob is in root container, the URI must begin with $root. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobListblobPath")]
		public string BlobListblobPath { get; set; }
	}
	
	/// <summary>
	/// GetBitLockerKeys response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetBitLockerKeysResponse
	{
		
		/// <summary>
		/// drive status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DriveBitLockerKey[] Value { get; set; }
	}
	
	/// <summary>
	/// Specifies the job properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobDetails
	{
		
		/// <summary>
		/// Default value is false. Indicates whether the manifest files on the drives should be copied to block blobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupDriveManifest")]
		public System.Nullable<System.Boolean> BackupDriveManifest { get; set; }
		
		/// <summary>
		/// Indicates whether a request has been submitted to cancel the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelRequested")]
		public System.Nullable<System.Boolean> CancelRequested { get; set; }
		
		/// <summary>
		/// Contains information about the package being shipped by the customer to the Microsoft data center.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryPackage")]
		public PackageInfomation DeliveryPackage { get; set; }
		
		/// <summary>
		/// The virtual blob directory to which the copy logs and backups of drive manifest files (if enabled) will be stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diagnosticsPath")]
		public string DiagnosticsPath { get; set; }
		
		/// <summary>
		/// List of up to ten drives that comprise the job. The drive list is a required element for an import job; it is not specified for export jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveList")]
		public DriveStatus[] DriveList { get; set; }
		
		/// <summary>
		/// A property containing information about the blobs to be exported for an export job. This property is required for export jobs, but must not be specified for import jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="export")]
		public Export Export { get; set; }
		
		/// <summary>
		/// A blob path that points to a block blob containing a list of blob names that were not exported due to insufficient drive space. If all blobs were exported successfully, then this element is not included in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incompleteBlobListUri")]
		public string IncompleteBlobListUri { get; set; }
		
		/// <summary>
		/// The type of job
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobType")]
		public string JobType { get; set; }
		
		/// <summary>
		/// Default value is Error. Indicates whether error logging or verbose logging will be enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logLevel")]
		public string LogLevel { get; set; }
		
		/// <summary>
		/// Overall percentage completed for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentComplete")]
		public System.Nullable<System.Int32> PercentComplete { get; set; }
		
		/// <summary>
		/// Specifies the provisioning state of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// Specifies the return address information for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnAddress")]
		public ReturnAddress ReturnAddress { get; set; }
		
		/// <summary>
		/// Contains information about the package being shipped by the customer to the Microsoft data center.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnPackage")]
		public PackageInfomation ReturnPackage { get; set; }
		
		/// <summary>
		/// Specifies the return carrier and customer's account with the carrier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnShipping")]
		public ReturnShipping ReturnShipping { get; set; }
		
		/// <summary>
		/// Contains information about the Microsoft datacenter to which the drives should be shipped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingInformation")]
		public ShippingInformation ShippingInformation { get; set; }
		
		/// <summary>
		/// Current state of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The resource identifier of the storage account where data will be imported to or exported from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountId")]
		public string StorageAccountId { get; set; }
	}
	
	/// <summary>
	/// Contains the job information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobResponse
	{
		
		/// <summary>
		/// Specifies the resource identifier of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Specifies the Azure location where the job is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Specifies the name of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specifies the job properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public JobDetails Properties { get; set; }
		
		/// <summary>
		/// Specifies the tags that are assigned to the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
		
		/// <summary>
		/// Specifies the type of the job resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// List jobs response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListJobsResponse
	{
		
		/// <summary>
		/// link to next batch of jobs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Job list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public JobResponse[] Value { get; set; }
	}
	
	/// <summary>
	/// List operations response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// operations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// Describes a supported operation by the Storage Import/Export job API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// operation display properties
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Name of the operation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Provides information about an Azure data center location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Location
	{
		
		/// <summary>
		/// Specifies the resource identifier of the location. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Specifies the name of the location. Use List Locations to get all supported locations. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// location properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		/// <summary>
		/// Specifies the type of the location. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Locations response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LocationsResponse
	{
		
		/// <summary>
		/// locations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Location[] Value { get; set; }
	}
	
	/// <summary>
	/// Contains information about the package being shipped by the customer to the Microsoft data center.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PackageInfomation
	{
		
		/// <summary>
		/// The name of the carrier that is used to ship the import or export drives.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="carrierName")]
		public string CarrierName { get; set; }
		
		/// <summary>
		/// The number of drives included in the package.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="driveCount")]
		public int DriveCount { get; set; }
		
		/// <summary>
		/// The date when the package is shipped.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shipDate")]
		public string ShipDate { get; set; }
		
		/// <summary>
		/// The tracking number of the package.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trackingNumber")]
		public string TrackingNumber { get; set; }
	}
	
	/// <summary>
	/// Put Job parameters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PutJobParameters
	{
		
		/// <summary>
		/// Specifies the supported Azure location where the job should be created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Specifies the job properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public JobDetails Properties { get; set; }
		
		/// <summary>
		/// Specifies the tags that will be assigned to the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
	}
	
	/// <summary>
	/// Specifies the return address information for the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ReturnAddress
	{
		
		/// <summary>
		/// The city name to use when returning the drives.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The country or region to use when returning the drives. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="countryOrRegion")]
		public string CountryOrRegion { get; set; }
		
		/// <summary>
		/// Email address of the recipient of the returned drives.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Phone number of the recipient of the returned drives.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// The postal code to use when returning the drives.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// The name of the recipient who will receive the hard drives when they are returned. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipientName")]
		public string RecipientName { get; set; }
		
		/// <summary>
		/// The state or province to use when returning the drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateOrProvince")]
		public string StateOrProvince { get; set; }
		
		/// <summary>
		/// The first line of the street address to use when returning the drives. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="streetAddress1")]
		public string StreetAddress1 { get; set; }
		
		/// <summary>
		/// The second line of the street address to use when returning the drives. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streetAddress2")]
		public string StreetAddress2 { get; set; }
	}
	
	/// <summary>
	/// Specifies the return carrier and customer's account with the carrier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ReturnShipping
	{
		
		/// <summary>
		/// The customer's account number with the carrier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="carrierAccountNumber")]
		public string CarrierAccountNumber { get; set; }
		
		/// <summary>
		/// The carrier's name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="carrierName")]
		public string CarrierName { get; set; }
	}
	
	/// <summary>
	/// Contains information about the Microsoft datacenter to which the drives should be shipped.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ShippingInformation
	{
		
		/// <summary>
		/// The city name to use when returning the drives.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The country or region to use when returning the drives. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="countryOrRegion")]
		public string CountryOrRegion { get; set; }
		
		/// <summary>
		/// Phone number of the recipient of the returned drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// The postal code to use when returning the drives.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// The name of the recipient who will receive the hard drives when they are returned. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipientName")]
		public string RecipientName { get; set; }
		
		/// <summary>
		/// The state or province to use when returning the drives.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateOrProvince")]
		public string StateOrProvince { get; set; }
		
		/// <summary>
		/// The first line of the street address to use when returning the drives. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="streetAddress1")]
		public string StreetAddress1 { get; set; }
		
		/// <summary>
		/// The second line of the street address to use when returning the drives. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streetAddress2")]
		public string StreetAddress2 { get; set; }
	}
	
	/// <summary>
	/// Update Job parameters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateJobParameters
	{
		
		/// <summary>
		/// Specifies the properties of a UpdateJob.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		/// <summary>
		/// Specifies the tags that will be assigned to the job
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns a list of locations to which you can ship the disks associated with an import or export job. A location is a Microsoft data center region.
		/// Locations_List providers/Microsoft.ImportExport/locations
		/// </summary>
		/// <param name="api_version">Specifies the API version to use for this request.</param>
		/// <returns>OK</returns>
		public async Task<LocationsResponse> Locations_ListAsync(Locations_ListApi_version api_version)
		{
			var requestUri = "providers/Microsoft.ImportExport/locations?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the details about a location to which you can ship the disks associated with an import or export job. A location is an Azure region.
		/// Locations_Get providers/Microsoft.ImportExport/locations/{locationName}
		/// </summary>
		/// <param name="locationName">The name of the location. For example, West US or westus.</param>
		/// <param name="api_version">Specifies the API version to use for this request.</param>
		/// <returns>OK</returns>
		public async Task<Location> Locations_GetAsync(string locationName, Locations_GetApi_version api_version)
		{
			var requestUri = "providers/Microsoft.ImportExport/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"&api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Location>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the list of operations supported by the import/export resource provider.
		/// Operations_List providers/Microsoft.ImportExport/operations
		/// </summary>
		/// <param name="api_version">Specifies the API version to use for this request.</param>
		/// <returns>OK</returns>
		public async Task<ListOperationsResponse> Operations_ListAsync(Operations_ListApi_version api_version)
		{
			var requestUri = "providers/Microsoft.ImportExport/operations?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOperationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all active and completed jobs in a subscription.
		/// Jobs_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.ImportExport/jobs
		/// </summary>
		/// <param name="top">An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100.</param>
		/// <param name="filter">Can be used to restrict the results to certain conditions.</param>
		/// <param name="subscriptionId">The subscription ID for the Azure user.</param>
		/// <param name="api_version">Specifies the API version to use for this request.</param>
		/// <returns>OK</returns>
		public async Task<ListJobsResponse> Jobs_ListBySubscriptionAsync(int top, string filter, string subscriptionId, Jobs_ListBySubscriptionApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.ImportExport/jobs?$top="+top+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all active and completed jobs in a resource group.
		/// Jobs_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs
		/// </summary>
		/// <param name="top">An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100.</param>
		/// <param name="filter">Can be used to restrict the results to certain conditions.</param>
		/// <param name="subscriptionId">The subscription ID for the Azure user.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscription.</param>
		/// <param name="api_version">Specifies the API version to use for this request.</param>
		/// <returns>OK</returns>
		public async Task<ListJobsResponse> Jobs_ListByResourceGroupAsync(int top, string filter, string subscriptionId, string resourceGroupName, Jobs_ListByResourceGroupApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ImportExport/jobs?$top="+top+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about an existing job.
		/// Jobs_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}
		/// </summary>
		/// <param name="jobName">The name of the import/export job.</param>
		/// <param name="subscriptionId">The subscription ID for the Azure user.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscription.</param>
		/// <param name="api_version">Specifies the API version to use for this request.</param>
		/// <returns>OK</returns>
		public async Task<JobResponse> Jobs_GetAsync(string jobName, string subscriptionId, string resourceGroupName, Jobs_GetApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ImportExport/jobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"&api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new job or updates an existing job in the specified subscription.
		/// Jobs_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}
		/// </summary>
		/// <param name="jobName">The name of the import/export job.</param>
		/// <param name="subscriptionId">The subscription ID for the Azure user.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscription.</param>
		/// <param name="api_version">Specifies the API version to use for this request.</param>
		/// <param name="requestBody">The parameters used for creating the job</param>
		/// <returns>OK</returns>
		public async Task<JobResponse> Jobs_CreateAsync(string jobName, string subscriptionId, string resourceGroupName, Jobs_CreateApi_version api_version, PutJobParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ImportExport/jobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"&api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing job. Only jobs in the Creating or Completed states can be deleted.
		/// Jobs_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}
		/// </summary>
		/// <param name="jobName">The name of the import/export job.</param>
		/// <param name="subscriptionId">The subscription ID for the Azure user.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscription.</param>
		/// <param name="api_version">Specifies the API version to use for this request.</param>
		/// <returns>OK</returns>
		public async Task Jobs_DeleteAsync(string jobName, string subscriptionId, string resourceGroupName, Jobs_DeleteApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ImportExport/jobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"&api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates specific properties of a job. You can call this operation to notify the Import/Export service that the hard drives comprising the import or export job have been shipped to the Microsoft data center. It can also be used to cancel an existing job.
		/// Jobs_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}
		/// </summary>
		/// <param name="jobName">The name of the import/export job.</param>
		/// <param name="subscriptionId">The subscription ID for the Azure user.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscription.</param>
		/// <param name="api_version">Specifies the API version to use for this request.</param>
		/// <param name="requestBody">The parameters to update in the job</param>
		/// <returns>OK</returns>
		public async Task<JobResponse> Jobs_UpdateAsync(string jobName, string subscriptionId, string resourceGroupName, Jobs_UpdateApi_version api_version, UpdateJobParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ImportExport/jobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"&api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the BitLocker Keys for all drives in the specified job.
		/// BitLockerKeys_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}/listBitLockerKeys
		/// </summary>
		/// <param name="jobName">The name of the import/export job.</param>
		/// <param name="subscriptionId">The subscription ID for the Azure user.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscription.</param>
		/// <param name="api_version">Specifies the API version to use for this request.</param>
		/// <returns>OK</returns>
		public async Task<GetBitLockerKeysResponse> BitLockerKeys_ListAsync(string jobName, string subscriptionId, string resourceGroupName, BitLockerKeys_ListApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ImportExport/jobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"/listBitLockerKeys&api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBitLockerKeysResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Locations_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2016-11-01")]
		_2016Minus11Minus01 = 0,
	}
	
	public enum Locations_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2016-11-01")]
		_2016Minus11Minus01 = 0,
	}
	
	public enum Operations_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2016-11-01")]
		_2016Minus11Minus01 = 0,
	}
	
	public enum Jobs_ListBySubscriptionApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2016-11-01")]
		_2016Minus11Minus01 = 0,
	}
	
	public enum Jobs_ListByResourceGroupApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2016-11-01")]
		_2016Minus11Minus01 = 0,
	}
	
	public enum Jobs_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2016-11-01")]
		_2016Minus11Minus01 = 0,
	}
	
	public enum Jobs_CreateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2016-11-01")]
		_2016Minus11Minus01 = 0,
	}
	
	public enum Jobs_DeleteApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2016-11-01")]
		_2016Minus11Minus01 = 0,
	}
	
	public enum Jobs_UpdateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2016-11-01")]
		_2016Minus11Minus01 = 0,
	}
	
	public enum BitLockerKeys_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2016-11-01")]
		_2016Minus11Minus01 = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
