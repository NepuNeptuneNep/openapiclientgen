//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A database resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Database
	{
		
		/// <summary>
		/// Kind of database. This is metadata used for the Azure portal experience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Resource that manages the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedBy")]
		public string ManagedBy { get; set; }
		
		/// <summary>
		/// The database's properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DatabaseProperties Properties { get; set; }
		
		/// <summary>
		/// An ARM Resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
	}
	
	/// <summary>
	/// The database's properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseProperties
	{
		
		/// <summary>
		/// Time in minutes after which database is automatically paused. A value of -1 means that automatic pause is disabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoPauseDelay")]
		public System.Nullable<System.Int32> AutoPauseDelay { get; set; }
		
		/// <summary>
		/// Collation of the metadata catalog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalogCollation")]
		public System.Nullable<DatabasePropertiesCatalogCollation> CatalogCollation { get; set; }
		
		/// <summary>
		/// The collation of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collation")]
		public string Collation { get; set; }
		
		/// <summary>
		/// Specifies the mode of database creation.
		///
		///Default: regular database creation.
		///
		///Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.
		///
		///Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.
		///
		///PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
		///
		///Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.
		///
		///Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.
		///
		///RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
		///
		///Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createMode")]
		public System.Nullable<DatabasePropertiesCreateMode> CreateMode { get; set; }
		
		/// <summary>
		/// The creation date of the database (ISO8601 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// The current service level objective name of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentServiceObjectiveName")]
		public string CurrentServiceObjectiveName { get; set; }
		
		/// <summary>
		/// An ARM Resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentSku")]
		public Sku CurrentSku { get; set; }
		
		/// <summary>
		/// The ID of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseId")]
		public string DatabaseId { get; set; }
		
		/// <summary>
		/// The default secondary region for this database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultSecondaryLocation")]
		public string DefaultSecondaryLocation { get; set; }
		
		/// <summary>
		/// This records the earliest start date and time that restore is available for this database (ISO8601 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="earliestRestoreDate")]
		public System.Nullable<System.DateTimeOffset> EarliestRestoreDate { get; set; }
		
		/// <summary>
		/// The resource identifier of the elastic pool containing this database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elasticPoolId")]
		public string ElasticPoolId { get; set; }
		
		/// <summary>
		/// Failover Group resource identifier that this database belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failoverGroupId")]
		public string FailoverGroupId { get; set; }
		
		/// <summary>
		/// The license type to apply for this database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licenseType")]
		public System.Nullable<DatabasePropertiesLicenseType> LicenseType { get; set; }
		
		/// <summary>
		/// The resource identifier of the long term retention backup associated with create operation of this database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longTermRetentionBackupResourceId")]
		public string LongTermRetentionBackupResourceId { get; set; }
		
		/// <summary>
		/// The max log size for this database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxLogSizeBytes")]
		public System.Nullable<System.Int64> MaxLogSizeBytes { get; set; }
		
		/// <summary>
		/// The max size of the database expressed in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSizeBytes")]
		public System.Nullable<System.Int64> MaxSizeBytes { get; set; }
		
		/// <summary>
		/// Minimal capacity that database will always have allocated, if not paused
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minCapacity")]
		public System.Nullable<System.Double> MinCapacity { get; set; }
		
		/// <summary>
		/// The date when database was paused by user configuration or action(ISO8601 format). Null if the database is ready.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pausedDate")]
		public System.Nullable<System.DateTimeOffset> PausedDate { get; set; }
		
		/// <summary>
		/// The number of readonly secondary replicas associated with the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readReplicaCount")]
		public System.Nullable<System.Int32> ReadReplicaCount { get; set; }
		
		/// <summary>
		/// The state of read-only routing. If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica in the same region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readScale")]
		public System.Nullable<DatabasePropertiesReadScale> ReadScale { get; set; }
		
		/// <summary>
		/// The resource identifier of the recoverable database associated with create operation of this database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recoverableDatabaseId")]
		public string RecoverableDatabaseId { get; set; }
		
		/// <summary>
		/// The resource identifier of the recovery point associated with create operation of this database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recoveryServicesRecoveryPointId")]
		public string RecoveryServicesRecoveryPointId { get; set; }
		
		/// <summary>
		/// The requested service level objective name of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedServiceObjectiveName")]
		public string RequestedServiceObjectiveName { get; set; }
		
		/// <summary>
		/// The resource identifier of the restorable dropped database associated with create operation of this database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restorableDroppedDatabaseId")]
		public string RestorableDroppedDatabaseId { get; set; }
		
		/// <summary>
		/// Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restorePointInTime")]
		public System.Nullable<System.DateTimeOffset> RestorePointInTime { get; set; }
		
		/// <summary>
		/// The date when database was resumed by user action or database login (ISO8601 format). Null if the database is paused.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resumedDate")]
		public System.Nullable<System.DateTimeOffset> ResumedDate { get; set; }
		
		/// <summary>
		/// The name of the sample schema to apply when creating this database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleName")]
		public System.Nullable<DatabasePropertiesSampleName> SampleName { get; set; }
		
		/// <summary>
		/// Specifies the time that the database was deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceDatabaseDeletionDate")]
		public System.Nullable<System.DateTimeOffset> SourceDatabaseDeletionDate { get; set; }
		
		/// <summary>
		/// The resource identifier of the source database associated with create operation of this database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceDatabaseId")]
		public string SourceDatabaseId { get; set; }
		
		/// <summary>
		/// The status of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<DatabasePropertiesStatus> Status { get; set; }
		
		/// <summary>
		/// The storage account type used to store backups for this database. Currently the only supported option is GRS (GeoRedundantStorage).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountType")]
		public System.Nullable<DatabasePropertiesStorageAccountType> StorageAccountType { get; set; }
		
		/// <summary>
		/// Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zoneRedundant")]
		public System.Nullable<System.Boolean> ZoneRedundant { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DatabasePropertiesCatalogCollation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_Latin1_General_CP1_CI_AS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DatabasePropertiesCreateMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Copy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Secondary = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PointInTimeRestore = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Restore = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Recovery = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RestoreExternalBackup = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RestoreExternalBackupSecondary = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RestoreLongTermRetentionBackup = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnlineSecondary = 9,
	}
	
	/// <summary>
	/// An ARM Resource SKU.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sku
	{
		
		/// <summary>
		/// Capacity of the particular SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// If the service has different generations of hardware, for the same SKU, then that can be captured here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// The name of the SKU, typically, a letter + Number code, e.g. P3.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Size of the particular SKU
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// The tier or edition of the particular SKU, e.g. Basic, Premium.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DatabasePropertiesLicenseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LicenseIncluded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BasePrice = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DatabasePropertiesReadScale
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DatabasePropertiesSampleName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdventureWorksLT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WideWorldImportersStd = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WideWorldImportersFull = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DatabasePropertiesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Online = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Restoring = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RecoveryPending = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Recovering = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspect = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Offline = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standby = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Shutdown = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EmergencyMode = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AutoClosed = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Copying = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inaccessible = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OfflineSecondary = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pausing = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Paused = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Resuming = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scaling = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OfflineChangingDwPerformanceTiers = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnlineChangingDwPerformanceTiers = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DatabasePropertiesStorageAccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LRS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZRS = 2,
	}
	
	/// <summary>
	/// A list of databases.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Database[] Value { get; set; }
	}
	
	/// <summary>
	/// A database resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseUpdate
	{
		
		/// <summary>
		/// The database's properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DatabaseProperties Properties { get; set; }
		
		/// <summary>
		/// An ARM Resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// ARM resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Contains the information necessary to perform a resource move (rename).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceMoveDefinition
	{
		
		/// <summary>
		/// The target ID for the resource
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// ARM tracked top level resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrackedResource
	{
		
		/// <summary>
		/// Resource location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a list of databases.
		/// Databases_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the list of databases.</returns>
		public async Task<DatabaseListResult> Databases_ListByServerAsync(string resourceGroupName, string serverName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatabaseListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a database.
		/// Databases_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the specified database.</returns>
		public async Task<Database> Databases_GetAsync(string resourceGroupName, string serverName, string databaseName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Database>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new database or updates an existing database.
		/// Databases_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="requestBody">The requested database resource state.</param>
		/// <returns>Successfully updated the database.</returns>
		public async Task<Database> Databases_CreateOrUpdateAsync(string resourceGroupName, string serverName, string databaseName, string subscriptionId, string api_version, Database requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Database>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the database.
		/// Databases_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully deleted the database.</returns>
		public async Task Databases_DeleteAsync(string resourceGroupName, string serverName, string databaseName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates an existing database.
		/// Databases_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="requestBody">The requested database resource state.</param>
		/// <returns>Successfully updated the database.</returns>
		public async Task<Database> Databases_UpdateAsync(string resourceGroupName, string serverName, string databaseName, string subscriptionId, string api_version, DatabaseUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Database>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Failovers a database.
		/// Databases_Failover subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/failover
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database to failover.</param>
		/// <param name="replicaType">The type of replica to be failed over.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully completed database failover.</returns>
		public async Task Databases_FailoverAsync(string resourceGroupName, string serverName, string databaseName, Databases_FailoverReplicaType replicaType, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/failover&replicaType=" + replicaType+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Renames a database.
		/// Databases_Rename subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/move
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database to rename.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="requestBody">The resource move definition for renaming this database.</param>
		/// <returns>Successfully renamed the database.</returns>
		public async Task Databases_RenameAsync(string resourceGroupName, string serverName, string databaseName, string subscriptionId, string api_version, ResourceMoveDefinition requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/move&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Pauses a database.
		/// Databases_Pause subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/pause
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database to be paused.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully paused the database.</returns>
		public async Task<Database> Databases_PauseAsync(string resourceGroupName, string serverName, string databaseName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/pause&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Database>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Resumes a database.
		/// Databases_Resume subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/resume
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database to be resumed.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully resumed the database.</returns>
		public async Task<Database> Databases_ResumeAsync(string resourceGroupName, string serverName, string databaseName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/resume&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Database>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Upgrades a data warehouse.
		/// Databases_UpgradeDataWarehouse subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/upgradeDataWarehouse
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database to be upgraded.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully upgraded the data warehouse.</returns>
		public async Task Databases_UpgradeDataWarehouseAsync(string resourceGroupName, string serverName, string databaseName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/upgradeDataWarehouse&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of databases in an elastic pool.
		/// Databases_ListByElasticPool subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/databases
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="elasticPoolName">The name of the elastic pool.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved a list of databases in an elastic pool.</returns>
		public async Task<DatabaseListResult> Databases_ListByElasticPoolAsync(string resourceGroupName, string serverName, string elasticPoolName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/elasticPools/"+ (elasticPoolName==null? "" : System.Uri.EscapeDataString(elasticPoolName))+"/databases&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatabaseListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of inaccessible databases in a logical server
		/// Databases_ListInaccessibleByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/inaccessibleDatabases
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the list of inaccessible databases in a logical server</returns>
		public async Task<DatabaseListResult> Databases_ListInaccessibleByServerAsync(string resourceGroupName, string serverName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/inaccessibleDatabases&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatabaseListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum Databases_FailoverReplicaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Primary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadableSecondary = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
