//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An ADLS Gen 1 file data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ADLSGen1FileDataSet
	{
		
		/// <summary>
		/// Properties of the ADLS Gen1 file data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ADLSGen1FileProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the ADLS Gen1 file data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ADLSGen1FileProperties
	{
		
		/// <summary>
		/// The ADLS account name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Unique id for identifying a data set resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// The file name in the ADLS account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		/// <summary>
		/// The folder path within the ADLS account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="folderPath")]
		public string FolderPath { get; set; }
		
		/// <summary>
		/// Resource group of ADLS account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// Subscription id of ADLS account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// An ADLS Gen 1 folder data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ADLSGen1FolderDataSet
	{
		
		/// <summary>
		/// Properties of the ADLS Gen1 folder data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ADLSGen1FolderProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the ADLS Gen1 folder data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ADLSGen1FolderProperties
	{
		
		/// <summary>
		/// The ADLS account name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Unique id for identifying a data set resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// The folder path within the ADLS account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="folderPath")]
		public string FolderPath { get; set; }
		
		/// <summary>
		/// Resource group of ADLS account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// Subscription id of ADLS account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// An ADLS Gen 2 file data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ADLSGen2FileDataSet
	{
		
		/// <summary>
		/// Properties of the ADLS Gen2 file data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ADLSGen2FileProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the ADLS Gen2 file data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ADLSGen2FileProperties
	{
		
		/// <summary>
		/// Unique id for identifying a data set resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// File path within the file system.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		/// <summary>
		/// File system to which the file belongs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileSystem")]
		public string FileSystem { get; set; }
		
		/// <summary>
		/// Resource group of storage account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// Storage account name of the source data set
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageAccountName")]
		public string StorageAccountName { get; set; }
		
		/// <summary>
		/// Subscription id of storage account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// An ADLS Gen2 file data set mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ADLSGen2FileDataSetMapping
	{
		
		/// <summary>
		/// ADLS Gen 2 file data set mapping property bag.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ADLSGen2FileDataSetMappingProperties Properties { get; set; }
	}
	
	/// <summary>
	/// ADLS Gen 2 file data set mapping property bag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ADLSGen2FileDataSetMappingProperties
	{
		
		/// <summary>
		/// The id of the source data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Gets the status of the data set mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetMappingStatus")]
		public System.Nullable<ADLSGen2FileDataSetMappingPropertiesDataSetMappingStatus> DataSetMappingStatus { get; set; }
		
		/// <summary>
		/// File path within the file system.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		/// <summary>
		/// File system to which the file belongs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileSystem")]
		public string FileSystem { get; set; }
		
		/// <summary>
		/// Type of output file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputType")]
		public System.Nullable<ADLSGen2FileDataSetMappingPropertiesOutputType> OutputType { get; set; }
		
		/// <summary>
		/// Provisioning state of the data set mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<ADLSGen2FileDataSetMappingPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// Resource group of storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// Storage account name of the source data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageAccountName")]
		public string StorageAccountName { get; set; }
		
		/// <summary>
		/// Subscription id of storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ADLSGen2FileDataSetMappingPropertiesDataSetMappingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ok = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Broken = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ADLSGen2FileDataSetMappingPropertiesOutputType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Csv = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Parquet = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ADLSGen2FileDataSetMappingPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Moving = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
	}
	
	/// <summary>
	/// An ADLS Gen 2 file system data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ADLSGen2FileSystemDataSet
	{
		
		/// <summary>
		/// Properties of the ADLS Gen2 file system data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ADLSGen2FileSystemProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the ADLS Gen2 file system data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ADLSGen2FileSystemProperties
	{
		
		/// <summary>
		/// Unique id for identifying a data set resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// The file system name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileSystem")]
		public string FileSystem { get; set; }
		
		/// <summary>
		/// Resource group of storage account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// Storage account name of the source data set
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageAccountName")]
		public string StorageAccountName { get; set; }
		
		/// <summary>
		/// Subscription id of storage account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// An ADLS Gen2 file system data set mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ADLSGen2FileSystemDataSetMapping
	{
		
		/// <summary>
		/// ADLS Gen 2 file system data set mapping property bag.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ADLSGen2FileSystemDataSetMappingProperties Properties { get; set; }
	}
	
	/// <summary>
	/// ADLS Gen 2 file system data set mapping property bag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ADLSGen2FileSystemDataSetMappingProperties
	{
		
		/// <summary>
		/// The id of the source data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Gets the status of the data set mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetMappingStatus")]
		public ADLSGen2FileDataSetMappingPropertiesDataSetMappingStatus DataSetMappingStatus { get; set; }
		
		/// <summary>
		/// The file system name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileSystem")]
		public string FileSystem { get; set; }
		
		/// <summary>
		/// Provisioning state of the data set mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ADLSGen2FileDataSetMappingPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Resource group of storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// Storage account name of the source data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageAccountName")]
		public string StorageAccountName { get; set; }
		
		/// <summary>
		/// Subscription id of storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// An ADLS Gen 2 folder data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ADLSGen2FolderDataSet
	{
		
		/// <summary>
		/// Properties of the ADLS Gen2 folder data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ADLSGen2FolderProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the ADLS Gen2 folder data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ADLSGen2FolderProperties
	{
		
		/// <summary>
		/// Unique id for identifying a data set resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// File system to which the folder belongs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileSystem")]
		public string FileSystem { get; set; }
		
		/// <summary>
		/// Folder path within the file system.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="folderPath")]
		public string FolderPath { get; set; }
		
		/// <summary>
		/// Resource group of storage account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// Storage account name of the source data set
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageAccountName")]
		public string StorageAccountName { get; set; }
		
		/// <summary>
		/// Subscription id of storage account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// An ADLS Gen2 folder data set mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ADLSGen2FolderDataSetMapping
	{
		
		/// <summary>
		/// ADLS Gen 2 folder data set mapping property bag.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ADLSGen2FolderDataSetMappingProperties Properties { get; set; }
	}
	
	/// <summary>
	/// ADLS Gen 2 folder data set mapping property bag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ADLSGen2FolderDataSetMappingProperties
	{
		
		/// <summary>
		/// The id of the source data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Gets the status of the data set mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetMappingStatus")]
		public ADLSGen2FileDataSetMappingPropertiesDataSetMappingStatus DataSetMappingStatus { get; set; }
		
		/// <summary>
		/// File system to which the folder belongs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileSystem")]
		public string FileSystem { get; set; }
		
		/// <summary>
		/// Folder path within the file system.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="folderPath")]
		public string FolderPath { get; set; }
		
		/// <summary>
		/// Provisioning state of the data set mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ADLSGen2FileDataSetMappingPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Resource group of storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// Storage account name of the source data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageAccountName")]
		public string StorageAccountName { get; set; }
		
		/// <summary>
		/// Subscription id of storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// An account data transfer object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Account
	{
		
		/// <summary>
		/// Identity of resource
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public Identity Identity { get; set; }
		
		/// <summary>
		/// Account property bag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AccountProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Identity of resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Identity
	{
		
		/// <summary>
		/// service principal Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// Tenant Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Identity Type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<IdentityType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemAssigned = 0,
	}
	
	/// <summary>
	/// Account property bag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AccountProperties
	{
		
		/// <summary>
		/// Time at which the account was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Provisioning state of the Account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ADLSGen2FileDataSetMappingPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Email of the user who created the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userEmail")]
		public string UserEmail { get; set; }
		
		/// <summary>
		/// Name of the user who created the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	/// <summary>
	/// List response for get Accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AccountList
	{
		
		/// <summary>
		/// The Url of next result page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of items of type DataTransferObjects.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Account[] Value { get; set; }
	}
	
	/// <summary>
	/// Update parameters for accounts
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AccountUpdateParameters
	{
		
		/// <summary>
		/// Tags on the azure resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// An Azure storage blob container data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobContainerDataSet
	{
		
		/// <summary>
		/// Properties of the BLOB container data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public BlobContainerProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the BLOB container data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobContainerProperties
	{
		
		/// <summary>
		/// BLOB Container name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerName")]
		public string ContainerName { get; set; }
		
		/// <summary>
		/// Unique id for identifying a data set resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Resource group of storage account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// Storage account name of the source data set
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageAccountName")]
		public string StorageAccountName { get; set; }
		
		/// <summary>
		/// Subscription id of storage account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// A Blob container data set mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobContainerDataSetMapping
	{
		
		/// <summary>
		/// Azure storage Blob container data set mapping property bag.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public BlobContainerMappingProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Azure storage Blob container data set mapping property bag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobContainerMappingProperties
	{
		
		/// <summary>
		/// BLOB Container name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerName")]
		public string ContainerName { get; set; }
		
		/// <summary>
		/// The id of the source data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Gets the status of the data set mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetMappingStatus")]
		public ADLSGen2FileDataSetMappingPropertiesDataSetMappingStatus DataSetMappingStatus { get; set; }
		
		/// <summary>
		/// Provisioning state of the data set mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ADLSGen2FileDataSetMappingPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Resource group of storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// Storage account name of the source data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageAccountName")]
		public string StorageAccountName { get; set; }
		
		/// <summary>
		/// Subscription id of storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// An Azure storage blob data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobDataSet
	{
		
		/// <summary>
		/// Properties of the blob data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public BlobProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the blob data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobProperties
	{
		
		/// <summary>
		/// Container that has the file path.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerName")]
		public string ContainerName { get; set; }
		
		/// <summary>
		/// Unique id for identifying a data set resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// File path within the source data set
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		/// <summary>
		/// Resource group of storage account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// Storage account name of the source data set
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageAccountName")]
		public string StorageAccountName { get; set; }
		
		/// <summary>
		/// Subscription id of storage account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// A Blob data set mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobDataSetMapping
	{
		
		/// <summary>
		/// Azure storage Blob data set mapping property bag.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public BlobMappingProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Azure storage Blob data set mapping property bag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobMappingProperties
	{
		
		/// <summary>
		/// Container that has the file path.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerName")]
		public string ContainerName { get; set; }
		
		/// <summary>
		/// The id of the source data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Gets the status of the data set mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetMappingStatus")]
		public ADLSGen2FileDataSetMappingPropertiesDataSetMappingStatus DataSetMappingStatus { get; set; }
		
		/// <summary>
		/// File path within the source data set
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		/// <summary>
		/// File output type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputType")]
		public ADLSGen2FileDataSetMappingPropertiesOutputType OutputType { get; set; }
		
		/// <summary>
		/// Provisioning state of the data set mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ADLSGen2FileDataSetMappingPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Resource group of storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// Storage account name of the source data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageAccountName")]
		public string StorageAccountName { get; set; }
		
		/// <summary>
		/// Subscription id of storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// An Azure storage blob folder data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobFolderDataSet
	{
		
		/// <summary>
		/// Properties of the blob folder data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public BlobFolderProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the blob folder data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobFolderProperties
	{
		
		/// <summary>
		/// Container that has the file path.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerName")]
		public string ContainerName { get; set; }
		
		/// <summary>
		/// Unique id for identifying a data set resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Prefix for blob folder
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Resource group of storage account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// Storage account name of the source data set
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageAccountName")]
		public string StorageAccountName { get; set; }
		
		/// <summary>
		/// Subscription id of storage account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// A Blob folder data set mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobFolderDataSetMapping
	{
		
		/// <summary>
		/// Azure storage Blob folder data set mapping property bag.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public BlobFolderMappingProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Azure storage Blob folder data set mapping property bag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobFolderMappingProperties
	{
		
		/// <summary>
		/// Container that has the file path.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerName")]
		public string ContainerName { get; set; }
		
		/// <summary>
		/// The id of the source data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Gets the status of the data set mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetMappingStatus")]
		public ADLSGen2FileDataSetMappingPropertiesDataSetMappingStatus DataSetMappingStatus { get; set; }
		
		/// <summary>
		/// Prefix for blob folder
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Provisioning state of the data set mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ADLSGen2FileDataSetMappingPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Resource group of storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// Storage account name of the source data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageAccountName")]
		public string StorageAccountName { get; set; }
		
		/// <summary>
		/// Subscription id of storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// A consumer Invitation data transfer object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConsumerInvitation
	{
		
		/// <summary>
		/// Properties of consumer invitation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ConsumerInvitationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of consumer invitation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConsumerInvitationProperties
	{
		
		/// <summary>
		/// Number of data sets in a share
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetCount")]
		public System.Nullable<System.Int32> DataSetCount { get; set; }
		
		/// <summary>
		/// Description shared when the invitation was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Unique id of the invitation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invitationId")]
		public string InvitationId { get; set; }
		
		/// <summary>
		/// The status of the invitation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invitationStatus")]
		public System.Nullable<ConsumerInvitationPropertiesInvitationStatus> InvitationStatus { get; set; }
		
		/// <summary>
		/// invitation location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Email of the provider who created the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerEmail")]
		public string ProviderEmail { get; set; }
		
		/// <summary>
		/// Name of the provider who created the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerName")]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// Tenant name of the provider who created the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerTenantName")]
		public string ProviderTenantName { get; set; }
		
		/// <summary>
		/// The time the recipient responded to the invitation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="respondedAt")]
		public System.Nullable<System.DateTimeOffset> RespondedAt { get; set; }
		
		/// <summary>
		/// Gets the time at which the invitation was sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentAt")]
		public System.Nullable<System.DateTimeOffset> SentAt { get; set; }
		
		/// <summary>
		/// Gets the source share Name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareName")]
		public string ShareName { get; set; }
		
		/// <summary>
		/// Terms of use shared when the invitation was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="termsOfUse")]
		public string TermsOfUse { get; set; }
		
		/// <summary>
		/// Email of the user who created the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userEmail")]
		public string UserEmail { get; set; }
		
		/// <summary>
		/// Name of the user who created the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ConsumerInvitationPropertiesInvitationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accepted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rejected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Withdrawn = 3,
	}
	
	/// <summary>
	/// List response for get InvitationList
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConsumerInvitationList
	{
		
		/// <summary>
		/// The Url of next result page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of items of type DataTransferObjects.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ConsumerInvitation[] Value { get; set; }
	}
	
	/// <summary>
	/// A consumer side dataSet data transfer object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConsumerSourceDataSet
	{
		
		/// <summary>
		/// Properties of consumer source dataSet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ConsumerSourceDataSetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of consumer source dataSet
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConsumerSourceDataSetProperties
	{
		
		/// <summary>
		/// DataSet Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Location of the data set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetLocation")]
		public string DataSetLocation { get; set; }
		
		/// <summary>
		/// DataSet name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetName")]
		public string DataSetName { get; set; }
		
		/// <summary>
		/// DataSet path
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetPath")]
		public string DataSetPath { get; set; }
		
		/// <summary>
		/// Type of data set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetType")]
		public System.Nullable<ConsumerSourceDataSetPropertiesDataSetType> DataSetType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ConsumerSourceDataSetPropertiesDataSetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Blob = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Container = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BlobFolder = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdlsGen2FileSystem = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdlsGen2Folder = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdlsGen2File = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdlsGen1Folder = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdlsGen1File = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KustoCluster = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KustoDatabase = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SqlDBTable = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SqlDWTable = 11,
	}
	
	/// <summary>
	/// A consumer side list of source dataSets
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConsumerSourceDataSetList
	{
		
		/// <summary>
		/// The Url of next result page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of items of type DataTransferObjects.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ConsumerSourceDataSet[] Value { get; set; }
	}
	
	/// <summary>
	/// A DataSet data transfer object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataSet
	{
		
		/// <summary>
		/// Kind of data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public ConsumerSourceDataSetPropertiesDataSetType Kind { get; set; }
	}
	
	/// <summary>
	/// List response for get DataSets
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataSetList
	{
		
		/// <summary>
		/// The Url of next result page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of items of type DataTransferObjects.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DataSet[] Value { get; set; }
	}
	
	/// <summary>
	/// A data set mapping data transfer object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataSetMapping
	{
		
		/// <summary>
		/// Kind of data set mapping.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public DataSetMappingKind Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataSetMappingKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Blob = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Container = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BlobFolder = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdlsGen2FileSystem = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdlsGen2Folder = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdlsGen2File = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KustoCluster = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KustoDatabase = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SqlDBTable = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SqlDWTable = 9,
	}
	
	/// <summary>
	/// List response for get DataSetMappings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataSetMappingList
	{
		
		/// <summary>
		/// The Url of next result page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of items of type DataTransferObjects.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DataSetMapping[] Value { get; set; }
	}
	
	/// <summary>
	/// The data share error model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataShareError
	{
		
		/// <summary>
		/// The data share error body model.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="error")]
		public DataShareErrorInfo Error { get; set; }
	}
	
	/// <summary>
	/// The data share error body model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataShareErrorInfo
	{
		
		/// <summary>
		/// Code of the error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Nested details of the error model
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public DataShareErrorInfo[] Details { get; set; }
		
		/// <summary>
		/// Message of the error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Target of the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Base data transfer object implementation for default resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DefaultDto
	{
		
		/// <summary>
		/// The resource id of the azure resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Location of the azure resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Name of the azure resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Tags on the azure resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Type of the azure resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// properties for dimension
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DimensionProperties
	{
		
		/// <summary>
		/// localized display name of the dimension to customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// dimension name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A Invitation data transfer object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Invitation
	{
		
		/// <summary>
		/// Invitation property bag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public InvitationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Invitation property bag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InvitationProperties
	{
		
		/// <summary>
		/// unique invitation id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invitationId")]
		public string InvitationId { get; set; }
		
		/// <summary>
		/// The status of the invitation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invitationStatus")]
		public ConsumerInvitationPropertiesInvitationStatus InvitationStatus { get; set; }
		
		/// <summary>
		/// The time the recipient responded to the invitation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="respondedAt")]
		public System.Nullable<System.DateTimeOffset> RespondedAt { get; set; }
		
		/// <summary>
		/// Gets the time at which the invitation was sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentAt")]
		public System.Nullable<System.DateTimeOffset> SentAt { get; set; }
		
		/// <summary>
		/// The target Azure AD Id. Can't be combined with email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetActiveDirectoryId")]
		public string TargetActiveDirectoryId { get; set; }
		
		/// <summary>
		/// The email the invitation is directed to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetEmail")]
		public string TargetEmail { get; set; }
		
		/// <summary>
		/// The target user or application Id that invitation is being sent to.
		///Must be specified along TargetActiveDirectoryId. This enables sending
		///invitations to specific users or applications in an AD tenant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetObjectId")]
		public string TargetObjectId { get; set; }
		
		/// <summary>
		/// Email of the user who created the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userEmail")]
		public string UserEmail { get; set; }
		
		/// <summary>
		/// Name of the user who created the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	/// <summary>
	/// List response for get InvitationList
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InvitationList
	{
		
		/// <summary>
		/// The Url of next result page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of items of type DataTransferObjects.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Invitation[] Value { get; set; }
	}
	
	/// <summary>
	/// A kusto cluster data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KustoClusterDataSet
	{
		
		/// <summary>
		/// Properties of the kusto cluster data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public KustoClusterDataSetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the kusto cluster data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KustoClusterDataSetProperties
	{
		
		/// <summary>
		/// Unique id for identifying a data set resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Resource id of the kusto cluster.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kustoClusterResourceId")]
		public string KustoClusterResourceId { get; set; }
		
		/// <summary>
		/// Location of the kusto cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Provisioning state of the kusto cluster data set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ADLSGen2FileDataSetMappingPropertiesProvisioningState ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// A Kusto cluster data set mapping
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KustoClusterDataSetMapping
	{
		
		/// <summary>
		/// Properties of the Kusto cluster data set mapping
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public KustoClusterDataSetMappingProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the Kusto cluster data set mapping
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KustoClusterDataSetMappingProperties
	{
		
		/// <summary>
		/// The id of the source data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Gets the status of the data set mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetMappingStatus")]
		public ADLSGen2FileDataSetMappingPropertiesDataSetMappingStatus DataSetMappingStatus { get; set; }
		
		/// <summary>
		/// Resource id of the sink kusto cluster.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kustoClusterResourceId")]
		public string KustoClusterResourceId { get; set; }
		
		/// <summary>
		/// Location of the sink kusto cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Provisioning state of the data set mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ADLSGen2FileDataSetMappingPropertiesProvisioningState ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// A kusto database data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KustoDatabaseDataSet
	{
		
		/// <summary>
		/// Properties of the kusto database data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public KustoDatabaseDataSetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the kusto database data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KustoDatabaseDataSetProperties
	{
		
		/// <summary>
		/// Unique id for identifying a data set resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Resource id of the kusto database.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kustoDatabaseResourceId")]
		public string KustoDatabaseResourceId { get; set; }
		
		/// <summary>
		/// Location of the kusto cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Provisioning state of the kusto database data set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ADLSGen2FileDataSetMappingPropertiesProvisioningState ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// A Kusto database data set mapping
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KustoDatabaseDataSetMapping
	{
		
		/// <summary>
		/// Properties of the Kusto database data set mapping
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public KustoDatabaseDataSetMappingProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the Kusto database data set mapping
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KustoDatabaseDataSetMappingProperties
	{
		
		/// <summary>
		/// The id of the source data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Gets the status of the data set mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetMappingStatus")]
		public ADLSGen2FileDataSetMappingPropertiesDataSetMappingStatus DataSetMappingStatus { get; set; }
		
		/// <summary>
		/// Resource id of the sink kusto cluster.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kustoClusterResourceId")]
		public string KustoClusterResourceId { get; set; }
		
		/// <summary>
		/// Location of the sink kusto cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Provisioning state of the data set mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ADLSGen2FileDataSetMappingPropertiesProvisioningState ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// List response for get operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationList
	{
		
		/// <summary>
		/// The Url of next result page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of items of type DataTransferObjects.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public OperationModel[] Value { get; set; }
	}
	
	/// <summary>
	/// The response model for get operations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationModel
	{
		
		/// <summary>
		/// Properties on operations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationModelProperties Display { get; set; }
		
		/// <summary>
		/// Operation name for display purposes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// origin of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// properties on meta info
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public OperationMetaPropertyInfo Properties { get; set; }
	}
	
	/// <summary>
	/// Properties on operations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationModelProperties
	{
		
		/// <summary>
		/// Description of the operation for display purposes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Name of the operation for display purposes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Name of the provider for display purposes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Name of the resource type for display purposes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// properties on meta info
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationMetaPropertyInfo
	{
		
		/// <summary>
		/// The operation meta service specification
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceSpecification")]
		public OperationMetaServiceSpecification ServiceSpecification { get; set; }
	}
	
	/// <summary>
	/// The operation meta service specification
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationMetaServiceSpecification
	{
		
		/// <summary>
		/// log specifications for the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logSpecifications")]
		public OperationMetaLogSpecification[] LogSpecifications { get; set; }
		
		/// <summary>
		/// metric specifications for the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricSpecifications")]
		public OperationMetaMetricSpecification[] MetricSpecifications { get; set; }
	}
	
	/// <summary>
	/// log specifications for operation api
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationMetaLogSpecification
	{
		
		/// <summary>
		/// blob duration of the log
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobDuration")]
		public string BlobDuration { get; set; }
		
		/// <summary>
		/// localized name of the log category
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// name of the log category
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// metric specifications for the operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationMetaMetricSpecification
	{
		
		/// <summary>
		/// aggregation type of metric
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationType")]
		public string AggregationType { get; set; }
		
		/// <summary>
		/// properties for dimension
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public DimensionProperties[] Dimensions { get; set; }
		
		/// <summary>
		/// description of the metric
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayDescription")]
		public string DisplayDescription { get; set; }
		
		/// <summary>
		/// localized name of the metric
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// enable regional mdm account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableRegionalMdmAccount")]
		public string EnableRegionalMdmAccount { get; set; }
		
		/// <summary>
		/// internal metric name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalMetricName")]
		public string InternalMetricName { get; set; }
		
		/// <summary>
		/// name of the metric
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// dimension name use to replace resource id if specified
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceIdDimensionNameOverride")]
		public string ResourceIdDimensionNameOverride { get; set; }
		
		/// <summary>
		/// supported aggregation types
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedAggregationTypes")]
		public string[] SupportedAggregationTypes { get; set; }
		
		/// <summary>
		/// supported time grain types
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedTimeGrainTypes")]
		public string[] SupportedTimeGrainTypes { get; set; }
		
		/// <summary>
		/// units for the metric
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	/// <summary>
	/// Response for long running operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationResponse
	{
		
		/// <summary>
		/// start time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The data share error body model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public DataShareErrorInfo Error { get; set; }
		
		/// <summary>
		/// start time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Operation state of the long running operation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public OperationResponseStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OperationResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accepted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TransientFailure = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 5,
	}
	
	/// <summary>
	/// A provider side share subscription data transfer object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProviderShareSubscription
	{
		
		/// <summary>
		/// Provider share subscription properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ProviderShareSubscriptionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Provider share subscription properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProviderShareSubscriptionProperties
	{
		
		/// <summary>
		/// Email of the consumer who created the share subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerEmail")]
		public string ConsumerEmail { get; set; }
		
		/// <summary>
		/// Name of the consumer who created the share subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerName")]
		public string ConsumerName { get; set; }
		
		/// <summary>
		/// Tenant name of the consumer who created the share subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerTenantName")]
		public string ConsumerTenantName { get; set; }
		
		/// <summary>
		/// created at
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Email of the provider who created the share
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerEmail")]
		public string ProviderEmail { get; set; }
		
		/// <summary>
		/// Name of the provider who created the share
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerName")]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// share Subscription Object Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareSubscriptionObjectId")]
		public string ShareSubscriptionObjectId { get; set; }
		
		/// <summary>
		/// Gets the status of share subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareSubscriptionStatus")]
		public System.Nullable<ProviderShareSubscriptionPropertiesShareSubscriptionStatus> ShareSubscriptionStatus { get; set; }
		
		/// <summary>
		/// Shared at
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedAt")]
		public System.Nullable<System.DateTimeOffset> SharedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ProviderShareSubscriptionPropertiesShareSubscriptionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Revoked = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SourceDeleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Revoking = 3,
	}
	
	/// <summary>
	/// List response for get ShareSubscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProviderShareSubscriptionList
	{
		
		/// <summary>
		/// The Url of next result page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of items of type DataTransferObjects.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ProviderShareSubscription[] Value { get; set; }
	}
	
	/// <summary>
	/// Base data transfer object implementation for proxy resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProxyDto
	{
		
		/// <summary>
		/// The resource id of the azure resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the azure resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of the azure resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A Scheduled source synchronization setting data transfer object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScheduledSourceShareSynchronizationSettingProperties
	{
		
		/// <summary>
		/// Recurrence Interval
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurrenceInterval")]
		public System.Nullable<ScheduledSourceShareSynchronizationSettingPropertiesRecurrenceInterval> RecurrenceInterval { get; set; }
		
		/// <summary>
		/// Synchronization time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="synchronizationTime")]
		public System.Nullable<System.DateTimeOffset> SynchronizationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ScheduledSourceShareSynchronizationSettingPropertiesRecurrenceInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hour = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 1,
	}
	
	/// <summary>
	/// A type of synchronization setting based on schedule
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScheduledSourceSynchronizationSetting
	{
		
		/// <summary>
		/// A Scheduled source synchronization setting data transfer object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ScheduledSourceShareSynchronizationSettingProperties Properties { get; set; }
	}
	
	/// <summary>
	/// A type of synchronization setting based on schedule
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScheduledSynchronizationSetting
	{
		
		/// <summary>
		/// A Scheduled synchronization setting data transfer object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ScheduledSynchronizationSettingProperties Properties { get; set; }
	}
	
	/// <summary>
	/// A Scheduled synchronization setting data transfer object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScheduledSynchronizationSettingProperties
	{
		
		/// <summary>
		/// Time at which the synchronization setting was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Gets or sets the provisioning state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ADLSGen2FileDataSetMappingPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Recurrence Interval
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recurrenceInterval")]
		public ScheduledSourceShareSynchronizationSettingPropertiesRecurrenceInterval RecurrenceInterval { get; set; }
		
		/// <summary>
		/// Synchronization time
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="synchronizationTime")]
		public System.DateTimeOffset SynchronizationTime { get; set; }
		
		/// <summary>
		/// Name of the user who created the synchronization setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	/// <summary>
	/// A type of trigger based on schedule
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScheduledTrigger
	{
		
		/// <summary>
		/// A Scheduled trigger data transfer object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ScheduledTriggerProperties Properties { get; set; }
	}
	
	/// <summary>
	/// A Scheduled trigger data transfer object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScheduledTriggerProperties
	{
		
		/// <summary>
		/// Time at which the trigger was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Gets the provisioning state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ADLSGen2FileDataSetMappingPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Recurrence Interval
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recurrenceInterval")]
		public ScheduledSourceShareSynchronizationSettingPropertiesRecurrenceInterval RecurrenceInterval { get; set; }
		
		/// <summary>
		/// Synchronization mode
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="synchronizationMode")]
		public System.Nullable<ScheduledTriggerPropertiesSynchronizationMode> SynchronizationMode { get; set; }
		
		/// <summary>
		/// Synchronization time
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="synchronizationTime")]
		public System.DateTimeOffset SynchronizationTime { get; set; }
		
		/// <summary>
		/// Gets the trigger state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerStatus")]
		public System.Nullable<ScheduledTriggerPropertiesTriggerStatus> TriggerStatus { get; set; }
		
		/// <summary>
		/// Name of the user who created the trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ScheduledTriggerPropertiesSynchronizationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Incremental = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FullSync = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ScheduledTriggerPropertiesTriggerStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SourceSynchronizationSettingDeleted = 2,
	}
	
	/// <summary>
	/// A share data transfer object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Share
	{
		
		/// <summary>
		/// Share property bag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ShareProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Share property bag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ShareProperties
	{
		
		/// <summary>
		/// Time at which the share was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Share description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Gets or sets the provisioning state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ADLSGen2FileDataSetMappingPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Share kind.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareKind")]
		public System.Nullable<SharePropertiesShareKind> ShareKind { get; set; }
		
		/// <summary>
		/// Share terms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="terms")]
		public string Terms { get; set; }
		
		/// <summary>
		/// Email of the user who created the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userEmail")]
		public string UserEmail { get; set; }
		
		/// <summary>
		/// Name of the user who created the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SharePropertiesShareKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CopyBased = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InPlace = 1,
	}
	
	/// <summary>
	/// List response for get Shares.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ShareList
	{
		
		/// <summary>
		/// The Url of next result page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of items of type DataTransferObjects.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Share[] Value { get; set; }
	}
	
	/// <summary>
	/// A share subscription data transfer object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ShareSubscription
	{
		
		/// <summary>
		/// Share subscription property bag.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ShareSubscriptionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Share subscription property bag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ShareSubscriptionProperties
	{
		
		/// <summary>
		/// Time at which the share subscription was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// The invitation id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invitationId")]
		public string InvitationId { get; set; }
		
		/// <summary>
		/// Email of the provider who created the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerEmail")]
		public string ProviderEmail { get; set; }
		
		/// <summary>
		/// Name of the provider who created the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerName")]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// Tenant name of the provider who created the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerTenantName")]
		public string ProviderTenantName { get; set; }
		
		/// <summary>
		/// Provisioning state of the share subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ADLSGen2FileDataSetMappingPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Description of share
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareDescription")]
		public string ShareDescription { get; set; }
		
		/// <summary>
		/// Kind of share
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareKind")]
		public SharePropertiesShareKind ShareKind { get; set; }
		
		/// <summary>
		/// Name of the share
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareName")]
		public string ShareName { get; set; }
		
		/// <summary>
		/// Gets the current status of share subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareSubscriptionStatus")]
		public ProviderShareSubscriptionPropertiesShareSubscriptionStatus ShareSubscriptionStatus { get; set; }
		
		/// <summary>
		/// Terms of a share
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareTerms")]
		public string ShareTerms { get; set; }
		
		/// <summary>
		/// Source share location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceShareLocation")]
		public string SourceShareLocation { get; set; }
		
		/// <summary>
		/// Email of the user who created the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userEmail")]
		public string UserEmail { get; set; }
		
		/// <summary>
		/// Name of the user who created the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	/// <summary>
	/// List response for get ShareSubscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ShareSubscriptionList
	{
		
		/// <summary>
		/// The Url of next result page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of items of type DataTransferObjects.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ShareSubscription[] Value { get; set; }
	}
	
	/// <summary>
	/// A ShareSubscriptionSynchronization data transfer object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ShareSubscriptionSynchronization
	{
		
		/// <summary>
		/// Synchronization duration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="durationMs")]
		public System.Nullable<System.Int32> DurationMs { get; set; }
		
		/// <summary>
		/// End time of synchronization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// message of Synchronization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// start time of synchronization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Raw Status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Synchronization id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="synchronizationId")]
		public string SynchronizationId { get; set; }
		
		/// <summary>
		/// Synchronization Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="synchronizationMode")]
		public ScheduledTriggerPropertiesSynchronizationMode SynchronizationMode { get; set; }
	}
	
	/// <summary>
	/// A consumer side list of share subscription synchronizations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ShareSubscriptionSynchronizationList
	{
		
		/// <summary>
		/// The Url of next result page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of items of type DataTransferObjects.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ShareSubscriptionSynchronization[] Value { get; set; }
	}
	
	/// <summary>
	/// A ShareSynchronization data transfer object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ShareSynchronization
	{
		
		/// <summary>
		/// Email of the user who created the synchronization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerEmail")]
		public string ConsumerEmail { get; set; }
		
		/// <summary>
		/// Name of the user who created the synchronization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerName")]
		public string ConsumerName { get; set; }
		
		/// <summary>
		/// Tenant name of the consumer who created the synchronization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerTenantName")]
		public string ConsumerTenantName { get; set; }
		
		/// <summary>
		/// synchronization duration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="durationMs")]
		public System.Nullable<System.Int32> DurationMs { get; set; }
		
		/// <summary>
		/// End time of synchronization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// message of synchronization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// start time of synchronization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Raw Status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Synchronization id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="synchronizationId")]
		public string SynchronizationId { get; set; }
		
		/// <summary>
		/// Synchronization mode
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="synchronizationMode")]
		public ScheduledTriggerPropertiesSynchronizationMode SynchronizationMode { get; set; }
	}
	
	/// <summary>
	/// List response for get ShareSynchronization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ShareSynchronizationList
	{
		
		/// <summary>
		/// The Url of next result page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of items of type DataTransferObjects.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ShareSynchronization[] Value { get; set; }
	}
	
	/// <summary>
	/// A view of synchronization setting added by the provider
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceShareSynchronizationSetting
	{
		
		/// <summary>
		/// Kind of synchronization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public SourceShareSynchronizationSettingKind Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SourceShareSynchronizationSettingKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduleBased = 0,
	}
	
	/// <summary>
	/// List response for get source share Synchronization settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceShareSynchronizationSettingList
	{
		
		/// <summary>
		/// The Url of next result page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of items of type DataTransferObjects.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SourceShareSynchronizationSetting[] Value { get; set; }
	}
	
	/// <summary>
	/// A SQL DB table data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlDBTableDataSet
	{
		
		/// <summary>
		/// Properties of the SQL DB table data set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SqlDBTableProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the SQL DB table data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlDBTableProperties
	{
		
		/// <summary>
		/// Unique id for identifying a data set resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Database name of the source data set
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// Schema of the table. Default value is dbo.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schemaName")]
		public string SchemaName { get; set; }
		
		/// <summary>
		/// Resource id of SQL server
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sqlServerResourceId")]
		public string SqlServerResourceId { get; set; }
		
		/// <summary>
		/// SQL DB table name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tableName")]
		public string TableName { get; set; }
	}
	
	/// <summary>
	/// A SQL DB Table data set mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlDBTableDataSetMapping
	{
		
		/// <summary>
		/// Properties of the SQL DB table data set mapping.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SqlDBTableDataSetMappingProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the SQL DB table data set mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlDBTableDataSetMappingProperties
	{
		
		/// <summary>
		/// The id of the source data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Gets the status of the data set mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetMappingStatus")]
		public ADLSGen2FileDataSetMappingPropertiesDataSetMappingStatus DataSetMappingStatus { get; set; }
		
		/// <summary>
		/// DatabaseName name of the sink data set
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// Provisioning state of the data set mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ADLSGen2FileDataSetMappingPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Schema of the table. Default value is dbo.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schemaName")]
		public string SchemaName { get; set; }
		
		/// <summary>
		/// Resource id of SQL server
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sqlServerResourceId")]
		public string SqlServerResourceId { get; set; }
		
		/// <summary>
		/// SQL DB table name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tableName")]
		public string TableName { get; set; }
	}
	
	/// <summary>
	/// A SQL DW table data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlDWTableDataSet
	{
		
		/// <summary>
		/// Properties of the SQL DW table data set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SqlDWTableProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the SQL DW table data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlDWTableProperties
	{
		
		/// <summary>
		/// Unique id for identifying a data set resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// DataWarehouse name of the source data set
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataWarehouseName")]
		public string DataWarehouseName { get; set; }
		
		/// <summary>
		/// Schema of the table. Default value is dbo.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schemaName")]
		public string SchemaName { get; set; }
		
		/// <summary>
		/// Resource id of SQL server
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sqlServerResourceId")]
		public string SqlServerResourceId { get; set; }
		
		/// <summary>
		/// SQL DW table name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tableName")]
		public string TableName { get; set; }
	}
	
	/// <summary>
	/// A SQL DW Table data set mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlDWTableDataSetMapping
	{
		
		/// <summary>
		/// Properties of the SQL DW table data set mapping.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SqlDWTableDataSetMappingProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the SQL DW table data set mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlDWTableDataSetMappingProperties
	{
		
		/// <summary>
		/// The id of the source data set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Gets the status of the data set mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetMappingStatus")]
		public ADLSGen2FileDataSetMappingPropertiesDataSetMappingStatus DataSetMappingStatus { get; set; }
		
		/// <summary>
		/// DataWarehouse name of the source data set
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataWarehouseName")]
		public string DataWarehouseName { get; set; }
		
		/// <summary>
		/// Provisioning state of the data set mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ADLSGen2FileDataSetMappingPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Schema of the table. Default value is dbo.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schemaName")]
		public string SchemaName { get; set; }
		
		/// <summary>
		/// Resource id of SQL server
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sqlServerResourceId")]
		public string SqlServerResourceId { get; set; }
		
		/// <summary>
		/// SQL DW table name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tableName")]
		public string TableName { get; set; }
	}
	
	/// <summary>
	/// Synchronization details at data set level
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SynchronizationDetails
	{
		
		/// <summary>
		/// Id of data set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetId")]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Type of the data set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSetType")]
		public ConsumerSourceDataSetPropertiesDataSetType DataSetType { get; set; }
		
		/// <summary>
		/// Duration of data set level copy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="durationMs")]
		public System.Nullable<System.Int32> DurationMs { get; set; }
		
		/// <summary>
		/// End time of data set level copy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The number of files read from the source data set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filesRead")]
		public System.Nullable<System.Int64> FilesRead { get; set; }
		
		/// <summary>
		/// The number of files written into the sink data set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filesWritten")]
		public System.Nullable<System.Int64> FilesWritten { get; set; }
		
		/// <summary>
		/// Error message if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Name of the data set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The number of files copied into the sink data set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowsCopied")]
		public System.Nullable<System.Int64> RowsCopied { get; set; }
		
		/// <summary>
		/// The number of rows read from the source data set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowsRead")]
		public System.Nullable<System.Int64> RowsRead { get; set; }
		
		/// <summary>
		/// The size of the data read from the source data set in bytes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeRead")]
		public System.Nullable<System.Int64> SizeRead { get; set; }
		
		/// <summary>
		/// The size of the data written into the sink data set in bytes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeWritten")]
		public System.Nullable<System.Int64> SizeWritten { get; set; }
		
		/// <summary>
		/// Start time of data set level copy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Raw Status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The vCore units consumed for the data set synchronization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vCore")]
		public System.Nullable<System.Int64> VCore { get; set; }
	}
	
	/// <summary>
	/// details of synchronization
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SynchronizationDetailsList
	{
		
		/// <summary>
		/// The Url of next result page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of items of type DataTransferObjects.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SynchronizationDetails[] Value { get; set; }
	}
	
	/// <summary>
	/// A Synchronization Setting data transfer object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SynchronizationSetting
	{
		
		/// <summary>
		/// Kind of synchronization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public SourceShareSynchronizationSettingKind Kind { get; set; }
	}
	
	/// <summary>
	/// List response for get Synchronization settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SynchronizationSettingList
	{
		
		/// <summary>
		/// The Url of next result page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of items of type DataTransferObjects.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SynchronizationSetting[] Value { get; set; }
	}
	
	/// <summary>
	/// Payload for the synchronizing the data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Synchronize
	{
		
		/// <summary>
		/// Mode of synchronization used in triggers and snapshot sync. Incremental by default
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="synchronizationMode")]
		public ScheduledTriggerPropertiesSynchronizationMode SynchronizationMode { get; set; }
	}
	
	/// <summary>
	/// A Trigger data transfer object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Trigger
	{
		
		/// <summary>
		/// Kind of synchronization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public SourceShareSynchronizationSettingKind Kind { get; set; }
	}
	
	/// <summary>
	/// List response for get triggers
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TriggerList
	{
		
		/// <summary>
		/// The Url of next result page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of items of type DataTransferObjects.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Trigger[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List the invitations
		/// Lists invitations
		/// ConsumerInvitations_ListInvitations providers/Microsoft.DataShare/ListInvitations
		/// </summary>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="skipToken">The continuation token</param>
		/// <returns>Success</returns>
		public async Task<ConsumerInvitationList> ConsumerInvitations_ListInvitationsAsync(string api_version, string skipToken)
		{
			var requestUri = "providers/Microsoft.DataShare/ListInvitations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConsumerInvitationList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rejects the invitation identified by invitationId
		/// Reject an invitation
		/// ConsumerInvitations_RejectInvitation providers/Microsoft.DataShare/locations/{location}/RejectInvitation
		/// </summary>
		/// <param name="location">Location of the invitation</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="requestBody">An invitation payload</param>
		/// <returns>Success</returns>
		public async Task<ConsumerInvitation> ConsumerInvitations_RejectInvitationAsync(string location, string api_version, ConsumerInvitation requestBody)
		{
			var requestUri = "providers/Microsoft.DataShare/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/RejectInvitation&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConsumerInvitation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the invitation identified by invitationId
		/// Get an invitation
		/// ConsumerInvitations_Get providers/Microsoft.DataShare/locations/{location}/consumerInvitations/{invitationId}
		/// </summary>
		/// <param name="location">Location of the invitation</param>
		/// <param name="invitationId">An invitation id</param>
		/// <param name="api_version">The api version to use.</param>
		/// <returns>Success</returns>
		public async Task<ConsumerInvitation> ConsumerInvitations_GetAsync(string location, string invitationId, string api_version)
		{
			var requestUri = "providers/Microsoft.DataShare/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/consumerInvitations/"+ (invitationId==null? "" : System.Uri.EscapeDataString(invitationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConsumerInvitation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the available operations
		/// List of available operations
		/// Operations_List providers/Microsoft.DataShare/operations
		/// </summary>
		/// <param name="api_version">The api version to use.</param>
		/// <returns>Success</returns>
		public async Task<OperationList> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.DataShare/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Accounts in a subscription
		/// List Accounts in Subscription
		/// Accounts_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.DataShare/accounts
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="skipToken">Continuation token</param>
		/// <returns>Success</returns>
		public async Task<AccountList> Accounts_ListBySubscriptionAsync(string subscriptionId, string api_version, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DataShare/accounts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Accounts in a resource group
		/// List Accounts in ResourceGroup
		/// Accounts_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="skipToken">Continuation token</param>
		/// <returns>Success</returns>
		public async Task<AccountList> Accounts_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an account under a resource group
		/// Get an account
		/// Accounts_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <returns>Success</returns>
		public async Task<Account> Accounts_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Account>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an account in the given resource group
		/// Create an account
		/// Accounts_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="requestBody">The account payload.</param>
		/// <returns>Success</returns>
		public async Task<Account> Accounts_CreateAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, Account requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Account>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an account
		/// DeleteAccount
		/// Accounts_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <returns>Success</returns>
		public async Task<OperationResponse> Accounts_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patch a given account
		/// Patch an account
		/// Accounts_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="requestBody">The account update parameters.</param>
		/// <returns>Success</returns>
		public async Task<Account> Accounts_UpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, AccountUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Account>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of available share subscriptions under an account.
		/// List share subscriptions in an account
		/// ShareSubscriptions_ListByAccount subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="skipToken">Continuation Token</param>
		/// <returns>Success</returns>
		public async Task<ShareSubscriptionList> ShareSubscriptions_ListByAccountAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shareSubscriptions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ShareSubscriptionList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get shareSubscription in an account.
		/// Get a shareSubscription in an account
		/// ShareSubscriptions_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareSubscriptionName">The name of the shareSubscription.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <returns>Success</returns>
		public async Task<ShareSubscription> ShareSubscriptions_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string shareSubscriptionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shareSubscriptions/"+ (shareSubscriptionName==null? "" : System.Uri.EscapeDataString(shareSubscriptionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ShareSubscription>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create shareSubscription in an account.
		/// Create a shareSubscription in an account
		/// ShareSubscriptions_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareSubscriptionName">The name of the shareSubscription.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="requestBody">create parameters for shareSubscription</param>
		/// <returns>Success</returns>
		public async Task<ShareSubscription> ShareSubscriptions_CreateAsync(string subscriptionId, string resourceGroupName, string accountName, string shareSubscriptionName, string api_version, ShareSubscription requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shareSubscriptions/"+ (shareSubscriptionName==null? "" : System.Uri.EscapeDataString(shareSubscriptionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ShareSubscription>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete shareSubscription in an account.
		/// Delete a shareSubscription in an account
		/// ShareSubscriptions_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareSubscriptionName">The name of the shareSubscription.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <returns>Success</returns>
		public async Task<OperationResponse> ShareSubscriptions_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string shareSubscriptionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shareSubscriptions/"+ (shareSubscriptionName==null? "" : System.Uri.EscapeDataString(shareSubscriptionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get source dataSets of a shareSubscription.
		/// Get source dataSets of a shareSubscription
		/// ConsumerSourceDataSets_ListByShareSubscription subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/ConsumerSourceDataSets
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareSubscriptionName">The name of the shareSubscription.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="skipToken">Continuation token</param>
		/// <returns>Success</returns>
		public async Task<ConsumerSourceDataSetList> ConsumerSourceDataSets_ListByShareSubscriptionAsync(string subscriptionId, string resourceGroupName, string accountName, string shareSubscriptionName, string api_version, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shareSubscriptions/"+ (shareSubscriptionName==null? "" : System.Uri.EscapeDataString(shareSubscriptionName))+"/ConsumerSourceDataSets&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConsumerSourceDataSetList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Initiate an asynchronous data share job
		/// Initiate a copy
		/// ShareSubscriptions_Synchronize subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/Synchronize
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareSubscriptionName">The name of share subscription</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="requestBody">Synchronize payload</param>
		/// <returns>Success</returns>
		public async Task<ShareSubscriptionSynchronization> ShareSubscriptions_SynchronizeAsync(string subscriptionId, string resourceGroupName, string accountName, string shareSubscriptionName, string api_version, Synchronize requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shareSubscriptions/"+ (shareSubscriptionName==null? "" : System.Uri.EscapeDataString(shareSubscriptionName))+"/Synchronize&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ShareSubscriptionSynchronization>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request cancellation of a data share snapshot
		/// Request to cancel a synchronization.
		/// ShareSubscriptions_CancelSynchronization subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/cancelSynchronization
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareSubscriptionName">The name of the shareSubscription.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="requestBody">Share Subscription Synchronization payload.</param>
		/// <returns>Success</returns>
		public async Task<ShareSubscriptionSynchronization> ShareSubscriptions_CancelSynchronizationAsync(string subscriptionId, string resourceGroupName, string accountName, string shareSubscriptionName, string api_version, ShareSubscriptionSynchronization requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shareSubscriptions/"+ (shareSubscriptionName==null? "" : System.Uri.EscapeDataString(shareSubscriptionName))+"/cancelSynchronization&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ShareSubscriptionSynchronization>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List DataSetMappings in a share subscription.
		/// List DataSetMappings in a share subscription
		/// DataSetMappings_ListByShareSubscription subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/dataSetMappings
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareSubscriptionName">The name of the share subscription.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="skipToken">Continuation token</param>
		/// <returns>Success</returns>
		public async Task<DataSetMappingList> DataSetMappings_ListByShareSubscriptionAsync(string subscriptionId, string resourceGroupName, string accountName, string shareSubscriptionName, string api_version, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shareSubscriptions/"+ (shareSubscriptionName==null? "" : System.Uri.EscapeDataString(shareSubscriptionName))+"/dataSetMappings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataSetMappingList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get DataSetMapping in a shareSubscription.
		/// Get a DataSetMapping in a shareSubscription
		/// DataSetMappings_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/dataSetMappings/{dataSetMappingName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareSubscriptionName">The name of the shareSubscription.</param>
		/// <param name="dataSetMappingName">The name of the dataSetMapping.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <returns>Success</returns>
		public async Task<DataSetMapping> DataSetMappings_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string shareSubscriptionName, string dataSetMappingName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shareSubscriptions/"+ (shareSubscriptionName==null? "" : System.Uri.EscapeDataString(shareSubscriptionName))+"/dataSetMappings/"+ (dataSetMappingName==null? "" : System.Uri.EscapeDataString(dataSetMappingName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataSetMapping>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Maps a source data set in the source share to a sink data set in the share subscription.
		/// Enables copying the data set from source to destination.
		/// Create a DataSetMapping
		/// DataSetMappings_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/dataSetMappings/{dataSetMappingName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareSubscriptionName">The name of the share subscription which will hold the data set sink.</param>
		/// <param name="dataSetMappingName">The name of the data set mapping to be created.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="requestBody">Destination data set configuration details.</param>
		/// <returns>Success</returns>
		public async Task<DataSetMapping> DataSetMappings_CreateAsync(string subscriptionId, string resourceGroupName, string accountName, string shareSubscriptionName, string dataSetMappingName, string api_version, DataSetMapping requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shareSubscriptions/"+ (shareSubscriptionName==null? "" : System.Uri.EscapeDataString(shareSubscriptionName))+"/dataSetMappings/"+ (dataSetMappingName==null? "" : System.Uri.EscapeDataString(dataSetMappingName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataSetMapping>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete DataSetMapping in a shareSubscription.
		/// Delete a DataSetMapping in a shareSubscription
		/// DataSetMappings_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/dataSetMappings/{dataSetMappingName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareSubscriptionName">The name of the shareSubscription.</param>
		/// <param name="dataSetMappingName">The name of the dataSetMapping.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <returns>Success</returns>
		public async Task DataSetMappings_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string shareSubscriptionName, string dataSetMappingName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shareSubscriptions/"+ (shareSubscriptionName==null? "" : System.Uri.EscapeDataString(shareSubscriptionName))+"/dataSetMappings/"+ (dataSetMappingName==null? "" : System.Uri.EscapeDataString(dataSetMappingName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get source share synchronization settings for a shareSubscription.
		/// Get synchronization settings set on a share
		/// ShareSubscriptions_ListSourceShareSynchronizationSettings subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/listSourceShareSynchronizationSettings
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareSubscriptionName">The name of the shareSubscription.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="skipToken">Continuation token</param>
		/// <returns>Success</returns>
		public async Task<SourceShareSynchronizationSettingList> ShareSubscriptions_ListSourceShareSynchronizationSettingsAsync(string subscriptionId, string resourceGroupName, string accountName, string shareSubscriptionName, string api_version, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shareSubscriptions/"+ (shareSubscriptionName==null? "" : System.Uri.EscapeDataString(shareSubscriptionName))+"/listSourceShareSynchronizationSettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SourceShareSynchronizationSettingList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List data set level details for a share subscription synchronization
		/// List synchronization details
		/// ShareSubscriptions_ListSynchronizationDetails subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/listSynchronizationDetails
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareSubscriptionName">The name of the share subscription.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="skipToken">Continuation token</param>
		/// <param name="requestBody">Share Subscription Synchronization payload.</param>
		/// <returns>Success</returns>
		public async Task<SynchronizationDetailsList> ShareSubscriptions_ListSynchronizationDetailsAsync(string subscriptionId, string resourceGroupName, string accountName, string shareSubscriptionName, string api_version, string skipToken, ShareSubscriptionSynchronization requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shareSubscriptions/"+ (shareSubscriptionName==null? "" : System.Uri.EscapeDataString(shareSubscriptionName))+"/listSynchronizationDetails&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SynchronizationDetailsList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Synchronizations in a share subscription.
		/// List synchronizations of a share subscription
		/// ShareSubscriptions_ListSynchronizations subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/listSynchronizations
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareSubscriptionName">The name of the share subscription.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="skipToken">Continuation token</param>
		/// <returns>Success</returns>
		public async Task<ShareSubscriptionSynchronizationList> ShareSubscriptions_ListSynchronizationsAsync(string subscriptionId, string resourceGroupName, string accountName, string shareSubscriptionName, string api_version, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shareSubscriptions/"+ (shareSubscriptionName==null? "" : System.Uri.EscapeDataString(shareSubscriptionName))+"/listSynchronizations&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ShareSubscriptionSynchronizationList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Triggers in a share subscription.
		/// List Triggers in a share subscription
		/// Triggers_ListByShareSubscription subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/triggers
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareSubscriptionName">The name of the share subscription.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="skipToken">Continuation token</param>
		/// <returns>Success</returns>
		public async Task<TriggerList> Triggers_ListByShareSubscriptionAsync(string subscriptionId, string resourceGroupName, string accountName, string shareSubscriptionName, string api_version, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shareSubscriptions/"+ (shareSubscriptionName==null? "" : System.Uri.EscapeDataString(shareSubscriptionName))+"/triggers&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TriggerList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Trigger in a shareSubscription.
		/// Get a Trigger in a shareSubscription
		/// Triggers_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/triggers/{triggerName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareSubscriptionName">The name of the shareSubscription.</param>
		/// <param name="triggerName">The name of the trigger.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <returns>Success</returns>
		public async Task<Trigger> Triggers_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string shareSubscriptionName, string triggerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shareSubscriptions/"+ (shareSubscriptionName==null? "" : System.Uri.EscapeDataString(shareSubscriptionName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Trigger>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method creates a trigger for a share subscription
		/// Create a Trigger
		/// Triggers_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/triggers/{triggerName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareSubscriptionName">The name of the share subscription which will hold the data set sink.</param>
		/// <param name="triggerName">The name of the trigger.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="requestBody">Trigger details.</param>
		/// <returns>Success</returns>
		public async Task<Trigger> Triggers_CreateAsync(string subscriptionId, string resourceGroupName, string accountName, string shareSubscriptionName, string triggerName, string api_version, Trigger requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shareSubscriptions/"+ (shareSubscriptionName==null? "" : System.Uri.EscapeDataString(shareSubscriptionName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Trigger>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Trigger in a shareSubscription.
		/// Delete a Trigger in a shareSubscription
		/// Triggers_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/triggers/{triggerName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareSubscriptionName">The name of the shareSubscription.</param>
		/// <param name="triggerName">The name of the trigger.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <returns>Success</returns>
		public async Task<OperationResponse> Triggers_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string shareSubscriptionName, string triggerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shareSubscriptions/"+ (shareSubscriptionName==null? "" : System.Uri.EscapeDataString(shareSubscriptionName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of available shares under an account.
		/// List shares in an account
		/// Shares_ListByAccount subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="skipToken">Continuation Token</param>
		/// <returns>Success</returns>
		public async Task<ShareList> Shares_ListByAccountAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ShareList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specified share
		/// Get a share
		/// Shares_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareName">The name of the share to retrieve.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <returns>Success</returns>
		public async Task<Share> Shares_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string shareName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares/"+ (shareName==null? "" : System.Uri.EscapeDataString(shareName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Share>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a share in the given account.
		/// Create a share
		/// Shares_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareName">The name of the share.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="requestBody">The share payload</param>
		/// <returns>Success</returns>
		public async Task<Share> Shares_CreateAsync(string subscriptionId, string resourceGroupName, string accountName, string shareName, string api_version, Share requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares/"+ (shareName==null? "" : System.Uri.EscapeDataString(shareName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Share>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a share
		/// Delete a share
		/// Shares_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareName">The name of the share.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <returns>Success</returns>
		public async Task<OperationResponse> Shares_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string shareName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares/"+ (shareName==null? "" : System.Uri.EscapeDataString(shareName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List DataSets in a share.
		/// List DataSets in a share
		/// DataSets_ListByShare subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/dataSets
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareName">The name of the share.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="skipToken">continuation token</param>
		/// <returns>Success</returns>
		public async Task<DataSetList> DataSets_ListByShareAsync(string subscriptionId, string resourceGroupName, string accountName, string shareName, string api_version, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares/"+ (shareName==null? "" : System.Uri.EscapeDataString(shareName))+"/dataSets&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataSetList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get DataSet in a share.
		/// Get a DataSet in a share
		/// DataSets_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/dataSets/{dataSetName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareName">The name of the share.</param>
		/// <param name="dataSetName">The name of the dataSet.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <returns>Success</returns>
		public async Task<DataSet> DataSets_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string shareName, string dataSetName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares/"+ (shareName==null? "" : System.Uri.EscapeDataString(shareName))+"/dataSets/"+ (dataSetName==null? "" : System.Uri.EscapeDataString(dataSetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataSet>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a new data set to an existing share or updates it if existing.
		/// Create a DataSet
		/// DataSets_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/dataSets/{dataSetName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareName">The name of the share to add the data set to.</param>
		/// <param name="dataSetName">The name of the dataSet.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="requestBody">The new data set information.</param>
		/// <returns>Success</returns>
		public async Task<DataSet> DataSets_CreateAsync(string subscriptionId, string resourceGroupName, string accountName, string shareName, string dataSetName, string api_version, DataSet requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares/"+ (shareName==null? "" : System.Uri.EscapeDataString(shareName))+"/dataSets/"+ (dataSetName==null? "" : System.Uri.EscapeDataString(dataSetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataSet>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete DataSet in a share.
		/// Delete a DataSet in a share
		/// DataSets_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/dataSets/{dataSetName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareName">The name of the share.</param>
		/// <param name="dataSetName">The name of the dataSet.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <returns>Success</returns>
		public async Task DataSets_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string shareName, string dataSetName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares/"+ (shareName==null? "" : System.Uri.EscapeDataString(shareName))+"/dataSets/"+ (dataSetName==null? "" : System.Uri.EscapeDataString(dataSetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all Invitations in a share.
		/// List invitations in a share
		/// Invitations_ListByShare subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/invitations
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareName">The name of the share.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="skipToken">The continuation token</param>
		/// <returns>Success</returns>
		public async Task<InvitationList> Invitations_ListByShareAsync(string subscriptionId, string resourceGroupName, string accountName, string shareName, string api_version, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares/"+ (shareName==null? "" : System.Uri.EscapeDataString(shareName))+"/invitations&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InvitationList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Invitation in a share.
		/// Get an invitation in a share
		/// Invitations_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/invitations/{invitationName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareName">The name of the share.</param>
		/// <param name="invitationName">The name of the invitation.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <returns>Success</returns>
		public async Task<Invitation> Invitations_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string shareName, string invitationName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares/"+ (shareName==null? "" : System.Uri.EscapeDataString(shareName))+"/invitations/"+ (invitationName==null? "" : System.Uri.EscapeDataString(invitationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Invitation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sends a new invitation to a recipient to access a share.
		/// Create an invitation
		/// Invitations_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/invitations/{invitationName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareName">The name of the share to send the invitation for.</param>
		/// <param name="invitationName">The name of the invitation.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="requestBody">Invitation details.</param>
		/// <returns>Success</returns>
		public async Task<Invitation> Invitations_CreateAsync(string subscriptionId, string resourceGroupName, string accountName, string shareName, string invitationName, string api_version, Invitation requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares/"+ (shareName==null? "" : System.Uri.EscapeDataString(shareName))+"/invitations/"+ (invitationName==null? "" : System.Uri.EscapeDataString(invitationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Invitation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Invitation in a share.
		/// Delete an invitation in a share
		/// Invitations_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/invitations/{invitationName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareName">The name of the share.</param>
		/// <param name="invitationName">The name of the invitation.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <returns>Success</returns>
		public async Task Invitations_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string shareName, string invitationName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares/"+ (shareName==null? "" : System.Uri.EscapeDataString(shareName))+"/invitations/"+ (invitationName==null? "" : System.Uri.EscapeDataString(invitationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List data set level details for a share synchronization
		/// List synchronization details
		/// Shares_ListSynchronizationDetails subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/listSynchronizationDetails
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareName">The name of the share.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="skipToken">Continuation token</param>
		/// <param name="requestBody">Share Synchronization payload.</param>
		/// <returns>Success</returns>
		public async Task<SynchronizationDetailsList> Shares_ListSynchronizationDetailsAsync(string subscriptionId, string resourceGroupName, string accountName, string shareName, string api_version, string skipToken, ShareSynchronization requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares/"+ (shareName==null? "" : System.Uri.EscapeDataString(shareName))+"/listSynchronizationDetails&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SynchronizationDetailsList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Synchronizations in a share
		/// List synchronizations of a share
		/// Shares_ListSynchronizations subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/listSynchronizations
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareName">The name of the share.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="skipToken">Continuation token</param>
		/// <returns>Success</returns>
		public async Task<ShareSynchronizationList> Shares_ListSynchronizationsAsync(string subscriptionId, string resourceGroupName, string accountName, string shareName, string api_version, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares/"+ (shareName==null? "" : System.Uri.EscapeDataString(shareName))+"/listSynchronizations&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ShareSynchronizationList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of available share subscriptions to a provider share.
		/// List share subscriptions in a provider share
		/// ProviderShareSubscriptions_ListByShare subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/providerShareSubscriptions
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareName">The name of the share.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="skipToken">Continuation Token</param>
		/// <returns>Success</returns>
		public async Task<ProviderShareSubscriptionList> ProviderShareSubscriptions_ListByShareAsync(string subscriptionId, string resourceGroupName, string accountName, string shareName, string api_version, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares/"+ (shareName==null? "" : System.Uri.EscapeDataString(shareName))+"/providerShareSubscriptions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProviderShareSubscriptionList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get share subscription in a provider share.
		/// Get share subscription in a provider share
		/// ProviderShareSubscriptions_GetByShare subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/providerShareSubscriptions/{providerShareSubscriptionId}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareName">The name of the share.</param>
		/// <param name="providerShareSubscriptionId">To locate shareSubscription</param>
		/// <param name="api_version">The api version to use.</param>
		/// <returns>Success</returns>
		public async Task<ProviderShareSubscription> ProviderShareSubscriptions_GetByShareAsync(string subscriptionId, string resourceGroupName, string accountName, string shareName, string providerShareSubscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares/"+ (shareName==null? "" : System.Uri.EscapeDataString(shareName))+"/providerShareSubscriptions/"+ (providerShareSubscriptionId==null? "" : System.Uri.EscapeDataString(providerShareSubscriptionId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProviderShareSubscription>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reinstate share subscription in a provider share.
		/// Reinstate share subscription in a provider share
		/// ProviderShareSubscriptions_Reinstate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/providerShareSubscriptions/{providerShareSubscriptionId}/reinstate
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareName">The name of the share.</param>
		/// <param name="providerShareSubscriptionId">To locate shareSubscription</param>
		/// <param name="api_version">The api version to use.</param>
		/// <returns>Success</returns>
		public async Task<ProviderShareSubscription> ProviderShareSubscriptions_ReinstateAsync(string subscriptionId, string resourceGroupName, string accountName, string shareName, string providerShareSubscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares/"+ (shareName==null? "" : System.Uri.EscapeDataString(shareName))+"/providerShareSubscriptions/"+ (providerShareSubscriptionId==null? "" : System.Uri.EscapeDataString(providerShareSubscriptionId))+"/reinstate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProviderShareSubscription>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revoke share subscription in a provider share.
		/// Revoke share subscription in a provider share
		/// ProviderShareSubscriptions_Revoke subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/providerShareSubscriptions/{providerShareSubscriptionId}/revoke
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareName">The name of the share.</param>
		/// <param name="providerShareSubscriptionId">To locate shareSubscription</param>
		/// <param name="api_version">The api version to use.</param>
		/// <returns>Success</returns>
		public async Task<ProviderShareSubscription> ProviderShareSubscriptions_RevokeAsync(string subscriptionId, string resourceGroupName, string accountName, string shareName, string providerShareSubscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares/"+ (shareName==null? "" : System.Uri.EscapeDataString(shareName))+"/providerShareSubscriptions/"+ (providerShareSubscriptionId==null? "" : System.Uri.EscapeDataString(providerShareSubscriptionId))+"/revoke&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProviderShareSubscription>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List synchronizationSettings in a share.
		/// List synchronizationSettings in a share
		/// SynchronizationSettings_ListByShare subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/synchronizationSettings
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareName">The name of the share.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="skipToken">continuation token</param>
		/// <returns>Success</returns>
		public async Task<SynchronizationSettingList> SynchronizationSettings_ListByShareAsync(string subscriptionId, string resourceGroupName, string accountName, string shareName, string api_version, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares/"+ (shareName==null? "" : System.Uri.EscapeDataString(shareName))+"/synchronizationSettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SynchronizationSettingList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get synchronizationSetting in a share.
		/// Get a synchronizationSetting in a share
		/// SynchronizationSettings_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/synchronizationSettings/{synchronizationSettingName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareName">The name of the share.</param>
		/// <param name="synchronizationSettingName">The name of the synchronizationSetting.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <returns>Success</returns>
		public async Task<SynchronizationSetting> SynchronizationSettings_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string shareName, string synchronizationSettingName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares/"+ (shareName==null? "" : System.Uri.EscapeDataString(shareName))+"/synchronizationSettings/"+ (synchronizationSettingName==null? "" : System.Uri.EscapeDataString(synchronizationSettingName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SynchronizationSetting>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a new synchronization setting to an existing share or updates it if existing.
		/// Create or update a synchronizationSetting
		/// SynchronizationSettings_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/synchronizationSettings/{synchronizationSettingName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareName">The name of the share to add the synchronization setting to.</param>
		/// <param name="synchronizationSettingName">The name of the synchronizationSetting.</param>
		/// <param name="api_version">The api version to use.</param>
		/// <param name="requestBody">The new synchronization setting information.</param>
		/// <returns>Success</returns>
		public async Task<SynchronizationSetting> SynchronizationSettings_CreateAsync(string subscriptionId, string resourceGroupName, string accountName, string shareName, string synchronizationSettingName, string api_version, SynchronizationSetting requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares/"+ (shareName==null? "" : System.Uri.EscapeDataString(shareName))+"/synchronizationSettings/"+ (synchronizationSettingName==null? "" : System.Uri.EscapeDataString(synchronizationSettingName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SynchronizationSetting>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete synchronizationSetting in a share.
		/// Delete a synchronizationSetting in a share
		/// SynchronizationSettings_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/synchronizationSettings/{synchronizationSettingName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="accountName">The name of the share account.</param>
		/// <param name="shareName">The name of the share.</param>
		/// <param name="synchronizationSettingName">The name of the synchronizationSetting .</param>
		/// <param name="api_version">The api version to use.</param>
		/// <returns>Success</returns>
		public async Task<OperationResponse> SynchronizationSettings_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string shareName, string synchronizationSettingName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataShare/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/shares/"+ (shareName==null? "" : System.Uri.EscapeDataString(shareName))+"/synchronizationSettings/"+ (synchronizationSettingName==null? "" : System.Uri.EscapeDataString(synchronizationSettingName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
