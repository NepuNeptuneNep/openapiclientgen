//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An elastic pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ElasticPool
	{
		
		/// <summary>
		/// Kind of elastic pool. This is metadata used for the Azure portal experience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Properties of an elastic pool
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ElasticPoolProperties Properties { get; set; }
		
		/// <summary>
		/// An ARM Resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public ElasticPoolSku Sku { get; set; }
	}
	
	/// <summary>
	/// Properties of an elastic pool
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ElasticPoolProperties
	{
		
		/// <summary>
		/// The creation date of the elastic pool (ISO8601 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// The license type to apply for this elastic pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licenseType")]
		public System.Nullable<ElasticPoolPropertiesLicenseType> LicenseType { get; set; }
		
		/// <summary>
		/// The storage limit for the database elastic pool in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSizeBytes")]
		public System.Nullable<System.Int64> MaxSizeBytes { get; set; }
		
		/// <summary>
		/// Per database settings of an elastic pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perDatabaseSettings")]
		public ElasticPoolPerDatabaseSettings PerDatabaseSettings { get; set; }
		
		/// <summary>
		/// The state of the elastic pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ElasticPoolPropertiesState> State { get; set; }
		
		/// <summary>
		/// Whether or not this elastic pool is zone redundant, which means the replicas of this elastic pool will be spread across multiple availability zones.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zoneRedundant")]
		public System.Nullable<System.Boolean> ZoneRedundant { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ElasticPoolPropertiesLicenseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LicenseIncluded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BasePrice = 1,
	}
	
	/// <summary>
	/// Per database settings of an elastic pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ElasticPoolPerDatabaseSettings
	{
		
		/// <summary>
		/// The maximum capacity any one database can consume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxCapacity")]
		public System.Nullable<System.Double> MaxCapacity { get; set; }
		
		/// <summary>
		/// The minimum capacity all databases are guaranteed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minCapacity")]
		public System.Nullable<System.Double> MinCapacity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ElasticPoolPropertiesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 2,
	}
	
	public class ElasticPoolSku
	{
		
		/// <summary>
		/// Capacity of the particular SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// If the service has different generations of hardware, for the same SKU, then that can be captured here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// The name of the SKU, typically, a letter + Number code, e.g. P3.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Size of the particular SKU
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// The tier or edition of the particular SKU, e.g. Basic, Premium.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	/// <summary>
	/// The result of an elastic pool list request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ElasticPoolListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ElasticPool[] Value { get; set; }
	}
	
	/// <summary>
	/// An elastic pool update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ElasticPoolUpdate
	{
		
		/// <summary>
		/// Properties of an elastic pool
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ElasticPoolUpdateProperties Properties { get; set; }
		
		/// <summary>
		/// An ARM Resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public ElasticPoolUpdateSku Sku { get; set; }
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Properties of an elastic pool
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ElasticPoolUpdateProperties
	{
		
		/// <summary>
		/// The license type to apply for this elastic pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licenseType")]
		public ElasticPoolPropertiesLicenseType LicenseType { get; set; }
		
		/// <summary>
		/// The storage limit for the database elastic pool in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSizeBytes")]
		public System.Nullable<System.Int64> MaxSizeBytes { get; set; }
		
		/// <summary>
		/// Per database settings of an elastic pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perDatabaseSettings")]
		public ElasticPoolPerDatabaseSettings PerDatabaseSettings { get; set; }
		
		/// <summary>
		/// Whether or not this elastic pool is zone redundant, which means the replicas of this elastic pool will be spread across multiple availability zones.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zoneRedundant")]
		public System.Nullable<System.Boolean> ZoneRedundant { get; set; }
	}
	
	public class ElasticPoolUpdateSku
	{
		
		/// <summary>
		/// Capacity of the particular SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// If the service has different generations of hardware, for the same SKU, then that can be captured here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// The name of the SKU, typically, a letter + Number code, e.g. P3.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Size of the particular SKU
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// The tier or edition of the particular SKU, e.g. Basic, Premium.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets all elastic pools in a server.
		/// ElasticPools_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="skip">The number of elements in the collection to skip.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Succeeded</returns>
		public async Task<ElasticPoolListResult> ElasticPools_ListByServerAsync(string resourceGroupName, string serverName, int skip, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/elasticPools&$skip="+skip+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ElasticPoolListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an elastic pool.
		/// ElasticPools_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="elasticPoolName">The name of the elastic pool.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Succeeded</returns>
		public async Task<ElasticPool> ElasticPools_GetAsync(string resourceGroupName, string serverName, string elasticPoolName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/elasticPools/"+ (elasticPoolName==null? "" : System.Uri.EscapeDataString(elasticPoolName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ElasticPool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an elastic pool.
		/// ElasticPools_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="elasticPoolName">The name of the elastic pool.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="requestBody">The elastic pool parameters.</param>
		/// <returns>Updated the elastic pool</returns>
		public async Task<ElasticPool> ElasticPools_CreateOrUpdateAsync(string resourceGroupName, string serverName, string elasticPoolName, string subscriptionId, string api_version, ElasticPool requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/elasticPools/"+ (elasticPoolName==null? "" : System.Uri.EscapeDataString(elasticPoolName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ElasticPool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an elastic pool.
		/// ElasticPools_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="elasticPoolName">The name of the elastic pool.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Deleted the elastic pool</returns>
		public async Task ElasticPools_DeleteAsync(string resourceGroupName, string serverName, string elasticPoolName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/elasticPools/"+ (elasticPoolName==null? "" : System.Uri.EscapeDataString(elasticPoolName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an elastic pool.
		/// ElasticPools_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="elasticPoolName">The name of the elastic pool.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="requestBody">The elastic pool update parameters.</param>
		/// <returns>Updated the elastic pool</returns>
		public async Task<ElasticPool> ElasticPools_UpdateAsync(string resourceGroupName, string serverName, string elasticPoolName, string subscriptionId, string api_version, ElasticPoolUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/elasticPools/"+ (elasticPoolName==null? "" : System.Uri.EscapeDataString(elasticPoolName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ElasticPool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
