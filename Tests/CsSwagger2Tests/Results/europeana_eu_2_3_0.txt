//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AtomLink
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Channel
	{
		
		[System.Runtime.Serialization.DataMember(Name="atomLink")]
		public AtomLink AtomLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public ChannelImage Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Item[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public Statistic ItemsPerPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public Query Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public Statistic StartIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public Statistic TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Item
	{
		
		[System.Runtime.Serialization.DataMember(Name="dcCreator")]
		public string DcCreator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dcTermsHasPart")]
		public string[] DcTermsHasPart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dcTermsIsPartOf")]
		public string[] DcTermsIsPartOf { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enclosure")]
		public Enclosure Enclosure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enrichmentAgentLabel")]
		public string[] EnrichmentAgentLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enrichmentAgentTerm")]
		public string[] EnrichmentAgentTerm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enrichmentConceptLabel")]
		public string[] EnrichmentConceptLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enrichmentConceptTerm")]
		public string[] EnrichmentConceptTerm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enrichmentPeriodBegin")]
		public string EnrichmentPeriodBegin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enrichmentPeriodEnd")]
		public string EnrichmentPeriodEnd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enrichmentPeriodLabel")]
		public string[] EnrichmentPeriodLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enrichmentPeriodTerm")]
		public string[] EnrichmentPeriodTerm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enrichmentPlaceLabel")]
		public string[] EnrichmentPlaceLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enrichmentPlaceLatitude")]
		public System.Nullable<System.Single> EnrichmentPlaceLatitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enrichmentPlaceLongitude")]
		public System.Nullable<System.Single> EnrichmentPlaceLongitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enrichmentPlaceTerm")]
		public string[] EnrichmentPlaceTerm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="europeanaDataProvider")]
		public string EuropeanaDataProvider { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="europeanaLanguage")]
		public string EuropeanaLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="europeanaProvider")]
		public string EuropeanaProvider { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="europeanaRights")]
		public string[] EuropeanaRights { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="europeanaType")]
		public string EuropeanaType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="europeanaYear")]
		public string EuropeanaYear { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ChannelImage
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Enclosure
	{
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ModelAndView
	{
		
		[System.Runtime.Serialization.DataMember(Name="empty")]
		public System.Nullable<System.Boolean> Empty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelMap")]
		public System.Collections.Generic.Dictionary<string, object> ModelMap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public System.Nullable<System.Boolean> Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="view")]
		public View View { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="viewName")]
		public string ViewName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class View
	{
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ModelMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Query
	{
		
		[System.Runtime.Serialization.DataMember(Name="searchTerms")]
		public string SearchTerms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startPage")]
		public System.Nullable<System.Int32> StartPage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RssResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public Channel Channel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Statistic
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int64> Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// get information about a specific dataset
		/// GetDataset v2/dataset/{id}.json
		/// </summary>
		/// <param name="id">id</param>
		/// <param name="wskey">wskey</param>
		/// <param name="callback">callback</param>
		/// <returns>OK</returns>
		public async Task<ModelAndView> GetDatasetAsync(string id, string wskey, string callback)
		{
			var requestUri = "v2/dataset/"+ (id==null? "" : System.Uri.EscapeDataString(id))+".json&wskey=" + (wskey==null? "" : System.Uri.EscapeDataString(wskey))+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ModelAndView>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// get the list of Europeana datasets
		/// ListDatasets v2/datasets.json
		/// </summary>
		/// <param name="wskey">wskey</param>
		/// <param name="callback">callback</param>
		/// <param name="edmDatasetName">edmDatasetName</param>
		/// <param name="countryCode">countryCode</param>
		/// <param name="status">status</param>
		/// <param name="offset">offset</param>
		/// <param name="pagesize">pagesize</param>
		/// <returns>OK</returns>
		public async Task<ModelAndView> ListDatasetsAsync(string wskey, string callback, string edmDatasetName, string countryCode, string status, string offset, string pagesize)
		{
			var requestUri = "v2/datasets.json?wskey=" + (wskey==null? "" : System.Uri.EscapeDataString(wskey))+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback))+"&edmDatasetName=" + (edmDatasetName==null? "" : System.Uri.EscapeDataString(edmDatasetName))+"&countryCode=" + (countryCode==null? "" : System.Uri.EscapeDataString(countryCode))+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&pagesize=" + (pagesize==null? "" : System.Uri.EscapeDataString(pagesize));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ModelAndView>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// basic search function following the OpenSearch specification
		/// OpenSearch v2/opensearch.rss
		/// </summary>
		/// <param name="searchTerms">searchTerms</param>
		/// <param name="startIndex">startIndex</param>
		/// <param name="count">count</param>
		/// <returns>OK</returns>
		public async Task OpenSearchAsync(string searchTerms, int startIndex, int count)
		{
			var requestUri = "v2/opensearch.rss?searchTerms=" + (searchTerms==null? "" : System.Uri.EscapeDataString(searchTerms))+"&startIndex="+startIndex+"&count="+count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// get information about a specific Europeana provider
		/// GetProvider v2/provider/{id}.json
		/// </summary>
		/// <param name="id">id</param>
		/// <param name="wskey">wskey</param>
		/// <param name="callback">callback</param>
		/// <returns>OK</returns>
		public async Task<ModelAndView> GetProviderAsync(string id, string wskey, string callback)
		{
			var requestUri = "v2/provider/"+ (id==null? "" : System.Uri.EscapeDataString(id))+".json&wskey=" + (wskey==null? "" : System.Uri.EscapeDataString(wskey))+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ModelAndView>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// get the list of datasets provided by a specific provider
		/// ListProviderDatasets v2/provider/{id}/datasets.json
		/// </summary>
		/// <param name="id">id</param>
		/// <param name="wskey">wskey</param>
		/// <param name="callback">callback</param>
		/// <returns>OK</returns>
		public async Task<ModelAndView> ListProviderDatasetsAsync(string id, string wskey, string callback)
		{
			var requestUri = "v2/provider/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/datasets.json&wskey=" + (wskey==null? "" : System.Uri.EscapeDataString(wskey))+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ModelAndView>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// get the list of Europeana data providers
		/// ListProviders v2/providers.json
		/// </summary>
		/// <param name="wskey">wskey</param>
		/// <param name="callback">callback</param>
		/// <param name="countryCode">countryCode</param>
		/// <param name="offset">offset</param>
		/// <param name="pagesize">pagesize</param>
		/// <returns>OK</returns>
		public async Task<ModelAndView> ListProvidersAsync(string wskey, string callback, string countryCode, string offset, string pagesize)
		{
			var requestUri = "v2/providers.json?wskey=" + (wskey==null? "" : System.Uri.EscapeDataString(wskey))+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback))+"&countryCode=" + (countryCode==null? "" : System.Uri.EscapeDataString(countryCode))+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&pagesize=" + (pagesize==null? "" : System.Uri.EscapeDataString(pagesize));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ModelAndView>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// get a single record in JSON format
		/// GetSingleRecordJson v2/record/{collectionId}/{recordId}.json
		/// </summary>
		/// <param name="collectionId">collectionId</param>
		/// <param name="recordId">recordId</param>
		/// <param name="profile">profile</param>
		/// <param name="wskey">wskey</param>
		/// <param name="callback">callback</param>
		/// <param name="hierarchytimeout">hierarchytimeout</param>
		/// <returns>OK</returns>
		public async Task<ModelAndView> GetSingleRecordJsonAsync(string collectionId, string recordId, string profile, string wskey, string callback, int hierarchytimeout)
		{
			var requestUri = "v2/record/"+ (collectionId==null? "" : System.Uri.EscapeDataString(collectionId))+"/"+ (recordId==null? "" : System.Uri.EscapeDataString(recordId))+".json&profile=" + (profile==null? "" : System.Uri.EscapeDataString(profile))+"&wskey=" + (wskey==null? "" : System.Uri.EscapeDataString(wskey))+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback))+"&hierarchytimeout="+hierarchytimeout;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ModelAndView>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// get single record in JSON LD format
		/// GetSingleRecordJsonLD v2/record/{collectionId}/{recordId}.jsonld
		/// </summary>
		/// <param name="collectionId">collectionId</param>
		/// <param name="recordId">recordId</param>
		/// <param name="wskey">wskey</param>
		/// <param name="format">format</param>
		/// <param name="callback">callback</param>
		/// <returns>OK</returns>
		public async Task<ModelAndView> GetSingleRecordJsonLDAsync(string collectionId, string recordId, string wskey, string format, string callback)
		{
			var requestUri = "v2/record/"+ (collectionId==null? "" : System.Uri.EscapeDataString(collectionId))+"/"+ (recordId==null? "" : System.Uri.EscapeDataString(recordId))+".jsonld&wskey=" + (wskey==null? "" : System.Uri.EscapeDataString(wskey))+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format))+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ModelAndView>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// get single record in RDF format)
		/// GetSingleRecordRDF v2/record/{collectionId}/{recordId}.rdf
		/// </summary>
		/// <param name="collectionId">collectionId</param>
		/// <param name="recordId">recordId</param>
		/// <param name="wskey">wskey</param>
		/// <returns>OK</returns>
		public async Task GetSingleRecordRDFAsync(string collectionId, string recordId, string wskey)
		{
			var requestUri = "v2/record/"+ (collectionId==null? "" : System.Uri.EscapeDataString(collectionId))+"/"+ (recordId==null? "" : System.Uri.EscapeDataString(recordId))+".rdf&wskey=" + (wskey==null? "" : System.Uri.EscapeDataString(wskey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// search for records
		/// SearchRecords v2/search.json
		/// </summary>
		/// <param name="wskey">wskey</param>
		/// <param name="query">query</param>
		/// <param name="qf">qf</param>
		/// <param name="reusability">reusability</param>
		/// <param name="profile">profile</param>
		/// <param name="start">start</param>
		/// <param name="rows">rows</param>
		/// <param name="facet">facet</param>
		/// <param name="sort">sort</param>
		/// <param name="colourpalette">colourpalette</param>
		/// <param name="thumbnail">thumbnail</param>
		/// <param name="media">media</param>
		/// <param name="text_fulltext">text_fulltext</param>
		/// <param name="landingpage">landingpage</param>
		/// <param name="cursor">cursor</param>
		/// <param name="callback">callback</param>
		/// <returns>OK</returns>
		public async Task<ModelAndView> SearchRecordsAsync(
					string wskey, 
					string query, 
					string[] qf, 
					string[] reusability, 
					string profile, 
					int start, 
					int rows, 
					string[] facet, 
					string sort, 
					string[] colourpalette, 
					bool thumbnail, 
					bool media, 
					bool text_fulltext, 
					bool landingpage, 
					string cursor, 
					string callback)
		{
			var requestUri = "v2/search.json?wskey=" + (wskey==null? "" : System.Uri.EscapeDataString(wskey))+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&"+string.Join("&", qf.Select(z => $"qf={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", reusability.Select(z => $"reusability={System.Uri.EscapeDataString(z.ToString())}"))+"&profile=" + (profile==null? "" : System.Uri.EscapeDataString(profile))+"&start="+start+"&rows="+rows+"&"+string.Join("&", facet.Select(z => $"facet={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&"+string.Join("&", colourpalette.Select(z => $"colourpalette={System.Uri.EscapeDataString(z.ToString())}"))+"&thumbnail="+thumbnail+"&media="+media+"&text_fulltext="+text_fulltext+"&landingpage="+landingpage+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ModelAndView>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Google Fieldtrip formatted RSS of selected collections
		/// FieldTrip v2/search.rss
		/// </summary>
		/// <param name="query">query</param>
		/// <param name="offset">offset</param>
		/// <param name="limit">limit</param>
		/// <param name="profile">profile</param>
		/// <param name="language">language</param>
		/// <returns>OK</returns>
		public async Task FieldTripAsync(string query, int offset, int limit, string profile, string language)
		{
			var requestUri = "v2/search.rss?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&offset="+offset+"&limit="+limit+"&profile=" + (profile==null? "" : System.Uri.EscapeDataString(profile))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// get autocompletion recommendations for search queries
		/// Suggestions v2/suggestions.json
		/// </summary>
		/// <param name="query">query</param>
		/// <param name="rows">rows</param>
		/// <param name="phrases">phrases</param>
		/// <param name="callback">callback</param>
		/// <returns>OK</returns>
		public async Task<ModelAndView> SuggestionsAsync(string query, int rows, bool phrases, string callback)
		{
			var requestUri = "v2/suggestions.json?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&rows="+rows+"&phrases="+phrases+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ModelAndView>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// translate a term to different languages
		/// TranslateQueryUsingGET v2/translateQuery.json
		/// </summary>
		/// <param name="term">term</param>
		/// <param name="languageCodes">languageCodes</param>
		/// <param name="wskey">wskey</param>
		/// <param name="profile">profile</param>
		/// <param name="callback">callback</param>
		/// <returns>OK</returns>
		public async Task<ModelAndView> TranslateQueryUsingGETAsync(string term, string[] languageCodes, string wskey, string profile, string callback)
		{
			var requestUri = "v2/translateQuery.json?term=" + (term==null? "" : System.Uri.EscapeDataString(term))+"&"+string.Join("&", languageCodes.Select(z => $"languageCodes={System.Uri.EscapeDataString(z.ToString())}"))+"&wskey=" + (wskey==null? "" : System.Uri.EscapeDataString(wskey))+"&profile=" + (profile==null? "" : System.Uri.EscapeDataString(profile))+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ModelAndView>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
