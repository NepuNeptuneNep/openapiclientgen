//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Authorization tuple containing principal Id (of user/service principal/security group) and role definition id.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Authorization
	{
		
		/// <summary>
		/// Principal Id of the security group/service principal/user that would be assigned permissions to the projected subscription
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The role definition identifier. This role will define all the permissions that the security group/service principal/user must have on the projected subscription. This role cannot be an owner role.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleDefinitionId")]
		public string RoleDefinitionId { get; set; }
	}
	
	/// <summary>
	/// Error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error response indicates Azure Resource Manager is not able to process the incoming request. The reason is provided in the error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorResponseError Error { get; set; }
	}
	
	public class ErrorResponseError
	{
		
		/// <summary>
		/// Error code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// List of marketplace registration definitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MarketplaceRegistrationDefinitionList
	{
		
		/// <summary>
		/// Link to next page of marketplace registration definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of marketplace registration definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RegistrationDefinition[] Value { get; set; }
	}
	
	/// <summary>
	/// Registration definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegistrationDefinition
	{
		
		/// <summary>
		/// Fully qualified path of the registration definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the registration definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Plan details for the managed services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan")]
		public Plan Plan { get; set; }
		
		/// <summary>
		/// Properties of a registration definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RegistrationDefinitionProperties Properties { get; set; }
		
		/// <summary>
		/// Type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Plan details for the managed services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Plan
	{
		
		/// <summary>
		/// The plan name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The product code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="product")]
		public string Product { get; set; }
		
		/// <summary>
		/// The publisher ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// The plan's version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Properties of a registration definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegistrationDefinitionProperties
	{
		
		/// <summary>
		/// Authorization tuple containing principal id of the user/security group or service principal and id of the build-in role.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authorizations")]
		public Authorization[] Authorizations { get; set; }
		
		/// <summary>
		/// Description of the registration definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Id of the managedBy tenant.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="managedByTenantId")]
		public string ManagedByTenantId { get; set; }
		
		/// <summary>
		/// Name of the managedBy tenant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedByTenantName")]
		public string ManagedByTenantName { get; set; }
		
		/// <summary>
		/// Current state of the registration definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<RegistrationDefinitionPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// Name of the registration definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registrationDefinitionName")]
		public string RegistrationDefinitionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RegistrationDefinitionPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accepted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 11,
	}
	
	/// <summary>
	/// Object that describes a single Microsoft.ManagedServices operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that represents the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// List of the operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationList
	{
		
		/// <summary>
		/// List of Microsoft.ManagedServices operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// Registration assignment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegistrationAssignment
	{
		
		/// <summary>
		/// The fully qualified path of the registration assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the registration assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Properties of a registration assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RegistrationAssignmentProperties Properties { get; set; }
		
		/// <summary>
		/// Type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Properties of a registration assignment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegistrationAssignmentProperties
	{
		
		/// <summary>
		/// Current state of the registration assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public RegistrationDefinitionPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Registration definition inside registration assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registrationDefinition")]
		public RegistrationAssignmentPropertiesRegistrationDefinition RegistrationDefinition { get; set; }
		
		/// <summary>
		/// Fully qualified path of the registration definition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="registrationDefinitionId")]
		public string RegistrationDefinitionId { get; set; }
	}
	
	public class RegistrationAssignmentPropertiesRegistrationDefinition
	{
		
		/// <summary>
		/// Fully qualified path of the registration definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the registration definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Plan details for the managed services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan")]
		public Plan Plan { get; set; }
		
		/// <summary>
		/// Properties of registration definition inside registration assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		/// <summary>
		/// Type of the resource (Microsoft.ManagedServices/registrationDefinitions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// List of registration assignments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegistrationAssignmentList
	{
		
		/// <summary>
		/// Link to next page of registration assignments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of registration assignments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RegistrationAssignment[] Value { get; set; }
	}
	
	/// <summary>
	/// List of registration definitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegistrationDefinitionList
	{
		
		/// <summary>
		/// Link to next page of registration definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of registration definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RegistrationDefinition[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a list of the operations.
		/// Operations_List providers/Microsoft.ManagedServices/operations
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns a list of operations.</returns>
		public async Task<OperationList> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.ManagedServices/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OperationList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of the marketplace registration definitions for the marketplace identifier.
		/// MarketplaceRegistrationDefinitions_List {scope}/providers/Microsoft.ManagedServices/marketplaceRegistrationDefinitions
		/// </summary>
		/// <param name="scope">Scope of the resource.</param>
		/// <param name="filter">The filter query parameter. Might be used to filter marketplace registration definition by plan identifier, publisher, version etc.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns a list of the marketplace registration definitions.</returns>
		public async Task<MarketplaceRegistrationDefinitionList> MarketplaceRegistrationDefinitions_ListAsync(string scope, string filter, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.ManagedServices/marketplaceRegistrationDefinitions&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MarketplaceRegistrationDefinitionList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the marketplace registration definition for the marketplace identifier.
		/// MarketplaceRegistrationDefinitions_Get {scope}/providers/Microsoft.ManagedServices/marketplaceRegistrationDefinitions/{marketplaceIdentifier}
		/// </summary>
		/// <param name="scope">Scope of the resource.</param>
		/// <param name="marketplaceIdentifier">Market place identifer. Expected Formats - {publisher}.{product[-preview]}.{planName}.{version} or {publisher}.{product[-preview]}.{planName} or {publisher}.{product[-preview]} or {publisher}).</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns the details of the marketplace registration definition.</returns>
		public async Task<RegistrationDefinition> MarketplaceRegistrationDefinitions_GetAsync(string scope, string marketplaceIdentifier, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.ManagedServices/marketplaceRegistrationDefinitions/"+ (marketplaceIdentifier==null? "" : System.Uri.EscapeDataString(marketplaceIdentifier))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegistrationDefinition>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of the registration assignments.
		/// RegistrationAssignments_List {scope}/providers/Microsoft.ManagedServices/registrationAssignments
		/// </summary>
		/// <param name="scope">Scope of the resource.</param>
		/// <param name="expandRegistrationDefinition">Tells whether to return registration definition details also along with registration assignment details.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns a list of the registration assignments.</returns>
		public async Task<RegistrationAssignmentList> RegistrationAssignments_ListAsync(string scope, bool expandRegistrationDefinition, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.ManagedServices/registrationAssignments&$expandRegistrationDefinition="+expandRegistrationDefinition+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegistrationAssignmentList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the details of specified registration assignment.
		/// RegistrationAssignments_Get {scope}/providers/Microsoft.ManagedServices/registrationAssignments/{registrationAssignmentId}
		/// </summary>
		/// <param name="scope">Scope of the resource.</param>
		/// <param name="registrationAssignmentId">Guid of the registration assignment.</param>
		/// <param name="expandRegistrationDefinition">Tells whether to return registration definition details also along with registration assignment details.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns the registration assignment.</returns>
		public async Task<RegistrationAssignment> RegistrationAssignments_GetAsync(string scope, string registrationAssignmentId, bool expandRegistrationDefinition, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.ManagedServices/registrationAssignments/"+ (registrationAssignmentId==null? "" : System.Uri.EscapeDataString(registrationAssignmentId))+"&$expandRegistrationDefinition="+expandRegistrationDefinition+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegistrationAssignment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates a registration assignment.
		/// RegistrationAssignments_CreateOrUpdate {scope}/providers/Microsoft.ManagedServices/registrationAssignments/{registrationAssignmentId}
		/// </summary>
		/// <param name="scope">Scope of the resource.</param>
		/// <param name="registrationAssignmentId">Guid of the registration assignment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="requestBody">The parameters required to create new registration assignment.</param>
		/// <returns>Ok - Returns information about the updated registration assignment.</returns>
		public async Task<RegistrationAssignment> RegistrationAssignments_CreateOrUpdateAsync(string scope, string registrationAssignmentId, string api_version, RegistrationAssignment requestBody)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.ManagedServices/registrationAssignments/"+ (registrationAssignmentId==null? "" : System.Uri.EscapeDataString(registrationAssignmentId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegistrationAssignment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the specified registration assignment.
		/// RegistrationAssignments_Delete {scope}/providers/Microsoft.ManagedServices/registrationAssignments/{registrationAssignmentId}
		/// </summary>
		/// <param name="scope">Scope of the resource.</param>
		/// <param name="registrationAssignmentId">Guid of the registration assignment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - The registration assignment is deleted.</returns>
		public async Task RegistrationAssignments_DeleteAsync(string scope, string registrationAssignmentId, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.ManagedServices/registrationAssignments/"+ (registrationAssignmentId==null? "" : System.Uri.EscapeDataString(registrationAssignmentId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of the registration definitions.
		/// RegistrationDefinitions_List {scope}/providers/Microsoft.ManagedServices/registrationDefinitions
		/// </summary>
		/// <param name="scope">Scope of the resource.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns a list of the registration definitions.</returns>
		public async Task<RegistrationDefinitionList> RegistrationDefinitions_ListAsync(string scope, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.ManagedServices/registrationDefinitions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegistrationDefinitionList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the registration definition details.
		/// RegistrationDefinitions_Get {scope}/providers/Microsoft.ManagedServices/registrationDefinitions/{registrationDefinitionId}
		/// </summary>
		/// <param name="scope">Scope of the resource.</param>
		/// <param name="registrationDefinitionId">Guid of the registration definition.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns the complete registration definition with plan details.</returns>
		public async Task<RegistrationDefinition> RegistrationDefinitions_GetAsync(string scope, string registrationDefinitionId, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.ManagedServices/registrationDefinitions/"+ (registrationDefinitionId==null? "" : System.Uri.EscapeDataString(registrationDefinitionId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegistrationDefinition>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates a registration definition.
		/// RegistrationDefinitions_CreateOrUpdate {scope}/providers/Microsoft.ManagedServices/registrationDefinitions/{registrationDefinitionId}
		/// </summary>
		/// <param name="registrationDefinitionId">Guid of the registration definition.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="scope">Scope of the resource.</param>
		/// <param name="requestBody">The parameters required to create new registration definition.</param>
		/// <returns>Ok - Returns information about the updated registration definition.</returns>
		public async Task<RegistrationDefinition> RegistrationDefinitions_CreateOrUpdateAsync(string registrationDefinitionId, string api_version, string scope, RegistrationDefinition requestBody)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.ManagedServices/registrationDefinitions/"+ (registrationDefinitionId==null? "" : System.Uri.EscapeDataString(registrationDefinitionId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegistrationDefinition>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the registration definition.
		/// RegistrationDefinitions_Delete {scope}/providers/Microsoft.ManagedServices/registrationDefinitions/{registrationDefinitionId}
		/// </summary>
		/// <param name="registrationDefinitionId">Guid of the registration definition.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="scope">Scope of the resource.</param>
		/// <returns>OK - The registration definition is deleted.</returns>
		public async Task RegistrationDefinitions_DeleteAsync(string registrationDefinitionId, string api_version, string scope)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.ManagedServices/registrationDefinitions/"+ (registrationDefinitionId==null? "" : System.Uri.EscapeDataString(registrationDefinitionId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
