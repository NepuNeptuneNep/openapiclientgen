//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// SQL REST API operation definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// Display metadata associated with the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplay Display { get; set; }
		
		/// <summary>
		/// The name of the operation being performed on this particular object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The intended executor of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public System.Nullable<OperationOrigin> Origin { get; set; }
		
		/// <summary>
		/// Additional descriptions for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, object> Properties { get; set; }
	}
	
	/// <summary>
	/// Display metadata associated with the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDisplay
	{
		
		/// <summary>
		/// The localized friendly description for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The localized friendly name for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// The localized friendly form of the resource provider name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// The localized friendly form of the resource type related to this action/operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OperationOrigin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		system = 1,
	}
	
	/// <summary>
	/// Result of the request to list SQL operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// ARM proxy resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProxyResource
	{
	}
	
	/// <summary>
	/// ARM resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A SQL server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlServer
	{
		
		/// <summary>
		/// The SQL server properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SqlServerProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The SQL server properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlServerProperties
	{
		
		/// <summary>
		/// Cores of the Sql Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cores")]
		public System.Nullable<System.Int32> Cores { get; set; }
		
		/// <summary>
		/// Sql Server Edition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="edition")]
		public string Edition { get; set; }
		
		/// <summary>
		/// Sql Server Json Property Bag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyBag")]
		public string PropertyBag { get; set; }
		
		/// <summary>
		/// ID for Parent Sql Server Registration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registrationID")]
		public string RegistrationID { get; set; }
		
		/// <summary>
		/// Version of the Sql Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// A list of SQL servers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlServerListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SqlServer[] Value { get; set; }
	}
	
	/// <summary>
	/// A SQL server registration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlServerRegistration
	{
		
		/// <summary>
		/// The SQL server Registration properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SqlServerRegistrationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The SQL server Registration properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlServerRegistrationProperties
	{
		
		/// <summary>
		/// Optional Properties as JSON string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyBag")]
		public string PropertyBag { get; set; }
		
		/// <summary>
		/// Resource Group Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// Subscription Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// Server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlServerRegistrationListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SqlServerRegistration[] Value { get; set; }
	}
	
	/// <summary>
	/// An update to a SQL Server Registration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlServerRegistrationUpdate
	{
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// ARM tracked top level resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrackedResource
	{
		
		/// <summary>
		/// Resource location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available SQL Server Registration API operations.
		/// Operations_List providers/Microsoft.AzureData/operations
		/// </summary>
		/// <param name="api_version">API version to use for the request.</param>
		/// <returns>Successfully retrieved operations.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.AzureData/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all SQL Server registrations in a subscription.
		/// SqlServerRegistrations_List subscriptions/{subscriptionId}/providers/Microsoft.AzureData/sqlServerRegistrations
		/// </summary>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <returns>Successfully retrieved all SQL Server registrations in the subscription.</returns>
		public async Task<SqlServerRegistrationListResult> SqlServerRegistrations_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.AzureData/sqlServerRegistrations&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SqlServerRegistrationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all SQL Server registrations in a resource group.
		/// SqlServerRegistrations_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData/sqlServerRegistrations
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <returns>Successfully retrieved all SQL Server registrations in the resource group.</returns>
		public async Task<SqlServerRegistrationListResult> SqlServerRegistrations_ListByResourceGroupAsync(string resourceGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AzureData/sqlServerRegistrations&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SqlServerRegistrationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a SQL Server registration.
		/// SqlServerRegistrations_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData/sqlServerRegistrations/{sqlServerRegistrationName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="sqlServerRegistrationName">Name of the SQL Server registration.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <returns>Successfully retrieved the SQL Server registration.</returns>
		public async Task<SqlServerRegistration> SqlServerRegistrations_GetAsync(string resourceGroupName, string sqlServerRegistrationName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AzureData/sqlServerRegistrations/"+ (sqlServerRegistrationName==null? "" : System.Uri.EscapeDataString(sqlServerRegistrationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SqlServerRegistration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a SQL Server registration.
		/// SqlServerRegistrations_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData/sqlServerRegistrations/{sqlServerRegistrationName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="sqlServerRegistrationName">Name of the SQL Server registration.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <param name="requestBody">The SQL Server registration to be created or updated.</param>
		/// <returns>Successfully updated the SQL Server registration.</returns>
		public async Task<SqlServerRegistration> SqlServerRegistrations_CreateOrUpdateAsync(string resourceGroupName, string sqlServerRegistrationName, string subscriptionId, string api_version, SqlServerRegistration requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AzureData/sqlServerRegistrations/"+ (sqlServerRegistrationName==null? "" : System.Uri.EscapeDataString(sqlServerRegistrationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SqlServerRegistration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a SQL Server registration.
		/// SqlServerRegistrations_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData/sqlServerRegistrations/{sqlServerRegistrationName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="sqlServerRegistrationName">Name of the SQL Server registration.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <returns>Successfully deleted the SQL Server registration.</returns>
		public async Task SqlServerRegistrations_DeleteAsync(string resourceGroupName, string sqlServerRegistrationName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AzureData/sqlServerRegistrations/"+ (sqlServerRegistrationName==null? "" : System.Uri.EscapeDataString(sqlServerRegistrationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates SQL Server Registration tags.
		/// SqlServerRegistrations_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData/sqlServerRegistrations/{sqlServerRegistrationName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="sqlServerRegistrationName">Name of the SQL Server registration.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <param name="requestBody">The SQL Server Registration.</param>
		/// <returns>Successfully updated the SQL Server Registration.</returns>
		public async Task<SqlServerRegistration> SqlServerRegistrations_UpdateAsync(string resourceGroupName, string sqlServerRegistrationName, string subscriptionId, string api_version, SqlServerRegistrationUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AzureData/sqlServerRegistrations/"+ (sqlServerRegistrationName==null? "" : System.Uri.EscapeDataString(sqlServerRegistrationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SqlServerRegistration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all SQL Servers in a SQL Server Registration.
		/// SqlServers_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData/sqlServerRegistrations/{sqlServerRegistrationName}/sqlServers
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="sqlServerRegistrationName">Name of the SQL Server registration.</param>
		/// <param name="expand">The child resources to include in the response.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <returns>Successfully retrieved all SQL Servers in the SQL Server Registration.</returns>
		public async Task<SqlServerListResult> SqlServers_ListByResourceGroupAsync(string resourceGroupName, string sqlServerRegistrationName, string expand, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AzureData/sqlServerRegistrations/"+ (sqlServerRegistrationName==null? "" : System.Uri.EscapeDataString(sqlServerRegistrationName))+"/sqlServers&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SqlServerListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a SQL Server.
		/// SqlServers_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData/sqlServerRegistrations/{sqlServerRegistrationName}/sqlServers/{sqlServerName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="sqlServerRegistrationName">Name of the SQL Server registration.</param>
		/// <param name="sqlServerName">Name of the SQL Server.</param>
		/// <param name="expand">The child resources to include in the response.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <returns>Successfully retrieved the SQL Server.</returns>
		public async Task<SqlServer> SqlServers_GetAsync(string resourceGroupName, string sqlServerRegistrationName, string sqlServerName, string expand, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AzureData/sqlServerRegistrations/"+ (sqlServerRegistrationName==null? "" : System.Uri.EscapeDataString(sqlServerRegistrationName))+"/sqlServers/"+ (sqlServerName==null? "" : System.Uri.EscapeDataString(sqlServerName))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SqlServer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a SQL Server.
		/// SqlServers_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData/sqlServerRegistrations/{sqlServerRegistrationName}/sqlServers/{sqlServerName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="sqlServerRegistrationName">Name of the SQL Server registration.</param>
		/// <param name="sqlServerName">Name of the SQL Server.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <param name="requestBody">The SQL Server to be created or updated.</param>
		/// <returns>Successfully updated the SQL Server.</returns>
		public async Task<SqlServer> SqlServers_CreateOrUpdateAsync(string resourceGroupName, string sqlServerRegistrationName, string sqlServerName, string subscriptionId, string api_version, SqlServer requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AzureData/sqlServerRegistrations/"+ (sqlServerRegistrationName==null? "" : System.Uri.EscapeDataString(sqlServerRegistrationName))+"/sqlServers/"+ (sqlServerName==null? "" : System.Uri.EscapeDataString(sqlServerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SqlServer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a SQL Server.
		/// SqlServers_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData/sqlServerRegistrations/{sqlServerRegistrationName}/sqlServers/{sqlServerName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="sqlServerRegistrationName">Name of the SQL Server registration.</param>
		/// <param name="sqlServerName">Name of the SQL Server.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <returns>Successfully deleted the SQL Server.</returns>
		public async Task SqlServers_DeleteAsync(string resourceGroupName, string sqlServerRegistrationName, string sqlServerName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AzureData/sqlServerRegistrations/"+ (sqlServerRegistrationName==null? "" : System.Uri.EscapeDataString(sqlServerRegistrationName))+"/sqlServers/"+ (sqlServerName==null? "" : System.Uri.EscapeDataString(sqlServerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
