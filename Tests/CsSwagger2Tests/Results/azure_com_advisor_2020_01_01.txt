//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// ARM error response body.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ARMErrorResponseBody
	{
		
		/// <summary>
		/// Gets or sets the string that can be used to programmatically identify the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Gets or sets the string that describes the error in detail and provides debugging information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArmErrorResponse
	{
		
		/// <summary>
		/// ARM error response body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ARMErrorResponseBody Error { get; set; }
	}
	
	/// <summary>
	/// The Advisor configuration data structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConfigData
	{
		
		/// <summary>
		/// Configuration data properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ConfigDataProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Configuration data properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConfigDataProperties
	{
		
		/// <summary>
		/// Advisor digest configuration. Valid only for subscriptions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digests")]
		public DigestConfig[] Digests { get; set; }
		
		/// <summary>
		/// Exclude the resource from Advisor evaluations. Valid values: False (default) or True.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exclude")]
		public System.Nullable<System.Boolean> Exclude { get; set; }
		
		/// <summary>
		/// Minimum percentage threshold for Advisor low CPU utilization evaluation. Valid only for subscriptions. Valid values: 5 (default), 10, 15 or 20.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lowCpuThreshold")]
		public System.Nullable<ConfigDataPropertiesLowCpuThreshold> LowCpuThreshold { get; set; }
	}
	
	/// <summary>
	/// Advisor Digest configuration entity
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DigestConfig
	{
		
		/// <summary>
		/// Action group resource id used by digest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionGroupResourceId")]
		public string ActionGroupResourceId { get; set; }
		
		/// <summary>
		/// Categories to send digest for. If categories are not provided, then digest will be sent for all categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public string[] Categories { get; set; }
		
		/// <summary>
		/// Frequency that digest will be triggered, in days. Value must be between 7 and 30 days inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public System.Nullable<System.Int32> Frequency { get; set; }
		
		/// <summary>
		/// Language for digest content body. Value must be ISO 639-1 code for one of Azure portal supported languages. Otherwise, it will be converted into one. Default value is English (en).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// Name of digest configuration. Value is case-insensitive and must be unique within a subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// State of digest configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<DigestConfigState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DigestConfigState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ConfigDataPropertiesLowCpuThreshold
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
		_15 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
		_20 = 3,
	}
	
	/// <summary>
	/// The list of Advisor configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConfigurationListResult
	{
		
		/// <summary>
		/// The link used to get the next page of configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ConfigData[] Value { get; set; }
	}
	
	/// <summary>
	/// The metadata entity contract.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetadataEntity
	{
		
		/// <summary>
		/// The resource Id of the metadata entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the metadata entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The metadata entity properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MetadataEntityProperties Properties { get; set; }
		
		/// <summary>
		/// The type of the metadata entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The metadata entity properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetadataEntityProperties
	{
		
		/// <summary>
		/// The list of scenarios applicable to this metadata entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicableScenarios")]
		public string[] ApplicableScenarios { get; set; }
		
		/// <summary>
		/// The list of keys on which this entity depends on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependsOn")]
		public string[] DependsOn { get; set; }
		
		/// <summary>
		/// The display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The list of supported values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedValues")]
		public MetadataSupportedValueDetail[] SupportedValues { get; set; }
	}
	
	/// <summary>
	/// The metadata supported value detail.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetadataSupportedValueDetail
	{
		
		/// <summary>
		/// The display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The list of metadata entities
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetadataEntityListResult
	{
		
		/// <summary>
		/// The link used to get the next page of metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of metadata entities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MetadataEntity[] Value { get; set; }
	}
	
	/// <summary>
	/// The operation supported by Advisor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDisplayInfo
	{
		
		/// <summary>
		/// The description of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The action that users can perform, based on their permission level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Service provider: Microsoft Advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Resource on which the operation is performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// The operation supported by Advisor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationEntity
	{
		
		/// <summary>
		/// The operation supported by Advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplayInfo Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The list of Advisor operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationEntityListResult
	{
		
		/// <summary>
		/// The link used to get the next page of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public OperationEntity[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of the recommendation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecommendationProperties
	{
		
		/// <summary>
		/// The category of the recommendation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<RecommendationPropertiesCategory> Category { get; set; }
		
		/// <summary>
		/// Extended properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extendedProperties")]
		public System.Collections.Generic.Dictionary<string, string> ExtendedProperties { get; set; }
		
		/// <summary>
		/// The business impact of the recommendation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impact")]
		public System.Nullable<RecommendationPropertiesImpact> Impact { get; set; }
		
		/// <summary>
		/// The resource type identified by Advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impactedField")]
		public string ImpactedField { get; set; }
		
		/// <summary>
		/// The resource identified by Advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impactedValue")]
		public string ImpactedValue { get; set; }
		
		/// <summary>
		/// The most recent time that Advisor checked the validity of the recommendation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		/// <summary>
		/// The recommendation metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The recommendation-type GUID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendationTypeId")]
		public string RecommendationTypeId { get; set; }
		
		/// <summary>
		/// The potential risk of not implementing the recommendation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="risk")]
		public System.Nullable<RecommendationPropertiesRisk> Risk { get; set; }
		
		/// <summary>
		/// A summary of the recommendation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortDescription")]
		public ShortDescription ShortDescription { get; set; }
		
		/// <summary>
		/// The list of snoozed and dismissed rules for the recommendation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suppressionIds")]
		public string[] SuppressionIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RecommendationPropertiesCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HighAvailability = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Security = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Performance = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cost = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OperationalExcellence = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RecommendationPropertiesImpact
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		High = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Medium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Low = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RecommendationPropertiesRisk
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Warning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 2,
	}
	
	/// <summary>
	/// A summary of the recommendation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ShortDescription
	{
		
		/// <summary>
		/// The issue or opportunity identified by the recommendation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="problem")]
		public string Problem { get; set; }
		
		/// <summary>
		/// The remediation action suggested by the recommendation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="solution")]
		public string Solution { get; set; }
	}
	
	/// <summary>
	/// An Azure resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// The resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Advisor Recommendation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceRecommendationBase
	{
		
		/// <summary>
		/// The properties of the recommendation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RecommendationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The list of Advisor recommendations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceRecommendationBaseListResult
	{
		
		/// <summary>
		/// The link used to get the next page of recommendations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of recommendations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ResourceRecommendationBase[] Value { get; set; }
	}
	
	/// <summary>
	/// The details of the snoozed or dismissed rule; for example, the duration, name, and GUID associated with the rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SuppressionContract
	{
		
		/// <summary>
		/// The properties of the suppression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SuppressionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of the suppression.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SuppressionProperties
	{
		
		/// <summary>
		/// The GUID of the suppression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suppressionId")]
		public string SuppressionId { get; set; }
		
		/// <summary>
		/// The duration for which the suppression is valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public string Ttl { get; set; }
	}
	
	/// <summary>
	/// The list of Advisor suppressions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SuppressionContractListResult
	{
		
		/// <summary>
		/// The link used to get the next page of suppressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of suppressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SuppressionContract[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets the list of metadata entities.
		/// RecommendationMetadata_List providers/Microsoft.Advisor/metadata
		/// </summary>
		/// <param name="api_version">The version of the API to be used with the client request.</param>
		/// <returns>OK. Successfully retrieved metadata entities</returns>
		public async Task<MetadataEntityListResult> RecommendationMetadata_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Advisor/metadata?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MetadataEntityListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the metadata entity.
		/// RecommendationMetadata_Get providers/Microsoft.Advisor/metadata/{name}
		/// </summary>
		/// <param name="name">Name of metadata entity.</param>
		/// <param name="api_version">The version of the API to be used with the client request.</param>
		/// <returns>OK. Successfully retrieved metadata entities</returns>
		public async Task<MetadataEntity> RecommendationMetadata_GetAsync(string name, string api_version)
		{
			var requestUri = "providers/Microsoft.Advisor/metadata/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MetadataEntity>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the available Advisor REST API operations.
		/// Operations_List providers/Microsoft.Advisor/operations
		/// </summary>
		/// <param name="api_version">The version of the API to be used with the client request.</param>
		/// <returns>OK. Successfully retrieved operation list.</returns>
		public async Task<OperationEntityListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Advisor/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationEntityListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve Azure Advisor configurations.
		/// Retrieve Azure Advisor configurations and also retrieve configurations of contained resource groups.
		/// Configurations_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.Advisor/configurations
		/// </summary>
		/// <param name="api_version">The version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">The Azure subscription ID.</param>
		/// <returns>OK. Successfully retrieved zero or more configurations.</returns>
		public async Task<ConfigurationListResult> Configurations_ListBySubscriptionAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Advisor/configurations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConfigurationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create/Overwrite Azure Advisor configuration.
		/// Create/Overwrite Azure Advisor configuration and also delete all configurations of contained resource groups.
		/// Configurations_CreateInSubscription subscriptions/{subscriptionId}/providers/Microsoft.Advisor/configurations/{configurationName}
		/// </summary>
		/// <param name="api_version">The version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">The Azure subscription ID.</param>
		/// <param name="configurationName">Advisor configuration name. Value must be 'default'</param>
		/// <param name="requestBody">The Azure Advisor configuration data structure.</param>
		/// <returns>Successfully created/overwrote configuration.</returns>
		public async Task<ConfigData> Configurations_CreateInSubscriptionAsync(string api_version, string subscriptionId, Configurations_CreateInSubscriptionConfigurationName configurationName, ConfigData requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Advisor/configurations/"+configurationName+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConfigData>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Initiates the recommendation generation or computation process for a subscription. This operation is asynchronous. The generated recommendations are stored in a cache in the Advisor service.
		/// Recommendations_Generate subscriptions/{subscriptionId}/providers/Microsoft.Advisor/generateRecommendations
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription ID.</param>
		/// <param name="api_version">The version of the API to be used with the client request.</param>
		public async Task Recommendations_GenerateAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Advisor/generateRecommendations&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the status of the recommendation computation or generation process. Invoke this API after calling the generation recommendation. The URI of this API is returned in the Location field of the response header.
		/// Recommendations_GetGenerateStatus subscriptions/{subscriptionId}/providers/Microsoft.Advisor/generateRecommendations/{operationId}
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription ID.</param>
		/// <param name="operationId">The operation ID, which can be found from the Location field in the generate recommendation response header.</param>
		/// <param name="api_version">The version of the API to be used with the client request.</param>
		public async Task Recommendations_GetGenerateStatusAsync(string subscriptionId, string operationId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Advisor/generateRecommendations/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Obtains cached recommendations for a subscription. The recommendations are generated or computed by invoking generateRecommendations.
		/// Recommendations_List subscriptions/{subscriptionId}/providers/Microsoft.Advisor/recommendations
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription ID.</param>
		/// <param name="api_version">The version of the API to be used with the client request.</param>
		/// <param name="filter">The filter to apply to the recommendations.</param>
		/// <param name="top">The number of recommendations per page if a paged version of this API is being used.</param>
		/// <param name="skipToken">The page-continuation token to use with a paged version of this API.</param>
		/// <returns>OK. Successfully obtained cached recommendations.</returns>
		public async Task<ResourceRecommendationBaseListResult> Recommendations_ListAsync(string subscriptionId, string api_version, string filter, int top, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Advisor/recommendations&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResourceRecommendationBaseListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of snoozed or dismissed suppressions for a subscription. The snoozed or dismissed attribute of a recommendation is referred to as a suppression.
		/// Suppressions_List subscriptions/{subscriptionId}/providers/Microsoft.Advisor/suppressions
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription ID.</param>
		/// <param name="api_version">The version of the API to be used with the client request.</param>
		/// <param name="top">The number of suppressions per page if a paged version of this API is being used.</param>
		/// <param name="skipToken">The page-continuation token to use with a paged version of this API.</param>
		/// <returns>OK. Successfully got all suppressions in a subscription.</returns>
		public async Task<SuppressionContractListResult> Suppressions_ListAsync(string subscriptionId, string api_version, int top, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Advisor/suppressions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SuppressionContractListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve Azure Advisor configurations.
		/// Configurations_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Advisor/configurations
		/// </summary>
		/// <param name="api_version">The version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">The Azure subscription ID.</param>
		/// <param name="resourceGroup">The name of the Azure resource group.</param>
		/// <returns>OK. Successfully retrieved zero or more configurations.</returns>
		public async Task<ConfigurationListResult> Configurations_ListByResourceGroupAsync(string api_version, string subscriptionId, string resourceGroup)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Advisor/configurations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConfigurationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create/Overwrite Azure Advisor configuration.
		/// Configurations_CreateInResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Advisor/configurations/{configurationName}
		/// </summary>
		/// <param name="api_version">The version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">The Azure subscription ID.</param>
		/// <param name="configurationName">Advisor configuration name. Value must be 'default'</param>
		/// <param name="resourceGroup">The name of the Azure resource group.</param>
		/// <param name="requestBody">The Azure Advisor configuration data structure.</param>
		/// <returns>Successfully created/overwrote configuration.</returns>
		public async Task<ConfigData> Configurations_CreateInResourceGroupAsync(string api_version, string subscriptionId, Configurations_CreateInResourceGroupConfigurationName configurationName, string resourceGroup, ConfigData requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Advisor/configurations/"+configurationName+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConfigData>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Obtains details of a cached recommendation.
		/// Recommendations_Get {resourceUri}/providers/Microsoft.Advisor/recommendations/{recommendationId}
		/// </summary>
		/// <param name="resourceUri">The fully qualified Azure Resource Manager identifier of the resource to which the recommendation applies.</param>
		/// <param name="recommendationId">The recommendation ID.</param>
		/// <param name="api_version">The version of the API to be used with the client request.</param>
		/// <returns>OK. Successfully got recommendation detail.</returns>
		public async Task<ResourceRecommendationBase> Recommendations_GetAsync(string resourceUri, string recommendationId, string api_version)
		{
			var requestUri = ""+ (resourceUri==null? "" : System.Uri.EscapeDataString(resourceUri))+"/providers/Microsoft.Advisor/recommendations/"+ (recommendationId==null? "" : System.Uri.EscapeDataString(recommendationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResourceRecommendationBase>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Obtains the details of a suppression.
		/// Suppressions_Get {resourceUri}/providers/Microsoft.Advisor/recommendations/{recommendationId}/suppressions/{name}
		/// </summary>
		/// <param name="resourceUri">The fully qualified Azure Resource Manager identifier of the resource to which the recommendation applies.</param>
		/// <param name="recommendationId">The recommendation ID.</param>
		/// <param name="name">The name of the suppression.</param>
		/// <param name="api_version">The version of the API to be used with the client request.</param>
		/// <returns>OK. Successfully got suppression detail.</returns>
		public async Task<SuppressionContract> Suppressions_GetAsync(string resourceUri, string recommendationId, string name, string api_version)
		{
			var requestUri = ""+ (resourceUri==null? "" : System.Uri.EscapeDataString(resourceUri))+"/providers/Microsoft.Advisor/recommendations/"+ (recommendationId==null? "" : System.Uri.EscapeDataString(recommendationId))+"/suppressions/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SuppressionContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables the snoozed or dismissed attribute of a recommendation. The snoozed or dismissed attribute is referred to as a suppression. Use this API to create or update the snoozed or dismissed status of a recommendation.
		/// Suppressions_Create {resourceUri}/providers/Microsoft.Advisor/recommendations/{recommendationId}/suppressions/{name}
		/// </summary>
		/// <param name="resourceUri">The fully qualified Azure Resource Manager identifier of the resource to which the recommendation applies.</param>
		/// <param name="recommendationId">The recommendation ID.</param>
		/// <param name="name">The name of the suppression.</param>
		/// <param name="api_version">The version of the API to be used with the client request.</param>
		/// <param name="requestBody">The snoozed or dismissed attribute; for example, the snooze duration.</param>
		/// <returns>OK. Successfully created suppression.</returns>
		public async Task<SuppressionContract> Suppressions_CreateAsync(string resourceUri, string recommendationId, string name, string api_version, SuppressionContract requestBody)
		{
			var requestUri = ""+ (resourceUri==null? "" : System.Uri.EscapeDataString(resourceUri))+"/providers/Microsoft.Advisor/recommendations/"+ (recommendationId==null? "" : System.Uri.EscapeDataString(recommendationId))+"/suppressions/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SuppressionContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables the activation of a snoozed or dismissed recommendation. The snoozed or dismissed attribute of a recommendation is referred to as a suppression.
		/// Suppressions_Delete {resourceUri}/providers/Microsoft.Advisor/recommendations/{recommendationId}/suppressions/{name}
		/// </summary>
		/// <param name="resourceUri">The fully qualified Azure Resource Manager identifier of the resource to which the recommendation applies.</param>
		/// <param name="recommendationId">The recommendation ID.</param>
		/// <param name="name">The name of the suppression.</param>
		/// <param name="api_version">The version of the API to be used with the client request.</param>
		public async Task Suppressions_DeleteAsync(string resourceUri, string recommendationId, string name, string api_version)
		{
			var requestUri = ""+ (resourceUri==null? "" : System.Uri.EscapeDataString(resourceUri))+"/providers/Microsoft.Advisor/recommendations/"+ (recommendationId==null? "" : System.Uri.EscapeDataString(recommendationId))+"/suppressions/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Configurations_CreateInSubscriptionConfigurationName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
	
	public enum Configurations_CreateInResourceGroupConfigurationName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
