//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiTokenStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="expiresInMillis")]
		public System.Nullable<System.Int64> ExpiresInMillis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remainingCalls")]
		public System.Nullable<System.Int64> RemainingCalls { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resetsInMillis")]
		public System.Nullable<System.Int64> ResetsInMillis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalRequests")]
		public System.Nullable<System.Int64> TotalRequests { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valid")]
		public System.Nullable<System.Boolean> Valid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AudioFile
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributionText")]
		public string AttributionText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributionUrl")]
		public string AttributionUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="audioType")]
		public string AudioType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commentCount")]
		public System.Nullable<System.Int32> CommentCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateOnly> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Double> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileUrl")]
		public string FileUrl { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voteAverage")]
		public System.Nullable<System.Single> VoteAverage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voteCount")]
		public System.Nullable<System.Int32> VoteCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voteWeightedAverage")]
		public System.Nullable<System.Single> VoteWeightedAverage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AudioType
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AuthenticationToken
	{
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userSignature")]
		public string UserSignature { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Bigram
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gram1")]
		public string Gram1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gram2")]
		public string Gram2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mi")]
		public System.Nullable<System.Double> Mi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wlmi")]
		public System.Nullable<System.Double> Wlmi { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Category
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Citation
	{
		
		[System.Runtime.Serialization.DataMember(Name="cite")]
		public string Cite { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContentProvider
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Definition
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributionText")]
		public string AttributionText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributionUrl")]
		public string AttributionUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="citations")]
		public Citation[] Citations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exampleUses")]
		public ExampleUsage[] ExampleUses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="extendedText")]
		public string ExtendedText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public Label[] Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public Note[] Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partOfSpeech")]
		public string PartOfSpeech { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relatedWords")]
		public Related[] RelatedWords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Single> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seqString")]
		public string SeqString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sequence")]
		public string Sequence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceDictionary")]
		public string SourceDictionary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="textProns")]
		public TextPron[] TextProns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExampleUsage
	{
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Label
	{
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Note
	{
		
		[System.Runtime.Serialization.DataMember(Name="appliesTo")]
		public string[] AppliesTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noteType")]
		public string NoteType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pos")]
		public System.Nullable<System.Int32> Pos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Related
	{
		
		[System.Runtime.Serialization.DataMember(Name="gram")]
		public string Gram { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label1")]
		public string Label1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label2")]
		public string Label2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label3")]
		public string Label3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label4")]
		public string Label4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationshipType")]
		public string RelationshipType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="words")]
		public string[] Words { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TextPron
	{
		
		[System.Runtime.Serialization.DataMember(Name="raw")]
		public string Raw { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rawType")]
		public string RawType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seq")]
		public System.Nullable<System.Int32> Seq { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DefinitionSearchResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Definition[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Example
	{
		
		[System.Runtime.Serialization.DataMember(Name="documentId")]
		public System.Nullable<System.Int64> DocumentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exampleId")]
		public System.Nullable<System.Int64> ExampleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public ContentProvider Provider { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public System.Nullable<System.Single> Rating { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="score")]
		public ScoredWord Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sentence")]
		public Sentence Sentence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExampleSearchResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="examples")]
		public Example[] Examples { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="facets")]
		public Facet[] Facets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Facet
	{
		
		[System.Runtime.Serialization.DataMember(Name="facetValues")]
		public FacetValue[] FacetValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FacetValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Frequency
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FrequencySummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public Frequency[] Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frequencyString")]
		public string FrequencyString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int64> TotalCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unknownYearCount")]
		public System.Nullable<System.Int32> UnknownYearCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PartOfSpeech
	{
		
		[System.Runtime.Serialization.DataMember(Name="allCategories")]
		public Category[] AllCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roots")]
		public Root[] Roots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageAbbr")]
		public string[] StorageAbbr { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Root
	{
		
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScoredWord
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseWordScore")]
		public System.Nullable<System.Double> BaseWordScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="docTermCount")]
		public System.Nullable<System.Int32> DocTermCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lemma")]
		public string Lemma { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partOfSpeech")]
		public string PartOfSpeech { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Int32> Position { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Single> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sentenceId")]
		public System.Nullable<System.Int64> SentenceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopword")]
		public System.Nullable<System.Boolean> Stopword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wordType")]
		public string WordType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sentence
	{
		
		[System.Runtime.Serialization.DataMember(Name="display")]
		public string Display { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentMetadataId")]
		public System.Nullable<System.Int64> DocumentMetadataId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasScoredWords")]
		public System.Nullable<System.Boolean> HasScoredWords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public System.Nullable<System.Int32> Rating { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scoredWords")]
		public ScoredWord[] ScoredWords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SimpleDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partOfSpeech")]
		public string PartOfSpeech { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SimpleExample
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StringValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Syllable
	{
		
		[System.Runtime.Serialization.DataMember(Name="seq")]
		public System.Nullable<System.Int32> Seq { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="faceBookId")]
		public string FaceBookId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WordList
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateOnly> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastActivityAt")]
		public System.Nullable<System.DateOnly> LastActivityAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberWordsInList")]
		public System.Nullable<System.Int64> NumberWordsInList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permalink")]
		public string Permalink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateOnly> UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WordListWord
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateOnly> CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberCommentsOnWord")]
		public System.Nullable<System.Int64> NumberCommentsOnWord { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberLists")]
		public System.Nullable<System.Int64> NumberLists { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WordObject
	{
		
		[System.Runtime.Serialization.DataMember(Name="canonicalForm")]
		public string CanonicalForm { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originalWord")]
		public string OriginalWord { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suggestions")]
		public string[] Suggestions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vulgar")]
		public string Vulgar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WordOfTheDay
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentProvider")]
		public ContentProvider ContentProvider { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateOnly> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="definitions")]
		public SimpleDefinition[] Definitions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="examples")]
		public SimpleExample[] Examples { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="htmlExtra")]
		public string HtmlExtra { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public string ParentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publishDate")]
		public System.Nullable<System.DateOnly> PublishDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WordSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lexicality")]
		public System.Nullable<System.Double> Lexicality { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WordSearchResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="searchResults")]
		public WordSearchResult[] SearchResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns usage statistics for the API account.
		/// GetApiTokenStatus account.json/apiTokenStatus
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GetApiTokenStatusAsync()
		{
			var requestUri = "account.json/apiTokenStatus";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Authenticates a User
		/// Authenticate account.json/authenticate/{username}
		/// </summary>
		/// <param name="username">A confirmed Wordnik username</param>
		/// <param name="password">The user's password</param>
		/// <returns>No response was specified</returns>
		public async Task AuthenticateAsync(string username, string password)
		{
			var requestUri = "account.json/authenticate/"+ (username==null? "" : System.Uri.EscapeDataString(username))+"&password=" + (password==null? "" : System.Uri.EscapeDataString(password));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Authenticates a user
		/// AuthenticatePost account.json/authenticate/{username}
		/// </summary>
		/// <param name="username">A confirmed Wordnik username</param>
		/// <param name="requestBody">The user's password</param>
		/// <returns>No response was specified</returns>
		public async Task AuthenticatePostAsync(string username, string requestBody)
		{
			var requestUri = "account.json/authenticate/"+ (username==null? "" : System.Uri.EscapeDataString(username));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the logged-in User
		/// Requires a valid auth_token to be set.
		/// GetLoggedInUser account.json/user
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GetLoggedInUserAsync()
		{
			var requestUri = "account.json/user";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches WordList objects for the logged-in user.
		/// GetWordListsForLoggedInUser account.json/wordLists
		/// </summary>
		/// <param name="skip">Results to skip</param>
		/// <param name="limit">Maximum number of results to return</param>
		/// <returns>No response was specified</returns>
		public async Task GetWordListsForLoggedInUserAsync(int skip, int limit)
		{
			var requestUri = "account.json/wordLists?skip="+skip+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Given a word as a string, returns the WordObject that represents it
		/// GetWord word.json/{word}
		/// </summary>
		/// <param name="word">String value of WordObject to return</param>
		/// <param name="useCanonical">If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.</param>
		/// <param name="includeSuggestions">Return suggestions (for correct spelling, case variants, etc.)</param>
		/// <returns>No response was specified</returns>
		public async Task GetWordAsync(string word, string useCanonical, string includeSuggestions)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"&useCanonical=" + (useCanonical==null? "" : System.Uri.EscapeDataString(useCanonical))+"&includeSuggestions=" + (includeSuggestions==null? "" : System.Uri.EscapeDataString(includeSuggestions));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches audio metadata for a word.
		/// The metadata includes a time-expiring fileUrl which allows reading the audio file directly from the API.  Currently only audio pronunciations from the American Heritage Dictionary in mp3 format are supported.
		/// GetAudio word.json/{word}/audio
		/// </summary>
		/// <param name="word">Word to get audio for.</param>
		/// <param name="useCanonical">Use the canonical form of the word</param>
		/// <param name="limit">Maximum number of results to return</param>
		/// <returns>No response was specified</returns>
		public async Task GetAudioAsync(string word, string useCanonical, int limit)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/audio&useCanonical=" + (useCanonical==null? "" : System.Uri.EscapeDataString(useCanonical))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return definitions for a word
		/// GetDefinitions word.json/{word}/definitions
		/// </summary>
		/// <param name="word">Word to return definitions for</param>
		/// <param name="limit">Maximum number of results to return</param>
		/// <param name="partOfSpeech">CSV list of part-of-speech types</param>
		/// <param name="includeRelated">Return related words with definitions</param>
		/// <param name="sourceDictionaries">Source dictionary to return definitions from.  If 'all' is received, results are returned from all sources. If multiple values are received (e.g. 'century,wiktionary'), results are returned from the first specified dictionary that has definitions. If left blank, results are returned from the first dictionary that has definitions. By default, dictionaries are searched in this order: ahd, wiktionary, webster, century, wordnet</param>
		/// <param name="useCanonical">If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.</param>
		/// <param name="includeTags">Return a closed set of XML tags in response</param>
		/// <returns>No response was specified</returns>
		public async Task GetDefinitionsAsync(string word, int limit, string partOfSpeech, string includeRelated, string[] sourceDictionaries, string useCanonical, string includeTags)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/definitions&limit="+limit+"&partOfSpeech=" + (partOfSpeech==null? "" : System.Uri.EscapeDataString(partOfSpeech))+"&includeRelated=" + (includeRelated==null? "" : System.Uri.EscapeDataString(includeRelated))+"&"+string.Join("&", sourceDictionaries.Select(z => $"sourceDictionaries={System.Uri.EscapeDataString(z.ToString())}"))+"&useCanonical=" + (useCanonical==null? "" : System.Uri.EscapeDataString(useCanonical))+"&includeTags=" + (includeTags==null? "" : System.Uri.EscapeDataString(includeTags));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches etymology data
		/// GetEtymologies word.json/{word}/etymologies
		/// </summary>
		/// <param name="word">Word to return</param>
		/// <param name="useCanonical">If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.</param>
		/// <returns>No response was specified</returns>
		public async Task GetEtymologiesAsync(string word, string useCanonical)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/etymologies&useCanonical=" + (useCanonical==null? "" : System.Uri.EscapeDataString(useCanonical));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns examples for a word
		/// GetExamples word.json/{word}/examples
		/// </summary>
		/// <param name="word">Word to return examples for</param>
		/// <param name="includeDuplicates">Show duplicate examples from different sources</param>
		/// <param name="useCanonical">If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.</param>
		/// <param name="skip">Results to skip</param>
		/// <param name="limit">Maximum number of results to return</param>
		/// <returns>No response was specified</returns>
		public async Task GetExamplesAsync(string word, string includeDuplicates, string useCanonical, int skip, int limit)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/examples&includeDuplicates=" + (includeDuplicates==null? "" : System.Uri.EscapeDataString(includeDuplicates))+"&useCanonical=" + (useCanonical==null? "" : System.Uri.EscapeDataString(useCanonical))+"&skip="+skip+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns word usage over time
		/// GetWordFrequency word.json/{word}/frequency
		/// </summary>
		/// <param name="word">Word to return</param>
		/// <param name="useCanonical">If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.</param>
		/// <param name="startYear">Starting Year</param>
		/// <param name="endYear">Ending Year</param>
		/// <returns>No response was specified</returns>
		public async Task GetWordFrequencyAsync(string word, string useCanonical, int startYear, int endYear)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/frequency&useCanonical=" + (useCanonical==null? "" : System.Uri.EscapeDataString(useCanonical))+"&startYear="+startYear+"&endYear="+endYear;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns syllable information for a word
		/// GetHyphenation word.json/{word}/hyphenation
		/// </summary>
		/// <param name="word">Word to get syllables for</param>
		/// <param name="useCanonical">If true will try to return a correct word root ('cats' -> 'cat'). If false returns exactly what was requested.</param>
		/// <param name="sourceDictionary">Get from a single dictionary. Valid options: ahd, century, wiktionary, webster, and wordnet.</param>
		/// <param name="limit">Maximum number of results to return</param>
		/// <returns>No response was specified</returns>
		public async Task GetHyphenationAsync(string word, string useCanonical, string sourceDictionary, int limit)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/hyphenation&useCanonical=" + (useCanonical==null? "" : System.Uri.EscapeDataString(useCanonical))+"&sourceDictionary=" + (sourceDictionary==null? "" : System.Uri.EscapeDataString(sourceDictionary))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches bi-gram phrases for a word
		/// GetPhrases word.json/{word}/phrases
		/// </summary>
		/// <param name="word">Word to fetch phrases for</param>
		/// <param name="limit">Maximum number of results to return</param>
		/// <param name="wlmi">Minimum WLMI for the phrase</param>
		/// <param name="useCanonical">If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.</param>
		/// <returns>No response was specified</returns>
		public async Task GetPhrasesAsync(string word, int limit, int wlmi, string useCanonical)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/phrases&limit="+limit+"&wlmi="+wlmi+"&useCanonical=" + (useCanonical==null? "" : System.Uri.EscapeDataString(useCanonical));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns text pronunciations for a given word
		/// GetTextPronunciations word.json/{word}/pronunciations
		/// </summary>
		/// <param name="word">Word to get pronunciations for</param>
		/// <param name="useCanonical">If true will try to return a correct word root ('cats' -> 'cat'). If false returns exactly what was requested.</param>
		/// <param name="sourceDictionary">Get from a single dictionary</param>
		/// <param name="typeFormat">Text pronunciation type</param>
		/// <param name="limit">Maximum number of results to return</param>
		/// <returns>No response was specified</returns>
		public async Task GetTextPronunciationsAsync(string word, string useCanonical, string sourceDictionary, string typeFormat, int limit)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/pronunciations&useCanonical=" + (useCanonical==null? "" : System.Uri.EscapeDataString(useCanonical))+"&sourceDictionary=" + (sourceDictionary==null? "" : System.Uri.EscapeDataString(sourceDictionary))+"&typeFormat=" + (typeFormat==null? "" : System.Uri.EscapeDataString(typeFormat))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Given a word as a string, returns relationships from the Word Graph
		/// GetRelatedWords word.json/{word}/relatedWords
		/// </summary>
		/// <param name="word">Word to fetch relationships for</param>
		/// <param name="useCanonical">If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.</param>
		/// <param name="relationshipTypes">Limits the total results per type of relationship type</param>
		/// <param name="limitPerRelationshipType">Restrict to the supplied relationship types</param>
		/// <returns>No response was specified</returns>
		public async Task GetRelatedWordsAsync(string word, string useCanonical, string relationshipTypes, int limitPerRelationshipType)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/relatedWords&useCanonical=" + (useCanonical==null? "" : System.Uri.EscapeDataString(useCanonical))+"&relationshipTypes=" + (relationshipTypes==null? "" : System.Uri.EscapeDataString(relationshipTypes))+"&limitPerRelationshipType="+limitPerRelationshipType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a top example for a word
		/// GetTopExample word.json/{word}/topExample
		/// </summary>
		/// <param name="word">Word to fetch examples for</param>
		/// <param name="useCanonical">If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.</param>
		/// <returns>No response was specified</returns>
		public async Task GetTopExampleAsync(string word, string useCanonical)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/topExample&useCanonical=" + (useCanonical==null? "" : System.Uri.EscapeDataString(useCanonical));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches a WordList by ID
		/// GetWordListByPermalink wordList.json/{permalink}
		/// </summary>
		/// <param name="permalink">permalink of WordList to fetch</param>
		/// <returns>No response was specified</returns>
		public async Task GetWordListByPermalinkAsync(string permalink)
		{
			var requestUri = "wordList.json/"+ (permalink==null? "" : System.Uri.EscapeDataString(permalink));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing WordList
		/// UpdateWordList wordList.json/{permalink}
		/// </summary>
		/// <param name="permalink">permalink of WordList to update</param>
		/// <param name="requestBody">Updated WordList</param>
		/// <returns>No response was specified</returns>
		public async Task UpdateWordListAsync(string permalink, WordList requestBody)
		{
			var requestUri = "wordList.json/"+ (permalink==null? "" : System.Uri.EscapeDataString(permalink));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing WordList
		/// DeleteWordList wordList.json/{permalink}
		/// </summary>
		/// <param name="permalink">ID of WordList to delete</param>
		/// <returns>No response was specified</returns>
		public async Task DeleteWordListAsync(string permalink)
		{
			var requestUri = "wordList.json/"+ (permalink==null? "" : System.Uri.EscapeDataString(permalink));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes words from a WordList
		/// DeleteWordsFromWordList wordList.json/{permalink}/deleteWords
		/// </summary>
		/// <param name="permalink">permalink of WordList to use</param>
		/// <param name="requestBody">Words to remove from WordList</param>
		/// <returns>No response was specified</returns>
		public async Task DeleteWordsFromWordListAsync(string permalink, StringValue[] requestBody)
		{
			var requestUri = "wordList.json/"+ (permalink==null? "" : System.Uri.EscapeDataString(permalink))+"/deleteWords";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Fetches words in a WordList
		/// GetWordListWords wordList.json/{permalink}/words
		/// </summary>
		/// <param name="permalink">ID of WordList to use</param>
		/// <param name="sortBy">Field to sort by</param>
		/// <param name="sortOrder">Direction to sort</param>
		/// <param name="skip">Results to skip</param>
		/// <param name="limit">Maximum number of results to return</param>
		/// <returns>No response was specified</returns>
		public async Task GetWordListWordsAsync(string permalink, string sortBy, string sortOrder, int skip, int limit)
		{
			var requestUri = "wordList.json/"+ (permalink==null? "" : System.Uri.EscapeDataString(permalink))+"/words&sortBy=" + (sortBy==null? "" : System.Uri.EscapeDataString(sortBy))+"&sortOrder=" + (sortOrder==null? "" : System.Uri.EscapeDataString(sortOrder))+"&skip="+skip+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds words to a WordList
		/// AddWordsToWordList wordList.json/{permalink}/words
		/// </summary>
		/// <param name="permalink">permalink of WordList to user</param>
		/// <param name="requestBody">Array of words to add to WordList</param>
		/// <returns>No response was specified</returns>
		public async Task AddWordsToWordListAsync(string permalink, StringValue[] requestBody)
		{
			var requestUri = "wordList.json/"+ (permalink==null? "" : System.Uri.EscapeDataString(permalink))+"/words";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a WordList.
		/// CreateWordList wordLists.json
		/// </summary>
		/// <param name="requestBody">WordList to create</param>
		/// <returns>No response was specified</returns>
		public async Task CreateWordListAsync(WordList requestBody)
		{
			var requestUri = "wordLists.json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a single random WordObject
		/// GetRandomWord words.json/randomWord
		/// </summary>
		/// <param name="hasDictionaryDef">Only return words with dictionary definitions</param>
		/// <param name="includePartOfSpeech">CSV part-of-speech values to include</param>
		/// <param name="excludePartOfSpeech">CSV part-of-speech values to exclude</param>
		/// <param name="minCorpusCount">Minimum corpus frequency for terms</param>
		/// <param name="maxCorpusCount">Maximum corpus frequency for terms</param>
		/// <param name="minDictionaryCount">Minimum dictionary count</param>
		/// <param name="maxDictionaryCount">Maximum dictionary count</param>
		/// <param name="minLength">Minimum word length</param>
		/// <param name="maxLength">Maximum word length</param>
		/// <returns>No response was specified</returns>
		public async Task GetRandomWordAsync(string hasDictionaryDef, string includePartOfSpeech, string excludePartOfSpeech, int minCorpusCount, int maxCorpusCount, int minDictionaryCount, int maxDictionaryCount, int minLength, int maxLength)
		{
			var requestUri = "words.json/randomWord?hasDictionaryDef=" + (hasDictionaryDef==null? "" : System.Uri.EscapeDataString(hasDictionaryDef))+"&includePartOfSpeech=" + (includePartOfSpeech==null? "" : System.Uri.EscapeDataString(includePartOfSpeech))+"&excludePartOfSpeech=" + (excludePartOfSpeech==null? "" : System.Uri.EscapeDataString(excludePartOfSpeech))+"&minCorpusCount="+minCorpusCount+"&maxCorpusCount="+maxCorpusCount+"&minDictionaryCount="+minDictionaryCount+"&maxDictionaryCount="+maxDictionaryCount+"&minLength="+minLength+"&maxLength="+maxLength;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an array of random WordObjects
		/// GetRandomWords words.json/randomWords
		/// </summary>
		/// <param name="hasDictionaryDef">Only return words with dictionary definitions</param>
		/// <param name="includePartOfSpeech">CSV part-of-speech values to include</param>
		/// <param name="excludePartOfSpeech">CSV part-of-speech values to exclude</param>
		/// <param name="minCorpusCount">Minimum corpus frequency for terms</param>
		/// <param name="maxCorpusCount">Maximum corpus frequency for terms</param>
		/// <param name="minDictionaryCount">Minimum dictionary count</param>
		/// <param name="maxDictionaryCount">Maximum dictionary count</param>
		/// <param name="minLength">Minimum word length</param>
		/// <param name="maxLength">Maximum word length</param>
		/// <param name="sortBy">Attribute to sort by</param>
		/// <param name="sortOrder">Sort direction</param>
		/// <param name="limit">Maximum number of results to return</param>
		/// <returns>No response was specified</returns>
		public async Task GetRandomWordsAsync(string hasDictionaryDef, string includePartOfSpeech, string excludePartOfSpeech, int minCorpusCount, int maxCorpusCount, int minDictionaryCount, int maxDictionaryCount, int minLength, int maxLength, string sortBy, string sortOrder, int limit)
		{
			var requestUri = "words.json/randomWords?hasDictionaryDef=" + (hasDictionaryDef==null? "" : System.Uri.EscapeDataString(hasDictionaryDef))+"&includePartOfSpeech=" + (includePartOfSpeech==null? "" : System.Uri.EscapeDataString(includePartOfSpeech))+"&excludePartOfSpeech=" + (excludePartOfSpeech==null? "" : System.Uri.EscapeDataString(excludePartOfSpeech))+"&minCorpusCount="+minCorpusCount+"&maxCorpusCount="+maxCorpusCount+"&minDictionaryCount="+minDictionaryCount+"&maxDictionaryCount="+maxDictionaryCount+"&minLength="+minLength+"&maxLength="+maxLength+"&sortBy=" + (sortBy==null? "" : System.Uri.EscapeDataString(sortBy))+"&sortOrder=" + (sortOrder==null? "" : System.Uri.EscapeDataString(sortOrder))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reverse dictionary search
		/// ReverseDictionary words.json/reverseDictionary
		/// </summary>
		/// <param name="query">Search term</param>
		/// <param name="findSenseForWord">Restricts words and finds closest sense</param>
		/// <param name="includeSourceDictionaries">Only include these comma-delimited source dictionaries</param>
		/// <param name="excludeSourceDictionaries">Exclude these comma-delimited source dictionaries</param>
		/// <param name="includePartOfSpeech">Only include these comma-delimited parts of speech</param>
		/// <param name="excludePartOfSpeech">Exclude these comma-delimited parts of speech</param>
		/// <param name="minCorpusCount">Minimum corpus frequency for terms</param>
		/// <param name="maxCorpusCount">Maximum corpus frequency for terms</param>
		/// <param name="minLength">Minimum word length</param>
		/// <param name="maxLength">Maximum word length</param>
		/// <param name="expandTerms">Expand terms</param>
		/// <param name="includeTags">Return a closed set of XML tags in response</param>
		/// <param name="sortBy">Attribute to sort by</param>
		/// <param name="sortOrder">Sort direction</param>
		/// <param name="skip">Results to skip</param>
		/// <param name="limit">Maximum number of results to return</param>
		/// <returns>No response was specified</returns>
		public async Task ReverseDictionaryAsync(
					string query, 
					string findSenseForWord, 
					string includeSourceDictionaries, 
					string excludeSourceDictionaries, 
					string includePartOfSpeech, 
					string excludePartOfSpeech, 
					int minCorpusCount, 
					int maxCorpusCount, 
					int minLength, 
					int maxLength, 
					string expandTerms, 
					string includeTags, 
					string sortBy, 
					string sortOrder, 
					string skip, 
					int limit)
		{
			var requestUri = "words.json/reverseDictionary?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&findSenseForWord=" + (findSenseForWord==null? "" : System.Uri.EscapeDataString(findSenseForWord))+"&includeSourceDictionaries=" + (includeSourceDictionaries==null? "" : System.Uri.EscapeDataString(includeSourceDictionaries))+"&excludeSourceDictionaries=" + (excludeSourceDictionaries==null? "" : System.Uri.EscapeDataString(excludeSourceDictionaries))+"&includePartOfSpeech=" + (includePartOfSpeech==null? "" : System.Uri.EscapeDataString(includePartOfSpeech))+"&excludePartOfSpeech=" + (excludePartOfSpeech==null? "" : System.Uri.EscapeDataString(excludePartOfSpeech))+"&minCorpusCount="+minCorpusCount+"&maxCorpusCount="+maxCorpusCount+"&minLength="+minLength+"&maxLength="+maxLength+"&expandTerms=" + (expandTerms==null? "" : System.Uri.EscapeDataString(expandTerms))+"&includeTags=" + (includeTags==null? "" : System.Uri.EscapeDataString(includeTags))+"&sortBy=" + (sortBy==null? "" : System.Uri.EscapeDataString(sortBy))+"&sortOrder=" + (sortOrder==null? "" : System.Uri.EscapeDataString(sortOrder))+"&skip=" + (skip==null? "" : System.Uri.EscapeDataString(skip))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches words
		/// SearchWords words.json/search/{query}
		/// </summary>
		/// <param name="query">Search query</param>
		/// <param name="caseSensitive">Search case sensitive</param>
		/// <param name="includePartOfSpeech">Only include these comma-delimited parts of speech</param>
		/// <param name="excludePartOfSpeech">Exclude these comma-delimited parts of speech</param>
		/// <param name="minCorpusCount">Minimum corpus frequency for terms</param>
		/// <param name="maxCorpusCount">Maximum corpus frequency for terms</param>
		/// <param name="minDictionaryCount">Minimum number of dictionary entries for words returned</param>
		/// <param name="maxDictionaryCount">Maximum dictionary definition count</param>
		/// <param name="minLength">Minimum word length</param>
		/// <param name="maxLength">Maximum word length</param>
		/// <param name="skip">Results to skip</param>
		/// <param name="limit">Maximum number of results to return</param>
		/// <returns>No response was specified</returns>
		public async Task SearchWordsAsync(string query, string caseSensitive, string includePartOfSpeech, string excludePartOfSpeech, int minCorpusCount, int maxCorpusCount, int minDictionaryCount, int maxDictionaryCount, int minLength, int maxLength, int skip, int limit)
		{
			var requestUri = "words.json/search/"+ (query==null? "" : System.Uri.EscapeDataString(query))+"&caseSensitive=" + (caseSensitive==null? "" : System.Uri.EscapeDataString(caseSensitive))+"&includePartOfSpeech=" + (includePartOfSpeech==null? "" : System.Uri.EscapeDataString(includePartOfSpeech))+"&excludePartOfSpeech=" + (excludePartOfSpeech==null? "" : System.Uri.EscapeDataString(excludePartOfSpeech))+"&minCorpusCount="+minCorpusCount+"&maxCorpusCount="+maxCorpusCount+"&minDictionaryCount="+minDictionaryCount+"&maxDictionaryCount="+maxDictionaryCount+"&minLength="+minLength+"&maxLength="+maxLength+"&skip="+skip+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a specific WordOfTheDay
		/// GetWordOfTheDay words.json/wordOfTheDay
		/// </summary>
		/// <param name="date">Fetches by date in yyyy-MM-dd</param>
		/// <returns>No response was specified</returns>
		public async Task GetWordOfTheDayAsync(string date)
		{
			var requestUri = "words.json/wordOfTheDay?date=" + (date==null? "" : System.Uri.EscapeDataString(date));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
