//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// This is the response from the Attested_GetDocument operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AttestedData
	{
		
		/// <summary>
		/// This is the encoding scheme of the signature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public string Encoding { get; set; }
		
		/// <summary>
		/// This is the encoded string containing the VM ID, SKU, plan information, public key, timestamp, and nonce value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signature")]
		public string Signature { get; set; }
	}
	
	/// <summary>
	/// Compute Metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Compute
	{
		
		/// <summary>
		/// This is the name of the environment in which the VM is running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azEnvironment")]
		public string AzEnvironment { get; set; }
		
		/// <summary>
		/// This is the Azure Region in which the VM is running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// This is the name of the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// This is the offer information for the VM image. This value is only present for images deployed from the Azure Image Gallery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offer")]
		public string Offer { get; set; }
		
		/// <summary>
		/// This value indicates the type of OS the VM is running, either Linux or Windows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public string OsType { get; set; }
		
		/// <summary>
		/// This is the placement group of your Virtual Machine Scale Set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placementGroupId")]
		public string PlacementGroupId { get; set; }
		
		/// <summary>
		/// This contains the data about the plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan")]
		public PlanProperties Plan { get; set; }
		
		/// <summary>
		/// This is the fault domain in which the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platformFaultDomain")]
		public string PlatformFaultDomain { get; set; }
		
		/// <summary>
		/// This is the update domain in which the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platformUpdateDomain")]
		public string PlatformUpdateDomain { get; set; }
		
		/// <summary>
		/// This is the provider of the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// This is information about the SSH certificate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicKeys")]
		public PublicKeysProperties[] PublicKeys { get; set; }
		
		/// <summary>
		/// This is the publisher of the VM image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// This is the resource group for the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroupName")]
		public string ResourceGroupName { get; set; }
		
		/// <summary>
		/// This is the fully qualified ID for the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// This is the specific SKU for the VM image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// This contains the data about the storage disks associated with the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageProfile")]
		public StorageProfile StorageProfile { get; set; }
		
		/// <summary>
		/// This is the Azure subscription for the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		/// <summary>
		/// This is the list of tags for your VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
		
		/// <summary>
		/// This is the version of the VM image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		/// <summary>
		/// This is the unique identifier for the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmId")]
		public string VmId { get; set; }
		
		/// <summary>
		/// This is the resource name of the VMSS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmScaleSetName")]
		public string VmScaleSetName { get; set; }
		
		/// <summary>
		/// This is the size of the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmSize")]
		public string VmSize { get; set; }
		
		/// <summary>
		/// This is the availability zone of the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// This contains the data about the plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PlanProperties
	{
		
		/// <summary>
		/// This is the Plan ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// This is the product of the image from the Marketplace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public string Product { get; set; }
		
		/// <summary>
		/// This is the publisher ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
	}
	
	/// <summary>
	/// This contains the data about the public key.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PublicKeysProperties
	{
		
		/// <summary>
		/// This is the SSH public key certificate used to authenticate with the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyData")]
		public string KeyData { get; set; }
		
		/// <summary>
		/// This specifies the full path on the VM where the SSH public key is stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// This contains the data about the storage disks associated with the VM.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageProfile
	{
		
		/// <summary>
		/// Data disk information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDisks")]
		public DataDisk[] DataDisks { get; set; }
		
		/// <summary>
		/// This contains information about the OS image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageReference")]
		public ImageReference ImageReference { get; set; }
		
		/// <summary>
		/// This contains information about the OS disk used by the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osDisk")]
		public OsDisk OsDisk { get; set; }
	}
	
	/// <summary>
	/// This contains information about the data disk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataDisk
	{
		
		/// <summary>
		/// This is the caching requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caching")]
		public string Caching { get; set; }
		
		/// <summary>
		/// This is information about how the VM was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createOption")]
		public string CreateOption { get; set; }
		
		/// <summary>
		/// This is the size of the disk in GB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGB")]
		public string DiskSizeGB { get; set; }
		
		/// <summary>
		/// This is the source user image virtual hard disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public DiskImage Image { get; set; }
		
		/// <summary>
		/// This is the logical unit number of the disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lun")]
		public string Lun { get; set; }
		
		/// <summary>
		/// This is managed disk parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedDisk")]
		public ManagedDisk ManagedDisk { get; set; }
		
		/// <summary>
		/// This is the disk name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// This is the virtual hard disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vhd")]
		public VirtualHardDisk Vhd { get; set; }
		
		/// <summary>
		/// This specifies whether or not writeAccelerator is enabled on the disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeAcceleratorEnabled")]
		public string WriteAcceleratorEnabled { get; set; }
	}
	
	/// <summary>
	/// This is the source user image virtual hard disk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiskImage
	{
		
		/// <summary>
		/// This is the uri of the virtual hard disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// This is managed disk parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedDisk
	{
		
		/// <summary>
		/// This is the resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// This is the storage account type for the managed disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountType")]
		public string StorageAccountType { get; set; }
	}
	
	/// <summary>
	/// This is the virtual hard disk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualHardDisk
	{
		
		/// <summary>
		/// This is the uri of the virtual hard disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// This contains information about the OS image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageReference
	{
		
		/// <summary>
		/// This is the resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// This is the offer of the platform or marketplace image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offer")]
		public string Offer { get; set; }
		
		/// <summary>
		/// This is the image publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// This is the image SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// This is the version of the platform or marketplace image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// This contains information about the OS disk used by the VM.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OsDisk
	{
		
		/// <summary>
		/// This is the caching requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caching")]
		public string Caching { get; set; }
		
		/// <summary>
		/// This is information about how the VM was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createOption")]
		public string CreateOption { get; set; }
		
		/// <summary>
		/// This is the ephemeral disk settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffDiskSettings")]
		public DiffDiskSettings DiffDiskSettings { get; set; }
		
		/// <summary>
		/// This is the size of the disk in GB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGB")]
		public string DiskSizeGB { get; set; }
		
		/// <summary>
		/// This is the encryption settings for the disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionSettings")]
		public EncryptionSettings EncryptionSettings { get; set; }
		
		/// <summary>
		/// This is the source user image virtual hard disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public DiskImage Image { get; set; }
		
		/// <summary>
		/// This is managed disk parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedDisk")]
		public ManagedDisk ManagedDisk { get; set; }
		
		/// <summary>
		/// This is the disk name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// This is the type of OS included in the disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public string OsType { get; set; }
		
		/// <summary>
		/// This is the virtual hard disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vhd")]
		public VirtualHardDisk Vhd { get; set; }
		
		/// <summary>
		/// This specifies whether or not writeAccelerator is enabled on the disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeAcceleratorEnabled")]
		public string WriteAcceleratorEnabled { get; set; }
	}
	
	/// <summary>
	/// This is the ephemeral disk settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiffDiskSettings
	{
		
		/// <summary>
		/// This specifies the ephemeral disk settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="option")]
		public string Option { get; set; }
	}
	
	/// <summary>
	/// This is the encryption settings for the disk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EncryptionSettings
	{
		
		/// <summary>
		/// This specifies whether or not disk encryption is enabled on the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public string Enabled { get; set; }
	}
	
	/// <summary>
	/// This is the response from an operation in the case an error occurs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
	}
	
	/// <summary>
	/// This is the response from an Identity operation in the case an error occurs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IdentityErrorResponse
	{
		
		/// <summary>
		/// Error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public System.Nullable<IdentityErrorResponseError> Error { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error_description")]
		public string Error_description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IdentityErrorResponseError
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invalid_request = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unauthorized_client = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		access_denied = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unsupported_response_type = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invalid_scope = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		server_error = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		service_unavailable = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bad_request = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		forbidden = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		not_found = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		method_not_allowed = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		too_many_requests = 11,
	}
	
	/// <summary>
	/// This is the response from the Identity_GetInfo operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IdentityInfoResponse
	{
		
		/// <summary>
		/// This is the AAD tenantId of the identity of the system assigned managed identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
	}
	
	/// <summary>
	/// This is the response from the Identity_GetToken operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IdentityTokenResponse
	{
		
		/// <summary>
		/// This is the requested access token. The app can use this token to authenticate to the sink resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token { get; set; }
		
		/// <summary>
		/// This is the client_id specified in the request, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		/// <summary>
		/// This is how long the access token is valid (in seconds).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_in")]
		public string Expires_in { get; set; }
		
		/// <summary>
		/// This is the time when the access token expires. The date is represented as the number of seconds from 1970-01-01T0:0:0Z UTC until the expiration time. This value is used to determine the lifetime of cached tokens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_on")]
		public string Expires_on { get; set; }
		
		/// <summary>
		/// This indicates the extended lifetime of the token (in seconds).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ext_expires_in")]
		public string Ext_expires_in { get; set; }
		
		/// <summary>
		/// This is the msi_res_id specified in the request, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="msi_res_id")]
		public string Msi_res_id { get; set; }
		
		/// <summary>
		/// This is the time when the access token becomes effective. The date is represented as the number of seconds from 1970-01-01T0:0:0Z UTC until the expiration time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="not_before")]
		public string Not_before { get; set; }
		
		/// <summary>
		/// This is the object_id specified in the request, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object_id")]
		public string Object_id { get; set; }
		
		/// <summary>
		/// This is the app ID URI of the sink resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// This indicates the token type value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token_type")]
		public string Token_type { get; set; }
	}
	
	/// <summary>
	/// This is the response from the Instance_GetMetadata operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Instance
	{
		
		/// <summary>
		/// Compute Metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compute")]
		public Compute Compute { get; set; }
		
		/// <summary>
		/// Network Metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public Network Network { get; set; }
	}
	
	/// <summary>
	/// Network Metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Network
	{
		
		/// <summary>
		/// This contains data about the network interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interface")]
		public NetworkInterface[] Interface { get; set; }
	}
	
	/// <summary>
	/// This contains data about the network interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkInterface
	{
		
		/// <summary>
		/// This contains the IPv4 address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipv4")]
		public NetworkInterfaceIpv4 Ipv4 { get; set; }
		
		/// <summary>
		/// This contains the IPv6 address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipv6")]
		public NetworkInterfaceIpv6 Ipv6 { get; set; }
		
		/// <summary>
		/// This is the MAC address of the interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="macAddress")]
		public string MacAddress { get; set; }
	}
	
	public class NetworkInterfaceIpv4
	{
		
		/// <summary>
		/// This is the IP address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public Ipv4Properties[] IpAddress { get; set; }
		
		/// <summary>
		/// This is the subnet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnet")]
		public SubnetProperties[] Subnet { get; set; }
	}
	
	/// <summary>
	/// This contains the IPv4 properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Ipv4Properties
	{
		
		/// <summary>
		/// This is the private IP address assigned to the interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateIpAddress")]
		public string PrivateIpAddress { get; set; }
		
		/// <summary>
		/// This is the public IP address assigned to the interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicIpAddress")]
		public string PublicIpAddress { get; set; }
	}
	
	/// <summary>
	/// This contains the properties of the subnet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubnetProperties
	{
		
		/// <summary>
		/// This is the address range of the subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// This is the prefix of the subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
	}
	
	public class NetworkInterfaceIpv6
	{
		
		/// <summary>
		/// This is the IP address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public Ipv6Properties[] IpAddress { get; set; }
	}
	
	/// <summary>
	/// This contains the IPv6 properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Ipv6Properties
	{
		
		/// <summary>
		/// This is the private IPv6 address assigned to the interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateIpAddress")]
		public string PrivateIpAddress { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get Attested Data for the Virtual Machine.
		/// Attested_GetDocument attested/document
		/// </summary>
		/// <param name="api_version">This is the API version to use.</param>
		/// <param name="nonce">This is a string of up to 32 random alphanumeric characters.</param>
		/// <returns>OK</returns>
		public async Task<AttestedData> Attested_GetDocumentAsync(Attested_GetDocumentApi_version api_version, string nonce)
		{
			var requestUri = "attested/document?api-version=" + api_version+"&nonce=" + (nonce==null? "" : System.Uri.EscapeDataString(nonce));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AttestedData>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about AAD Metadata
		/// Identity_GetInfo identity/info
		/// </summary>
		/// <param name="api_version">This is the API version to use.</param>
		/// <returns>Successful operation</returns>
		public async Task<IdentityInfoResponse> Identity_GetInfoAsync(Identity_GetInfoApi_version api_version)
		{
			var requestUri = "identity/info?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<IdentityInfoResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Token from Azure AD
		/// Identity_GetToken identity/oauth2/token
		/// </summary>
		/// <param name="resource">This is the urlencoded identifier URI of the sink resource for the requested Azure AD token. The resulting token contains the corresponding aud for this resource.</param>
		/// <param name="api_version">This is the API version to use.</param>
		/// <param name="client_id">This identifies, by Azure AD client id, a specific explicit identity to use when authenticating to Azure AD. Mutually exclusive with object_id and msi_res_id.</param>
		/// <param name="object_id">This identifies, by Azure AD object id, a specific explicit identity to use when authenticating to Azure AD. Mutually exclusive with client_id and msi_res_id.</param>
		/// <param name="msi_res_id">This identifies, by urlencoded ARM resource id, a specific explicit identity to use when authenticating to Azure AD. Mutually exclusive with client_id and object_id.</param>
		/// <param name="authority">This indicates the authority to request AAD tokens from. Defaults to the known authority of the identity to be used.</param>
		/// <param name="bypass_cache">If provided, the value must be 'true'. This indicates to the server that the token must be retrieved from Azure AD and cannot be retrieved from an internal cache.</param>
		/// <returns>Successful operation</returns>
		public async Task<IdentityTokenResponse> Identity_GetTokenAsync(string resource, Identity_GetTokenApi_version api_version, string client_id, string object_id, string msi_res_id, string authority, Identity_GetTokenBypass_cache bypass_cache)
		{
			var requestUri = "identity/oauth2/token?resource=" + (resource==null? "" : System.Uri.EscapeDataString(resource))+"&api-version=" + api_version+"&client_id=" + (client_id==null? "" : System.Uri.EscapeDataString(client_id))+"&object_id=" + (object_id==null? "" : System.Uri.EscapeDataString(object_id))+"&msi_res_id=" + (msi_res_id==null? "" : System.Uri.EscapeDataString(msi_res_id))+"&authority=" + (authority==null? "" : System.Uri.EscapeDataString(authority))+"&bypass_cache=" + bypass_cache;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<IdentityTokenResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Instance Metadata for the Virtual Machine.
		/// Instances_GetMetadata instance
		/// </summary>
		/// <param name="api_version">This is the API version to use.</param>
		/// <returns>OK</returns>
		public async Task<Instance> Instances_GetMetadataAsync(Instances_GetMetadataApi_version api_version)
		{
			var requestUri = "instance?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Instance>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Attested_GetDocumentApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-10-01")]
		_2018Minus10Minus01 = 0,
	}
	
	public enum Attested_GetDocumentMetadata
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
	}
	
	public enum Identity_GetInfoMetadata
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
	}
	
	public enum Identity_GetInfoApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-10-01")]
		_2018Minus10Minus01 = 0,
	}
	
	public enum Identity_GetTokenMetadata
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
	}
	
	public enum Identity_GetTokenApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-10-01")]
		_2018Minus10Minus01 = 0,
	}
	
	public enum Identity_GetTokenBypass_cache
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
	}
	
	public enum Instances_GetMetadataApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-10-01")]
		_2018Minus10Minus01 = 0,
	}
	
	public enum Instances_GetMetadataMetadata
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
