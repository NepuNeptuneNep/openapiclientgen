//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Action descriptor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Action
	{
		
		/// <summary>
		/// Specifies the action. Supported values - AlertingAction, LogToMetricAction
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="odata.type")]
		public string Odata_type { get; set; }
	}
	
	/// <summary>
	/// Severity Level of Alert
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AlertSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	/// <summary>
	/// Specify action need to be taken when rule type is Alert
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertingAction
	{
		
		/// <summary>
		/// Azure action group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aznsAction")]
		public AzNsActionGroup AznsAction { get; set; }
		
		/// <summary>
		/// Severity Level of Alert
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public AlertingActionSeverity Severity { get; set; }
		
		/// <summary>
		/// time (in minutes) for which Alerts should be throttled or suppressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="throttlingInMin")]
		public System.Nullable<System.Int32> ThrottlingInMin { get; set; }
		
		/// <summary>
		/// The condition that results in the Log Search rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trigger")]
		public TriggerCondition Trigger { get; set; }
	}
	
	/// <summary>
	/// Azure action group
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzNsActionGroup
	{
		
		/// <summary>
		/// Azure Action Group reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionGroup")]
		public string[] ActionGroup { get; set; }
		
		/// <summary>
		/// Custom payload to be sent for all webhook URI in Azure action group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customWebhookPayload")]
		public string CustomWebhookPayload { get; set; }
		
		/// <summary>
		/// Custom subject override for all email ids in Azure action group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailSubject")]
		public string EmailSubject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AlertingActionSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	/// <summary>
	/// The condition that results in the Log Search rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TriggerCondition
	{
		
		/// <summary>
		/// A log metrics trigger descriptor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricTrigger")]
		public LogMetricTrigger MetricTrigger { get; set; }
		
		/// <summary>
		/// Result or count threshold based on which rule should be triggered.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="threshold")]
		public double Threshold { get; set; }
		
		/// <summary>
		/// Result Condition Evaluation criteria. Supported Values - 'GreaterThan' or 'LessThan' or 'Equal'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thresholdOperator")]
		public LogMetricTriggerThresholdOperator ThresholdOperator { get; set; }
	}
	
	/// <summary>
	/// A log metrics trigger descriptor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LogMetricTrigger
	{
		
		/// <summary>
		/// Evaluation of metric on a particular column
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricColumn")]
		public string MetricColumn { get; set; }
		
		/// <summary>
		/// Metric Trigger Evaluation Type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricTriggerType")]
		public System.Nullable<LogMetricTriggerMetricTriggerType> MetricTriggerType { get; set; }
		
		/// <summary>
		/// The threshold of the metric trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threshold")]
		public System.Nullable<System.Double> Threshold { get; set; }
		
		/// <summary>
		/// Result Condition Evaluation criteria. Supported Values - 'GreaterThan' or 'LessThan' or 'Equal'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thresholdOperator")]
		public System.Nullable<LogMetricTriggerThresholdOperator> ThresholdOperator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum LogMetricTriggerMetricTriggerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Consecutive = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Total = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum LogMetricTriggerThresholdOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThan = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Equal = 2,
	}
	
	/// <summary>
	/// Result Condition Evaluation criteria. Supported Values - 'GreaterThan' or 'LessThan' or 'Equal'.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ConditionalOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThan = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Equal = 2,
	}
	
	/// <summary>
	/// Specifies the criteria for converting log to metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Criteria
	{
		
		/// <summary>
		/// List of Dimensions for creating metric
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public Dimension[] Dimensions { get; set; }
		
		/// <summary>
		/// Name of the metric
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
	}
	
	/// <summary>
	/// Specifies the criteria for converting log to metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Dimension
	{
		
		/// <summary>
		/// Name of the dimension
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Operator for dimension values
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public DimensionOperator Operator { get; set; }
		
		/// <summary>
		/// List of dimension values
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DimensionOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Include = 0,
	}
	
	/// <summary>
	/// Describes the format of Error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Log Search Rule Definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LogSearchRule
	{
		
		/// <summary>
		/// Action descriptor.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public Action Action { get; set; }
		
		/// <summary>
		/// The description of the Log Search rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The flag which indicates whether the Log Search rule is enabled. Value should be true or false
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<LogSearchRuleEnabled> Enabled { get; set; }
		
		/// <summary>
		/// Last time the rule was updated in IS08601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
		
		/// <summary>
		/// Provisioning state of the scheduled query rule
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<LogSearchRuleProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// Defines how often to run the search and the time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public Schedule Schedule { get; set; }
		
		/// <summary>
		/// Specifies the log search query.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum LogSearchRuleEnabled
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum LogSearchRuleProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deploying = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
	}
	
	/// <summary>
	/// Defines how often to run the search and the time interval.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Schedule
	{
		
		/// <summary>
		/// frequency (in minutes) at which rule condition should be evaluated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frequencyInMinutes")]
		public int FrequencyInMinutes { get; set; }
		
		/// <summary>
		/// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeWindowInMinutes")]
		public int TimeWindowInMinutes { get; set; }
	}
	
	/// <summary>
	/// Specifies the log search query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Source
	{
		
		/// <summary>
		/// List of  Resource referred into query
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizedResources")]
		public string[] AuthorizedResources { get; set; }
		
		/// <summary>
		/// The resource uri over which log search query is to be run.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSourceId")]
		public string DataSourceId { get; set; }
		
		/// <summary>
		/// Log search query. Required for action type - AlertingAction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		/// <summary>
		/// Set value to 'ResultAccount'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryType")]
		public System.Nullable<SourceQueryType> QueryType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SourceQueryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResultCount = 0,
	}
	
	/// <summary>
	/// Log Search Rule Definition for Patching
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LogSearchRulePatch
	{
		
		/// <summary>
		/// The flag which indicates whether the Log Search rule is enabled. Value should be true or false
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<LogSearchRulePatchEnabled> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum LogSearchRulePatchEnabled
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 1,
	}
	
	/// <summary>
	/// The Log Search Rule resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LogSearchRuleResource
	{
		
		/// <summary>
		/// Log Search Rule Definition
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public LogSearchRule Properties { get; set; }
	}
	
	/// <summary>
	/// Represents a collection of Log Search rule resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LogSearchRuleResourceCollection
	{
		
		/// <summary>
		/// The values for the Log Search Rule resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public LogSearchRuleResource[] Value { get; set; }
	}
	
	/// <summary>
	/// The log search rule resource for patch operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LogSearchRuleResourcePatch
	{
		
		/// <summary>
		/// Log Search Rule Definition for Patching
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public LogSearchRulePatch Properties { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public object Tags { get; set; }
	}
	
	/// <summary>
	/// Specify action need to be taken when rule type is converting log to metric
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LogToMetricAction
	{
		
		/// <summary>
		/// Criteria of Metric
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="criteria")]
		public Criteria[] Criteria { get; set; }
	}
	
	/// <summary>
	/// Metric Trigger Evaluation Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MetricTriggerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Consecutive = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Total = 1,
	}
	
	/// <summary>
	/// Set value to 'ResultAccount'
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum QueryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResultCount = 0,
	}
	
	/// <summary>
	/// An azure resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Azure resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Azure resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public object Tags { get; set; }
		
		/// <summary>
		/// Azure resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List the Log Search rules within a subscription group.
		/// ScheduledQueryRules_ListBySubscription subscriptions/{subscriptionId}/providers/microsoft.insights/scheduledQueryRules
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="filter">The filter to apply on the operation. For more information please see https://msdn.microsoft.com/en-us/library/azure/dn931934.aspx</param>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <returns>Successful request for a list of alert rules</returns>
		public async Task<LogSearchRuleResourceCollection> ScheduledQueryRules_ListBySubscriptionAsync(string api_version, string filter, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/microsoft.insights/scheduledQueryRules?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LogSearchRuleResourceCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the Log Search rules within a resource group.
		/// ScheduledQueryRules_ListByResourceGroup subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="filter">The filter to apply on the operation. For more information please see https://msdn.microsoft.com/en-us/library/azure/dn931934.aspx</param>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <returns>Successful request for a list of alert rules</returns>
		public async Task<LogSearchRuleResourceCollection> ScheduledQueryRules_ListByResourceGroupAsync(string resourceGroupName, string api_version, string filter, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/scheduledQueryRules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LogSearchRuleResourceCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an Log Search rule
		/// ScheduledQueryRules_Get subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="ruleName">The name of the rule.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <returns>Successful request to get a Log Search rule</returns>
		public async Task<LogSearchRuleResource> ScheduledQueryRules_GetAsync(string resourceGroupName, string ruleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/scheduledQueryRules/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LogSearchRuleResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an log search rule.
		/// ScheduledQueryRules_CreateOrUpdate subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="ruleName">The name of the rule.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The parameters of the rule to create or update.</param>
		/// <returns>Successful request to update an Log Search rule</returns>
		public async Task<LogSearchRuleResource> ScheduledQueryRules_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string ruleName, string api_version, LogSearchRuleResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/scheduledQueryRules/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LogSearchRuleResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a Log Search rule
		/// ScheduledQueryRules_Delete subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="ruleName">The name of the rule.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <returns>Successful request to delete a  Log Search rule</returns>
		public async Task ScheduledQueryRules_DeleteAsync(string resourceGroupName, string ruleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/scheduledQueryRules/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update log search Rule.
		/// ScheduledQueryRules_Update subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="ruleName">The name of the rule.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The parameters of the rule to update.</param>
		/// <returns>Successful request to update an Log Search rule</returns>
		public async Task<LogSearchRuleResource> ScheduledQueryRules_UpdateAsync(string subscriptionId, string resourceGroupName, string ruleName, string api_version, LogSearchRuleResourcePatch requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/scheduledQueryRules/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LogSearchRuleResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
