//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An API key used for authenticating with a configuration store endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiKey
	{
		
		/// <summary>
		/// A connection string that can be used by supporting clients for authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionString")]
		public string ConnectionString { get; set; }
		
		/// <summary>
		/// The key ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The last time any of the key's properties were modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// A name for the key describing its usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Whether this key can only be used for read operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// The value of the key that is used for authentication purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The result of a request to list API keys.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiKeyListResult
	{
		
		/// <summary>
		/// The URI that can be used to request the next set of paged results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The collection value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ApiKey[] Value { get; set; }
	}
	
	/// <summary>
	/// Parameters used for checking whether a resource name is available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityParameters
	{
		
		/// <summary>
		/// The name to check for availability.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource type to check for name availability.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CheckNameAvailabilityParametersType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckNameAvailabilityParametersType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.AppConfiguration/configurationStores")]
		Microsoft_AppConfiguration_configurationStores = 0,
	}
	
	/// <summary>
	/// The configuration store along with all resource properties. The Configuration Store will have all information to begin utilizing it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConfigurationStore
	{
		
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public ResourceIdentity Identity { get; set; }
		
		/// <summary>
		/// The properties of a configuration store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ConfigurationStoreProperties Properties { get; set; }
		
		/// <summary>
		/// Describes a configuration store SKU.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceIdentity
	{
		
		/// <summary>
		/// The principal id of the identity. This property will only be provided for a system-assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The tenant id associated with the resource's identity. This property will only be provided for a system-assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ResourceIdentityType> Type { get; set; }
		
		/// <summary>
		/// The list of user-assigned identities associated with the resource. The user-assigned identity dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, UserIdentity> UserAssignedIdentities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ResourceIdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemAssigned = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserAssigned = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SystemAssigned, UserAssigned")]
		SystemAssigned_UserAssigned = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserIdentity
	{
		
		/// <summary>
		/// The client ID of the user-assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// The principal ID of the user-assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	/// <summary>
	/// The properties of a configuration store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConfigurationStoreProperties
	{
		
		/// <summary>
		/// The creation date of configuration store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// The DNS endpoint where the configuration store API will be available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// The provisioning state of the configuration store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<ConfigurationStorePropertiesProvisioningState> ProvisioningState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ConfigurationStorePropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 5,
	}
	
	/// <summary>
	/// Describes a configuration store SKU.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sku
	{
		
		/// <summary>
		/// The SKU name of the configuration store.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The result of a request to list configuration stores.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConfigurationStoreListResult
	{
		
		/// <summary>
		/// The URI that can be used to request the next set of paged results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The collection value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ConfigurationStore[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties for updating a configuration store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConfigurationStorePropertiesUpdateParameters
	{
	}
	
	/// <summary>
	/// The parameters for updating a configuration store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConfigurationStoreUpdateParameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public ResourceIdentity Identity { get; set; }
		
		/// <summary>
		/// The properties for updating a configuration store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ConfigurationStorePropertiesUpdateParameters Properties { get; set; }
		
		/// <summary>
		/// Describes a configuration store SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
		
		/// <summary>
		/// The ARM resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// AppConfiguration error object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Error
	{
		
		/// <summary>
		/// Error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The result of a request to retrieve a key-value from the specified configuration store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyValue
	{
		
		/// <summary>
		/// The content type of the key-value's value.
		///Providing a proper content-type can enable transformations of values when they are retrieved by applications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// An ETag indicating the state of a key-value within a configuration store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eTag")]
		public string ETag { get; set; }
		
		/// <summary>
		/// The primary identifier of a key-value.
		///The key is used in unison with the label to uniquely identify a key-value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// A value used to group key-values.
		///The label is used in unison with the key to uniquely identify a key-value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The last time a modifying operation was performed on the given key-value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// A value indicating whether the key-value is locked.
		///A locked key-value may not be modified until it is unlocked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locked")]
		public System.Nullable<System.Boolean> Locked { get; set; }
		
		/// <summary>
		/// A dictionary of tags that can help identify what a key-value may be applicable for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The value of the key-value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The parameters used to list a configuration store key-value
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListKeyValueParameters
	{
		
		/// <summary>
		/// The key to retrieve.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The label of the key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
	}
	
	/// <summary>
	/// The result of a request to check the availability of a resource name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NameAvailabilityStatus
	{
		
		/// <summary>
		/// If any, the error message that provides more detail for the reason that the name is not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The value indicating whether the resource name is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// If any, the reason that the name is not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// The definition of a configuration store operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDefinition
	{
		
		/// <summary>
		/// The display information for a configuration store operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDefinitionDisplay Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The display information for a configuration store operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDefinitionDisplay
	{
		
		/// <summary>
		/// The description for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The operation that users can perform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// The resource provider name: Microsoft App Configuration."
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// The resource on which the operation is performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// The result of a request to list configuration store operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDefinitionListResult
	{
		
		/// <summary>
		/// The URI that can be used to request the next set of paged results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The collection value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public OperationDefinition[] Value { get; set; }
	}
	
	/// <summary>
	/// The parameters used to regenerate an API key.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegenerateKeyParameters
	{
		
		/// <summary>
		/// The id of the key to regenerate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// An Azure resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// The resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The location of the resource. This cannot be changed after the resource is created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The tags of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists the operations available from this provider.
		/// Operations_List providers/Microsoft.AppConfiguration/operations
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="skipToken">A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<OperationDefinitionListResult> Operations_ListAsync(string api_version, string skipToken)
		{
			var requestUri = "providers/Microsoft.AppConfiguration/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationDefinitionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks whether the configuration store name is available for use.
		/// Operations_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.AppConfiguration/checkNameAvailability
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="requestBody">The object containing information for the availability request.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<NameAvailabilityStatus> Operations_CheckNameAvailabilityAsync(string subscriptionId, string api_version, CheckNameAvailabilityParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.AppConfiguration/checkNameAvailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NameAvailabilityStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the configuration stores for a given subscription.
		/// ConfigurationStores_List subscriptions/{subscriptionId}/providers/Microsoft.AppConfiguration/configurationStores
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="skipToken">A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<ConfigurationStoreListResult> ConfigurationStores_ListAsync(string subscriptionId, string api_version, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.AppConfiguration/configurationStores&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigurationStoreListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the configuration stores for a given resource group.
		/// ConfigurationStores_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.</param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="skipToken">A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<ConfigurationStoreListResult> ConfigurationStores_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppConfiguration/configurationStores&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigurationStoreListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the properties of the specified configuration store.
		/// ConfigurationStores_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.</param>
		/// <param name="configStoreName">The name of the configuration store.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<ConfigurationStore> ConfigurationStores_GetAsync(string subscriptionId, string resourceGroupName, string configStoreName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppConfiguration/configurationStores/"+ (configStoreName==null? "" : System.Uri.EscapeDataString(configStoreName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigurationStore>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a configuration store with the specified parameters.
		/// ConfigurationStores_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.</param>
		/// <param name="configStoreName">The name of the configuration store.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="requestBody">The parameters for creating a configuration store.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<ConfigurationStore> ConfigurationStores_CreateAsync(string subscriptionId, string resourceGroupName, string configStoreName, string api_version, ConfigurationStore requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppConfiguration/configurationStores/"+ (configStoreName==null? "" : System.Uri.EscapeDataString(configStoreName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigurationStore>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a configuration store.
		/// ConfigurationStores_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.</param>
		/// <param name="configStoreName">The name of the configuration store.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task ConfigurationStores_DeleteAsync(string subscriptionId, string resourceGroupName, string configStoreName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppConfiguration/configurationStores/"+ (configStoreName==null? "" : System.Uri.EscapeDataString(configStoreName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a configuration store with the specified parameters.
		/// ConfigurationStores_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.</param>
		/// <param name="configStoreName">The name of the configuration store.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="requestBody">The parameters for updating a configuration store.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<ConfigurationStore> ConfigurationStores_UpdateAsync(string subscriptionId, string resourceGroupName, string configStoreName, string api_version, ConfigurationStoreUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppConfiguration/configurationStores/"+ (configStoreName==null? "" : System.Uri.EscapeDataString(configStoreName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigurationStore>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the access key for the specified configuration store.
		/// ConfigurationStores_ListKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/ListKeys
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.</param>
		/// <param name="configStoreName">The name of the configuration store.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="skipToken">A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<ApiKeyListResult> ConfigurationStores_ListKeysAsync(string subscriptionId, string resourceGroupName, string configStoreName, string api_version, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppConfiguration/configurationStores/"+ (configStoreName==null? "" : System.Uri.EscapeDataString(configStoreName))+"/ListKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiKeyListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerates an access key for the specified configuration store.
		/// ConfigurationStores_RegenerateKey subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/RegenerateKey
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.</param>
		/// <param name="configStoreName">The name of the configuration store.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="requestBody">The parameters for regenerating an access key.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<ApiKey> ConfigurationStores_RegenerateKeyAsync(string subscriptionId, string resourceGroupName, string configStoreName, string api_version, RegenerateKeyParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppConfiguration/configurationStores/"+ (configStoreName==null? "" : System.Uri.EscapeDataString(configStoreName))+"/RegenerateKey&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiKey>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists a configuration store key-value.
		/// ConfigurationStores_ListKeyValue subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/listKeyValue
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.</param>
		/// <param name="configStoreName">The name of the configuration store.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="requestBody">The parameters for retrieving a key-value.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<KeyValue> ConfigurationStores_ListKeyValueAsync(string subscriptionId, string resourceGroupName, string configStoreName, string api_version, ListKeyValueParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppConfiguration/configurationStores/"+ (configStoreName==null? "" : System.Uri.EscapeDataString(configStoreName))+"/listKeyValue&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KeyValue>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
