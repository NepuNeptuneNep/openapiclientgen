//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Error details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorDetails
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The description of the IoTSpaces service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IoTSpacesDescription
	{
		
		/// <summary>
		/// The properties of an IoTSpaces instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public IoTSpacesProperties Properties { get; set; }
		
		/// <summary>
		/// Information about the SKU of the IoTSpaces instance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public IoTSpacesSkuInfo Sku { get; set; }
	}
	
	/// <summary>
	/// The properties of an IoTSpaces instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IoTSpacesProperties
	{
		
		/// <summary>
		/// The management Api endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managementApiUrl")]
		public string ManagementApiUrl { get; set; }
		
		/// <summary>
		/// The provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<IoTSpacesPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// The properties of the Azure Storage Container for file archive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageContainer")]
		public StorageContainerProperties StorageContainer { get; set; }
		
		/// <summary>
		/// The management UI endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPortalUrl")]
		public string WebPortalUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IoTSpacesPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Provisioning = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 4,
	}
	
	/// <summary>
	/// The properties of the Azure Storage Container for file archive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageContainerProperties
	{
		
		/// <summary>
		/// The connection string of the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionString")]
		public string ConnectionString { get; set; }
		
		/// <summary>
		/// The name of storage container in the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerName")]
		public string ContainerName { get; set; }
		
		/// <summary>
		/// The name of the resource group of the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// The subscription identifier of the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// Information about the SKU of the IoTSpaces instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IoTSpacesSkuInfo
	{
		
		/// <summary>
		/// The name of the SKU.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public IoTSpacesSkuInfoName Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IoTSpacesSkuInfoName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		F1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 3,
	}
	
	/// <summary>
	/// A list of IoTSpaces description objects with a next link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IoTSpacesDescriptionListResult
	{
		
		/// <summary>
		/// The link used to get the next page of IoTSpaces description objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of IoTSpaces description objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public IoTSpacesDescription[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties indicating whether a given IoTSpaces service name is available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IoTSpacesNameAvailabilityInfo
	{
		
		/// <summary>
		/// The detailed reason message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The value which indicates whether the provided name is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// The reason for unavailability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<IoTSpacesNameAvailabilityInfoReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IoTSpacesNameAvailabilityInfoReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlreadyExists = 1,
	}
	
	/// <summary>
	/// The description of the IoTSpaces service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IoTSpacesPatchDescription
	{
		
		/// <summary>
		/// The properties of an IoTSpaces instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public IoTSpacesProperties Properties { get; set; }
		
		/// <summary>
		/// Instance tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// IoTSpaces service REST API operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that represents the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplay Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{read | write | action | delete}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The object that represents the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDisplay
	{
		
		/// <summary>
		/// Friendly description for the operation,
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Name of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Service provider: Microsoft IoTSpaces
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Resource Type: IoTSpaces
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// Input values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationInputs
	{
		
		/// <summary>
		/// The name of the IoTSpaces service instance to check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A list of IoTSpaces service operations. It contains a list of operations and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// The link used to get the next page of IoTSpaces description objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of IoT spaces operations supported by the Microsoft.IoTSpaces resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// The common properties of an IoTSpaces service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// The resource identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The resource location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The resource name.
		/// Pattern: ^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available IoTSpaces service REST API operations.
		/// Operations_List providers/Microsoft.IoTSpaces/operations
		/// </summary>
		/// <param name="api_version">The version of the API.
		/// Min length: 10
		// </param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<OperationListResult> Operations_ListAsync(Operations_ListApi_version api_version)
		{
			var requestUri = "providers/Microsoft.IoTSpaces/operations?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the IoTSpaces instances in a subscription.
		/// IoTSpaces_List subscriptions/{subscriptionId}/providers/Microsoft.IoTSpaces/Graph
		/// </summary>
		/// <param name="api_version">The version of the API.
		/// Min length: 10
		// </param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <returns>This is a synchronous operation. The body contains a JSON-serialized array of the metadata from all the IoTSpaces instances in the subscription.</returns>
		public async Task<IoTSpacesDescriptionListResult> IoTSpaces_ListAsync(IoTSpaces_ListApi_version api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.IoTSpaces/Graph?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IoTSpacesDescriptionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if an IoTSpaces instance name is available.
		/// IoTSpaces_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.IoTSpaces/checkNameAvailability
		/// </summary>
		/// <param name="api_version">The version of the API.
		/// Min length: 10
		// </param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="requestBody">Set the name parameter in the OperationInputs structure to the name of the IoTSpaces instance to check.</param>
		/// <returns>This is a synchronous operation. The body contains a JSON-serialized response that specifies whether the IoTSpaces service name is available. If the name is not available, the body contains the reason.</returns>
		public async Task<IoTSpacesNameAvailabilityInfo> IoTSpaces_CheckNameAvailabilityAsync(IoTSpaces_CheckNameAvailabilityApi_version api_version, string subscriptionId, OperationInputs requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.IoTSpaces/checkNameAvailability?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IoTSpacesNameAvailabilityInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all the IoTSpaces instances in a resource group.
		/// IoTSpaces_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph
		/// </summary>
		/// <param name="api_version">The version of the API.
		/// Min length: 10
		// </param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoTSpaces instance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>This is a synchronous operation. The body contains a JSON-serialized array of the metadata from all the IoTSpaces instances in the resource group.</returns>
		public async Task<IoTSpacesDescriptionListResult> IoTSpaces_ListByResourceGroupAsync(IoTSpaces_ListByResourceGroupApi_version api_version, string subscriptionId, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.IoTSpaces/Graph?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IoTSpacesDescriptionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the metadata of a IoTSpaces instance.
		/// IoTSpaces_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}
		/// </summary>
		/// <param name="api_version">The version of the API.
		/// Min length: 10
		// </param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoTSpaces instance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="resourceName">The name of the IoTSpaces instance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>The body contains all the non-security properties of the IoTSpaces instance. Security-related properties are set to null.</returns>
		public async Task<IoTSpacesDescription> IoTSpaces_GetAsync(IoTSpaces_GetApi_version api_version, string subscriptionId, string resourceGroupName, string resourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.IoTSpaces/Graph/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IoTSpacesDescription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update the metadata of an IoTSpaces instance. The usual pattern to modify a property is to retrieve the IoTSpaces instance metadata and security metadata, and then combine them with the modified values in a new body to update the IoTSpaces instance.
		/// IoTSpaces_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}
		/// </summary>
		/// <param name="api_version">The version of the API.
		/// Min length: 10
		// </param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoTSpaces instance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="resourceName">The name of the IoTSpaces instance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="requestBody">The IoTSpaces instance metadata and security metadata.</param>
		/// <returns>This is returned as a response to the status polling request for the create or update operation. The body contains the resource representation that indicates a transitional provisioning state.</returns>
		public async Task<IoTSpacesDescription> IoTSpaces_CreateOrUpdateAsync(IoTSpaces_CreateOrUpdateApi_version api_version, string subscriptionId, string resourceGroupName, string resourceName, IoTSpacesDescription requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.IoTSpaces/Graph/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IoTSpacesDescription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an IoTSpaces instance.
		/// IoTSpaces_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}
		/// </summary>
		/// <param name="api_version">The version of the API.
		/// Min length: 10
		// </param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoTSpaces instance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="resourceName">The name of the IoTSpaces instance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>This is returned as a response to the status polling request for the delete operation. The body contains the resource representation that indicates a transitional provisioning state.</returns>
		public async Task<IoTSpacesDescription> IoTSpaces_DeleteAsync(IoTSpaces_DeleteApi_version api_version, string subscriptionId, string resourceGroupName, string resourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.IoTSpaces/Graph/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IoTSpacesDescription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the metadata of a IoTSpaces instance.
		/// IoTSpaces_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}
		/// </summary>
		/// <param name="api_version">The version of the API.
		/// Min length: 10
		// </param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoTSpaces instance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="resourceName">The name of the IoTSpaces instance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="requestBody">The IoTSpaces instance metadata and security metadata.</param>
		/// <returns>This is returned as a response to the status polling request for the create or update operation. The body contains the resource representation that indicates a transitional provisioning state.</returns>
		public async Task<IoTSpacesDescription> IoTSpaces_UpdateAsync(IoTSpaces_UpdateApi_version api_version, string subscriptionId, string resourceGroupName, string resourceName, IoTSpacesPatchDescription requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.IoTSpaces/Graph/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IoTSpacesDescription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Operations_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-10-01-preview")]
		_2017Minus10Minus01Minuspreview = 0,
	}
	
	public enum IoTSpaces_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-10-01-preview")]
		_2017Minus10Minus01Minuspreview = 0,
	}
	
	public enum IoTSpaces_CheckNameAvailabilityApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-10-01-preview")]
		_2017Minus10Minus01Minuspreview = 0,
	}
	
	public enum IoTSpaces_ListByResourceGroupApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-10-01-preview")]
		_2017Minus10Minus01Minuspreview = 0,
	}
	
	public enum IoTSpaces_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-10-01-preview")]
		_2017Minus10Minus01Minuspreview = 0,
	}
	
	public enum IoTSpaces_CreateOrUpdateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-10-01-preview")]
		_2017Minus10Minus01Minuspreview = 0,
	}
	
	public enum IoTSpaces_DeleteApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-10-01-preview")]
		_2017Minus10Minus01Minuspreview = 0,
	}
	
	public enum IoTSpaces_UpdateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-10-01-preview")]
		_2017Minus10Minus01Minuspreview = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
