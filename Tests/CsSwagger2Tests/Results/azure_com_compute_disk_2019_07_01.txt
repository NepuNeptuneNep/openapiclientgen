//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A disk access SAS uri.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AccessUri
	{
		
		/// <summary>
		/// A SAS uri for accessing a disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessSAS")]
		public string AccessSAS { get; set; }
	}
	
	/// <summary>
	/// Api error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiError
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The Api error details
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ApiErrorBase[] Details { get; set; }
		
		/// <summary>
		/// Inner error details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="innererror")]
		public InnerError Innererror { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Api error base.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiErrorBase
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// An error response from the Compute service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// Api error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ApiError Error { get; set; }
	}
	
	/// <summary>
	/// Data used when creating a disk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreationData
	{
		
		/// <summary>
		/// This enumerates the possible sources of a disk's creation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createOption")]
		public CreationDataCreateOption CreateOption { get; set; }
		
		/// <summary>
		/// The source image used for creating the disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageReference")]
		public ImageDiskReference ImageReference { get; set; }
		
		/// <summary>
		/// If createOption is Copy, this is the ARM id of the source snapshot or disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceResourceId")]
		public string SourceResourceId { get; set; }
		
		/// <summary>
		/// If this field is set, this is the unique id identifying the source of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUniqueId")]
		public string SourceUniqueId { get; set; }
		
		/// <summary>
		/// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUri")]
		public string SourceUri { get; set; }
		
		/// <summary>
		/// Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountId")]
		public string StorageAccountId { get; set; }
		
		/// <summary>
		/// If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadSizeBytes")]
		public System.Nullable<System.Int64> UploadSizeBytes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CreationDataCreateOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Empty = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Attach = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FromImage = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Import = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Copy = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Restore = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Upload = 6,
	}
	
	/// <summary>
	/// Disk resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Disk : Resource
	{
		
		/// <summary>
		/// A relative URI containing the ID of the VM that has the disk attached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedBy")]
		public string ManagedBy { get; set; }
		
		/// <summary>
		/// Disk resource properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DiskProperties Properties { get; set; }
		
		/// <summary>
		/// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public DiskSku Sku { get; set; }
		
		/// <summary>
		/// The Logical zone list for Disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zones")]
		public string[] Zones { get; set; }
	}
	
	/// <summary>
	/// disk encryption set resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiskEncryptionSet : Resource
	{
		
		/// <summary>
		/// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public EncryptionSetIdentity Identity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public EncryptionSetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The List disk encryption set operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiskEncryptionSetList
	{
		
		/// <summary>
		/// The uri to fetch the next page of disk encryption sets. Call ListNext() with this to fetch the next page of disk encryption sets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of disk encryption sets.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DiskEncryptionSet[] Value { get; set; }
	}
	
	/// <summary>
	/// disk encryption set update resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiskEncryptionSetUpdate
	{
		
		/// <summary>
		/// disk encryption set resource update properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DiskEncryptionSetUpdateProperties Properties { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// disk encryption set resource update properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiskEncryptionSetUpdateProperties
	{
		
		/// <summary>
		/// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeKey")]
		public KeyVaultAndKeyReference ActiveKey { get; set; }
	}
	
	/// <summary>
	/// The List Disks operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiskList
	{
		
		/// <summary>
		/// The uri to fetch the next page of disks. Call ListNext() with this to fetch the next page of disks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of disks.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Disk[] Value { get; set; }
	}
	
	/// <summary>
	/// Disk resource properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiskProperties
	{
		
		/// <summary>
		/// Data used when creating a disk.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationData")]
		public CreationData CreationData { get; set; }
		
		/// <summary>
		/// The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskIOPSReadWrite")]
		public System.Nullable<System.Int64> DiskIOPSReadWrite { get; set; }
		
		/// <summary>
		/// The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskMBpsReadWrite")]
		public System.Nullable<System.Int32> DiskMBpsReadWrite { get; set; }
		
		/// <summary>
		/// The size of the disk in bytes. This field is read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeBytes")]
		public System.Nullable<System.Int64> DiskSizeBytes { get; set; }
		
		/// <summary>
		/// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGB")]
		public System.Nullable<System.Int32> DiskSizeGB { get; set; }
		
		/// <summary>
		/// The state of the disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskState")]
		public System.Nullable<DiskPropertiesDiskState> DiskState { get; set; }
		
		/// <summary>
		/// Encryption at rest settings for disk or snapshot
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryption")]
		public Encryption Encryption { get; set; }
		
		/// <summary>
		/// Encryption settings for disk or snapshot
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionSettingsCollection")]
		public EncryptionSettingsCollection EncryptionSettingsCollection { get; set; }
		
		/// <summary>
		/// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hyperVGeneration")]
		public System.Nullable<DiskPropertiesHyperVGeneration> HyperVGeneration { get; set; }
		
		/// <summary>
		/// The Operating System type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public System.Nullable<DiskPropertiesOsType> OsType { get; set; }
		
		/// <summary>
		/// The disk provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The time when the disk was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeCreated")]
		public System.Nullable<System.DateTimeOffset> TimeCreated { get; set; }
		
		/// <summary>
		/// Unique Guid identifying the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueId")]
		public string UniqueId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DiskPropertiesDiskState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unattached = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Attached = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reserved = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActiveSAS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadyToUpload = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActiveUpload = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DiskPropertiesHyperVGeneration
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V2 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DiskPropertiesOsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Windows = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Linux = 1,
	}
	
	/// <summary>
	/// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiskSku
	{
		
		/// <summary>
		/// The sku name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public System.Nullable<DiskSkuName> Name { get; set; }
		
		/// <summary>
		/// The sku tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DiskSkuName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_LRS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium_LRS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StandardSSD_LRS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UltraSSD_LRS = 3,
	}
	
	/// <summary>
	/// Disk update resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiskUpdate
	{
		
		/// <summary>
		/// Disk resource update properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DiskUpdateProperties Properties { get; set; }
		
		/// <summary>
		/// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public DiskSku Sku { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Disk resource update properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiskUpdateProperties
	{
		
		/// <summary>
		/// The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskIOPSReadWrite")]
		public System.Nullable<System.Int64> DiskIOPSReadWrite { get; set; }
		
		/// <summary>
		/// The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskMBpsReadWrite")]
		public System.Nullable<System.Int32> DiskMBpsReadWrite { get; set; }
		
		/// <summary>
		/// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGB")]
		public System.Nullable<System.Int32> DiskSizeGB { get; set; }
		
		/// <summary>
		/// Encryption at rest settings for disk or snapshot
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryption")]
		public Encryption Encryption { get; set; }
		
		/// <summary>
		/// Encryption settings for disk or snapshot
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionSettingsCollection")]
		public EncryptionSettingsCollection EncryptionSettingsCollection { get; set; }
		
		/// <summary>
		/// the Operating System type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public DiskPropertiesOsType OsType { get; set; }
	}
	
	/// <summary>
	/// Encryption at rest settings for disk or snapshot
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Encryption
	{
		
		/// <summary>
		/// ResourceId of the disk encryption set to use for enabling encryption at rest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskEncryptionSetId")]
		public string DiskEncryptionSetId { get; set; }
		
		/// <summary>
		/// The type of key used to encrypt the data of the disk.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EncryptionType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EncryptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EncryptionAtRestWithPlatformKey = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EncryptionAtRestWithCustomerKey = 1,
	}
	
	/// <summary>
	/// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EncryptionSetIdentity
	{
		
		/// <summary>
		/// The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a systemAssigned(implicit) identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a systemAssigned(implicit) identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<EncryptionSetIdentityType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EncryptionSetIdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemAssigned = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EncryptionSetProperties
	{
		
		/// <summary>
		/// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeKey")]
		public KeyVaultAndKeyReference ActiveKey { get; set; }
		
		/// <summary>
		/// A readonly collection of key vault keys previously used by this disk encryption set while a key rotation is in progress. It will be empty if there is no ongoing key rotation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousKeys")]
		public KeyVaultAndKeyReference[] PreviousKeys { get; set; }
		
		/// <summary>
		/// The disk encryption set provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyVaultAndKeyReference
	{
		
		/// <summary>
		/// Url pointing to a key or secret in KeyVault
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyUrl")]
		public string KeyUrl { get; set; }
		
		/// <summary>
		/// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceVault")]
		public SourceVault SourceVault { get; set; }
	}
	
	/// <summary>
	/// Encryption settings for disk or snapshot
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EncryptionSettingsCollection
	{
		
		/// <summary>
		/// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// A collection of encryption settings, one for each disk volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionSettings")]
		public EncryptionSettingsElement[] EncryptionSettings { get; set; }
		
		/// <summary>
		/// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionSettingsVersion")]
		public string EncryptionSettingsVersion { get; set; }
	}
	
	/// <summary>
	/// Encryption settings for one disk volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EncryptionSettingsElement
	{
		
		/// <summary>
		/// Key Vault Secret Url and vault id of the encryption key 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskEncryptionKey")]
		public KeyVaultAndSecretReference DiskEncryptionKey { get; set; }
		
		/// <summary>
		/// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyEncryptionKey")]
		public KeyVaultAndKeyReference KeyEncryptionKey { get; set; }
	}
	
	/// <summary>
	/// Data used for requesting a SAS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GrantAccessData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="access")]
		public GrantAccessDataAccess Access { get; set; }
		
		/// <summary>
		/// Time duration in seconds until the SAS access expires.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="durationInSeconds")]
		public int DurationInSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum GrantAccessDataAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Read = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Write = 2,
	}
	
	/// <summary>
	/// The source image used for creating the disk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageDiskReference
	{
		
		/// <summary>
		/// A relative uri containing either a Platform Image Repository or user image reference.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lun")]
		public System.Nullable<System.Int32> Lun { get; set; }
	}
	
	/// <summary>
	/// Inner error details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InnerError
	{
		
		/// <summary>
		/// The internal error message or exception dump.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errordetail")]
		public string Errordetail { get; set; }
		
		/// <summary>
		/// The exception type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exceptiontype")]
		public string Exceptiontype { get; set; }
	}
	
	/// <summary>
	/// Key Vault Secret Url and vault id of the encryption key 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyVaultAndSecretReference
	{
		
		/// <summary>
		/// Url pointing to a key or secret in KeyVault
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretUrl")]
		public string SecretUrl { get; set; }
		
		/// <summary>
		/// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceVault")]
		public SourceVault SourceVault { get; set; }
	}
	
	/// <summary>
	/// The Resource model definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Snapshot resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Snapshot : Resource
	{
		
		/// <summary>
		/// Unused. Always Null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedBy")]
		public string ManagedBy { get; set; }
		
		/// <summary>
		/// Snapshot resource properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SnapshotProperties Properties { get; set; }
		
		/// <summary>
		/// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public SnapshotSku Sku { get; set; }
	}
	
	/// <summary>
	/// The List Snapshots operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SnapshotList
	{
		
		/// <summary>
		/// The uri to fetch the next page of snapshots. Call ListNext() with this to fetch the next page of snapshots.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of snapshots.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Snapshot[] Value { get; set; }
	}
	
	/// <summary>
	/// Snapshot resource properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SnapshotProperties
	{
		
		/// <summary>
		/// Data used when creating a disk.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationData")]
		public CreationData CreationData { get; set; }
		
		/// <summary>
		/// The size of the disk in bytes. This field is read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeBytes")]
		public System.Nullable<System.Int64> DiskSizeBytes { get; set; }
		
		/// <summary>
		/// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGB")]
		public System.Nullable<System.Int32> DiskSizeGB { get; set; }
		
		/// <summary>
		/// Encryption at rest settings for disk or snapshot
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryption")]
		public Encryption Encryption { get; set; }
		
		/// <summary>
		/// Encryption settings for disk or snapshot
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionSettingsCollection")]
		public EncryptionSettingsCollection EncryptionSettingsCollection { get; set; }
		
		/// <summary>
		/// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hyperVGeneration")]
		public DiskPropertiesHyperVGeneration HyperVGeneration { get; set; }
		
		/// <summary>
		/// Whether a snapshot is incremental. Incremental snapshots on the same disk occupy less space than full snapshots and can be diffed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incremental")]
		public System.Nullable<System.Boolean> Incremental { get; set; }
		
		/// <summary>
		/// The Operating System type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public DiskPropertiesOsType OsType { get; set; }
		
		/// <summary>
		/// The disk provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The time when the disk was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeCreated")]
		public System.Nullable<System.DateTimeOffset> TimeCreated { get; set; }
		
		/// <summary>
		/// Unique Guid identifying the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueId")]
		public string UniqueId { get; set; }
	}
	
	/// <summary>
	/// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SnapshotSku
	{
		
		/// <summary>
		/// The sku name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public System.Nullable<SnapshotSkuName> Name { get; set; }
		
		/// <summary>
		/// The sku tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SnapshotSkuName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_LRS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium_LRS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_ZRS = 2,
	}
	
	/// <summary>
	/// Snapshot update resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SnapshotUpdate
	{
		
		/// <summary>
		/// Snapshot resource update properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SnapshotUpdateProperties Properties { get; set; }
		
		/// <summary>
		/// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public SnapshotSku Sku { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Snapshot resource update properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SnapshotUpdateProperties
	{
		
		/// <summary>
		/// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGB")]
		public System.Nullable<System.Int32> DiskSizeGB { get; set; }
		
		/// <summary>
		/// Encryption at rest settings for disk or snapshot
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryption")]
		public Encryption Encryption { get; set; }
		
		/// <summary>
		/// Encryption settings for disk or snapshot
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionSettingsCollection")]
		public EncryptionSettingsCollection EncryptionSettingsCollection { get; set; }
		
		/// <summary>
		/// the Operating System type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public DiskPropertiesOsType OsType { get; set; }
	}
	
	/// <summary>
	/// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceVault
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all the disk encryption sets under a subscription.
		/// DiskEncryptionSets_List subscriptions/{subscriptionId}/providers/Microsoft.Compute/diskEncryptionSets
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<DiskEncryptionSetList> DiskEncryptionSets_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Compute/diskEncryptionSets&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiskEncryptionSetList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the disks under a subscription.
		/// Disks_List subscriptions/{subscriptionId}/providers/Microsoft.Compute/disks
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<DiskList> Disks_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Compute/disks&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiskList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists snapshots under a subscription.
		/// Snapshots_List subscriptions/{subscriptionId}/providers/Microsoft.Compute/snapshots
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<SnapshotList> Snapshots_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Compute/snapshots&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SnapshotList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the disk encryption sets under a resource group.
		/// DiskEncryptionSets_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<DiskEncryptionSetList> DiskEncryptionSets_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/diskEncryptionSets&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiskEncryptionSetList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a disk encryption set.
		/// DiskEncryptionSets_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="diskEncryptionSetName">The name of the disk encryption set that is being created. The name can't be changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<DiskEncryptionSet> DiskEncryptionSets_GetAsync(string subscriptionId, string resourceGroupName, string diskEncryptionSetName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/diskEncryptionSets/"+ (diskEncryptionSetName==null? "" : System.Uri.EscapeDataString(diskEncryptionSetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiskEncryptionSet>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a disk encryption set
		/// DiskEncryptionSets_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="diskEncryptionSetName">The name of the disk encryption set that is being created. The name can't be changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">disk encryption set object supplied in the body of the Put disk encryption set operation.</param>
		/// <returns>OK</returns>
		public async Task<DiskEncryptionSet> DiskEncryptionSets_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string diskEncryptionSetName, string api_version, DiskEncryptionSet requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/diskEncryptionSets/"+ (diskEncryptionSetName==null? "" : System.Uri.EscapeDataString(diskEncryptionSetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiskEncryptionSet>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a disk encryption set.
		/// DiskEncryptionSets_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="diskEncryptionSetName">The name of the disk encryption set that is being created. The name can't be changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task DiskEncryptionSets_DeleteAsync(string subscriptionId, string resourceGroupName, string diskEncryptionSetName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/diskEncryptionSets/"+ (diskEncryptionSetName==null? "" : System.Uri.EscapeDataString(diskEncryptionSetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates (patches) a disk encryption set.
		/// DiskEncryptionSets_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="diskEncryptionSetName">The name of the disk encryption set that is being created. The name can't be changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">disk encryption set object supplied in the body of the Patch disk encryption set operation.</param>
		/// <returns>OK</returns>
		public async Task<DiskEncryptionSet> DiskEncryptionSets_UpdateAsync(string subscriptionId, string resourceGroupName, string diskEncryptionSetName, string api_version, DiskEncryptionSetUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/diskEncryptionSets/"+ (diskEncryptionSetName==null? "" : System.Uri.EscapeDataString(diskEncryptionSetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiskEncryptionSet>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the disks under a resource group.
		/// Disks_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<DiskList> Disks_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/disks&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiskList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a disk.
		/// Disks_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="diskName">The name of the managed disk that is being created. The name can't be changed after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<Disk> Disks_GetAsync(string subscriptionId, string resourceGroupName, string diskName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/disks/"+ (diskName==null? "" : System.Uri.EscapeDataString(diskName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Disk>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a disk.
		/// Disks_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="diskName">The name of the managed disk that is being created. The name can't be changed after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Disk object supplied in the body of the Put disk operation.</param>
		/// <returns>OK</returns>
		public async Task<Disk> Disks_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string diskName, string api_version, Disk requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/disks/"+ (diskName==null? "" : System.Uri.EscapeDataString(diskName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Disk>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a disk.
		/// Disks_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="diskName">The name of the managed disk that is being created. The name can't be changed after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task Disks_DeleteAsync(string subscriptionId, string resourceGroupName, string diskName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/disks/"+ (diskName==null? "" : System.Uri.EscapeDataString(diskName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates (patches) a disk.
		/// Disks_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="diskName">The name of the managed disk that is being created. The name can't be changed after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Disk object supplied in the body of the Patch disk operation.</param>
		/// <returns>OK</returns>
		public async Task<Disk> Disks_UpdateAsync(string subscriptionId, string resourceGroupName, string diskName, string api_version, DiskUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/disks/"+ (diskName==null? "" : System.Uri.EscapeDataString(diskName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Disk>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Grants access to a disk.
		/// Disks_GrantAccess subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}/beginGetAccess
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="diskName">The name of the managed disk that is being created. The name can't be changed after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Access data object supplied in the body of the get disk access operation.</param>
		/// <returns>OK</returns>
		public async Task<AccessUri> Disks_GrantAccessAsync(string subscriptionId, string resourceGroupName, string diskName, string api_version, GrantAccessData requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/disks/"+ (diskName==null? "" : System.Uri.EscapeDataString(diskName))+"/beginGetAccess&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccessUri>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revokes access to a disk.
		/// Disks_RevokeAccess subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}/endGetAccess
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="diskName">The name of the managed disk that is being created. The name can't be changed after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task Disks_RevokeAccessAsync(string subscriptionId, string resourceGroupName, string diskName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/disks/"+ (diskName==null? "" : System.Uri.EscapeDataString(diskName))+"/endGetAccess&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists snapshots under a resource group.
		/// Snapshots_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<SnapshotList> Snapshots_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/snapshots&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SnapshotList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a snapshot.
		/// Snapshots_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="snapshotName">The name of the snapshot that is being created. The name can't be changed after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<Snapshot> Snapshots_GetAsync(string subscriptionId, string resourceGroupName, string snapshotName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/snapshots/"+ (snapshotName==null? "" : System.Uri.EscapeDataString(snapshotName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Snapshot>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a snapshot.
		/// Snapshots_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="snapshotName">The name of the snapshot that is being created. The name can't be changed after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Snapshot object supplied in the body of the Put disk operation.</param>
		/// <returns>OK</returns>
		public async Task<Snapshot> Snapshots_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string snapshotName, string api_version, Snapshot requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/snapshots/"+ (snapshotName==null? "" : System.Uri.EscapeDataString(snapshotName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Snapshot>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a snapshot.
		/// Snapshots_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="snapshotName">The name of the snapshot that is being created. The name can't be changed after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task Snapshots_DeleteAsync(string subscriptionId, string resourceGroupName, string snapshotName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/snapshots/"+ (snapshotName==null? "" : System.Uri.EscapeDataString(snapshotName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates (patches) a snapshot.
		/// Snapshots_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="snapshotName">The name of the snapshot that is being created. The name can't be changed after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Snapshot object supplied in the body of the Patch snapshot operation.</param>
		/// <returns>OK</returns>
		public async Task<Snapshot> Snapshots_UpdateAsync(string subscriptionId, string resourceGroupName, string snapshotName, string api_version, SnapshotUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/snapshots/"+ (snapshotName==null? "" : System.Uri.EscapeDataString(snapshotName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Snapshot>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Grants access to a snapshot.
		/// Snapshots_GrantAccess subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}/beginGetAccess
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="snapshotName">The name of the snapshot that is being created. The name can't be changed after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Access data object supplied in the body of the get snapshot access operation.</param>
		/// <returns>OK</returns>
		public async Task<AccessUri> Snapshots_GrantAccessAsync(string subscriptionId, string resourceGroupName, string snapshotName, string api_version, GrantAccessData requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/snapshots/"+ (snapshotName==null? "" : System.Uri.EscapeDataString(snapshotName))+"/beginGetAccess&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccessUri>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revokes access to a snapshot.
		/// Snapshots_RevokeAccess subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}/endGetAccess
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="snapshotName">The name of the snapshot that is being created. The name can't be changed after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task Snapshots_RevokeAccessAsync(string subscriptionId, string resourceGroupName, string snapshotName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/snapshots/"+ (snapshotName==null? "" : System.Uri.EscapeDataString(snapshotName))+"/endGetAccess&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
