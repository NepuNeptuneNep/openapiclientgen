//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Android Policy entity for Intune MAM.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AndroidMAMPolicy : Resource
	{
		
		/// <summary>
		/// Intune MAM iOS Policy Properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AndroidMAMPolicyProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AndroidMAMPolicyCollection
	{
		
		/// <summary>
		/// Gets the URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextlink")]
		public string Nextlink { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AndroidMAMPolicy[] Value { get; set; }
	}
	
	/// <summary>
	/// Intune MAM iOS Policy Properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AndroidMAMPolicyProperties : MAMPolicyProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="fileEncryption")]
		public System.Nullable<AndroidMAMPolicyPropertiesFileEncryption> FileEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="screenCapture")]
		public System.Nullable<AndroidMAMPolicyPropertiesScreenCapture> ScreenCapture { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AndroidMAMPolicyPropertiesFileEncryption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		required = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notRequired = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AndroidMAMPolicyPropertiesScreenCapture
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		allow = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		block = 1,
	}
	
	/// <summary>
	/// Application entity for Intune MAM.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Application : Resource
	{
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ApplicationProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationCollection
	{
		
		/// <summary>
		/// Gets the URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextlink")]
		public string Nextlink { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Application[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(ApplicationPropertiesPlatform.ios)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public ApplicationPropertiesPlatform Platform { get; set; } = ApplicationPropertiesPlatform.ios;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApplicationPropertiesPlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ios = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		android = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		windows = 2,
	}
	
	/// <summary>
	/// Device entity for Intune.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Device : Resource
	{
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DeviceProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeviceCollection
	{
		
		/// <summary>
		/// Gets the URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextlink")]
		public string Nextlink { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Device[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeviceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deviceType")]
		public string DeviceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string Platform { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="platformVersion")]
		public string PlatformVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Error
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Flagged Enrolled App for the given tenant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FlaggedEnrolledApp : Resource
	{
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public FlaggedEnrolledAppProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Flagged Enrolled App collection for the given tenant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FlaggedEnrolledAppCollection
	{
		
		/// <summary>
		/// Gets the URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextlink")]
		public string Nextlink { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public FlaggedEnrolledApp[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FlaggedEnrolledAppError
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FlaggedEnrolledAppProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="deviceType")]
		public string DeviceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public FlaggedEnrolledAppError[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public string LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string Platform { get; set; }
	}
	
	/// <summary>
	/// Flagged user for the given tenant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FlaggedUser : Resource
	{
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public FlaggedUserProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Flagged user collection for the given tenant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FlaggedUserCollection
	{
		
		/// <summary>
		/// Gets the URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextlink")]
		public string Nextlink { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public FlaggedUser[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FlaggedUserProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorCount")]
		public System.Nullable<System.Int32> ErrorCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
	}
	
	/// <summary>
	/// Group entity for Intune MAM.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GroupItem : Resource
	{
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GroupProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GroupProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GroupsCollection
	{
		
		/// <summary>
		/// Gets the URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextlink")]
		public string Nextlink { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public GroupItem[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IOSMAMPolicyCollection
	{
		
		/// <summary>
		/// Gets the URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextlink")]
		public string Nextlink { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public IOSMAMPolicy[] Value { get; set; }
	}
	
	/// <summary>
	/// iOS Policy entity for Intune MAM.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IOSMAMPolicy : Resource
	{
		
		/// <summary>
		/// Intune MAM iOS Policy Properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public IOSMAMPolicyProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Location entity for given tenant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Location : Resource
	{
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public LocationProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LocationCollection
	{
		
		/// <summary>
		/// Gets the URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextlink")]
		public string Nextlink { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Location[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LocationProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hostName")]
		public string HostName { get; set; }
	}
	
	/// <summary>
	/// MAM Policy request body for properties Intune MAM.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MAMPolicyAppIdOrGroupIdPayload
	{
		
		/// <summary>
		/// Android Policy request body for Intune MAM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MAMPolicyAppOrGroupIdProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Android Policy request body for Intune MAM.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MAMPolicyAppOrGroupIdProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MAMPolicyProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessRecheckOfflineTimeout")]
		public string AccessRecheckOfflineTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessRecheckOnlineTimeout")]
		public string AccessRecheckOnlineTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appSharingFromLevel")]
		public System.Nullable<MAMPolicyPropertiesAppSharingFromLevel> AppSharingFromLevel { get; set; }
		
		[System.ComponentModel.DefaultValue(MAMPolicyPropertiesAppSharingFromLevel.none)]
		[System.Runtime.Serialization.DataMember(Name="appSharingToLevel")]
		public MAMPolicyPropertiesAppSharingFromLevel AppSharingToLevel { get; set; } = MAMPolicyPropertiesAppSharingFromLevel.none;
		
		[System.ComponentModel.DefaultValue(AndroidMAMPolicyPropertiesFileEncryption.required)]
		[System.Runtime.Serialization.DataMember(Name="authentication")]
		public AndroidMAMPolicyPropertiesFileEncryption Authentication { get; set; } = AndroidMAMPolicyPropertiesFileEncryption.required;
		
		[System.Runtime.Serialization.DataMember(Name="clipboardSharingLevel")]
		public System.Nullable<MAMPolicyPropertiesClipboardSharingLevel> ClipboardSharingLevel { get; set; }
		
		[System.ComponentModel.DefaultValue(AndroidMAMPolicyPropertiesScreenCapture.allow)]
		[System.Runtime.Serialization.DataMember(Name="dataBackup")]
		public AndroidMAMPolicyPropertiesScreenCapture DataBackup { get; set; } = AndroidMAMPolicyPropertiesScreenCapture.allow;
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceCompliance")]
		public System.Nullable<MAMPolicyPropertiesDeviceCompliance> DeviceCompliance { get; set; }
		
		[System.ComponentModel.DefaultValue(AndroidMAMPolicyPropertiesScreenCapture.allow)]
		[System.Runtime.Serialization.DataMember(Name="fileSharingSaveAs")]
		public AndroidMAMPolicyPropertiesScreenCapture FileSharingSaveAs { get; set; } = AndroidMAMPolicyPropertiesScreenCapture.allow;
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupStatus")]
		public System.Nullable<MAMPolicyPropertiesGroupStatus> GroupStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		[System.ComponentModel.DefaultValue(AndroidMAMPolicyPropertiesFileEncryption.required)]
		[System.Runtime.Serialization.DataMember(Name="managedBrowser")]
		public AndroidMAMPolicyPropertiesFileEncryption ManagedBrowser { get; set; } = AndroidMAMPolicyPropertiesFileEncryption.required;
		
		[System.Runtime.Serialization.DataMember(Name="numOfApps")]
		public System.Nullable<System.Int32> NumOfApps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offlineWipeTimeout")]
		public string OfflineWipeTimeout { get; set; }
		
		[System.ComponentModel.DefaultValue(AndroidMAMPolicyPropertiesFileEncryption.required)]
		[System.Runtime.Serialization.DataMember(Name="pin")]
		public AndroidMAMPolicyPropertiesFileEncryption Pin { get; set; } = AndroidMAMPolicyPropertiesFileEncryption.required;
		
		[System.Runtime.Serialization.DataMember(Name="pinNumRetry")]
		public System.Nullable<System.Int32> PinNumRetry { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MAMPolicyPropertiesAppSharingFromLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		policyManagedApps = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		allApps = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MAMPolicyPropertiesClipboardSharingLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		blocked = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		policyManagedApps = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		policyManagedAppsWithPasteIn = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		allApps = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MAMPolicyPropertiesDeviceCompliance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disable = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MAMPolicyPropertiesGroupStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notTargeted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		targeted = 1,
	}
	
	/// <summary>
	/// OperationResult entity for Intune.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationResult : Resource
	{
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public OperationResultProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationResultCollection
	{
		
		/// <summary>
		/// Gets the URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextlink")]
		public string Nextlink { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public OperationResult[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationResultProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public string LastModifiedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operationMetadata")]
		public OperationMetadataProperties[] OperationMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationMetadataProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource Location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Default Statuses entity for the given tenant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StatusesDefault : Resource
	{
		
		/// <summary>
		/// Gets the URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextlink")]
		public string Nextlink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public StatusesProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StatusesProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="deployedPolicies")]
		public System.Nullable<System.Int32> DeployedPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enrolledUsers")]
		public System.Nullable<System.Int32> EnrolledUsers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flaggedUsers")]
		public System.Nullable<System.Int32> FlaggedUsers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyAppliedUsers")]
		public System.Nullable<System.Int32> PolicyAppliedUsers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wipeFailedApps")]
		public System.Nullable<System.Int32> WipeFailedApps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wipePendingApps")]
		public System.Nullable<System.Int32> WipePendingApps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wipeSucceededApps")]
		public System.Nullable<System.Int32> WipeSucceededApps { get; set; }
	}
	
	/// <summary>
	/// Device entity for Intune.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WipeDeviceOperationResult : Resource
	{
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WipeDeviceOperationResultProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WipeDeviceOperationResultProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Intune MAM iOS Policy Properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IOSMAMPolicyProperties : MAMPolicyProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="fileEncryptionLevel")]
		public System.Nullable<IOSMAMPolicyPropertiesFileEncryptionLevel> FileEncryptionLevel { get; set; }
		
		[System.ComponentModel.DefaultValue(MAMPolicyPropertiesDeviceCompliance.enable)]
		[System.Runtime.Serialization.DataMember(Name="touchId")]
		public MAMPolicyPropertiesDeviceCompliance TouchId { get; set; } = MAMPolicyPropertiesDeviceCompliance.enable;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IOSMAMPolicyPropertiesFileEncryptionLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deviceLocked = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deviceLockedExceptFilesOpen = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		afterDeviceRestart = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		useDeviceSettings = 3,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns location for user tenant.
		/// GetLocations providers/Microsoft.Intune/locations
		/// </summary>
		/// <param name="api_version">Service Api Version.</param>
		/// <returns>location response as a collection</returns>
		public async Task<LocationCollection> GetLocationsAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Intune/locations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LocationCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns location for given tenant.
		/// GetLocationByHostName providers/Microsoft.Intune/locations/hostName
		/// </summary>
		/// <param name="api_version">Service Api Version.</param>
		/// <returns>single location response</returns>
		public async Task<Location> GetLocationByHostNameAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Intune/locations/hostName?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Location>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get apps for an AndroidMAMPolicy.
		/// Android_GetAppForMAMPolicy providers/Microsoft.Intune/locations/{hostName}/AndroidPolicies/{policyName}/apps
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="policyName">Unique name for the policy</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <param name="filter">The filter to apply on the operation.</param>
		/// <param name="select">select specific fields in entity.</param>
		/// <returns>applications as collection response</returns>
		public async Task<ApplicationCollection> Android_GetAppForMAMPolicyAsync(string hostName, string policyName, string api_version, string filter, int top, string select)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/AndroidPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"/apps&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplicationCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns Intune Android policies.
		/// Android_GetMAMPolicies providers/Microsoft.Intune/locations/{hostName}/androidPolicies
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <param name="filter">The filter to apply on the operation.</param>
		/// <param name="select">select specific fields in entity.</param>
		/// <returns>android Policies response</returns>
		public async Task<AndroidMAMPolicyCollection> Android_GetMAMPoliciesAsync(string hostName, string api_version, string filter, int top, string select)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/androidPolicies&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AndroidMAMPolicyCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns AndroidMAMPolicy with given name.
		/// Android_GetMAMPolicyByName providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="policyName">Unique name for the policy</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <param name="select">select specific fields in entity.</param>
		/// <returns>iOSMAMPolicy entity.</returns>
		public async Task<AndroidMAMPolicy> Android_GetMAMPolicyByNameAsync(string hostName, string policyName, string api_version, string select)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/androidPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AndroidMAMPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates AndroidMAMPolicy.
		/// Android_CreateOrUpdateMAMPolicy providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="policyName">Unique name for the policy</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the Create or update an android policy operation.</param>
		/// <returns>android entity.</returns>
		public async Task<AndroidMAMPolicy> Android_CreateOrUpdateMAMPolicyAsync(string hostName, string policyName, string api_version, AndroidMAMPolicy requestBody)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/androidPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AndroidMAMPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Android Policy
		/// Android_DeleteMAMPolicy providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="policyName">Unique name for the policy</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <returns>No-Content.</returns>
		public async Task Android_DeleteMAMPolicyAsync(string hostName, string policyName, string api_version)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/androidPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patch AndroidMAMPolicy.
		/// Android_PatchMAMPolicy providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="policyName">Unique name for the policy</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the Create or update an android policy operation.</param>
		/// <returns>android entity.</returns>
		public async Task<AndroidMAMPolicy> Android_PatchMAMPolicyAsync(string hostName, string policyName, string api_version, AndroidMAMPolicy requestBody)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/androidPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AndroidMAMPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add app to an AndroidMAMPolicy.
		/// Android_AddAppForMAMPolicy providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}/apps/{appName}
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="policyName">Unique name for the policy</param>
		/// <param name="appName">application unique Name</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the Create or update app to an android policy operation.</param>
		/// <returns>No-Content.</returns>
		public async Task Android_AddAppForMAMPolicyAsync(string hostName, string policyName, string appName, string api_version, MAMPolicyAppIdOrGroupIdPayload requestBody)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/androidPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete App for Android Policy
		/// Android_DeleteAppForMAMPolicy providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}/apps/{appName}
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="policyName">Unique name for the policy</param>
		/// <param name="appName">application unique Name</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <returns>No-Content.</returns>
		public async Task Android_DeleteAppForMAMPolicyAsync(string hostName, string policyName, string appName, string api_version)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/androidPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns groups for a given AndroidMAMPolicy.
		/// Android_GetGroupsForMAMPolicy providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}/groups
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="policyName">policy name for the tenant</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <returns>groups as collection response</returns>
		public async Task<GroupsCollection> Android_GetGroupsForMAMPolicyAsync(string hostName, string policyName, string api_version)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/androidPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"/groups&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GroupsCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add group to an AndroidMAMPolicy.
		/// Android_AddGroupForMAMPolicy providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}/groups/{groupId}
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="policyName">Unique name for the policy</param>
		/// <param name="groupId">group Id</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the Create or update app to an android policy operation.</param>
		/// <returns>No-Content.</returns>
		public async Task Android_AddGroupForMAMPolicyAsync(string hostName, string policyName, string groupId, string api_version, MAMPolicyAppIdOrGroupIdPayload requestBody)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/androidPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"/groups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Group for Android Policy
		/// Android_DeleteGroupForMAMPolicy providers/Microsoft.Intune/locations/{hostName}/androidPolicies/{policyName}/groups/{groupId}
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="policyName">Unique name for the policy</param>
		/// <param name="groupId">application unique Name</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <returns>No-Content.</returns>
		public async Task Android_DeleteGroupForMAMPolicyAsync(string hostName, string policyName, string groupId, string api_version)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/androidPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"/groups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns Intune Manageable apps.
		/// GetApps providers/Microsoft.Intune/locations/{hostName}/apps
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <param name="filter">The filter to apply on the operation.</param>
		/// <param name="select">select specific fields in entity.</param>
		/// <returns>applications as collection response</returns>
		public async Task<ApplicationCollection> GetAppsAsync(string hostName, string api_version, string filter, int top, string select)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/apps&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplicationCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns Intune flagged user collection
		/// GetMAMFlaggedUsers providers/Microsoft.Intune/locations/{hostName}/flaggedUsers
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <param name="filter">The filter to apply on the operation.</param>
		/// <param name="select">select specific fields in entity.</param>
		/// <returns>Flagged users as collection response</returns>
		public async Task<FlaggedUserCollection> GetMAMFlaggedUsersAsync(string hostName, string api_version, string filter, int top, string select)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/flaggedUsers&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FlaggedUserCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns Intune flagged user details
		/// GetMAMFlaggedUserByName providers/Microsoft.Intune/locations/{hostName}/flaggedUsers/{userName}
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="userName">Flagged userName</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <param name="select">select specific fields in entity.</param>
		/// <returns>Flagged user details in response</returns>
		public async Task<FlaggedUser> GetMAMFlaggedUserByNameAsync(string hostName, string userName, string api_version, string select)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/flaggedUsers/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FlaggedUser>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns Intune flagged enrolled app collection for the User
		/// GetMAMUserFlaggedEnrolledApps providers/Microsoft.Intune/locations/{hostName}/flaggedUsers/{userName}/flaggedEnrolledApps
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="userName">User name for the tenant</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <param name="filter">The filter to apply on the operation.</param>
		/// <param name="select">select specific fields in entity.</param>
		/// <returns>Flagged enrolled Apps as collection response</returns>
		public async Task<FlaggedEnrolledAppCollection> GetMAMUserFlaggedEnrolledAppsAsync(string hostName, string userName, string api_version, string filter, int top, string select)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/flaggedUsers/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/flaggedEnrolledApps&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FlaggedEnrolledAppCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns Intune iOSPolicies.
		/// Ios_GetMAMPolicies providers/Microsoft.Intune/locations/{hostName}/iosPolicies
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <param name="filter">The filter to apply on the operation.</param>
		/// <param name="select">select specific fields in entity.</param>
		/// <returns>applications as collection response</returns>
		public async Task<IOSMAMPolicyCollection> Ios_GetMAMPoliciesAsync(string hostName, string api_version, string filter, int top, string select)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/iosPolicies&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<IOSMAMPolicyCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns Intune iOS policies.
		/// Ios_GetMAMPolicyByName providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="policyName">Unique name for the policy</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <param name="select">select specific fields in entity.</param>
		/// <returns>iOSMAMPolicy entity.</returns>
		public async Task<IOSMAMPolicy> Ios_GetMAMPolicyByNameAsync(string hostName, string policyName, string api_version, string select)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/iosPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<IOSMAMPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates iOSMAMPolicy.
		/// Ios_CreateOrUpdateMAMPolicy providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="policyName">Unique name for the policy</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the Create or update an android policy operation.</param>
		/// <returns>iOSMAMPolicy entity.</returns>
		public async Task<IOSMAMPolicy> Ios_CreateOrUpdateMAMPolicyAsync(string hostName, string policyName, string api_version, IOSMAMPolicy requestBody)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/iosPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<IOSMAMPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Ios Policy
		/// Ios_DeleteMAMPolicy providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="policyName">Unique name for the policy</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <returns>No-Content.</returns>
		public async Task Ios_DeleteMAMPolicyAsync(string hostName, string policyName, string api_version)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/iosPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// patch an iOSMAMPolicy.
		/// Ios_PatchMAMPolicy providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="policyName">Unique name for the policy</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the Create or update an android policy operation.</param>
		/// <returns>iOSMAMPolicy entity.</returns>
		public async Task<IOSMAMPolicy> Ios_PatchMAMPolicyAsync(string hostName, string policyName, string api_version, IOSMAMPolicy requestBody)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/iosPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<IOSMAMPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get apps for an iOSMAMPolicy.
		/// Ios_GetAppForMAMPolicy providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}/apps
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="policyName">Unique name for the policy</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <param name="filter">The filter to apply on the operation.</param>
		/// <param name="select">select specific fields in entity.</param>
		/// <returns>applications as collection response</returns>
		public async Task<ApplicationCollection> Ios_GetAppForMAMPolicyAsync(string hostName, string policyName, string api_version, string filter, int top, string select)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/iosPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"/apps&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplicationCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add app to an iOSMAMPolicy.
		/// Ios_AddAppForMAMPolicy providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}/apps/{appName}
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="policyName">Unique name for the policy</param>
		/// <param name="appName">application unique Name</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <param name="requestBody">Parameters supplied to add an app to an ios policy.</param>
		/// <returns>No-Content.</returns>
		public async Task Ios_AddAppForMAMPolicyAsync(string hostName, string policyName, string appName, string api_version, MAMPolicyAppIdOrGroupIdPayload requestBody)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/iosPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete App for Ios Policy
		/// Ios_DeleteAppForMAMPolicy providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}/apps/{appName}
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="policyName">Unique name for the policy</param>
		/// <param name="appName">application unique Name</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <returns>No-Content.</returns>
		public async Task Ios_DeleteAppForMAMPolicyAsync(string hostName, string policyName, string appName, string api_version)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/iosPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns groups for a given iOSMAMPolicy.
		/// Ios_GetGroupsForMAMPolicy providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}/groups
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="policyName">policy name for the tenant</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <returns>groups as collection response</returns>
		public async Task<GroupsCollection> Ios_GetGroupsForMAMPolicyAsync(string hostName, string policyName, string api_version)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/iosPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"/groups&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GroupsCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add group to an iOSMAMPolicy.
		/// Ios_AddGroupForMAMPolicy providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}/groups/{groupId}
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="policyName">Unique name for the policy</param>
		/// <param name="groupId">group Id</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the Create or update app to an android policy operation.</param>
		/// <returns>No-Content.</returns>
		public async Task Ios_AddGroupForMAMPolicyAsync(string hostName, string policyName, string groupId, string api_version, MAMPolicyAppIdOrGroupIdPayload requestBody)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/iosPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"/groups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Group for iOS Policy
		/// Ios_DeleteGroupForMAMPolicy providers/Microsoft.Intune/locations/{hostName}/iosPolicies/{policyName}/groups/{groupId}
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="policyName">Unique name for the policy</param>
		/// <param name="groupId">application unique Name</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <returns>No-Content.</returns>
		public async Task Ios_DeleteGroupForMAMPolicyAsync(string hostName, string policyName, string groupId, string api_version)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/iosPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"/groups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns operationResults.
		/// GetOperationResults providers/Microsoft.Intune/locations/{hostName}/operationResults
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <param name="filter">The filter to apply on the operation.</param>
		/// <param name="select">select specific fields in entity.</param>
		/// <returns>applications as collection response</returns>
		public async Task<OperationResultCollection> GetOperationResultsAsync(string hostName, string api_version, string filter, int top, string select)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/operationResults&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationResultCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns Intune Tenant level statuses.
		/// GetMAMStatuses providers/Microsoft.Intune/locations/{hostName}/statuses/default
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <returns>applications as collection response</returns>
		public async Task<StatusesDefault> GetMAMStatusesAsync(string hostName, string api_version)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/statuses/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StatusesDefault>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get devices for a user.
		/// GetMAMUserDevices providers/Microsoft.Intune/locations/{hostName}/users/{userName}/devices
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="userName">user unique Name</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <param name="filter">The filter to apply on the operation.</param>
		/// <param name="select">select specific fields in entity.</param>
		/// <returns>devices as collection response</returns>
		public async Task<DeviceCollection> GetMAMUserDevicesAsync(string hostName, string userName, string api_version, string filter, int top, string select)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/devices&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeviceCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a unique device for a user.
		/// GetMAMUserDeviceByDeviceName providers/Microsoft.Intune/locations/{hostName}/users/{userName}/devices/{deviceName}
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="userName">unique user name</param>
		/// <param name="deviceName">device name</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <param name="select">select specific fields in entity.</param>
		/// <returns>Device entity.</returns>
		public async Task<Device> GetMAMUserDeviceByDeviceNameAsync(string hostName, string userName, string deviceName, string api_version, string select)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/devices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Device>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Wipe a device for a user.
		/// WipeMAMUserDevice providers/Microsoft.Intune/locations/{hostName}/users/{userName}/devices/{deviceName}/wipe
		/// </summary>
		/// <param name="hostName">Location hostName for the tenant</param>
		/// <param name="userName">unique user name</param>
		/// <param name="deviceName">device name</param>
		/// <param name="api_version">Service Api Version.</param>
		/// <returns>Wipe operation result.</returns>
		public async Task<WipeDeviceOperationResult> WipeMAMUserDeviceAsync(string hostName, string userName, string deviceName, string api_version)
		{
			var requestUri = "providers/Microsoft.Intune/locations/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/devices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/wipe&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WipeDeviceOperationResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
