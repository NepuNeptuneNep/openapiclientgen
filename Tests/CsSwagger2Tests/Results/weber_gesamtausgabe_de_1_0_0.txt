//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CodeSample
	{
		
		/// <summary>
		/// The code snippet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codeSample")]
		public string CodeSample1 { get; set; }
		
		/// <summary>
		/// The WeGA document identifier representing a specific document
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="docID")]
		public string DocID { get; set; }
		
		/// <summary>
		/// Unique identifier representing a specific document
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Document
	{
		
		/// <summary>
		/// The WeGA document identifier representing a specific document
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="docID")]
		public string DocID { get; set; }
		
		/// <summary>
		/// The WeGA document type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="docType")]
		public string DocType { get; set; }
		
		/// <summary>
		/// The title of the document
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Unique identifier representing a specific document
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Error
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SvnHistoryPatch
	{
		
		/// <summary>
		/// The Subversion commit author
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		/// <summary>
		/// The Subversion commit dateTime
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateTime")]
		public string DateTime { get; set; }
		
		/// <summary>
		/// The Subversion path, starting from the repository root
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// The Subversion commit revision
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rev")]
		public System.Nullable<System.Int32> Rev { get; set; }
		
		/// <summary>
		/// Unique identifier representing a specific document
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Create a new WeGA ID
		/// ApplicationGetByDocType application/newID
		/// </summary>
		/// <param name="docType">The WeGA document type</param>
		/// <returns>A single object with a fresh WeGA ID</returns>
		public async Task<ApplicationGetByDocTypeReturn> ApplicationGetByDocTypeAsync(string[] docType)
		{
			var requestUri = "application/newID?"+string.Join("&", docType.Select(z => $"docType={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplicationGetByDocTypeReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get status information about the running WeGA-WebApp
		/// ApplicationGet application/status
		/// </summary>
		/// <returns>A single object with status information</returns>
		public async Task<ApplicationGetReturn> ApplicationGetAsync()
		{
			var requestUri = "application/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplicationGetReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Finds code samples by XML element
		/// Code_SamplesGetByElementAnd_namespaceAndDocTypeAndOffsetAndLimit code/findByElement/{element}
		/// </summary>
		/// <param name="element">The XML element to search for</param>
		/// <param name="_namespace">The element namespace. Defaults to the TEI namespace</param>
		/// <param name="docType">The WeGA document type</param>
		/// <param name="offset">Position of first item to retrieve (starting from 1)
		/// Minimum: 1
		// </param>
		/// <param name="limit">Number of items to retrieve (200 max)
		/// Maximum: 200
		// </param>
		/// <returns>An array of documents</returns>
		public async Task<CodeSample[]> Code_SamplesGetByElementAnd_namespaceAndDocTypeAndOffsetAndLimitAsync(string element, string _namespace, string[] docType, int offset, int limit)
		{
			var requestUri = "code/findByElement/"+ (element==null? "" : System.Uri.EscapeDataString(element))+"&namespace=" + (_namespace==null? "" : System.Uri.EscapeDataString(_namespace))+"&"+string.Join("&", docType.Select(z => $"docType={System.Uri.EscapeDataString(z.ToString())}"))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CodeSample[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all documents
		/// The Documents endpoint returns a list of all documents from the WeGA digital edition.
		/// 
		/// DocumentsGetByDocTypeAndOffsetAndLimit documents
		/// </summary>
		/// <param name="docType">The WeGA document type</param>
		/// <param name="offset">Position of first item to retrieve (starting from 1)
		/// Minimum: 1
		// </param>
		/// <param name="limit">Number of items to retrieve (200 max)
		/// Maximum: 200
		// </param>
		/// <returns>An array of documents</returns>
		public async Task<Document[]> DocumentsGetByDocTypeAndOffsetAndLimitAsync(string[] docType, int offset, int limit)
		{
			var requestUri = "documents?"+string.Join("&", docType.Select(z => $"docType={System.Uri.EscapeDataString(z.ToString())}"))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Document[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Finds documents by author
		/// This endpoint returns a list of documents by a given author â€“ optionally filtered by document type
		/// 
		/// DocumentsGetByAuthorIDAndDocTypeAndOffsetAndLimit documents/findByAuthor/{authorID}
		/// </summary>
		/// <param name="authorID">The author ID to search for. Accepted ID formats are WeGA, e.g. A002068 or http://weber-gesamtausgabe.de/A002068, VIAF, e.g. http://viaf.org/viaf/310642461, or  GND, e.g. http://d-nb.info/gnd/118629662
		///</param>
		/// <param name="docType">The WeGA document type</param>
		/// <param name="offset">Position of first item to retrieve (starting from 1)
		/// Minimum: 1
		// </param>
		/// <param name="limit">Number of items to retrieve (200 max)
		/// Maximum: 200
		// </param>
		/// <returns>An array of documents</returns>
		public async Task<Document[]> DocumentsGetByAuthorIDAndDocTypeAndOffsetAndLimitAsync(string authorID, string[] docType, int offset, int limit)
		{
			var requestUri = "documents/findByAuthor/"+ (authorID==null? "" : System.Uri.EscapeDataString(authorID))+"&"+string.Join("&", docType.Select(z => $"docType={System.Uri.EscapeDataString(z.ToString())}"))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Document[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Finds documents by date
		/// This endpoint returns a list of documents related to the given date â€“ optionally filtered by document type.
		/// 
		/// DocumentsGetByFromDateAndToDateAndDocTypeAndOffsetAndLimit documents/findByDate
		/// </summary>
		/// <param name="fromDate">The min date to search for</param>
		/// <param name="toDate">The max date to search for</param>
		/// <param name="docType">The WeGA document type</param>
		/// <param name="offset">Position of first item to retrieve (starting from 1)
		/// Minimum: 1
		// </param>
		/// <param name="limit">Number of items to retrieve (200 max)
		/// Maximum: 200
		// </param>
		/// <returns>An array of documents</returns>
		public async Task<Document[]> DocumentsGetByFromDateAndToDateAndDocTypeAndOffsetAndLimitAsync(System.DateOnly fromDate, System.DateOnly toDate, string[] docType, int offset, int limit)
		{
			var requestUri = "documents/findByDate?fromDate="+fromDate+"&toDate="+toDate+"&"+string.Join("&", docType.Select(z => $"docType={System.Uri.EscapeDataString(z.ToString())}"))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Document[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Finds documents by reference
		/// This endpoint returns a list of documents that reference a particular docID â€“ optionally filtered by document type.
		/// 
		/// DocumentsGetByDocIDAndDocTypeAndOffsetAndLimit documents/findByMention/{docID}
		/// </summary>
		/// <param name="docID">The document ID that is to be mentioned. Accepted ID formats are WeGA, e.g. A002068 or http://weber-gesamtausgabe.de/A002068, VIAF, e.g. http://viaf.org/viaf/310642461, or  GND, e.g. http://d-nb.info/gnd/118629662
		///</param>
		/// <param name="docType">The WeGA document type</param>
		/// <param name="offset">Position of first item to retrieve (starting from 1)
		/// Minimum: 1
		// </param>
		/// <param name="limit">Number of items to retrieve (200 max)
		/// Maximum: 200
		// </param>
		/// <returns>An array of documents</returns>
		public async Task<Document[]> DocumentsGetByDocIDAndDocTypeAndOffsetAndLimitAsync(string docID, string[] docType, int offset, int limit)
		{
			var requestUri = "documents/findByMention/"+ (docID==null? "" : System.Uri.EscapeDataString(docID))+"&"+string.Join("&", docType.Select(z => $"docType={System.Uri.EscapeDataString(z.ToString())}"))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Document[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns documents by ID
		/// This endpoint returns documents, indicated by an ID.
		/// Accepted ID formats are WeGA, e.g. A002068 or http://weber-gesamtausgabe.de/A002068, VIAF, e.g. http://viaf.org/viaf/310642461, or  GND, e.g. http://d-nb.info/gnd/118629662
		/// 
		/// DocumentsGetByDocID documents/{docID}
		/// </summary>
		/// <param name="docID">The document identifier to search for</param>
		/// <returns>An array of documents</returns>
		public async Task<Document[]> DocumentsGetByDocIDAsync(string docID)
		{
			var requestUri = "documents/"+ (docID==null? "" : System.Uri.EscapeDataString(docID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Document[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class ApplicationGetByDocTypeReturn
	{
		
		/// <summary>
		/// The WeGA ID
		/// Pattern: ^A[A-F0-9]{6}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="docID")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^A[A-F0-9]{6}$")]
		public string DocID { get; set; }
		
		/// <summary>
		/// The WeGA document type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="docType")]
		public string DocType { get; set; }
	}
	
	public class ApplicationGetReturn
	{
		
		/// <summary>
		/// The datetime of the deployment of the WeGA-WebApp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deployment")]
		public System.Nullable<System.DateTimeOffset> Deployment { get; set; }
		
		/// <summary>
		/// Status (healthy|unhealthy) of the currently running WeGA-WebApp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ApplicationGetReturnStatus> Status { get; set; }
		
		/// <summary>
		/// The Subversion revision of the currently installed WeGA-data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="svnRevision")]
		public System.Nullable<System.Int32> SvnRevision { get; set; }
		
		/// <summary>
		/// Pattern: ^\d+\.\d+\.\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+\.\d+\.\d+$")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApplicationGetReturnStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		healthy = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unhealthy = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
