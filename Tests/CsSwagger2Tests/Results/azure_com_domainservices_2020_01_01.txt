//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An error response from the Domain Services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// An error response from the Domain Services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CloudErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// An error response from the Domain Services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudErrorBody
	{
		
		/// <summary>
		/// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A list of additional details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public CloudErrorBody[] Details { get; set; }
		
		/// <summary>
		/// A message describing the error, intended to be suitable for display in a user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error. For example, the name of the property in error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Domain Security Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DomainSecuritySettings
	{
		
		/// <summary>
		/// A flag to determine whether or not NtlmV1 is enabled or disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ntlmV1")]
		public System.Nullable<DomainSecuritySettingsNtlmV1> NtlmV1 { get; set; }
		
		/// <summary>
		/// A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncNtlmPasswords")]
		public DomainSecuritySettingsNtlmV1 SyncNtlmPasswords { get; set; }
		
		/// <summary>
		/// A flag to determine whether or not TlsV1 is enabled or disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tlsV1")]
		public DomainSecuritySettingsNtlmV1 TlsV1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DomainSecuritySettingsNtlmV1
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// Domain service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DomainService : Resource
	{
		
		/// <summary>
		/// Properties of the Domain Service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DomainServiceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The response from the List Domain Services operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DomainServiceListResult
	{
		
		/// <summary>
		/// The continuation token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// the list of domain services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DomainService[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of the Domain Service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DomainServiceProperties
	{
		
		/// <summary>
		/// Deployment Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		/// <summary>
		/// The name of the Azure domain that the user would like to deploy Domain Services to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Domain Security Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainSecuritySettings")]
		public DomainSecuritySettings DomainSecuritySettings { get; set; }
		
		/// <summary>
		/// Enabled or Disabled flag to turn on Group-based filtered sync
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filteredSync")]
		public DomainSecuritySettingsNtlmV1 FilteredSync { get; set; }
		
		/// <summary>
		/// Secure LDAP Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ldapsSettings")]
		public LdapsSettings LdapsSettings { get; set; }
		
		/// <summary>
		/// Settings for notification
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationSettings")]
		public NotificationSettings NotificationSettings { get; set; }
		
		/// <summary>
		/// the current deployment or provisioning state, which only appears in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// List of ReplicaSets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicaSets")]
		public ReplicaSet[] ReplicaSets { get; set; }
		
		/// <summary>
		/// SyncOwner ReplicaSet Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncOwner")]
		public string SyncOwner { get; set; }
		
		/// <summary>
		/// Azure Active Directory Tenant Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Data Model Version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Replica Set Definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ReplicaSet
	{
		
		/// <summary>
		/// List of Domain Controller IP Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainControllerIpAddress")]
		public string[] DomainControllerIpAddress { get; set; }
		
		/// <summary>
		/// External access ip address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalAccessIpAddress")]
		public string ExternalAccessIpAddress { get; set; }
		
		/// <summary>
		/// List of Domain Health Alerts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthAlerts")]
		public HealthAlert[] HealthAlerts { get; set; }
		
		/// <summary>
		/// Last domain evaluation run DateTime
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthLastEvaluated")]
		public System.Nullable<System.DateTimeOffset> HealthLastEvaluated { get; set; }
		
		/// <summary>
		/// List of Domain Health Monitors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthMonitors")]
		public HealthMonitor[] HealthMonitors { get; set; }
		
		/// <summary>
		/// Virtual network location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// ReplicaSet Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicaSetId")]
		public string ReplicaSetId { get; set; }
		
		/// <summary>
		/// Status of Domain Service instance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceStatus")]
		public string ServiceStatus { get; set; }
		
		/// <summary>
		/// The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetId")]
		public string SubnetId { get; set; }
		
		/// <summary>
		/// Virtual network site id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vnetSiteId")]
		public string VnetSiteId { get; set; }
	}
	
	/// <summary>
	/// Health Alert Description
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HealthAlert
	{
		
		/// <summary>
		/// Health Alert Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Health Alert Issue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issue")]
		public string Issue { get; set; }
		
		/// <summary>
		/// Health Alert Last Detected DateTime
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastDetected")]
		public System.Nullable<System.DateTimeOffset> LastDetected { get; set; }
		
		/// <summary>
		/// Health Alert Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Health Alert Raised DateTime
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="raised")]
		public System.Nullable<System.DateTimeOffset> Raised { get; set; }
		
		/// <summary>
		/// Health Alert TSG Link
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolutionUri")]
		public string ResolutionUri { get; set; }
		
		/// <summary>
		/// Health Alert Severity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
	}
	
	/// <summary>
	/// Health Monitor Description
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HealthMonitor
	{
		
		/// <summary>
		/// Health Monitor Details
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// Health Monitor Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Health Monitor Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Secure LDAP Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LdapsSettings
	{
		
		/// <summary>
		/// NotAfter DateTime of configure ldaps certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateNotAfter")]
		public System.Nullable<System.DateTimeOffset> CertificateNotAfter { get; set; }
		
		/// <summary>
		/// Thumbprint of configure ldaps certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateThumbprint")]
		public string CertificateThumbprint { get; set; }
		
		/// <summary>
		/// A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalAccess")]
		public DomainSecuritySettingsNtlmV1 ExternalAccess { get; set; }
		
		/// <summary>
		/// A flag to determine whether or not Secure LDAP is enabled or disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ldaps")]
		public DomainSecuritySettingsNtlmV1 Ldaps { get; set; }
		
		/// <summary>
		/// The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pfxCertificate")]
		public string PfxCertificate { get; set; }
		
		/// <summary>
		/// The password to decrypt the provided Secure LDAP certificate pfx file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pfxCertificatePassword")]
		public string PfxCertificatePassword { get; set; }
		
		/// <summary>
		/// Public certificate used to configure secure ldap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicCertificate")]
		public string PublicCertificate { get; set; }
	}
	
	/// <summary>
	/// Settings for notification
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NotificationSettings
	{
		
		/// <summary>
		/// The list of additional recipients
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalRecipients")]
		public string[] AdditionalRecipients { get; set; }
		
		/// <summary>
		/// Should domain controller admins be notified
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifyDcAdmins")]
		public DomainSecuritySettingsNtlmV1 NotifyDcAdmins { get; set; }
		
		/// <summary>
		/// Should global admins be notified
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifyGlobalAdmins")]
		public DomainSecuritySettingsNtlmV1 NotifyGlobalAdmins { get; set; }
	}
	
	/// <summary>
	/// The operation supported by Domain Services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDisplayInfo
	{
		
		/// <summary>
		/// The description of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The action that users can perform, based on their permission level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Service provider: Domain Services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Resource on which the operation is performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// The operation supported by Domain Services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationEntity
	{
		
		/// <summary>
		/// The operation supported by Domain Services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplayInfo Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The origin of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
	}
	
	/// <summary>
	/// The list of domain service operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationEntityListResult
	{
		
		/// <summary>
		/// The continuation token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public OperationEntity[] Value { get; set; }
	}
	
	/// <summary>
	/// The Resource model definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource etag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all the available Domain Services operations.
		/// DomainServiceOperations_List providers/Microsoft.AAD/operations
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>HTTP 200 (OK) if the operation was successful.</returns>
		public async Task<OperationEntityListResult> DomainServiceOperations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.AAD/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationEntityListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Domain Services in Subscription
		/// The List Domain Services in Subscription operation lists all the domain services available under the given subscription (and across all resource groups within that subscription).
		/// DomainServices_List subscriptions/{subscriptionId}/providers/Microsoft.AAD/domainServices
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>HTTP 200 (OK) if the operation was successful.</returns>
		public async Task<DomainServiceListResult> DomainServices_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.AAD/domainServices?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DomainServiceListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Domain Services in Resource Group
		/// The List Domain Services in Resource Group operation lists all the domain services available under the given resource group.
		/// DomainServices_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <returns>HTTP 200 (OK) if the operation was successful.</returns>
		public async Task<DomainServiceListResult> DomainServices_ListByResourceGroupAsync(string api_version, string subscriptionId, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AAD/domainServices?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DomainServiceListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Domain Service
		/// The Get Domain Service operation retrieves a json representation of the Domain Service.
		/// DomainServices_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices/{domainServiceName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="domainServiceName">The name of the domain service.</param>
		/// <returns>HTTP 200 (OK) if the operation was successful.</returns>
		public async Task<DomainService> DomainServices_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string domainServiceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AAD/domainServices/"+ (domainServiceName==null? "" : System.Uri.EscapeDataString(domainServiceName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DomainService>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or Update Domain Service (PUT Resource)
		/// The Create Domain Service operation creates a new domain service with the specified parameters. If the specific service already exists, then any patchable properties will be updated and any immutable properties will remain unchanged.
		/// DomainServices_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices/{domainServiceName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="domainServiceName">The name of the domain service.</param>
		/// <param name="requestBody">Properties supplied to the Create or Update a Domain Service operation.</param>
		/// <returns>HTTP 200 (OK) if the operation was successful.</returns>
		public async Task<DomainService> DomainServices_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string domainServiceName, DomainService requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AAD/domainServices/"+ (domainServiceName==null? "" : System.Uri.EscapeDataString(domainServiceName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DomainService>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Domain Service (DELETE Resource)
		/// The Delete Domain Service operation deletes an existing Domain Service.
		/// DomainServices_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices/{domainServiceName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="domainServiceName">The name of the domain service.</param>
		public async Task DomainServices_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string domainServiceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AAD/domainServices/"+ (domainServiceName==null? "" : System.Uri.EscapeDataString(domainServiceName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Domain Service (PATCH Resource)
		/// The Update Domain Service operation can be used to update the existing deployment. The update call only supports the properties listed in the PATCH body.
		/// DomainServices_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices/{domainServiceName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="domainServiceName">The name of the domain service.</param>
		/// <param name="requestBody">Properties supplied to the Update a Domain Service operation.</param>
		/// <returns>HTTP 200 (OK) if the operation was successful.</returns>
		public async Task<DomainService> DomainServices_UpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string domainServiceName, DomainService requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AAD/domainServices/"+ (domainServiceName==null? "" : System.Uri.EscapeDataString(domainServiceName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DomainService>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
