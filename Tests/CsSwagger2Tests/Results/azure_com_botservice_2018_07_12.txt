//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Bot resource definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Bot
	{
		
		/// <summary>
		/// The parameters to provide for the Bot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public BotProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Bot channel resource definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BotChannel
	{
		
		/// <summary>
		/// Channel definition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public Channel Properties { get; set; }
	}
	
	/// <summary>
	/// Channel definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Channel
	{
		
		/// <summary>
		/// The channel name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelName")]
		public string ChannelName { get; set; }
	}
	
	/// <summary>
	/// The parameters to provide for the Bot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BotProperties
	{
		
		/// <summary>
		/// Collection of channels for which the bot is configured
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configuredChannels")]
		public string[] ConfiguredChannels { get; set; }
		
		/// <summary>
		/// The description of the bot
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Application Insights key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerAppInsightKey")]
		public string DeveloperAppInsightKey { get; set; }
		
		/// <summary>
		/// The Application Insights Api Key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerAppInsightsApiKey")]
		public string DeveloperAppInsightsApiKey { get; set; }
		
		/// <summary>
		/// The Application Insights App Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerAppInsightsApplicationId")]
		public string DeveloperAppInsightsApplicationId { get; set; }
		
		/// <summary>
		/// The Name of the bot
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Collection of channels for which the bot is enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledChannels")]
		public string[] EnabledChannels { get; set; }
		
		/// <summary>
		/// The bot's endpoint
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// The bot's endpoint version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointVersion")]
		public string EndpointVersion { get; set; }
		
		/// <summary>
		/// The Icon Url of the bot
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconUrl")]
		public string IconUrl { get; set; }
		
		/// <summary>
		/// Collection of LUIS App Ids
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="luisAppIds")]
		public string[] LuisAppIds { get; set; }
		
		/// <summary>
		/// The LUIS Key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="luisKey")]
		public string LuisKey { get; set; }
		
		/// <summary>
		/// Microsoft App Id for the bot
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="msaAppId")]
		public string MsaAppId { get; set; }
	}
	
	/// <summary>
	/// The list of  bot service operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BotResponseList
	{
		
		/// <summary>
		/// The link used to get the next page of bot service resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Gets the list of bot service results and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Bot[] Value { get; set; }
	}
	
	/// <summary>
	/// The list of bot service channel operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ChannelResponseList
	{
		
		/// <summary>
		/// The link used to get the next page of bot service channel resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Gets the list of bot service channel results and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public BotChannel[] Value { get; set; }
	}
	
	/// <summary>
	/// The request body for a request to Bot Service Management to check availability of a bot name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityRequestBody
	{
		
		/// <summary>
		/// the name of the bot for which availability needs to be checked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// the type of the bot for which availability needs to be checked
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The response body returned for a request to Bot Service Management to check availability of a bot name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityResponseBody
	{
		
		/// <summary>
		/// additional message from the bot management api showing why a bot name is not available
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// indicates if the bot name is valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valid")]
		public System.Nullable<System.Boolean> Valid { get; set; }
	}
	
	/// <summary>
	/// The display name of a connection Item Setting registered with the Bot
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnectionItemName
	{
		
		/// <summary>
		/// Connection Item name that has been added in the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Bot channel resource definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnectionSetting
	{
		
		/// <summary>
		/// Properties for a Connection Setting Item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ConnectionSettingProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Extra Parameter in a Connection Setting Properties to indicate service provider specific properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnectionSettingParameter
	{
		
		/// <summary>
		/// Key for the Connection Setting Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Value associated with the Connection Setting Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Properties for a Connection Setting Item
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnectionSettingProperties
	{
		
		/// <summary>
		/// Client Id associated with the Connection Setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Client Secret associated with the Connection Setting
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		/// <summary>
		/// Service Provider Parameters associated with the Connection Setting
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ConnectionSettingParameter[] Parameters { get; set; }
		
		/// <summary>
		/// Scopes associated with the Connection Setting
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public string Scopes { get; set; }
		
		/// <summary>
		/// Service Provider Display Name associated with the Connection Setting
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceProviderDisplayName")]
		public string ServiceProviderDisplayName { get; set; }
		
		/// <summary>
		/// Service Provider Id associated with the Connection Setting
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceProviderId")]
		public string ServiceProviderId { get; set; }
		
		/// <summary>
		/// Setting Id set by the service for the Connection Setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settingId")]
		public string SettingId { get; set; }
	}
	
	/// <summary>
	/// The list of bot service connection settings response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnectionSettingResponseList
	{
		
		/// <summary>
		/// The link used to get the next page of bot service connection setting resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Gets the list of bot service connection settings and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ConnectionSetting[] Value { get; set; }
	}
	
	/// <summary>
	/// Direct Line channel definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DirectLineChannel
	{
		
		/// <summary>
		/// The parameters to provide for the Direct Line channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DirectLineChannelProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The parameters to provide for the Direct Line channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DirectLineChannelProperties
	{
		
		/// <summary>
		/// The list of Direct Line sites
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sites")]
		public DirectLineSite[] Sites { get; set; }
	}
	
	/// <summary>
	/// A site for the Direct Line channel
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DirectLineSite
	{
		
		/// <summary>
		/// Whether this site is enabled for DirectLine channel.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public bool IsEnabled { get; set; }
		
		/// <summary>
		/// Whether this site is enabled for authentication with Bot Framework.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSecureSiteEnabled")]
		public System.Nullable<System.Boolean> IsSecureSiteEnabled { get; set; }
		
		/// <summary>
		/// Whether this site is enabled for Bot Framework V1 protocol.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isV1Enabled")]
		public bool IsV1Enabled { get; set; }
		
		/// <summary>
		/// Whether this site is enabled for Bot Framework V1 protocol.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isV3Enabled")]
		public bool IsV3Enabled { get; set; }
		
		/// <summary>
		/// Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key2")]
		public string Key2 { get; set; }
		
		/// <summary>
		/// Site Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteId")]
		public string SiteId { get; set; }
		
		/// <summary>
		/// Site name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="siteName")]
		public string SiteName { get; set; }
		
		/// <summary>
		/// List of Trusted Origin URLs for this site. This field is applicable only if isSecureSiteEnabled is True.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trustedOrigins")]
		public string[] TrustedOrigins { get; set; }
	}
	
	/// <summary>
	/// Email channel definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EmailChannel
	{
		
		/// <summary>
		/// The parameters to provide for the Email channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public EmailChannelProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The parameters to provide for the Email channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EmailChannelProperties
	{
		
		/// <summary>
		/// The email address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Whether this channel is enabled for the bot
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public bool IsEnabled { get; set; }
		
		/// <summary>
		/// The password for the email address. Value only returned through POST to the action Channel List API, otherwise empty.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	/// <summary>
	/// Enterprise Channel resource definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnterpriseChannel
	{
		
		/// <summary>
		/// The parameters to provide for the Enterprise Channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public EnterpriseChannelProperties Properties { get; set; }
	}
	
	/// <summary>
	/// A request to Bot Service Management to check availability of an Enterprise Channel name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnterpriseChannelCheckNameAvailabilityRequest
	{
		
		/// <summary>
		/// The name of the Enterprise Channel for which availability needs to be checked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A request to Bot Service Management to check availability of an Enterprise Channel name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnterpriseChannelCheckNameAvailabilityResponse
	{
		
		/// <summary>
		/// Additional information about why a bot name is not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Indicates if the Enterprise Channel name is valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valid")]
		public System.Nullable<System.Boolean> Valid { get; set; }
	}
	
	/// <summary>
	/// The properties specific to an Enterprise Channel Node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnterpriseChannelNode
	{
		
		/// <summary>
		/// The location of the Enterprise Channel Node.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="azureLocation")]
		public string AzureLocation { get; set; }
		
		/// <summary>
		/// The sku of the Enterprise Channel Node.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="azureSku")]
		public string AzureSku { get; set; }
		
		/// <summary>
		/// Id of Enterprise Channel Node. This is generated by the Bot Framework.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the Enterprise Channel Node.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The current state of the Enterprise Channel Node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<EnterpriseChannelNodeState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EnterpriseChannelNodeState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateFailed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Started = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Starting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartFailed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StopFailed = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteFailed = 9,
	}
	
	/// <summary>
	/// The parameters to provide for the Enterprise Channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnterpriseChannelProperties
	{
		
		/// <summary>
		/// The nodes associated with the Enterprise Channel.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public EnterpriseChannelNode[] Nodes { get; set; }
		
		/// <summary>
		/// The current state of the Enterprise Channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public EnterpriseChannelNodeState State { get; set; }
	}
	
	/// <summary>
	/// The list of  bot service operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnterpriseChannelResponseList
	{
		
		/// <summary>
		/// The link used to get the next page of bot service resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of Enterprise Channels and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public EnterpriseChannel[] Value { get; set; }
	}
	
	/// <summary>
	/// Bot Service error object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Error
	{
		
		/// <summary>
		/// Bot Service error body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorBody Error1 { get; set; }
	}
	
	/// <summary>
	/// Bot Service error body.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorBody
	{
		
		/// <summary>
		/// error code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Facebook channel definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FacebookChannel
	{
		
		/// <summary>
		/// The parameters to provide for the Facebook channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public FacebookChannelProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The parameters to provide for the Facebook channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FacebookChannelProperties
	{
		
		/// <summary>
		/// Facebook application id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Facebook application secret. Value only returned through POST to the action Channel List API, otherwise empty.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appSecret")]
		public string AppSecret { get; set; }
		
		/// <summary>
		/// Callback Url
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callbackUrl")]
		public string CallbackUrl { get; set; }
		
		/// <summary>
		/// Whether this channel is enabled for the bot
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public bool IsEnabled { get; set; }
		
		/// <summary>
		/// The list of Facebook pages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public FacebookPage[] Pages { get; set; }
		
		/// <summary>
		/// Verify token. Value only returned through POST to the action Channel List API, otherwise empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifyToken")]
		public string VerifyToken { get; set; }
	}
	
	/// <summary>
	/// A Facebook page for Facebook channel registration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FacebookPage
	{
		
		/// <summary>
		/// Facebook application access token. Value only returned through POST to the action Channel List API, otherwise empty.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// Page id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Kik channel definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KikChannel
	{
		
		/// <summary>
		/// The parameters to provide for the Kik channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public KikChannelProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The parameters to provide for the Kik channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KikChannelProperties
	{
		
		/// <summary>
		/// Kik API key. Value only returned through POST to the action Channel List API, otherwise empty.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiKey")]
		public string ApiKey { get; set; }
		
		/// <summary>
		/// Whether this channel is enabled for the bot
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public bool IsEnabled { get; set; }
		
		/// <summary>
		/// Whether this channel is validated for the bot
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isValidated")]
		public System.Nullable<System.Boolean> IsValidated { get; set; }
		
		/// <summary>
		/// The Kik user name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	/// <summary>
	/// Indicates the type of bot service
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum Kind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sdk = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		designer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bot = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		function = 3,
	}
	
	/// <summary>
	/// Microsoft Teams channel definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MsTeamsChannel
	{
		
		/// <summary>
		/// The parameters to provide for the Microsoft Teams channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MsTeamsChannelProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The parameters to provide for the Microsoft Teams channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MsTeamsChannelProperties
	{
		
		/// <summary>
		/// Webhook for Microsoft Teams channel calls
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callingWebHook")]
		public string CallingWebHook { get; set; }
		
		/// <summary>
		/// Enable calling for Microsoft Teams channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableCalling")]
		public System.Nullable<System.Boolean> EnableCalling { get; set; }
		
		/// <summary>
		/// Whether this channel is enabled for the bot
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public bool IsEnabled { get; set; }
	}
	
	/// <summary>
	/// The operation supported by Bot Service Management.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDisplayInfo
	{
		
		/// <summary>
		/// The description of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The action that users can perform, based on their permission level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Service provider: Microsoft Bot Service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Resource on which the operation is performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// The operations supported by Bot Service Management.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationEntity
	{
		
		/// <summary>
		/// The operation supported by Bot Service Management.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplayInfo Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The origin of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// Additional properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public string Properties { get; set; }
	}
	
	/// <summary>
	/// The list of bot service operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationEntityListResult
	{
		
		/// <summary>
		/// The link used to get the next page of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public OperationEntity[] Value { get; set; }
	}
	
	/// <summary>
	/// Azure resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Entity Tag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Specifies the resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates the type of bot service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public Kind Kind { get; set; }
		
		/// <summary>
		/// Specifies the location of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Specifies the name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The SKU of the cognitive services account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
		
		/// <summary>
		/// Contains resource tags defined as key/value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Specifies the type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Service Provider Definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceProvider
	{
		
		/// <summary>
		/// The Object used to describe a Service Provider supported by Bot Service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ServiceProviderProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Extra Parameters specific to each Service Provider
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceProviderParameter
	{
		
		/// <summary>
		/// Default Name for the Service Provider
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public string Default { get; set; }
		
		/// <summary>
		/// Description of the Service Provider
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Display Name of the Service Provider
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Help Url for the  Service Provider
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="helpUrl")]
		public string HelpUrl { get; set; }
		
		/// <summary>
		/// Name of the Service Provider
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of the Service Provider
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The Object used to describe a Service Provider supported by Bot Service
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceProviderProperties
	{
		
		/// <summary>
		/// Display Name of the Service Provider
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devPortalUrl")]
		public string DevPortalUrl { get; set; }
		
		/// <summary>
		/// Display Name of the Service Provider
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Display Name of the Service Provider
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconUrl")]
		public string IconUrl { get; set; }
		
		/// <summary>
		/// Id for Service Provider
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The list of parameters for the Service Provider
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ServiceProviderParameter[] Parameters { get; set; }
		
		/// <summary>
		/// Display Name of the Service Provider
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceProviderName")]
		public string ServiceProviderName { get; set; }
	}
	
	/// <summary>
	/// The list of bot service providers response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceProviderResponseList
	{
		
		/// <summary>
		/// The link used to get the next page of bot service providers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Gets the list of bot service providers and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ServiceProvider[] Value { get; set; }
	}
	
	/// <summary>
	/// The SKU of the cognitive services account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sku
	{
		
		/// <summary>
		/// The name of SKU.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public SkuName Name { get; set; }
		
		/// <summary>
		/// Gets the sku tier. This is based on the SKU name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public System.Nullable<SkuTier> Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SkuName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		F0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SkuTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Free = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 1,
	}
	
	/// <summary>
	/// Skype channel definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkypeChannel
	{
		
		/// <summary>
		/// The parameters to provide for the Microsoft Teams channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SkypeChannelProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The parameters to provide for the Microsoft Teams channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkypeChannelProperties
	{
		
		/// <summary>
		/// Calling web hook for Skype channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callingWebHook")]
		public string CallingWebHook { get; set; }
		
		/// <summary>
		/// Enable calling for Skype channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableCalling")]
		public System.Nullable<System.Boolean> EnableCalling { get; set; }
		
		/// <summary>
		/// Enable groups for Skype channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableGroups")]
		public System.Nullable<System.Boolean> EnableGroups { get; set; }
		
		/// <summary>
		/// Enable media cards for Skype channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableMediaCards")]
		public System.Nullable<System.Boolean> EnableMediaCards { get; set; }
		
		/// <summary>
		/// Enable messaging for Skype channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableMessaging")]
		public System.Nullable<System.Boolean> EnableMessaging { get; set; }
		
		/// <summary>
		/// Enable screen sharing for Skype channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableScreenSharing")]
		public System.Nullable<System.Boolean> EnableScreenSharing { get; set; }
		
		/// <summary>
		/// Enable video for Skype channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableVideo")]
		public System.Nullable<System.Boolean> EnableVideo { get; set; }
		
		/// <summary>
		/// Group mode for Skype channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupsMode")]
		public string GroupsMode { get; set; }
		
		/// <summary>
		/// Whether this channel is enabled for the bot
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public bool IsEnabled { get; set; }
	}
	
	/// <summary>
	/// Slack channel definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SlackChannel
	{
		
		/// <summary>
		/// The parameters to provide for the Slack channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SlackChannelProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The parameters to provide for the Slack channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SlackChannelProperties
	{
		
		/// <summary>
		/// The Slack client id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		/// <summary>
		/// Whether this channel is enabled for the bot
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public bool IsEnabled { get; set; }
		
		/// <summary>
		/// Whether this channel is validated for the bot
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isValidated")]
		public System.Nullable<System.Boolean> IsValidated { get; set; }
		
		/// <summary>
		/// The Slack landing page Url
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="landingPageUrl")]
		public string LandingPageUrl { get; set; }
		
		/// <summary>
		/// The Sms auth token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastSubmissionId")]
		public string LastSubmissionId { get; set; }
		
		/// <summary>
		/// The Slack redirect action
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirectAction")]
		public string RedirectAction { get; set; }
		
		/// <summary>
		/// Whether to register the settings before OAuth validation is performed. Recommended to True.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registerBeforeOAuthFlow")]
		public System.Nullable<System.Boolean> RegisterBeforeOAuthFlow { get; set; }
		
		/// <summary>
		/// The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="verificationToken")]
		public string VerificationToken { get; set; }
	}
	
	/// <summary>
	/// Sms channel definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SmsChannel
	{
		
		/// <summary>
		/// The parameters to provide for the Sms channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SmsChannelProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The parameters to provide for the Sms channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SmsChannelProperties
	{
		
		/// <summary>
		/// The Sms account SID. Value only returned through POST to the action Channel List API, otherwise empty.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountSID")]
		public string AccountSID { get; set; }
		
		/// <summary>
		/// The Sms auth token. Value only returned through POST to the action Channel List API, otherwise empty.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authToken")]
		public string AuthToken { get; set; }
		
		/// <summary>
		/// Whether this channel is enabled for the bot
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public bool IsEnabled { get; set; }
		
		/// <summary>
		/// Whether this channel is validated for the bot
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isValidated")]
		public System.Nullable<System.Boolean> IsValidated { get; set; }
		
		/// <summary>
		/// The Sms phone
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
	}
	
	/// <summary>
	/// Telegram channel definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TelegramChannel
	{
		
		/// <summary>
		/// The parameters to provide for the Telegram channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public TelegramChannelProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The parameters to provide for the Telegram channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TelegramChannelProperties
	{
		
		/// <summary>
		/// The Telegram access token. Value only returned through POST to the action Channel List API, otherwise empty.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// Whether this channel is enabled for the bot
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public bool IsEnabled { get; set; }
		
		/// <summary>
		/// Whether this channel is validated for the bot
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isValidated")]
		public System.Nullable<System.Boolean> IsValidated { get; set; }
	}
	
	/// <summary>
	/// Web Chat channel definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WebChatChannel
	{
		
		/// <summary>
		/// The parameters to provide for the Web Chat channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WebChatChannelProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The parameters to provide for the Web Chat channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WebChatChannelProperties
	{
		
		/// <summary>
		/// The list of Web Chat sites
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sites")]
		public WebChatSite[] Sites { get; set; }
		
		/// <summary>
		/// Web chat control embed code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webChatEmbedCode")]
		public string WebChatEmbedCode { get; set; }
	}
	
	/// <summary>
	/// A site for the Webchat channel
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WebChatSite
	{
		
		/// <summary>
		/// Whether this site is enabled for preview versions of Webchat
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enablePreview")]
		public bool EnablePreview { get; set; }
		
		/// <summary>
		/// Whether this site is enabled for DirectLine channel
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public bool IsEnabled { get; set; }
		
		/// <summary>
		/// Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key2")]
		public string Key2 { get; set; }
		
		/// <summary>
		/// Site Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteId")]
		public string SiteId { get; set; }
		
		/// <summary>
		/// Site name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="siteName")]
		public string SiteName { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Check whether an Enterprise Channel name is available.
		/// EnterpriseChannels_CheckNameAvailability providers/Microsoft.BotService/checkEnterpriseChannelNameAvailability
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">The parameters to provide for the Enterprise Channel check name availability request.</param>
		/// <returns>The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code.
		///The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility.
		///For a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section.</returns>
		public async Task<EnterpriseChannelCheckNameAvailabilityResponse> EnterpriseChannels_CheckNameAvailabilityAsync(string api_version, EnterpriseChannelCheckNameAvailabilityRequest requestBody)
		{
			var requestUri = "providers/Microsoft.BotService/checkEnterpriseChannelNameAvailability?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnterpriseChannelCheckNameAvailabilityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Check whether a bot name is available.
		/// Bots_GetCheckNameAvailability providers/Microsoft.BotService/checkNameAvailability
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">The request body parameters to provide for the check name availability request</param>
		/// <returns>The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code.
		///The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility.
		///For a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section. </returns>
		public async Task<CheckNameAvailabilityResponseBody> Bots_GetCheckNameAvailabilityAsync(string api_version, CheckNameAvailabilityRequestBody requestBody)
		{
			var requestUri = "providers/Microsoft.BotService/checkNameAvailability?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CheckNameAvailabilityResponseBody>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all the available BotService operations.
		/// Operations_List providers/Microsoft.BotService/operations
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK.</returns>
		public async Task<OperationEntityListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.BotService/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationEntityListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all the resources of a particular type belonging to a subscription.
		/// Bots_List subscriptions/{subscriptionId}/providers/Microsoft.BotService/botServices
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <returns>The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code.
		///The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility.
		///For a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section. </returns>
		public async Task<BotResponseList> Bots_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.BotService/botServices?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BotResponseList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the available Service Providers for creating Connection Settings
		/// BotConnection_ListServiceProviders subscriptions/{subscriptionId}/providers/Microsoft.BotService/listAuthServiceProviders
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <returns>If resource is retrieved successfully, the service should return 200 (OK).</returns>
		public async Task<ServiceProviderResponseList> BotConnection_ListServiceProvidersAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.BotService/listAuthServiceProviders?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceProviderResponseList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all the resources of a particular type belonging to a resource group
		/// Bots_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code.
		///The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with “value” property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility.
		///The nextLink should be implemented using following query parameters:
		///· skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink.
		///· top: the optional client query parameter which defines the maximum number of records to be returned by the server.
		///Implementation details:
		///· NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query. 
		///· Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response. 
		///Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed.</returns>
		public async Task<BotResponseList> Bots_ListByResourceGroupAsync(string resourceGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/botServices&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BotResponseList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a BotService specified by the parameters.
		/// Bots_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="resourceName">The name of the Bot resource.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <returns>The resource provider should return 200 (OK) to indicate that the operation completed successfully. </returns>
		public async Task<Bot> Bots_GetAsync(string resourceGroupName, string resourceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/botServices/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Bot>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Bot Service. Bot Service is a resource group wide resource type.
		/// Bots_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="resourceName">The name of the Bot resource.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="requestBody">The parameters to provide for the created bot.</param>
		/// <returns>If resource is created successfully or already existed, the service should return 200 (OK).</returns>
		public async Task<Bot> Bots_CreateAsync(string resourceGroupName, string resourceName, string api_version, string subscriptionId, Bot requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/botServices/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Bot>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a Bot Service from the resource group.
		/// Bots_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="resourceName">The name of the Bot resource.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <returns>A 200 (OK) should be returned if the object exists and was deleted successfully;</returns>
		public async Task Bots_DeleteAsync(string resourceGroupName, string resourceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/botServices/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Bot Service
		/// Bots_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="resourceName">The name of the Bot resource.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="requestBody">The parameters to provide for the created bot.</param>
		/// <returns>The resource provider should return 200 (OK) to indicate that the operation completed successfully. </returns>
		public async Task<Bot> Bots_UpdateAsync(string resourceGroupName, string resourceName, string api_version, string subscriptionId, Bot requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/botServices/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Bot>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a Connection Setting registration for a Bot Service
		/// BotConnection_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="resourceName">The name of the Bot resource.</param>
		/// <param name="connectionName">The name of the Bot Service Connection Setting resource</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <returns>The resource provider should return 200 (OK) to indicate that the operation completed successfully. </returns>
		public async Task<ConnectionSetting> BotConnection_GetAsync(string resourceGroupName, string resourceName, string connectionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/botServices/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/Connections/"+ (connectionName==null? "" : System.Uri.EscapeDataString(connectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConnectionSetting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Register a new Auth Connection for a Bot Service
		/// BotConnection_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="resourceName">The name of the Bot resource.</param>
		/// <param name="connectionName">The name of the Bot Service Connection Setting resource</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="requestBody">The parameters to provide for creating the Connection Setting.</param>
		/// <returns>If resource is created successfully or already existed, the service should return 200 (OK).</returns>
		public async Task<ConnectionSetting> BotConnection_CreateAsync(string resourceGroupName, string resourceName, string connectionName, string api_version, string subscriptionId, ConnectionSetting requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/botServices/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/Connections/"+ (connectionName==null? "" : System.Uri.EscapeDataString(connectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConnectionSetting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a Connection Setting registration for a Bot Service
		/// BotConnection_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="resourceName">The name of the Bot resource.</param>
		/// <param name="connectionName">The name of the Bot Service Connection Setting resource</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <returns>A 200 (OK) should be returned if the object exists and was deleted successfully;</returns>
		public async Task BotConnection_DeleteAsync(string resourceGroupName, string resourceName, string connectionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/botServices/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/Connections/"+ (connectionName==null? "" : System.Uri.EscapeDataString(connectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Connection Setting registration for a Bot Service
		/// BotConnection_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="resourceName">The name of the Bot resource.</param>
		/// <param name="connectionName">The name of the Bot Service Connection Setting resource</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="requestBody">The parameters to provide for updating the Connection Setting.</param>
		/// <returns>If resource is created successfully or already existed, the service should return 200 (OK).</returns>
		public async Task<ConnectionSetting> BotConnection_UpdateAsync(string resourceGroupName, string resourceName, string connectionName, string api_version, string subscriptionId, ConnectionSetting requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/botServices/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/Connections/"+ (connectionName==null? "" : System.Uri.EscapeDataString(connectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConnectionSetting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a Connection Setting registration for a Bot Service
		/// BotConnection_ListWithSecrets subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}/listWithSecrets
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="resourceName">The name of the Bot resource.</param>
		/// <param name="connectionName">The name of the Bot Service Connection Setting resource</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <returns>The resource provider should return 200 (OK) to indicate that the operation completed successfully. </returns>
		public async Task<ConnectionSetting> BotConnection_ListWithSecretsAsync(string resourceGroupName, string resourceName, string connectionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/botServices/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/Connections/"+ (connectionName==null? "" : System.Uri.EscapeDataString(connectionName))+"/listWithSecrets&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConnectionSetting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all the Channel registrations of a particular BotService resource
		/// Channels_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="resourceName">The name of the Bot resource.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code.
		///The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with “value” property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility.
		///The nextLink should be implemented using following query parameters:
		///· skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink.
		///· top: the optional client query parameter which defines the maximum number of records to be returned by the server.
		///Implementation details:
		///· NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query. 
		///· Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response. 
		///Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed.</returns>
		public async Task<ChannelResponseList> Channels_ListByResourceGroupAsync(string resourceGroupName, string resourceName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/botServices/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/channels&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelResponseList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a BotService Channel registration specified by the parameters.
		/// Channels_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="resourceName">The name of the Bot resource.</param>
		/// <param name="channelName">The name of the Bot resource.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <returns>The resource provider should return 200 (OK) to indicate that the operation completed successfully. </returns>
		public async Task<BotChannel> Channels_GetAsync(string resourceGroupName, string resourceName, string channelName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/botServices/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/channels/"+ (channelName==null? "" : System.Uri.EscapeDataString(channelName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BotChannel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Channel registration for a Bot Service
		/// Channels_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="resourceName">The name of the Bot resource.</param>
		/// <param name="channelName">The name of the Channel resource.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="requestBody">The parameters to provide for the created bot.</param>
		/// <returns>If resource is created successfully or already existed, the service should return 200 (OK).</returns>
		public async Task<BotChannel> Channels_CreateAsync(string resourceGroupName, string resourceName, Channels_CreateChannelName channelName, string api_version, string subscriptionId, BotChannel requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/botServices/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/channels/"+channelName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BotChannel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a Channel registration from a Bot Service
		/// Channels_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="resourceName">The name of the Bot resource.</param>
		/// <param name="channelName">The name of the Bot resource.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <returns>A 200 (OK) should be returned if the object exists and was deleted successfully;</returns>
		public async Task Channels_DeleteAsync(string resourceGroupName, string resourceName, string channelName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/botServices/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/channels/"+ (channelName==null? "" : System.Uri.EscapeDataString(channelName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Channel registration for a Bot Service
		/// Channels_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="resourceName">The name of the Bot resource.</param>
		/// <param name="channelName">The name of the Channel resource.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="requestBody">The parameters to provide for the created bot.</param>
		/// <returns>The resource provider should return 200 (OK) to indicate that the operation completed successfully. </returns>
		public async Task<BotChannel> Channels_UpdateAsync(string resourceGroupName, string resourceName, Channels_CreateChannelName channelName, string api_version, string subscriptionId, BotChannel requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/botServices/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/channels/"+channelName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BotChannel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists a Channel registration for a Bot Service including secrets
		/// Channels_ListWithKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}/listChannelWithKeys
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="resourceName">The name of the Bot resource.</param>
		/// <param name="channelName">The name of the Channel resource.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <returns>If resource is retrieved successfully, the service should return 200 (OK).</returns>
		public async Task<BotChannel> Channels_ListWithKeysAsync(string resourceGroupName, string resourceName, Channels_CreateChannelName channelName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/botServices/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/channels/"+channelName+"/listChannelWithKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BotChannel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all the Connection Settings registered to a particular BotService resource
		/// BotConnection_ListByBotService subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/connections
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="resourceName">The name of the Bot resource.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code.
		///The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with “value” property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility.
		///The nextLink should be implemented using following query parameters:
		///· skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink.
		///· top: the optional client query parameter which defines the maximum number of records to be returned by the server.
		///Implementation details:
		///· NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query. 
		///· Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response. 
		///Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed.</returns>
		public async Task<ConnectionSettingResponseList> BotConnection_ListByBotServiceAsync(string resourceGroupName, string resourceName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/botServices/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/connections&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConnectionSettingResponseList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all the resources of a particular type belonging to a resource group.
		/// EnterpriseChannels_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code.
		///The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with “value” property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility.
		///The nextLink should be implemented using following query parameters:
		///· skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink.
		///· top: the optional client query parameter which defines the maximum number of records to be returned by the server.
		///Implementation details:
		///· NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query. 
		///· Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response. 
		///Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed.</returns>
		public async Task<EnterpriseChannelResponseList> EnterpriseChannels_ListByResourceGroupAsync(string resourceGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/enterpriseChannels&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnterpriseChannelResponseList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an Enterprise Channel specified by the parameters.
		/// EnterpriseChannels_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels/{resourceName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="resourceName">The name of the Bot resource.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <returns>The resource provider should return 200 (OK) to indicate that the operation completed successfully. </returns>
		public async Task<EnterpriseChannel> EnterpriseChannels_GetAsync(string resourceGroupName, string resourceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/enterpriseChannels/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnterpriseChannel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an Enterprise Channel.
		/// EnterpriseChannels_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels/{resourceName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="resourceName">The name of the Bot resource.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="requestBody">The parameters to provide for the new Enterprise Channel.</param>
		/// <returns>If resource is created successfully or already existed, the service should return 200 (OK).</returns>
		public async Task<EnterpriseChannel> EnterpriseChannels_CreateAsync(string resourceGroupName, string resourceName, string api_version, string subscriptionId, EnterpriseChannel requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/enterpriseChannels/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnterpriseChannel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an Enterprise Channel from the resource group
		/// EnterpriseChannels_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels/{resourceName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="resourceName">The name of the Bot resource.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <returns>A 200 (OK) should be returned if the object exists and was deleted successfully;</returns>
		public async Task EnterpriseChannels_DeleteAsync(string resourceGroupName, string resourceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/enterpriseChannels/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an Enterprise Channel.
		/// EnterpriseChannels_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels/{resourceName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the Bot resource group in the user subscription.</param>
		/// <param name="resourceName">The name of the Bot resource.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="requestBody">The parameters to provide to update the Enterprise Channel.</param>
		/// <returns>If resource is created successfully or already existed, the service should return 200 (OK).</returns>
		public async Task<EnterpriseChannel> EnterpriseChannels_UpdateAsync(string resourceGroupName, string resourceName, string api_version, string subscriptionId, EnterpriseChannel requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BotService/enterpriseChannels/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnterpriseChannel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Channels_CreateChannelName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FacebookChannel = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EmailChannel = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KikChannel = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TelegramChannel = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SlackChannel = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MsTeamsChannel = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SkypeChannel = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WebChatChannel = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DirectLineChannel = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SmsChannel = 9,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
