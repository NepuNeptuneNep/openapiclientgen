//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Defines an extension for a list entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DynamicList
	{
		
		/// <summary>
		/// The name of the list entity to extend.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="listEntityName")]
		public string ListEntityName { get; set; }
		
		/// <summary>
		/// The lists to append on the extended list entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestLists")]
		public RequestList[] RequestLists { get; set; }
	}
	
	/// <summary>
	/// Defines a sub-list to append to an existing list entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RequestList
	{
		
		/// <summary>
		/// The canonical form of the sub-list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="canonicalForm")]
		public string CanonicalForm { get; set; }
		
		/// <summary>
		/// The name of the sub-list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The synonyms of the canonical form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="synonyms")]
		public string[] Synonyms { get; set; }
	}
	
	/// <summary>
	/// Represents the error that occurred.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Error
	{
		
		/// <summary>
		/// Represents the definition of the error that occurred.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorBody Error1 { get; set; }
	}
	
	/// <summary>
	/// Represents the definition of the error that occurred.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorBody
	{
		
		/// <summary>
		/// The error code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Defines a user predicted entity that extends an already existing one.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExternalEntity
	{
		
		/// <summary>
		/// The length of the predicted entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityLength")]
		public int EntityLength { get; set; }
		
		/// <summary>
		/// The name of the entity to extend.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityName")]
		public string EntityName { get; set; }
		
		/// <summary>
		/// A user supplied custom resolution to return as the entity's prediction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolution")]
		public object Resolution { get; set; }
		
		/// <summary>
		/// A user supplied score to return as the entity's prediction score.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Single> Score { get; set; }
		
		/// <summary>
		/// The start character index of the predicted entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public int StartIndex { get; set; }
	}
	
	/// <summary>
	/// Represents an intent prediction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Intent
	{
		
		/// <summary>
		/// Represents the prediction of a query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="childApp")]
		public Prediction ChildApp { get; set; }
		
		/// <summary>
		/// The score of the fired intent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Single> Score { get; set; }
	}
	
	/// <summary>
	/// Represents the prediction of a query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Prediction
	{
		
		/// <summary>
		/// The query after spell checking. Only set if spell check was enabled and a spelling mistake was found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alteredQuery")]
		public string AlteredQuery { get; set; }
		
		/// <summary>
		/// A dictionary representing the entities that fired.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public System.Collections.Generic.Dictionary<string, object> Entities { get; set; }
		
		/// <summary>
		/// A dictionary representing the intents that fired.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intents")]
		public System.Collections.Generic.Dictionary<string, Intent> Intents { get; set; }
		
		/// <summary>
		/// The result of the sentiment analysis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentiment")]
		public Sentiment Sentiment { get; set; }
		
		/// <summary>
		/// The name of the top scoring intent.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="topIntent")]
		public string TopIntent { get; set; }
	}
	
	/// <summary>
	/// The result of the sentiment analysis.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sentiment
	{
		
		/// <summary>
		/// The label of the sentiment analysis result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The sentiment score of the query.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="score")]
		public float Score { get; set; }
	}
	
	/// <summary>
	/// Represents the prediction request parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PredictionRequest
	{
		
		/// <summary>
		/// The dynamically created list entities for this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicLists")]
		public DynamicList[] DynamicLists { get; set; }
		
		/// <summary>
		/// The externally predicted entities for this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalEntities")]
		public ExternalEntity[] ExternalEntities { get; set; }
		
		/// <summary>
		/// The custom options for the prediction request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public PredictionRequestOptions Options { get; set; }
		
		/// <summary>
		/// The query to predict.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
	}
	
	/// <summary>
	/// The custom options for the prediction request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PredictionRequestOptions
	{
		
		/// <summary>
		/// The reference DateTime used for predicting datetime entities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datetimeReference")]
		public System.Nullable<System.DateTimeOffset> DatetimeReference { get; set; }
		
		/// <summary>
		/// Whether to make the external entities resolution override the predictions if an overlap occurs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferExternalEntities")]
		public System.Nullable<System.Boolean> PreferExternalEntities { get; set; }
	}
	
	/// <summary>
	/// Represents the prediction response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PredictionResponse
	{
		
		/// <summary>
		/// Represents the prediction of a query.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prediction")]
		public Prediction Prediction { get; set; }
		
		/// <summary>
		/// The query used in the prediction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets the predictions for an application slot.
		/// Prediction_GetSlotPredictionGET apps/{appId}/slots/{slotName}/predict
		/// </summary>
		/// <param name="appId">The application ID.</param>
		/// <param name="slotName">The application slot name.</param>
		/// <param name="query">The query to predict.</param>
		/// <param name="verbose">Indicates whether to get extra metadata for the entities predictions or not.</param>
		/// <param name="show_all_intents">Indicates whether to return all the intents in the response or just the top intent.</param>
		/// <param name="log">Indicates whether to log the endpoint query or not.</param>
		/// <returns>The prediction for the supplied query.</returns>
		public async Task<PredictionResponse> Prediction_GetSlotPredictionGETAsync(string appId, string slotName, string query, bool verbose, bool show_all_intents, bool log)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/slots/"+ (slotName==null? "" : System.Uri.EscapeDataString(slotName))+"/predict&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&verbose="+verbose+"&show-all-intents="+show_all_intents+"&log="+log;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PredictionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the predictions for an application slot.
		/// Prediction_GetSlotPrediction apps/{appId}/slots/{slotName}/predict
		/// </summary>
		/// <param name="appId">The application ID.</param>
		/// <param name="slotName">The application slot name.</param>
		/// <param name="verbose">Indicates whether to get extra metadata for the entities predictions or not.</param>
		/// <param name="show_all_intents">Indicates whether to return all the intents in the response or just the top intent.</param>
		/// <param name="log">Indicates whether to log the endpoint query or not.</param>
		/// <param name="requestBody">The prediction request parameters.</param>
		/// <returns>The prediction for the supplied query.</returns>
		public async Task<PredictionResponse> Prediction_GetSlotPredictionAsync(string appId, string slotName, bool verbose, bool show_all_intents, bool log, PredictionRequest requestBody)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/slots/"+ (slotName==null? "" : System.Uri.EscapeDataString(slotName))+"/predict&verbose="+verbose+"&show-all-intents="+show_all_intents+"&log="+log;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PredictionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the predictions for an application version.
		/// Prediction_GetVersionPredictionGET apps/{appId}/versions/{versionId}/predict
		/// </summary>
		/// <param name="appId">The application ID.</param>
		/// <param name="versionId">The application version ID.</param>
		/// <param name="query">The query to predict.</param>
		/// <param name="verbose">Indicates whether to get extra metadata for the entities predictions or not.</param>
		/// <param name="show_all_intents">Indicates whether to return all the intents in the response or just the top intent.</param>
		/// <param name="log">Indicates whether to log the endpoint query or not.</param>
		/// <returns>The prediction for the supplied query.</returns>
		public async Task<PredictionResponse> Prediction_GetVersionPredictionGETAsync(string appId, string versionId, string query, bool verbose, bool show_all_intents, bool log)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/versions/"+ (versionId==null? "" : System.Uri.EscapeDataString(versionId))+"/predict&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&verbose="+verbose+"&show-all-intents="+show_all_intents+"&log="+log;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PredictionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the predictions for an application version.
		/// Prediction_GetVersionPrediction apps/{appId}/versions/{versionId}/predict
		/// </summary>
		/// <param name="appId">The application ID.</param>
		/// <param name="versionId">The application version ID.</param>
		/// <param name="verbose">Indicates whether to get extra metadata for the entities predictions or not.</param>
		/// <param name="show_all_intents">Indicates whether to return all the intents in the response or just the top intent.</param>
		/// <param name="log">Indicates whether to log the endpoint query or not.</param>
		/// <param name="requestBody">The prediction request parameters.</param>
		/// <returns>The prediction for the supplied query.</returns>
		public async Task<PredictionResponse> Prediction_GetVersionPredictionAsync(string appId, string versionId, bool verbose, bool show_all_intents, bool log, PredictionRequest requestBody)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/versions/"+ (versionId==null? "" : System.Uri.EscapeDataString(versionId))+"/predict&verbose="+verbose+"&show-all-intents="+show_all_intents+"&log="+log;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PredictionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
