//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Task properties of the software update configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SoftareUpdateConfigurationRunTaskProperties
	{
		
		/// <summary>
		/// The job id of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// The name of the source of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// The status of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Software update configuration run tasks model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SoftareUpdateConfigurationRunTasks
	{
		
		/// <summary>
		/// Task properties of the software update configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postTask")]
		public SoftareUpdateConfigurationRunTaskProperties PostTask { get; set; }
		
		/// <summary>
		/// Task properties of the software update configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preTask")]
		public SoftareUpdateConfigurationRunTaskProperties PreTask { get; set; }
	}
	
	/// <summary>
	/// Software update configuration Run properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SoftwareUpdateConfigurationRun
	{
		
		/// <summary>
		/// Resource Id of the software update configuration run
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the software update configuration run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Software update configuration properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SoftwareUpdateConfigurationRunProperties Properties { get; set; }
	}
	
	/// <summary>
	/// result of listing all software update configuration runs
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SoftwareUpdateConfigurationRunListResult
	{
		
		/// <summary>
		/// link to next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// outer object returned when listing all software update configuration runs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SoftwareUpdateConfigurationRun[] Value { get; set; }
	}
	
	/// <summary>
	/// Software update configuration properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SoftwareUpdateConfigurationRunProperties
	{
		
		/// <summary>
		/// Number of computers in the software update configuration run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computerCount")]
		public System.Nullable<System.Int32> ComputerCount { get; set; }
		
		/// <summary>
		/// Configured duration for the software update configuration run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configuredDuration")]
		public string ConfiguredDuration { get; set; }
		
		/// <summary>
		/// CreatedBy property, which only appears in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		/// <summary>
		/// Creation time of the resource, which only appears in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// End time of the software update configuration run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Number of computers with failed status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedCount")]
		public System.Nullable<System.Int32> FailedCount { get; set; }
		
		/// <summary>
		/// LastModifiedBy property, which only appears in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedBy")]
		public string LastModifiedBy { get; set; }
		
		/// <summary>
		/// Last time resource was modified, which only appears in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		/// <summary>
		/// Operating system target of the software update configuration triggered this run
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public string OsType { get; set; }
		
		/// <summary>
		/// Software update configuration Run Navigation model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="softwareUpdateConfiguration")]
		public UpdateConfigurationNavigation SoftwareUpdateConfiguration { get; set; }
		
		/// <summary>
		/// Start time of the software update configuration run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Status of the software update configuration run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Software update configuration run tasks model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks")]
		public SoftareUpdateConfigurationRunTasks Tasks { get; set; }
	}
	
	/// <summary>
	/// Software update configuration Run Navigation model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateConfigurationNavigation
	{
		
		/// <summary>
		/// Name of the software update configuration triggered the software update configuration run
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Return list of software update configuration runs
		/// SoftwareUpdateConfigurationRuns_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurationRuns
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="filter">The filter to apply on the operation. You can use the following filters: 'properties/osType', 'properties/status', 'properties/startTime', and 'properties/softwareUpdateConfiguration/name'</param>
		/// <param name="skip">Number of entries you skip before returning results</param>
		/// <param name="top">Maximum number of entries returned in the results collection</param>
		/// <returns>Return list of software update configurations runs.</returns>
		public async Task<SoftwareUpdateConfigurationRunListResult> SoftwareUpdateConfigurationRuns_ListAsync(string subscriptionId, string resourceGroupName, string automationAccountName, string api_version, string filter, string skip, string top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/softwareUpdateConfigurationRuns&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$skip=" + (skip==null? "" : System.Uri.EscapeDataString(skip))+"&$top=" + (top==null? "" : System.Uri.EscapeDataString(top));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SoftwareUpdateConfigurationRunListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a single software update configuration Run by Id.
		/// SoftwareUpdateConfigurationRuns_GetById subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurationRuns/{softwareUpdateConfigurationRunId}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="softwareUpdateConfigurationRunId">The Id of the software update configuration run.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>A single software update configuration Run.</returns>
		public async Task<SoftwareUpdateConfigurationRun> SoftwareUpdateConfigurationRuns_GetByIdAsync(string subscriptionId, string resourceGroupName, string automationAccountName, string softwareUpdateConfigurationRunId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/softwareUpdateConfigurationRuns/"+ (softwareUpdateConfigurationRunId==null? "" : System.Uri.EscapeDataString(softwareUpdateConfigurationRunId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SoftwareUpdateConfigurationRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
