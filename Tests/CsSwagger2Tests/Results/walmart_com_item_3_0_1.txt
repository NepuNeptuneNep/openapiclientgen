//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get status of an item feed
		/// You can display the status of an item within a feed. Use the feed ID returned from the upload an item API.
		/// V2getFeedItemStatus v2/feeds
		/// </summary>
		/// <param name="feedId">The feed ID.</param>
		/// <param name="includeDetails">Includes the status details for each item in the feed. Do not set this parameter to true as discrepancies may appear between the header and the item details (the item details may be incorrect). Instead, use the Get a feedItems status.</param>
		/// <param name="offset">The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.</param>
		/// <param name="limit">The number of items to be returned. Cannot be more than 50 items. Use it only when the includeDetails is set to true.</param>
		public async Task V2getFeedItemStatusAsync(string feedId, string includeDetails, string offset, string limit)
		{
			var requestUri = "v2/feeds?feedId=" + (feedId==null? "" : System.Uri.EscapeDataString(feedId))+"&includeDetails=" + (includeDetails==null? "" : System.Uri.EscapeDataString(includeDetails))+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get status of an item within a feed
		/// You can display the status of all items within a feed. Use the feed ID returned from the upload an item API.
		/// V2getAllItemsStatus v2/feeds/{feedId}
		/// </summary>
		/// <param name="feedId">The feed ID</param>
		/// <param name="includeDetails">Includes details of each entity in the feed. Do not set this parameter to true.</param>
		/// <param name="offset">The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.</param>
		/// <param name="limit">The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true.</param>
		public async Task V2getAllItemsStatusAsync(string feedId, string includeDetails, string offset, string limit)
		{
			var requestUri = "v2/feeds/"+ (feedId==null? "" : System.Uri.EscapeDataString(feedId))+"&includeDetails=" + (includeDetails==null? "" : System.Uri.EscapeDataString(includeDetails))+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get status of an item feed
		/// You can display the status of an item within a feed. Use the feed ID returned from the upload an item API.
		/// V3getFeedItemStatus v3/feeds
		/// </summary>
		/// <param name="feedId">The feed ID.</param>
		/// <param name="includeDetails">Includes the status details for each item in the feed. Do not set this parameter to true as discrepancies may appear between the header and the item details (the item details may be incorrect). Instead, use the Get a feedItems status.</param>
		/// <param name="offset">The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.</param>
		/// <param name="limit">The number of items to be returned. Cannot be more than 50 items. Use it only when the includeDetails is set to true.</param>
		public async Task V3getFeedItemStatusAsync(string feedId, string includeDetails, string offset, string limit)
		{
			var requestUri = "v3/feeds?feedId=" + (feedId==null? "" : System.Uri.EscapeDataString(feedId))+"&includeDetails=" + (includeDetails==null? "" : System.Uri.EscapeDataString(includeDetails))+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get status of an item within a feed
		/// You can display the status of all items within a feed. Use the feed ID returned from the upload an item API.
		/// V3getAllItemsStatus v3/feeds/{feedId}
		/// </summary>
		/// <param name="feedId">The feed ID</param>
		/// <param name="includeDetails">Includes details of each entity in the feed. Do not set this parameter to true.</param>
		/// <param name="offset">The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.</param>
		/// <param name="limit">The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true.</param>
		public async Task V3getAllItemsStatusAsync(string feedId, string includeDetails, string offset, string limit)
		{
			var requestUri = "v3/feeds/"+ (feedId==null? "" : System.Uri.EscapeDataString(feedId))+"&includeDetails=" + (includeDetails==null? "" : System.Uri.EscapeDataString(includeDetails))+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum V2getFeedItemStatusWM_CONSUMER_CHANNEL_TYPE
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWAGGER_CHANNEL_TYPE = 0,
	}
	
	public enum V2doPostMultiPartFeedType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		item = 0,
	}
	
	public enum V3doPostMultiPartFeedType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		item = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUPPLIER_FULL_ITEM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_PRODUCT = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
