//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Security assessment metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecurityAssessmentMetadata
	{
		
		/// <summary>
		/// Describes properties of an assessment metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SecurityAssessmentMetadataProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Describes properties of an assessment metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecurityAssessmentMetadataProperties
	{
		
		/// <summary>
		/// BuiltIn if the assessment based on built-in Azure Policy definition, Custom if the assessment based on custom Azure Policy definition
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="assessmentType")]
		public SecurityAssessmentMetadataPropertiesAssessmentType AssessmentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string[] Category { get; set; }
		
		/// <summary>
		/// Human readable description of the assessment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// User friendly display name of the assessment
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The implementation effort required to remediate this assessment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="implementationEffort")]
		public System.Nullable<SecurityAssessmentMetadataPropertiesImplementationEffort> ImplementationEffort { get; set; }
		
		/// <summary>
		/// Describes the partner that created the assessment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerData")]
		public SecurityAssessmentMetadataPartnerData PartnerData { get; set; }
		
		/// <summary>
		/// Azure resource ID of the policy definition that turns this assessment calculation on
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyDefinitionId")]
		public string PolicyDefinitionId { get; set; }
		
		/// <summary>
		/// True if this assessment is in preview release status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preview")]
		public System.Nullable<System.Boolean> Preview { get; set; }
		
		/// <summary>
		/// Human readable description of what you should do to mitigate this security issue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remediationDescription")]
		public string RemediationDescription { get; set; }
		
		/// <summary>
		/// The severity level of the assessment
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public SecurityAssessmentMetadataPropertiesSeverity Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="threats")]
		public string[] Threats { get; set; }
		
		/// <summary>
		/// The user impact of the assessment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userImpact")]
		public SecurityAssessmentMetadataPropertiesImplementationEffort UserImpact { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SecurityAssessmentMetadataPropertiesAssessmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BuiltIn = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CustomPolicy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CustomerManaged = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VerifiedPartner = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SecurityAssessmentMetadataPropertiesImplementationEffort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Low = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Moderate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		High = 2,
	}
	
	/// <summary>
	/// Describes the partner that created the assessment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecurityAssessmentMetadataPartnerData
	{
		
		/// <summary>
		/// Name of the company of the partner
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerName")]
		public string PartnerName { get; set; }
		
		/// <summary>
		/// Name of the product of the partner that created the assessment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productName")]
		public string ProductName { get; set; }
		
		/// <summary>
		/// Secret to authenticate the partner and verify it created the assessment - write only
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public string Secret { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SecurityAssessmentMetadataPropertiesSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Low = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Medium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		High = 2,
	}
	
	/// <summary>
	/// List of security assessment metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecurityAssessmentMetadataList
	{
		
		/// <summary>
		/// The URI to fetch the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SecurityAssessmentMetadata[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get metadata information on all assessment types
		/// AssessmentsMetadata_List providers/Microsoft.Security/assessmentMetadata
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <returns>OK</returns>
		public async Task<SecurityAssessmentMetadataList> AssessmentsMetadata_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Security/assessmentMetadata?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SecurityAssessmentMetadataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get metadata information on an assessment type
		/// AssessmentsMetadata_Get providers/Microsoft.Security/assessmentMetadata/{assessmentMetadataName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="assessmentMetadataName">The Assessment Key - Unique key for the assessment type</param>
		/// <returns>OK</returns>
		public async Task<SecurityAssessmentMetadata> AssessmentsMetadata_GetAsync(string api_version, string assessmentMetadataName)
		{
			var requestUri = "providers/Microsoft.Security/assessmentMetadata/"+ (assessmentMetadataName==null? "" : System.Uri.EscapeDataString(assessmentMetadataName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SecurityAssessmentMetadata>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get metadata information on all assessment types in a specific subscription
		/// AssessmentsMetadataSubscription_List subscriptions/{subscriptionId}/providers/Microsoft.Security/assessmentMetadata
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <returns>OK</returns>
		public async Task<SecurityAssessmentMetadataList> AssessmentsMetadataSubscription_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/assessmentMetadata?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SecurityAssessmentMetadataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get metadata information on an assessment type in a specific subscription
		/// AssessmentsMetadataSubscription_Get subscriptions/{subscriptionId}/providers/Microsoft.Security/assessmentMetadata/{assessmentMetadataName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="assessmentMetadataName">The Assessment Key - Unique key for the assessment type</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <returns>OK</returns>
		public async Task<SecurityAssessmentMetadata> AssessmentsMetadataSubscription_GetAsync(string api_version, string assessmentMetadataName, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/assessmentMetadata/"+ (assessmentMetadataName==null? "" : System.Uri.EscapeDataString(assessmentMetadataName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SecurityAssessmentMetadata>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create metadata information on an assessment type in a specific subscription
		/// AssessmentsMetadataSubscription_Create subscriptions/{subscriptionId}/providers/Microsoft.Security/assessmentMetadata/{assessmentMetadataName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="assessmentMetadataName">The Assessment Key - Unique key for the assessment type</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="requestBody">AssessmentMetadata object</param>
		/// <returns>OK</returns>
		public async Task<SecurityAssessmentMetadata> AssessmentsMetadataSubscription_CreateAsync(string api_version, string assessmentMetadataName, string subscriptionId, SecurityAssessmentMetadata requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/assessmentMetadata/"+ (assessmentMetadataName==null? "" : System.Uri.EscapeDataString(assessmentMetadataName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SecurityAssessmentMetadata>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete metadata information on an assessment type in a specific subscription, will cause the deletion of all the assessments of that type in that subscription
		/// AssessmentsMetadataSubscription_Delete subscriptions/{subscriptionId}/providers/Microsoft.Security/assessmentMetadata/{assessmentMetadataName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="assessmentMetadataName">The Assessment Key - Unique key for the assessment type</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <returns>OK</returns>
		public async Task AssessmentsMetadataSubscription_DeleteAsync(string api_version, string assessmentMetadataName, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/assessmentMetadata/"+ (assessmentMetadataName==null? "" : System.Uri.EscapeDataString(assessmentMetadataName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
