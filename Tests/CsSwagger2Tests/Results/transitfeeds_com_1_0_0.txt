//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// This element contains information about a 401 Unauthorized error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class API401Response
	{
		
		/// <summary>
		/// Description of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		/// <summary>
		/// Indicates the status of this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<API401ResponseStatus> Status { get; set; }
		
		/// <summary>
		/// Indicates the timestamp (in number of seconds since the epoch (January 1 1970 00:00:00 GMT).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ts")]
		public System.Nullable<System.Int32> Ts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum API401ResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALIDKEY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERMISSIONDENIED = 1,
	}
	
	/// <summary>
	/// This element contains information about a 404 File Not Found error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class API404Response
	{
		
		/// <summary>
		/// Description of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		/// <summary>
		/// Indicates the status of this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<API404ResponseStatus> Status { get; set; }
		
		/// <summary>
		/// Indicates the timestamp (in number of seconds since the epoch (January 1 1970 00:00:00 GMT).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ts")]
		public System.Nullable<System.Int32> Ts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum API404ResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALIDMETHOD = 0,
	}
	
	/// <summary>
	/// Contains the information about a single feed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Feed
	{
		
		/// <summary>
		/// The unique ID for this feed. This is constructed using the ID of the feed's provider and an internal ID. This ID
		///can be used in other calls, such as `/getFeedVersions` or `/getLatestFeedVersion`.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Contains the information about a single location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="l")]
		public Location L { get; set; }
		
		/// <summary>
		/// If available, contains information about the latest version of this feed. This can help to determine if you need to call
		///`/getLatestFeedVersion` to retrieve a newer version of a feed.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latest")]
		public FeedLatest Latest { get; set; }
		
		/// <summary>
		/// The title of the feed as it appears on TransitFeeds.com
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="t")]
		public string T { get; set; }
		
		/// <summary>
		/// The type of feed (such as GTFS or GTFS-realtime).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ty")]
		public FeedTy Ty { get; set; }
		
		/// <summary>
		/// Contains URLs with additional information about this feed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="u")]
		public FeedU U { get; set; }
	}
	
	/// <summary>
	/// Contains the information about a single location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Location
	{
		
		/// <summary>
		/// The unique ID for this location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		/// <summary>
		/// The latitude of the approximate point of this location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public double Lat { get; set; }
		
		/// <summary>
		/// The longitude of the approximate point of this location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lng")]
		public double Lng { get; set; }
		
		/// <summary>
		/// The title of this location on its own (i.e. without any state or country information).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="n")]
		public string N { get; set; }
		
		/// <summary>
		/// The ID for the parent location. If a location has no parent this value is `0`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pid")]
		public int Pid { get; set; }
		
		/// <summary>
		/// The title of this location. This may include state/province and country, depending
		/// on the location of type it refers to.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="t")]
		public string T { get; set; }
	}
	
	public class FeedLatest
	{
		
		/// <summary>
		/// Indicates the timestamp of the latest feed version (in number of seconds since the epoch (January 1 1970 00:00:00 GMT).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ts")]
		public System.Nullable<System.Int32> Ts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum FeedTy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gtfs = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gtfsrealtime = 1,
	}
	
	public class FeedU
	{
		
		/// <summary>
		/// If available, this contains a URL to download the feed directly from the provider (as opposed to downloading from TransitFeeds.com).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="d")]
		public string D { get; set; }
		
		/// <summary>
		/// If available, this contains a URL with additional information about registering or downloading the feed from the provider.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="i")]
		public string I { get; set; }
	}
	
	/// <summary>
	/// Contains the information about a single feed version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FeedVersion
	{
		
		/// <summary>
		/// Contains the start/finish dates for this feed version, if available.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="d")]
		public FeedVersionD D { get; set; }
		
		/// <summary>
		/// If you have included an `err` value of `1` in your request, then any errors detected when importing this feed version are included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="err")]
		public FeedVersionIssue[] Err { get; set; }
		
		/// <summary>
		/// Contains the information about a single feed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="f")]
		public Feed F { get; set; }
		
		/// <summary>
		/// The unique ID for this feed. This is constructed using the feed ID and an internal ID (generally the date it was imported, but not always, so do not rely on this).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The filesize in bytes of the feed version when compressed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="size")]
		public int Size { get; set; }
		
		/// <summary>
		/// The timestamp of when this feed version was registered in the TransitFeeds.com system (in number of seconds since the epoch (January 1 1970 00:00:00 GMT).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ts")]
		public int Ts { get; set; }
		
		/// <summary>
		/// This is the URL to directly download the feed version via the TranstiFeeds.com web site (and not via the API). In other words,
		///you can provide a download URL without exposing your API key to others.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// If you have included a `warn` value of `1` in your request, then any warnings detected when importing this feed version are included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warn")]
		public FeedVersionIssue[] Warn { get; set; }
	}
	
	public class FeedVersionD
	{
		
		/// <summary>
		/// The start date of the feed version, in `YYYYMMDD` format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="f")]
		public string F { get; set; }
		
		/// <summary>
		/// The start date of the feed version, in `YYYYMMDD` format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="s")]
		public string S { get; set; }
	}
	
	/// <summary>
	/// Contains the information about a single error or warning associated with a feed version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FeedVersionIssue
	{
		
		/// <summary>
		/// The column name (if referring to a GTFS file / CSV file) associated with the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="c")]
		public string C { get; set; }
		
		/// <summary>
		/// The filename associated with this issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="f")]
		public string F { get; set; }
		
		/// <summary>
		/// The line number in the given file associated with the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="l")]
		public string L { get; set; }
		
		/// <summary>
		/// A description of the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="m")]
		public string M { get; set; }
	}
	
	/// <summary>
	/// This element contains the response for a `/getFeedVersions` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetFeedVersionsResponse
	{
		
		/// <summary>
		/// Description of the error, if the `status` value was not `OK`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		/// <summary>
		/// Contains requested data for a valid request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public GetFeedVersionsResponseResults Results { get; set; }
		
		/// <summary>
		/// Indicates the success status of this request. The following values are possible:
		///
		///* `OK` - Request was valid.
		///* `DEPRECATED` - Request resolved to a deprecated resource which will not be returned.
		///* `EMPTYKEY` - Request was missing API key.
		///* `MISSINGINPUT` - A required request parameter was missing.
		///* `INVALIDINPUT` - A request parameter was invalid.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<GetFeedVersionsResponseStatus> Status { get; set; }
		
		/// <summary>
		/// Indicates the timestamp (in number of seconds since the epoch (January 1 1970 00:00:00 GMT).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ts")]
		public System.Nullable<System.Int32> Ts { get; set; }
	}
	
	public class GetFeedVersionsResponseResults
	{
		
		/// <summary>
		/// An array of zero or more feed versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feeds")]
		public FeedVersion[] Feeds { get; set; }
		
		/// <summary>
		/// If the status value is `MISSINGINPUT` or `INVALIDINPUT`, this field contains the name of the offending field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// The maximum number of feed versions that can be returned in this response. If the final page is being
		///requested then this number may be larger than the number of feed versions returned in `versions`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The number of pages available, based on the `total` and `limit`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numPages")]
		public System.Nullable<System.Int32> NumPages { get; set; }
		
		/// <summary>
		/// The page number being requested, based on the maximum number than can be returned from in `limit`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The total number of feed versions found based on the request input. Note that this number may be larger
		///than the number of feed versions returned in `versions`, based on the values for `limit` and `page`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum GetFeedVersionsResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPRECATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMPTYKEY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSINGINPUT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALIDINPUT = 4,
	}
	
	/// <summary>
	/// This element contains the response for a `/getFeeds` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetFeedsResponse
	{
		
		/// <summary>
		/// Description of the error, if the `status` value was not `OK`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		/// <summary>
		/// Contains requested data for a valid request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public GetFeedsResponseResults Results { get; set; }
		
		/// <summary>
		/// Indicates the success status of this request. The following values are possible:
		///
		///* `OK` - Request was valid.
		///* `EMPTYKEY` - Request was missing API key.
		///* `MISSINGINPUT` - A required request parameter was missing.
		///* `INVALIDINPUT` - A request parameter was invalid.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<GetFeedsResponseStatus> Status { get; set; }
		
		/// <summary>
		/// Indicates the timestamp (in number of seconds since the epoch (January 1 1970 00:00:00 GMT).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ts")]
		public System.Nullable<System.Int32> Ts { get; set; }
	}
	
	public class GetFeedsResponseResults
	{
		
		/// <summary>
		/// An array of zero or more feeds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feeds")]
		public Feed[] Feeds { get; set; }
		
		/// <summary>
		/// If the status value is `MISSINGINPUT` or `INVALIDINPUT`, this field contains the name of the offending field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// The maximum number of feeds that can be returned in this response. If the final page is being
		///requested then this number may be larger than the number of feeds returned in `feeds`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The number of pages available, based on the `total` and `limit`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numPages")]
		public System.Nullable<System.Int32> NumPages { get; set; }
		
		/// <summary>
		/// The page number being requested, based on the maximum number than can be returned from in `limit`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The total number of feeds found based on the request input. Note that this number may be larger
		///than the number of feeds returned in `feeds`, based on the values for `limit` and `page`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum GetFeedsResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMPTYKEY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSINGINPUT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALIDINPUT = 3,
	}
	
	/// <summary>
	/// This element contains the response for a `/getLatestFeedVersion` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetLatestFeedVersionResponse
	{
		
		/// <summary>
		/// Description of the error, if the `status` value was not `OK`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		/// <summary>
		/// Contains requested data for a valid request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public GetLatestFeedVersionResponseResults Results { get; set; }
		
		/// <summary>
		/// Indicates the success status of this request. The following values are possible:
		///
		///* `OK` - Request was valid.
		///* `DEPRECATED` - Request resolved to a deprecated resource which will not be returned.
		///* `EMPTYKEY` - Request was missing API key.
		///* `MISSINGINPUT` - A required request parameter was missing.
		///* `INVALIDINPUT` - A request parameter was invalid.
		///* `OTHER` - Some other error occurred.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<GetLatestFeedVersionResponseStatus> Status { get; set; }
		
		/// <summary>
		/// Indicates the timestamp (in number of seconds since the epoch (January 1 1970 00:00:00 GMT).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ts")]
		public System.Nullable<System.Int32> Ts { get; set; }
	}
	
	public class GetLatestFeedVersionResponseResults
	{
		
		/// <summary>
		/// An array of zero or more feed versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feeds")]
		public FeedVersion[] Feeds { get; set; }
		
		/// <summary>
		/// If the status value is `MISSINGINPUT` or `INVALIDINPUT`, this field contains the name of the offending field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// The maximum number of feed versions that can be returned in this response. If the final page is being
		///requested then this number may be larger than the number of feed versions returned in `versions`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The number of pages available, based on the `total` and `limit`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numPages")]
		public System.Nullable<System.Int32> NumPages { get; set; }
		
		/// <summary>
		/// The page number being requested, based on the maximum number than can be returned from in `limit`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The total number of feed versions found based on the request input. Note that this number may be larger
		///than the number of feed versions returned in `versions`, based on the values for `limit` and `page`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum GetLatestFeedVersionResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPRECATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMPTYKEY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSINGINPUT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALIDINPUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 5,
	}
	
	/// <summary>
	/// This element contains the response for a `/getLocations` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetLocationsResponse
	{
		
		/// <summary>
		/// Description of the error, if the `status` value was not `OK`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		/// <summary>
		/// Contains requested data for a valid request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public GetLocationsResponseResults Results { get; set; }
		
		/// <summary>
		/// Indicates the success status of this request. The following values are possible:
		///
		///* `OK` - Request was valid.
		///* `EMPTYKEY` - Request was missing API key.
		///* `MISSINGINPUT` - A required request parameter was missing.
		///* `INVALIDINPUT` - A request parameter was invalid.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public GetFeedsResponseStatus Status { get; set; }
		
		/// <summary>
		/// Indicates the timestamp (in number of seconds since the epoch (January 1 1970 00:00:00 GMT).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ts")]
		public System.Nullable<System.Int32> Ts { get; set; }
	}
	
	public class GetLocationsResponseResults
	{
		
		/// <summary>
		/// If the status value is `MISSINGINPUT` or `INVALIDINPUT`, this field contains the name of the offending field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// An array of zero or more locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve a list of versions of specified (or all) feeds.
		/// This API call allows you to easily see every single feed update in the TranstiFeeds.com system. Since this can be quite
		/// long, it's also possible to filter this list by a single feed ID.
		/// 
		/// GetFeedVersions getFeedVersions
		/// </summary>
		/// <param name="key">Your personal API key, used for authentication.</param>
		/// <param name="feed">If you only want to retrieve feed versions for a particular feed, include its ID here. You can use the `/getFeeds` call to discover feed IDs.</param>
		/// <param name="page">The page number of results to return. For example, if you specify a `page` of `2` with a `limit` of 10, then results 11-20 are returned.
		///The number of pages available is included in the response.
		///</param>
		/// <param name="limit">The maximum number of results to return..</param>
		/// <param name="err">To include any errors detected when importing this feed in the response, specify a valud of `1`.</param>
		/// <param name="warn">To include any warnings detected when importing this feed in the response, specify a valud of `1`.</param>
		/// <returns>The response for a valid `/getFeedVersions` API call.</returns>
		public async Task<GetFeedVersionsResponse> GetFeedVersionsAsync(string key, string feed, int page, int limit, GetFeedVersionsErr err, GetFeedVersionsWarn warn)
		{
			var requestUri = "getFeedVersions?key=" + (key==null? "" : System.Uri.EscapeDataString(key))+"&feed=" + (feed==null? "" : System.Uri.EscapeDataString(feed))+"&page="+page+"&limit="+limit+"&err="+err+"&warn="+warn;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetFeedVersionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of feeds.
		/// Used this API to retrieve a list of feeds in the system. Doing so can be usedful to discover feed IDs that
		/// can be used in other API calls.
		/// 
		/// GetFeeds getFeeds
		/// </summary>
		/// <param name="key">Your personal API key, used for authentication.</param>
		/// <param name="location">This is the unique ID of a location. If specified, feeds will only be returned that belong to this location
		///(and perhaps sub-locations too, depending on the `descendants` value). You can use the `/getLocations` API
		///endpoint to determine location IDs.
		///</param>
		/// <param name="descendants">If a location is specified in `location`, this flag can be used to control if returned feeds must be assigned directly to the location, or if feeds belonging to sub-locations can also be returned. If `0`, then feeds must be assigned directly to the specified location.</param>
		/// <param name="page">The page number of results to return. For example, if you specify a `page` of `2` with a `limit` of 10, then results 11-20 are returned.
		///The number of pages available is included in the response.
		///</param>
		/// <param name="limit">The maximum number of results to return..</param>
		/// <param name="type">The type of feeds to return. If unspecified, feeds of all types are returned.</param>
		/// <returns>The response for a valid `/getFeeds` API call.</returns>
		public async Task<GetFeedsResponse> GetFeedsAsync(string key, int location, GetFeedsDescendants descendants, int page, int limit, FeedTy type)
		{
			var requestUri = "getFeeds?key=" + (key==null? "" : System.Uri.EscapeDataString(key))+"&location="+location+"&descendants="+descendants+"&page="+page+"&limit="+limit+"&type=" + type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetFeedsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the download URL for the latest version of a feed.
		/// Once you have used `/getFeeds` to discover a feed's URL, you can use this endpoint to download its latest version from TranstiFeeds.
		/// It will be unmodified in the original format from the provider.
		/// 
		/// GetLatestFeedVersion getLatestFeedVersion
		/// </summary>
		/// <param name="key">Your personal API key, used for authentication.</param>
		/// <param name="feed">The ID of the feed to retrieve the latest feed version for. You can use the `/getFeeds` call to discover feed IDs.</param>
		/// <returns>The response for a `/getLatestFeedVersion` API call that includes invalid request parameters.</returns>
		public async Task<GetLatestFeedVersionResponse> GetLatestFeedVersionAsync(string key, string feed)
		{
			var requestUri = "getLatestFeedVersion?key=" + (key==null? "" : System.Uri.EscapeDataString(key))+"&feed=" + (feed==null? "" : System.Uri.EscapeDataString(feed));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLatestFeedVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of locations.
		/// Retrieve a list of locations. Each location (except for the root) has a parent location, and each
		/// location has zero or more child locations. This hierarchy is generally structured so countries contain
		/// states, states contain cities (although this typically depends on the country).
		/// 
		/// GetLocations getLocations
		/// </summary>
		/// <param name="key">Your personal API key, used for authentication.</param>
		/// <returns>The response for a valid `getLocations` API call.</returns>
		public async Task<GetLocationsResponse> GetLocationsAsync(string key)
		{
			var requestUri = "getLocations?key=" + (key==null? "" : System.Uri.EscapeDataString(key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GetFeedVersionsErr
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	public enum GetFeedVersionsWarn
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	public enum GetFeedsDescendants
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
