//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The properties for a Media Services REST API endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiEndpoint
	{
		
		/// <summary>
		/// The Media Services REST endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// The version of Media Services REST API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="majorVersion")]
		public string MajorVersion { get; set; }
	}
	
	/// <summary>
	/// The error returned from a failed Media Services REST API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiError
	{
		
		/// <summary>
		/// Error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The request body for CheckNameAvailability API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityInput
	{
		
		/// <summary>
		/// The name of the resource. A name must be globally unique.
		/// Required
		/// Max length: 24
		/// Min length: 3
		/// Pattern: ^[a-z0-9]{3,24}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(24)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-z0-9]{3,24}$")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of MediaService resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CheckNameAvailabilityInputType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckNameAvailabilityInputType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mediaservices = 0,
	}
	
	/// <summary>
	/// The response body for CheckNameAvailability API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityOutput
	{
		
		/// <summary>
		/// Specifies the detailed reason if the name is not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Specifies if the name is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// Specifies the reason if the name is not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<CheckNameAvailabilityOutputReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckNameAvailabilityOutputReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlreadyExists = 2,
	}
	
	/// <summary>
	/// The properties of a Media Service resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MediaService : Resource
	{
		
		/// <summary>
		/// The additional properties of a Media Service resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MediaServiceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The collection of Media Service resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MediaServiceCollection
	{
		
		/// <summary>
		/// The collection of Media Service resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MediaService[] Value { get; set; }
	}
	
	/// <summary>
	/// The additional properties of a Media Service resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MediaServiceProperties
	{
		
		/// <summary>
		/// Read-only property that lists the Media Services REST API endpoints for this resource. If supplied on a PUT or PATCH, the value will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiEndpoints")]
		public ApiEndpoint[] ApiEndpoints { get; set; }
		
		/// <summary>
		/// The storage accounts for this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccounts")]
		public StorageAccount[] StorageAccounts { get; set; }
	}
	
	/// <summary>
	/// The properties of a storage account associated with this resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccount
	{
		
		/// <summary>
		/// The id of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts (isPrimary false).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Is this storage account resource the primary storage account for the Media Service resource. Blob only storage must set this to false.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isPrimary")]
		public bool IsPrimary { get; set; }
	}
	
	/// <summary>
	/// A Media Services REST API operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that represents the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Result of the request to list Media Services operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// URL to get the next set of operation list results if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Media Services operations supported by the Microsoft.Media resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// The request body for a RegenerateKey API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegenerateKeyInput
	{
		
		/// <summary>
		/// The keyType indicating which key you want to regenerate, Primary or Secondary.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyType")]
		public RegenerateKeyInputKeyType KeyType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RegenerateKeyInputKeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Primary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Secondary = 1,
	}
	
	/// <summary>
	/// The response body for a RegenerateKey API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegenerateKeyOutput
	{
		
		/// <summary>
		/// The new value of either the primary or secondary key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	/// <summary>
	/// The Azure Resource Manager resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// The id of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The geographic location of the resource. This must be one of the supported and registered Azure Geo Regions (for example, West US, East US, Southeast Asia, and so forth).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Tags to help categorize the resource in the Azure portal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The type of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Type of MediaService resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mediaservices = 0,
	}
	
	/// <summary>
	/// The response body for a ListKeys API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceKeys
	{
		
		/// <summary>
		/// The primary authorization endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryAuthEndpoint")]
		public string PrimaryAuthEndpoint { get; set; }
		
		/// <summary>
		/// The primary key for the Media Service resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryKey")]
		public string PrimaryKey { get; set; }
		
		/// <summary>
		/// The authorization scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// The secondary authorization endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryAuthEndpoint")]
		public string SecondaryAuthEndpoint { get; set; }
		
		/// <summary>
		/// The secondary key for the Media Service resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryKey")]
		public string SecondaryKey { get; set; }
	}
	
	/// <summary>
	/// The request  body for a SyncStorageKeys API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SyncStorageKeysInput
	{
		
		/// <summary>
		/// The id of the storage account resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available Media Services REST API operations.
		/// Operations_List providers/Microsoft.Media/operations
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2015-10-01.</param>
		/// <returns>Success. Returns a list of operations.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Media/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks whether the Media Service resource name is available. The name must be globally unique.
		/// MediaService_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability
		/// </summary>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2015-10-01.</param>
		/// <param name="requestBody">Properties needed to check the availability of a name.</param>
		/// <returns>Success. Returns details about whether a Media Service resource name is available.</returns>
		public async Task<CheckNameAvailabilityOutput> MediaService_CheckNameAvailabilityAsync(string subscriptionId, string api_version, CheckNameAvailabilityInput requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Media/CheckNameAvailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CheckNameAvailabilityOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all of the Media Services in a resource group.
		/// MediaService_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices
		/// </summary>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2015-10-01.</param>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <returns>Success. Returns a list of all of the Media Services accounts in a resource group.</returns>
		public async Task<MediaServiceCollection> MediaService_ListByResourceGroupAsync(string subscriptionId, string api_version, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Media/mediaservices&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MediaServiceCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Media Service.
		/// MediaService_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}
		/// </summary>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2015-10-01.</param>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="mediaServiceName">Name of the Media Service.</param>
		/// <returns>Success. Returns the details of the Media Services account.</returns>
		public async Task<MediaService> MediaService_GetAsync(string subscriptionId, string api_version, string resourceGroupName, string mediaServiceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Media/mediaservices/"+ (mediaServiceName==null? "" : System.Uri.EscapeDataString(mediaServiceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MediaService>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Media Service.
		/// MediaService_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}
		/// </summary>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2015-10-01.</param>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="mediaServiceName">Name of the Media Service.</param>
		/// <param name="requestBody">Media Service properties needed for creation.</param>
		public async Task MediaService_CreateAsync(string subscriptionId, string api_version, string resourceGroupName, string mediaServiceName, MediaService requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Media/mediaservices/"+ (mediaServiceName==null? "" : System.Uri.EscapeDataString(mediaServiceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a Media Service.
		/// MediaService_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}
		/// </summary>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2015-10-01.</param>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="mediaServiceName">Name of the Media Service.</param>
		/// <returns>Success. The Media Services account was deleted.</returns>
		public async Task MediaService_DeleteAsync(string subscriptionId, string api_version, string resourceGroupName, string mediaServiceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Media/mediaservices/"+ (mediaServiceName==null? "" : System.Uri.EscapeDataString(mediaServiceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Media Service.
		/// MediaService_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}
		/// </summary>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2015-10-01.</param>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="mediaServiceName">Name of the Media Service.</param>
		/// <param name="requestBody">Media Service properties needed for update.</param>
		/// <returns>Success. The Media Services account was updated.</returns>
		public async Task<MediaService> MediaService_UpdateAsync(string subscriptionId, string api_version, string resourceGroupName, string mediaServiceName, MediaService requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Media/mediaservices/"+ (mediaServiceName==null? "" : System.Uri.EscapeDataString(mediaServiceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MediaService>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the keys for a Media Service.
		/// MediaService_ListKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys
		/// </summary>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2015-10-01.</param>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="mediaServiceName">Name of the Media Service.</param>
		/// <returns>Success. The keys for the Media Services account were listed.</returns>
		public async Task<ServiceKeys> MediaService_ListKeysAsync(string subscriptionId, string api_version, string resourceGroupName, string mediaServiceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Media/mediaservices/"+ (mediaServiceName==null? "" : System.Uri.EscapeDataString(mediaServiceName))+"/listKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceKeys>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerates a primary or secondary key for a Media Service.
		/// MediaService_RegenerateKey subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey
		/// </summary>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2015-10-01.</param>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="mediaServiceName">Name of the Media Service.</param>
		/// <param name="requestBody">Properties needed to regenerate the Media Service key.</param>
		/// <returns>Success. The Media Services key specified in the input was regenerated.</returns>
		public async Task<RegenerateKeyOutput> MediaService_RegenerateKeyAsync(string subscriptionId, string api_version, string resourceGroupName, string mediaServiceName, RegenerateKeyInput requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Media/mediaservices/"+ (mediaServiceName==null? "" : System.Uri.EscapeDataString(mediaServiceName))+"/regenerateKey&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegenerateKeyOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Synchronizes storage account keys for a storage account associated with the Media Service account.
		/// MediaService_SyncStorageKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys
		/// </summary>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2015-10-01.</param>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="mediaServiceName">Name of the Media Service.</param>
		/// <param name="requestBody">Properties needed to synchronize the keys for a storage account to the Media Service.</param>
		/// <returns>Success. The keys for the storage account were synchronized.</returns>
		public async Task MediaService_SyncStorageKeysAsync(string subscriptionId, string api_version, string resourceGroupName, string mediaServiceName, SyncStorageKeysInput requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Media/mediaservices/"+ (mediaServiceName==null? "" : System.Uri.EscapeDataString(mediaServiceName))+"/syncStorageKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
