//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Data Lake Analytics Job Parameters base class for build and submit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BaseJobParameters
	{
		
		/// <summary>
		/// The common Data Lake Analytics job properties for job submission.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CreateJobProperties Properties { get; set; }
		
		/// <summary>
		/// The job type of the current job (Hive, USql, or Scope (for internal use only)).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public BaseJobParametersType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum BaseJobParametersType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USql = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scope = 2,
	}
	
	/// <summary>
	/// The parameters used to build a new Data Lake Analytics job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BuildJobParameters : BaseJobParameters
	{
		
		/// <summary>
		/// The friendly name of the job to build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The parameters used to submit a new Data Lake Analytics job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateJobParameters : BaseJobParameters
	{
		
		/// <summary>
		/// The degree of parallelism to use for this job. At most one of degreeOfParallelism and degreeOfParallelismPercent should be specified. If none, a default value of 1 will be used for degreeOfParallelism.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="degreeOfParallelism")]
		public System.Nullable<System.Int32> DegreeOfParallelism { get; set; }
		
		/// <summary>
		/// the degree of parallelism in percentage used for this job. At most one of degreeOfParallelism and degreeOfParallelismPercent should be specified. If none, a default value of 1 will be used for degreeOfParallelism.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="degreeOfParallelismPercent")]
		public System.Nullable<System.Double> DegreeOfParallelismPercent { get; set; }
		
		/// <summary>
		/// The list of log file name patterns to find in the logFolder. '*' is the only matching character allowed. Example format: jobExecution*.log or *mylog*.txt
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logFilePatterns")]
		public string[] LogFilePatterns { get; set; }
		
		/// <summary>
		/// The friendly name of the job to submit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The priority value to use for the current job. Lower numbers have a higher priority. By default, a job has a priority of 1000. This must be greater than 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Job relationship information properties including pipeline information, correlation information, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="related")]
		public JobRelationshipProperties Related { get; set; }
	}
	
	/// <summary>
	/// The common Data Lake Analytics job properties for job submission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateJobProperties
	{
		
		/// <summary>
		/// The runtime version of the Data Lake Analytics engine to use for the specific type of job being run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeVersion")]
		public string RuntimeVersion { get; set; }
		
		/// <summary>
		/// The script to run. Please note that the maximum script size is 3 MB.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// The job type of the current job (Hive, USql, or Scope (for internal use only)).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The parameters used to submit a new Data Lake Analytics Scope job. (Only for use internally with Scope job type.)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateScopeJobParameters : CreateJobParameters
	{
		
		/// <summary>
		/// The key-value pairs used to add additional metadata to the job information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Scope job properties used when submitting Scope jobs. (Only for use internally with Scope job type.)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateScopeJobProperties : CreateJobProperties
	{
		
		/// <summary>
		/// The list of email addresses, separated by semi-colons, to notify when the job reaches a terminal state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifier")]
		public string Notifier { get; set; }
		
		/// <summary>
		/// The list of resources that are required by the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public ScopeJobResource[] Resources { get; set; }
	}
	
	/// <summary>
	/// The Scope job resources. (Only for use internally with Scope job type.)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScopeJobResource
	{
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The path to the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// U-SQL job properties used when submitting U-SQL jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateUSqlJobProperties : CreateJobProperties
	{
		
		/// <summary>
		/// The specific compilation mode for the job used during execution. If this is not specified during submission, the server will determine the optimal compilation mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compileMode")]
		public System.Nullable<CreateUSqlJobPropertiesCompileMode> CompileMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CreateUSqlJobPropertiesCompileMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Semantic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Full = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SingleBox = 2,
	}
	
	/// <summary>
	/// Error diagnostic information for failed jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Diagnostics
	{
		
		/// <summary>
		/// The column where the error occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnNumber")]
		public System.Nullable<System.Int32> ColumnNumber { get; set; }
		
		/// <summary>
		/// The ending index of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.Int32> End { get; set; }
		
		/// <summary>
		/// The line number the error occurred on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNumber")]
		public System.Nullable<System.Int32> LineNumber { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The severity of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<DiagnosticsSeverity> Severity { get; set; }
		
		/// <summary>
		/// The starting index of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int32> Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DiagnosticsSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Warning = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Info = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SevereWarning = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deprecated = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserWarning = 5,
	}
	
	/// <summary>
	/// Hive job properties used when retrieving Hive jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HiveJobProperties : JobProperties
	{
		
		/// <summary>
		/// The number of statements that have been run based on the script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executedStatementCount")]
		public System.Nullable<System.Int32> ExecutedStatementCount { get; set; }
		
		/// <summary>
		/// The Hive logs location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logsLocation")]
		public string LogsLocation { get; set; }
		
		/// <summary>
		/// The location of Hive job output files (both execution output and results).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputLocation")]
		public string OutputLocation { get; set; }
		
		/// <summary>
		/// The number of statements that will be run based on the script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statementCount")]
		public System.Nullable<System.Int32> StatementCount { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics job data path item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobDataPath
	{
		
		/// <summary>
		/// The command that this job data relates to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="command")]
		public string Command { get; set; }
		
		/// <summary>
		/// The ID of the job this data is for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// The list of paths to all of the job data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paths")]
		public string[] Paths { get; set; }
	}
	
	/// <summary>
	/// The Data Lake Analytics job error details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobErrorDetails
	{
		
		/// <summary>
		/// The error message description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The details of the error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// The end offset in the job where the error was found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endOffset")]
		public System.Nullable<System.Int32> EndOffset { get; set; }
		
		/// <summary>
		/// The specific identifier for the type of error encountered in the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorId")]
		public string ErrorId { get; set; }
		
		/// <summary>
		/// The path to any supplemental error files, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		/// <summary>
		/// The link to MSDN or Azure help for this type of error, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="helpLink")]
		public string HelpLink { get; set; }
		
		/// <summary>
		/// The Data Lake Analytics job error details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="innerError")]
		public JobInnerError InnerError { get; set; }
		
		/// <summary>
		/// The internal diagnostic stack trace if the user requesting the job error details has sufficient permissions it will be retrieved, otherwise it will be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalDiagnostics")]
		public string InternalDiagnostics { get; set; }
		
		/// <summary>
		/// The specific line number in the job where the error occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNumber")]
		public System.Nullable<System.Int32> LineNumber { get; set; }
		
		/// <summary>
		/// The user friendly error message for the failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The recommended resolution for the failure, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolution")]
		public string Resolution { get; set; }
		
		/// <summary>
		/// The severity level of the failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public DiagnosticsSeverity Severity { get; set; }
		
		/// <summary>
		/// The ultimate source of the failure (usually either SYSTEM or USER).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// The start offset in the job where the error was found
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startOffset")]
		public System.Nullable<System.Int32> StartOffset { get; set; }
	}
	
	/// <summary>
	/// List of JobInfo items.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobInfoListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of JobInfo items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public JobInformationBasic[] Value { get; set; }
	}
	
	/// <summary>
	/// The common Data Lake Analytics job information properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobInformationBasic
	{
		
		/// <summary>
		/// The degree of parallelism used for this job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="degreeOfParallelism")]
		public System.Nullable<System.Int32> DegreeOfParallelism { get; set; }
		
		/// <summary>
		/// the degree of parallelism in percentage used for this job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="degreeOfParallelismPercent")]
		public System.Nullable<System.Double> DegreeOfParallelismPercent { get; set; }
		
		/// <summary>
		/// The completion time of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// the name of hierarchy queue node this job is assigned to, Null if job has not been assigned yet or the account doesn't have hierarchy queue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hierarchyQueueNode")]
		public string HierarchyQueueNode { get; set; }
		
		/// <summary>
		/// The job's unique identifier (a GUID).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// The list of log file name patterns to find in the logFolder. '*' is the only matching character allowed. Example format: jobExecution*.log or *mylog*.txt
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logFilePatterns")]
		public string[] LogFilePatterns { get; set; }
		
		/// <summary>
		/// The log folder path to use in the following format: adl://<accountName>.azuredatalakestore.net/system/jobservice/jobs/Usql/2016/03/13/17/18/5fe51957-93bc-4de0-8ddc-c5a4753b068b/logs/.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logFolder")]
		public string LogFolder { get; set; }
		
		/// <summary>
		/// The friendly name of the job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The priority value for the current job. Lower numbers have a higher priority. By default, a job has a priority of 1000. This must be greater than 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Job relationship information properties including pipeline information, correlation information, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="related")]
		public JobRelationshipProperties Related { get; set; }
		
		/// <summary>
		/// The result of job execution or the current result of the running job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public System.Nullable<JobInformationBasicResult> Result { get; set; }
		
		/// <summary>
		/// The start time of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The job state. When the job is in the Ended state, refer to Result and ErrorMessage for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<JobInformationBasicState> State { get; set; }
		
		/// <summary>
		/// The time the job was submitted to the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submitTime")]
		public System.Nullable<System.DateTimeOffset> SubmitTime { get; set; }
		
		/// <summary>
		/// The user or account that submitted the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submitter")]
		public string Submitter { get; set; }
		
		/// <summary>
		/// The key-value pairs used to add additional metadata to the job information. (Only for use internally with Scope job type.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The job type of the current job (Hive, USql, or Scope (for internal use only)).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public BaseJobParametersType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobInformationBasicResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobInformationBasicState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accepted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Compiling = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ended = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		New = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Queued = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scheduling = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Starting = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Paused = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WaitingForCapacity = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yielded = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Finalizing = 11,
	}
	
	/// <summary>
	/// The extended Data Lake Analytics job information properties returned when retrieving a specific job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobInformation : JobInformationBasic
	{
		
		/// <summary>
		/// The error message details for the job, if the job failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public JobErrorDetails[] ErrorMessage { get; set; }
		
		/// <summary>
		/// The common Data Lake Analytics job properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public JobProperties Properties { get; set; }
		
		/// <summary>
		/// The job state audit records, indicating when various operations have been performed on this job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateAuditRecords")]
		public JobStateAuditRecord[] StateAuditRecords { get; set; }
	}
	
	/// <summary>
	/// The Data Lake Analytics job state audit records for tracking the lifecycle of a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobStateAuditRecord
	{
		
		/// <summary>
		/// The details of the audit log.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// The new state the job is in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newState")]
		public string NewState { get; set; }
		
		/// <summary>
		/// The user who requests the change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedByUser")]
		public string RequestedByUser { get; set; }
		
		/// <summary>
		/// The time stamp that the state change took place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeStamp")]
		public System.Nullable<System.DateTimeOffset> TimeStamp { get; set; }
	}
	
	/// <summary>
	/// The Data Lake Analytics job error details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobInnerError
	{
		
		/// <summary>
		/// The component that failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="component")]
		public string Component { get; set; }
		
		/// <summary>
		/// The error message description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The details of the error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// The diagnostic error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diagnosticCode")]
		public System.Nullable<System.Int32> DiagnosticCode { get; set; }
		
		/// <summary>
		/// The specific identifier for the type of error encountered in the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorId")]
		public string ErrorId { get; set; }
		
		/// <summary>
		/// The link to MSDN or Azure help for this type of error, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="helpLink")]
		public string HelpLink { get; set; }
		
		/// <summary>
		/// The Data Lake Analytics job error details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="innerError")]
		public JobInnerError InnerError { get; set; }
		
		/// <summary>
		/// The internal diagnostic stack trace if the user requesting the job error details has sufficient permissions it will be retrieved, otherwise it will be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalDiagnostics")]
		public string InternalDiagnostics { get; set; }
		
		/// <summary>
		/// The user friendly error message for the failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The recommended resolution for the failure, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolution")]
		public string Resolution { get; set; }
		
		/// <summary>
		/// The severity level of the failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public DiagnosticsSeverity Severity { get; set; }
		
		/// <summary>
		/// The ultimate source of the failure (usually either SYSTEM or USER).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	/// <summary>
	/// Job Pipeline Information, showing the relationship of jobs and recurrences of those jobs in a pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobPipelineInformation
	{
		
		/// <summary>
		/// The number of job execution hours that resulted in canceled jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auHoursCanceled")]
		public System.Nullable<System.Double> AuHoursCanceled { get; set; }
		
		/// <summary>
		/// The number of job execution hours that resulted in failed jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auHoursFailed")]
		public System.Nullable<System.Double> AuHoursFailed { get; set; }
		
		/// <summary>
		/// The number of job execution hours that resulted in successful jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auHoursSucceeded")]
		public System.Nullable<System.Double> AuHoursSucceeded { get; set; }
		
		/// <summary>
		/// The last time a job in this pipeline was submitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastSubmitTime")]
		public System.Nullable<System.DateTimeOffset> LastSubmitTime { get; set; }
		
		/// <summary>
		/// The number of jobs in this pipeline that have been canceled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numJobsCanceled")]
		public System.Nullable<System.Int32> NumJobsCanceled { get; set; }
		
		/// <summary>
		/// The number of jobs in this pipeline that have failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numJobsFailed")]
		public System.Nullable<System.Int32> NumJobsFailed { get; set; }
		
		/// <summary>
		/// The number of jobs in this pipeline that have succeeded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numJobsSucceeded")]
		public System.Nullable<System.Int32> NumJobsSucceeded { get; set; }
		
		/// <summary>
		/// The job relationship pipeline identifier (a GUID).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelineId")]
		public string PipelineId { get; set; }
		
		/// <summary>
		/// The friendly name of the job relationship pipeline, which does not need to be unique.
		/// Max length: 260
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelineName")]
		[System.ComponentModel.DataAnnotations.MaxLength(260)]
		public string PipelineName { get; set; }
		
		/// <summary>
		/// The pipeline uri, unique, links to the originating service for this pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelineUri")]
		public string PipelineUri { get; set; }
		
		/// <summary>
		/// The list of recurrence identifiers representing each run of this pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurrences")]
		public string[] Recurrences { get; set; }
		
		/// <summary>
		/// The list of recurrence identifiers representing each run of this pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runs")]
		public JobPipelineRunInformation[] Runs { get; set; }
	}
	
	/// <summary>
	/// Run info for a specific job pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobPipelineRunInformation
	{
		
		/// <summary>
		/// The time this instance was last submitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastSubmitTime")]
		public System.Nullable<System.DateTimeOffset> LastSubmitTime { get; set; }
		
		/// <summary>
		/// The run identifier of an instance of pipeline executions (a GUID).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
	}
	
	/// <summary>
	/// List of job pipeline information items.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobPipelineInformationListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of job pipeline information items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public JobPipelineInformation[] Value { get; set; }
	}
	
	/// <summary>
	/// The common Data Lake Analytics job properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobProperties
	{
		
		/// <summary>
		/// The runtime version of the Data Lake Analytics engine to use for the specific type of job being run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeVersion")]
		public string RuntimeVersion { get; set; }
		
		/// <summary>
		/// The script to run. Please note that the maximum script size is 3 MB.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// The job type of the current job (Hive, USql, or Scope (for internal use only)).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Recurrence job information for a specific recurrence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobRecurrenceInformation
	{
		
		/// <summary>
		/// The number of job execution hours that resulted in canceled jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auHoursCanceled")]
		public System.Nullable<System.Double> AuHoursCanceled { get; set; }
		
		/// <summary>
		/// The number of job execution hours that resulted in failed jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auHoursFailed")]
		public System.Nullable<System.Double> AuHoursFailed { get; set; }
		
		/// <summary>
		/// The number of job execution hours that resulted in successful jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auHoursSucceeded")]
		public System.Nullable<System.Double> AuHoursSucceeded { get; set; }
		
		/// <summary>
		/// The last time a job in this recurrence was submitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastSubmitTime")]
		public System.Nullable<System.DateTimeOffset> LastSubmitTime { get; set; }
		
		/// <summary>
		/// The number of jobs in this recurrence that have been canceled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numJobsCanceled")]
		public System.Nullable<System.Int32> NumJobsCanceled { get; set; }
		
		/// <summary>
		/// The number of jobs in this recurrence that have failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numJobsFailed")]
		public System.Nullable<System.Int32> NumJobsFailed { get; set; }
		
		/// <summary>
		/// The number of jobs in this recurrence that have succeeded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numJobsSucceeded")]
		public System.Nullable<System.Int32> NumJobsSucceeded { get; set; }
		
		/// <summary>
		/// The recurrence identifier (a GUID), unique per activity/script, regardless of iterations. This is something to link different occurrences of the same job together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurrenceId")]
		public string RecurrenceId { get; set; }
		
		/// <summary>
		/// The recurrence name, user friendly name for the correlation between jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurrenceName")]
		public string RecurrenceName { get; set; }
	}
	
	/// <summary>
	/// List of job recurrence information items.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobRecurrenceInformationListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of job recurrence information items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public JobRecurrenceInformation[] Value { get; set; }
	}
	
	/// <summary>
	/// Job relationship information properties including pipeline information, correlation information, etc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobRelationshipProperties
	{
		
		/// <summary>
		/// The job relationship pipeline identifier (a GUID).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelineId")]
		public string PipelineId { get; set; }
		
		/// <summary>
		/// The friendly name of the job relationship pipeline, which does not need to be unique.
		/// Max length: 260
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelineName")]
		[System.ComponentModel.DataAnnotations.MaxLength(260)]
		public string PipelineName { get; set; }
		
		/// <summary>
		/// The pipeline uri, unique, links to the originating service for this pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelineUri")]
		public string PipelineUri { get; set; }
		
		/// <summary>
		/// The recurrence identifier (a GUID), unique per activity/script, regardless of iterations. This is something to link different occurrences of the same job together.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recurrenceId")]
		public string RecurrenceId { get; set; }
		
		/// <summary>
		/// The recurrence name, user friendly name for the correlation between jobs.
		/// Max length: 260
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurrenceName")]
		[System.ComponentModel.DataAnnotations.MaxLength(260)]
		public string RecurrenceName { get; set; }
		
		/// <summary>
		/// The run identifier (a GUID), unique identifier of the iteration of this pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
	}
	
	/// <summary>
	/// The Data Lake Analytics job resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobResource
	{
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The path to the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourcePath")]
		public string ResourcePath { get; set; }
		
		/// <summary>
		/// The job resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<JobResourceType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VertexResource = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JobManagerResource = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatisticsResource = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VertexResourceInUserFolder = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JobManagerResourceInUserFolder = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatisticsResourceInUserFolder = 5,
	}
	
	/// <summary>
	/// The Data Lake Analytics job execution statistics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobStatistics
	{
		
		/// <summary>
		/// The job finalizing start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finalizingTimeUtc")]
		public System.Nullable<System.DateTimeOffset> FinalizingTimeUtc { get; set; }
		
		/// <summary>
		/// The last update time for the statistics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTimeUtc")]
		public System.Nullable<System.DateTimeOffset> LastUpdateTimeUtc { get; set; }
		
		/// <summary>
		/// The list of stages for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stages")]
		public JobStatisticsVertexStage[] Stages { get; set; }
	}
	
	/// <summary>
	/// The Data Lake Analytics job statistics vertex stage information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobStatisticsVertexStage
	{
		
		/// <summary>
		/// The statistics information for resource usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocatedContainerCpuCoreCount")]
		public ResourceUsageStatistics AllocatedContainerCpuCoreCount { get; set; }
		
		/// <summary>
		/// The statistics information for resource usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocatedContainerMemSize")]
		public ResourceUsageStatistics AllocatedContainerMemSize { get; set; }
		
		/// <summary>
		/// The amount of data read, in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataRead")]
		public System.Nullable<System.Int64> DataRead { get; set; }
		
		/// <summary>
		/// The amount of data read across multiple pods, in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataReadCrossPod")]
		public System.Nullable<System.Int64> DataReadCrossPod { get; set; }
		
		/// <summary>
		/// The amount of data read in one pod, in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataReadIntraPod")]
		public System.Nullable<System.Int64> DataReadIntraPod { get; set; }
		
		/// <summary>
		/// The amount of data remaining to be read, in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataToRead")]
		public System.Nullable<System.Int64> DataToRead { get; set; }
		
		/// <summary>
		/// The amount of data written, in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataWritten")]
		public System.Nullable<System.Int64> DataWritten { get; set; }
		
		/// <summary>
		/// The number of duplicates that were discarded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplicateDiscardCount")]
		public System.Nullable<System.Int32> DuplicateDiscardCount { get; set; }
		
		/// <summary>
		/// The estimated vertex CPU core count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedVertexCpuCoreCount")]
		public System.Nullable<System.Int32> EstimatedVertexCpuCoreCount { get; set; }
		
		/// <summary>
		/// The estimated vertex memory size, in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedVertexMemSize")]
		public System.Nullable<System.Int64> EstimatedVertexMemSize { get; set; }
		
		/// <summary>
		/// The estimated vertex peak CPU core count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedVertexPeakCpuCoreCount")]
		public System.Nullable<System.Int32> EstimatedVertexPeakCpuCoreCount { get; set; }
		
		/// <summary>
		/// The number of failures that occurred in this stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedCount")]
		public System.Nullable<System.Int32> FailedCount { get; set; }
		
		/// <summary>
		/// The detailed information for a vertex.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDataReadVertex")]
		public JobStatisticsVertex MaxDataReadVertex { get; set; }
		
		/// <summary>
		/// The detailed information for a vertex.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxExecutionTimeVertex")]
		public JobStatisticsVertex MaxExecutionTimeVertex { get; set; }
		
		/// <summary>
		/// The detailed information for a vertex.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxPeakMemUsageVertex")]
		public JobStatisticsVertex MaxPeakMemUsageVertex { get; set; }
		
		/// <summary>
		/// The maximum amount of data read in a single vertex, in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxVertexDataRead")]
		public System.Nullable<System.Int64> MaxVertexDataRead { get; set; }
		
		/// <summary>
		/// The minimum amount of data read in a single vertex, in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minVertexDataRead")]
		public System.Nullable<System.Int64> MinVertexDataRead { get; set; }
		
		/// <summary>
		/// The number of read failures in this stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readFailureCount")]
		public System.Nullable<System.Int32> ReadFailureCount { get; set; }
		
		/// <summary>
		/// The number of vertices that were revoked during this stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revocationCount")]
		public System.Nullable<System.Int32> RevocationCount { get; set; }
		
		/// <summary>
		/// The number of currently running vertices in this stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runningCount")]
		public System.Nullable<System.Int32> RunningCount { get; set; }
		
		/// <summary>
		/// The number of currently scheduled vertices in this stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledCount")]
		public System.Nullable<System.Int32> ScheduledCount { get; set; }
		
		/// <summary>
		/// The name of this stage in job execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stageName")]
		public string StageName { get; set; }
		
		/// <summary>
		/// The number of vertices that succeeded in this stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="succeededCount")]
		public System.Nullable<System.Int32> SucceededCount { get; set; }
		
		/// <summary>
		/// The amount of temporary data written, in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tempDataWritten")]
		public System.Nullable<System.Int64> TempDataWritten { get; set; }
		
		/// <summary>
		/// The total vertex count for this stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
		
		/// <summary>
		/// The sum of the total execution time of all the vertices in the stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalExecutionTime")]
		public string TotalExecutionTime { get; set; }
		
		/// <summary>
		/// The amount of time that failed vertices took up in this stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalFailedTime")]
		public string TotalFailedTime { get; set; }
		
		/// <summary>
		/// The sum of the peak memory usage of all the vertices in the stage, in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPeakMemUsage")]
		public System.Nullable<System.Int64> TotalPeakMemUsage { get; set; }
		
		/// <summary>
		/// The current progress of this stage, as a percentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalProgress")]
		public System.Nullable<System.Int32> TotalProgress { get; set; }
		
		/// <summary>
		/// The amount of time all successful vertices took in this stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSucceededTime")]
		public string TotalSucceededTime { get; set; }
		
		/// <summary>
		/// The statistics information for resource usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usedVertexCpuCoreCount")]
		public ResourceUsageStatistics UsedVertexCpuCoreCount { get; set; }
		
		/// <summary>
		/// The statistics information for resource usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usedVertexPeakMemSize")]
		public ResourceUsageStatistics UsedVertexPeakMemSize { get; set; }
	}
	
	/// <summary>
	/// The detailed information for a vertex.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobStatisticsVertex
	{
		
		/// <summary>
		/// The amount of data read of the vertex, in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataRead")]
		public System.Nullable<System.Int64> DataRead { get; set; }
		
		/// <summary>
		/// The amount of execution time of the vertex.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionTime")]
		public string ExecutionTime { get; set; }
		
		/// <summary>
		/// The name of the vertex.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The amount of peak memory usage of the vertex, in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peakMemUsage")]
		public System.Nullable<System.Int64> PeakMemUsage { get; set; }
		
		/// <summary>
		/// The id of the vertex.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vertexId")]
		public string VertexId { get; set; }
	}
	
	/// <summary>
	/// The statistics information for resource usage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceUsageStatistics
	{
		
		/// <summary>
		/// The average value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="average")]
		public System.Nullable<System.Double> Average { get; set; }
		
		/// <summary>
		/// The maximum value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public System.Nullable<System.Int64> Maximum { get; set; }
		
		/// <summary>
		/// The minimum value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public System.Nullable<System.Int64> Minimum { get; set; }
	}
	
	/// <summary>
	/// Scope job properties used when submitting and retrieving Scope jobs. (Only for use internally with Scope job type.)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScopeJobProperties : JobProperties
	{
		
		/// <summary>
		/// The list of email addresses, separated by semi-colons, to notify when the job reaches a terminal state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifier")]
		public string Notifier { get; set; }
		
		/// <summary>
		/// The list of resources that are required by the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public ScopeJobResource[] Resources { get; set; }
		
		/// <summary>
		/// The ID used to identify the job manager coordinating job execution. This value should not be set by the user and will be ignored if it is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rootProcessNodeId")]
		public string RootProcessNodeId { get; set; }
		
		/// <summary>
		/// The total time this job spent compiling. This value should not be set by the user and will be ignored if it is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCompilationTime")]
		public string TotalCompilationTime { get; set; }
		
		/// <summary>
		/// The total time this job spent paused. This value should not be set by the user and will be ignored if it is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPausedTime")]
		public string TotalPausedTime { get; set; }
		
		/// <summary>
		/// The total time this job spent queued. This value should not be set by the user and will be ignored if it is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalQueuedTime")]
		public string TotalQueuedTime { get; set; }
		
		/// <summary>
		/// The total time this job spent executing. This value should not be set by the user and will be ignored if it is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalRunningTime")]
		public string TotalRunningTime { get; set; }
		
		/// <summary>
		/// The algebra file path after the job has completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAlgebraPath")]
		public string UserAlgebraPath { get; set; }
		
		/// <summary>
		/// The ID used to identify the yarn application executing the job. This value should not be set by the user and will be ignored if it is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yarnApplicationId")]
		public string YarnApplicationId { get; set; }
	}
	
	/// <summary>
	/// U-SQL job properties used when retrieving U-SQL jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlJobProperties : JobProperties
	{
		
		/// <summary>
		/// The algebra file path after the job has completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="algebraFilePath")]
		public string AlgebraFilePath { get; set; }
		
		/// <summary>
		/// The specific compilation mode for the job used during execution. If this is not specified during submission, the server will determine the optimal compilation mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compileMode")]
		public CreateUSqlJobPropertiesCompileMode CompileMode { get; set; }
		
		/// <summary>
		/// A Data Lake Analytics job data path item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugData")]
		public JobDataPath DebugData { get; set; }
		
		/// <summary>
		/// The diagnostics for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diagnostics")]
		public Diagnostics[] Diagnostics { get; set; }
		
		/// <summary>
		/// The list of resources that are required by the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public JobResource[] Resources { get; set; }
		
		/// <summary>
		/// The ID used to identify the job manager coordinating job execution. This value should not be set by the user and will be ignored if it is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rootProcessNodeId")]
		public string RootProcessNodeId { get; set; }
		
		/// <summary>
		/// The Data Lake Analytics job execution statistics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public JobStatistics Statistics { get; set; }
		
		/// <summary>
		/// The total time this job spent compiling. This value should not be set by the user and will be ignored if it is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCompilationTime")]
		public string TotalCompilationTime { get; set; }
		
		/// <summary>
		/// The total time this job spent paused. This value should not be set by the user and will be ignored if it is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPausedTime")]
		public string TotalPausedTime { get; set; }
		
		/// <summary>
		/// The total time this job spent queued. This value should not be set by the user and will be ignored if it is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalQueuedTime")]
		public string TotalQueuedTime { get; set; }
		
		/// <summary>
		/// The total time this job spent executing. This value should not be set by the user and will be ignored if it is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalRunningTime")]
		public string TotalRunningTime { get; set; }
		
		/// <summary>
		/// The ID used to identify the yarn application executing the job. This value should not be set by the user and will be ignored if it is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yarnApplicationId")]
		public string YarnApplicationId { get; set; }
		
		/// <summary>
		/// The timestamp (in ticks) for the yarn application executing the job. This value should not be set by the user and will be ignored if it is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yarnApplicationTimeStamp")]
		public System.Nullable<System.Int64> YarnApplicationTimeStamp { get; set; }
	}
	
	/// <summary>
	/// The parameters that can be used to update existing Data Lake Analytics job information properties. (Only for use internally with Scope job type.)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateJobParameters
	{
		
		/// <summary>
		/// The degree of parallelism used for this job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="degreeOfParallelism")]
		public System.Nullable<System.Int32> DegreeOfParallelism { get; set; }
		
		/// <summary>
		/// the degree of parallelism in percentage used for this job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="degreeOfParallelismPercent")]
		public System.Nullable<System.Double> DegreeOfParallelismPercent { get; set; }
		
		/// <summary>
		/// The priority value for the current job. Lower numbers have a higher priority. By default, a job has a priority of 1000. This must be greater than 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// The key-value pairs used to add additional metadata to the job information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Builds (compiles) the specified job in the specified Data Lake Analytics account for job correctness and validation.
		/// Job_Build buildJob
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The parameters to build a job.</param>
		/// <returns>Successfully built the job script.</returns>
		public async Task<JobInformation> Job_BuildAsync(string api_version, BuildJobParameters requestBody)
		{
			var requestUri = "buildJob?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobInformation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the jobs, if any, associated with the specified Data Lake Analytics account. The response includes a link to the next page of results, if any.
		/// Job_List jobs
		/// </summary>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of jobs.</returns>
		public async Task<JobInfoListResult> Job_ListAsync(string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "jobs?$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobInfoListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the job information for the specified job ID.
		/// Job_Get jobs/{jobIdentity}
		/// </summary>
		/// <param name="jobIdentity">JobInfo ID.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved details of the specified job.</returns>
		public async Task<JobInformation> Job_GetAsync(string jobIdentity, string api_version)
		{
			var requestUri = "jobs/"+ (jobIdentity==null? "" : System.Uri.EscapeDataString(jobIdentity))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobInformation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submits a job to the specified Data Lake Analytics account.
		/// Job_Create jobs/{jobIdentity}
		/// </summary>
		/// <param name="jobIdentity">Job identifier. Uniquely identifies the job across all jobs submitted to the service.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The parameters to submit a job.</param>
		/// <returns>Successfully submitted the job.</returns>
		public async Task<JobInformation> Job_CreateAsync(string jobIdentity, string api_version, CreateJobParameters requestBody)
		{
			var requestUri = "jobs/"+ (jobIdentity==null? "" : System.Uri.EscapeDataString(jobIdentity))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobInformation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the job information for the specified job ID. (Only for use internally with Scope job type.)
		/// Job_Update jobs/{jobIdentity}
		/// </summary>
		/// <param name="jobIdentity">Job identifier. Uniquely identifies the job across all jobs submitted to the service.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The parameters to update a job.</param>
		/// <returns>Successfully updated the details of the specified job.</returns>
		public async Task<JobInformation> Job_UpdateAsync(string jobIdentity, string api_version, UpdateJobParameters requestBody)
		{
			var requestUri = "jobs/"+ (jobIdentity==null? "" : System.Uri.EscapeDataString(jobIdentity))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobInformation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels the running job specified by the job ID.
		/// Job_Cancel jobs/{jobIdentity}/CancelJob
		/// </summary>
		/// <param name="jobIdentity">Job identifier. Uniquely identifies the job across all jobs submitted to the service.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully cancelled the job.</returns>
		public async Task Job_CancelAsync(string jobIdentity, string api_version)
		{
			var requestUri = "jobs/"+ (jobIdentity==null? "" : System.Uri.EscapeDataString(jobIdentity))+"/CancelJob&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the job debug data information specified by the job ID.
		/// Job_GetDebugDataPath jobs/{jobIdentity}/GetDebugDataPath
		/// </summary>
		/// <param name="jobIdentity">Job identifier. Uniquely identifies the job across all jobs submitted to the service.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved debug data paths of the specified job.</returns>
		public async Task<JobDataPath> Job_GetDebugDataPathAsync(string jobIdentity, string api_version)
		{
			var requestUri = "jobs/"+ (jobIdentity==null? "" : System.Uri.EscapeDataString(jobIdentity))+"/GetDebugDataPath&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobDataPath>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets statistics of the specified job.
		/// Job_GetStatistics jobs/{jobIdentity}/GetStatistics
		/// </summary>
		/// <param name="jobIdentity">Job Information ID.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved job statistics of the specified job.</returns>
		public async Task<JobStatistics> Job_GetStatisticsAsync(string jobIdentity, string api_version)
		{
			var requestUri = "jobs/"+ (jobIdentity==null? "" : System.Uri.EscapeDataString(jobIdentity))+"/GetStatistics&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobStatistics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Pauses the specified job and places it back in the job queue, behind other jobs of equal or higher importance, based on priority. (Only for use internally with Scope job type.)
		/// Job_Yield jobs/{jobIdentity}/YieldJob
		/// </summary>
		/// <param name="jobIdentity">Job identifier. Uniquely identifies the job across all jobs submitted to the service.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully yielded the specified job.</returns>
		public async Task Job_YieldAsync(string jobIdentity, string api_version)
		{
			var requestUri = "jobs/"+ (jobIdentity==null? "" : System.Uri.EscapeDataString(jobIdentity))+"/YieldJob&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all pipelines.
		/// Pipeline_List pipelines
		/// </summary>
		/// <param name="startDateTime">The start date for when to get the list of pipelines. The startDateTime and endDateTime can be no more than 30 days apart.</param>
		/// <param name="endDateTime">The end date for when to get the list of pipelines. The startDateTime and endDateTime can be no more than 30 days apart.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of pipelines.</returns>
		public async Task<JobPipelineInformationListResult> Pipeline_ListAsync(System.DateTimeOffset startDateTime, System.DateTimeOffset endDateTime, string api_version)
		{
			var requestUri = "pipelines?startDateTime=" + startDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDateTime=" + endDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobPipelineInformationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Pipeline information for the specified pipeline ID.
		/// Pipeline_Get pipelines/{pipelineIdentity}
		/// </summary>
		/// <param name="pipelineIdentity">Pipeline ID.</param>
		/// <param name="startDateTime">The start date for when to get the pipeline and aggregate its data. The startDateTime and endDateTime can be no more than 30 days apart.</param>
		/// <param name="endDateTime">The end date for when to get the pipeline and aggregate its data. The startDateTime and endDateTime can be no more than 30 days apart.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved details of the specified pipeline.</returns>
		public async Task<JobPipelineInformation> Pipeline_GetAsync(string pipelineIdentity, System.DateTimeOffset startDateTime, System.DateTimeOffset endDateTime, string api_version)
		{
			var requestUri = "pipelines/"+ (pipelineIdentity==null? "" : System.Uri.EscapeDataString(pipelineIdentity))+"&startDateTime=" + startDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDateTime=" + endDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobPipelineInformation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all recurrences.
		/// Recurrence_List recurrences
		/// </summary>
		/// <param name="startDateTime">The start date for when to get the list of recurrences. The startDateTime and endDateTime can be no more than 30 days apart.</param>
		/// <param name="endDateTime">The end date for when to get the list of recurrences. The startDateTime and endDateTime can be no more than 30 days apart.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of recurrences.</returns>
		public async Task<JobRecurrenceInformationListResult> Recurrence_ListAsync(System.DateTimeOffset startDateTime, System.DateTimeOffset endDateTime, string api_version)
		{
			var requestUri = "recurrences?startDateTime=" + startDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDateTime=" + endDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobRecurrenceInformationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the recurrence information for the specified recurrence ID.
		/// Recurrence_Get recurrences/{recurrenceIdentity}
		/// </summary>
		/// <param name="recurrenceIdentity">Recurrence ID.</param>
		/// <param name="startDateTime">The start date for when to get the recurrence and aggregate its data. The startDateTime and endDateTime can be no more than 30 days apart.</param>
		/// <param name="endDateTime">The end date for when to get recurrence and aggregate its data. The startDateTime and endDateTime can be no more than 30 days apart.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved details of the specified pipeline.</returns>
		public async Task<JobRecurrenceInformation> Recurrence_GetAsync(string recurrenceIdentity, System.DateTimeOffset startDateTime, System.DateTimeOffset endDateTime, string api_version)
		{
			var requestUri = "recurrences/"+ (recurrenceIdentity==null? "" : System.Uri.EscapeDataString(recurrenceIdentity))+"&startDateTime=" + startDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDateTime=" + endDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobRecurrenceInformation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
