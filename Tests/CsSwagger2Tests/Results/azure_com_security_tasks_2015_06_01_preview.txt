//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Security task that we recommend to do in order to strengthen security
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecurityTask
	{
		
		/// <summary>
		/// Describes properties of a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SecurityTaskProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Describes properties of a task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecurityTaskProperties
	{
		
		/// <summary>
		/// The time this task was discovered in UTC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTimeUtc")]
		public System.Nullable<System.DateTimeOffset> CreationTimeUtc { get; set; }
		
		/// <summary>
		/// The time this task's details were last changed in UTC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastStateChangeTimeUtc")]
		public System.Nullable<System.DateTimeOffset> LastStateChangeTimeUtc { get; set; }
		
		/// <summary>
		/// Changing set of properties, depending on the task type that is derived from the name field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityTaskParameters")]
		public SecurityTaskParameters SecurityTaskParameters { get; set; }
		
		/// <summary>
		/// State of the task (Active, Resolved etc.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Additional data on the state of the task
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subState")]
		public string SubState { get; set; }
	}
	
	/// <summary>
	/// Changing set of properties, depending on the task type that is derived from the name field
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecurityTaskParameters
	{
		
		/// <summary>
		/// Name of the task type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// List of security task recommendations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecurityTaskList
	{
		
		/// <summary>
		/// The URI to fetch the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SecurityTask[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Recommended tasks that will help improve the security of the subscription proactively
		/// Tasks_ListByHomeRegion subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/tasks
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="ascLocation">The location where ASC stores the data of the subscription. can be retrieved from Get locations</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <returns>OK</returns>
		public async Task<SecurityTaskList> Tasks_ListByHomeRegionAsync(string api_version, string subscriptionId, string ascLocation, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/locations/"+ (ascLocation==null? "" : System.Uri.EscapeDataString(ascLocation))+"/tasks?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SecurityTaskList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recommended tasks that will help improve the security of the subscription proactively
		/// Tasks_GetSubscriptionLevelTask subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="ascLocation">The location where ASC stores the data of the subscription. can be retrieved from Get locations</param>
		/// <param name="taskName">Name of the task object, will be a GUID</param>
		/// <returns>OK</returns>
		public async Task<SecurityTask> Tasks_GetSubscriptionLevelTaskAsync(string api_version, string subscriptionId, string ascLocation, string taskName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/locations/"+ (ascLocation==null? "" : System.Uri.EscapeDataString(ascLocation))+"/tasks/"+ (taskName==null? "" : System.Uri.EscapeDataString(taskName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SecurityTask>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recommended tasks that will help improve the security of the subscription proactively
		/// Tasks_UpdateSubscriptionLevelTaskState subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}/{taskUpdateActionType}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="ascLocation">The location where ASC stores the data of the subscription. can be retrieved from Get locations</param>
		/// <param name="taskName">Name of the task object, will be a GUID</param>
		/// <param name="taskUpdateActionType">Type of the action to do on the task</param>
		public async Task Tasks_UpdateSubscriptionLevelTaskStateAsync(string api_version, string subscriptionId, string ascLocation, string taskName, Tasks_UpdateSubscriptionLevelTaskStateTaskUpdateActionType taskUpdateActionType)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/locations/"+ (ascLocation==null? "" : System.Uri.EscapeDataString(ascLocation))+"/tasks/"+ (taskName==null? "" : System.Uri.EscapeDataString(taskName))+"/"+taskUpdateActionType+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recommended tasks that will help improve the security of the subscription proactively
		/// Tasks_List subscriptions/{subscriptionId}/providers/Microsoft.Security/tasks
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <returns>OK</returns>
		public async Task<SecurityTaskList> Tasks_ListAsync(string api_version, string subscriptionId, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/tasks?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SecurityTaskList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recommended tasks that will help improve the security of the subscription proactively
		/// Tasks_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/tasks
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="ascLocation">The location where ASC stores the data of the subscription. can be retrieved from Get locations</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <returns>OK</returns>
		public async Task<SecurityTaskList> Tasks_ListByResourceGroupAsync(string api_version, string subscriptionId, string resourceGroupName, string ascLocation, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Security/locations/"+ (ascLocation==null? "" : System.Uri.EscapeDataString(ascLocation))+"/tasks?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SecurityTaskList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recommended tasks that will help improve the security of the subscription proactively
		/// Tasks_GetResourceGroupLevelTask subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="ascLocation">The location where ASC stores the data of the subscription. can be retrieved from Get locations</param>
		/// <param name="taskName">Name of the task object, will be a GUID</param>
		/// <returns>OK</returns>
		public async Task<SecurityTask> Tasks_GetResourceGroupLevelTaskAsync(string api_version, string subscriptionId, string resourceGroupName, string ascLocation, string taskName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Security/locations/"+ (ascLocation==null? "" : System.Uri.EscapeDataString(ascLocation))+"/tasks/"+ (taskName==null? "" : System.Uri.EscapeDataString(taskName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SecurityTask>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recommended tasks that will help improve the security of the subscription proactively
		/// Tasks_UpdateResourceGroupLevelTaskState subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}/{taskUpdateActionType}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="ascLocation">The location where ASC stores the data of the subscription. can be retrieved from Get locations</param>
		/// <param name="taskName">Name of the task object, will be a GUID</param>
		/// <param name="taskUpdateActionType">Type of the action to do on the task</param>
		public async Task Tasks_UpdateResourceGroupLevelTaskStateAsync(string api_version, string subscriptionId, string resourceGroupName, string ascLocation, string taskName, Tasks_UpdateSubscriptionLevelTaskStateTaskUpdateActionType taskUpdateActionType)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Security/locations/"+ (ascLocation==null? "" : System.Uri.EscapeDataString(ascLocation))+"/tasks/"+ (taskName==null? "" : System.Uri.EscapeDataString(taskName))+"/"+taskUpdateActionType+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Tasks_UpdateSubscriptionLevelTaskStateTaskUpdateActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Activate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dismiss = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Start = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Resolve = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Close = 4,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
