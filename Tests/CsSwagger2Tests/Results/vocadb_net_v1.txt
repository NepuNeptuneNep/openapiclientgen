//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ActivityEntryForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="archivedVersion")]
		public ArchivedObjectVersionForApiContract ArchivedVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public UserForApiContract Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editEvent")]
		public System.Nullable<ActivityEntryForApiContractEditEvent> EditEvent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entry")]
		public EntryForApiContract Entry { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ArchivedObjectVersionForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="changedFields")]
		public string[] ChangedFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public System.Nullable<UserForApiContractGroupId> GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="knownLanguages")]
		public UserKnownLanguageContract[] KnownLanguages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainPicture")]
		public EntryThumbForApiContract MainPicture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberSince")]
		public System.Nullable<System.DateTimeOffset> MemberSince { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oldUsernames")]
		public OldUsernameContract[] OldUsernames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verifiedArtist")]
		public System.Nullable<System.Boolean> VerifiedArtist { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum UserForApiContractGroupId
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Limited = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Regular = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Trusted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Moderator = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Admin = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserKnownLanguageContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="cultureCode")]
		public string CultureCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proficiency")]
		public System.Nullable<UserKnownLanguageContractProficiency> Proficiency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum UserKnownLanguageContractProficiency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basics = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Intermediate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Advanced = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Native = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class EntryThumbForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="mime")]
		public string Mime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlSmallThumb")]
		public string UrlSmallThumb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlThumb")]
		public string UrlThumb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlTinyThumb")]
		public string UrlTinyThumb { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class OldUsernameContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oldName")]
		public string OldName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ActivityEntryForApiContractEditEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Restored = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class EntryForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="activityDate")]
		public System.Nullable<System.DateTimeOffset> ActivityDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artistString")]
		public string ArtistString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artistType")]
		public System.Nullable<EntryForApiContractArtistType> ArtistType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultName")]
		public string DefaultName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultNameLanguage")]
		public System.Nullable<EntryForApiContractDefaultNameLanguage> DefaultNameLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discType")]
		public System.Nullable<EntryForApiContractDiscType> DiscType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryType")]
		public System.Nullable<EntryForApiContractEntryType> EntryType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventCategory")]
		public System.Nullable<EntryForApiContractEventCategory> EventCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainPicture")]
		public EntryThumbForApiContract MainPicture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="names")]
		public LocalizedStringContract[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pVs")]
		public PVContract[] PVs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="releaseEventSeriesName")]
		public string ReleaseEventSeriesName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="songListFeaturedCategory")]
		public System.Nullable<EntryForApiContractSongListFeaturedCategory> SongListFeaturedCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="songType")]
		public System.Nullable<EntryForApiContractSongType> SongType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<EntryForApiContractStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagCategoryName")]
		public string TagCategoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagUsageForApiContract[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlSlug")]
		public string UrlSlug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webLinks")]
		public ArchivedWebLinkContract[] WebLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum EntryForApiContractArtistType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Circle = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Producer = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Animator = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Illustrator = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lyricist = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vocaloid = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UTAU = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CeVIO = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OtherVoiceSynthesizer = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OtherVocalist = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OtherGroup = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OtherIndividual = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Utaite = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Band = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vocalist = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Character = 17,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum EntryForApiContractDefaultNameLanguage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Japanese = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Romaji = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		English = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum EntryForApiContractDiscType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Album = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Single = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SplitAlbum = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Compilation = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Video = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Artbook = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Game = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fanmade = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instrumental = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum EntryForApiContractEntryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Undefined = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Album = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Artist = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiscussionTopic = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PV = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReleaseEvent = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReleaseEventSeries = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Song = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SongList = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tag = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		User = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum EntryForApiContractEventCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlbumRelease = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Anniversary = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Club = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Concert = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Contest = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Convention = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class LocalizedStringContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public EntryForApiContractDefaultNameLanguage Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PVContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public System.Nullable<System.Int32> CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="extendedMetadata")]
		public PVExtendedMetadata ExtendedMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publishDate")]
		public System.Nullable<System.DateTimeOffset> PublishDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pvId")]
		public string PvId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pvType")]
		public System.Nullable<PVContractPvType> PvType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service")]
		public System.Nullable<PVContractService> Service { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbUrl")]
		public string ThumbUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PVExtendedMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="json")]
		public string Json { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum PVContractPvType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Original = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reprint = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum PVContractService
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NicoNicoDouga = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Youtube = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SoundCloud = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vimeo = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Piapro = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bilibili = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		File = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LocalFile = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creofuga = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bandcamp = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum EntryForApiContractSongListFeaturedCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Concerts = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VocaloidRanking = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pools = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum EntryForApiContractSongType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Original = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Remaster = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Remix = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cover = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Arrangement = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instrumental = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mashup = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MusicPV = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DramaPV = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Live = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Illustration = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum EntryForApiContractStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Draft = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Finished = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Approved = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Locked = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class TagUsageForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public TagBaseContract Tag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class TagBaseContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categoryName")]
		public string CategoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlSlug")]
		public string UrlSlug { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ArchivedWebLinkContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<ArchivedWebLinkContractCategory> Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ArchivedWebLinkContractCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Official = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commercial = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reference = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class AdvancedSearchFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="filterType")]
		public System.Nullable<AdvancedSearchFilterFilterType> FilterType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="negate")]
		public System.Nullable<System.Boolean> Negate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="param")]
		public string Param { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum AdvancedSearchFilterFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ArtistType = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WebLink = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HasUserAccount = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RootVoicebank = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceProvider = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HasStoreLink = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HasTracks = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoCoverPicture = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HasAlbum = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HasOriginalMedia = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HasMedia = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HasMultipleVoicebanks = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HasPublishDate = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lyrics = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LyricsContent = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class AlbumContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artistString")]
		public string ArtistString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverPictureMime")]
		public string CoverPictureMime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discType")]
		public EntryForApiContractDiscType DiscType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ratingAverage")]
		public System.Nullable<System.Double> RatingAverage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ratingCount")]
		public System.Nullable<System.Int32> RatingCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="releaseDate")]
		public OptionalDateTimeContract ReleaseDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="releaseEvent")]
		public ReleaseEventForApiContract ReleaseEvent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EntryForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class OptionalDateTimeContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="formatted")]
		public string Formatted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isEmpty")]
		public System.Nullable<System.Boolean> IsEmpty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ReleaseEventForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public ArtistForEventContract[] Artists { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public EntryForApiContractEventCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainPicture")]
		public EntryThumbForApiContract MainPicture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="names")]
		public LocalizedStringContract[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="series")]
		public ReleaseEventSeriesContract Series { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seriesId")]
		public System.Nullable<System.Int32> SeriesId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seriesNumber")]
		public System.Nullable<System.Int32> SeriesNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seriesSuffix")]
		public string SeriesSuffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="songList")]
		public SongListBaseContract SongList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EntryForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlSlug")]
		public string UrlSlug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="venueName")]
		public string VenueName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webLinks")]
		public WebLinkForApiContract[] WebLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ArtistForEventContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="artist")]
		public ArtistContract Artist { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectiveRoles")]
		public System.Nullable<ArtistForEventContractEffectiveRoles> EffectiveRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public ArtistForEventContractEffectiveRoles Roles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ArtistContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artistType")]
		public EntryForApiContractArtistType ArtistType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pictureMime")]
		public string PictureMime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="releaseDate")]
		public System.Nullable<System.DateTimeOffset> ReleaseDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EntryForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ArtistForEventContractEffectiveRoles
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dancer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DJ = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instrumentalist = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Organizer = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Promoter = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VJ = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vocalist = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceManipulator = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OtherPerformer = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ReleaseEventSeriesContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public EntryForApiContractEventCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pictureMime")]
		public string PictureMime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EntryForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlSlug")]
		public string UrlSlug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webLinks")]
		public WebLinkContract[] WebLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebLinkContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ArchivedWebLinkContractCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="descriptionOrUrl")]
		public string DescriptionOrUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SongListBaseContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="featuredCategory")]
		public EntryForApiContractSongListFeaturedCategory FeaturedCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebLinkForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ArchivedWebLinkContractCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class AlbumDiscPropertiesContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="discNumber")]
		public System.Nullable<System.Int32> DiscNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mediaType")]
		public System.Nullable<AlbumDiscPropertiesContractMediaType> MediaType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum AlbumDiscPropertiesContractMediaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Audio = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Video = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class AlbumForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artistString")]
		public string ArtistString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public ArtistForAlbumForApiContract[] Artists { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="barcode")]
		public string Barcode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="catalogNumber")]
		public string CatalogNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultName")]
		public string DefaultName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultNameLanguage")]
		public EntryForApiContractDefaultNameLanguage DefaultNameLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discType")]
		public EntryForApiContractDiscType DiscType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discs")]
		public AlbumDiscPropertiesContract[] Discs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifiers")]
		public AlbumIdentifierContract[] Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainPicture")]
		public EntryThumbForApiContract MainPicture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergedTo")]
		public System.Nullable<System.Int32> MergedTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="names")]
		public LocalizedStringContract[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pvs")]
		public PVContract[] Pvs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ratingAverage")]
		public System.Nullable<System.Double> RatingAverage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ratingCount")]
		public System.Nullable<System.Int32> RatingCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="releaseDate")]
		public OptionalDateTimeContract ReleaseDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="releaseEvent")]
		public ReleaseEventForApiContract ReleaseEvent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EntryForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagUsageForApiContract[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tracks")]
		public SongInAlbumForApiContract[] Tracks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webLinks")]
		public WebLinkForApiContract[] WebLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ArtistForAlbumForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="artist")]
		public ArtistContract Artist { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public System.Nullable<ArtistForAlbumForApiContractCategories> Categories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectiveRoles")]
		public System.Nullable<ArtistForAlbumForApiContractEffectiveRoles> EffectiveRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isSupport")]
		public System.Nullable<System.Boolean> IsSupport { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public ArtistForAlbumForApiContractEffectiveRoles Roles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ArtistForAlbumForApiContractCategories
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vocalist = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Producer = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Animator = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Circle = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Band = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Illustrator = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Subject = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ArtistForAlbumForApiContractEffectiveRoles
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Animator = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Arranger = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Composer = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Distributor = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Illustrator = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instrumentalist = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lyricist = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mastering = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Publisher = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vocalist = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceManipulator = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mixer = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Chorus = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Encoder = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VocalDataProvider = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class AlbumIdentifierContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SongInAlbumForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="discNumber")]
		public System.Nullable<System.Int32> DiscNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="song")]
		public SongForApiContract Song { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trackNumber")]
		public System.Nullable<System.Int32> TrackNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SongForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="albums")]
		public AlbumContract[] Albums { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artistString")]
		public string ArtistString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public ArtistForSongContract[] Artists { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultName")]
		public string DefaultName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultNameLanguage")]
		public EntryForApiContractDefaultNameLanguage DefaultNameLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="favoritedTimes")]
		public System.Nullable<System.Int32> FavoritedTimes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lengthSeconds")]
		public System.Nullable<System.Int32> LengthSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lyrics")]
		public LyricsForSongContract[] Lyrics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainPicture")]
		public EntryThumbForApiContract MainPicture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergedTo")]
		public System.Nullable<System.Int32> MergedTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="names")]
		public LocalizedStringContract[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originalVersionId")]
		public System.Nullable<System.Int32> OriginalVersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publishDate")]
		public System.Nullable<System.DateTimeOffset> PublishDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pvServices")]
		public System.Nullable<SongForApiContractPvServices> PvServices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pvs")]
		public PVContract[] Pvs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ratingScore")]
		public System.Nullable<System.Int32> RatingScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="releaseEvent")]
		public ReleaseEventForApiContract ReleaseEvent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="songType")]
		public EntryForApiContractSongType SongType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EntryForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagUsageForApiContract[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbUrl")]
		public string ThumbUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webLinks")]
		public WebLinkForApiContract[] WebLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ArtistForSongContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="artist")]
		public ArtistContract Artist { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public ArtistForAlbumForApiContractCategories Categories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectiveRoles")]
		public ArtistForAlbumForApiContractEffectiveRoles EffectiveRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isCustomName")]
		public System.Nullable<System.Boolean> IsCustomName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isSupport")]
		public System.Nullable<System.Boolean> IsSupport { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public ArtistForAlbumForApiContractEffectiveRoles Roles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class LyricsForSongContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="cultureCode")]
		public string CultureCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="translationType")]
		public System.Nullable<LyricsForSongContractTranslationType> TranslationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum LyricsForSongContractTranslationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Original = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Romanized = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Translation = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum SongForApiContractPvServices
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NicoNicoDouga = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Youtube = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SoundCloud = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vimeo = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Piapro = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bilibili = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		File = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LocalFile = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creofuga = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bandcamp = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class AlbumForUserForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="album")]
		public AlbumForApiContract Album { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mediaType")]
		public System.Nullable<AlbumForUserForApiContractMediaType> MediaType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="purchaseStatus")]
		public System.Nullable<AlbumForUserForApiContractPurchaseStatus> PurchaseStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public System.Nullable<System.Int32> Rating { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserForApiContract User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum AlbumForUserForApiContractMediaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PhysicalDisc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DigitalDownload = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum AlbumForUserForApiContractPurchaseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Wishlisted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ordered = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Owned = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class AlbumReviewContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="albumId")]
		public System.Nullable<System.Int32> AlbumId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserForApiContract User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ArtistForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artistLinks")]
		public ArtistForArtistForApiContract[] ArtistLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artistLinksReverse")]
		public ArtistForArtistForApiContract[] ArtistLinksReverse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artistType")]
		public EntryForApiContractArtistType ArtistType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="baseVoicebank")]
		public ArtistContract BaseVoicebank { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultName")]
		public string DefaultName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultNameLanguage")]
		public EntryForApiContractDefaultNameLanguage DefaultNameLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainPicture")]
		public EntryThumbForApiContract MainPicture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergedTo")]
		public System.Nullable<System.Int32> MergedTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="names")]
		public LocalizedStringContract[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pictureMime")]
		public string PictureMime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relations")]
		public ArtistRelationsForApi Relations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="releaseDate")]
		public System.Nullable<System.DateTimeOffset> ReleaseDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EntryForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagUsageForApiContract[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webLinks")]
		public WebLinkForApiContract[] WebLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ArtistForArtistForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="artist")]
		public ArtistContract Artist { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkType")]
		public System.Nullable<ArtistForArtistForApiContractLinkType> LinkType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ArtistForArtistForApiContractLinkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CharacterDesigner = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Illustrator = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Manager = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceProvider = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ArtistRelationsForApi
	{
		
		[System.Runtime.Serialization.DataMember(Name="latestAlbums")]
		public AlbumForApiContract[] LatestAlbums { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestEvents")]
		public ReleaseEventForApiContract[] LatestEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestSongs")]
		public SongForApiContract[] LatestSongs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="popularAlbums")]
		public AlbumForApiContract[] PopularAlbums { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="popularSongs")]
		public SongForApiContract[] PopularSongs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ArtistForUserForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="artist")]
		public ArtistForApiContract Artist { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class CommentForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public UserForApiContract Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorName")]
		public string AuthorName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entry")]
		public EntryRefContract Entry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class EntryRefContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="entryType")]
		public EntryForApiContractEntryType EntryType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class CreateReportModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportType")]
		public System.Nullable<CreateReportModelReportType> ReportType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum CreateReportModelReportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MaliciousIP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Spamming = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RemovePermissions = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class DiscussionFolderContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastTopicAuthor")]
		public UserForApiContract LastTopicAuthor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastTopicDate")]
		public System.Nullable<System.DateTimeOffset> LastTopicDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topicCount")]
		public System.Nullable<System.Int32> TopicCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class DiscussionTopicContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public UserForApiContract Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commentCount")]
		public System.Nullable<System.Int32> CommentCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public CommentForApiContract[] Comments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="folderId")]
		public System.Nullable<System.Int32> FolderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastComment")]
		public CommentForApiContract LastComment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locked")]
		public System.Nullable<System.Boolean> Locked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class EnglishTranslatedStringContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="english")]
		public string English { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="original")]
		public string Original { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class EntryThumbContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="entryType")]
		public EntryForApiContractEntryType EntryType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mime")]
		public string Mime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class LocalizedStringWithIdContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public EntryForApiContractDefaultNameLanguage Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PVForSongContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public System.Nullable<System.Int32> CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="extendedMetadata")]
		public PVExtendedMetadata ExtendedMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publishDate")]
		public System.Nullable<System.DateTimeOffset> PublishDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pvId")]
		public string PvId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pvType")]
		public PVContractPvType PvType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service")]
		public PVContractService Service { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="song")]
		public SongContract Song { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbUrl")]
		public string ThumbUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SongContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artistString")]
		public string ArtistString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="favoritedTimes")]
		public System.Nullable<System.Int32> FavoritedTimes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lengthSeconds")]
		public System.Nullable<System.Int32> LengthSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nicoId")]
		public string NicoId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publishDate")]
		public System.Nullable<System.DateTimeOffset> PublishDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pvServices")]
		public SongForApiContractPvServices PvServices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ratingScore")]
		public System.Nullable<System.Int32> RatingScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="songType")]
		public EntryForApiContractSongType SongType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EntryForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbUrl")]
		public string ThumbUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PartialFindResult_ActivityEntryForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ActivityEntryForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PartialFindResult_AlbumForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public AlbumForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PartialFindResult_AlbumForUserForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public AlbumForUserForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PartialFindResult_ArtistForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ArtistForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PartialFindResult_ArtistForUserForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ArtistForUserForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PartialFindResult_CommentForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CommentForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PartialFindResult_DiscussionTopicContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DiscussionTopicContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PartialFindResult_EntryForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public EntryForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PartialFindResult_PVForSongContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public PVForSongContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PartialFindResult_RatedSongForUserForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RatedSongForUserForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class RatedSongForUserForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public System.Nullable<RatedSongForUserForApiContractRating> Rating { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="song")]
		public SongForApiContract Song { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserForApiContract User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum RatedSongForUserForApiContractRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dislike = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Like = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Favorite = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PartialFindResult_ReleaseEventForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ReleaseEventForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PartialFindResult_ReleaseEventSeriesContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ReleaseEventSeriesContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PartialFindResult_SongForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public SongForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PartialFindResult_SongInListForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public SongInListForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SongInListForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="song")]
		public SongForApiContract Song { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PartialFindResult_SongListForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public SongListForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SongListForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public UserForApiContract Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.Nullable<System.DateTimeOffset> EventDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="featuredCategory")]
		public EntryForApiContractSongListFeaturedCategory FeaturedCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainPicture")]
		public EntryThumbForApiContract MainPicture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PartialFindResult_TagForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public TagForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class TagForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aliasedTo")]
		public TagBaseContract AliasedTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categoryName")]
		public string CategoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultNameLanguage")]
		public EntryForApiContractDefaultNameLanguage DefaultNameLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainPicture")]
		public EntryThumbForApiContract MainPicture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="names")]
		public LocalizedStringWithIdContract[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public TagBaseContract Parent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relatedTags")]
		public TagBaseContract[] RelatedTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EntryForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public System.Nullable<System.Int32> Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="translatedDescription")]
		public EnglishTranslatedStringContract TranslatedDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlSlug")]
		public string UrlSlug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usageCount")]
		public System.Nullable<System.Int32> UsageCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webLinks")]
		public WebLinkForApiContract[] WebLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PartialFindResult_UserForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public UserForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PartialFindResult_UserMessageContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public UserMessageContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserMessageContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdFormatted")]
		public string CreatedFormatted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="highPriority")]
		public System.Nullable<System.Boolean> HighPriority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inbox")]
		public System.Nullable<UserMessageContractInbox> Inbox { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="read")]
		public System.Nullable<System.Boolean> Read { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receiver")]
		public UserForApiContract Receiver { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sender")]
		public UserForApiContract Sender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum UserMessageContractInbox
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Received = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sent = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Notifications = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class RelatedSongsContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="artistMatches")]
		public SongForApiContract[] ArtistMatches { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="likeMatches")]
		public SongForApiContract[] LikeMatches { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagMatches")]
		public SongForApiContract[] TagMatches { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SongInListEditContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="song")]
		public SongForApiContract Song { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="songInListId")]
		public System.Nullable<System.Int32> SongInListId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SongListForEditContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public UserWithEmailContract Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canEdit")]
		public System.Nullable<System.Boolean> CanEdit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.Nullable<System.DateTimeOffset> EventDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="featuredCategory")]
		public EntryForApiContractSongListFeaturedCategory FeaturedCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="songLinks")]
		public SongInListEditContract[] SongLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EntryForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumb")]
		public EntryThumbContract Thumb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateNotes")]
		public string UpdateNotes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserWithEmailContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SongRatingContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public RatedSongForUserForApiContractRating Rating { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a list of recent activity entries.
		/// Entries are always returned sorted from newest to oldest.
		/// Activity for deleted entries is not returned.
		/// ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLang api/activityEntries
		/// </summary>
		/// <param name="before">Filter to return activity entries only before this date. Optional, by default no filter.</param>
		/// <param name="since">Filter to return activity entries only after this date. Optional, by default no filter.</param>
		/// <param name="userId">Filter by user Id. Optional, by default no filter.</param>
		/// <param name="editEvent">Filter by entry edit event (either Created or Updated). Optional, by default no filter.</param>
		/// <param name="maxResults">Maximum number of results to return. Default 50. Maximum value 500.</param>
		/// <param name="getTotalCount">Whether to load total number of items (optional, default to false).</param>
		/// <param name="fields">Optional fields.</param>
		/// <param name="entryFields">Optional fields for entries.</param>
		/// <param name="lang">Content language preference.</param>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_ActivityEntryForApiContract> ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangAsync(System.DateTimeOffset before, System.DateTimeOffset since, int userId, ActivityEntryForApiContractEditEvent editEvent, int maxResults, bool getTotalCount, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangFields fields, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangEntryFields entryFields, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/activityEntries?before=" + before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&since=" + since.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&userId="+userId+"&editEvent=" + editEvent+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&fields=" + fields+"&entryFields=" + entryFields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_ActivityEntryForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a page of albums.
		/// ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLang api/albums
		/// </summary>
		/// <param name="query">Album name query (optional).</param>
		/// <param name="discTypes">Disc type. By default nothing. Possible values are Album, Single, EP, SplitAlbum, Compilation, Video, Other. Note: only one type supported for now.</param>
		/// <param name="tagName">Filter by tag name (optional). This filter can be specified multiple times.</param>
		/// <param name="tagId">Filter by tag Id (optional). This filter can be specified multiple times.</param>
		/// <param name="childTags">Include child tags, if the tags being filtered by have any.</param>
		/// <param name="artistId">Filter by artist Id (optional).</param>
		/// <param name="artistParticipationStatus">Filter by artist participation status. Only valid if artistId is specified.
		///            Everything (default): Show all albums by that artist (no filter).
		///            OnlyMainAlbums: Show only main albums by that artist.
		///            OnlyCollaborations: Show only collaborations by that artist.</param>
		/// <param name="childVoicebanks">Include child voicebanks, if the artist being filtered by has any.</param>
		/// <param name="includeMembers">Include members of groups. This applies if {artistId} is a group.</param>
		/// <param name="barcode">Filter by album barcode (optional).</param>
		/// <param name="status">Filter by entry status (optional).</param>
		/// <param name="releaseDateAfter">Filter by albums whose release date is after this date (inclusive).</param>
		/// <param name="releaseDateBefore">Filter by albums whose release date is before this date (exclusive).</param>
		/// <param name="advancedFilters">List of advanced filters (optional).</param>
		/// <param name="start">First item to be retrieved (optional, defaults to 0).</param>
		/// <param name="maxResults">Maximum number of results to be loaded (optional, defaults to 10, maximum of 50).</param>
		/// <param name="getTotalCount">Whether to load total number of items (optional, default to false).</param>
		/// <param name="sort">Sort rule (optional, defaults to Name). 
		///            Possible values are None, Name, ReleaseDate, ReleaseDateWithNulls, AdditionDate, RatingAverage, RatingTotal, NameThenReleaseDate.</param>
		/// <param name="preferAccurateMatches">Whether the search should prefer accurate matches. 
		///            If this is true, entries that match by prefix will be moved first, instead of being sorted alphabetically.
		///            Requires a text query. Does not support pagination.
		///            This is mostly useful for autocomplete boxes.</param>
		/// <param name="deleted">Whether to search for deleted entries.
		///            If this is true, only deleted entries will be returned.
		///            If this is false (default), deleted entries are not returned.</param>
		/// <param name="nameMatchMode">Match mode for artist name (optional, defaults to Exact).</param>
		/// <param name="fields">Optional fields (optional). Possible values are artists, names, pvs, tags, tracks, webLinks.</param>
		/// <param name="lang">Content language preference (optional).</param>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_AlbumForApiContract> ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangAsync(
					string query, 
					EntryForApiContractDiscType discTypes, 
					string[] tagName, 
					int[] tagId, 
					bool childTags, 
					int[] artistId, 
					ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangArtistParticipationStatus artistParticipationStatus, 
					bool childVoicebanks, 
					bool includeMembers, 
					string barcode, 
					EntryForApiContractStatus status, 
					System.DateTimeOffset releaseDateAfter, 
					System.DateTimeOffset releaseDateBefore, 
					string[] advancedFilters, 
					int start, 
					int maxResults, 
					bool getTotalCount, 
					ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangSort sort, 
					bool preferAccurateMatches, 
					bool deleted, 
					ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode nameMatchMode, 
					ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangFields fields, 
					ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&discTypes=" + discTypes+"&"+string.Join("&", tagName.Select(z => $"tagName={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tagId.Select(z => $"tagId={z}"))+"&childTags="+childTags+"&"+string.Join("&", artistId.Select(z => $"artistId={z}"))+"&artistParticipationStatus=" + artistParticipationStatus+"&childVoicebanks="+childVoicebanks+"&includeMembers="+includeMembers+"&barcode=" + (barcode==null? "" : System.Uri.EscapeDataString(barcode))+"&status=" + status+"&releaseDateAfter=" + releaseDateAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&releaseDateBefore=" + releaseDateBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", advancedFilters.Select(z => $"advancedFilters={System.Uri.EscapeDataString(z.ToString())}"))+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&preferAccurateMatches="+preferAccurateMatches+"&deleted="+deleted+"&nameMatchMode=" + nameMatchMode+"&fields=" + fields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_AlbumForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a comment.
		/// Normal users can edit their own comments, moderators can edit all comments.
		/// Requires login.
		/// ApiAlbumsComments_commentIdPost api/albums/comments/{commentId}
		/// </summary>
		/// <param name="commentId">ID of the comment to be edited.</param>
		/// <param name="requestBody">New comment data. Only message can be edited.</param>
		public async Task ApiAlbumsComments_commentIdPostAsync(int commentId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/comments/"+commentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a comment.
		/// Normal users can delete their own comments, moderators can delete all comments.
		/// Requires login.
		/// ApiAlbumsComments_commentIdDelete api/albums/comments/{commentId}
		/// </summary>
		/// <param name="commentId">ID of the comment to be deleted.</param>
		public async Task ApiAlbumsComments_commentIdDeleteAsync(int commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/comments/"+commentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of album names. Ideal for autocomplete boxes.
		/// ApiAlbumsNamesGetByQueryAndNameMatchModeAndMaxResults api/albums/names
		/// </summary>
		/// <param name="query">Text query.</param>
		/// <param name="nameMatchMode">Name match mode.</param>
		/// <param name="maxResults">Maximum number of results.</param>
		/// <returns>OK</returns>
		public async Task<string[]> ApiAlbumsNamesGetByQueryAndNameMatchModeAndMaxResultsAsync(string query, ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode nameMatchMode, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/names?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&nameMatchMode=" + nameMatchMode+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of upcoming or recent albums, same as front page.
		/// Output is cached for 1 hour.
		/// ApiAlbumsNewGetByLanguagePreferenceAndFields api/albums/new
		/// </summary>
		/// <returns>OK</returns>
		public async Task<AlbumForApiContract[]> ApiAlbumsNewGetByLanguagePreferenceAndFieldsAsync(ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang languagePreference, ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/new?languagePreference=" + languagePreference+"&fields=" + fields;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AlbumForApiContract[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of top rated albums, same as front page.
		/// Output is cached for 1 hour.
		/// ApiAlbumsTopGetByLanguagePreferenceAndFields api/albums/top
		/// </summary>
		/// <returns>OK</returns>
		public async Task<AlbumForApiContract[]> ApiAlbumsTopGetByLanguagePreferenceAndFieldsAsync(ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang languagePreference, ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/top?languagePreference=" + languagePreference+"&fields=" + fields;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AlbumForApiContract[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an album by Id.
		/// ApiAlbums_idGetByFieldsAndSongFieldsAndLang api/albums/{id}
		/// </summary>
		/// <param name="id">Album Id (required).</param>
		/// <param name="fields">Optional fields (optional). Possible values are artists, names, pvs, tags, tracks, webLinks.</param>
		/// <param name="songFields">Optional fields for tracks, if included (optional).</param>
		/// <param name="lang">Content language preference (optional).</param>
		/// <returns>OK</returns>
		public async Task<AlbumForApiContract> ApiAlbums_idGetByFieldsAndSongFieldsAndLangAsync(int id, ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangFields fields, ApiAlbums_idGetByFieldsAndSongFieldsAndLangSongFields songFields, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/"+id+"?fields=" + fields+"&songFields=" + songFields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AlbumForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an album.
		/// ApiAlbums_idDeleteByNotes api/albums/{id}
		/// </summary>
		/// <param name="id">ID of the album to be deleted.</param>
		/// <param name="notes">Notes.</param>
		public async Task ApiAlbums_idDeleteByNotesAsync(int id, string notes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/"+id+"?notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of comments for an album.
		/// Pagination and sorting might be added later.
		/// ApiAlbums_idCommentsGet api/albums/{id}/comments
		/// </summary>
		/// <param name="id">ID of the album whose comments to load.</param>
		/// <returns>OK</returns>
		public async Task<CommentForApiContract[]> ApiAlbums_idCommentsGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/"+id+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CommentForApiContract[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Posts a new comment.
		/// ApiAlbums_idCommentsPost api/albums/{id}/comments
		/// </summary>
		/// <param name="id">ID of the album for which to create the comment.</param>
		/// <param name="requestBody">Comment data. Message and author must be specified. Author must match the logged in user.</param>
		/// <returns>OK</returns>
		public async Task<CommentForApiContract> ApiAlbums_idCommentsPostAsync(int id, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/"+id+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CommentForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiAlbums_idReviewsGetByLanguageCode api/albums/{id}/reviews
		/// </summary>
		/// <returns>OK</returns>
		public async Task<AlbumReviewContract[]> ApiAlbums_idReviewsGetByLanguageCodeAsync(int id, string languageCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/"+id+"/reviews?languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AlbumReviewContract[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiAlbums_idReviewsPost api/albums/{id}/reviews
		/// </summary>
		/// <returns>OK</returns>
		public async Task<AlbumReviewContract> ApiAlbums_idReviewsPostAsync(int id, AlbumReviewContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/"+id+"/reviews";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AlbumReviewContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiAlbums_idReviews_reviewIdDelete api/albums/{id}/reviews/{reviewId}
		/// </summary>
		public async Task ApiAlbums_idReviews_reviewIdDeleteAsync(int reviewId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/reviews/"+reviewId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets tracks for an album.
		/// ApiAlbums_idTracksGetByFieldsAndLang api/albums/{id}/tracks
		/// </summary>
		/// <param name="id">Album ID (required).</param>
		/// <param name="fields">List of optional fields (optional). Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.</param>
		/// <param name="lang">Content language preference (optional).</param>
		/// <returns>OK</returns>
		public async Task<SongInAlbumForApiContract[]> ApiAlbums_idTracksGetByFieldsAndLangAsync(int id, ApiAlbums_idGetByFieldsAndSongFieldsAndLangSongFields fields, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/"+id+"/tracks?fields=" + fields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SongInAlbumForApiContract[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiAlbums_idTracksFieldsGetByFieldAndDiscNumberAndLang api/albums/{id}/tracks/fields
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string[]> ApiAlbums_idTracksFieldsGetByFieldAndDiscNumberAndLangAsync(int id, string[] field, int discNumber, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/"+id+"/tracks/fields?"+string.Join("&", field.Select(z => $"field={System.Uri.EscapeDataString(z.ToString())}"))+"&discNumber="+discNumber+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiAlbums_idUser_collectionsGetByLanguagePreference api/albums/{id}/user-collections
		/// </summary>
		/// <returns>OK</returns>
		public async Task<AlbumForUserForApiContract[]> ApiAlbums_idUser_collectionsGetByLanguagePreferenceAsync(int id, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang languagePreference, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/"+id+"/user-collections?languagePreference=" + languagePreference;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AlbumForUserForApiContract[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find artists.
		/// ApiArtistsGetByQueryAndArtistTypesAndAllowBaseVoicebanksAndTagNameAndTagIdAndChildTagsAndFollowedByUserIdAndStatusAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndNameMatchModeAndFieldsAndLang api/artists
		/// </summary>
		/// <param name="query">Artist name query (optional).</param>
		/// <param name="artistTypes">Filtered artist type (optional).</param>
		/// <param name="allowBaseVoicebanks">Allow base voicebanks. If false, only root voicebanks will be allowed. Only affects voice synthesizers that can have base voicebanks.</param>
		/// <param name="tagName">Filter by tag name (optional).</param>
		/// <param name="tagId">Filter by tag Id (optional). This filter can be specified multiple times.</param>
		/// <param name="childTags">Include child tags, if the tags being filtered by have any.</param>
		/// <param name="followedByUserId">Filter by user following the artists. By default there is no filtering.</param>
		/// <param name="status">Filter by entry status (optional).</param>
		/// <param name="advancedFilters">List of advanced filters (optional).</param>
		/// <param name="start">First item to be retrieved (optional, defaults to 0).</param>
		/// <param name="maxResults">Maximum number of results to be loaded (optional, defaults to 10, maximum of 100).</param>
		/// <param name="getTotalCount">Whether to load total number of items (optional, default to false).</param>
		/// <param name="sort">Sort rule (optional, defaults to Name). Possible values are None, Name, AdditionDate, AdditionDateAsc.</param>
		/// <param name="preferAccurateMatches">Whether the search should prefer accurate matches. 
		///            If this is true, entries that match by prefix will be moved first, instead of being sorted alphabetically.
		///            Requires a text query. Does not support pagination.
		///            This is mostly useful for autocomplete boxes.</param>
		/// <param name="nameMatchMode">Match mode for artist name (optional, defaults to Exact).</param>
		/// <param name="fields">List of optional fields (optional). Possible values are Description, Groups, Members, Names, Tags, WebLinks.</param>
		/// <param name="lang">Content language preference (optional).</param>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_ArtistForApiContract> ApiArtistsGetByQueryAndArtistTypesAndAllowBaseVoicebanksAndTagNameAndTagIdAndChildTagsAndFollowedByUserIdAndStatusAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndNameMatchModeAndFieldsAndLangAsync(
					string query, 
					string artistTypes, 
					bool allowBaseVoicebanks, 
					string[] tagName, 
					int[] tagId, 
					bool childTags, 
					int followedByUserId, 
					EntryForApiContractStatus status, 
					string[] advancedFilters, 
					int start, 
					int maxResults, 
					bool getTotalCount, 
					ApiArtistsGetByQueryAndArtistTypesAndAllowBaseVoicebanksAndTagNameAndTagIdAndChildTagsAndFollowedByUserIdAndStatusAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndNameMatchModeAndFieldsAndLangSort sort, 
					bool preferAccurateMatches, 
					ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode nameMatchMode, 
					ApiArtistsGetByQueryAndArtistTypesAndAllowBaseVoicebanksAndTagNameAndTagIdAndChildTagsAndFollowedByUserIdAndStatusAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndNameMatchModeAndFieldsAndLangFields fields, 
					ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/artists?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&artistTypes=" + (artistTypes==null? "" : System.Uri.EscapeDataString(artistTypes))+"&allowBaseVoicebanks="+allowBaseVoicebanks+"&"+string.Join("&", tagName.Select(z => $"tagName={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tagId.Select(z => $"tagId={z}"))+"&childTags="+childTags+"&followedByUserId="+followedByUserId+"&status=" + status+"&"+string.Join("&", advancedFilters.Select(z => $"advancedFilters={System.Uri.EscapeDataString(z.ToString())}"))+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&preferAccurateMatches="+preferAccurateMatches+"&nameMatchMode=" + nameMatchMode+"&fields=" + fields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_ArtistForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a comment.
		/// Normal users can edit their own comments, moderators can edit all comments.
		/// Requires login.
		/// ApiArtistsComments_commentIdPost api/artists/comments/{commentId}
		/// </summary>
		/// <param name="commentId">ID of the comment to be edited.</param>
		/// <param name="requestBody">New comment data. Only message can be edited.</param>
		public async Task ApiArtistsComments_commentIdPostAsync(int commentId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/artists/comments/"+commentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a comment.
		/// Normal users can delete their own comments, moderators can delete all comments.
		/// Requires login.
		/// ApiArtistsComments_commentIdDelete api/artists/comments/{commentId}
		/// </summary>
		/// <param name="commentId">ID of the comment to be deleted.</param>
		public async Task ApiArtistsComments_commentIdDeleteAsync(int commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/artists/comments/"+commentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of artist names. Ideal for autocomplete boxes.
		/// ApiArtistsNamesGetByQueryAndNameMatchModeAndMaxResults api/artists/names
		/// </summary>
		/// <param name="query">Text query.</param>
		/// <param name="nameMatchMode">Name match mode.</param>
		/// <param name="maxResults">Maximum number of results.</param>
		/// <returns>OK</returns>
		public async Task<string[]> ApiArtistsNamesGetByQueryAndNameMatchModeAndMaxResultsAsync(string query, ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode nameMatchMode, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/artists/names?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&nameMatchMode=" + nameMatchMode+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an artist by Id.
		/// ApiArtists_idGetByFieldsAndRelationsAndLang api/artists/{id}
		/// </summary>
		/// <param name="id">Artist ID (required).</param>
		/// <param name="fields">List of optional fields (optional). Possible values are Description, Groups, Members, Names, Tags, WebLinks.</param>
		/// <param name="relations">List of artist relations (optional). Possible values are LatestAlbums, PopularAlbums, LatestSongs, PopularSongs, All</param>
		/// <param name="lang">Content language preference (optional).</param>
		/// <returns>OK</returns>
		public async Task<ArtistForApiContract> ApiArtists_idGetByFieldsAndRelationsAndLangAsync(int id, ApiArtistsGetByQueryAndArtistTypesAndAllowBaseVoicebanksAndTagNameAndTagIdAndChildTagsAndFollowedByUserIdAndStatusAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndNameMatchModeAndFieldsAndLangFields fields, ApiArtists_idGetByFieldsAndRelationsAndLangRelations relations, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/artists/"+id+"?fields=" + fields+"&relations=" + relations+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ArtistForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an artist.
		/// ApiArtists_idDeleteByNotes api/artists/{id}
		/// </summary>
		/// <param name="id">ID of the artist to be deleted.</param>
		/// <param name="notes">Notes.</param>
		public async Task ApiArtists_idDeleteByNotesAsync(int id, string notes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/artists/"+id+"?notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of comments for an artist.
		/// Pagination and sorting might be added later.
		/// ApiArtists_idCommentsGet api/artists/{id}/comments
		/// </summary>
		/// <param name="id">ID of the artist whose comments to load.</param>
		/// <returns>OK</returns>
		public async Task<CommentForApiContract[]> ApiArtists_idCommentsGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/artists/"+id+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CommentForApiContract[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Posts a new comment.
		/// ApiArtists_idCommentsPost api/artists/{id}/comments
		/// </summary>
		/// <param name="id">ID of the artist for which to create the comment.</param>
		/// <param name="requestBody">Comment data. Message and author must be specified. Author must match the logged in user.</param>
		/// <returns>OK</returns>
		public async Task<CommentForApiContract> ApiArtists_idCommentsPostAsync(int id, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/artists/"+id+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CommentForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of comments for an entry.
		/// ApiComments_entryType_commentsGetByEntryId api/comments/{entryType}-comments
		/// </summary>
		/// <param name="entryType">Entry type.</param>
		/// <param name="entryId">ID of the entry whose comments to load.</param>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_CommentForApiContract> ApiComments_entryType_commentsGetByEntryIdAsync(EntryForApiContractEntryType entryType, int entryId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/comments/"+entryType+"-comments?entryId="+entryId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_CommentForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Posts a new comment.
		/// ApiComments_entryType_commentsPost api/comments/{entryType}-comments
		/// </summary>
		/// <param name="entryType">Entry type.</param>
		/// <param name="requestBody">Comment data. Message, entry and author must be specified. Author must match the logged in user.</param>
		/// <returns>OK</returns>
		public async Task<CommentForApiContract> ApiComments_entryType_commentsPostAsync(EntryForApiContractEntryType entryType, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/comments/"+entryType+"-comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CommentForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a comment.
		/// Normal users can edit their own comments, moderators can edit all comments.
		/// Requires login.
		/// ApiComments_entryType_comments_commentIdPost api/comments/{entryType}-comments/{commentId}
		/// </summary>
		/// <param name="entryType">Entry type.</param>
		/// <param name="commentId">ID of the comment to be edited.</param>
		/// <param name="requestBody">New comment data. Only message can be edited.</param>
		public async Task ApiComments_entryType_comments_commentIdPostAsync(EntryForApiContractEntryType entryType, int commentId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/comments/"+entryType+"-comments/"+commentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a comment.
		/// Normal users can delete their own comments, moderators can delete all comments.
		/// Requires login.
		/// ApiComments_entryType_comments_commentIdDelete api/comments/{entryType}-comments/{commentId}
		/// </summary>
		/// <param name="entryType">Entry type.</param>
		/// <param name="commentId">ID of the comment to be deleted.</param>
		public async Task ApiComments_entryType_comments_commentIdDeleteAsync(EntryForApiContractEntryType entryType, int commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/comments/"+entryType+"-comments/"+commentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiDiscussionsComments_commentIdPost api/discussions/comments/{commentId}
		/// </summary>
		public async Task ApiDiscussionsComments_commentIdPostAsync(int commentId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/comments/"+commentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiDiscussionsComments_commentIdDelete api/discussions/comments/{commentId}
		/// </summary>
		public async Task ApiDiscussionsComments_commentIdDeleteAsync(int commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/comments/"+commentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiDiscussionsFoldersGetByFields api/discussions/folders
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DiscussionFolderContract[]> ApiDiscussionsFoldersGetByFieldsAsync(ApiDiscussionsFoldersGetByFieldsFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/folders?fields=" + fields;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiscussionFolderContract[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiDiscussionsFoldersPost api/discussions/folders
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DiscussionFolderContract> ApiDiscussionsFoldersPostAsync(DiscussionFolderContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/folders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiscussionFolderContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiDiscussionsFolders_folderIdTopicsGetByFields api/discussions/folders/{folderId}/topics
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DiscussionTopicContract[]> ApiDiscussionsFolders_folderIdTopicsGetByFieldsAsync(int folderId, ApiDiscussionsFolders_folderIdTopicsGetByFieldsFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/folders/"+folderId+"/topics?fields=" + fields;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiscussionTopicContract[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiDiscussionsFolders_folderIdTopicsPost api/discussions/folders/{folderId}/topics
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DiscussionTopicContract> ApiDiscussionsFolders_folderIdTopicsPostAsync(int folderId, DiscussionTopicContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/folders/"+folderId+"/topics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiscussionTopicContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiDiscussionsTopicsGetByFolderIdAndStartAndMaxResultsAndGetTotalCountAndSortAndFields api/discussions/topics
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_DiscussionTopicContract> ApiDiscussionsTopicsGetByFolderIdAndStartAndMaxResultsAndGetTotalCountAndSortAndFieldsAsync(int folderId, int start, int maxResults, bool getTotalCount, ApiDiscussionsTopicsGetByFolderIdAndStartAndMaxResultsAndGetTotalCountAndSortAndFieldsSort sort, ApiDiscussionsFolders_folderIdTopicsGetByFieldsFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/topics?folderId="+folderId+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&fields=" + fields;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_DiscussionTopicContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiDiscussionsTopics_topicIdGetByFields api/discussions/topics/{topicId}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DiscussionTopicContract> ApiDiscussionsTopics_topicIdGetByFieldsAsync(int topicId, ApiDiscussionsFolders_folderIdTopicsGetByFieldsFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/topics/"+topicId+"?fields=" + fields;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiscussionTopicContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiDiscussionsTopics_topicIdPost api/discussions/topics/{topicId}
		/// </summary>
		public async Task ApiDiscussionsTopics_topicIdPostAsync(int topicId, DiscussionTopicContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/topics/"+topicId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiDiscussionsTopics_topicIdDelete api/discussions/topics/{topicId}
		/// </summary>
		public async Task ApiDiscussionsTopics_topicIdDeleteAsync(int topicId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/topics/"+topicId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiDiscussionsTopics_topicIdCommentsPost api/discussions/topics/{topicId}/comments
		/// </summary>
		/// <returns>OK</returns>
		public async Task<CommentForApiContract> ApiDiscussionsTopics_topicIdCommentsPostAsync(int topicId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/topics/"+topicId+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CommentForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find entries.
		/// ApiEntriesGetByQueryAndTagNameAndTagIdAndChildTagsAndEntryTypesAndStatusAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLang api/entries
		/// </summary>
		/// <param name="query">Entry name query (optional).</param>
		/// <param name="tagName">Filter by tag name (optional).</param>
		/// <param name="tagId">Filter by tag Id (optional).</param>
		/// <param name="childTags">Include child tags, if the tags being filtered by have any.</param>
		/// <param name="entryTypes">Included entry types (optional).</param>
		/// <param name="status">Filter by entry status (optional).</param>
		/// <param name="start">First item to be retrieved (optional, defaults to 0).</param>
		/// <param name="maxResults">Maximum number of results to be loaded (optional, defaults to 10, maximum of 30).</param>
		/// <param name="getTotalCount">Whether to load total number of items (optional, default to false).</param>
		/// <param name="sort">Sort rule (optional, defaults to Name). Possible values are None, Name, AdditionDate.</param>
		/// <param name="nameMatchMode">Match mode for entry name (optional, defaults to Exact).</param>
		/// <param name="fields">List of optional fields (optional). Possible values are Description, MainPicture, Names, Tags, WebLinks.</param>
		/// <param name="lang">Content language preference (optional).</param>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_EntryForApiContract> ApiEntriesGetByQueryAndTagNameAndTagIdAndChildTagsAndEntryTypesAndStatusAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangAsync(string query, string[] tagName, int[] tagId, bool childTags, ApiEntriesGetByQueryAndTagNameAndTagIdAndChildTagsAndEntryTypesAndStatusAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangEntryTypes entryTypes, EntryForApiContractStatus status, int start, int maxResults, bool getTotalCount, ApiEntriesGetByQueryAndTagNameAndTagIdAndChildTagsAndEntryTypesAndStatusAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangSort sort, ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode nameMatchMode, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangEntryFields fields, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/entries?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&"+string.Join("&", tagName.Select(z => $"tagName={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tagId.Select(z => $"tagId={z}"))+"&childTags="+childTags+"&entryTypes=" + entryTypes+"&status=" + status+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&nameMatchMode=" + nameMatchMode+"&fields=" + fields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_EntryForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of entry names. Ideal for autocomplete boxes.
		/// ApiEntriesNamesGetByQueryAndNameMatchModeAndMaxResults api/entries/names
		/// </summary>
		/// <param name="query">Text query.</param>
		/// <param name="nameMatchMode">Name match mode.</param>
		/// <param name="maxResults">Maximum number of results.</param>
		/// <returns>OK</returns>
		public async Task<string[]> ApiEntriesNamesGetByQueryAndNameMatchModeAndMaxResultsAsync(string query, ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode nameMatchMode, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/entries/names?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&nameMatchMode=" + nameMatchMode+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of PVs for songs.
		/// ApiPvsFor_songsGetByAuthorAndMaxResultsAndGetTotalCountAndLang api/pvs/for-songs
		/// </summary>
		/// <param name="author">Uploader name (optional).</param>
		/// <param name="maxResults">Maximum number of results.</param>
		/// <param name="getTotalCount">Whether to load total number of items (optional, default to false).</param>
		/// <param name="lang">Content language preference (optional).</param>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_PVForSongContract> ApiPvsFor_songsGetByAuthorAndMaxResultsAndGetTotalCountAndLangAsync(string author, int maxResults, bool getTotalCount, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/pvs/for-songs?author=" + (author==null? "" : System.Uri.EscapeDataString(author))+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_PVForSongContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a page of event series.
		/// ApiReleaseEventSeriesGetByQueryAndStartAndMaxResultsAndGetTotalCountAndNameMatchModeAndLang api/releaseEventSeries
		/// </summary>
		/// <param name="query">Text query.</param>
		/// <param name="start">First item to be retrieved (optional).</param>
		/// <param name="maxResults">Maximum number of results to be loaded (optional).</param>
		/// <param name="getTotalCount">Whether to load total number of items (optional).</param>
		/// <param name="nameMatchMode">Match mode for event name (optional).</param>
		/// <param name="lang">Content language preference (optional).</param>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_ReleaseEventSeriesContract> ApiReleaseEventSeriesGetByQueryAndStartAndMaxResultsAndGetTotalCountAndNameMatchModeAndLangAsync(string query, int start, int maxResults, bool getTotalCount, ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode nameMatchMode, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/releaseEventSeries?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&nameMatchMode=" + nameMatchMode+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_ReleaseEventSeriesContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an event series.
		/// ApiReleaseEventSeries_idDeleteByNotesAndHardDelete api/releaseEventSeries/{id}
		/// </summary>
		/// <param name="id">ID of the series to be deleted.</param>
		/// <param name="notes">Notes.</param>
		/// <param name="hardDelete">If true, the entry is hard deleted. Hard deleted entries cannot be restored normally, but they will be moved to trash.
		///            If false, the entry is soft deleted, meaning it can still be restored.</param>
		public async Task ApiReleaseEventSeries_idDeleteByNotesAndHardDeleteAsync(int id, string notes, bool hardDelete, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/releaseEventSeries/"+id+"?notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes))+"&hardDelete="+hardDelete;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a page of events.
		/// ApiReleaseEventsGetByQueryAndNameMatchModeAndSeriesIdAndAfterDateAndBeforeDateAndCategoryAndUserCollectionIdAndTagIdAndChildTagsAndArtistIdAndChildVoicebanksAndIncludeMembersAndStatusAndStartAndMaxResultsAndGetTotalCountAndSortAndFieldsAndLang api/releaseEvents
		/// </summary>
		/// <param name="query">Event name query (optional).</param>
		/// <param name="nameMatchMode">Match mode for event name (optional, defaults to Auto).</param>
		/// <param name="seriesId">Filter by series Id.</param>
		/// <param name="afterDate">Filter by events after this date (inclusive).</param>
		/// <param name="beforeDate">Filter by events before this date (exclusive).</param>
		/// <param name="category">Filter by event category.</param>
		/// <param name="userCollectionId">Filter to include only events in user's events (interested or attending).</param>
		/// <param name="tagId">Filter by one or more tag Ids (optional).</param>
		/// <param name="childTags">Include child tags, if the tags being filtered by have any.</param>
		/// <param name="artistId">Filter by artist Id.</param>
		/// <param name="childVoicebanks">Include child voicebanks, if the artist being filtered by has any.</param>
		/// <param name="includeMembers">Include members of groups. This applies if {artistId} is a group.</param>
		/// <param name="status">Filter by entry status.</param>
		/// <param name="start">First item to be retrieved (optional, defaults to 0).</param>
		/// <param name="maxResults">Maximum number of results to be loaded (optional, defaults to 10).</param>
		/// <param name="getTotalCount">Whether to load total number of items (optional, default to false).</param>
		/// <param name="sort">Sort rule (optional, defaults to Name). 
		///            Possible values are None, Name, Date, SeriesName.</param>
		/// <param name="fields">Optional fields (optional). Possible values are Description, Series.</param>
		/// <param name="lang">Content language preference.</param>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_ReleaseEventForApiContract> ApiReleaseEventsGetByQueryAndNameMatchModeAndSeriesIdAndAfterDateAndBeforeDateAndCategoryAndUserCollectionIdAndTagIdAndChildTagsAndArtistIdAndChildVoicebanksAndIncludeMembersAndStatusAndStartAndMaxResultsAndGetTotalCountAndSortAndFieldsAndLangAsync(
					string query, 
					ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode nameMatchMode, 
					int seriesId, 
					System.DateTimeOffset afterDate, 
					System.DateTimeOffset beforeDate, 
					EntryForApiContractEventCategory category, 
					int userCollectionId, 
					int[] tagId, 
					bool childTags, 
					int[] artistId, 
					bool childVoicebanks, 
					bool includeMembers, 
					EntryForApiContractStatus status, 
					int start, 
					int maxResults, 
					bool getTotalCount, 
					ApiReleaseEventsGetByQueryAndNameMatchModeAndSeriesIdAndAfterDateAndBeforeDateAndCategoryAndUserCollectionIdAndTagIdAndChildTagsAndArtistIdAndChildVoicebanksAndIncludeMembersAndStatusAndStartAndMaxResultsAndGetTotalCountAndSortAndFieldsAndLangSort sort, 
					ApiReleaseEventsGetByQueryAndNameMatchModeAndSeriesIdAndAfterDateAndBeforeDateAndCategoryAndUserCollectionIdAndTagIdAndChildTagsAndArtistIdAndChildVoicebanksAndIncludeMembersAndStatusAndStartAndMaxResultsAndGetTotalCountAndSortAndFieldsAndLangFields fields, 
					ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/releaseEvents?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&nameMatchMode=" + nameMatchMode+"&seriesId="+seriesId+"&afterDate=" + afterDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&beforeDate=" + beforeDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&category=" + category+"&userCollectionId="+userCollectionId+"&"+string.Join("&", tagId.Select(z => $"tagId={z}"))+"&childTags="+childTags+"&"+string.Join("&", artistId.Select(z => $"artistId={z}"))+"&childVoicebanks="+childVoicebanks+"&includeMembers="+includeMembers+"&status=" + status+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&fields=" + fields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_ReleaseEventForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find event names by a part of name.
		/// 
		/// Matching is done anywhere from the name.
		/// ApiReleaseEventsNamesGetByQueryAndMaxResults api/releaseEvents/names
		/// </summary>
		/// <param name="query">Event name query, for example "Voc@loid".</param>
		/// <param name="maxResults">Maximum number of search results.</param>
		/// <returns>OK</returns>
		public async Task<string[]> ApiReleaseEventsNamesGetByQueryAndMaxResultsAsync(string query, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/releaseEvents/names?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of albums for a specific event.
		/// ApiReleaseEvents_eventIdAlbumsGetByFieldsAndLang api/releaseEvents/{eventId}/albums
		/// </summary>
		/// <param name="eventId">Release event ID.</param>
		/// <param name="fields">List of optional album fields.</param>
		/// <param name="lang">Content language preference.</param>
		/// <returns>OK</returns>
		public async Task<AlbumForApiContract[]> ApiReleaseEvents_eventIdAlbumsGetByFieldsAndLangAsync(int eventId, ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangFields fields, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/releaseEvents/"+eventId+"/albums?fields=" + fields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AlbumForApiContract[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of songs for a specific event.
		/// ApiReleaseEvents_eventIdPublished_songsGetByFieldsAndLang api/releaseEvents/{eventId}/published-songs
		/// </summary>
		/// <param name="eventId">Event ID.</param>
		/// <param name="fields">List of optional song fields.</param>
		/// <param name="lang">Content language preference.</param>
		/// <returns>OK</returns>
		public async Task<SongForApiContract[]> ApiReleaseEvents_eventIdPublished_songsGetByFieldsAndLangAsync(int eventId, ApiAlbums_idGetByFieldsAndSongFieldsAndLangSongFields fields, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/releaseEvents/"+eventId+"/published-songs?fields=" + fields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SongForApiContract[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new report.
		/// ApiReleaseEvents_eventIdReportsPostByReportTypeAndNotesAndVersionNumber api/releaseEvents/{eventId}/reports
		/// </summary>
		/// <param name="eventId">Event to be reported.</param>
		/// <param name="reportType">Report type.</param>
		/// <param name="notes">Notes. Optional.</param>
		/// <param name="versionNumber">Version to be reported. Optional.</param>
		public async Task ApiReleaseEvents_eventIdReportsPostByReportTypeAndNotesAndVersionNumberAsync(int eventId, ApiReleaseEvents_eventIdReportsPostByReportTypeAndNotesAndVersionNumberReportType reportType, string notes, int versionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/releaseEvents/"+eventId+"/reports?reportType=" + reportType+"&notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes))+"&versionNumber="+versionNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiReleaseEvents_idGetByFieldsAndLang api/releaseEvents/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<ReleaseEventForApiContract> ApiReleaseEvents_idGetByFieldsAndLangAsync(int id, ApiReleaseEventsGetByQueryAndNameMatchModeAndSeriesIdAndAfterDateAndBeforeDateAndCategoryAndUserCollectionIdAndTagIdAndChildTagsAndArtistIdAndChildVoicebanksAndIncludeMembersAndStatusAndStartAndMaxResultsAndGetTotalCountAndSortAndFieldsAndLangFields fields, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/releaseEvents/"+id+"?fields=" + fields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReleaseEventForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an event.
		/// ApiReleaseEvents_idDeleteByNotesAndHardDelete api/releaseEvents/{id}
		/// </summary>
		/// <param name="id">ID of the event to be deleted.</param>
		/// <param name="notes">Notes.</param>
		/// <param name="hardDelete">If true, the entry is hard deleted. Hard deleted entries cannot be restored normally, but they will be moved to trash.
		///            If false, the entry is soft deleted, meaning it can still be restored.</param>
		public async Task ApiReleaseEvents_idDeleteByNotesAndHardDeleteAsync(int id, string notes, bool hardDelete, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/releaseEvents/"+id+"?notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes))+"&hardDelete="+hardDelete;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a number of resource sets for a specific culture.
		/// ApiResources_cultureCodeGetBySetNames api/resources/{cultureCode}
		/// </summary>
		/// <param name="cultureCode">Culture code, for example "en-US" or "fi-FI".</param>
		/// <param name="setNames">Names of resource sets to be returned. More than one value can be specified. For example "artistTypeNames"</param>
		/// <returns>OK</returns>
		public async Task<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, string>>> ApiResources_cultureCodeGetBySetNamesAsync(string cultureCode, string[] setNames, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/resources/"+ (cultureCode==null? "" : System.Uri.EscapeDataString(cultureCode))+"&"+string.Join("&", setNames.Select(z => $"setNames={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, string>>>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a song list.
		/// ApiSongListsPost api/songLists
		/// </summary>
		/// <param name="requestBody">Song list properties.</param>
		/// <returns>OK</returns>
		public async Task<int> ApiSongListsPostAsync(SongListForEditContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songLists";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<int>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a comment.
		/// Normal users can edit their own comments, moderators can edit all comments.
		/// Requires login.
		/// ApiSongListsComments_commentIdPost api/songLists/comments/{commentId}
		/// </summary>
		/// <param name="commentId">ID of the comment to be edited.</param>
		/// <param name="requestBody">New comment data. Only message can be edited.</param>
		public async Task ApiSongListsComments_commentIdPostAsync(int commentId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songLists/comments/"+commentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a comment.
		/// Normal users can delete their own comments, moderators can delete all comments.
		/// Requires login.
		/// ApiSongListsComments_commentIdDelete api/songLists/comments/{commentId}
		/// </summary>
		/// <param name="commentId">ID of the comment to be deleted.</param>
		public async Task ApiSongListsComments_commentIdDeleteAsync(int commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songLists/comments/"+commentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of featured song lists.
		/// ApiSongListsFeaturedGetByQueryAndTagIdAndChildTagsAndNameMatchModeAndFeaturedCategoryAndStartAndMaxResultsAndGetTotalCountAndSort api/songLists/featured
		/// </summary>
		/// <param name="query">Song list name query (optional).</param>
		/// <param name="tagId">Filter by one or more tag Ids (optional).</param>
		/// <param name="childTags">Include child tags, if the tags being filtered by have any.</param>
		/// <param name="nameMatchMode">Match mode for list name (optional, defaults to Auto).</param>
		/// <param name="featuredCategory">Filter by a specific featured category. If empty, all categories are returned.</param>
		/// <param name="start">First item to be retrieved (optional, defaults to 0).</param>
		/// <param name="maxResults">Maximum number of results to be loaded (optional, defaults to 10, maximum of 50).</param>
		/// <param name="getTotalCount">Whether to load total number of items (optional, default to false).</param>
		/// <param name="sort">List sort rule. Possible values are Nothing, Date, CreateDate, Name.</param>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_SongListForApiContract> ApiSongListsFeaturedGetByQueryAndTagIdAndChildTagsAndNameMatchModeAndFeaturedCategoryAndStartAndMaxResultsAndGetTotalCountAndSortAsync(string query, int[] tagId, bool childTags, ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode nameMatchMode, EntryForApiContractSongListFeaturedCategory featuredCategory, int start, int maxResults, bool getTotalCount, ApiSongListsFeaturedGetByQueryAndTagIdAndChildTagsAndNameMatchModeAndFeaturedCategoryAndStartAndMaxResultsAndGetTotalCountAndSortSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songLists/featured?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&"+string.Join("&", tagId.Select(z => $"tagId={z}"))+"&childTags="+childTags+"&nameMatchMode=" + nameMatchMode+"&featuredCategory=" + featuredCategory+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_SongListForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of featuedd list names. Ideal for autocomplete boxes.
		/// ApiSongListsFeaturedNamesGetByQueryAndNameMatchModeAndFeaturedCategoryAndMaxResults api/songLists/featured/names
		/// </summary>
		/// <param name="query">Text query.</param>
		/// <param name="nameMatchMode">Name match mode. Words is treated the same as Partial.</param>
		/// <param name="featuredCategory">Filter by a specific featured category. If empty, all categories are returned.</param>
		/// <param name="maxResults">Maximum number of results.</param>
		/// <returns>OK</returns>
		public async Task<string[]> ApiSongListsFeaturedNamesGetByQueryAndNameMatchModeAndFeaturedCategoryAndMaxResultsAsync(string query, ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode nameMatchMode, EntryForApiContractSongListFeaturedCategory featuredCategory, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songLists/featured/names?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&nameMatchMode=" + nameMatchMode+"&featuredCategory=" + featuredCategory+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a song list.
		/// ApiSongLists_idDeleteByNotesAndHardDelete api/songLists/{id}
		/// </summary>
		/// <param name="id">ID of the list to be deleted.</param>
		/// <param name="notes">Notes.</param>
		/// <param name="hardDelete">If true, the entry is hard deleted. Hard deleted entries cannot be restored normally, but they will be moved to trash.
		///            If false, the entry is soft deleted, meaning it can still be restored.</param>
		public async Task ApiSongLists_idDeleteByNotesAndHardDeleteAsync(int id, string notes, bool hardDelete, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songLists/"+id+"?notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes))+"&hardDelete="+hardDelete;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of comments for a song list.
		/// ApiSongLists_listIdCommentsGet api/songLists/{listId}/comments
		/// </summary>
		/// <param name="listId">ID of the list whose comments to load.</param>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_CommentForApiContract> ApiSongLists_listIdCommentsGetAsync(int listId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songLists/"+listId+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_CommentForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Posts a new comment.
		/// ApiSongLists_listIdCommentsPost api/songLists/{listId}/comments
		/// </summary>
		/// <param name="listId">ID of the song list for which to create the comment.</param>
		/// <param name="requestBody">Comment data. Message and author must be specified. Author must match the logged in user.</param>
		/// <returns>OK</returns>
		public async Task<CommentForApiContract> ApiSongLists_listIdCommentsPostAsync(int listId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songLists/"+listId+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CommentForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of songs in a song list.
		/// ApiSongLists_listIdSongsGetByQueryAndSongTypesAndPvServicesAndTagIdAndArtistIdAndChildVoicebanksAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLang api/songLists/{listId}/songs
		/// </summary>
		/// <param name="listId">ID of the song list.</param>
		/// <param name="query">Song name query (optional).</param>
		/// <param name="songTypes">Filtered song types (optional).</param>
		/// <param name="pvServices">Filter by one or more PV services (separated by commas). The song will pass the filter if it has a PV for any of the matched services.</param>
		/// <param name="tagId">Filter by one or more tag Ids (optional).</param>
		/// <param name="artistId">Filter by artist Id.</param>
		/// <param name="childVoicebanks">Include child voicebanks, if the artist being filtered by has any.</param>
		/// <param name="advancedFilters">List of advanced filters (optional).</param>
		/// <param name="start">First item to be retrieved (optional, defaults to 0).</param>
		/// <param name="maxResults">Maximum number of results to be loaded (optional, defaults to 10, maximum of 50).</param>
		/// <param name="getTotalCount">Whether to load total number of items (optional, default to false).</param>
		/// <param name="sort">Song sort rule (optional, by default songs are sorted by song list order).</param>
		/// <param name="nameMatchMode">Match mode for song name (optional, defaults to Auto).</param>
		/// <param name="fields">List of optional fields (optional). Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.</param>
		/// <param name="lang">Content language preference (optional).</param>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_SongInListForApiContract> ApiSongLists_listIdSongsGetByQueryAndSongTypesAndPvServicesAndTagIdAndArtistIdAndChildVoicebanksAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangAsync(
					int listId, 
					string query, 
					string songTypes, 
					SongForApiContractPvServices pvServices, 
					int[] tagId, 
					int[] artistId, 
					bool childVoicebanks, 
					string[] advancedFilters, 
					int start, 
					int maxResults, 
					bool getTotalCount, 
					ApiSongLists_listIdSongsGetByQueryAndSongTypesAndPvServicesAndTagIdAndArtistIdAndChildVoicebanksAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangSort sort, 
					ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode nameMatchMode, 
					ApiAlbums_idGetByFieldsAndSongFieldsAndLangSongFields fields, 
					ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songLists/"+listId+"/songs?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&songTypes=" + (songTypes==null? "" : System.Uri.EscapeDataString(songTypes))+"&pvServices=" + pvServices+"&"+string.Join("&", tagId.Select(z => $"tagId={z}"))+"&"+string.Join("&", artistId.Select(z => $"artistId={z}"))+"&childVoicebanks="+childVoicebanks+"&"+string.Join("&", advancedFilters.Select(z => $"advancedFilters={System.Uri.EscapeDataString(z.ToString())}"))+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&nameMatchMode=" + nameMatchMode+"&fields=" + fields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_SongInListForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find songs.
		/// ApiSongsGetByQueryAndSongTypesAndAfterDateAndBeforeDateAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndOnlyWithPvsAndPvServicesAndSinceAndMinScoreAndUserCollectionIdAndReleaseEventIdAndParentSongIdAndStatusAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndNameMatchModeAndFieldsAndLang api/songs
		/// </summary>
		/// <param name="query">Song name query (optional).</param>
		/// <param name="songTypes">Filtered song types (optional). 
		///            Possible values are Original, Remaster, Remix, Cover, Instrumental, Mashup, MusicPV, DramaPV, Other.</param>
		/// <param name="afterDate">Filter by songs published after this date (inclusive).</param>
		/// <param name="beforeDate">Filter by songs published before this date (exclusive).</param>
		/// <param name="tagName">Filter by one or more tag names (optional).</param>
		/// <param name="tagId">Filter by one or more tag Ids (optional).</param>
		/// <param name="childTags">Include child tags, if the tags being filtered by have any.</param>
		/// <param name="artistId">Filter by artist Id.</param>
		/// <param name="artistParticipationStatus">Filter by artist participation status. Only valid if artistId is specified.
		///            Everything (default): Show all songs by that artist (no filter).
		///            OnlyMainAlbums: Show only main songs by that artist.
		///            OnlyCollaborations: Show only collaborations by that artist.</param>
		/// <param name="childVoicebanks">Include child voicebanks, if the artist being filtered by has any.</param>
		/// <param name="includeMembers">Include members of groups. This applies if {artistId} is a group.</param>
		/// <param name="onlyWithPvs">Whether to only include songs with at least one PV.</param>
		/// <param name="pvServices">Filter by one or more PV services (separated by commas). The song will pass the filter if it has a PV for any of the matched services.</param>
		/// <param name="since">Allow only entries that have been created at most this many hours ago. By default there is no filtering.</param>
		/// <param name="minScore">Minimum rating score. Optional.</param>
		/// <param name="userCollectionId">Filter by user's rated songs. By default there is no filtering.</param>
		/// <param name="releaseEventId">Filter by release event. By default there is no filtering.</param>
		/// <param name="parentSongId">Filter by parent song. By default there is no filtering.</param>
		/// <param name="status">Filter by entry status (optional).</param>
		/// <param name="advancedFilters">List of advanced filters (optional).</param>
		/// <param name="start">First item to be retrieved (optional, defaults to 0).</param>
		/// <param name="maxResults">Maximum number of results to be loaded (optional, defaults to 10, maximum of 50).</param>
		/// <param name="getTotalCount">Whether to load total number of items (optional, default to false).</param>
		/// <param name="sort">Sort rule (optional, defaults to Name). Possible values are None, Name, AdditionDate, FavoritedTimes, RatingScore.</param>
		/// <param name="preferAccurateMatches">Whether the search should prefer accurate matches. 
		///            If this is true, entries that match by prefix will be moved first, instead of being sorted alphabetically.
		///            Requires a text query. Does not support pagination.
		///            This is mostly useful for autocomplete boxes.</param>
		/// <param name="nameMatchMode">Match mode for song name (optional, defaults to Exact).</param>
		/// <param name="fields">List of optional fields (optional). Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.</param>
		/// <param name="lang">Content language preference (optional).</param>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_SongForApiContract> ApiSongsGetByQueryAndSongTypesAndAfterDateAndBeforeDateAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndOnlyWithPvsAndPvServicesAndSinceAndMinScoreAndUserCollectionIdAndReleaseEventIdAndParentSongIdAndStatusAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndNameMatchModeAndFieldsAndLangAsync(
					string query, 
					string songTypes, 
					System.DateTimeOffset afterDate, 
					System.DateTimeOffset beforeDate, 
					string[] tagName, 
					int[] tagId, 
					bool childTags, 
					int[] artistId, 
					ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangArtistParticipationStatus artistParticipationStatus, 
					bool childVoicebanks, 
					bool includeMembers, 
					bool onlyWithPvs, 
					SongForApiContractPvServices pvServices, 
					int since, 
					int minScore, 
					int userCollectionId, 
					int releaseEventId, 
					int parentSongId, 
					EntryForApiContractStatus status, 
					string[] advancedFilters, 
					int start, 
					int maxResults, 
					bool getTotalCount, 
					ApiSongLists_listIdSongsGetByQueryAndSongTypesAndPvServicesAndTagIdAndArtistIdAndChildVoicebanksAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangSort sort, 
					bool preferAccurateMatches, 
					ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode nameMatchMode, 
					ApiAlbums_idGetByFieldsAndSongFieldsAndLangSongFields fields, 
					ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&songTypes=" + (songTypes==null? "" : System.Uri.EscapeDataString(songTypes))+"&afterDate=" + afterDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&beforeDate=" + beforeDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", tagName.Select(z => $"tagName={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tagId.Select(z => $"tagId={z}"))+"&childTags="+childTags+"&"+string.Join("&", artistId.Select(z => $"artistId={z}"))+"&artistParticipationStatus=" + artistParticipationStatus+"&childVoicebanks="+childVoicebanks+"&includeMembers="+includeMembers+"&onlyWithPvs="+onlyWithPvs+"&pvServices=" + pvServices+"&since="+since+"&minScore="+minScore+"&userCollectionId="+userCollectionId+"&releaseEventId="+releaseEventId+"&parentSongId="+parentSongId+"&status=" + status+"&"+string.Join("&", advancedFilters.Select(z => $"advancedFilters={System.Uri.EscapeDataString(z.ToString())}"))+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&preferAccurateMatches="+preferAccurateMatches+"&nameMatchMode=" + nameMatchMode+"&fields=" + fields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_SongForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a song by PV.
		/// ApiSongsByPvGetByPvServiceAndPvIdAndFieldsAndLang api/songs/byPv
		/// </summary>
		/// <param name="pvService">PV service (required). Possible values are NicoNicoDouga, Youtube, SoundCloud, Vimeo, Piapro, Bilibili.</param>
		/// <param name="pvId">PV Id (required). For example sm123456.</param>
		/// <param name="fields">List of optional fields (optional). Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.</param>
		/// <param name="lang">Content language preference (optional).</param>
		/// <returns>OK</returns>
		public async Task<SongForApiContract> ApiSongsByPvGetByPvServiceAndPvIdAndFieldsAndLangAsync(PVContractService pvService, string pvId, ApiAlbums_idGetByFieldsAndSongFieldsAndLangSongFields fields, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/byPv?pvService=" + pvService+"&pvId=" + (pvId==null? "" : System.Uri.EscapeDataString(pvId))+"&fields=" + fields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SongForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a comment.
		/// Normal users can edit their own comments, moderators can edit all comments.
		/// Requires login.
		/// ApiSongsComments_commentIdPost api/songs/comments/{commentId}
		/// </summary>
		/// <param name="commentId">ID of the comment to be edited.</param>
		/// <param name="requestBody">New comment data. Only message can be edited.</param>
		public async Task ApiSongsComments_commentIdPostAsync(int commentId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/comments/"+commentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a comment.
		/// Normal users can delete their own comments, moderators can delete all comments.
		/// Requires login.
		/// ApiSongsComments_commentIdDelete api/songs/comments/{commentId}
		/// </summary>
		/// <param name="commentId">ID of the comment to be deleted.</param>
		public async Task ApiSongsComments_commentIdDeleteAsync(int commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/comments/"+commentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of highlighted songs, same as front page.
		/// Output is cached for 1 hour.
		/// ApiSongsHighlightedGetByLanguagePreferenceAndFields api/songs/highlighted
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SongForApiContract[]> ApiSongsHighlightedGetByLanguagePreferenceAndFieldsAsync(ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang languagePreference, ApiAlbums_idGetByFieldsAndSongFieldsAndLangSongFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/highlighted?languagePreference=" + languagePreference+"&fields=" + fields;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SongForApiContract[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets lyrics by ID.
		/// Output is cached. Specify song version as parameter to refresh.
		/// ApiSongsLyrics_lyricsIdGet api/songs/lyrics/{lyricsId}
		/// </summary>
		/// <param name="lyricsId">Lyrics ID.</param>
		/// <returns>OK</returns>
		public async Task<LyricsForSongContract> ApiSongsLyrics_lyricsIdGetAsync(int lyricsId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/lyrics/"+lyricsId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LyricsForSongContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of song names. Ideal for autocomplete boxes.
		/// ApiSongsNamesGetByQueryAndNameMatchModeAndMaxResults api/songs/names
		/// </summary>
		/// <param name="query">Text query.</param>
		/// <param name="nameMatchMode">Name match mode.</param>
		/// <param name="maxResults">Maximum number of results.</param>
		/// <returns>OK</returns>
		public async Task<string[]> ApiSongsNamesGetByQueryAndNameMatchModeAndMaxResultsAsync(string query, ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode nameMatchMode, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/names?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&nameMatchMode=" + nameMatchMode+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets top rated songs.
		/// ApiSongsTop_ratedGetByDurationHoursAndStartDateAndFilterByAndVocalistAndMaxResultsAndFieldsAndLanguagePreference api/songs/top-rated
		/// </summary>
		/// <param name="durationHours">Duration in hours from which to get songs.</param>
		/// <param name="startDate">Lower bound of the date. Optional.</param>
		/// <param name="filterBy">Filtering mode.</param>
		/// <param name="vocalist">Vocalist selection.</param>
		/// <param name="maxResults">Maximum number of results to be loaded (optional).</param>
		/// <param name="fields">Optional song fields to load.</param>
		/// <param name="languagePreference">Language preference.</param>
		/// <returns>OK</returns>
		public async Task<SongForApiContract[]> ApiSongsTop_ratedGetByDurationHoursAndStartDateAndFilterByAndVocalistAndMaxResultsAndFieldsAndLanguagePreferenceAsync(int durationHours, System.DateTimeOffset startDate, ApiSongsTop_ratedGetByDurationHoursAndStartDateAndFilterByAndVocalistAndMaxResultsAndFieldsAndLanguagePreferenceFilterBy filterBy, ApiSongsTop_ratedGetByDurationHoursAndStartDateAndFilterByAndVocalistAndMaxResultsAndFieldsAndLanguagePreferenceVocalist vocalist, int maxResults, ApiAlbums_idGetByFieldsAndSongFieldsAndLangSongFields fields, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang languagePreference, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/top-rated?durationHours="+durationHours+"&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&filterBy=" + filterBy+"&vocalist=" + vocalist+"&maxResults="+maxResults+"&fields=" + fields+"&languagePreference=" + languagePreference;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SongForApiContract[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a song by Id.
		/// ApiSongs_idGetByFieldsAndLang api/songs/{id}
		/// </summary>
		/// <param name="id">Song Id (required).</param>
		/// <param name="fields">List of optional fields (optional). 
		///            Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.</param>
		/// <param name="lang">Content language preference (optional).</param>
		/// <returns>OK</returns>
		public async Task<SongForApiContract> ApiSongs_idGetByFieldsAndLangAsync(int id, ApiAlbums_idGetByFieldsAndSongFieldsAndLangSongFields fields, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/"+id+"?fields=" + fields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SongForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a song.
		/// ApiSongs_idDeleteByNotes api/songs/{id}
		/// </summary>
		/// <param name="id">ID of the song to be deleted.</param>
		/// <param name="notes">Notes.</param>
		public async Task ApiSongs_idDeleteByNotesAsync(int id, string notes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/"+id+"?notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of comments for a song.
		/// Pagination and sorting might be added later.
		/// ApiSongs_idCommentsGet api/songs/{id}/comments
		/// </summary>
		/// <param name="id">ID of the song whose comments to load.</param>
		/// <returns>OK</returns>
		public async Task<CommentForApiContract[]> ApiSongs_idCommentsGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/"+id+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CommentForApiContract[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Posts a new comment.
		/// ApiSongs_idCommentsPost api/songs/{id}/comments
		/// </summary>
		/// <param name="id">ID of the song for which to create the comment.</param>
		/// <param name="requestBody">Comment data. Message and author must be specified. Author must match the logged in user.</param>
		/// <returns>OK</returns>
		public async Task<CommentForApiContract> ApiSongs_idCommentsPostAsync(int id, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/"+id+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CommentForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets derived (alternate versions) of a song.
		/// Pagination and sorting might be added later.
		/// ApiSongs_idDerivedGetByFieldsAndLang api/songs/{id}/derived
		/// </summary>
		/// <param name="id">Song Id (required).</param>
		/// <param name="fields">List of optional fields (optional). 
		///            Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.</param>
		/// <param name="lang">Content language preference (optional).</param>
		/// <returns>OK</returns>
		public async Task<SongForApiContract[]> ApiSongs_idDerivedGetByFieldsAndLangAsync(int id, ApiAlbums_idGetByFieldsAndSongFieldsAndLangSongFields fields, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/"+id+"/derived?fields=" + fields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SongForApiContract[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get ratings for a song.
		/// The result includes ratings and user information.
		/// For users who have requested not to make their ratings public, the user will be empty.
		/// ApiSongs_idRatingsGetByUserFieldsAndLang api/songs/{id}/ratings
		/// </summary>
		/// <param name="id">Song ID.</param>
		/// <param name="userFields">Optional fields for the users.</param>
		/// <param name="lang">Content language preference.</param>
		/// <returns>OK</returns>
		public async Task<RatedSongForUserForApiContract[]> ApiSongs_idRatingsGetByUserFieldsAndLangAsync(int id, ApiSongs_idRatingsGetByUserFieldsAndLangUserFields userFields, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/"+id+"/ratings?userFields=" + userFields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RatedSongForUserForApiContract[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add or update rating for a specific song, for the currently logged in user.
		/// If the user has already rated the song, any previous rating is replaced.
		/// Authorization cookie must be included.
		/// This API supports CORS.
		/// ApiSongs_idRatingsPost api/songs/{id}/ratings
		/// </summary>
		/// <param name="id">ID of the song to be rated.</param>
		/// <param name="requestBody">Rating to be given. Possible values are Nothing, Like, Favorite.</param>
		public async Task ApiSongs_idRatingsPostAsync(int id, SongRatingContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/"+id+"/ratings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets related songs.
		/// ApiSongs_idRelatedGetByFieldsAndLang api/songs/{id}/related
		/// </summary>
		/// <param name="id">Song whose related songs are to be queried.</param>
		/// <param name="fields">Optional song fields.</param>
		/// <param name="lang">Content language preference.</param>
		/// <returns>OK</returns>
		public async Task<RelatedSongsContract> ApiSongs_idRelatedGetByFieldsAndLangAsync(int id, ApiAlbums_idGetByFieldsAndSongFieldsAndLangSongFields fields, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/"+id+"/related?fields=" + fields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RelatedSongsContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find tags.
		/// ApiTagsGetByQueryAndAllowChildrenAndCategoryNameAndStartAndMaxResultsAndGetTotalCountAndNameMatchModeAndSortAndPreferAccurateMatchesAndFieldsAndLangAndTarget api/tags
		/// </summary>
		/// <param name="query">Tag name query (optional).</param>
		/// <param name="allowChildren">Whether to allow child tags. If this is false, only root tags (that aren't children of any other tag) will be included.</param>
		/// <param name="categoryName">Filter tags by category (optional). If specified, this must be an exact match (case insensitive).</param>
		/// <param name="start">First item to be retrieved (optional, defaults to 0).</param>
		/// <param name="maxResults">Maximum number of results to be loaded (optional, defaults to 10, maximum of 30).</param>
		/// <param name="getTotalCount">Whether to load total number of items (optional, default to false).</param>
		/// <param name="nameMatchMode">Match mode for song name (optional, defaults to Exact).</param>
		/// <param name="sort">Sort rule (optional, by default tags are sorted by name).Possible values are Name and UsageCount.</param>
		/// <param name="preferAccurateMatches">Whether the search should prefer accurate matches. 
		///            If this is true, entries that match by prefix will be moved first, instead of being sorted alphabetically.
		///            Requires a text query. Does not support pagination.
		///            This is mostly useful for autocomplete boxes.</param>
		/// <param name="fields">List of optional fields (optional).</param>
		/// <param name="lang">Content language preference (optional).</param>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_TagForApiContract> ApiTagsGetByQueryAndAllowChildrenAndCategoryNameAndStartAndMaxResultsAndGetTotalCountAndNameMatchModeAndSortAndPreferAccurateMatchesAndFieldsAndLangAndTargetAsync(string query, bool allowChildren, string categoryName, int start, int maxResults, bool getTotalCount, ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode nameMatchMode, ApiTagsGetByQueryAndAllowChildrenAndCategoryNameAndStartAndMaxResultsAndGetTotalCountAndNameMatchModeAndSortAndPreferAccurateMatchesAndFieldsAndLangAndTargetSort sort, bool preferAccurateMatches, ApiTagsGetByQueryAndAllowChildrenAndCategoryNameAndStartAndMaxResultsAndGetTotalCountAndNameMatchModeAndSortAndPreferAccurateMatchesAndFieldsAndLangAndTargetFields fields, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, ApiTagsGetByQueryAndAllowChildrenAndCategoryNameAndStartAndMaxResultsAndGetTotalCountAndNameMatchModeAndSortAndPreferAccurateMatchesAndFieldsAndLangAndTargetTarget target, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&allowChildren="+allowChildren+"&categoryName=" + (categoryName==null? "" : System.Uri.EscapeDataString(categoryName))+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&nameMatchMode=" + nameMatchMode+"&sort=" + sort+"&preferAccurateMatches="+preferAccurateMatches+"&fields=" + fields+"&lang=" + lang+"&target=" + target;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_TagForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new tag.
		/// ApiTagsPostByName api/tags
		/// </summary>
		/// <param name="name">Tag English name. Tag names must be unique.</param>
		/// <returns>OK</returns>
		public async Task<TagBaseContract> ApiTagsPostByNameAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags?name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TagBaseContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DEPRECATED. Gets a tag by name.
		/// ApiTagsByName_nameGetByFieldsAndLang api/tags/byName/{name}
		/// </summary>
		/// <param name="name">Tag name (required).</param>
		/// <param name="fields">List of optional fields (optional).</param>
		/// <param name="lang">Content language preference (optional).</param>
		/// <returns>OK</returns>
		public async Task<TagForApiContract> ApiTagsByName_nameGetByFieldsAndLangAsync(string name, ApiTagsGetByQueryAndAllowChildrenAndCategoryNameAndStartAndMaxResultsAndGetTotalCountAndNameMatchModeAndSortAndPreferAccurateMatchesAndFieldsAndLangAndTargetFields fields, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/byName/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&fields=" + fields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TagForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of tag category names.
		/// ApiTagsCategoryNamesGetByQueryAndNameMatchMode api/tags/categoryNames
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string[]> ApiTagsCategoryNamesGetByQueryAndNameMatchModeAsync(string query, ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode nameMatchMode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/categoryNames?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&nameMatchMode=" + nameMatchMode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a comment.
		/// Normal users can edit their own comments, moderators can edit all comments.
		/// Requires login.
		/// ApiTagsComments_commentIdPost api/tags/comments/{commentId}
		/// </summary>
		/// <param name="commentId">ID of the comment to be edited.</param>
		/// <param name="requestBody">New comment data. Only message can be edited.</param>
		public async Task ApiTagsComments_commentIdPostAsync(int commentId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/comments/"+commentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a comment.
		/// Normal users can delete their own comments, moderators can delete all comments.
		/// Requires login.
		/// ApiTagsComments_commentIdDelete api/tags/comments/{commentId}
		/// </summary>
		/// <param name="commentId">ID of the comment to be deleted.</param>
		public async Task ApiTagsComments_commentIdDeleteAsync(int commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/comments/"+commentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find tag names by a part of name.
		/// 
		/// Matching is done anywhere from the name.
		/// ApiTagsNamesGetByQueryAndAllowAliasesAndMaxResults api/tags/names
		/// </summary>
		/// <param name="query">Tag name query, for example "rock".</param>
		/// <param name="allowAliases">Whether to find tags that are aliases of other tags as well. 
		///            If false, only tags that are not aliases will be listed.</param>
		/// <param name="maxResults">Maximum number of search results.</param>
		/// <returns>OK</returns>
		public async Task<string[]> ApiTagsNamesGetByQueryAndAllowAliasesAndMaxResultsAsync(string query, bool allowAliases, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/names?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&allowAliases="+allowAliases+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the most common tags in a category.
		/// ApiTagsTopGetByCategoryNameAndMaxResultsAndLang api/tags/top
		/// </summary>
		/// <param name="categoryName">Tag category, for example "Genres". Optional - if not specified, no filtering is done.</param>
		/// <param name="maxResults">Maximum number of tags to return.</param>
		/// <param name="lang">Content language preference (optional).</param>
		/// <returns>OK</returns>
		public async Task<TagBaseContract[]> ApiTagsTopGetByCategoryNameAndMaxResultsAndLangAsync(string categoryName, int maxResults, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/top?categoryName=" + (categoryName==null? "" : System.Uri.EscapeDataString(categoryName))+"&maxResults="+maxResults+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TagBaseContract[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a tag by ID.
		/// ApiTags_idGetByFieldsAndLang api/tags/{id}
		/// </summary>
		/// <param name="id">Tag ID (required).</param>
		/// <param name="fields">List of optional fields (optional).</param>
		/// <param name="lang">Content language preference (optional).</param>
		/// <returns>OK</returns>
		public async Task<TagForApiContract> ApiTags_idGetByFieldsAndLangAsync(int id, ApiTagsGetByQueryAndAllowChildrenAndCategoryNameAndStartAndMaxResultsAndGetTotalCountAndNameMatchModeAndSortAndPreferAccurateMatchesAndFieldsAndLangAndTargetFields fields, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/"+id+"?fields=" + fields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TagForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a tag.
		/// ApiTags_idDeleteByNotesAndHardDelete api/tags/{id}
		/// </summary>
		/// <param name="id">ID of the tag to be deleted.</param>
		/// <param name="notes">Notes (optional).</param>
		/// <param name="hardDelete">If true, the entry is hard deleted. Hard deleted entries cannot be restored normally, but they will be moved to trash.
		///            If false, the entry is soft deleted, meaning it can still be restored.</param>
		public async Task ApiTags_idDeleteByNotesAndHardDeleteAsync(int id, string notes, bool hardDelete, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/"+id+"?notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes))+"&hardDelete="+hardDelete;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of child tags for a tag.
		/// Only direct children will be included.
		/// ApiTags_tagIdChildrenGetByFieldsAndLang api/tags/{tagId}/children
		/// </summary>
		/// <param name="tagId">ID of the tag whose children to load.</param>
		/// <param name="fields">List of optional fields (optional).</param>
		/// <param name="lang">Content language preference (optional).</param>
		/// <returns>OK</returns>
		public async Task<TagForApiContract[]> ApiTags_tagIdChildrenGetByFieldsAndLangAsync(int tagId, ApiTagsGetByQueryAndAllowChildrenAndCategoryNameAndStartAndMaxResultsAndGetTotalCountAndNameMatchModeAndSortAndPreferAccurateMatchesAndFieldsAndLangAndTargetFields fields, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/"+tagId+"/children?fields=" + fields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TagForApiContract[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of comments for a tag.
		/// Note: pagination and sorting might be added later.
		/// ApiTags_tagIdCommentsGet api/tags/{tagId}/comments
		/// </summary>
		/// <param name="tagId">ID of the tag whose comments to load.</param>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_CommentForApiContract> ApiTags_tagIdCommentsGetAsync(int tagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/"+tagId+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_CommentForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Posts a new comment.
		/// ApiTags_tagIdCommentsPost api/tags/{tagId}/comments
		/// </summary>
		/// <param name="tagId">ID of the tag for which to create the comment.</param>
		/// <param name="requestBody">Comment data. Message and author must be specified. Author must match the logged in user.</param>
		/// <returns>OK</returns>
		public async Task<CommentForApiContract> ApiTags_tagIdCommentsPostAsync(int tagId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/"+tagId+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CommentForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new report.
		/// ApiTags_tagIdReportsPostByReportTypeAndNotesAndVersionNumber api/tags/{tagId}/reports
		/// </summary>
		/// <param name="tagId">Tag to be reported.</param>
		/// <param name="reportType">Report type.</param>
		/// <param name="notes">Notes. Optional.</param>
		/// <param name="versionNumber">Version to be reported. Optional.</param>
		public async Task ApiTags_tagIdReportsPostByReportTypeAndNotesAndVersionNumberAsync(int tagId, ApiReleaseEvents_eventIdReportsPostByReportTypeAndNotesAndVersionNumberReportType reportType, string notes, int versionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/"+tagId+"/reports?reportType=" + reportType+"&notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes))+"&versionNumber="+versionNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of users.
		/// ApiUsersGetByQueryAndGroupsAndJoinDateAfterAndJoinDateBeforeAndNameMatchModeAndStartAndMaxResultsAndGetTotalCountAndSortAndIncludeDisabledAndOnlyVerifiedAndKnowsLanguageAndFields api/users
		/// </summary>
		/// <param name="query">User name query (optional).</param>
		/// <param name="groups">Filter by user group. Only one value supported for now. Optional.</param>
		/// <param name="joinDateAfter">Filter by users who joined after this date (inclusive).</param>
		/// <param name="joinDateBefore">Filter by users who joined before this date (exclusive).</param>
		/// <param name="nameMatchMode">Name match mode.</param>
		/// <param name="start">Index of the first entry to be loaded.</param>
		/// <param name="maxResults">Maximum number of results to be loaded.</param>
		/// <param name="getTotalCount">Whether to get total number of results.</param>
		/// <param name="sort">Sort rule.</param>
		/// <param name="includeDisabled">Whether to include disabled user accounts.</param>
		/// <param name="onlyVerified">Whether to only include verified artists.</param>
		/// <param name="knowsLanguage">Filter by known language (optional). This is the ISO 639-1 language code, for example "en" or "zh".</param>
		/// <param name="fields">Optional fields. Possible values are None and MainPicture. Optional.</param>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_UserForApiContract> ApiUsersGetByQueryAndGroupsAndJoinDateAfterAndJoinDateBeforeAndNameMatchModeAndStartAndMaxResultsAndGetTotalCountAndSortAndIncludeDisabledAndOnlyVerifiedAndKnowsLanguageAndFieldsAsync(string query, UserForApiContractGroupId groups, System.DateTimeOffset joinDateAfter, System.DateTimeOffset joinDateBefore, ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode nameMatchMode, int start, int maxResults, bool getTotalCount, ApiUsersGetByQueryAndGroupsAndJoinDateAfterAndJoinDateBeforeAndNameMatchModeAndStartAndMaxResultsAndGetTotalCountAndSortAndIncludeDisabledAndOnlyVerifiedAndKnowsLanguageAndFieldsSort sort, bool includeDisabled, bool onlyVerified, string knowsLanguage, ApiSongs_idRatingsGetByUserFieldsAndLangUserFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&groups=" + groups+"&joinDateAfter=" + joinDateAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&joinDateBefore=" + joinDateBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&nameMatchMode=" + nameMatchMode+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&includeDisabled="+includeDisabled+"&onlyVerified="+onlyVerified+"&knowsLanguage=" + (knowsLanguage==null? "" : System.Uri.EscapeDataString(knowsLanguage))+"&fields=" + fields;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_UserForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the currently logged in user.
		/// Requires login information.
		/// This API supports CORS, and is restricted to specific origins.
		/// ApiUsersCurrentGetByFields api/users/current
		/// </summary>
		/// <param name="fields">Optional fields.</param>
		/// <returns>OK</returns>
		public async Task<UserForApiContract> ApiUsersCurrentGetByFieldsAsync(ApiSongs_idRatingsGetByUserFieldsAndLangUserFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/current?fields=" + fields;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add or update collection status, media type and rating for a specific album, for the currently logged in user.
		/// If the user has already rated the album, any previous rating is replaced.
		/// Authorization cookie must be included.
		/// ApiUsersCurrentAlbums_albumIdPostByCollectionStatusAndMediaTypeAndRating api/users/current/albums/{albumId}
		/// </summary>
		/// <param name="albumId">ID of the album to be rated.</param>
		/// <param name="collectionStatus">Collection status. Possible values are Nothing, Wishlisted, Ordered and Owned.</param>
		/// <param name="mediaType">Album media type. Possible values are PhysicalDisc, DigitalDownload and Other.</param>
		/// <param name="rating">Rating to be given. Possible values are between 0 and 5.</param>
		/// <returns>OK</returns>
		public async Task<string> ApiUsersCurrentAlbums_albumIdPostByCollectionStatusAndMediaTypeAndRatingAsync(int albumId, AlbumForUserForApiContractPurchaseStatus collectionStatus, AlbumForUserForApiContractMediaType mediaType, int rating, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/current/albums/"+albumId+"?collectionStatus=" + collectionStatus+"&mediaType=" + mediaType+"&rating="+rating;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiUsersCurrentFollowedTags_tagIdPost api/users/current/followedTags/{tagId}
		/// </summary>
		public async Task ApiUsersCurrentFollowedTags_tagIdPostAsync(int tagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/current/followedTags/"+tagId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiUsersCurrentFollowedTags_tagIdDelete api/users/current/followedTags/{tagId}
		/// </summary>
		public async Task ApiUsersCurrentFollowedTags_tagIdDeleteAsync(int tagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/current/followedTags/"+tagId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets currently logged in user's rating for a song.
		/// Requires authentication.
		/// ApiUsersCurrentRatedSongs_songIdGet api/users/current/ratedSongs/{songId}
		/// </summary>
		/// <param name="songId">ID of the song whose rating is to be checked.</param>
		/// <returns>OK</returns>
		public async Task<RatedSongForUserForApiContractRating> ApiUsersCurrentRatedSongs_songIdGetAsync(int songId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/current/ratedSongs/"+songId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RatedSongForUserForApiContractRating>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Refresh entry edit status, indicating that the current user is still editing that entry.
		/// ApiUsersCurrentRefreshEntryEditPostByEntryTypeAndEntryId api/users/current/refreshEntryEdit
		/// </summary>
		/// <param name="entryType">Type of entry.</param>
		/// <param name="entryId">Entry ID.</param>
		public async Task ApiUsersCurrentRefreshEntryEditPostByEntryTypeAndEntryIdAsync(EntryForApiContractEntryType entryType, int entryId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/current/refreshEntryEdit?entryType=" + entryType+"&entryId="+entryId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Appends tags for a song, by the currently logged in user.
		/// This can only be used to add tags - existing tags will not be removed.
		/// Nothing will be done for tags that are already applied by the current user for the song.
		/// Authorization cookie is required.
		/// ApiUsersCurrentSongTags_songIdPost api/users/current/songTags/{songId}
		/// </summary>
		/// <param name="songId">ID of the song to be tagged.</param>
		/// <param name="requestBody">List of tags to be appended.</param>
		public async Task ApiUsersCurrentSongTags_songIdPostAsync(int songId, TagBaseContract[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/current/songTags/"+songId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a user message.
		/// The message will be marked as read.
		/// User can only load messages from their own inbox.
		/// ApiUsersMessages_messageIdGet api/users/messages/{messageId}
		/// </summary>
		/// <param name="messageId">ID of the message.</param>
		/// <returns>OK</returns>
		public async Task<UserMessageContract> ApiUsersMessages_messageIdGetAsync(int messageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/messages/"+messageId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserMessageContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of user names. Ideal for autocomplete boxes.
		/// ApiUsersNamesGetByQueryAndNameMatchModeAndMaxResultsAndIncludeDisabled api/users/names
		/// </summary>
		/// <param name="query">Text query.</param>
		/// <param name="nameMatchMode">Name match mode. Words is treated the same as Partial.</param>
		/// <param name="maxResults">Maximum number of results.</param>
		/// <param name="includeDisabled">Whether to include disabled user accounts. If false, disabled accounts are excluded.</param>
		/// <returns>OK</returns>
		public async Task<string[]> ApiUsersNamesGetByQueryAndNameMatchModeAndMaxResultsAndIncludeDisabledAsync(string query, ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode nameMatchMode, int maxResults, bool includeDisabled, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/names?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&nameMatchMode=" + nameMatchMode+"&maxResults="+maxResults+"&includeDisabled="+includeDisabled;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a comment.
		/// Normal users can edit their own comments, moderators can edit all comments.
		/// Requires login.
		/// ApiUsersProfileComments_commentIdPost api/users/profileComments/{commentId}
		/// </summary>
		/// <param name="commentId">ID of the comment to be edited.</param>
		/// <param name="requestBody">New comment data. Only message can be edited.</param>
		public async Task ApiUsersProfileComments_commentIdPostAsync(int commentId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/profileComments/"+commentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a comment.
		/// Normal users can delete their own comments, moderators can delete all comments.
		/// Requires login.
		/// ApiUsersProfileComments_commentIdDelete api/users/profileComments/{commentId}
		/// </summary>
		/// <param name="commentId">ID of the comment to be deleted.</param>
		public async Task ApiUsersProfileComments_commentIdDeleteAsync(int commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/profileComments/"+commentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets user by ID.
		/// ApiUsers_idGetByFields api/users/{id}
		/// </summary>
		/// <param name="id">User ID.</param>
		/// <param name="fields">Optional fields.</param>
		/// <returns>OK</returns>
		public async Task<UserForApiContract> ApiUsers_idGetByFieldsAsync(int id, ApiSongs_idRatingsGetByUserFieldsAndLangUserFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"?fields=" + fields;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of albums in a user's collection.
		/// This includes albums that have been rated by the user as well as albums that the user has bought or wishlisted.
		/// Note that the user might have set his album ownership status and media type as private, in which case those properties are not included.
		/// ApiUsers_idAlbumsGetByQueryAndTagIdAndTagAndArtistIdAndPurchaseStatusesAndReleaseEventIdAndAlbumTypesAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLang api/users/{id}/albums
		/// </summary>
		/// <param name="id">ID of the user whose albums are to be browsed.</param>
		/// <param name="query">Album name query (optional).</param>
		/// <param name="tagId">Filter by tag Id (optional).</param>
		/// <param name="tag">Filter by tag (optional).</param>
		/// <param name="artistId">Filter by album artist (optional).</param>
		/// <param name="purchaseStatuses">Filter by a comma-separated list of purchase statuses (optional). Possible values are Nothing, Wishlisted, Ordered, Owned, and all combinations of these.</param>
		/// <param name="releaseEventId">Filter by release event. Optional.</param>
		/// <param name="albumTypes">Filter by album type (optional).</param>
		/// <param name="advancedFilters">List of advanced filters (optional).</param>
		/// <param name="start">First item to be retrieved (optional, defaults to 0).</param>
		/// <param name="maxResults">Maximum number of results to be loaded (optional, defaults to 10, maximum of 50).</param>
		/// <param name="getTotalCount">Whether to load total number of items (optional, default to false).</param>
		/// <param name="sort">Sort rule (optional, defaults to Name). Possible values are None, Name, ReleaseDate, AdditionDate, RatingAverage, RatingTotal, CollectionCount.</param>
		/// <param name="nameMatchMode">Match mode for album name (optional, defaults to Auto).</param>
		/// <param name="fields">List of optional fields (optional). Possible values are Artists, MainPicture, Names, PVs, Tags, WebLinks.</param>
		/// <param name="lang">Content language preference (optional).</param>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_AlbumForUserForApiContract> ApiUsers_idAlbumsGetByQueryAndTagIdAndTagAndArtistIdAndPurchaseStatusesAndReleaseEventIdAndAlbumTypesAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangAsync(
					int id, 
					string query, 
					int tagId, 
					string tag, 
					int artistId, 
					ApiUsers_idAlbumsGetByQueryAndTagIdAndTagAndArtistIdAndPurchaseStatusesAndReleaseEventIdAndAlbumTypesAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangPurchaseStatuses purchaseStatuses, 
					int releaseEventId, 
					EntryForApiContractDiscType albumTypes, 
					string[] advancedFilters, 
					int start, 
					int maxResults, 
					bool getTotalCount, 
					ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangSort sort, 
					ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode nameMatchMode, 
					ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangFields fields, 
					ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/albums?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&tagId="+tagId+"&tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag))+"&artistId="+artistId+"&purchaseStatuses=" + purchaseStatuses+"&releaseEventId="+releaseEventId+"&albumTypes=" + albumTypes+"&"+string.Join("&", advancedFilters.Select(z => $"advancedFilters={System.Uri.EscapeDataString(z.ToString())}"))+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&nameMatchMode=" + nameMatchMode+"&fields=" + fields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_AlbumForUserForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of events a user has subscribed to.
		/// ApiUsers_idEventsGetByRelationshipType api/users/{id}/events
		/// </summary>
		/// <param name="id">User ID.</param>
		/// <param name="relationshipType">Type of event subscription.</param>
		/// <returns>OK</returns>
		public async Task<ReleaseEventForApiContract[]> ApiUsers_idEventsGetByRelationshipTypeAsync(int id, ApiUsers_idEventsGetByRelationshipTypeRelationshipType relationshipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/events?relationshipType=" + relationshipType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReleaseEventForApiContract[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of artists followed by a user.
		/// ApiUsers_idFollowedArtistsGetByQueryAndTagIdAndArtistTypeAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLang api/users/{id}/followedArtists
		/// </summary>
		/// <param name="id">ID of the user whose followed artists are to be browsed.</param>
		/// <param name="query">Artist name query (optional).</param>
		/// <param name="tagId">Filter by tag Id (optional). This filter can be specified multiple times.</param>
		/// <param name="artistType">Filter by artist type.</param>
		/// <param name="start">First item to be retrieved (optional, defaults to 0).</param>
		/// <param name="maxResults">Maximum number of results to be loaded (optional, defaults to 10, maximum of 50).</param>
		/// <param name="getTotalCount">Whether to load total number of items (optional, default to false).</param>
		/// <param name="sort">Sort rule (optional, defaults to Name). Possible values are None, Name, AdditionDate, AdditionDateAsc.</param>
		/// <param name="nameMatchMode">Match mode for artist name (optional, defaults to Auto).</param>
		/// <param name="fields">List of optional fields (optional). Possible values are Description, Groups, Members, Names, Tags, WebLinks.</param>
		/// <param name="lang">Content language preference (optional).</param>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_ArtistForUserForApiContract> ApiUsers_idFollowedArtistsGetByQueryAndTagIdAndArtistTypeAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangAsync(int id, string query, int[] tagId, EntryForApiContractArtistType artistType, int start, int maxResults, bool getTotalCount, ApiArtistsGetByQueryAndArtistTypesAndAllowBaseVoicebanksAndTagNameAndTagIdAndChildTagsAndFollowedByUserIdAndStatusAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndNameMatchModeAndFieldsAndLangSort sort, ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode nameMatchMode, ApiArtistsGetByQueryAndArtistTypesAndAllowBaseVoicebanksAndTagNameAndTagIdAndChildTagsAndFollowedByUserIdAndStatusAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndNameMatchModeAndFieldsAndLangFields fields, ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/followedArtists?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&"+string.Join("&", tagId.Select(z => $"tagId={z}"))+"&artistType=" + artistType+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&nameMatchMode=" + nameMatchMode+"&fields=" + fields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_ArtistForUserForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of messages.
		/// ApiUsers_idMessagesGetByInboxAndUnreadAndAnotherUserIdAndStartAndMaxResultsAndGetTotalCount api/users/{id}/messages
		/// </summary>
		/// <param name="id">User ID. Must be the currently logged in user (loading messages for another user is not allowed).</param>
		/// <param name="inbox">Type of inbox. Possible values are Nothing (load all, default), Received, Sent, Notifications.</param>
		/// <param name="unread">Whether to only load unread messages. Loading unread messages is only possible for received messages and notifications (not sent messages).</param>
		/// <param name="anotherUserId">Filter by id of the other user (either sender or receiver).</param>
		/// <param name="start">Index of the first entry to be loaded.</param>
		/// <param name="maxResults">Maximum number of results to be loaded.</param>
		/// <param name="getTotalCount">Whether to get total number of results.</param>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_UserMessageContract> ApiUsers_idMessagesGetByInboxAndUnreadAndAnotherUserIdAndStartAndMaxResultsAndGetTotalCountAsync(int id, UserMessageContractInbox inbox, bool unread, int anotherUserId, int start, int maxResults, bool getTotalCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/messages?inbox=" + inbox+"&unread="+unread+"&anotherUserId="+anotherUserId+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_UserMessageContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new message.
		/// ApiUsers_idMessagesPost api/users/{id}/messages
		/// </summary>
		/// <param name="id">User ID. Must be logged in user.</param>
		/// <param name="requestBody">Message data.</param>
		/// <returns>OK</returns>
		public async Task<UserMessageContract> ApiUsers_idMessagesPostAsync(int id, UserMessageContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/messages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserMessageContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a list of user messages.
		/// ApiUsers_idMessagesDeleteByMessageId api/users/{id}/messages
		/// </summary>
		/// <param name="id">ID of the user whose messages to delete.</param>
		/// <param name="messageId">IDs of messages.</param>
		public async Task ApiUsers_idMessagesDeleteByMessageIdAsync(int id, int[] messageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/messages?"+string.Join("&", messageId.Select(z => $"messageId={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of comments posted on user's profile.
		/// ApiUsers_idProfileCommentsGetByStartAndMaxResultsAndGetTotalCount api/users/{id}/profileComments
		/// </summary>
		/// <param name="id">ID of the user whose comments are to be retrieved.</param>
		/// <param name="start">Index of the first comment to be loaded.</param>
		/// <param name="maxResults">Maximum number of comments to load.</param>
		/// <param name="getTotalCount">Whether to load the total number of comments.</param>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_CommentForApiContract> ApiUsers_idProfileCommentsGetByStartAndMaxResultsAndGetTotalCountAsync(int id, int start, int maxResults, bool getTotalCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/profileComments?start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_CommentForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Posts a new comment.
		/// ApiUsers_idProfileCommentsPost api/users/{id}/profileComments
		/// </summary>
		/// <param name="id">ID of the user for whom to create the comment.</param>
		/// <param name="requestBody">Comment data. Message and author must be specified. Author must match the logged in user.</param>
		/// <returns>OK</returns>
		public async Task<CommentForApiContract> ApiUsers_idProfileCommentsPostAsync(int id, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/profileComments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CommentForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of songs rated by a user.
		/// ApiUsers_idRatedSongsGetByQueryAndTagNameAndTagIdAndArtistIdAndChildVoicebanksAndArtistGroupingAndRatingAndSongListIdAndGroupByRatingAndPvServicesAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLang api/users/{id}/ratedSongs
		/// </summary>
		/// <param name="id">ID of the user whose songs are to be browsed.</param>
		/// <param name="query">Song name query (optional).</param>
		/// <param name="tagName">Filter by tag name (optional).</param>
		/// <param name="tagId">Filter by tag Id (optional). This filter can be specified multiple times.</param>
		/// <param name="artistId">Filter by song artist (optional).</param>
		/// <param name="childVoicebanks">Include child voicebanks, if the artist being filtered by has any.</param>
		/// <param name="artistGrouping">Logical grouping for artists.</param>
		/// <param name="rating">Filter songs by given rating (optional).</param>
		/// <param name="songListId">Filter songs by song list (optional).</param>
		/// <param name="groupByRating">Group results by rating so that highest rated are first.</param>
		/// <param name="pvServices">Filter by one or more PV services (separated by commas). The song will pass the filter if it has a PV for any of the matched services.</param>
		/// <param name="advancedFilters">List of advanced filters (optional).</param>
		/// <param name="start">First item to be retrieved (optional, defaults to 0).</param>
		/// <param name="maxResults">Maximum number of results to be loaded (optional, defaults to 10, maximum of 50).</param>
		/// <param name="getTotalCount">Whether to load total number of items (optional, default to false).</param>
		/// <param name="sort">Sort rule (optional, defaults to Name). Possible values are None, Name, AdditionDate, FavoritedTimes, RatingScore.</param>
		/// <param name="nameMatchMode">Match mode for song name (optional, defaults to Auto).</param>
		/// <param name="fields">List of optional fields (optional). Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.</param>
		/// <param name="lang">Content language preference (optional).</param>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_RatedSongForUserForApiContract> ApiUsers_idRatedSongsGetByQueryAndTagNameAndTagIdAndArtistIdAndChildVoicebanksAndArtistGroupingAndRatingAndSongListIdAndGroupByRatingAndPvServicesAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangAsync(
					int id, 
					string query, 
					string tagName, 
					int[] tagId, 
					int[] artistId, 
					bool childVoicebanks, 
					ApiUsers_idRatedSongsGetByQueryAndTagNameAndTagIdAndArtistIdAndChildVoicebanksAndArtistGroupingAndRatingAndSongListIdAndGroupByRatingAndPvServicesAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangArtistGrouping artistGrouping, 
					RatedSongForUserForApiContractRating rating, 
					int songListId, 
					bool groupByRating, 
					SongForApiContractPvServices pvServices, 
					string[] advancedFilters, 
					int start, 
					int maxResults, 
					bool getTotalCount, 
					ApiUsers_idRatedSongsGetByQueryAndTagNameAndTagIdAndArtistIdAndChildVoicebanksAndArtistGroupingAndRatingAndSongListIdAndGroupByRatingAndPvServicesAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangSort sort, 
					ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode nameMatchMode, 
					ApiAlbums_idGetByFieldsAndSongFieldsAndLangSongFields fields, 
					ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang lang, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/ratedSongs?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&tagName=" + (tagName==null? "" : System.Uri.EscapeDataString(tagName))+"&"+string.Join("&", tagId.Select(z => $"tagId={z}"))+"&"+string.Join("&", artistId.Select(z => $"artistId={z}"))+"&childVoicebanks="+childVoicebanks+"&artistGrouping=" + artistGrouping+"&rating=" + rating+"&songListId="+songListId+"&groupByRating="+groupByRating+"&pvServices=" + pvServices+"&"+string.Join("&", advancedFilters.Select(z => $"advancedFilters={System.Uri.EscapeDataString(z.ToString())}"))+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&nameMatchMode=" + nameMatchMode+"&fields=" + fields+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_RatedSongForUserForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a specific user's rating for a song.
		/// ApiUsers_idRatedSongs_songIdGet api/users/{id}/ratedSongs/{songId}
		/// </summary>
		/// <param name="id">User whose rating is to be checked.</param>
		/// <param name="songId">ID of the song whose rating is to be checked.</param>
		/// <returns>OK</returns>
		public async Task<RatedSongForUserForApiContractRating> ApiUsers_idRatedSongs_songIdGetAsync(int id, int songId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/ratedSongs/"+songId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RatedSongForUserForApiContractRating>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiUsers_idReportsPost api/users/{id}/reports
		/// </summary>
		/// <returns>OK</returns>
		public async Task<bool> ApiUsers_idReportsPostAsync(int id, CreateReportModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/reports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<bool>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates user setting.
		/// ApiUsers_idSettings_settingNamePost api/users/{id}/settings/{settingName}
		/// </summary>
		/// <param name="id">ID of the user to be updated. This must match the current user OR be unspecified (or 0) if the user is not logged in.</param>
		/// <param name="settingName">Name of the setting to be updated, for example 'showChatBox'.</param>
		/// <param name="requestBody">Setting value, for example 'false'.</param>
		public async Task ApiUsers_idSettings_settingNamePostAsync(int id, string settingName, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/settings/"+ (settingName==null? "" : System.Uri.EscapeDataString(settingName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiUsers_idSongListsGetByQueryAndTagIdAndChildTagsAndNameMatchModeAndStartAndMaxResultsAndGetTotalCountAndSortAndFields api/users/{id}/songLists
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PartialFindResult_SongListForApiContract> ApiUsers_idSongListsGetByQueryAndTagIdAndChildTagsAndNameMatchModeAndStartAndMaxResultsAndGetTotalCountAndSortAndFieldsAsync(int id, string query, int[] tagId, bool childTags, ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode nameMatchMode, int start, int maxResults, bool getTotalCount, ApiSongListsFeaturedGetByQueryAndTagIdAndChildTagsAndNameMatchModeAndFeaturedCategoryAndStartAndMaxResultsAndGetTotalCountAndSortSort sort, ApiUsers_idSongListsGetByQueryAndTagIdAndChildTagsAndNameMatchModeAndStartAndMaxResultsAndGetTotalCountAndSortAndFieldsFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/songLists?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&"+string.Join("&", tagId.Select(z => $"tagId={z}"))+"&childTags="+childTags+"&nameMatchMode=" + nameMatchMode+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&fields=" + fields;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartialFindResult_SongListForApiContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ArchivedVersion = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Entry = 2,
	}
	
	public enum ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangEntryFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdditionalNames = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Description = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MainPicture = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Names = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PVs = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tags = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WebLinks = 7,
	}
	
	public enum ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangLang
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Japanese = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Romaji = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		English = 3,
	}
	
	public enum ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangArtistParticipationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Everything = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnlyMainAlbums = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnlyCollaborations = 2,
	}
	
	public enum ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReleaseDate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReleaseDateWithNulls = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdditionDate = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RatingAverage = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RatingTotal = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NameThenReleaseDate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CollectionCount = 8,
	}
	
	public enum ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangNameMatchMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Auto = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Partial = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartsWith = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Exact = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Words = 4,
	}
	
	public enum ApiAlbumsGetByQueryAndDiscTypesAndTagNameAndTagIdAndChildTagsAndArtistIdAndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdditionalNames = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Artists = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Description = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Discs = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Identifiers = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MainPicture = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Names = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PVs = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReleaseEvent = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tags = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tracks = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WebLinks = 12,
	}
	
	public enum ApiAlbums_idGetByFieldsAndSongFieldsAndLangSongFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdditionalNames = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Albums = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Artists = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lyrics = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MainPicture = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Names = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PVs = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReleaseEvent = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tags = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ThumbUrl = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WebLinks = 11,
	}
	
	public enum ApiArtistsGetByQueryAndArtistTypesAndAllowBaseVoicebanksAndTagNameAndTagIdAndChildTagsAndFollowedByUserIdAndStatusAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndNameMatchModeAndFieldsAndLangSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdditionDate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdditionDateAsc = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReleaseDate = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SongCount = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SongRating = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FollowerCount = 7,
	}
	
	public enum ApiArtistsGetByQueryAndArtistTypesAndAllowBaseVoicebanksAndTagNameAndTagIdAndChildTagsAndFollowedByUserIdAndStatusAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndNameMatchModeAndFieldsAndLangFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdditionalNames = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ArtistLinks = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ArtistLinksReverse = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseVoicebank = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Description = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MainPicture = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Names = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tags = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WebLinks = 9,
	}
	
	public enum ApiArtists_idGetByFieldsAndRelationsAndLangRelations
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LatestAlbums = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LatestEvents = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LatestSongs = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PopularAlbums = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PopularSongs = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 6,
	}
	
	public enum ApiDiscussionsFoldersGetByFieldsFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastTopic = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TopicCount = 2,
	}
	
	public enum ApiDiscussionsFolders_folderIdTopicsGetByFieldsFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Comments = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CommentCount = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Content = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastComment = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 5,
	}
	
	public enum ApiDiscussionsTopicsGetByFolderIdAndStartAndMaxResultsAndGetTotalCountAndSortAndFieldsSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DateCreated = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastCommentDate = 3,
	}
	
	public enum ApiEntriesGetByQueryAndTagNameAndTagIdAndChildTagsAndEntryTypesAndStatusAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangEntryTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Album = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Artist = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiscussionTopic = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PV = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReleaseEvent = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReleaseEventSeries = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Song = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SongList = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tag = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		User = 10,
	}
	
	public enum ApiEntriesGetByQueryAndTagNameAndTagIdAndChildTagsAndEntryTypesAndStatusAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdditionDate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityDate = 3,
	}
	
	public enum ApiReleaseEventsGetByQueryAndNameMatchModeAndSeriesIdAndAfterDateAndBeforeDateAndCategoryAndUserCollectionIdAndTagIdAndChildTagsAndArtistIdAndChildVoicebanksAndIncludeMembersAndStatusAndStartAndMaxResultsAndGetTotalCountAndSortAndFieldsAndLangSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Date = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdditionDate = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SeriesName = 4,
	}
	
	public enum ApiReleaseEventsGetByQueryAndNameMatchModeAndSeriesIdAndAfterDateAndBeforeDateAndCategoryAndUserCollectionIdAndTagIdAndChildTagsAndArtistIdAndChildVoicebanksAndIncludeMembersAndStatusAndStartAndMaxResultsAndGetTotalCountAndSortAndFieldsAndLangFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdditionalNames = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Artists = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Description = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MainPicture = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Names = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Series = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SongList = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WebLinks = 8,
	}
	
	public enum ApiReleaseEvents_eventIdReportsPostByReportTypeAndNotesAndVersionNumberReportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidInfo = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Duplicate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inappropriate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 3,
	}
	
	public enum ApiSongListsFeaturedGetByQueryAndTagIdAndChildTagsAndNameMatchModeAndFeaturedCategoryAndStartAndMaxResultsAndGetTotalCountAndSortSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Date = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateDate = 3,
	}
	
	public enum ApiSongLists_listIdSongsGetByQueryAndSongTypesAndPvServicesAndTagIdAndArtistIdAndChildVoicebanksAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdditionDate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PublishDate = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FavoritedTimes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RatingScore = 5,
	}
	
	public enum ApiSongsTop_ratedGetByDurationHoursAndStartDateAndFilterByAndVocalistAndMaxResultsAndFieldsAndLanguagePreferenceFilterBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateDate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PublishDate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Popularity = 2,
	}
	
	public enum ApiSongsTop_ratedGetByDurationHoursAndStartDateAndFilterByAndVocalistAndMaxResultsAndFieldsAndLanguagePreferenceVocalist
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vocaloid = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UTAU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CeVIO = 3,
	}
	
	public enum ApiSongs_idRatingsGetByUserFieldsAndLangUserFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KnownLanguages = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MainPicture = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OldUsernames = 3,
	}
	
	public enum ApiTagsGetByQueryAndAllowChildrenAndCategoryNameAndStartAndMaxResultsAndGetTotalCountAndNameMatchModeAndSortAndPreferAccurateMatchesAndFieldsAndLangAndTargetSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdditionDate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UsageCount = 3,
	}
	
	public enum ApiTagsGetByQueryAndAllowChildrenAndCategoryNameAndStartAndMaxResultsAndGetTotalCountAndNameMatchModeAndSortAndPreferAccurateMatchesAndFieldsAndLangAndTargetFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdditionalNames = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AliasedTo = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Description = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MainPicture = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Names = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Parent = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelatedTags = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TranslatedDescription = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WebLinks = 9,
	}
	
	public enum ApiTagsGetByQueryAndAllowChildrenAndCategoryNameAndStartAndMaxResultsAndGetTotalCountAndNameMatchModeAndSortAndPreferAccurateMatchesAndFieldsAndLangAndTargetTarget
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Album = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Artist = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlbumArtist = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Event = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Song = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlbumSong = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ArtistSong = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 8,
	}
	
	public enum ApiUsersGetByQueryAndGroupsAndJoinDateAfterAndJoinDateBeforeAndNameMatchModeAndStartAndMaxResultsAndGetTotalCountAndSortAndIncludeDisabledAndOnlyVerifiedAndKnowsLanguageAndFieldsSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RegisterDate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Group = 2,
	}
	
	public enum ApiUsers_idAlbumsGetByQueryAndTagIdAndTagAndArtistIdAndPurchaseStatusesAndReleaseEventIdAndAlbumTypesAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangPurchaseStatuses
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Wishlisted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ordered = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Owned = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 4,
	}
	
	public enum ApiUsers_idEventsGetByRelationshipTypeRelationshipType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Interested = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Attending = 1,
	}
	
	public enum ApiUsers_idRatedSongsGetByQueryAndTagNameAndTagIdAndArtistIdAndChildVoicebanksAndArtistGroupingAndRatingAndSongListIdAndGroupByRatingAndPvServicesAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangArtistGrouping
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		And = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Or = 1,
	}
	
	public enum ApiUsers_idRatedSongsGetByQueryAndTagNameAndTagIdAndArtistIdAndChildVoicebanksAndArtistGroupingAndRatingAndSongListIdAndGroupByRatingAndPvServicesAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdditionDate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PublishDate = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FavoritedTimes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RatingScore = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RatingDate = 6,
	}
	
	public enum ApiUsers_idSongListsGetByQueryAndTagIdAndChildTagsAndNameMatchModeAndStartAndMaxResultsAndGetTotalCountAndSortAndFieldsFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Description = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MainPicture = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
