//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The parameters used to add a new Data Lake Store account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AddDataLakeStoreParameters
	{
		
		/// <summary>
		/// The Data Lake Store account properties to use when adding a new Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AddDataLakeStoreProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The Data Lake Store account properties to use when adding a new Data Lake Store account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AddDataLakeStoreProperties
	{
		
		/// <summary>
		/// The optional suffix for the Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public string Suffix { get; set; }
	}
	
	/// <summary>
	/// The parameters used to add a new Data Lake Store account while creating a new Data Lake Analytics account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AddDataLakeStoreWithAccountParameters
	{
		
		/// <summary>
		/// The unique name of the Data Lake Store account to add.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The Data Lake Store account properties to use when adding a new Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AddDataLakeStoreProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The parameters used to add a new Azure Storage account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AddStorageAccountParameters
	{
		
		/// <summary>
		/// The Azure Storage account properties to use when adding a new Azure Storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AddStorageAccountProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The Azure Storage account properties to use when adding a new Azure Storage account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AddStorageAccountProperties
	{
		
		/// <summary>
		/// The access key associated with this Azure Storage account that will be used to connect to it.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessKey")]
		public string AccessKey { get; set; }
		
		/// <summary>
		/// The optional suffix for the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public string Suffix { get; set; }
	}
	
	/// <summary>
	/// The parameters used to add a new Azure Storage account while creating a new Data Lake Analytics account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AddStorageAccountWithAccountParameters
	{
		
		/// <summary>
		/// The unique name of the Azure Storage account to add.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The Azure Storage account properties to use when adding a new Azure Storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AddStorageAccountProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Subscription-level properties and limits for Data Lake Analytics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CapabilityInformation
	{
		
		/// <summary>
		/// The current number of accounts under this subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountCount")]
		public System.Nullable<System.Int32> AccountCount { get; set; }
		
		/// <summary>
		/// The maximum supported number of accounts under this subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAccountCount")]
		public System.Nullable<System.Int32> MaxAccountCount { get; set; }
		
		/// <summary>
		/// The Boolean value of true or false to indicate the maintenance state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="migrationState")]
		public System.Nullable<System.Boolean> MigrationState { get; set; }
		
		/// <summary>
		/// The subscription state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<CapabilityInformationState> State { get; set; }
		
		/// <summary>
		/// The subscription credentials that uniquely identifies the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CapabilityInformationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Registered = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unregistered = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Warned = 4,
	}
	
	/// <summary>
	/// Data Lake Analytics account name availability check parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityParameters
	{
		
		/// <summary>
		/// The Data Lake Analytics name to check availability for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource type. Note: This should not be set by the user, as the constant value is Microsoft.DataLakeAnalytics/accounts
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CheckNameAvailabilityParametersType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckNameAvailabilityParametersType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.DataLakeAnalytics/accounts")]
		Microsoft_DataLakeAnalytics_accounts = 0,
	}
	
	/// <summary>
	/// Data Lake Analytics compute policy information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputePolicy : SubResource
	{
		
		/// <summary>
		/// The compute policy properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ComputePolicyProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The list of compute policies in the account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputePolicyListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ComputePolicy[] Value { get; set; }
	}
	
	/// <summary>
	/// The compute policy properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputePolicyProperties
	{
		
		/// <summary>
		/// The maximum degree of parallelism per job this user can use to submit jobs.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDegreeOfParallelismPerJob")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxDegreeOfParallelismPerJob { get; set; }
		
		/// <summary>
		/// The minimum priority per job this user can use to submit jobs.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minPriorityPerJob")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MinPriorityPerJob { get; set; }
		
		/// <summary>
		/// The AAD object identifier for the entity to create a policy for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// The type of AAD object the object identifier refers to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectType")]
		public System.Nullable<ComputePolicyPropertiesObjectType> ObjectType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ComputePolicyPropertiesObjectType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		User = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServicePrincipal = 2,
	}
	
	/// <summary>
	/// The parameters used to create a new compute policy while creating a new Data Lake Analytics account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateComputePolicyWithAccountParameters
	{
		
		/// <summary>
		/// The unique name of the compute policy to create.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The compute policy properties to use when creating a new compute policy.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CreateOrUpdateComputePolicyProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The parameters to use for creating a Data Lake Analytics account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateDataLakeAnalyticsAccountParameters
	{
		
		/// <summary>
		/// The resource location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CreateDataLakeAnalyticsAccountProperties Properties { get; set; }
		
		/// <summary>
		/// The resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateDataLakeAnalyticsAccountProperties
	{
		
		/// <summary>
		/// The list of compute policies associated with this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computePolicies")]
		public CreateComputePolicyWithAccountParameters[] ComputePolicies { get; set; }
		
		/// <summary>
		/// The list of Data Lake Store accounts associated with this account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataLakeStoreAccounts")]
		public AddDataLakeStoreWithAccountParameters[] DataLakeStoreAccounts { get; set; }
		
		/// <summary>
		/// The default Data Lake Store account associated with this account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultDataLakeStoreAccount")]
		public string DefaultDataLakeStoreAccount { get; set; }
		
		/// <summary>
		/// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallAllowAzureIps")]
		public System.Nullable<CreateDataLakeAnalyticsAccountPropertiesFirewallAllowAzureIps> FirewallAllowAzureIps { get; set; }
		
		/// <summary>
		/// The list of firewall rules associated with this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallRules")]
		public CreateFirewallRuleWithAccountParameters[] FirewallRules { get; set; }
		
		/// <summary>
		/// The current state of the IP address firewall for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallState")]
		public CreateDataLakeAnalyticsAccountPropertiesFirewallAllowAzureIps FirewallState { get; set; }
		
		/// <summary>
		/// The maximum supported degree of parallelism for this account.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDegreeOfParallelism")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxDegreeOfParallelism { get; set; }
		
		/// <summary>
		/// The maximum supported degree of parallelism per job for this account.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDegreeOfParallelismPerJob")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxDegreeOfParallelismPerJob { get; set; }
		
		/// <summary>
		/// The maximum supported jobs running under the account at the same time.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxJobCount")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxJobCount { get; set; }
		
		/// <summary>
		/// The minimum supported priority per job for this account.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minPriorityPerJob")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MinPriorityPerJob { get; set; }
		
		/// <summary>
		/// The commitment tier for the next month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newTier")]
		public System.Nullable<CreateDataLakeAnalyticsAccountPropertiesNewTier> NewTier { get; set; }
		
		/// <summary>
		/// The number of days that job metadata is retained.
		/// Minimum: 1
		/// Maximum: 180
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryStoreRetention")]
		[System.ComponentModel.DataAnnotations.Range(1, 180)]
		public System.Nullable<System.Int32> QueryStoreRetention { get; set; }
		
		/// <summary>
		/// The list of Azure Blob Storage accounts associated with this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccounts")]
		public AddStorageAccountWithAccountParameters[] StorageAccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CreateDataLakeAnalyticsAccountPropertiesFirewallAllowAzureIps
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// The parameters used to create a new firewall rule while creating a new Data Lake Analytics account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateFirewallRuleWithAccountParameters
	{
		
		/// <summary>
		/// The unique name of the firewall rule to create.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The firewall rule properties to use when creating a new firewall rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CreateOrUpdateFirewallRuleProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CreateDataLakeAnalyticsAccountPropertiesNewTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Consumption = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commitment_100AUHours = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commitment_500AUHours = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commitment_1000AUHours = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commitment_5000AUHours = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commitment_10000AUHours = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commitment_50000AUHours = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commitment_100000AUHours = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commitment_500000AUHours = 8,
	}
	
	/// <summary>
	/// The parameters used to create a new compute policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateOrUpdateComputePolicyParameters
	{
		
		/// <summary>
		/// The compute policy properties to use when creating a new compute policy.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CreateOrUpdateComputePolicyProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The compute policy properties to use when creating a new compute policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateOrUpdateComputePolicyProperties
	{
		
		/// <summary>
		/// The maximum degree of parallelism per job this user can use to submit jobs. This property, the min priority per job property, or both must be passed.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDegreeOfParallelismPerJob")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxDegreeOfParallelismPerJob { get; set; }
		
		/// <summary>
		/// The minimum priority per job this user can use to submit jobs. This property, the max degree of parallelism per job property, or both must be passed.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minPriorityPerJob")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MinPriorityPerJob { get; set; }
		
		/// <summary>
		/// The AAD object identifier for the entity to create a policy for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// The type of AAD object the object identifier refers to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="objectType")]
		public ComputePolicyPropertiesObjectType ObjectType { get; set; }
	}
	
	/// <summary>
	/// The parameters used to create a new firewall rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateOrUpdateFirewallRuleParameters
	{
		
		/// <summary>
		/// The firewall rule properties to use when creating a new firewall rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CreateOrUpdateFirewallRuleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The firewall rule properties to use when creating a new firewall rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateOrUpdateFirewallRuleProperties
	{
		
		/// <summary>
		/// The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endIpAddress")]
		public string EndIpAddress { get; set; }
		
		/// <summary>
		/// The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startIpAddress")]
		public string StartIpAddress { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics account object, containing all information associated with the named Data Lake Analytics account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataLakeAnalyticsAccount : Resource
	{
		
		/// <summary>
		/// The account specific properties that are associated with an underlying Data Lake Analytics account. Returned only when retrieving a specific account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DataLakeAnalyticsAccountProperties Properties { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics account object, containing all information associated with the named Data Lake Analytics account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataLakeAnalyticsAccountBasic : Resource
	{
		
		/// <summary>
		/// The basic account specific properties that are associated with an underlying Data Lake Analytics account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DataLakeAnalyticsAccountPropertiesBasic Properties { get; set; }
	}
	
	/// <summary>
	/// Data Lake Analytics account list information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataLakeAnalyticsAccountListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DataLakeAnalyticsAccountBasic[] Value { get; set; }
	}
	
	/// <summary>
	/// The account specific properties that are associated with an underlying Data Lake Analytics account. Returned only when retrieving a specific account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataLakeAnalyticsAccountProperties : DataLakeAnalyticsAccountPropertiesBasic
	{
		
		/// <summary>
		/// The list of compute policies associated with this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computePolicies")]
		public ComputePolicy[] ComputePolicies { get; set; }
		
		/// <summary>
		/// The commitment tier in use for the current month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTier")]
		public CreateDataLakeAnalyticsAccountPropertiesNewTier CurrentTier { get; set; }
		
		/// <summary>
		/// The list of Data Lake Store accounts associated with this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataLakeStoreAccounts")]
		public DataLakeStoreAccountInformation[] DataLakeStoreAccounts { get; set; }
		
		/// <summary>
		/// The default Data Lake Store account associated with this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultDataLakeStoreAccount")]
		public string DefaultDataLakeStoreAccount { get; set; }
		
		/// <summary>
		/// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallAllowAzureIps")]
		public CreateDataLakeAnalyticsAccountPropertiesFirewallAllowAzureIps FirewallAllowAzureIps { get; set; }
		
		/// <summary>
		/// The list of firewall rules associated with this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallRules")]
		public FirewallRule[] FirewallRules { get; set; }
		
		/// <summary>
		/// The current state of the IP address firewall for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallState")]
		public CreateDataLakeAnalyticsAccountPropertiesFirewallAllowAzureIps FirewallState { get; set; }
		
		/// <summary>
		/// The maximum supported degree of parallelism for this account.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDegreeOfParallelism")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxDegreeOfParallelism { get; set; }
		
		/// <summary>
		/// The maximum supported degree of parallelism per job for this account.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDegreeOfParallelismPerJob")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxDegreeOfParallelismPerJob { get; set; }
		
		/// <summary>
		/// The maximum supported jobs running under the account at the same time.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxJobCount")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxJobCount { get; set; }
		
		/// <summary>
		/// The minimum supported priority per job for this account.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minPriorityPerJob")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MinPriorityPerJob { get; set; }
		
		/// <summary>
		/// The commitment tier for the next month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newTier")]
		public CreateDataLakeAnalyticsAccountPropertiesNewTier NewTier { get; set; }
		
		/// <summary>
		/// The number of days that job metadata is retained.
		/// Minimum: 1
		/// Maximum: 180
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryStoreRetention")]
		[System.ComponentModel.DataAnnotations.Range(1, 180)]
		public System.Nullable<System.Int32> QueryStoreRetention { get; set; }
		
		/// <summary>
		/// The list of Azure Blob Storage accounts associated with this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccounts")]
		public StorageAccountInformation[] StorageAccounts { get; set; }
		
		/// <summary>
		/// The system defined maximum supported degree of parallelism for this account, which restricts the maximum value of parallelism the user can set for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemMaxDegreeOfParallelism")]
		public System.Nullable<System.Int32> SystemMaxDegreeOfParallelism { get; set; }
		
		/// <summary>
		/// The system defined maximum supported jobs running under the account at the same time, which restricts the maximum number of running jobs the user can set for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemMaxJobCount")]
		public System.Nullable<System.Int32> SystemMaxJobCount { get; set; }
	}
	
	/// <summary>
	/// Data Lake Store account information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataLakeStoreAccountInformation : SubResource
	{
		
		/// <summary>
		/// The Data Lake Store account properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DataLakeStoreAccountInformationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Data Lake Analytics firewall rule information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FirewallRule : SubResource
	{
		
		/// <summary>
		/// The firewall rule properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public FirewallRuleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Azure Storage account information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccountInformation : SubResource
	{
		
		/// <summary>
		/// The Azure Storage account properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public StorageAccountInformationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The basic account specific properties that are associated with an underlying Data Lake Analytics account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataLakeAnalyticsAccountPropertiesBasic
	{
		
		/// <summary>
		/// The unique identifier associated with this Data Lake Analytics account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The account creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// The full CName endpoint for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// The account last modified time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		/// <summary>
		/// The provisioning status of the Data Lake Analytics account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<DataLakeAnalyticsAccountPropertiesBasicProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// The state of the Data Lake Analytics account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<DataLakeAnalyticsAccountPropertiesBasicState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataLakeAnalyticsAccountPropertiesBasicProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Patching = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspending = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Resuming = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Undeleting = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataLakeAnalyticsAccountPropertiesBasicState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 1,
	}
	
	/// <summary>
	/// Data Lake Store account list information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataLakeStoreAccountInformationListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DataLakeStoreAccountInformation[] Value { get; set; }
	}
	
	/// <summary>
	/// The Data Lake Store account properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataLakeStoreAccountInformationProperties
	{
		
		/// <summary>
		/// The optional suffix for the Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public string Suffix { get; set; }
	}
	
	/// <summary>
	/// Data Lake Analytics firewall rule list information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FirewallRuleListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public FirewallRule[] Value { get; set; }
	}
	
	/// <summary>
	/// The firewall rule properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FirewallRuleProperties
	{
		
		/// <summary>
		/// The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endIpAddress")]
		public string EndIpAddress { get; set; }
		
		/// <summary>
		/// The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIpAddress")]
		public string StartIpAddress { get; set; }
	}
	
	/// <summary>
	/// Data Lake Analytics account name availability result information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NameAvailabilityInformation
	{
		
		/// <summary>
		/// The message describing why the Data Lake Analytics account name is not available, if nameAvailable is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The Boolean value of true or false to indicate whether the Data Lake Analytics account name is available or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// The reason why the Data Lake Analytics account name is not available, if nameAvailable is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// An available operation for Data Lake Analytics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The display information for a particular operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplay Display { get; set; }
		
		/// <summary>
		/// The name of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The intended executor of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public System.Nullable<OperationOrigin> Origin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OperationOrigin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		system = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user,system")]
		usersystem = 2,
	}
	
	/// <summary>
	/// The display information for a particular operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDisplay
	{
		
		/// <summary>
		/// A friendly description of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A friendly name of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// The resource provider of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// The resource type of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// The list of available operations for Data Lake Analytics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// The resource model definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// The resource identifer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// SAS token information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SasTokenInformation
	{
		
		/// <summary>
		/// The access token for the associated Azure Storage Container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
	}
	
	/// <summary>
	/// The SAS response that contains the storage account, container and associated SAS token for connection use.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SasTokenInformationListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SasTokenInformation[] Value { get; set; }
	}
	
	/// <summary>
	/// Azure Storage account list information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccountInformationListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public StorageAccountInformation[] Value { get; set; }
	}
	
	/// <summary>
	/// The Azure Storage account properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccountInformationProperties
	{
		
		/// <summary>
		/// The optional suffix for the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public string Suffix { get; set; }
	}
	
	/// <summary>
	/// Azure Storage blob container information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageContainer : SubResource
	{
		
		/// <summary>
		/// Azure Storage blob container properties information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public StorageContainerProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The list of blob containers associated with the storage account attached to the Data Lake Analytics account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageContainerListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public StorageContainer[] Value { get; set; }
	}
	
	/// <summary>
	/// Azure Storage blob container properties information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageContainerProperties
	{
		
		/// <summary>
		/// The last modified time of the blob container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
	}
	
	/// <summary>
	/// The resource model definition for a nested resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubResource
	{
		
		/// <summary>
		/// The resource identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The parameters used to update a compute policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateComputePolicyParameters
	{
		
		/// <summary>
		/// The compute policy properties to use when updating a compute policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UpdateComputePolicyProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The compute policy properties to use when updating a compute policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateComputePolicyProperties
	{
		
		/// <summary>
		/// The maximum degree of parallelism per job this user can use to submit jobs. This property, the min priority per job property, or both must be passed.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDegreeOfParallelismPerJob")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxDegreeOfParallelismPerJob { get; set; }
		
		/// <summary>
		/// The minimum priority per job this user can use to submit jobs. This property, the max degree of parallelism per job property, or both must be passed.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minPriorityPerJob")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MinPriorityPerJob { get; set; }
		
		/// <summary>
		/// The AAD object identifier for the entity to create a policy for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// The type of AAD object the object identifier refers to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectType")]
		public ComputePolicyPropertiesObjectType ObjectType { get; set; }
	}
	
	/// <summary>
	/// The parameters used to update a compute policy while updating a Data Lake Analytics account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateComputePolicyWithAccountParameters
	{
		
		/// <summary>
		/// The unique name of the compute policy to update.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The compute policy properties to use when updating a compute policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UpdateComputePolicyProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The parameters that can be used to update an existing Data Lake Analytics account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateDataLakeAnalyticsAccountParameters
	{
		
		/// <summary>
		/// The properties to update that are associated with an underlying Data Lake Analytics account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UpdateDataLakeAnalyticsAccountProperties Properties { get; set; }
		
		/// <summary>
		/// The resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The properties to update that are associated with an underlying Data Lake Analytics account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateDataLakeAnalyticsAccountProperties
	{
		
		/// <summary>
		/// The list of compute policies associated with this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computePolicies")]
		public UpdateComputePolicyWithAccountParameters[] ComputePolicies { get; set; }
		
		/// <summary>
		/// The list of Data Lake Store accounts associated with this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataLakeStoreAccounts")]
		public UpdateDataLakeStoreWithAccountParameters[] DataLakeStoreAccounts { get; set; }
		
		/// <summary>
		/// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallAllowAzureIps")]
		public CreateDataLakeAnalyticsAccountPropertiesFirewallAllowAzureIps FirewallAllowAzureIps { get; set; }
		
		/// <summary>
		/// The list of firewall rules associated with this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallRules")]
		public UpdateFirewallRuleWithAccountParameters[] FirewallRules { get; set; }
		
		/// <summary>
		/// The current state of the IP address firewall for this account. Disabling the firewall does not remove existing rules, they will just be ignored until the firewall is re-enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallState")]
		public CreateDataLakeAnalyticsAccountPropertiesFirewallAllowAzureIps FirewallState { get; set; }
		
		/// <summary>
		/// The maximum supported degree of parallelism for this account.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDegreeOfParallelism")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxDegreeOfParallelism { get; set; }
		
		/// <summary>
		/// The maximum supported degree of parallelism per job for this account.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDegreeOfParallelismPerJob")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxDegreeOfParallelismPerJob { get; set; }
		
		/// <summary>
		/// The maximum supported jobs running under the account at the same time.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxJobCount")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxJobCount { get; set; }
		
		/// <summary>
		/// The minimum supported priority per job for this account.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minPriorityPerJob")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MinPriorityPerJob { get; set; }
		
		/// <summary>
		/// The commitment tier to use for next month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newTier")]
		public CreateDataLakeAnalyticsAccountPropertiesNewTier NewTier { get; set; }
		
		/// <summary>
		/// The number of days that job metadata is retained.
		/// Minimum: 1
		/// Maximum: 180
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryStoreRetention")]
		[System.ComponentModel.DataAnnotations.Range(1, 180)]
		public System.Nullable<System.Int32> QueryStoreRetention { get; set; }
		
		/// <summary>
		/// The list of Azure Blob storage accounts associated with this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccounts")]
		public UpdateStorageAccountWithAccountParameters[] StorageAccounts { get; set; }
	}
	
	/// <summary>
	/// The parameters used to update a Data Lake Store account while updating a Data Lake Analytics account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateDataLakeStoreWithAccountParameters
	{
		
		/// <summary>
		/// The unique name of the Data Lake Store account to update.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The Data Lake Store account properties to use when updating a Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UpdateDataLakeStoreProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The parameters used to update a firewall rule while updating a Data Lake Analytics account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateFirewallRuleWithAccountParameters
	{
		
		/// <summary>
		/// The unique name of the firewall rule to update.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The firewall rule properties to use when updating a firewall rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UpdateFirewallRuleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The parameters used to update an Azure Storage account while updating a Data Lake Analytics account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateStorageAccountWithAccountParameters
	{
		
		/// <summary>
		/// The unique name of the Azure Storage account to update.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The Azure Storage account properties to use when updating an Azure Storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UpdateStorageAccountProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The Data Lake Store account properties to use when updating a Data Lake Store account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateDataLakeStoreProperties
	{
		
		/// <summary>
		/// The optional suffix for the Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public string Suffix { get; set; }
	}
	
	/// <summary>
	/// The parameters used to update a firewall rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateFirewallRuleParameters
	{
		
		/// <summary>
		/// The firewall rule properties to use when updating a firewall rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UpdateFirewallRuleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The firewall rule properties to use when updating a firewall rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateFirewallRuleProperties
	{
		
		/// <summary>
		/// The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endIpAddress")]
		public string EndIpAddress { get; set; }
		
		/// <summary>
		/// The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIpAddress")]
		public string StartIpAddress { get; set; }
	}
	
	/// <summary>
	/// The parameters used to update an Azure Storage account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateStorageAccountParameters
	{
		
		/// <summary>
		/// The Azure Storage account properties to use when updating an Azure Storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UpdateStorageAccountProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The Azure Storage account properties to use when updating an Azure Storage account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateStorageAccountProperties
	{
		
		/// <summary>
		/// The updated access key associated with this Azure Storage account that will be used to connect to it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessKey")]
		public string AccessKey { get; set; }
		
		/// <summary>
		/// The optional suffix for the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public string Suffix { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available Data Lake Analytics REST API operations.
		/// Operations_List providers/Microsoft.DataLakeAnalytics/operations
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully listed the available operations for Data Lake Analytics.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.DataLakeAnalytics/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the first page of Data Lake Analytics accounts, if any, within the current subscription. This includes a link to the next page, if any.
		/// Accounts_List subscriptions/{subscriptionId}/providers/Microsoft.DataLakeAnalytics/accounts
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of Azure Data Lake Analytics accounts.</returns>
		public async Task<DataLakeAnalyticsAccountListResult> Accounts_ListAsync(string subscriptionId, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DataLakeAnalytics/accounts&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataLakeAnalyticsAccountListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets subscription-level properties and limits for Data Lake Analytics specified by resource location.
		/// Locations_GetCapability subscriptions/{subscriptionId}/providers/Microsoft.DataLakeAnalytics/locations/{location}/capability
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="location">The resource location without whitespace.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the subscription-level properties and limits for Data Lake Analytics specified by resource location.</returns>
		public async Task<CapabilityInformation> Locations_GetCapabilityAsync(string subscriptionId, string location, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DataLakeAnalytics/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/capability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CapabilityInformation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks whether the specified account name is available or taken.
		/// Accounts_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.DataLakeAnalytics/locations/{location}/checkNameAvailability
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="location">The resource location without whitespace.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to check the Data Lake Analytics account name availability.</param>
		/// <returns>Successfully retrieved the Data Lake Analytics account name availability information.</returns>
		public async Task<NameAvailabilityInformation> Accounts_CheckNameAvailabilityAsync(string subscriptionId, string location, string api_version, CheckNameAvailabilityParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DataLakeAnalytics/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/checkNameAvailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NameAvailabilityInformation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the first page of Data Lake Analytics accounts, if any, within a specific resource group. This includes a link to the next page, if any.
		/// Accounts_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of accounts in the specified resource group.</returns>
		public async Task<DataLakeAnalyticsAccountListResult> Accounts_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataLakeAnalyticsAccountListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details of the specified Data Lake Analytics account.
		/// Accounts_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the details of the specified account.</returns>
		public async Task<DataLakeAnalyticsAccount> Accounts_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataLakeAnalyticsAccount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates the specified Data Lake Analytics account. This supplies the user with computation services for Data Lake Analytics workloads.
		/// Accounts_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to create a new Data Lake Analytics account.</param>
		/// <returns>Successfully created the specified account.</returns>
		public async Task<DataLakeAnalyticsAccount> Accounts_CreateAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, CreateDataLakeAnalyticsAccountParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataLakeAnalyticsAccount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Begins the delete process for the Data Lake Analytics account object specified by the account name.
		/// Accounts_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully deleted the specified account.</returns>
		public async Task Accounts_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the Data Lake Analytics account object specified by the accountName with the contents of the account object.
		/// Accounts_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the update Data Lake Analytics account operation.</param>
		/// <returns>Successfully updated the specified account.</returns>
		public async Task<DataLakeAnalyticsAccount> Accounts_UpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, UpdateDataLakeAnalyticsAccountParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataLakeAnalyticsAccount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the Data Lake Analytics compute policies within the specified Data Lake Analytics account. An account supports, at most, 50 policies
		/// ComputePolicies_ListByAccount subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/computePolicies
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully listed the compute policies.</returns>
		public async Task<ComputePolicyListResult> ComputePolicies_ListByAccountAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/computePolicies&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ComputePolicyListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified Data Lake Analytics compute policy.
		/// ComputePolicies_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/computePolicies/{computePolicyName}
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="computePolicyName">The name of the compute policy to retrieve.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the specified compute policy.</returns>
		public async Task<ComputePolicy> ComputePolicies_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string computePolicyName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/computePolicies/"+ (computePolicyName==null? "" : System.Uri.EscapeDataString(computePolicyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ComputePolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the specified compute policy. During update, the compute policy with the specified name will be replaced with this new compute policy. An account supports, at most, 50 policies
		/// ComputePolicies_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/computePolicies/{computePolicyName}
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="computePolicyName">The name of the compute policy to create or update.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to create or update the compute policy. The max degree of parallelism per job property, min priority per job property, or both must be present.</param>
		/// <returns>Successfully created or updated the specified compute policy</returns>
		public async Task<ComputePolicy> ComputePolicies_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string computePolicyName, string api_version, CreateOrUpdateComputePolicyParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/computePolicies/"+ (computePolicyName==null? "" : System.Uri.EscapeDataString(computePolicyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ComputePolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified compute policy from the specified Data Lake Analytics account
		/// ComputePolicies_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/computePolicies/{computePolicyName}
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="computePolicyName">The name of the compute policy to delete.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully deleted the specified compute policy</returns>
		public async Task ComputePolicies_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string computePolicyName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/computePolicies/"+ (computePolicyName==null? "" : System.Uri.EscapeDataString(computePolicyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified compute policy.
		/// ComputePolicies_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/computePolicies/{computePolicyName}
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="computePolicyName">The name of the compute policy to update.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to update the compute policy.</param>
		/// <returns>Successfully updated the specified compute policy</returns>
		public async Task<ComputePolicy> ComputePolicies_UpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string computePolicyName, string api_version, UpdateComputePolicyParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/computePolicies/"+ (computePolicyName==null? "" : System.Uri.EscapeDataString(computePolicyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ComputePolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the first page of Data Lake Store accounts linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.
		/// DataLakeStoreAccounts_ListByAccount subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/dataLakeStoreAccounts
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of Data Lake Store accounts.</returns>
		public async Task<DataLakeStoreAccountInformationListResult> DataLakeStoreAccounts_ListByAccountAsync(string subscriptionId, string resourceGroupName, string accountName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/dataLakeStoreAccounts&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataLakeStoreAccountInformationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified Data Lake Store account details in the specified Data Lake Analytics account.
		/// DataLakeStoreAccounts_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/dataLakeStoreAccounts/{dataLakeStoreAccountName}
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="dataLakeStoreAccountName">The name of the Data Lake Store account to retrieve</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the specified Azure Data Lake Store account information.</returns>
		public async Task<DataLakeStoreAccountInformation> DataLakeStoreAccounts_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string dataLakeStoreAccountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/dataLakeStoreAccounts/"+ (dataLakeStoreAccountName==null? "" : System.Uri.EscapeDataString(dataLakeStoreAccountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataLakeStoreAccountInformation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified Data Lake Analytics account to include the additional Data Lake Store account.
		/// DataLakeStoreAccounts_Add subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/dataLakeStoreAccounts/{dataLakeStoreAccountName}
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="dataLakeStoreAccountName">The name of the Data Lake Store account to add.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The details of the Data Lake Store account.</param>
		/// <returns>Successfully added the specified Azure Data Lake Store account information.</returns>
		public async Task DataLakeStoreAccounts_AddAsync(string subscriptionId, string resourceGroupName, string accountName, string dataLakeStoreAccountName, string api_version, AddDataLakeStoreParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/dataLakeStoreAccounts/"+ (dataLakeStoreAccountName==null? "" : System.Uri.EscapeDataString(dataLakeStoreAccountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the Data Lake Analytics account specified to remove the specified Data Lake Store account.
		/// DataLakeStoreAccounts_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/dataLakeStoreAccounts/{dataLakeStoreAccountName}
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="dataLakeStoreAccountName">The name of the Data Lake Store account to remove</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully removed the specified Azure Data Lake Store account information from the specified Azure Data Lake Analytics account.</returns>
		public async Task DataLakeStoreAccounts_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string dataLakeStoreAccountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/dataLakeStoreAccounts/"+ (dataLakeStoreAccountName==null? "" : System.Uri.EscapeDataString(dataLakeStoreAccountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the Data Lake Analytics firewall rules within the specified Data Lake Analytics account.
		/// FirewallRules_ListByAccount subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/firewallRules
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully listed the firewall rules.</returns>
		public async Task<FirewallRuleListResult> FirewallRules_ListByAccountAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/firewallRules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FirewallRuleListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified Data Lake Analytics firewall rule.
		/// FirewallRules_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/firewallRules/{firewallRuleName}
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="firewallRuleName">The name of the firewall rule to retrieve.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the specified firewall rule.</returns>
		public async Task<FirewallRule> FirewallRules_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string firewallRuleName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/firewallRules/"+ (firewallRuleName==null? "" : System.Uri.EscapeDataString(firewallRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FirewallRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the specified firewall rule. During update, the firewall rule with the specified name will be replaced with this new firewall rule.
		/// FirewallRules_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/firewallRules/{firewallRuleName}
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="firewallRuleName">The name of the firewall rule to create or update.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to create or update the firewall rule.</param>
		/// <returns>Successfully created or updated the specified firewall rule</returns>
		public async Task<FirewallRule> FirewallRules_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string firewallRuleName, string api_version, CreateOrUpdateFirewallRuleParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/firewallRules/"+ (firewallRuleName==null? "" : System.Uri.EscapeDataString(firewallRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FirewallRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified firewall rule from the specified Data Lake Analytics account
		/// FirewallRules_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/firewallRules/{firewallRuleName}
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="firewallRuleName">The name of the firewall rule to delete.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully deleted the specified firewall rule</returns>
		public async Task FirewallRules_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string firewallRuleName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/firewallRules/"+ (firewallRuleName==null? "" : System.Uri.EscapeDataString(firewallRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified firewall rule.
		/// FirewallRules_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/firewallRules/{firewallRuleName}
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="firewallRuleName">The name of the firewall rule to update.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to update the firewall rule.</param>
		/// <returns>Successfully updated the specified firewall rule</returns>
		public async Task<FirewallRule> FirewallRules_UpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string firewallRuleName, string api_version, UpdateFirewallRuleParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/firewallRules/"+ (firewallRuleName==null? "" : System.Uri.EscapeDataString(firewallRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FirewallRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the first page of Azure Storage accounts, if any, linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.
		/// StorageAccounts_ListByAccount subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="filter">The OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of Azure Storage accounts.</returns>
		public async Task<StorageAccountInformationListResult> StorageAccounts_ListByAccountAsync(string subscriptionId, string resourceGroupName, string accountName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/storageAccounts&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StorageAccountInformationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified Azure Storage account linked to the given Data Lake Analytics account.
		/// StorageAccounts_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="storageAccountName">The name of the Azure Storage account for which to retrieve the details.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the specified Azure Storage account information.</returns>
		public async Task<StorageAccountInformation> StorageAccounts_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string storageAccountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/storageAccounts/"+ (storageAccountName==null? "" : System.Uri.EscapeDataString(storageAccountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StorageAccountInformation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified Data Lake Analytics account to add an Azure Storage account.
		/// StorageAccounts_Add subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="storageAccountName">The name of the Azure Storage account to add</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The parameters containing the access key and optional suffix for the Azure Storage Account.</param>
		/// <returns>Successfully added the specified Azure Storage account information to the specified Azure Data Lake Analytics account.</returns>
		public async Task StorageAccounts_AddAsync(string subscriptionId, string resourceGroupName, string accountName, string storageAccountName, string api_version, AddStorageAccountParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/storageAccounts/"+ (storageAccountName==null? "" : System.Uri.EscapeDataString(storageAccountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified Data Lake Analytics account to remove an Azure Storage account.
		/// StorageAccounts_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="storageAccountName">The name of the Azure Storage account to remove</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully deleted the specified Azure Storage account information from the Azure Data Lake Analytics account.</returns>
		public async Task StorageAccounts_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string storageAccountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/storageAccounts/"+ (storageAccountName==null? "" : System.Uri.EscapeDataString(storageAccountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the Data Lake Analytics account to replace Azure Storage blob account details, such as the access key and/or suffix.
		/// StorageAccounts_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="storageAccountName">The Azure Storage account to modify</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The parameters containing the access key and suffix to update the storage account with, if any. Passing nothing results in no change.</param>
		/// <returns>Successfully update the specified Azure Storage account information for the specified Azure Data Lake Analytics account.</returns>
		public async Task StorageAccounts_UpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string storageAccountName, string api_version, UpdateStorageAccountParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/storageAccounts/"+ (storageAccountName==null? "" : System.Uri.EscapeDataString(storageAccountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the Azure Storage containers, if any, associated with the specified Data Lake Analytics and Azure Storage account combination. The response includes a link to the next page of results, if any.
		/// StorageAccounts_ListStorageContainers subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}/containers
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="storageAccountName">The name of the Azure storage account from which to list blob containers.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of Azure Storage containers under the specified Azure Data Lake Analytics account.</returns>
		public async Task<StorageContainerListResult> StorageAccounts_ListStorageContainersAsync(string subscriptionId, string resourceGroupName, string accountName, string storageAccountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/storageAccounts/"+ (storageAccountName==null? "" : System.Uri.EscapeDataString(storageAccountName))+"/containers&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StorageContainerListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified Azure Storage container associated with the given Data Lake Analytics and Azure Storage accounts.
		/// StorageAccounts_GetStorageContainer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}/containers/{containerName}
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="storageAccountName">The name of the Azure storage account from which to retrieve the blob container.</param>
		/// <param name="containerName">The name of the Azure storage container to retrieve</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the specified Azure Storage container information.</returns>
		public async Task<StorageContainer> StorageAccounts_GetStorageContainerAsync(string subscriptionId, string resourceGroupName, string accountName, string storageAccountName, string containerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/storageAccounts/"+ (storageAccountName==null? "" : System.Uri.EscapeDataString(storageAccountName))+"/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StorageContainer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the SAS token associated with the specified Data Lake Analytics and Azure Storage account and container combination.
		/// StorageAccounts_ListSasTokens subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}/containers/{containerName}/listSasTokens
		/// </summary>
		/// <param name="subscriptionId">Get subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Analytics account.</param>
		/// <param name="storageAccountName">The name of the Azure storage account for which the SAS token is being requested.</param>
		/// <param name="containerName">The name of the Azure storage container for which the SAS token is being requested.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of Storage Account SAS tokens for the specified Azure Storage account container.</returns>
		public async Task<SasTokenInformationListResult> StorageAccounts_ListSasTokensAsync(string subscriptionId, string resourceGroupName, string accountName, string storageAccountName, string containerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeAnalytics/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/storageAccounts/"+ (storageAccountName==null? "" : System.Uri.EscapeDataString(storageAccountName))+"/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/listSasTokens&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SasTokenInformationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
