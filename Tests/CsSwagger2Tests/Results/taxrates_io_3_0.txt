//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Address
	{
		
		/// <summary>
		/// Apartment number if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apartment_number")]
		public string Apartment_number { get; set; }
		
		/// <summary>
		/// City name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Country name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// City zip code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		public string Postal_code { get; set; }
		
		/// <summary>
		/// Province or state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
		
		/// <summary>
		/// Street number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street_number")]
		public string Street_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Error
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Location
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Country name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rates")]
		public TaxRate[] Rates { get; set; }
		
		/// <summary>
		/// State/province name if exists
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Zipcode
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaxRate
	{
		
		/// <summary>
		/// The tax name and description (VAT, GST, PIT, CIT etc)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data_name")]
		public string Data_name { get; set; }
		
		/// <summary>
		/// The tax value in percents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data_value")]
		public string Data_value { get; set; }
		
		/// <summary>
		/// The tax type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Rates
	{
		
		/// <summary>
		/// The country name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_name")]
		public string Country_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxes")]
		public Tax[] Taxes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Tax
	{
		
		/// <summary>
		/// The country name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		/// <summary>
		/// The tax type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		/// <summary>
		/// The tax name and description (VAT, GST, PIT, CIT etc)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data_name")]
		public string Data_name { get; set; }
		
		/// <summary>
		/// The tax value in percents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data_value")]
		public string Data_value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get tax rates by address
		/// This endpoint returns tax rates for the country based on the address provided <pre><code class="js">var taxrates_endpoint = 'tax/address';
		/// var taxrates_params = '?domain=api.taxrates.io';
		/// var taxrates_url = '/api/v1/';
		/// var taxrates_body = '{
		/// "street":"MyStreetName",
		/// "street_number":"107",
		/// "apartment_number":"d34",
		/// "city":"Dublin",
		/// "zip":"84534"
		/// "state":"",
		/// "country":"Ireland"
		/// }';
		/// if ( localStorage.getItem("Taxrates_API_Client_Secret") ){
		/// jQuery.support.cors = true;
		/// jQuery.ajax({
		/// url: taxrates_url+taxrates_endpoint+taxrates_params,
		/// type: 'post',
		/// method: 'post',
		/// dataType: "json",
		/// data: taxrates_body,
		/// beforeSend: function (request) {
		/// request.withCredentials = true;
		/// request.setRequestHeader("Authorization", "Apikey " + localStorage.getItem("Taxrates_API_Client_Secret"));
		/// },
		/// headers: {
		/// "accept": "application/json"
		/// },
		/// contentType: 'application/json; charset=utf-8',
		/// success: function (data) {
		/// //Maintain errors inside success because the API may return 200 in general, but different code inside
		/// if(data.ErrorCode=='404' || data.ErrorCode=='500'){
		/// //Maintain errors here
		/// console.log(data.ErrorMessage);
		/// return false;
		/// }else{
		/// var rates = [];
		/// var i=0;
		/// jQuery.each(data.Rates, function(k, v) {
		/// if(v.hasOwnProperty("taxes")){
		/// jQuery.each(v.taxes, function(m, w) {
		/// rates[i] = [];
		/// //Only showing standard rate type
		/// if( w.Type == "standard" ){
		/// rates[i][0] = w.Country;
		/// rates[i][1] = w.Type;
		/// rates[i][2] = w.data_value;
		/// i++;
		/// }
		/// });
		/// }
		/// //Now you have all your rates inside rates variable.
		/// }).fail(function(xhr) {
		/// //Maintain your errors here
		/// return false;
		/// });
		/// return true;
		/// }else{
		/// //Not logged into taxrates.io
		/// //Maintain your errors here
		/// return false;
		/// }</code></pre>
		/// 
		/// Tax_servicePostByDomainAndFilter v1/tax/byaddress
		/// </summary>
		/// <param name="domain">Domain name: api.taxrates.io</param>
		/// <param name="filter">You can filter your taxes by one of following types: 'standard', 'reduced', 'second reduced', 'third reduced' and 'super reduced'.</param>
		/// <param name="requestBody">Address</param>
		/// <returns>Success</returns>
		public async Task<Rates> Tax_servicePostByDomainAndFilterAsync(string domain, string filter, Address requestBody)
		{
			var requestUri = "v1/tax/byaddress?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Rates>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns tax rate for selected country
		/// This endpoint returns all available tax rates for selected country <pre><code class="js">var taxrates_endpoint = 'tax/countrycode';
		/// var taxrates_params = {'domain':'api.taxrates.io', 'country_code':'IE'};
		/// var taxrates_url = '/api/v1/';
		/// if ( localStorage.getItem("Taxrates_API_Client_Secret") ){
		/// jQuery.support.cors = true;
		/// jQuery.ajax({
		/// url: taxrates_url+taxrates_endpoint,
		/// type: 'get',
		/// method: 'get',
		/// dataType: "json",
		/// data: taxrates_params,
		/// beforeSend: function (request) {
		/// request.withCredentials = true;
		/// request.setRequestHeader("Authorization", "Apikey " + localStorage.getItem("Taxrates_API_Client_Secret"));
		/// },
		/// headers: {
		/// "accept": "application/json"
		/// },
		/// contentType: 'application/json; charset=utf-8',
		/// success: function (data) {
		/// //Maintain errors inside success because the API may return 200 in general, but different code inside
		/// if(data.ErrorCode=='404' || data.ErrorCode=='500'){
		/// //Maintain errors here
		/// console.log(data.ErrorMessage);
		/// return false;
		/// }else{
		/// var rates = [];
		/// var i=0;
		/// jQuery.each(data.Rates, function(k, v) {
		/// if(v.hasOwnProperty("taxes")){
		/// jQuery.each(v.taxes, function(m, w) {
		/// rates[i] = [];
		/// //Only showing standard rate type
		/// if( w.Type == "standard" ){
		/// rates[i][0] = w.Country;
		/// rates[i][1] = w.Type;
		/// rates[i][2] = w.data_value;
		/// i++;
		/// }
		/// });
		/// }
		/// //Now you have all your rates inside rates variable.
		/// }).fail(function(xhr) {
		/// //Maintain your errors here
		/// return false;
		/// });
		/// return true;
		/// }else{
		/// //Not logged into taxrates.io
		/// //Maintain your errors here
		/// return false;
		/// }</code></pre>
		/// 
		/// Tax_serviceGetByDomainAndCountry_codeAndFilterAndZip v1/tax/countrycode
		/// </summary>
		/// <param name="domain">Domain name: api.taxrates.io</param>
		/// <param name="country_code">Country code alpha 2</param>
		/// <param name="filter">You can filter your taxes by one of following types: 'standard', 'reduced', 'second reduced', 'third reduced' and 'super reduced'.</param>
		/// <param name="zip">You must provide a zip code if one of your selected countries is United States and you've had selected a state on your Taxrates.io member's dashboard.</param>
		/// <returns>Success</returns>
		public async Task<Rates> Tax_serviceGetByDomainAndCountry_codeAndFilterAndZipAsync(string domain, string country_code, string filter, string zip)
		{
			var requestUri = "v1/tax/countrycode?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&country_code=" + (country_code==null? "" : System.Uri.EscapeDataString(country_code))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&zip=" + (zip==null? "" : System.Uri.EscapeDataString(zip));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Rates>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tax rates by geolocation based on Customer IP address
		/// This endpoint will return tax rates for country discovered based on Customer's IP address <pre><code class="js">var taxrates_endpoint = 'tax/ip';
		/// var taxrates_params = {'domain':'api.taxrates.io', 'ip':'208.80.152.201'};
		/// var taxrates_url = '/api/v1/';
		/// if ( localStorage.getItem("Taxrates_API_Client_Secret") ){
		/// jQuery.support.cors = true;
		/// jQuery.ajax({
		/// url: taxrates_url+taxrates_endpoint,
		/// type: 'get',
		/// method: 'get',
		/// dataType: "json",
		/// data: taxrates_params,
		/// beforeSend: function (request) {
		/// request.withCredentials = true;
		/// request.setRequestHeader("Authorization", "Apikey " + localStorage.getItem("Taxrates_API_Client_Secret"));
		/// },
		/// headers: {
		/// "accept": "application/json"
		/// },
		/// contentType: 'application/json; charset=utf-8',
		/// success: function (data) {
		/// //Maintain errors inside success because the API may return 200 in general, but different code inside
		/// if(data.ErrorCode=='404' || data.ErrorCode=='500'){
		/// //Maintain errors here
		/// console.log(data.ErrorMessage);
		/// return false;
		/// }else{
		/// var rates = [];
		/// var i=0;
		/// jQuery.each(data.Rates, function(k, v) {
		/// if(v.hasOwnProperty("taxes")){
		/// jQuery.each(v.taxes, function(m, w) {
		/// rates[i] = [];
		/// //Only showing standard rate type
		/// if( w.Type == "standard" ){
		/// rates[i][0] = w.Country;
		/// rates[i][1] = w.Type;
		/// rates[i][2] = w.data_value;
		/// i++;
		/// }
		/// });
		/// }
		/// //Now you have all your rates inside rates variable.
		/// }).fail(function(xhr) {
		/// //Maintain your errors here
		/// return false;
		/// });
		/// return true;
		/// }else{
		/// //Not logged into taxrates.io
		/// //Maintain your errors here
		/// return false;
		/// }</code></pre>
		/// 
		/// Tax_serviceGetByDomainAndIpAndFilterAndZip v1/tax/ip
		/// </summary>
		/// <param name="domain">Domain name: api.taxrates.io</param>
		/// <param name="ip">Customer's IP address</param>
		/// <param name="filter">You can filter your taxes by one of following types: 'standard', 'reduced', 'second reduced', 'third reduced' and 'super reduced'.</param>
		/// <param name="zip">You must provide a zip code if one of your selected countries is United States and you've had selected a state on your Taxrates.io member's dashboard.</param>
		/// <returns>An array of tax rates for VAT, GST & TAX</returns>
		public async Task<Rates[]> Tax_serviceGetByDomainAndIpAndFilterAndZipAsync(string domain, string ip, string filter, string zip)
		{
			var requestUri = "v1/tax/ip?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&ip=" + (ip==null? "" : System.Uri.EscapeDataString(ip))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&zip=" + (zip==null? "" : System.Uri.EscapeDataString(zip));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Rates[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all tax rates
		/// This method returns all tax rates configured on Member's account using cursor. Use X-Cursor-Next header to recursively read all rates. Max limit is 500 records per request. <pre><code class="js">
		/// var taxrates_endpoint = 'tax/rates';
		/// var taxrates_params = {'domain':'api.taxrates.io'};
		/// var taxrates_url = '/api/v3/';
		/// if ( localStorage.getItem("Taxrates_API_Client_Secret") ){
		/// jQuery.support.cors = true;
		/// jQuery.ajax({
		/// url: taxrates_url+taxrates_endpoint,
		/// type: 'get',
		/// method: 'get',
		/// dataType: "json",
		/// data: taxrates_params,
		/// beforeSend: function (request) {
		/// request.withCredentials = true;
		/// request.setRequestHeader("Authorization", "Apikey " + localStorage.getItem("Taxrates_API_Client_Secret"));
		/// },
		/// headers: {
		/// "accept": "application/json"
		/// },
		/// contentType: 'application/json; charset=utf-8',
		/// success: function (data) {
		/// //Maintain errors inside success because the API may return 200 in general, but different code inside
		/// if(data.ErrorCode=='404' || data.ErrorCode=='500'){
		/// //Maintain errors here
		/// console.log(data.ErrorMessage);
		/// return false;
		/// }else{
		/// var rates = [];
		/// var i=0;
		/// var taxrates_range = '';
		/// jQuery.each(data, function(k, v) {
		/// if(v.hasOwnProperty("rates")){
		/// jQuery.each(v.rates, function(m, w) {
		/// rates[i] = [];
		/// //Only showing standard rate type
		/// if( w.Type == "standard" ){
		/// rates[i][0] = w.Type;
		/// rates[i][1] = w.data_value;
		/// i++;
		/// }
		/// });
		/// }
		/// //Now you have all your rates inside rates variable.
		/// }).fail(function(xhr) {
		/// //Maintain your errors here
		/// return false;
		/// });
		/// return true;
		/// }else{
		/// //Not logged into taxrates.io
		/// //Maintain your errors here
		/// return false;
		/// }</code></pre>
		/// 
		/// Tax_serviceGetByDomainAndFilterAndCursor v3/tax/rates
		/// </summary>
		/// <param name="domain">Domain name: api.taxrates.io</param>
		/// <param name="filter">You can filter your taxes by one of following types: 'standard', 'reduced', 'second reduced', 'third reduced' and 'super reduced'.</param>
		/// <param name="cursor">Cursor shows from which record you want to get information. Default value is 0, next value can be retrieved from X-Cursor-Next header.</param>
		/// <returns>An array of locations with tax rates</returns>
		public async Task<Location[]> Tax_serviceGetByDomainAndFilterAndCursorAsync(string domain, string filter, string cursor)
		{
			var requestUri = "v3/tax/rates?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Location[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
