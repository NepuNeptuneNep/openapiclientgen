//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents a blueprint assignment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Assignment
	{
		
		/// <summary>
		/// Managed identity generic object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public ManagedServiceIdentity Identity { get; set; }
		
		/// <summary>
		/// Detailed properties for a blueprint assignment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AssignmentProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Managed identity generic object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedServiceIdentity
	{
		
		/// <summary>
		/// Azure Active Directory principal ID associated with this Identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// ID of the Azure Active Directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Type of the managed identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ManagedServiceIdentityType Type { get; set; }
		
		/// <summary>
		/// The list of user-assigned managed identities associated with the resource. Key is the Azure resource Id of the managed identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, UserAssignedIdentity> UserAssignedIdentities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ManagedServiceIdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemAssigned = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserAssigned = 2,
	}
	
	/// <summary>
	/// User-assigned managed identity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserAssignedIdentity
	{
		
		/// <summary>
		/// Client App Id associated with this identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Azure Active Directory principal ID associated with this Identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	/// <summary>
	/// Detailed properties for a blueprint assignment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AssignmentProperties
	{
		
		/// <summary>
		/// ID of the published version of a blueprint definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blueprintId")]
		public string BlueprintId { get; set; }
		
		/// <summary>
		/// Defines how resources deployed by a blueprint assignment are locked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locks")]
		public AssignmentLockSettings Locks { get; set; }
		
		/// <summary>
		/// A dictionary for parameters and their corresponding values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ParameterValueCollection Parameters { get; set; }
		
		/// <summary>
		/// State of the blueprint assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<AssignmentPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// A dictionary which maps resource group placeholders to the resource groups which will be created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceGroups")]
		public ResourceGroupValueCollection ResourceGroups { get; set; }
		
		/// <summary>
		/// The status of a blueprint assignment. This field is readonly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AssignmentStatus Status { get; set; }
	}
	
	/// <summary>
	/// Defines how resources deployed by a blueprint assignment are locked.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AssignmentLockSettings
	{
		
		/// <summary>
		/// List of AAD principals excluded from blueprint locks. Up to 5 principals are permitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedPrincipals")]
		public string[] ExcludedPrincipals { get; set; }
		
		/// <summary>
		/// Lock mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<AssignmentLockSettingsMode> Mode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssignmentLockSettingsMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllResourcesReadOnly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllResourcesDoNotDelete = 2,
	}
	
	/// <summary>
	/// A dictionary for parameters and their corresponding values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ParameterValueCollection
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssignmentPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		validating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		waiting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deploying = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancelling = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		locking = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		succeeded = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		canceled = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 9,
	}
	
	/// <summary>
	/// A dictionary which maps resource group placeholders to the resource groups which will be created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceGroupValueCollection
	{
	}
	
	/// <summary>
	/// The status of a blueprint assignment. This field is readonly.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AssignmentStatus
	{
		
		/// <summary>
		/// List of resources that were created by the blueprint assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedResources")]
		public string[] ManagedResources { get; set; }
	}
	
	/// <summary>
	/// List of blueprint assignments
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AssignmentList
	{
		
		/// <summary>
		/// Link to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of blueprint assignments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Assignment[] Value { get; set; }
	}
	
	/// <summary>
	/// Common properties for all Azure resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureResourceBase
	{
		
		/// <summary>
		/// String Id used to locate any resource on Azure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Shared properties between all blueprint resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlueprintResourcePropertiesBase
	{
		
		/// <summary>
		/// Multi-line explain this resource.
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Description { get; set; }
		
		/// <summary>
		/// One-liner string explain this resource.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// Shared status properties between all blueprint resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlueprintResourceStatusBase
	{
		
		/// <summary>
		/// Last modified time of this blueprint definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// Creation time of this blueprint definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeCreated")]
		public System.Nullable<System.DateTimeOffset> TimeCreated { get; set; }
	}
	
	/// <summary>
	/// Value for the specified parameter. Can be either 'value' or 'reference' but not both.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ParameterValue
	{
		
		/// <summary>
		/// Reference to a Key Vault secret.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public SecretValueReference Reference { get; set; }
		
		/// <summary>
		/// Parameter value as value type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	/// <summary>
	/// Reference to a Key Vault secret.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecretValueReference
	{
		
		/// <summary>
		/// Specifies the link to a Key Vault.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyVault")]
		public KeyVaultReference KeyVault { get; set; }
		
		/// <summary>
		/// Name of the secret.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretName")]
		public string SecretName { get; set; }
		
		/// <summary>
		/// The version of the secret to use. If left blank, the latest version of the secret is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretVersion")]
		public string SecretVersion { get; set; }
	}
	
	/// <summary>
	/// Specifies the link to a Key Vault.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyVaultReference
	{
		
		/// <summary>
		/// Azure resource ID of the Key Vault.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Represents an Azure resource group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceGroupValue
	{
		
		/// <summary>
		/// Location of the resource group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Name of the resource group.
		/// Max length: 90
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(90)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Common properties for all Azure tracked resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrackedResource
	{
		
		/// <summary>
		/// The location of this blueprint assignment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
	}
	
	/// <summary>
	/// Response schema for querying the Azure Blueprints service principal in the tenant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WhoIsBlueprintContract
	{
		
		/// <summary>
		/// AAD object Id of the Azure Blueprints service principal in the tenant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List blueprint assignments within a subscription.
		/// Assignments_List {scope}/providers/Microsoft.Blueprint/blueprintAssignments
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="scope">The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.</param>
		/// <returns>OK -- all blueprint assignments retrieved.</returns>
		public async Task<AssignmentList> Assignments_ListAsync(string api_version, string scope)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Blueprint/blueprintAssignments?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssignmentList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a blueprint assignment.
		/// Assignments_Get {scope}/providers/Microsoft.Blueprint/blueprintAssignments/{assignmentName}
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="scope">The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.</param>
		/// <param name="assignmentName">Name of the blueprint assignment.</param>
		/// <returns>OK -- blueprint assignment retrieved.</returns>
		public async Task<Assignment> Assignments_GetAsync(string api_version, string scope, string assignmentName)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Blueprint/blueprintAssignments/"+ (assignmentName==null? "" : System.Uri.EscapeDataString(assignmentName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Assignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a blueprint assignment.
		/// Assignments_CreateOrUpdate {scope}/providers/Microsoft.Blueprint/blueprintAssignments/{assignmentName}
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="scope">The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.</param>
		/// <param name="assignmentName">Name of the blueprint assignment.</param>
		/// <param name="requestBody">Blueprint assignment object to save.</param>
		public async Task Assignments_CreateOrUpdateAsync(string api_version, string scope, string assignmentName, Assignment requestBody)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Blueprint/blueprintAssignments/"+ (assignmentName==null? "" : System.Uri.EscapeDataString(assignmentName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a blueprint assignment.
		/// Assignments_Delete {scope}/providers/Microsoft.Blueprint/blueprintAssignments/{assignmentName}
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="scope">The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.</param>
		/// <param name="assignmentName">Name of the blueprint assignment.</param>
		public async Task Assignments_DeleteAsync(string api_version, string scope, string assignmentName)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Blueprint/blueprintAssignments/"+ (assignmentName==null? "" : System.Uri.EscapeDataString(assignmentName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Blueprints service SPN objectId
		/// Assignments_WhoIsBlueprint {scope}/providers/Microsoft.Blueprint/blueprintAssignments/{assignmentName}/WhoIsBlueprint
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="scope">The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.</param>
		/// <param name="assignmentName">Name of the blueprint assignment.</param>
		/// <returns>Blueprints service SPN objectId</returns>
		public async Task<WhoIsBlueprintContract> Assignments_WhoIsBlueprintAsync(string api_version, string scope, string assignmentName)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Blueprint/blueprintAssignments/"+ (assignmentName==null? "" : System.Uri.EscapeDataString(assignmentName))+"/WhoIsBlueprint?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WhoIsBlueprintContract>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
