//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Check Domain availability parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckDomainAvailabilityParameter
	{
		
		/// <summary>
		/// The subdomain name to use.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subdomainName")]
		public string SubdomainName { get; set; }
		
		/// <summary>
		/// The Type of the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Check Domain availability result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckDomainAvailabilityResult
	{
		
		/// <summary>
		/// Indicates the given SKU is available or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSubdomainAvailable")]
		public System.Nullable<System.Boolean> IsSubdomainAvailable { get; set; }
		
		/// <summary>
		/// Reason why the SKU is not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The subdomain name to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subdomainName")]
		public string SubdomainName { get; set; }
		
		/// <summary>
		/// The Type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Check SKU availability parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckSkuAvailabilityParameter
	{
		
		/// <summary>
		/// Required. Indicates the type of cognitive service account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The SKU of the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="skus")]
		public string[] Skus { get; set; }
		
		/// <summary>
		/// The Type of the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Check SKU availability result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckSkuAvailabilityResult
	{
		
		/// <summary>
		/// Required. Indicates the type of cognitive service account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Additional error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Reason why the SKU is not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Indicates the given SKU is available or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuAvailable")]
		public System.Nullable<System.Boolean> SkuAvailable { get; set; }
		
		/// <summary>
		/// The name of SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuName")]
		public string SkuName { get; set; }
		
		/// <summary>
		/// The Type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Check SKU availability result list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckSkuAvailabilityResultList
	{
		
		/// <summary>
		/// Check SKU availability result list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CheckSkuAvailabilityResult[] Value { get; set; }
	}
	
	/// <summary>
	/// Cognitive Services Account is an Azure resource representing the provisioned account, its type, location and SKU.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CognitiveServicesAccount
	{
		
		/// <summary>
		/// Entity Tag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The id of the created account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required. Indicates the type of cognitive service account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The location of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the created account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Properties of Cognitive Services account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CognitiveServicesAccountProperties Properties { get; set; }
		
		/// <summary>
		/// The SKU of the cognitive services account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
		
		/// <summary>
		/// Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The api properties for special APIs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CognitiveServicesAccountApiProperties
	{
		
		/// <summary>
		/// (Personalization Only) The flag to enable statistics of Bing Search.
		/// Max length: 1000
		/// Pattern: ^( *)Endpoint=sb://(.*);( *)SharedAccessKeyName=(.*);( *)SharedAccessKey=(.*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventHubConnectionString")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^( *)Endpoint=sb://(.*);( *)SharedAccessKeyName=(.*);( *)SharedAccessKey=(.*)$")]
		public string EventHubConnectionString { get; set; }
		
		/// <summary>
		/// (QnAMaker Only) The runtime endpoint of QnAMaker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="qnaRuntimeEndpoint")]
		public string QnaRuntimeEndpoint { get; set; }
		
		/// <summary>
		/// (Bing Search Only) The flag to enable statistics of Bing Search.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statisticsEnabled")]
		public System.Nullable<System.Boolean> StatisticsEnabled { get; set; }
		
		/// <summary>
		/// (Personalization Only) The storage account connection string.
		/// Max length: 1000
		/// Pattern: ^(( *)DefaultEndpointsProtocol=(http|https)( *);( *))?AccountName=(.*)AccountKey=(.*)EndpointSuffix=(.*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountConnectionString")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(( *)DefaultEndpointsProtocol=(http|https)( *);( *))?AccountName=(.*)AccountKey=(.*)EndpointSuffix=(.*)$")]
		public string StorageAccountConnectionString { get; set; }
	}
	
	/// <summary>
	/// The list of cognitive services accounts operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CognitiveServicesAccountEnumerateSkusResult
	{
		
		/// <summary>
		/// Gets the list of Cognitive Services accounts and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CognitiveServicesResourceAndSku[] Value { get; set; }
	}
	
	/// <summary>
	/// Cognitive Services resource type and SKU.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CognitiveServicesResourceAndSku
	{
		
		/// <summary>
		/// Resource Namespace and Type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// The SKU of the cognitive services account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
	}
	
	/// <summary>
	/// The access keys for the cognitive services account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CognitiveServicesAccountKeys
	{
		
		/// <summary>
		/// Gets the value of key 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key1")]
		public string Key1 { get; set; }
		
		/// <summary>
		/// Gets the value of key 2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key2")]
		public string Key2 { get; set; }
	}
	
	/// <summary>
	/// The list of cognitive services accounts operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CognitiveServicesAccountListResult
	{
		
		/// <summary>
		/// The link used to get the next page of accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Gets the list of Cognitive Services accounts and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CognitiveServicesAccount[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of Cognitive Services account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CognitiveServicesAccountProperties
	{
		
		/// <summary>
		/// The api properties for special APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiProperties")]
		public CognitiveServicesAccountApiProperties ApiProperties { get; set; }
		
		/// <summary>
		/// Optional subdomain name used for token-based authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customSubDomainName")]
		public string CustomSubDomainName { get; set; }
		
		/// <summary>
		/// Endpoint of the created account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// The internal identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalId")]
		public string InternalId { get; set; }
		
		/// <summary>
		/// A set of rules governing the network accessibility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkAcls")]
		public NetworkRuleSet NetworkAcls { get; set; }
		
		/// <summary>
		/// Gets the status of the cognitive services account at the time the operation was called.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<CognitiveServicesAccountPropertiesProvisioningState> ProvisioningState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CognitiveServicesAccountPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResolvingDNS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Moving = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 5,
	}
	
	/// <summary>
	/// Cognitive Services error object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Error
	{
		
		/// <summary>
		/// Cognitive Services error body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorBody Error1 { get; set; }
	}
	
	/// <summary>
	/// Cognitive Services error body.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorBody
	{
		
		/// <summary>
		/// error code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// A rule governing the accessibility from a specific ip address or ip range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IpRule
	{
		
		/// <summary>
		/// An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A metric name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricName
	{
		
		/// <summary>
		/// The friendly name of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizedValue")]
		public string LocalizedValue { get; set; }
		
		/// <summary>
		/// The name of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A set of rules governing the network accessibility.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkRuleSet
	{
		
		/// <summary>
		/// The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultAction")]
		public System.Nullable<NetworkRuleSetDefaultAction> DefaultAction { get; set; }
		
		/// <summary>
		/// The list of IP address rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipRules")]
		public IpRule[] IpRules { get; set; }
		
		/// <summary>
		/// The list of virtual network rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualNetworkRules")]
		public VirtualNetworkRule[] VirtualNetworkRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum NetworkRuleSetDefaultAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Allow = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deny = 1,
	}
	
	/// <summary>
	/// A rule governing the accessibility from a specific virtual network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetworkRule
	{
		
		/// <summary>
		/// Full resource id of a vnet subnet, such as '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Ignore missing vnet service endpoint or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreMissingVnetServiceEndpoint")]
		public System.Nullable<System.Boolean> IgnoreMissingVnetServiceEndpoint { get; set; }
		
		/// <summary>
		/// Gets the state of virtual network rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	/// <summary>
	/// The operation supported by Cognitive Services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDisplayInfo
	{
		
		/// <summary>
		/// The description of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The action that users can perform, based on their permission level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Service provider: Microsoft Cognitive Services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Resource on which the operation is performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// The operation supported by Cognitive Services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationEntity
	{
		
		/// <summary>
		/// The operation supported by Cognitive Services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplayInfo Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The origin of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// Additional properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public string Properties { get; set; }
	}
	
	/// <summary>
	/// The list of cognitive services accounts operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationEntityListResult
	{
		
		/// <summary>
		/// The link used to get the next page of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public OperationEntity[] Value { get; set; }
	}
	
	/// <summary>
	/// Regenerate key parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegenerateKeyParameters
	{
		
		/// <summary>
		/// key name to generate (Key1|Key2)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public RegenerateKeyParametersKeyName KeyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RegenerateKeyParametersKeyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Key1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Key2 = 1,
	}
	
	/// <summary>
	/// Describes an available Cognitive Services SKU.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceSku
	{
		
		/// <summary>
		/// The Kind of resources that are supported in this SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The set of locations that the SKU is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public string[] Locations { get; set; }
		
		/// <summary>
		/// The name of SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of resource the SKU applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public ResourceSkuRestrictions[] Restrictions { get; set; }
		
		/// <summary>
		/// Specifies the tier of Cognitive Services account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	/// <summary>
	/// Describes restrictions of a SKU.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceSkuRestrictions
	{
		
		/// <summary>
		/// The reason for restriction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		public System.Nullable<ResourceSkuRestrictionsReasonCode> ReasonCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="restrictionInfo")]
		public ResourceSkuRestrictionInfo RestrictionInfo { get; set; }
		
		/// <summary>
		/// The type of restrictions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ResourceSkuRestrictionsType> Type { get; set; }
		
		/// <summary>
		/// The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ResourceSkuRestrictionsReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QuotaId = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotAvailableForSubscription = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ResourceSkuRestrictionsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Location = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Zone = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceSkuRestrictionInfo
	{
		
		/// <summary>
		/// Locations where the SKU is restricted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public string[] Locations { get; set; }
		
		/// <summary>
		/// List of availability zones where the SKU is restricted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zones")]
		public string[] Zones { get; set; }
	}
	
	/// <summary>
	/// The Get Skus operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceSkusResult
	{
		
		/// <summary>
		/// The uri to fetch the next page of Skus.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of skus available for the subscription.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ResourceSku[] Value { get; set; }
	}
	
	/// <summary>
	/// The SKU of the cognitive services account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sku
	{
		
		/// <summary>
		/// The name of SKU.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Gets the sku tier. This is based on the SKU name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public System.Nullable<SkuTier> Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SkuTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Free = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium = 2,
	}
	
	/// <summary>
	/// The unit of the metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum UnitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Seconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Percent = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CountPerSecond = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BytesPerSecond = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Milliseconds = 6,
	}
	
	/// <summary>
	/// The usage data for a usage request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Usage
	{
		
		/// <summary>
		/// Current value for this metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentValue")]
		public System.Nullable<System.Double> CurrentValue { get; set; }
		
		/// <summary>
		/// Maximum value for this metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Double> Limit { get; set; }
		
		/// <summary>
		/// A metric name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public MetricName Name { get; set; }
		
		/// <summary>
		/// Next reset time for current quota.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextResetTime")]
		public string NextResetTime { get; set; }
		
		/// <summary>
		/// The quota period used to summarize the usage values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaPeriod")]
		public string QuotaPeriod { get; set; }
		
		/// <summary>
		/// Cognitive Services account quota usage status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<UsageStatus> Status { get; set; }
		
		/// <summary>
		/// The unit of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public UnitType Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum UsageStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Included = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Blocked = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InOverage = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 3,
	}
	
	/// <summary>
	/// The response to a list usage request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UsagesResult
	{
		
		/// <summary>
		/// The list of usages for Cognitive Service account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Usage[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all the available Cognitive Services account operations.
		/// Operations_List providers/Microsoft.CognitiveServices/operations
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2017-04-18</param>
		/// <returns>OK.</returns>
		public async Task<OperationEntityListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.CognitiveServices/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationEntityListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all the resources of a particular type belonging to a subscription.
		/// Accounts_List subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/accounts
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2017-04-18</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <returns>The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code.
		///The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility.
		///For a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section. </returns>
		public async Task<CognitiveServicesAccountListResult> Accounts_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.CognitiveServices/accounts?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CognitiveServicesAccountListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check whether a domain is available.
		/// CheckDomainAvailability subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/checkDomainAvailability
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2017-04-18</param>
		/// <param name="requestBody">Check Domain Availability parameter.</param>
		/// <returns>OK.</returns>
		public async Task<CheckDomainAvailabilityResult> CheckDomainAvailabilityAsync(string subscriptionId, string api_version, CheckDomainAvailabilityParameter requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.CognitiveServices/checkDomainAvailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CheckDomainAvailabilityResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check available SKUs.
		/// CheckSkuAvailability subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/locations/{location}/checkSkuAvailability
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2017-04-18</param>
		/// <param name="location">Resource location.</param>
		/// <param name="requestBody">Check SKU Availability POST body.</param>
		/// <returns>OK.</returns>
		public async Task<CheckSkuAvailabilityResultList> CheckSkuAvailabilityAsync(string subscriptionId, string api_version, string location, CheckSkuAvailabilityParameter requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.CognitiveServices/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/checkSkuAvailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CheckSkuAvailabilityResultList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the list of Microsoft.CognitiveServices SKUs available for your Subscription.
		/// ResourceSkus_List subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/skus
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2017-04-18</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <returns>OK</returns>
		public async Task<ResourceSkusResult> ResourceSkus_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.CognitiveServices/skus?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResourceSkusResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all the resources of a particular type belonging to a resource group
		/// Accounts_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2017-04-18</param>
		/// <returns>The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code.
		///The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with "value" property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility.
		///The nextLink should be implemented using following query parameters:
		///· skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink.
		///· top: the optional client query parameter which defines the maximum number of records to be returned by the server.
		///Implementation details:
		///· NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query. 
		///· Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response. 
		///Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed.</returns>
		public async Task<CognitiveServicesAccountListResult> Accounts_ListByResourceGroupAsync(string resourceGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CognitiveServices/accounts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CognitiveServicesAccountListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a Cognitive Services account specified by the parameters.
		/// Accounts_GetProperties subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="accountName">The name of Cognitive Services account.
		/// Min length: 2
		/// Max length: 64
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2017-04-18</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <returns>The resource provider should return 200 (OK) to indicate that the operation completed successfully.
		///For a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section. The only GET specific properties are "name," "type" and "id."
		///Field	Description
		///Kind	required.  String.
		///	The API set for this API account. It can be 
		///	· a single API, for example: Face API, Vision API, Speech API. 
		///	a bundle of APIs:  Face + Speech, Vision + Emotion, etc.
		///sku.name	Required.
		///	The pricing tier/plan of this API. Could be: 
		///	F0 - Free
		///	B0 - Basic
		///	S0 - Standard
		///	P0 - Premium
		///</returns>
		public async Task<CognitiveServicesAccount> Accounts_GetPropertiesAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CognitiveServices/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CognitiveServicesAccount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Cognitive Services Account. Accounts is a resource group wide resource type. It holds the keys for developer to access intelligent APIs. It's also the resource type for billing.
		/// Accounts_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="accountName">The name of Cognitive Services account.
		/// Min length: 2
		/// Max length: 64
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2017-04-18</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="requestBody">The parameters to provide for the created account.</param>
		/// <returns>If resource is created successfully or already existed, the service should return 200 (OK).</returns>
		public async Task<CognitiveServicesAccount> Accounts_CreateAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, CognitiveServicesAccount requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CognitiveServices/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CognitiveServicesAccount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Cognitive Services account from the resource group.
		/// Accounts_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="accountName">The name of Cognitive Services account.
		/// Min length: 2
		/// Max length: 64
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2017-04-18</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <returns>A 200 (OK) should be returned if the object exists and was deleted successfully;</returns>
		public async Task Accounts_DeleteAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CognitiveServices/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Cognitive Services account
		/// Accounts_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="accountName">The name of Cognitive Services account.
		/// Min length: 2
		/// Max length: 64
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2017-04-18</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="requestBody">The parameters to provide for the created account.</param>
		/// <returns>The resource provider should return 200 (OK) to indicate that the operation completed successfully. </returns>
		public async Task<CognitiveServicesAccount> Accounts_UpdateAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, CognitiveServicesAccount requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CognitiveServices/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CognitiveServicesAccount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the account keys for the specified Cognitive Services account.
		/// Accounts_ListKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/listKeys
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="accountName">The name of Cognitive Services account.
		/// Min length: 2
		/// Max length: 64
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2017-04-18</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <returns>Returns with a response body containing the subscription keys for the resource: key1
		///The first API key for authentication when client calls the API endpoint.
		///
		///key2
		///The second API key for authentication when client calls the API endpoint.</returns>
		public async Task<CognitiveServicesAccountKeys> Accounts_ListKeysAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CognitiveServices/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/listKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CognitiveServicesAccountKeys>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerates the specified account key for the specified Cognitive Services account.
		/// Accounts_RegenerateKey subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/regenerateKey
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="accountName">The name of Cognitive Services account.
		/// Min length: 2
		/// Max length: 64
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2017-04-18</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="requestBody">regenerate key parameters.</param>
		public async Task<CognitiveServicesAccountKeys> Accounts_RegenerateKeyAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, RegenerateKeyParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CognitiveServices/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/regenerateKey&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CognitiveServicesAccountKeys>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List available SKUs for the requested Cognitive Services account
		/// Accounts_ListSkus subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/skus
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="accountName">The name of Cognitive Services account.
		/// Min length: 2
		/// Max length: 64
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2017-04-18</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <returns>The resource provider should return 200 (OK) to indicate that the operation completed successfully.
		///For a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section. The only GET specific properties are "name," "type" and "id."
		///Field	Description
		///sku	Required, object
		///	The exact set of keys that define this sku. This matches the fields on the respective resource.
		///sku.name	Required, string
		///	The name of the SKU. This is typically a letter + number code, such as A0 or P3
		///sku.tier	Required, string
		///	The tier of this particular SKU. Typically one of:
		///	· Free
		///	· Basic
		///	· Standard
		///	· Premium
		///</returns>
		public async Task<CognitiveServicesAccountEnumerateSkusResult> Accounts_ListSkusAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CognitiveServices/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/skus&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CognitiveServicesAccountEnumerateSkusResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get usages for the requested Cognitive Services account
		/// Accounts_GetUsages subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/usages
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription.</param>
		/// <param name="accountName">The name of Cognitive Services account.
		/// Min length: 2
		/// Max length: 64
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2017-04-18</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="filter">An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).</param>
		/// <returns>The usages for Cognitive Services account were retrieved successfully.</returns>
		public async Task<UsagesResult> Accounts_GetUsagesAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CognitiveServices/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/usages&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UsagesResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
