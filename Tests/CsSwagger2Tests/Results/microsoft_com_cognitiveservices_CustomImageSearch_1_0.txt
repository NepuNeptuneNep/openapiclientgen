//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Defines an answer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Answer
	{
	}
	
	/// <summary>
	/// The most generic kind of creative work, including books, movies, photographs, software programs, etc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreativeWork
	{
		
		/// <summary>
		/// The source of the creative work.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public Thing[] Provider { get; set; }
		
		/// <summary>
		/// Text content of this creative work
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// The URL to a thumbnail of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailUrl")]
		public string ThumbnailUrl { get; set; }
	}
	
	/// <summary>
	/// Defines a thing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Thing
	{
		
		/// <summary>
		/// An alias for the item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateName")]
		public string AlternateName { get; set; }
		
		/// <summary>
		/// An ID that uniquely identifies this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bingId")]
		public string BingId { get; set; }
		
		/// <summary>
		/// A short description of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Defines an image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public ImageObject Image { get; set; }
		
		/// <summary>
		/// The name of the thing represented by this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The URL to get more information about the thing represented by this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Defines an image
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageObject
	{
		
		/// <summary>
		/// A three-byte hexadecimal number that represents the color that dominates the image. Use the color as the temporary background in your client until the image is loaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accentColor")]
		public string AccentColor { get; set; }
		
		/// <summary>
		/// Unique Id for the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageId")]
		public string ImageId { get; set; }
		
		/// <summary>
		/// The token that you use in a subsequent call to the Image Search API to get additional information about the image. For information about using this token, see the insightsToken query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageInsightsToken")]
		public string ImageInsightsToken { get; set; }
		
		/// <summary>
		/// Defines an image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnail")]
		public ImageObject Thumbnail { get; set; }
		
		/// <summary>
		/// Visual representation of the image. Used for getting more sizes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visualWords")]
		public string VisualWords { get; set; }
	}
	
	/// <summary>
	/// Defines the error that occurred.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Error
	{
		
		/// <summary>
		/// The error code that identifies the category of error.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(ErrorCode.None)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public ErrorCode Code { get; set; } = ErrorCode.None;
		
		/// <summary>
		/// A description of the error.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// A description that provides additional information about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moreDetails")]
		public string MoreDetails { get; set; }
		
		/// <summary>
		/// The parameter in the request that caused the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public string Parameter { get; set; }
		
		/// <summary>
		/// The error code that further helps to identify the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subCode")]
		public System.Nullable<ErrorSubCode> SubCode { get; set; }
		
		/// <summary>
		/// The parameter's value in the request that was not valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServerError = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidRequest = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RateLimitExceeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidAuthorization = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InsufficientAuthorization = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ErrorSubCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnexpectedError = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceError = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotImplemented = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ParameterMissing = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ParameterInvalidValue = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HttpNotAllowed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Blocked = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AuthorizationMissing = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AuthorizationRedundancy = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AuthorizationDisabled = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AuthorizationExpired = 10,
	}
	
	/// <summary>
	/// The top-level response that represents a failed request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// A list of errors that describe the reasons why the request failed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Defines the identity of a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Identifiable
	{
		
		/// <summary>
		/// A String identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Defines an image answer
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Images
	{
		
		/// <summary>
		/// Used as part of deduping. Tells client the next offset that client should use in the next pagination request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextOffset")]
		public System.Nullable<System.Int32> NextOffset { get; set; }
		
		/// <summary>
		/// A list of image objects that are relevant to the query. If there are no results, the List is empty.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ImageObject[] Value { get; set; }
	}
	
	/// <summary>
	/// Defines a media object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MediaObject
	{
		
		/// <summary>
		/// Size of the media object content (use format "value unit" e.g "1024 B").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentSize")]
		public string ContentSize { get; set; }
		
		/// <summary>
		/// Original URL to retrieve the source (file) for the media object (e.g the source URL for the image).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentUrl")]
		public string ContentUrl { get; set; }
		
		/// <summary>
		/// Encoding format (e.g mp3, mp4, jpeg, etc).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encodingFormat")]
		public string EncodingFormat { get; set; }
		
		/// <summary>
		/// The height of the media object, in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Display URL of the page that hosts the media object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostPageDisplayUrl")]
		public string HostPageDisplayUrl { get; set; }
		
		/// <summary>
		/// URL of the page that hosts the media object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostPageUrl")]
		public string HostPageUrl { get; set; }
		
		/// <summary>
		/// The width of the media object, in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// Defines a search query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Query
	{
		
		/// <summary>
		/// The display version of the query term. This version of the query term may contain special characters that highlight the search term found in the query string. The string contains the highlighting characters only if the query enabled hit highlighting
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayText")]
		public string DisplayText { get; set; }
		
		/// <summary>
		/// The URL that you use to get the results of the related search. Before using the URL, you must append query parameters as appropriate and include the Ocp-Apim-Subscription-Key header. Use this URL if you're displaying the results in your own user interface. Otherwise, use the webSearchUrl URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchLink")]
		public string SearchLink { get; set; }
		
		/// <summary>
		/// The query string. Use this string as the query term in a new search request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Defines an image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnail")]
		public ImageObject Thumbnail { get; set; }
		
		/// <summary>
		/// The URL that takes the user to the Bing search results page for the query.Only related search results include this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webSearchUrl")]
		public string WebSearchUrl { get; set; }
	}
	
	/// <summary>
	/// Defines a response. All schemas that could be returned at the root of a response should inherit from this
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Response
	{
		
		/// <summary>
		/// The URL that returns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readLink")]
		public string ReadLink { get; set; }
		
		/// <summary>
		/// The URL To Bing's search result for this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webSearchUrl")]
		public string WebSearchUrl { get; set; }
	}
	
	/// <summary>
	/// Response base
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResponseBase
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string _type { get; set; }
	}
	
	/// <summary>
	/// Defines a search result answer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SearchResultsAnswer
	{
		
		/// <summary>
		/// The estimated number of webpages that are relevant to the query. Use this number along with the count and offset query parameters to page the results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalEstimatedMatches")]
		public System.Nullable<System.Int64> TotalEstimatedMatches { get; set; }
	}
	
	/// <summary>
	/// Defines a webpage that is relevant to the query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WebPage
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// The Custom Image Search API lets you send an image search query to Bing and get image results found in your custom view of the web.
		/// CustomInstance_ImageSearch images/search
		/// </summary>
		/// <param name="customConfig">The identifier for the custom search configuration</param>
		/// <param name="aspect">Filter images by the following aspect ratios. All: Do not filter by aspect.Specifying this value is the same as not specifying the aspect parameter. Square: Return images with standard aspect ratio. Wide: Return images with wide screen aspect ratio. Tall: Return images with tall aspect ratio.</param>
		/// <param name="color">Filter images by the following color options. ColorOnly: Return color images. Monochrome: Return black and white images. Return images with one of the following dominant colors: Black, Blue, Brown, Gray, Green, Orange, Pink, Purple, Red, Teal, White, Yellow</param>
		/// <param name="cc">A 2-character country code of the country where the results come from. For a list of possible values, see [Market Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes). If you set this parameter, you must also specify the [Accept-Language](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#acceptlanguage) header. Bing uses the first supported language it finds from the languages list, and combine that language with the country code that you specify to determine the market to return results for. If the languages list does not include a supported language, Bing finds the closest language and market that supports the request, or it may use an aggregated or default market for the results instead of a specified one. You should use this query parameter and the Accept-Language query parameter only if you specify multiple languages; otherwise, you should use the mkt and setLang query parameters. This parameter and the [mkt](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#mkt) query parameter are mutually exclusive—do not specify both.</param>
		/// <param name="count">The number of images to return in the response. The actual number delivered may be less than requested. The default is 35. The maximum value is 150. You use this parameter along with the offset parameter to page results.For example, if your user interface displays 20 images per page, set count to 20 and offset to 0 to get the first page of results.For each subsequent page, increment offset by 20 (for example, 0, 20, 40). Use this parameter only with the Image Search API.Do not specify this parameter when calling the Insights, Trending Images, or Web Search APIs.</param>
		/// <param name="freshness">Filter images by the following discovery options. Day: Return images discovered by Bing within the last 24 hours. Week: Return images discovered by Bing within the last 7 days. Month: Return images discovered by Bing within the last 30 days.</param>
		/// <param name="height">Filter images that have the specified height, in pixels. You may use this filter with the size filter to return small images that have a height of 150 pixels.</param>
		/// <param name="id">An ID that uniquely identifies an image. Use this parameter to ensure that the specified image is the first image in the list of images that Bing returns. The [Image](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#image) object's imageId field contains the ID that you set this parameter to.</param>
		/// <param name="imageContent">Filter images by the following content types. Face: Return images that show only a person's face. Portrait: Return images that show only a person's head and shoulders.</param>
		/// <param name="imageType">Filter images by the following image types. AnimatedGif: Return only animated GIFs. Clipart: Return only clip art images. Line: Return only line drawings. Photo: Return only photographs(excluding line drawings, animated Gifs, and clip art). Shopping: Return only images that contain items where Bing knows of a merchant that is selling the items. This option is valid in the en - US market only.Transparent: Return only images with a transparent background.</param>
		/// <param name="license">Filter images by the following license types. All: Do not filter by license type.Specifying this value is the same as not specifying the license parameter. Any: Return images that are under any license type. The response doesn't include images that do not specify a license or the license is unknown. Public: Return images where the creator has waived their exclusive rights, to the fullest extent allowed by law. Share: Return images that may be shared with others. Changing or editing the image might not be allowed. Also, modifying, sharing, and using the image for commercial purposes might not be allowed. Typically, this option returns the most images. ShareCommercially: Return images that may be shared with others for personal or commercial purposes. Changing or editing the image might not be allowed. Modify: Return images that may be modified, shared, and used. Changing or editing the image might not be allowed. Modifying, sharing, and using the image for commercial purposes might not be allowed. ModifyCommercially: Return images that may be modified, shared, and used for personal or commercial purposes. Typically, this option returns the fewest images. For more information about these license types, see [Filter Images By License Type](http://go.microsoft.com/fwlink/?LinkId=309768).</param>
		/// <param name="mkt">The market where the results come from. Typically, mkt is the country where the user is making the request from. However, it could be a different country if the user is not located in a country where Bing delivers results. The market must be in the form <language code>-<country code>. For example, en-US. The string is case insensitive. For a list of possible market values, see [Market Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes). NOTE: If known, you are encouraged to always specify the market. Specifying the market helps Bing route the request and return an appropriate and optimal response. If you specify a market that is not listed in [Market Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes), Bing uses a best fit market code based on an internal mapping that is subject to change. This parameter and the [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#cc) query parameter are mutually exclusive—do not specify both.</param>
		/// <param name="maxFileSize">Filter images that are less than or equal to the specified file size. The maximum file size that you may specify is 520,192 bytes. If you specify a larger value, the API uses 520,192. It is possible that the response may include images that are slightly larger than the specified maximum. You may specify this filter and minFileSize to filter images within a range of file sizes.</param>
		/// <param name="maxHeight">Filter images that have a height that is less than or equal to the specified height. Specify the height in pixels. You may specify this filter and minHeight to filter images within a range of heights. This filter and the height filter are mutually exclusive.</param>
		/// <param name="maxWidth">Filter images that have a width that is less than or equal to the specified width. Specify the width in pixels. You may specify this filter and maxWidth to filter images within a range of widths. This filter and the width filter are mutually exclusive.</param>
		/// <param name="minFileSize">Filter images that are greater than or equal to the specified file size. The maximum file size that you may specify is 520,192 bytes. If you specify a larger value, the API uses 520,192. It is possible that the response may include images that are slightly smaller than the specified minimum. You may specify this filter and maxFileSize to filter images within a range of file sizes.</param>
		/// <param name="minHeight">Filter images that have a height that is greater than or equal to the specified height. Specify the height in pixels. You may specify this filter and maxHeight to filter images within a range of heights. This filter and the height filter are mutually exclusive.</param>
		/// <param name="minWidth">Filter images that have a width that is greater than or equal to the specified width. Specify the width in pixels. You may specify this filter and maxWidth to filter images within a range of widths. This filter and the width filter are mutually exclusive.</param>
		/// <param name="offset">The zero-based offset that indicates the number of images to skip before returning images. The default is 0. The offset should be less than ([totalEstimatedMatches](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#totalestimatedmatches) - count). Use this parameter along with the count parameter to page results. For example, if your user interface displays 20 images per page, set count to 20 and offset to 0 to get the first page of results. For each subsequent page, increment offset by 20 (for example, 0, 20, 40). It is possible for multiple pages to include some overlap in results. To prevent duplicates, see [nextOffset](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#nextoffset). Use this parameter only with the Image API. Do not specify this parameter when calling the Trending Images API or the Web Search API.</param>
		/// <param name="q">The user's search query term. The term cannot be empty. The term may contain [Bing Advanced Operators](http://msdn.microsoft.com/library/ff795620.aspx). For example, to limit images to a specific domain, use the [site:](http://msdn.microsoft.com/library/ff795613.aspx) operator. To help improve relevance of an insights query (see [insightsToken](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#insightstoken)), you should always include the user's query term. Use this parameter only with the Image Search API.Do not specify this parameter when calling the Trending Images API.</param>
		/// <param name="safeSearch">Filter images for adult content. The following are the possible filter values. Off: May return images with adult content. If the request is through the Image Search API, the response includes thumbnail images that are clear (non-fuzzy). However, if the request is through the Web Search API, the response includes thumbnail images that are pixelated (fuzzy). Moderate: If the request is through the Image Search API, the response doesn't include images with adult content. If the request is through the Web Search API, the response may include images with adult content (the thumbnail images are pixelated (fuzzy)). Strict: Do not return images with adult content. The default is Moderate. If the request comes from a market that Bing's adult policy requires that safeSearch is set to Strict, Bing ignores the safeSearch value and uses Strict. If you use the site: query operator, there is the chance that the response may contain adult content regardless of what the safeSearch query parameter is set to. Use site: only if you are aware of the content on the site and your scenario supports the possibility of adult content.</param>
		/// <param name="size">Filter images by the following sizes. All: Do not filter by size. Specifying this value is the same as not specifying the size parameter. Small: Return images that are less than 200x200 pixels. Medium: Return images that are greater than or equal to 200x200 pixels but less than 500x500 pixels. Large: Return images that are 500x500 pixels or larger. Wallpaper: Return wallpaper images. You may use this parameter along with the height or width parameters. For example, you may use height and size to request small images that are 150 pixels tall.</param>
		/// <param name="setLang">The language to use for user interface strings. Specify the language using the ISO 639-1 2-letter language code. For example, the language code for English is EN. The default is EN (English). Although optional, you should always specify the language. Typically, you set setLang to the same language specified by mkt unless the user wants the user interface strings displayed in a different language. This parameter and the [Accept-Language](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#acceptlanguage) header are mutually exclusive; do not specify both. A user interface string is a string that's used as a label in a user interface. There are few user interface strings in the JSON response objects. Also, any links to Bing.com properties in the response objects apply the specified language.</param>
		/// <param name="width">Filter images that have the specified width, in pixels. You may use this filter with the size filter to return small images that have a width of 150 pixels.</param>
		/// <returns>Success.</returns>
		public async Task<Images> CustomInstance_ImageSearchAsync(
					string customConfig, 
					CustomInstance_ImageSearchAspect aspect, 
					CustomInstance_ImageSearchColor color, 
					string cc, 
					int count, 
					CustomInstance_ImageSearchFreshness freshness, 
					int height, 
					string id, 
					CustomInstance_ImageSearchImageContent imageContent, 
					CustomInstance_ImageSearchImageType imageType, 
					CustomInstance_ImageSearchLicense license, 
					string mkt, 
					long maxFileSize, 
					long maxHeight, 
					long maxWidth, 
					long minFileSize, 
					long minHeight, 
					long minWidth, 
					long offset, 
					string q, 
					CustomInstance_ImageSearchSafeSearch safeSearch, 
					CustomInstance_ImageSearchSize size, 
					string setLang, 
					int width)
		{
			var requestUri = "images/search?customConfig=" + (customConfig==null? "" : System.Uri.EscapeDataString(customConfig))+"&aspect=" + aspect+"&color=" + color+"&cc=" + (cc==null? "" : System.Uri.EscapeDataString(cc))+"&count="+count+"&freshness=" + freshness+"&height="+height+"&id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&imageContent=" + imageContent+"&imageType=" + imageType+"&license=" + license+"&mkt=" + (mkt==null? "" : System.Uri.EscapeDataString(mkt))+"&maxFileSize="+maxFileSize+"&maxHeight="+maxHeight+"&maxWidth="+maxWidth+"&minFileSize="+minFileSize+"&minHeight="+minHeight+"&minWidth="+minWidth+"&offset="+offset+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&safeSearch=" + safeSearch+"&size=" + size+"&setLang=" + (setLang==null? "" : System.Uri.EscapeDataString(setLang))+"&width="+width;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Images>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum CustomInstance_ImageSearchX_BingApis_SDK
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
	}
	
	public enum CustomInstance_ImageSearchAspect
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Square = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Wide = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tall = 3,
	}
	
	public enum CustomInstance_ImageSearchColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ColorOnly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monochrome = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Black = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Blue = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Brown = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gray = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Green = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Orange = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pink = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Purple = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Red = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Teal = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		White = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yellow = 13,
	}
	
	public enum CustomInstance_ImageSearchFreshness
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 2,
	}
	
	public enum CustomInstance_ImageSearchImageContent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Face = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Portrait = 1,
	}
	
	public enum CustomInstance_ImageSearchImageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AnimatedGif = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Clipart = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Line = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Photo = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Shopping = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Transparent = 5,
	}
	
	public enum CustomInstance_ImageSearchLicense
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Any = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Public = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Share = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ShareCommercially = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Modify = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ModifyCommercially = 6,
	}
	
	public enum CustomInstance_ImageSearchSafeSearch
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Off = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Moderate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Strict = 2,
	}
	
	public enum CustomInstance_ImageSearchSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Small = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Medium = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Large = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Wallpaper = 4,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
