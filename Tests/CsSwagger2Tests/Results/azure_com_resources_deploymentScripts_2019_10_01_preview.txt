//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Object model for the Azure CLI script.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureCliScript
	{
		
		/// <summary>
		/// Properties of the Azure CLI script object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AzureCliScriptProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the Azure CLI script object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureCliScriptProperties
	{
		
		/// <summary>
		/// Azure CLI module version to be used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="azCliVersion")]
		public string AzCliVersion { get; set; }
	}
	
	/// <summary>
	/// Object model for the Azure PowerShell script.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzurePowerShellScript
	{
		
		/// <summary>
		/// Properties of the Azure PowerShell script object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AzurePowerShellScriptProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the Azure PowerShell script object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzurePowerShellScriptProperties
	{
		
		/// <summary>
		/// Azure PowerShell module version to be used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="azPowerShellVersion")]
		public string AzPowerShellVersion { get; set; }
	}
	
	/// <summary>
	/// Common properties for all Azure resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureResourceBase
	{
		
		/// <summary>
		/// String Id used to locate any resource on Azure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The details of the error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DefaultErrorResponse
	{
		
		/// <summary>
		/// One of a server-defined set of error codes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Detailed errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public DefaultErrorResponse[] Details { get; set; }
		
		/// <summary>
		/// A human-readable representation of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Deployment script object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeploymentScript
	{
		
		/// <summary>
		/// Managed identity generic object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public ManagedServiceIdentity Identity { get; set; }
		
		/// <summary>
		/// Type of the script.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public DeploymentScriptKind Kind { get; set; }
		
		/// <summary>
		/// The location of the ACI and the storage account for the deployment script.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Managed identity generic object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedServiceIdentity
	{
		
		/// <summary>
		/// Type of the managed identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ManagedServiceIdentityType> Type { get; set; }
		
		/// <summary>
		/// The list of user-assigned managed identities associated with the resource. Key is the Azure resource Id of the managed identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, UserAssignedIdentity> UserAssignedIdentities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ManagedServiceIdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserAssigned = 0,
	}
	
	/// <summary>
	/// User-assigned managed identity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserAssignedIdentity
	{
		
		/// <summary>
		/// Client App Id associated with this identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Azure Active Directory principal ID associated with this identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DeploymentScriptKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzurePowerShell = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureCLI = 1,
	}
	
	/// <summary>
	/// List of deployment scripts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeploymentScriptListResult
	{
		
		/// <summary>
		/// The URL to use for getting the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of deployment scripts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DeploymentScript[] Value { get; set; }
	}
	
	/// <summary>
	/// Common properties for the deployment script.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeploymentScriptPropertiesBase
	{
		
		/// <summary>
		/// The clean up preference when the script execution gets in a terminal state. Default setting is 'Always'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cleanupPreference")]
		public System.Nullable<DeploymentScriptPropertiesBaseCleanupPreference> CleanupPreference { get; set; }
		
		/// <summary>
		/// List of script outputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputs")]
		public System.Collections.Generic.Dictionary<string, object> Outputs { get; set; }
		
		/// <summary>
		/// State of the script execution. This only appears in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<DeploymentScriptPropertiesBaseProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// Generic object modeling results of script execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ScriptStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DeploymentScriptPropertiesBaseCleanupPreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Always = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnSuccess = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnExpiration = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DeploymentScriptPropertiesBaseProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProvisioningResources = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 5,
	}
	
	/// <summary>
	/// Generic object modeling results of script execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScriptStatus
	{
		
		/// <summary>
		/// ACI resource Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerInstanceId")]
		public string ContainerInstanceId { get; set; }
		
		/// <summary>
		/// End time of the script execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The details of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public DefaultErrorResponse Error { get; set; }
		
		/// <summary>
		/// Time the deployment script resource will expire.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public System.Nullable<System.DateTimeOffset> ExpirationTime { get; set; }
		
		/// <summary>
		/// Start time of the script execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Storage account resource Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountId")]
		public string StorageAccountId { get; set; }
	}
	
	/// <summary>
	/// Deployment script parameters to be updated. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeploymentScriptUpdateParameter
	{
		
		/// <summary>
		/// Resource tags to be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The environment variable to pass to the script in the container instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnvironmentVariable
	{
		
		/// <summary>
		/// The name of the environment variable.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the secure environment variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secureValue")]
		public string SecureValue { get; set; }
		
		/// <summary>
		/// The value of the environment variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Script log properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LogProperties
	{
		
		/// <summary>
		/// Script execution logs in text format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="log")]
		public string Log { get; set; }
	}
	
	/// <summary>
	/// Common configuration settings for both Azure PowerShell and Azure CLI scripts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScriptConfigurationBase
	{
		
		/// <summary>
		/// Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location 'West US 2' 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public string Arguments { get; set; }
		
		/// <summary>
		/// The environment variables to pass over to the script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public EnvironmentVariable[] EnvironmentVariables { get; set; }
		
		/// <summary>
		/// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forceUpdateTag")]
		public string ForceUpdateTag { get; set; }
		
		/// <summary>
		/// Uri for the script. This is the entry point for the external script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryScriptUri")]
		public string PrimaryScriptUri { get; set; }
		
		/// <summary>
		/// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="retentionInterval")]
		public string RetentionInterval { get; set; }
		
		/// <summary>
		/// Script body.
		/// Max length: 32000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptContent")]
		[System.ComponentModel.DataAnnotations.MaxLength(32000)]
		public string ScriptContent { get; set; }
		
		/// <summary>
		/// Supporting files for the external script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportingScriptUris")]
		public string[] SupportingScriptUris { get; set; }
		
		/// <summary>
		/// Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
	}
	
	/// <summary>
	/// Script execution log object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScriptLog
	{
		
		/// <summary>
		/// Script log properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public LogProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Deployment script execution logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScriptLogsList
	{
		
		/// <summary>
		/// Deployment scripts logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ScriptLog[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all deployment scripts for a given subscription.
		/// DeploymentScripts_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.Resources/deploymentScripts
		/// </summary>
		/// <param name="subscriptionId">Subscription Id which forms part of the URI for every service call.</param>
		/// <param name="api_version">Client Api version.</param>
		/// <returns>OK -- Returns a list of deployment scripts.</returns>
		public async Task<DeploymentScriptListResult> DeploymentScripts_ListBySubscriptionAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Resources/deploymentScripts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentScriptListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists deployments scripts.
		/// DeploymentScripts_ListByResourceGroup subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts
		/// </summary>
		/// <param name="subscriptionId">Subscription Id which forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.</param>
		/// <param name="api_version">Client Api version.</param>
		/// <returns>OK -- Returns a list of deployment scripts.</returns>
		public async Task<DeploymentScriptListResult> DeploymentScripts_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Resources/deploymentScripts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentScriptListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a deployment script with a given name.
		/// DeploymentScripts_Get subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}
		/// </summary>
		/// <param name="subscriptionId">Subscription Id which forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.</param>
		/// <param name="scriptName">Name of the deployment script.</param>
		/// <param name="api_version">Client Api version.</param>
		/// <returns>OK -- Returns information about the deployment script.</returns>
		public async Task<DeploymentScript> DeploymentScripts_GetAsync(string subscriptionId, string resourceGroupName, string scriptName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Resources/deploymentScripts/"+ (scriptName==null? "" : System.Uri.EscapeDataString(scriptName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentScript>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a deployment script.
		/// DeploymentScripts_Create subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}
		/// </summary>
		/// <param name="subscriptionId">Subscription Id which forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.</param>
		/// <param name="scriptName">Name of the deployment script.</param>
		/// <param name="api_version">Client Api version.</param>
		/// <param name="requestBody">Deployment script supplied to the operation.</param>
		/// <returns>OK -- Deployment script is updated.</returns>
		public async Task<DeploymentScript> DeploymentScripts_CreateAsync(string subscriptionId, string resourceGroupName, string scriptName, string api_version, DeploymentScript requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Resources/deploymentScripts/"+ (scriptName==null? "" : System.Uri.EscapeDataString(scriptName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentScript>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a deployment script. When operation completes, status code 200 returned without content.
		/// DeploymentScripts_Delete subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}
		/// </summary>
		/// <param name="subscriptionId">Subscription Id which forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.</param>
		/// <param name="scriptName">Name of the deployment script.</param>
		/// <param name="api_version">Client Api version.</param>
		/// <returns>OK -- Deployment script deleted.</returns>
		public async Task DeploymentScripts_DeleteAsync(string subscriptionId, string resourceGroupName, string scriptName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Resources/deploymentScripts/"+ (scriptName==null? "" : System.Uri.EscapeDataString(scriptName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates deployment script tags with specified values.
		/// DeploymentScripts_Update subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}
		/// </summary>
		/// <param name="subscriptionId">Subscription Id which forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.</param>
		/// <param name="scriptName">Name of the deployment script.</param>
		/// <param name="api_version">Client Api version.</param>
		/// <param name="requestBody">Deployment script resource with the tags to be updated.</param>
		/// <returns>OK -- Deployment script tags are updated.</returns>
		public async Task<DeploymentScript> DeploymentScripts_UpdateAsync(string subscriptionId, string resourceGroupName, string scriptName, string api_version, DeploymentScriptUpdateParameter requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Resources/deploymentScripts/"+ (scriptName==null? "" : System.Uri.EscapeDataString(scriptName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentScript>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets deployment script logs for a given deployment script name.
		/// DeploymentScripts_GetLogs subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}/logs
		/// </summary>
		/// <param name="subscriptionId">Subscription Id which forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.</param>
		/// <param name="scriptName">Name of the deployment script.</param>
		/// <param name="api_version">Client Api version.</param>
		/// <returns>OK -- Returns deployment script logs if available.</returns>
		public async Task<ScriptLogsList> DeploymentScripts_GetLogsAsync(string subscriptionId, string resourceGroupName, string scriptName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Resources/deploymentScripts/"+ (scriptName==null? "" : System.Uri.EscapeDataString(scriptName))+"/logs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScriptLogsList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets deployment script logs for a given deployment script name.
		/// DeploymentScripts_GetLogsDefault subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}/logs/default
		/// </summary>
		/// <param name="subscriptionId">Subscription Id which forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.</param>
		/// <param name="scriptName">Name of the deployment script.</param>
		/// <param name="api_version">Client Api version.</param>
		/// <returns>OK -- Returns deployment script logs if available.</returns>
		public async Task<ScriptLog> DeploymentScripts_GetLogsDefaultAsync(string subscriptionId, string resourceGroupName, string scriptName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Resources/deploymentScripts/"+ (scriptName==null? "" : System.Uri.EscapeDataString(scriptName))+"/logs/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScriptLog>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
