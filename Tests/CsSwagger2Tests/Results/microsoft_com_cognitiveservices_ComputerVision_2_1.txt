//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An object describing whether the image contains adult-oriented content and/or is racy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AdultInfo
	{
		
		/// <summary>
		/// Score from 0 to 1 that indicates how much the content is considered adult-oriented within the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adultScore")]
		public System.Nullable<System.Double> AdultScore { get; set; }
		
		/// <summary>
		/// Score from 0 to 1 that indicates how gory is the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goreScore")]
		public System.Nullable<System.Double> GoreScore { get; set; }
		
		/// <summary>
		/// A value indicating if the image contains adult-oriented content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAdultContent")]
		public System.Nullable<System.Boolean> IsAdultContent { get; set; }
		
		/// <summary>
		/// A value indicating if the image is gory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isGoryContent")]
		public System.Nullable<System.Boolean> IsGoryContent { get; set; }
		
		/// <summary>
		/// A value indicating if the image is racy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRacyContent")]
		public System.Nullable<System.Boolean> IsRacyContent { get; set; }
		
		/// <summary>
		/// Score from 0 to 1 that indicates how suggestive is the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="racyScore")]
		public System.Nullable<System.Double> RacyScore { get; set; }
	}
	
	/// <summary>
	/// Result of AreaOfInterest operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AreaOfInterestResult
	{
		
		/// <summary>
		/// A bounding box for an area inside an image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="areaOfInterest")]
		public BoundingRect AreaOfInterest { get; set; }
		
		/// <summary>
		/// Image metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ImageMetadata Metadata { get; set; }
		
		/// <summary>
		/// Id of the REST API request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// A bounding box for an area inside an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BoundingRect
	{
		
		/// <summary>
		/// Height measured from the top-left point of the area, in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="h")]
		public System.Nullable<System.Int32> H { get; set; }
		
		/// <summary>
		/// Width measured from the top-left point of the area, in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="w")]
		public System.Nullable<System.Int32> W { get; set; }
		
		/// <summary>
		/// X-coordinate of the top left point of the area, in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="x")]
		public System.Nullable<System.Int32> X { get; set; }
		
		/// <summary>
		/// Y-coordinate of the top left point of the area, in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="y")]
		public System.Nullable<System.Int32> Y { get; set; }
	}
	
	/// <summary>
	/// Image metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageMetadata
	{
		
		/// <summary>
		/// Image format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// Image height, in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Image width, in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// An object describing identified category.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Category
	{
		
		/// <summary>
		/// An object describing additional category details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public CategoryDetail Detail { get; set; }
		
		/// <summary>
		/// Name of the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Scoring of the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Double> Score { get; set; }
	}
	
	/// <summary>
	/// An object describing additional category details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CategoryDetail
	{
		
		/// <summary>
		/// An array of celebrities if any identified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="celebrities")]
		public CelebritiesModel[] Celebrities { get; set; }
		
		/// <summary>
		/// An array of landmarks if any identified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="landmarks")]
		public LandmarksModel[] Landmarks { get; set; }
	}
	
	/// <summary>
	/// An object describing possible celebrity identification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CelebritiesModel
	{
		
		/// <summary>
		/// Confidence level for the celebrity recognition as a value ranging from 0 to 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Double> Confidence { get; set; }
		
		/// <summary>
		/// An object describing face rectangle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="faceRectangle")]
		public FaceRectangle FaceRectangle { get; set; }
		
		/// <summary>
		/// Name of the celebrity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// An object describing face rectangle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FaceRectangle
	{
		
		/// <summary>
		/// Height measured from the top-left point of the face, in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// X-coordinate of the top left point of the face, in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="left")]
		public System.Nullable<System.Int32> Left { get; set; }
		
		/// <summary>
		/// Y-coordinate of the top left point of the face, in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="top")]
		public System.Nullable<System.Int32> Top { get; set; }
		
		/// <summary>
		/// Width measured from the top-left point of the face, in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// A landmark recognized in the image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LandmarksModel
	{
		
		/// <summary>
		/// Confidence level for the landmark recognition as a value ranging from 0 to 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Double> Confidence { get; set; }
		
		/// <summary>
		/// Name of the landmark.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Result of domain-specific classifications for the domain of celebrities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CelebrityResults
	{
		
		/// <summary>
		/// List of celebrities recognized in the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="celebrities")]
		public CelebritiesModel[] Celebrities { get; set; }
		
		/// <summary>
		/// Image metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ImageMetadata Metadata { get; set; }
		
		/// <summary>
		/// Id of the REST API request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// An object providing additional metadata describing color attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ColorInfo
	{
		
		/// <summary>
		/// Possible accent color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accentColor")]
		public string AccentColor { get; set; }
		
		/// <summary>
		/// Possible dominant background color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dominantColorBackground")]
		public string DominantColorBackground { get; set; }
		
		/// <summary>
		/// Possible dominant foreground color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dominantColorForeground")]
		public string DominantColorForeground { get; set; }
		
		/// <summary>
		/// An array of possible dominant colors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dominantColors")]
		public string[] DominantColors { get; set; }
		
		/// <summary>
		/// A value indicating if the image is black and white.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isBWImg")]
		public System.Nullable<System.Boolean> IsBWImg { get; set; }
	}
	
	/// <summary>
	/// Details about the API request error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputerVisionError
	{
		
		/// <summary>
		/// The error code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public ComputerVisionErrorCode Code { get; set; }
		
		/// <summary>
		/// A message explaining the error reported by the service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// A unique request identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ComputerVisionErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidImageFormat = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnsupportedMediaType = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidImageUrl = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSupportedFeature = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSupportedImage = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Timeout = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalServerError = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidImageSize = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadArgument = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DetectFaceError = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSupportedLanguage = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidThumbnailSize = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidDetails = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidModel = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CancelledRequest = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSupportedVisualFeature = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailedToProcess = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unspecified = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StorageException = 18,
	}
	
	/// <summary>
	/// Result of a DetectImage call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DetectResult
	{
		
		/// <summary>
		/// Image metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ImageMetadata Metadata { get; set; }
		
		/// <summary>
		/// An array of detected objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objects")]
		public DetectedObject[] Objects { get; set; }
		
		/// <summary>
		/// Id of the REST API request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// An object detected in an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DetectedObject
	{
		
		/// <summary>
		/// Confidence score of having observed the object in the image, as a value ranging from 0 to 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Double> Confidence { get; set; }
		
		/// <summary>
		/// Label for the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		/// <summary>
		/// An object detected inside an image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public ObjectHierarchy Parent { get; set; }
		
		/// <summary>
		/// A bounding box for an area inside an image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rectangle")]
		public BoundingRect Rectangle { get; set; }
	}
	
	/// <summary>
	/// An object detected inside an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ObjectHierarchy
	{
		
		/// <summary>
		/// Confidence score of having observed the object in the image, as a value ranging from 0 to 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Double> Confidence { get; set; }
		
		/// <summary>
		/// Label for the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		/// <summary>
		/// An object detected inside an image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public ObjectHierarchy Parent { get; set; }
	}
	
	/// <summary>
	/// A brand detected in an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DetectedBrand
	{
		
		/// <summary>
		/// Confidence score of having observed the brand in the image, as a value ranging from 0 to 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Double> Confidence { get; set; }
		
		/// <summary>
		/// Label for the brand.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A bounding box for an area inside an image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rectangle")]
		public BoundingRect Rectangle { get; set; }
	}
	
	/// <summary>
	/// Result of image analysis using a specific domain model including additional metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DomainModelResults
	{
		
		/// <summary>
		/// Image metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ImageMetadata Metadata { get; set; }
		
		/// <summary>
		/// Id of the REST API request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Model-specific response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
	}
	
	/// <summary>
	/// An object describing a face identified in the image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FaceDescription
	{
		
		/// <summary>
		/// Possible age of the face.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="age")]
		public System.Nullable<System.Int32> Age { get; set; }
		
		/// <summary>
		/// An object describing face rectangle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="faceRectangle")]
		public FaceRectangle FaceRectangle { get; set; }
		
		/// <summary>
		/// Possible gender of the face.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public System.Nullable<FaceDescriptionGender> Gender { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum FaceDescriptionGender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Male = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Female = 1,
	}
	
	/// <summary>
	/// Result of AnalyzeImage operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageAnalysis
	{
		
		/// <summary>
		/// An object describing whether the image contains adult-oriented content and/or is racy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adult")]
		public AdultInfo Adult { get; set; }
		
		/// <summary>
		/// Array of brands detected in the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brands")]
		public DetectedBrand[] Brands { get; set; }
		
		/// <summary>
		/// An array indicating identified categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
		
		/// <summary>
		/// An object providing additional metadata describing color attributes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public ColorInfo Color { get; set; }
		
		/// <summary>
		/// A collection of content tags, along with a list of captions sorted by confidence level, and image metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public ImageDescriptionDetails Description { get; set; }
		
		/// <summary>
		/// An array of possible faces within the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="faces")]
		public FaceDescription[] Faces { get; set; }
		
		/// <summary>
		/// An object providing possible image types and matching confidence levels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageType")]
		public ImageType ImageType { get; set; }
		
		/// <summary>
		/// Image metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ImageMetadata Metadata { get; set; }
		
		/// <summary>
		/// Array of objects describing what was detected in the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objects")]
		public DetectedObject[] Objects { get; set; }
		
		/// <summary>
		/// Id of the REST API request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// A list of tags with confidence level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public ImageTag[] Tags { get; set; }
	}
	
	/// <summary>
	/// A collection of content tags, along with a list of captions sorted by confidence level, and image metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageDescriptionDetails
	{
		
		/// <summary>
		/// A list of captions, sorted by confidence level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="captions")]
		public ImageCaption[] Captions { get; set; }
		
		/// <summary>
		/// A collection of image tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// An image caption, i.e. a brief description of what the image depicts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageCaption
	{
		
		/// <summary>
		/// The level of confidence the service has in the caption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Double> Confidence { get; set; }
		
		/// <summary>
		/// The text of the caption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// An object providing possible image types and matching confidence levels.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageType
	{
		
		/// <summary>
		/// Confidence level that the image is a clip art.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clipArtType")]
		public System.Nullable<System.Int32> ClipArtType { get; set; }
		
		/// <summary>
		/// Confidence level that the image is a line drawing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineDrawingType")]
		public System.Nullable<System.Int32> LineDrawingType { get; set; }
	}
	
	/// <summary>
	/// An entity observation in the image, along with the confidence score.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTag
	{
		
		/// <summary>
		/// The level of confidence that the entity was observed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Double> Confidence { get; set; }
		
		/// <summary>
		/// Optional hint/details for this tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hint")]
		public string Hint { get; set; }
		
		/// <summary>
		/// Name of the entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A collection of content tags, along with a list of captions sorted by confidence level, and image metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageDescription
	{
		
		/// <summary>
		/// A collection of content tags, along with a list of captions sorted by confidence level, and image metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public ImageDescriptionDetails Description { get; set; }
		
		/// <summary>
		/// Image metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ImageMetadata Metadata { get; set; }
		
		/// <summary>
		/// Id of the REST API request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageUrl
	{
		
		/// <summary>
		/// Publicly reachable URL of an image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Result of domain-specific classifications for the domain of landmarks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LandmarkResults
	{
		
		/// <summary>
		/// List of landmarks recognized in the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="landmarks")]
		public LandmarksModel[] Landmarks { get; set; }
		
		/// <summary>
		/// Image metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ImageMetadata Metadata { get; set; }
		
		/// <summary>
		/// Id of the REST API request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// Result of the List Domain Models operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListModelsResult
	{
		
		/// <summary>
		/// An array of supported models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="models")]
		public ModelDescription[] Models { get; set; }
	}
	
	/// <summary>
	/// An object describing supported model by name and categories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ModelDescription
	{
		
		/// <summary>
		/// Categories of the model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public string[] Categories { get; set; }
		
		/// <summary>
		/// The name of the model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// An object describing a single recognized line of text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OcrLine
	{
		
		/// <summary>
		/// Bounding box of a recognized line. The four integers represent the x-coordinate of the left edge, the y-coordinate of the top edge, width, and height of the bounding box, in the coordinate system of the input image, after it has been rotated around its center according to the detected text angle (see textAngle property), with the origin at the top-left corner, and the y-axis pointing down.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boundingBox")]
		public string BoundingBox { get; set; }
		
		/// <summary>
		/// An array of objects, where each object represents a recognized word.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="words")]
		public OcrWord[] Words { get; set; }
	}
	
	/// <summary>
	/// Information on a recognized word.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OcrWord
	{
		
		/// <summary>
		/// Bounding box of a recognized word. The four integers represent the x-coordinate of the left edge, the y-coordinate of the top edge, width, and height of the bounding box, in the coordinate system of the input image, after it has been rotated around its center according to the detected text angle (see textAngle property), with the origin at the top-left corner, and the y-axis pointing down.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boundingBox")]
		public string BoundingBox { get; set; }
		
		/// <summary>
		/// String value of a recognized word.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// A region consists of multiple lines (e.g. a column of text in a multi-column document).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OcrRegion
	{
		
		/// <summary>
		/// Bounding box of a recognized region. The four integers represent the x-coordinate of the left edge, the y-coordinate of the top edge, width, and height of the bounding box, in the coordinate system of the input image, after it has been rotated around its center according to the detected text angle (see textAngle property), with the origin at the top-left corner, and the y-axis pointing down.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boundingBox")]
		public string BoundingBox { get; set; }
		
		/// <summary>
		/// An array of recognized lines of text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lines")]
		public OcrLine[] Lines { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OcrResult
	{
		
		/// <summary>
		/// The BCP-47 language code of the text in the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// Orientation of the text recognized in the image, if requested. The value (up, down, left, or right) refers to the direction that the top of the recognized text is facing, after the image has been rotated around its center according to the detected text angle (see textAngle property).
		///If detection of the orientation was not requested, or no text is detected, the value is 'NotDetected'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orientation")]
		public string Orientation { get; set; }
		
		/// <summary>
		/// An array of objects, where each object represents a region of recognized text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public OcrRegion[] Regions { get; set; }
		
		/// <summary>
		/// The angle, in radians, of the detected text with respect to the closest horizontal or vertical direction. After rotating the input image clockwise by this angle, the recognized text lines become horizontal or vertical. In combination with the orientation property it can be used to overlay recognition results correctly on the original image, by rotating either the original image or recognition results by a suitable angle around the center of the original image. If the angle cannot be confidently detected, this property is not present. If the image contains text at different angles, only part of the text will be recognized correctly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textAngle")]
		public System.Nullable<System.Double> TextAngle { get; set; }
	}
	
	/// <summary>
	/// The results of a image tag operation, including any tags and image metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TagResult
	{
		
		/// <summary>
		/// Image metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ImageMetadata Metadata { get; set; }
		
		/// <summary>
		/// Id of the REST API request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// A list of tags with confidence level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public ImageTag[] Tags { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// This operation extracts a rich set of visual features based on the image content.
		/// Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response.
		/// A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
		/// AnalyzeImage analyze
		/// </summary>
		/// <param name="visualFeatures">A string indicating what visual feature types to return. Multiple values should be comma-separated. Valid visual feature types include: Categories - categorizes image content according to a taxonomy defined in documentation. Tags - tags the image with a detailed list of words related to the image content. Description - describes the image content with a complete English sentence. Faces - detects if faces are present. If present, generate coordinates, gender and age. ImageType - detects if image is clipart or a line drawing. Color - determines the accent color, dominant color, and whether an image is black&white. Adult - detects if the image is pornographic in nature (depicts nudity or a sex act), or is gory (depicts extreme violence or blood). Sexually suggestive content (aka racy content) is also detected. Objects - detects various objects within an image, including the approximate location. The Objects argument is only available in English. Brands - detects various brands within an image, including the approximate location. The Brands argument is only available in English.</param>
		/// <param name="details">A string indicating which domain-specific details to return. Multiple values should be comma-separated. Valid visual feature types include: Celebrities - identifies celebrities if detected in the image, Landmarks - identifies notable landmarks in the image.</param>
		/// <param name="language">The desired language for output generation. If this parameter is not specified, the default value is &quot;en&quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.</param>
		/// <param name="descriptionExclude">Turn off specified domain models when generating the description.</param>
		/// <param name="requestBody">A JSON document with a URL pointing to the image that is to be analyzed.</param>
		/// <returns>The response include the extracted features in JSON format. Here is the definitions for enumeration types:
		/// ClipartType
		/// Non - clipart = 0, ambiguous = 1, normal - clipart = 2, good - clipart = 3. LineDrawingTypeNon - LineDrawing = 0, LineDrawing = 1.</returns>
		public async Task<ImageAnalysis> AnalyzeImageAsync(string[] visualFeatures, string[] details, AnalyzeImageLanguage language, string[] descriptionExclude, ImageUrl requestBody)
		{
			var requestUri = "analyze?"+string.Join("&", visualFeatures.Select(z => $"visualFeatures={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", details.Select(z => $"details={System.Uri.EscapeDataString(z.ToString())}"))+"&language=" + language+"&"+string.Join("&", descriptionExclude.Select(z => $"descriptionExclude={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImageAnalysis>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation returns a bounding box around the most important area of the image.
		/// A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong.
		/// Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
		/// GetAreaOfInterest areaOfInterest
		/// </summary>
		/// <param name="requestBody">A JSON document with a URL pointing to the image that is to be analyzed.</param>
		/// <returns>The response includes the extracted area of interest in JSON format.</returns>
		public async Task<AreaOfInterestResult> GetAreaOfInterestAsync(ImageUrl requestBody)
		{
			var requestUri = "areaOfInterest";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AreaOfInterestResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable.
		/// Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
		/// A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
		/// DescribeImage describe
		/// </summary>
		/// <param name="maxCandidates">Maximum number of candidate descriptions to be returned.  The default is 1.</param>
		/// <param name="language">The desired language for output generation. If this parameter is not specified, the default value is &quot;en&quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.</param>
		/// <param name="descriptionExclude">Turn off specified domain models when generating the description.</param>
		/// <param name="requestBody">A JSON document with a URL pointing to the image that is to be analyzed.</param>
		/// <returns>Image description object.</returns>
		public async Task<ImageDescription> DescribeImageAsync(int maxCandidates, AnalyzeImageLanguage language, string[] descriptionExclude, ImageUrl requestBody)
		{
			var requestUri = "describe?maxCandidates="+maxCandidates+"&language=" + language+"&"+string.Join("&", descriptionExclude.Select(z => $"descriptionExclude={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImageDescription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Performs object detection on the specified image.
		/// Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
		/// A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
		/// DetectObjects detect
		/// </summary>
		/// <param name="requestBody">A JSON document with a URL pointing to the image that is to be analyzed.</param>
		/// <returns>The response include the detected objects in JSON format.</returns>
		public async Task<DetectResult> DetectObjectsAsync(ImageUrl requestBody)
		{
			var requestUri = "detect";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DetectResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image.
		/// A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong.
		/// Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
		/// GenerateThumbnail generateThumbnail
		/// </summary>
		/// <param name="width">Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
		/// Minimum: 1
		/// Maximum: 1024
		// </param>
		/// <param name="height">Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
		/// Minimum: 1
		/// Maximum: 1024
		// </param>
		/// <param name="smartCropping">Boolean flag for enabling smart cropping.</param>
		/// <param name="requestBody">A JSON document with a URL pointing to the image that is to be analyzed.</param>
		/// <returns>The generated thumbnail in binary format.</returns>
		public async Task GenerateThumbnailAsync(int width, int height, bool smartCropping, ImageUrl requestBody)
		{
			var requestUri = "generateThumbnail?width="+width+"&height="+height+"&smartCropping="+smartCropping;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation returns the list of domain-specific models that are supported by the Computer Vision API. Currently, the API supports following domain-specific models: celebrity recognizer, landmark recognizer.
		/// A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
		/// ListModels models
		/// </summary>
		/// <returns>List of available domain models.</returns>
		public async Task<ListModelsResult> ListModelsAsync()
		{
			var requestUri = "models";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListModelsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks.
		/// Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
		/// A successful response will be returned in JSON.
		/// If the request failed, the response will contain an error code and a message to help understand what went wrong.
		/// AnalyzeImageByDomain models/{model}/analyze
		/// </summary>
		/// <param name="model">The domain-specific content to recognize.</param>
		/// <param name="language">The desired language for output generation. If this parameter is not specified, the default value is &quot;en&quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.</param>
		/// <param name="requestBody">A JSON document with a URL pointing to the image that is to be analyzed.</param>
		/// <returns>Analysis result based on the domain model.</returns>
		public async Task<DomainModelResults> AnalyzeImageByDomainAsync(string model, AnalyzeImageLanguage language, ImageUrl requestBody)
		{
			var requestUri = "models/"+ (model==null? "" : System.Uri.EscapeDataString(model))+"/analyze&language=" + language;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DomainModelResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream.
		/// Upon success, the OCR results will be returned.
		/// Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError.
		/// RecognizePrintedText ocr
		/// </summary>
		/// <param name="detectOrientation">Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down).</param>
		/// <param name="language">The BCP-47 language code of the text to be detected in the image. The default value is 'unk'.</param>
		/// <param name="requestBody">A JSON document with a URL pointing to the image that is to be analyzed.</param>
		/// <returns>The OCR results in the hierarchy of region/line/word. The results include text, bounding box for regions, lines and words. The angle, in radians, of the detected text with respect to the closest horizontal or vertical direction. After rotating the input image clockwise by this angle, the recognized text lines become horizontal or vertical. In combination with the orientation property it can be used to overlay recognition results correctly on the original image, by rotating either the original image or recognition results by a suitable angle around the center of the original image. If the angle cannot be confidently detected, this property is not present. If the image contains text at different angles, only part of the text will be recognized correctly.</returns>
		public async Task<OcrResult> RecognizePrintedTextAsync(bool detectOrientation, RecognizePrintedTextLanguage language, ImageUrl requestBody)
		{
			var requestUri = "ocr?detectOrientation="+detectOrientation+"&language=" + language;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OcrResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag "ascomycete" may be accompanied by the hint "fungus".
		/// Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
		/// A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
		/// TagImage tag
		/// </summary>
		/// <param name="language">The desired language for output generation. If this parameter is not specified, the default value is &quot;en&quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.</param>
		/// <param name="requestBody">A JSON document with a URL pointing to the image that is to be analyzed.</param>
		/// <returns>Image tags object.</returns>
		public async Task<TagResult> TagImageAsync(AnalyzeImageLanguage language, ImageUrl requestBody)
		{
			var requestUri = "tag?language=" + language;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum AnalyzeImageLanguage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh = 4,
	}
	
	public enum RecognizePrintedTextLanguage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unk = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-Hans")]
		zhMinusHans = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-Hant")]
		zhMinusHant = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cs = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		da = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fi = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		el = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hu = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nb = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pl = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sv = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ro = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sr-Cyrl")]
		srMinusCyrl = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sr-Latn")]
		srMinusLatn = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sk = 26,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
