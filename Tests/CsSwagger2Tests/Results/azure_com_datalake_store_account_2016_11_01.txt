//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Subscription-level properties and limits for Data Lake Store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CapabilityInformation
	{
		
		/// <summary>
		/// The current number of accounts under this subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountCount")]
		public System.Nullable<System.Int32> AccountCount { get; set; }
		
		/// <summary>
		/// The maximum supported number of accounts under this subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAccountCount")]
		public System.Nullable<System.Int32> MaxAccountCount { get; set; }
		
		/// <summary>
		/// The Boolean value of true or false to indicate the maintenance state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="migrationState")]
		public System.Nullable<System.Boolean> MigrationState { get; set; }
		
		/// <summary>
		/// The subscription state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<CapabilityInformationState> State { get; set; }
		
		/// <summary>
		/// The subscription credentials that uniquely identifies the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CapabilityInformationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Registered = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unregistered = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Warned = 4,
	}
	
	/// <summary>
	/// Data Lake Store account name availability check parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityParameters
	{
		
		/// <summary>
		/// The Data Lake Store name to check availability for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource type. Note: This should not be set by the user, as the constant value is Microsoft.DataLakeStore/accounts
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CheckNameAvailabilityParametersType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckNameAvailabilityParametersType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.DataLakeStore/accounts")]
		Microsoft_DataLakeStore_accounts = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateDataLakeStoreAccountParameters
	{
		
		/// <summary>
		/// The encryption identity properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public EncryptionIdentity Identity { get; set; }
		
		/// <summary>
		/// The resource location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CreateDataLakeStoreAccountProperties Properties { get; set; }
		
		/// <summary>
		/// The resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateDataLakeStoreAccountProperties
	{
		
		/// <summary>
		/// The default owner group for all new folders and files created in the Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultGroup")]
		public string DefaultGroup { get; set; }
		
		/// <summary>
		/// The encryption configuration for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionConfig")]
		public EncryptionConfig EncryptionConfig { get; set; }
		
		/// <summary>
		/// The current state of encryption for this Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionState")]
		public System.Nullable<CreateDataLakeStoreAccountPropertiesEncryptionState> EncryptionState { get; set; }
		
		/// <summary>
		/// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallAllowAzureIps")]
		public CreateDataLakeStoreAccountPropertiesEncryptionState FirewallAllowAzureIps { get; set; }
		
		/// <summary>
		/// The list of firewall rules associated with this Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallRules")]
		public CreateFirewallRuleWithAccountParameters[] FirewallRules { get; set; }
		
		/// <summary>
		/// The current state of the IP address firewall for this Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallState")]
		public CreateDataLakeStoreAccountPropertiesEncryptionState FirewallState { get; set; }
		
		/// <summary>
		/// The commitment tier to use for next month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newTier")]
		public System.Nullable<CreateDataLakeStoreAccountPropertiesNewTier> NewTier { get; set; }
		
		/// <summary>
		/// The current state of the trusted identity provider feature for this Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trustedIdProviderState")]
		public CreateDataLakeStoreAccountPropertiesEncryptionState TrustedIdProviderState { get; set; }
		
		/// <summary>
		/// The list of trusted identity providers associated with this Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trustedIdProviders")]
		public CreateTrustedIdProviderWithAccountParameters[] TrustedIdProviders { get; set; }
		
		/// <summary>
		/// The list of virtual network rules associated with this Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualNetworkRules")]
		public CreateVirtualNetworkRuleWithAccountParameters[] VirtualNetworkRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CreateDataLakeStoreAccountPropertiesEncryptionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// The parameters used to create a new firewall rule while creating a new Data Lake Store account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateFirewallRuleWithAccountParameters
	{
		
		/// <summary>
		/// The unique name of the firewall rule to create.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The firewall rule properties to use when creating a new firewall rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CreateOrUpdateFirewallRuleProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CreateDataLakeStoreAccountPropertiesNewTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Consumption = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commitment_1TB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commitment_10TB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commitment_100TB = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commitment_500TB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commitment_1PB = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commitment_5PB = 6,
	}
	
	/// <summary>
	/// The parameters used to create a new trusted identity provider while creating a new Data Lake Store account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateTrustedIdProviderWithAccountParameters
	{
		
		/// <summary>
		/// The unique name of the trusted identity provider to create.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The trusted identity provider properties to use when creating a new trusted identity provider.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CreateOrUpdateTrustedIdProviderProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The parameters used to create a new virtual network rule while creating a new Data Lake Store account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateVirtualNetworkRuleWithAccountParameters
	{
		
		/// <summary>
		/// The unique name of the virtual network rule to create.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The virtual network rule properties to use when creating a new virtual network rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CreateOrUpdateVirtualNetworkRuleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The parameters used to create a new firewall rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateOrUpdateFirewallRuleParameters
	{
		
		/// <summary>
		/// The firewall rule properties to use when creating a new firewall rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CreateOrUpdateFirewallRuleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The firewall rule properties to use when creating a new firewall rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateOrUpdateFirewallRuleProperties
	{
		
		/// <summary>
		/// The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endIpAddress")]
		public string EndIpAddress { get; set; }
		
		/// <summary>
		/// The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startIpAddress")]
		public string StartIpAddress { get; set; }
	}
	
	/// <summary>
	/// The parameters used to create a new trusted identity provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateOrUpdateTrustedIdProviderParameters
	{
		
		/// <summary>
		/// The trusted identity provider properties to use when creating a new trusted identity provider.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CreateOrUpdateTrustedIdProviderProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The trusted identity provider properties to use when creating a new trusted identity provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateOrUpdateTrustedIdProviderProperties
	{
		
		/// <summary>
		/// The URL of this trusted identity provider.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idProvider")]
		public string IdProvider { get; set; }
	}
	
	/// <summary>
	/// The parameters used to create a new virtual network rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateOrUpdateVirtualNetworkRuleParameters
	{
		
		/// <summary>
		/// The virtual network rule properties to use when creating a new virtual network rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CreateOrUpdateVirtualNetworkRuleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The virtual network rule properties to use when creating a new virtual network rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateOrUpdateVirtualNetworkRuleProperties
	{
		
		/// <summary>
		/// The resource identifier for the subnet.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subnetId")]
		public string SubnetId { get; set; }
	}
	
	/// <summary>
	/// Data Lake Store account information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataLakeStoreAccount : Resource
	{
		
		/// <summary>
		/// The encryption identity properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public EncryptionIdentity Identity { get; set; }
		
		/// <summary>
		/// Data Lake Store account properties information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DataLakeStoreAccountProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Basic Data Lake Store account information, returned on list calls.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataLakeStoreAccountBasic : Resource
	{
		
		/// <summary>
		/// The basic account specific properties that are associated with an underlying Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DataLakeStoreAccountPropertiesBasic Properties { get; set; }
	}
	
	/// <summary>
	/// Data Lake Store account list information response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataLakeStoreAccountListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DataLakeStoreAccountBasic[] Value { get; set; }
	}
	
	/// <summary>
	/// Data Lake Store account properties information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataLakeStoreAccountProperties : DataLakeStoreAccountPropertiesBasic
	{
		
		/// <summary>
		/// The commitment tier in use for the current month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTier")]
		public CreateDataLakeStoreAccountPropertiesNewTier CurrentTier { get; set; }
		
		/// <summary>
		/// The default owner group for all new folders and files created in the Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultGroup")]
		public string DefaultGroup { get; set; }
		
		/// <summary>
		/// The encryption configuration for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionConfig")]
		public EncryptionConfig EncryptionConfig { get; set; }
		
		/// <summary>
		/// The current state of encryption provisioning for this Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionProvisioningState")]
		public System.Nullable<DataLakeStoreAccountPropertiesEncryptionProvisioningState> EncryptionProvisioningState { get; set; }
		
		/// <summary>
		/// The current state of encryption for this Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionState")]
		public CreateDataLakeStoreAccountPropertiesEncryptionState EncryptionState { get; set; }
		
		/// <summary>
		/// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallAllowAzureIps")]
		public CreateDataLakeStoreAccountPropertiesEncryptionState FirewallAllowAzureIps { get; set; }
		
		/// <summary>
		/// The list of firewall rules associated with this Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallRules")]
		public FirewallRule[] FirewallRules { get; set; }
		
		/// <summary>
		/// The current state of the IP address firewall for this Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallState")]
		public CreateDataLakeStoreAccountPropertiesEncryptionState FirewallState { get; set; }
		
		/// <summary>
		/// The commitment tier to use for next month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newTier")]
		public CreateDataLakeStoreAccountPropertiesNewTier NewTier { get; set; }
		
		/// <summary>
		/// The current state of the trusted identity provider feature for this Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trustedIdProviderState")]
		public CreateDataLakeStoreAccountPropertiesEncryptionState TrustedIdProviderState { get; set; }
		
		/// <summary>
		/// The list of trusted identity providers associated with this Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trustedIdProviders")]
		public TrustedIdProvider[] TrustedIdProviders { get; set; }
		
		/// <summary>
		/// The list of virtual network rules associated with this Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualNetworkRules")]
		public VirtualNetworkRule[] VirtualNetworkRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataLakeStoreAccountPropertiesEncryptionProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
	}
	
	/// <summary>
	/// Data Lake Store firewall rule information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FirewallRule : SubResource
	{
		
		/// <summary>
		/// The firewall rule properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public FirewallRuleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Data Lake Store trusted identity provider information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrustedIdProvider : SubResource
	{
		
		/// <summary>
		/// The trusted identity provider properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public TrustedIdProviderProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Data Lake Store virtual network rule information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetworkRule : SubResource
	{
		
		/// <summary>
		/// The virtual network rule properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public VirtualNetworkRuleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The basic account specific properties that are associated with an underlying Data Lake Store account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataLakeStoreAccountPropertiesBasic
	{
		
		/// <summary>
		/// The unique identifier associated with this Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The account creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// The full CName endpoint for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// The account last modified time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		/// <summary>
		/// The provisioning status of the Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<DataLakeStoreAccountPropertiesBasicProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// The state of the Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<DataLakeStoreAccountPropertiesBasicState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataLakeStoreAccountPropertiesBasicProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Patching = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspending = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Resuming = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Undeleting = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataLakeStoreAccountPropertiesBasicState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 1,
	}
	
	/// <summary>
	/// The encryption configuration for the account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EncryptionConfig
	{
		
		/// <summary>
		/// Metadata information used by account encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVaultMetaInfo")]
		public KeyVaultMetaInfo KeyVaultMetaInfo { get; set; }
		
		/// <summary>
		/// The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EncryptionConfigType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EncryptionConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserManaged = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceManaged = 1,
	}
	
	/// <summary>
	/// The encryption identity properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EncryptionIdentity
	{
		
		/// <summary>
		/// The principal identifier associated with the encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The tenant identifier associated with the encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The type of encryption being used. Currently the only supported type is 'SystemAssigned'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EncryptionIdentityType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EncryptionIdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemAssigned = 0,
	}
	
	/// <summary>
	/// Data Lake Store firewall rule list information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FirewallRuleListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public FirewallRule[] Value { get; set; }
	}
	
	/// <summary>
	/// The firewall rule properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FirewallRuleProperties
	{
		
		/// <summary>
		/// The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endIpAddress")]
		public string EndIpAddress { get; set; }
		
		/// <summary>
		/// The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIpAddress")]
		public string StartIpAddress { get; set; }
	}
	
	/// <summary>
	/// Metadata information used by account encryption.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyVaultMetaInfo
	{
		
		/// <summary>
		/// The name of the user managed encryption key.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encryptionKeyName")]
		public string EncryptionKeyName { get; set; }
		
		/// <summary>
		/// The version of the user managed encryption key.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encryptionKeyVersion")]
		public string EncryptionKeyVersion { get; set; }
		
		/// <summary>
		/// The resource identifier for the user managed Key Vault being used to encrypt.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyVaultResourceId")]
		public string KeyVaultResourceId { get; set; }
	}
	
	/// <summary>
	/// Data Lake Store account name availability result information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NameAvailabilityInformation
	{
		
		/// <summary>
		/// The message describing why the Data Lake Store account name is not available, if nameAvailable is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The Boolean value of true or false to indicate whether the Data Lake Store account name is available or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// The reason why the Data Lake Store account name is not available, if nameAvailable is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// An available operation for Data Lake Store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The display information for a particular operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplay Display { get; set; }
		
		/// <summary>
		/// The name of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The intended executor of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public System.Nullable<OperationOrigin> Origin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OperationOrigin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		system = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user,system")]
		usersystem = 2,
	}
	
	/// <summary>
	/// The display information for a particular operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDisplay
	{
		
		/// <summary>
		/// A friendly description of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A friendly name of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// The resource provider of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// The resource type of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// The list of available operations for Data Lake Store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// The resource model definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// The resource identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The resource model definition for a nested resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubResource
	{
		
		/// <summary>
		/// The resource identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Data Lake Store trusted identity provider list information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrustedIdProviderListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public TrustedIdProvider[] Value { get; set; }
	}
	
	/// <summary>
	/// The trusted identity provider properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrustedIdProviderProperties
	{
		
		/// <summary>
		/// The URL of this trusted identity provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idProvider")]
		public string IdProvider { get; set; }
	}
	
	/// <summary>
	/// Data Lake Store account information to update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateDataLakeStoreAccountParameters
	{
		
		/// <summary>
		/// Data Lake Store account properties information to be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UpdateDataLakeStoreAccountProperties Properties { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Data Lake Store account properties information to be updated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateDataLakeStoreAccountProperties
	{
		
		/// <summary>
		/// The default owner group for all new folders and files created in the Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultGroup")]
		public string DefaultGroup { get; set; }
		
		/// <summary>
		/// The encryption configuration used to update a user managed Key Vault key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionConfig")]
		public UpdateEncryptionConfig EncryptionConfig { get; set; }
		
		/// <summary>
		/// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallAllowAzureIps")]
		public CreateDataLakeStoreAccountPropertiesEncryptionState FirewallAllowAzureIps { get; set; }
		
		/// <summary>
		/// The list of firewall rules associated with this Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallRules")]
		public UpdateFirewallRuleWithAccountParameters[] FirewallRules { get; set; }
		
		/// <summary>
		/// The current state of the IP address firewall for this Data Lake Store account. Disabling the firewall does not remove existing rules, they will just be ignored until the firewall is re-enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallState")]
		public CreateDataLakeStoreAccountPropertiesEncryptionState FirewallState { get; set; }
		
		/// <summary>
		/// The commitment tier to use for next month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newTier")]
		public CreateDataLakeStoreAccountPropertiesNewTier NewTier { get; set; }
		
		/// <summary>
		/// The current state of the trusted identity provider feature for this Data Lake Store account. Disabling trusted identity provider functionality does not remove the providers, they will just be ignored until this feature is re-enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trustedIdProviderState")]
		public CreateDataLakeStoreAccountPropertiesEncryptionState TrustedIdProviderState { get; set; }
		
		/// <summary>
		/// The list of trusted identity providers associated with this Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trustedIdProviders")]
		public UpdateTrustedIdProviderWithAccountParameters[] TrustedIdProviders { get; set; }
		
		/// <summary>
		/// The list of virtual network rules associated with this Data Lake Store account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualNetworkRules")]
		public UpdateVirtualNetworkRuleWithAccountParameters[] VirtualNetworkRules { get; set; }
	}
	
	/// <summary>
	/// The parameters used to update a firewall rule while updating a Data Lake Store account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateFirewallRuleWithAccountParameters
	{
		
		/// <summary>
		/// The unique name of the firewall rule to update.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The firewall rule properties to use when updating a firewall rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UpdateFirewallRuleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The parameters used to update a trusted identity provider while updating a Data Lake Store account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateTrustedIdProviderWithAccountParameters
	{
		
		/// <summary>
		/// The unique name of the trusted identity provider to update.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The trusted identity provider properties to use when updating a trusted identity provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UpdateTrustedIdProviderProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The parameters used to update a virtual network rule while updating a Data Lake Store account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateVirtualNetworkRuleWithAccountParameters
	{
		
		/// <summary>
		/// The unique name of the virtual network rule to update.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The virtual network rule properties to use when updating a virtual network rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UpdateVirtualNetworkRuleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The encryption configuration used to update a user managed Key Vault key.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateEncryptionConfig
	{
		
		/// <summary>
		/// The Key Vault update information used for user managed key rotation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVaultMetaInfo")]
		public UpdateKeyVaultMetaInfo KeyVaultMetaInfo { get; set; }
	}
	
	/// <summary>
	/// The parameters used to update a firewall rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateFirewallRuleParameters
	{
		
		/// <summary>
		/// The firewall rule properties to use when updating a firewall rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UpdateFirewallRuleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The firewall rule properties to use when updating a firewall rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateFirewallRuleProperties
	{
		
		/// <summary>
		/// The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endIpAddress")]
		public string EndIpAddress { get; set; }
		
		/// <summary>
		/// The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIpAddress")]
		public string StartIpAddress { get; set; }
	}
	
	/// <summary>
	/// The Key Vault update information used for user managed key rotation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateKeyVaultMetaInfo
	{
		
		/// <summary>
		/// The version of the user managed encryption key to update through a key rotation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionKeyVersion")]
		public string EncryptionKeyVersion { get; set; }
	}
	
	/// <summary>
	/// The parameters used to update a trusted identity provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateTrustedIdProviderParameters
	{
		
		/// <summary>
		/// The trusted identity provider properties to use when updating a trusted identity provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UpdateTrustedIdProviderProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The trusted identity provider properties to use when updating a trusted identity provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateTrustedIdProviderProperties
	{
		
		/// <summary>
		/// The URL of this trusted identity provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idProvider")]
		public string IdProvider { get; set; }
	}
	
	/// <summary>
	/// The parameters used to update a virtual network rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateVirtualNetworkRuleParameters
	{
		
		/// <summary>
		/// The virtual network rule properties to use when updating a virtual network rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UpdateVirtualNetworkRuleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The virtual network rule properties to use when updating a virtual network rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateVirtualNetworkRuleProperties
	{
		
		/// <summary>
		/// The resource identifier for the subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetId")]
		public string SubnetId { get; set; }
	}
	
	/// <summary>
	/// Describes the Resource Usage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Usage
	{
		
		/// <summary>
		/// Gets the current count of the allocated resources in the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentValue")]
		public System.Nullable<System.Int32> CurrentValue { get; set; }
		
		/// <summary>
		/// Resource identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Gets the maximum count of the resources that can be allocated in the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The usage names that can be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public UsageName Name { get; set; }
		
		/// <summary>
		/// Gets the unit of measurement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<UsageUnit> Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum UsageUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Seconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Percent = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CountsPerSecond = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BytesPerSecond = 5,
	}
	
	/// <summary>
	/// The response from the List Usages operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UsageListResult
	{
		
		/// <summary>
		/// Gets or sets the list of Storage Resource Usages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Usage[] Value { get; set; }
	}
	
	/// <summary>
	/// The usage names that can be used.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UsageName
	{
		
		/// <summary>
		/// Gets a localized string describing the resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizedValue")]
		public string LocalizedValue { get; set; }
		
		/// <summary>
		/// Gets a string describing the resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Data Lake Store virtual network rule list information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetworkRuleListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public VirtualNetworkRule[] Value { get; set; }
	}
	
	/// <summary>
	/// The virtual network rule properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetworkRuleProperties
	{
		
		/// <summary>
		/// The resource identifier for the subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetId")]
		public string SubnetId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available Data Lake Store REST API operations.
		/// Operations_List providers/Microsoft.DataLakeStore/operations
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully listed the available operations for Data Lake Store.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.DataLakeStore/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of results, if any.
		/// Accounts_List subscriptions/{subscriptionId}/providers/Microsoft.DataLakeStore/accounts
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.</param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.</param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of accounts.</returns>
		public async Task<DataLakeStoreAccountListResult> Accounts_ListAsync(string subscriptionId, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DataLakeStore/accounts&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataLakeStoreAccountListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets subscription-level properties and limits for Data Lake Store specified by resource location.
		/// Locations_GetCapability subscriptions/{subscriptionId}/providers/Microsoft.DataLakeStore/locations/{location}/capability
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="location">The resource location without whitespace.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the subscription-level properties and limits for Data Lake Store specified by resource location.</returns>
		public async Task<CapabilityInformation> Locations_GetCapabilityAsync(string subscriptionId, string location, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DataLakeStore/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/capability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CapabilityInformation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks whether the specified account name is available or taken.
		/// Accounts_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.DataLakeStore/locations/{location}/checkNameAvailability
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="location">The resource location without whitespace.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to check the Data Lake Store account name availability.</param>
		/// <returns>Successfully retrieved the Data Lake Store account name availability information.</returns>
		public async Task<NameAvailabilityInformation> Accounts_CheckNameAvailabilityAsync(string subscriptionId, string location, string api_version, CheckNameAvailabilityParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DataLakeStore/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/checkNameAvailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NameAvailabilityInformation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the current usage count and the limit for the resources of the location under the subscription.
		/// Locations_GetUsage subscriptions/{subscriptionId}/providers/Microsoft.DataLakeStore/locations/{location}/usages
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="location">The resource location without whitespace.</param>
		/// <returns>OK -- current usage count and limit retrieved and returned successfully.</returns>
		public async Task<UsageListResult> Locations_GetUsageAsync(string api_version, string subscriptionId, string location)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DataLakeStore/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/usages?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UsageListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the Data Lake Store accounts within a specific resource group. The response includes a link to the next page of results, if any.
		/// Accounts_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.</param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.</param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">A Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of accounts in the specified resource group.</returns>
		public async Task<DataLakeStoreAccountListResult> Accounts_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeStore/accounts&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataLakeStoreAccountListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified Data Lake Store account.
		/// Accounts_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Store account.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved details of the specified account.</returns>
		public async Task<DataLakeStoreAccount> Accounts_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeStore/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataLakeStoreAccount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates the specified Data Lake Store account.
		/// Accounts_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Store account.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to create the Data Lake Store account.</param>
		/// <returns>Successfully created the account.</returns>
		public async Task<DataLakeStoreAccount> Accounts_CreateAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, CreateDataLakeStoreAccountParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeStore/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataLakeStoreAccount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Data Lake Store account.
		/// Accounts_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Store account.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully deleted the specified account.</returns>
		public async Task Accounts_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeStore/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified Data Lake Store account information.
		/// Accounts_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Store account.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to update the Data Lake Store account.</param>
		/// <returns>Successfully updated the account details.</returns>
		public async Task<DataLakeStoreAccount> Accounts_UpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, UpdateDataLakeStoreAccountParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeStore/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataLakeStoreAccount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Attempts to enable a user managed Key Vault for encryption of the specified Data Lake Store account.
		/// Accounts_EnableKeyVault subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/enableKeyVault
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Store account.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully enabled the user-managed Key Vault settings used for encrypting this Data Lake Store account.</returns>
		public async Task Accounts_EnableKeyVaultAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeStore/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/enableKeyVault&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the Data Lake Store firewall rules within the specified Data Lake Store account.
		/// FirewallRules_ListByAccount subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Store account.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of firewall rules.</returns>
		public async Task<FirewallRuleListResult> FirewallRules_ListByAccountAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeStore/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/firewallRules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FirewallRuleListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified Data Lake Store firewall rule.
		/// FirewallRules_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules/{firewallRuleName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Store account.</param>
		/// <param name="firewallRuleName">The name of the firewall rule to retrieve.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the firewall rule.</returns>
		public async Task<FirewallRule> FirewallRules_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string firewallRuleName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeStore/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/firewallRules/"+ (firewallRuleName==null? "" : System.Uri.EscapeDataString(firewallRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FirewallRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the specified firewall rule. During update, the firewall rule with the specified name will be replaced with this new firewall rule.
		/// FirewallRules_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules/{firewallRuleName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Store account.</param>
		/// <param name="firewallRuleName">The name of the firewall rule to create or update.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to create or update the firewall rule.</param>
		/// <returns>Successfully created or updated the specified firewall rule.</returns>
		public async Task<FirewallRule> FirewallRules_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string firewallRuleName, string api_version, CreateOrUpdateFirewallRuleParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeStore/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/firewallRules/"+ (firewallRuleName==null? "" : System.Uri.EscapeDataString(firewallRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FirewallRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified firewall rule from the specified Data Lake Store account.
		/// FirewallRules_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules/{firewallRuleName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Store account.</param>
		/// <param name="firewallRuleName">The name of the firewall rule to delete.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully deleted the specified firewall rule.</returns>
		public async Task FirewallRules_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string firewallRuleName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeStore/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/firewallRules/"+ (firewallRuleName==null? "" : System.Uri.EscapeDataString(firewallRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified firewall rule.
		/// FirewallRules_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules/{firewallRuleName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Store account.</param>
		/// <param name="firewallRuleName">The name of the firewall rule to update.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to update the firewall rule.</param>
		/// <returns>Successfully updated the specified firewall rule.</returns>
		public async Task<FirewallRule> FirewallRules_UpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string firewallRuleName, string api_version, UpdateFirewallRuleParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeStore/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/firewallRules/"+ (firewallRuleName==null? "" : System.Uri.EscapeDataString(firewallRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FirewallRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the Data Lake Store trusted identity providers within the specified Data Lake Store account.
		/// TrustedIdProviders_ListByAccount subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Store account.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of trusted identity providers.</returns>
		public async Task<TrustedIdProviderListResult> TrustedIdProviders_ListByAccountAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeStore/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/trustedIdProviders&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrustedIdProviderListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified Data Lake Store trusted identity provider.
		/// TrustedIdProviders_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Store account.</param>
		/// <param name="trustedIdProviderName">The name of the trusted identity provider to retrieve.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved details of the specified trusted identity provider.</returns>
		public async Task<TrustedIdProvider> TrustedIdProviders_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string trustedIdProviderName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeStore/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/trustedIdProviders/"+ (trustedIdProviderName==null? "" : System.Uri.EscapeDataString(trustedIdProviderName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrustedIdProvider>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the specified trusted identity provider. During update, the trusted identity provider with the specified name will be replaced with this new provider
		/// TrustedIdProviders_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Store account.</param>
		/// <param name="trustedIdProviderName">The name of the trusted identity provider. This is used for differentiation of providers in the account.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to create or replace the trusted identity provider.</param>
		/// <returns>Successfully added the trusted identity provider.</returns>
		public async Task<TrustedIdProvider> TrustedIdProviders_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string trustedIdProviderName, string api_version, CreateOrUpdateTrustedIdProviderParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeStore/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/trustedIdProviders/"+ (trustedIdProviderName==null? "" : System.Uri.EscapeDataString(trustedIdProviderName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrustedIdProvider>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified trusted identity provider from the specified Data Lake Store account
		/// TrustedIdProviders_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Store account.</param>
		/// <param name="trustedIdProviderName">The name of the trusted identity provider to delete.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully deleted the specified trusted identity provider details.</returns>
		public async Task TrustedIdProviders_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string trustedIdProviderName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeStore/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/trustedIdProviders/"+ (trustedIdProviderName==null? "" : System.Uri.EscapeDataString(trustedIdProviderName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified trusted identity provider.
		/// TrustedIdProviders_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Store account.</param>
		/// <param name="trustedIdProviderName">The name of the trusted identity provider. This is used for differentiation of providers in the account.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to update the trusted identity provider.</param>
		/// <returns>Successfully added the trusted identity provider.</returns>
		public async Task<TrustedIdProvider> TrustedIdProviders_UpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string trustedIdProviderName, string api_version, UpdateTrustedIdProviderParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeStore/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/trustedIdProviders/"+ (trustedIdProviderName==null? "" : System.Uri.EscapeDataString(trustedIdProviderName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrustedIdProvider>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the Data Lake Store virtual network rules within the specified Data Lake Store account.
		/// VirtualNetworkRules_ListByAccount subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/virtualNetworkRules
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Store account.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of virtual network rules.</returns>
		public async Task<VirtualNetworkRuleListResult> VirtualNetworkRules_ListByAccountAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeStore/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/virtualNetworkRules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VirtualNetworkRuleListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified Data Lake Store virtual network rule.
		/// VirtualNetworkRules_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/virtualNetworkRules/{virtualNetworkRuleName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Store account.</param>
		/// <param name="virtualNetworkRuleName">The name of the virtual network rule to retrieve.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the virtual network rule.</returns>
		public async Task<VirtualNetworkRule> VirtualNetworkRules_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string virtualNetworkRuleName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeStore/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/virtualNetworkRules/"+ (virtualNetworkRuleName==null? "" : System.Uri.EscapeDataString(virtualNetworkRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VirtualNetworkRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the specified virtual network rule. During update, the virtual network rule with the specified name will be replaced with this new virtual network rule.
		/// VirtualNetworkRules_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/virtualNetworkRules/{virtualNetworkRuleName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Store account.</param>
		/// <param name="virtualNetworkRuleName">The name of the virtual network rule to create or update.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to create or update the virtual network rule.</param>
		/// <returns>Successfully created or updated the specified virtual network rule.</returns>
		public async Task<VirtualNetworkRule> VirtualNetworkRules_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string virtualNetworkRuleName, string api_version, CreateOrUpdateVirtualNetworkRuleParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeStore/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/virtualNetworkRules/"+ (virtualNetworkRuleName==null? "" : System.Uri.EscapeDataString(virtualNetworkRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VirtualNetworkRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified virtual network rule from the specified Data Lake Store account.
		/// VirtualNetworkRules_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/virtualNetworkRules/{virtualNetworkRuleName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Store account.</param>
		/// <param name="virtualNetworkRuleName">The name of the virtual network rule to delete.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully deleted the specified virtual network rule.</returns>
		public async Task VirtualNetworkRules_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string virtualNetworkRuleName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeStore/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/virtualNetworkRules/"+ (virtualNetworkRuleName==null? "" : System.Uri.EscapeDataString(virtualNetworkRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified virtual network rule.
		/// VirtualNetworkRules_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/virtualNetworkRules/{virtualNetworkRuleName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the Azure resource group.</param>
		/// <param name="accountName">The name of the Data Lake Store account.</param>
		/// <param name="virtualNetworkRuleName">The name of the virtual network rule to update.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to update the virtual network rule.</param>
		/// <returns>Successfully updated the specified virtual network rule.</returns>
		public async Task<VirtualNetworkRule> VirtualNetworkRules_UpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string virtualNetworkRuleName, string api_version, UpdateVirtualNetworkRuleParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataLakeStore/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/virtualNetworkRules/"+ (virtualNetworkRuleName==null? "" : System.Uri.EscapeDataString(virtualNetworkRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VirtualNetworkRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
