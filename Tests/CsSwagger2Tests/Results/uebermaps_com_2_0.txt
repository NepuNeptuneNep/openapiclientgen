//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Attachment
	{
		
		[System.Runtime.Serialization.DataMember(Name="attachable_id")]
		public System.Nullable<System.Int32> Attachable_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attachable_type")]
		public string Attachable_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file_url")]
		public string File_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="map_id")]
		public System.Nullable<System.Int32> Map_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sizes")]
		public string Sizes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spot")]
		public Spot Spot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<AttachmentStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum AttachmentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		approved = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unapproved = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Collaborator
	{
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="group")]
		public System.Nullable<CollaboratorGroup> Group { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_admin")]
		public System.Nullable<System.Boolean> Is_admin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="map")]
		public Map Map { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="map_id")]
		public System.Nullable<System.Int32> Map_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public System.Nullable<System.Int32> User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum CollaboratorGroup
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		admin = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		editor = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class CollaboratorEditable
	{
		
		[System.Runtime.Serialization.DataMember(Name="group")]
		public CollaboratorGroup Group { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class CollaboratorInvitation
	{
		
		[System.Runtime.Serialization.DataMember(Name="accepted")]
		public System.Nullable<System.Boolean> Accepted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="group")]
		public CollaboratorGroup Group { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invited_by_user")]
		public User Invited_by_user { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="map")]
		public Map Map { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sent")]
		public System.Nullable<System.Boolean> Sent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class CollaboratorInvitationCreate
	{
		
		[System.Runtime.Serialization.DataMember(Name="emails")]
		public string Emails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_admin")]
		public System.Nullable<System.Boolean> Is_admin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="map_id")]
		public System.Nullable<System.Int32> Map_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_ids")]
		public string User_ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Comment
	{
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AttachmentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class CommentEditable
	{
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Event
	{
		
		[System.Runtime.Serialization.DataMember(Name="counts")]
		public EventCounts Counts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ends_at")]
		public System.Nullable<System.DateTimeOffset> Ends_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Double> Lon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner_id")]
		public System.Nullable<System.Int32> Owner_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="picture_url")]
		public string Picture_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spot")]
		public Spot Spot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="starts_at")]
		public System.Nullable<System.DateTimeOffset> Starts_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time_zone")]
		public string Time_zone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class EventCounts
	{
		
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public System.Nullable<System.Int32> Attachments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public System.Nullable<System.Int32> Comments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class EventEditable
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ends_at")]
		public System.Nullable<System.DateTimeOffset> Ends_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Double> Lon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="picture")]
		public string Picture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="starts_at")]
		public System.Nullable<System.DateTimeOffset> Starts_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time_zone")]
		public string Time_zone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public System.Nullable<System.Int32> User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Map
	{
		
		[System.Runtime.Serialization.DataMember(Name="counts")]
		public MapCounts Counts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="map_settings")]
		public MapSettings Map_settings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner_id")]
		public System.Nullable<System.Int32> Owner_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="picture_url")]
		public string Picture_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public System.Nullable<MapVisibility> Visibility { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum MapVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		link = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class MapCounts
	{
		
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public System.Nullable<System.Int32> Attachments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public System.Nullable<System.Int32> Comments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="impressions")]
		public System.Nullable<System.Int32> Impressions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="respots")]
		public System.Nullable<System.Int32> Respots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spots")]
		public System.Nullable<System.Int32> Spots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriptions")]
		public System.Nullable<System.Int32> Subscriptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class MapEditable
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="map_settings")]
		public MapSettings Map_settings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="picture")]
		public string Picture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public System.Nullable<MapEditableVisibility> Visibility { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum MapEditableVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		link = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class MapRelation
	{
		
		[System.Runtime.Serialization.DataMember(Name="access")]
		public string Access { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="access_group")]
		public System.Nullable<MapRelationAccess_group> Access_group { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscribed")]
		public System.Nullable<System.Boolean> Subscribed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum MapRelationAccess_group
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		visitor = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		editor = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		admin = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class MapSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="editor_access")]
		public string Editor_access { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="respotting_to_this_map")]
		public System.Nullable<System.Boolean> Respotting_to_this_map { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="visitor_access")]
		public string Visitor_access { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class MapWithAuthToken
	{
		
		[System.Runtime.Serialization.DataMember(Name="counts")]
		public MapCounts Counts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner_id")]
		public System.Nullable<System.Int32> Owner_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="picture_url")]
		public string Picture_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public System.Nullable<MapWithAuthTokenVisibility> Visibility { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum MapWithAuthTokenVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		link = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class MapWithRelation
	{
		
		[System.Runtime.Serialization.DataMember(Name="counts")]
		public MapCounts Counts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="map_settings")]
		public MapSettings Map_settings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner_id")]
		public System.Nullable<System.Int32> Owner_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="picture_url")]
		public string Picture_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relation")]
		public MapRelation Relation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public System.Nullable<MapWithRelationVisibility> Visibility { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum MapWithRelationVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		link = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Respot
	{
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="map")]
		public Map Map { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="map_id")]
		public System.Nullable<System.Int32> Map_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spot")]
		public Spot Spot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Spot
	{
		
		[System.Runtime.Serialization.DataMember(Name="counts")]
		public SpotCounts Counts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Double> Lon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="map_id")]
		public System.Nullable<System.Int32> Map_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="picture_url")]
		public string Picture_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AttachmentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time_zone")]
		public string Time_zone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SpotCounts
	{
		
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public System.Nullable<System.Int32> Attachments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public System.Nullable<System.Int32> Comments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="respot")]
		public System.Nullable<System.Int32> Respot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SpotEditable
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Double> Lon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="picture")]
		public string Picture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time_zone")]
		public string Time_zone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Subscription
	{
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="map")]
		public Map Map { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public System.Nullable<System.Int32> User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember(Name="about")]
		public string About { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="counts")]
		public object Counts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="header_picture")]
		public string Header_picture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="picture_url")]
		public string Picture_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="screen_name")]
		public string Screen_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserAuthentication
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserEditable
	{
		
		[System.Runtime.Serialization.DataMember(Name="about")]
		public string About { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="header")]
		public string Header { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="picture")]
		public string Picture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="screen_name")]
		public string Screen_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time_zone")]
		public string Time_zone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserFullProfile : User
	{
		
		[System.Runtime.Serialization.DataMember(Name="auth_token")]
		public string Auth_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time_zone")]
		public string Time_zone { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Update account
		/// Update account. Wrap map parameters in [user].
		/// AccountPatch account
		/// </summary>
		/// <param name="requestBody">user attributes</param>
		/// <returns>Contains user data.</returns>
		public async Task<User> AccountPatchAsync(UserEditable requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete attachment
		/// Delete attachment.
		/// Attachments_idDelete attachments/{id}
		/// </summary>
		/// <param name="id">Attachment id</param>
		/// <returns>Contains deleted attachment.</returns>
		public async Task<Attachment> Attachments_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attachments/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sign in user
		/// Sign in user. Wrap authentication parameters in [user].
		/// AuthenticationPost authentication
		/// </summary>
		/// <param name="requestBody">user authentication attributes</param>
		/// <returns>Contains user data including authentication token for subsequent requests</returns>
		public async Task<UserFullProfile> AuthenticationPostAsync(UserAuthentication requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "authentication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserFullProfile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List your collaborator invitations
		/// List your collaborator invitations.
		/// Collaborator_invitationsGet collaborator_invitations
		/// </summary>
		/// <returns>Contains list of collaborator invitations.</returns>
		public async Task<CollaboratorInvitation[]> Collaborator_invitationsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collaborator_invitations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CollaboratorInvitation[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Invite user to collaborate on map
		/// Invite user to collaborate on map.
		/// Collaborator_invitationsPost collaborator_invitations
		/// </summary>
		/// <param name="requestBody">Supply map_id and either a comma separated list of user_ids or emails. Optionally you can provide a 'is_admin' parameter with 'true' or 'false' to give the invited users admin privileges.</param>
		/// <returns>Contains collaborator invitation data.</returns>
		public async Task<CollaboratorInvitation> Collaborator_invitationsPostAsync(CollaboratorInvitationCreate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collaborator_invitations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CollaboratorInvitation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Show collaborator invitation
		/// Show collaborator invitation
		/// Collaborator_invitations_idGet collaborator_invitations/{id}
		/// </summary>
		/// <param name="id">Collaborator invitation id</param>
		/// <returns>Contains collaborator invitation data.</returns>
		public async Task<CollaboratorInvitation> Collaborator_invitations_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collaborator_invitations/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CollaboratorInvitation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete collaborator invitation
		/// Delete collaborator invitation.
		/// Collaborator_invitations_idDelete collaborator_invitations/{id}
		/// </summary>
		/// <param name="id">Collaborator invitation id</param>
		/// <returns>Contains deleted collaborator invitation.</returns>
		public async Task<CollaboratorInvitation> Collaborator_invitations_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collaborator_invitations/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CollaboratorInvitation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Accept collaborator invitation.
		/// Accept collaborator invitation.
		/// Collaborator_invitations_idPatch collaborator_invitations/{id}
		/// </summary>
		/// <param name="id">Collaborator invitation id</param>
		/// <returns>Contains collaborator invitation data.</returns>
		public async Task<CollaboratorInvitation> Collaborator_invitations_idPatchAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collaborator_invitations/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CollaboratorInvitation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete comment
		/// Delete comment.
		/// Comments_idDelete comments/{id}
		/// </summary>
		/// <param name="id">Comment id</param>
		/// <returns>Contains deleted comment.</returns>
		public async Task<Comment> Comments_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "comments/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update comment
		/// Update comment. Wrap comment parameters in [comment].
		/// Comments_idPatch comments/{id}
		/// </summary>
		/// <param name="id">Comment id</param>
		/// <param name="requestBody">Comment attributes</param>
		/// <returns>Contains comment data</returns>
		public async Task<Comment> Comments_idPatchAsync(int id, CommentEditable requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "comments/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List your own events
		/// List your own events.
		/// EventsGetByTimeframe_startAndTimeframe_endAndBounds events
		/// </summary>
		/// <param name="timeframe_start">Begin of time range of event (ISO 8601 date format).</param>
		/// <param name="timeframe_end">End of time range of event (ISO 8601 date format).</param>
		/// <param name="bounds">To refine your event index request to contain only events within                                                             a geographical box pass the followng bounds parameters.                                                             F. e. to get events within 'Hamburg, St. Pauli':                                                             bounds[sw_lat]=53.54831449741324                                                             bounds[sw_lon]=9.943227767944336                                                             bounds[ne_lat]=53.5571103674878                                                             bounds[ne_lon]=9.9776029586792</param>
		/// <returns>Contains list of events.</returns>
		public async Task<Event[]> EventsGetByTimeframe_startAndTimeframe_endAndBoundsAsync(string timeframe_start, string timeframe_end, string bounds, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events?timeframe_start=" + (timeframe_start==null? "" : System.Uri.EscapeDataString(timeframe_start))+"&timeframe_end=" + (timeframe_end==null? "" : System.Uri.EscapeDataString(timeframe_end))+"&bounds=" + (bounds==null? "" : System.Uri.EscapeDataString(bounds));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get event
		/// Get basic information about an event
		/// Events_idGet events/{id}
		/// </summary>
		/// <param name="id">Id of event</param>
		/// <returns>Contains event data.</returns>
		public async Task<Event> Events_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete event
		/// Delete event.
		/// Events_idDelete events/{id}
		/// </summary>
		/// <param name="id">Event id</param>
		/// <returns>Contains deleted event.</returns>
		public async Task<Event> Events_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update event
		/// Update event. Wrap event parameters in [event].
		/// Events_idPatch events/{id}
		/// </summary>
		/// <param name="id">Event id</param>
		/// <param name="requestBody">Event attributes</param>
		/// <returns>Contains map data, map settings and your relation to this map</returns>
		public async Task<Map> Events_idPatchAsync(int id, EventEditable requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Map>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List your own maps
		/// List your own maps.
		/// MapsGet maps
		/// </summary>
		/// <returns>Contains list of maps.</returns>
		public async Task<Map[]> MapsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Map[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create map
		/// Create map. Wrap map parameters in [map]. To add a map header picture pass a base64 encoded string to [map][picture].
		/// MapsPost maps
		/// </summary>
		/// <param name="requestBody">map attributes</param>
		/// <returns>Contains map data, map settings and your relation to this map</returns>
		public async Task<Map> MapsPostAsync(MapEditable requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Map>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Search maps
		/// Search maps
		/// MapsSearchGetByQAndDAndLatAndLon maps/search
		/// </summary>
		/// <param name="q">Query</param>
		/// <param name="d">Distance. Diameter of search radius in meter (default: 2000 meter)</param>
		/// <param name="lat">Latitude for search radius (default distance: 2000 meter)</param>
		/// <param name="lon">Longitude for search radius (default distance: 2000 meter)</param>
		/// <returns>Contains map data.</returns>
		public async Task<Map> MapsSearchGetByQAndDAndLatAndLonAsync(string q, int d, double lat, double lon, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps/search?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&d="+d+"&lat="+lat+"&lon="+lon;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Map>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get map
		/// Get basic information about a map
		/// Maps_idGet maps/{id}
		/// </summary>
		/// <param name="id">Id of map</param>
		/// <returns>Contains map data, map settings and your relation to this map</returns>
		public async Task<MapWithRelation> Maps_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MapWithRelation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete map
		/// Delete map.
		/// Maps_idDelete maps/{id}
		/// </summary>
		/// <param name="id">map id</param>
		/// <returns>Contains deleted map.</returns>
		public async Task<Map> Maps_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Map>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update map
		/// Update map. Wrap map parameters in [map]. To update the map header picture pass a base64 encoded string to [map][picture].
		/// Maps_idPatch maps/{id}
		/// </summary>
		/// <param name="id">map id</param>
		/// <param name="requestBody">map settings attributes</param>
		/// <returns>Contains map data, map settings and your relation to this map</returns>
		public async Task<Map> Maps_idPatchAsync(int id, MapEditable requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Map>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List attachments for a given map
		/// List attachments for a given map.
		/// Maps_idAttachmentsGet maps/{id}/attachments
		/// </summary>
		/// <param name="id">Map id</param>
		/// <returns>Contains list of attachments.</returns>
		public async Task<Attachment[]> Maps_idAttachmentsGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps/"+id+"/attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Upload map attachment
		/// Upload map attachment. Wrap attachment parameters in [attachment]
		/// Maps_idAttachmentsPost maps/{id}/attachments
		/// </summary>
		/// <param name="id">Map id</param>
		/// <param name="requestBody">Base64 encoded image</param>
		/// <returns>Contains attachment data</returns>
		public async Task<Attachment> Maps_idAttachmentsPostAsync(int id, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps/"+id+"/attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List collaborators of a map
		/// List collaborators of a map.
		/// Maps_idCollaboratorsGet maps/{id}/collaborators/
		/// </summary>
		/// <param name="id">Map id</param>
		/// <returns>Contains list of collaborators.</returns>
		public async Task<Collaborator[]> Maps_idCollaboratorsGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps/"+id+"/collaborators/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Collaborator[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete collaboration
		/// Delete collaboration.
		/// Maps_idCollaborators_user_idDelete maps/{id}/collaborators/{user_id}
		/// </summary>
		/// <param name="id">map id</param>
		/// <param name="user_id">user id</param>
		/// <returns>Contains deleted collaborator.</returns>
		public async Task<Collaborator> Maps_idCollaborators_user_idDeleteAsync(int id, int user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps/"+id+"/collaborators/"+user_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Collaborator>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update collaborator
		/// Update collaborator. Wrap collaborator parameters in [collaborator]
		/// Maps_idCollaborators_user_idPatch maps/{id}/collaborators/{user_id}
		/// </summary>
		/// <param name="id">map id</param>
		/// <param name="user_id">user id</param>
		/// <param name="requestBody">collaborator attributes</param>
		/// <returns>Contains collaborator data</returns>
		public async Task<Collaborator> Maps_idCollaborators_user_idPatchAsync(int id, int user_id, CollaboratorEditable requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps/"+id+"/collaborators/"+user_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Collaborator>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List comments for a given map
		/// List comments for a given map.
		/// Maps_idCommentsGet maps/{id}/comments
		/// </summary>
		/// <param name="id">Id of map</param>
		/// <returns>Contains list of comments.</returns>
		public async Task<Comment[]> Maps_idCommentsGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps/"+id+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create map comment
		/// Create map comment. Wrap comment parameters in [comment].
		/// Maps_idCommentsPost maps/{id}/comments
		/// </summary>
		/// <param name="id">map id</param>
		/// <param name="requestBody">comment attributes</param>
		/// <returns>Contains comment data</returns>
		public async Task<Comment> Maps_idCommentsPostAsync(int id, CommentEditable requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps/"+id+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List respots of a map
		/// List respots of a map.
		/// Maps_idRespotsGet maps/{id}/respots
		/// </summary>
		/// <param name="id">Map Id</param>
		/// <returns>Contains list of respots.</returns>
		public async Task<Respot[]> Maps_idRespotsGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps/"+id+"/respots";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Respot[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List spots for a given map
		/// List spots for a given map.
		/// Maps_idSpotsGetByOrder maps/{id}/spots
		/// </summary>
		/// <param name="id">Id of map</param>
		/// <param name="order">Order of spots</param>
		/// <returns>Contains list of spots.</returns>
		public async Task<Spot[]> Maps_idSpotsGetByOrderAsync(int id, Maps_idSpotsGetByOrderOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps/"+id+"/spots?order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Spot[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create spot
		/// Create spot. Wrap parameters in [spot]. To add a spot picture pass a base64 encoded string to [spot][picture].
		/// Maps_idSpotsPost maps/{id}/spots
		/// </summary>
		/// <param name="id">Id of map</param>
		/// <param name="requestBody">spot attributes</param>
		/// <returns>Contains spot data</returns>
		public async Task<Spot> Maps_idSpotsPostAsync(int id, SpotEditable requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps/"+id+"/spots";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Spot>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List subscriptions for a given map
		/// List subscriptions for a given map.
		/// Maps_idSubscriptionsGet maps/{id}/subscriptions
		/// </summary>
		/// <param name="id">Id of map</param>
		/// <returns>Contains list of subscriptions.</returns>
		public async Task<Subscription[]> Maps_idSubscriptionsGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps/"+id+"/subscriptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Subscription[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unsubscribe from map
		/// Unsubscribe from map.
		/// Maps_idSubscriptionsDelete maps/{id}/subscriptions
		/// </summary>
		/// <param name="id">map id</param>
		/// <returns>Contains deleted subscription.</returns>
		public async Task<Subscription> Maps_idSubscriptionsDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps/"+id+"/subscriptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Subscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get spot
		/// Get basic information about a spot
		/// Maps_map_idSpots_idGet maps/{map_id}/spots/{id}
		/// </summary>
		/// <param name="id">Id of spot</param>
		/// <param name="map_id">Id of map</param>
		/// <returns>Contains spot data</returns>
		public async Task<Spot> Maps_map_idSpots_idGetAsync(int id, int map_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps/"+map_id+"/spots/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Spot>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete respot from map by spot id
		/// Delete respot from map by spot id.
		/// Maps_map_idSpots_spot_idRespotDelete maps/{map_id}/spots/{spot_id}/respot
		/// </summary>
		/// <param name="map_id">Map Id</param>
		/// <param name="spot_id">Spot Id</param>
		/// <returns>Contains deleted respot.</returns>
		public async Task<Respot> Maps_map_idSpots_spot_idRespotDeleteAsync(int map_id, int spot_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps/"+map_id+"/spots/"+spot_id+"/respot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Respot>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List maps that user can respot to
		/// List maps that user can respot to.
		/// Respot_mapsGet respot_maps
		/// </summary>
		/// <returns>Contains list of maps.</returns>
		public async Task<Map[]> Respot_mapsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "respot_maps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Map[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get respot
		/// Get basic information about a respot
		/// Respots_idGet respots/{id}
		/// </summary>
		/// <param name="id">Id of respot</param>
		/// <returns>Contains respot data.</returns>
		public async Task<Respot> Respots_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "respots/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Respot>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete respot
		/// Delete respot.
		/// Respots_idDelete respots/{id}
		/// </summary>
		/// <param name="id">Respot Id</param>
		/// <returns>Contains deleted respot.</returns>
		public async Task<Respot> Respots_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "respots/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Respot>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get secret access token to share map
		/// Get secret access token of an uebermap with access set to 'Secret link'. Pass the 'token' on every request you make to access this uebermap and its resources. F.e. token=1-x_gqu7eLBe3uKoAGAGXy
		/// ShareMap_idGet share/map/{id}
		/// </summary>
		/// <param name="id">Id of map</param>
		/// <returns>Contains map data and a secret token to access this map.</returns>
		public async Task<MapWithAuthToken> ShareMap_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "share/map/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MapWithAuthToken>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List your own spots
		/// List your own spots.
		/// SpotsGetByOrder spots
		/// </summary>
		/// <param name="order">Order of spots</param>
		/// <returns>Contains list of spots.</returns>
		public async Task<Spot[]> SpotsGetByOrderAsync(Maps_idSpotsGetByOrderOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "spots?order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Spot[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search spots
		/// Search spots
		/// SpotsSearchGetByQAndDAndLatAndLon spots/search
		/// </summary>
		/// <param name="q">Query</param>
		/// <param name="d">Distance. Diameter of search radius in meter (default: 2000 meter)</param>
		/// <param name="lat">Latitude for search radius (2 km)</param>
		/// <param name="lon">Longitude for search radius (2 km)</param>
		/// <returns>Contains spot data.</returns>
		public async Task<Spot> SpotsSearchGetByQAndDAndLatAndLonAsync(string q, int d, double lat, double lon, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "spots/search?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&d="+d+"&lat="+lat+"&lon="+lon;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Spot>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete spot
		/// Delete spot.
		/// Spots_idDelete spots/{id}
		/// </summary>
		/// <param name="id">spot id</param>
		/// <returns>Contains deleted spot.</returns>
		public async Task<Spot> Spots_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "spots/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Spot>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update spot
		/// Update spot. Wrap parameters in [spot]. To update the spot picture pass a base64 encoded string to [spot][picture].
		/// Spots_idPatch spots/{id}
		/// </summary>
		/// <param name="id">spot id</param>
		/// <param name="requestBody">spot attributes</param>
		/// <returns>Contains spot data</returns>
		public async Task<Spot> Spots_idPatchAsync(int id, SpotEditable requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "spots/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Spot>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List attachments for a given spot
		/// List attachments for a given spot.
		/// Spots_idAttachmentsGet spots/{id}/attachments
		/// </summary>
		/// <param name="id">Spot id</param>
		/// <returns>Contains list of attachments.</returns>
		public async Task<Attachment[]> Spots_idAttachmentsGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "spots/"+id+"/attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Upload spot attachment
		/// Upload spot attachment. Wrap attachment parameters in [attachment]
		/// Spots_idAttachmentsPost spots/{id}/attachments
		/// </summary>
		/// <param name="id">Spot id</param>
		/// <param name="requestBody">Base64 encoded image</param>
		/// <returns>Contains attachment data</returns>
		public async Task<Attachment> Spots_idAttachmentsPostAsync(int id, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "spots/"+id+"/attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List comments for a given spot
		/// List comments for a given spot.
		/// Spots_idCommentsGet spots/{id}/comments
		/// </summary>
		/// <param name="id">Id of spot</param>
		/// <returns>Contains list of comments.</returns>
		public async Task<Comment[]> Spots_idCommentsGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "spots/"+id+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create spot comment
		/// Create spot comment. Wrap comment parameters in [comment].
		/// Spots_idCommentsPost spots/{id}/comments
		/// </summary>
		/// <param name="id">spot id</param>
		/// <param name="requestBody">comment attributes</param>
		/// <returns>Contains comment data</returns>
		public async Task<Comment> Spots_idCommentsPostAsync(int id, CommentEditable requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "spots/"+id+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List events for a given spot
		/// List maps for a given spot.
		/// Spots_idEventsGetByTimeframe_startAndTimeframe_endAndBounds spots/{id}/events
		/// </summary>
		/// <param name="id">Id of spot</param>
		/// <param name="timeframe_start">Begin of time range of event (ISO 8601 date format).</param>
		/// <param name="timeframe_end">End of time range of event (ISO 8601 date format).</param>
		/// <param name="bounds">To refine your event index request to contain only events within                                                             a geographical box pass the followng bounds parameters.                                                             F. e. to get events within 'Hamburg, St. Pauli':                                                             bounds[sw_lat]=53.54831449741324                                                             bounds[sw_lon]=9.943227767944336                                                             bounds[ne_lat]=53.5571103674878                                                             bounds[ne_lon]=9.9776029586792</param>
		/// <returns>Contains list of events.</returns>
		public async Task<Event[]> Spots_idEventsGetByTimeframe_startAndTimeframe_endAndBoundsAsync(int id, string timeframe_start, string timeframe_end, string bounds, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "spots/"+id+"/events?timeframe_start=" + (timeframe_start==null? "" : System.Uri.EscapeDataString(timeframe_start))+"&timeframe_end=" + (timeframe_end==null? "" : System.Uri.EscapeDataString(timeframe_end))+"&bounds=" + (bounds==null? "" : System.Uri.EscapeDataString(bounds));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create event
		/// Create event. Wrap map parameters in [event].
		/// Spots_idEventsPost spots/{id}/events
		/// </summary>
		/// <param name="id">Spot id</param>
		/// <param name="requestBody">Event attributes</param>
		/// <returns>Contains event data</returns>
		public async Task<Event> Spots_idEventsPostAsync(int id, EventEditable requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "spots/"+id+"/events";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Respot a spot onto a map
		/// Respot a spot onto a map.
		/// Spots_idRespotsPost spots/{id}/respots
		/// </summary>
		/// <param name="id">Spot Id</param>
		/// <param name="requestBody">Map Id</param>
		/// <returns>Contains respot data.</returns>
		public async Task<Respot> Spots_idRespotsPostAsync(int id, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "spots/"+id+"/respots";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Respot>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List subscriptions. Pass no parameters to get own subscriptions
		/// List subscriptions.
		/// SubscriptionsGetByUser_idAndMap_id subscriptions
		/// </summary>
		/// <param name="user_id">Id of user</param>
		/// <param name="map_id">Id of map</param>
		/// <returns>Contains list of subscriptions.</returns>
		public async Task<Subscription[]> SubscriptionsGetByUser_idAndMap_idAsync(int user_id, int map_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions?user_id="+user_id+"&map_id="+map_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Subscription[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create map subscription
		/// Create map subscription.
		/// SubscriptionsPost subscriptions
		/// </summary>
		/// <param name="requestBody">map id</param>
		/// <returns>Contains subscription data.</returns>
		public async Task<Subscription> SubscriptionsPostAsync(string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Subscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List latest maps
		/// List latest maps.
		/// TrendsLatestGet trends/latest
		/// </summary>
		/// <returns>Contains list of maps.</returns>
		public async Task<Map[]> TrendsLatestGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "trends/latest";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Map[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List recommended maps
		/// List recommended maps.
		/// TrendsRecommendedGet trends/recommended
		/// </summary>
		/// <returns>Contains list of maps.</returns>
		public async Task<Map[]> TrendsRecommendedGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "trends/recommended";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Map[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search users
		/// Search users
		/// UsersSearchGetByQ users/search
		/// </summary>
		/// <param name="q">Query</param>
		/// <returns>Contains users data.</returns>
		public async Task<User> UsersSearchGetByQAsync(string q, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/search?q=" + (q==null? "" : System.Uri.EscapeDataString(q));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get user profile
		/// Get profile a user
		/// Users_idGet users/{id}
		/// </summary>
		/// <param name="id">Id of user</param>
		/// <returns>Contains user data</returns>
		public async Task<User> Users_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List maps for a given user
		/// List maps for a given user.
		/// Users_user_idMapsGet users/{user_id}/maps
		/// </summary>
		/// <param name="user_id">Id of user</param>
		/// <returns>Contains list of maps.</returns>
		public async Task<Map[]> Users_user_idMapsGetAsync(int user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/maps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Map[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Maps_idSpotsGetByOrderOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		created_at_asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		created_at_desc = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		updated_at_asc = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		updated_at_desc = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		title_asc = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		title_desc = 5,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
