//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RestResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StreamingResponseBody
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get account information by accessKey and secretKey
		/// GetAccountByAccessKeyUsingGET rest/v1.1/account/account
		/// </summary>
		/// <param name="accessKey">accessKey</param>
		/// <param name="secretKey">secretKey</param>
		/// <returns>OK</returns>
		public async Task GetAccountByAccessKeyUsingGETAsync(string accessKey, string secretKey)
		{
			var requestUri = "rest/v1.1/account/account?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get billing information by accessKey and secretKey
		/// GetBillingPerAccountUsingGET rest/v1.1/account/billing
		/// </summary>
		/// <param name="accessKey">accessKey</param>
		/// <param name="secretKey">secretKey</param>
		/// <param name="startDateTime">startDateTime</param>
		/// <param name="endDateTime">endDateTime</param>
		/// <param name="dateTemplate">dateTemplate</param>
		/// <returns>OK</returns>
		public async Task GetBillingPerAccountUsingGETAsync(string accessKey, string secretKey, System.DateTimeOffset startDateTime, System.DateTimeOffset endDateTime, string dateTemplate)
		{
			var requestUri = "rest/v1.1/account/billing?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&startDateTime=" + startDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDateTime=" + endDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&dateTemplate=" + (dateTemplate==null? "" : System.Uri.EscapeDataString(dateTemplate));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change password for an account using old password
		/// ChangePasswordUsingPOST rest/v1.1/account/changePassword
		/// </summary>
		/// <param name="email">email</param>
		/// <param name="oldPassword">oldPassword</param>
		/// <param name="newPassword">newPassword</param>
		/// <returns>OK</returns>
		public async Task ChangePasswordUsingPOSTAsync(string email, string oldPassword, string newPassword)
		{
			var requestUri = "rest/v1.1/account/changePassword?email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&oldPassword=" + (oldPassword==null? "" : System.Uri.EscapeDataString(oldPassword))+"&newPassword=" + (newPassword==null? "" : System.Uri.EscapeDataString(newPassword));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get account information including accessKey and secretKey by email and password
		/// LoginWithEmailUsingPOST rest/v1.1/account/login
		/// </summary>
		/// <param name="email">email</param>
		/// <param name="password">password</param>
		/// <returns>OK</returns>
		public async Task LoginWithEmailUsingPOSTAsync(string email, string password)
		{
			var requestUri = "rest/v1.1/account/login?email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&password=" + (password==null? "" : System.Uri.EscapeDataString(password));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Compare several faces identified by faceHash, without depending on mapping faces to profiles
		/// CompareFacesUsingGET rest/v1.1/analysis/compare
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="faceHashes">The IDs of the faces which you want compared, comma-separated</param>
		/// <param name="showDetails">Show details</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> CompareFacesUsingGETAsync(string accessKey, string secretKey, string[] faceHashes, bool showDetails)
		{
			var requestUri = "rest/v1.1/analysis/compare?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&"+string.Join("&", faceHashes.Select(z => $"faceHashes={System.Uri.EscapeDataString(z.ToString())}"))+"&showDetails="+showDetails;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the last *count* operations per current account
		/// RetriveLatestUsingGET rest/v1.1/analysis/listLatest
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="count">How many records to retrieve at a time</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> RetriveLatestUsingGETAsync(string accessKey, string secretKey, int count)
		{
			var requestUri = "rest/v1.1/analysis/listLatest?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&count="+count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a complete analysis object including both detection and recognition information
		/// RetrieveAnalysisUsingGET rest/v1.1/analysis/retrieve
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="analysisId">The ID of the analysis for which the data will be retrieved</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> RetrieveAnalysisUsingGETAsync(string accessKey, string secretKey, string analysisId)
		{
			var requestUri = "rest/v1.1/analysis/retrieve?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&analysisId=" + (analysisId==null? "" : System.Uri.EscapeDataString(analysisId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count individuals in streams or collections
		/// CounterUsingPOST rest/v1.1/analytics/counting
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="collectionIds">Collection ids</param>
		/// <param name="streamIds">Stream Ids</param>
		/// <param name="startDateTime">startDateTime</param>
		/// <param name="endDateTime">endDateTime</param>
		/// <param name="visitDuration">visitDuration</param>
		/// <param name="maxIterations">maxIterations</param>
		/// <param name="maxBatchIterations">maxBatchIterations</param>
		/// <param name="minNeighborsMergedPerIteration">minNeighborsMergedPerIteration</param>
		/// <param name="mergingStep">mergingStep</param>
		/// <param name="shuffling">shuffling</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> CounterUsingPOSTAsync(string accessKey, string secretKey, string[] collectionIds, string[] streamIds, System.DateTimeOffset startDateTime, System.DateTimeOffset endDateTime, long visitDuration, int maxIterations, int maxBatchIterations, int minNeighborsMergedPerIteration, double mergingStep, bool shuffling)
		{
			var requestUri = "rest/v1.1/analytics/counting?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&"+string.Join("&", collectionIds.Select(z => $"collectionIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", streamIds.Select(z => $"streamIds={System.Uri.EscapeDataString(z.ToString())}"))+"&startDateTime=" + startDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDateTime=" + endDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&visitDuration="+visitDuration+"&maxIterations="+maxIterations+"&maxBatchIterations="+maxBatchIterations+"&minNeighborsMergedPerIteration="+minNeighborsMergedPerIteration+"&mergingStep="+mergingStep+"&shuffling="+shuffling;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show audience (based on number of occurrences of each person) breakdown per declared attribute (age, gender).
		/// PresenceTimeseriesUsingPOST rest/v1.1/analytics/presence/timeseries
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="streamIds">Stream Ids</param>
		/// <param name="startDateTime">startDateTime</param>
		/// <param name="endDateTime">endDateTime</param>
		/// <param name="step">step</param>
		/// <param name="attributes">attributes</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> PresenceTimeseriesUsingPOSTAsync(string accessKey, string secretKey, string[] streamIds, System.DateTimeOffset startDateTime, System.DateTimeOffset endDateTime, long step, string[] attributes)
		{
			var requestUri = "rest/v1.1/analytics/presence/timeseries?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&"+string.Join("&", streamIds.Select(z => $"streamIds={System.Uri.EscapeDataString(z.ToString())}"))+"&startDateTime=" + startDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDateTime=" + endDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&step="+step+"&"+string.Join("&", attributes.Select(z => $"attributes={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show presence (based on number of occurences of each face) breakdown per declared attribute (age, gender)
		/// PresenceTotalUsingPOST rest/v1.1/analytics/presence/total
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="streamIds">Stream Ids</param>
		/// <param name="startDateTime">startDateTime</param>
		/// <param name="endDateTime">endDateTime</param>
		/// <param name="attributes">attributes</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> PresenceTotalUsingPOSTAsync(string accessKey, string secretKey, string[] streamIds, System.DateTimeOffset startDateTime, System.DateTimeOffset endDateTime, string[] attributes)
		{
			var requestUri = "rest/v1.1/analytics/presence/total?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&"+string.Join("&", streamIds.Select(z => $"streamIds={System.Uri.EscapeDataString(z.ToString())}"))+"&startDateTime=" + startDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDateTime=" + endDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", attributes.Select(z => $"attributes={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get classifier full
		/// GetClassiferFullUsingGET rest/v1.1/classifier/svm
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="id">The id of the classifier that you want the status for</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> GetClassiferFullUsingGETAsync(string accessKey, string secretKey, string id)
		{
			var requestUri = "rest/v1.1/classifier/svm?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new SVM classifier with given name
		/// AddSVMClassifierUsingPOST rest/v1.1/classifier/svm
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="name">The name of the SVM classifier that will be created</param>
		/// <param name="collectionIds">Collection ids</param>
		/// <param name="preprocessor">Preprocessor</param>
		/// <param name="classificationAttributeName">Classification attribute name</param>
		/// <param name="considerViewPoints">Consider view point</param>
		/// <param name="seed">Seed for divididing training and evaluation sets</param>
		/// <param name="trainingRatio">Training ratio</param>
		/// <param name="probabilityParameter">Probability parameter</param>
		/// <param name="gammaParameter">Gamma parameter</param>
		/// <param name="nuParameter">Nu parameter</param>
		/// <param name="cParameter">c parameter</param>
		/// <param name="svmTypeParameter">SVM type parameter</param>
		/// <param name="kernelTypeParameter">Kernel type parameter</param>
		/// <param name="cacheSizeParameter">Cache size parameter</param>
		/// <param name="epsParameter">Eps parameter</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> AddSVMClassifierUsingPOSTAsync(
					string accessKey, 
					string secretKey, 
					string name, 
					string[] collectionIds, 
					string preprocessor, 
					string classificationAttributeName, 
					bool considerViewPoints, 
					int seed, 
					double trainingRatio, 
					int probabilityParameter, 
					double gammaParameter, 
					double nuParameter, 
					double cParameter, 
					int svmTypeParameter, 
					int kernelTypeParameter, 
					double cacheSizeParameter, 
					double epsParameter)
		{
			var requestUri = "rest/v1.1/classifier/svm?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&"+string.Join("&", collectionIds.Select(z => $"collectionIds={System.Uri.EscapeDataString(z.ToString())}"))+"&preprocessor=" + (preprocessor==null? "" : System.Uri.EscapeDataString(preprocessor))+"&classificationAttributeName=" + (classificationAttributeName==null? "" : System.Uri.EscapeDataString(classificationAttributeName))+"&considerViewPoints="+considerViewPoints+"&seed="+seed+"&trainingRatio="+trainingRatio+"&probabilityParameter="+probabilityParameter+"&gammaParameter="+gammaParameter+"&nuParameter="+nuParameter+"&cParameter="+cParameter+"&svmTypeParameter="+svmTypeParameter+"&kernelTypeParameter="+kernelTypeParameter+"&cacheSizeParameter="+cacheSizeParameter+"&epsParameter="+epsParameter;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete existing classifier
		/// RemoveClassiferUsingDELETE rest/v1.1/classifier/svm
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="id">The id of the classifier that will be removed</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> RemoveClassiferUsingDELETEAsync(string accessKey, string secretKey, string id)
		{
			var requestUri = "rest/v1.1/classifier/svm?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get classifer status
		/// GetClassiferStatusUsingGET rest/v1.1/classifier/svm/status
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="id">The id of the classifier that you want the status for</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> GetClassiferStatusUsingGETAsync(string accessKey, string secretKey, string id)
		{
			var requestUri = "rest/v1.1/classifier/svm/status?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all collections
		/// GetAllCollectionsUsingGET rest/v1.1/collection/
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> GetAllCollectionsUsingGETAsync(string accessKey, string secretKey)
		{
			var requestUri = "rest/v1.1/collection/?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all collections
		/// GetAllCollections2UsingGET rest/v1.1/collection/all
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> GetAllCollections2UsingGETAsync(string accessKey, string secretKey)
		{
			var requestUri = "rest/v1.1/collection/all?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve existing collection content
		/// GetCollection2UsingGET rest/v1.1/collection/collection
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="collectionId">The id of the collection for which the data will be retrieved</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> GetCollection2UsingGETAsync(string accessKey, string secretKey, string collectionId)
		{
			var requestUri = "rest/v1.1/collection/collection?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&collectionId=" + (collectionId==null? "" : System.Uri.EscapeDataString(collectionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new empty collection with given name
		/// AddCollection2UsingPOST rest/v1.1/collection/collection
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="collectionName">The name of the collection that will be created</param>
		/// <param name="preload">Defined whether to preload collection</param>
		/// <param name="evictable">Defined whether the collection can be evicted</param>
		/// <param name="purposes">The newly declared purposes of the collection</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> AddCollection2UsingPOSTAsync(string accessKey, string secretKey, string collectionName, bool preload, bool evictable, string[] purposes)
		{
			var requestUri = "rest/v1.1/collection/collection?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&collectionName=" + (collectionName==null? "" : System.Uri.EscapeDataString(collectionName))+"&preload="+preload+"&evictable="+evictable+"&"+string.Join("&", purposes.Select(z => $"purposes={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete existing collection with associated profiles and faces.
		/// DeleteCollection2UsingDELETE rest/v1.1/collection/collection
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey provided by VisageCloud</param>
		/// <param name="collectionId">The id of the collection that will be removed</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> DeleteCollection2UsingDELETEAsync(string accessKey, string secretKey, string collectionId)
		{
			var requestUri = "rest/v1.1/collection/collection?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&collectionId=" + (collectionId==null? "" : System.Uri.EscapeDataString(collectionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve collection content for data analysis.
		/// ExportCSVUsingGET rest/v1.1/collection/export/csv
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="collectionId">The id of the collection for which the data will be retrieved</param>
		/// <returns>OK</returns>
		public async Task<string> ExportCSVUsingGETAsync(string accessKey, string secretKey, string collectionId)
		{
			var requestUri = "rest/v1.1/collection/export/csv?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&collectionId=" + (collectionId==null? "" : System.Uri.EscapeDataString(collectionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (System.IO.StreamReader streamReader = new System.IO.StreamReader(responseMessageStream))
				{
				return streamReader.ReadToEnd();;
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change purpose of existing collection
		/// RepurposeCollectionUsingPUT rest/v1.1/collection/purpose
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey provided by VisageCloud</param>
		/// <param name="collectionId">The id of the collection for which the data will be retrieved</param>
		/// <param name="purposes">The newly declared purposes of the collection</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> RepurposeCollectionUsingPUTAsync(string accessKey, string secretKey, string collectionId, string[] purposes)
		{
			var requestUri = "rest/v1.1/collection/purpose?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&collectionId=" + (collectionId==null? "" : System.Uri.EscapeDataString(collectionId))+"&"+string.Join("&", purposes.Select(z => $"purposes={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve existing collection content
		/// GetCollectionUsingGET rest/v1.1/collection/{id}
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="id">The id of the collection for which the data will be retrieved</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> GetCollectionUsingGETAsync(string accessKey, string secretKey, string id)
		{
			var requestUri = "rest/v1.1/collection/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an existing collection with a given id
		/// UpdateCollection2UsingPOST rest/v1.1/collection/{id}
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey provided by VisageCloud</param>
		/// <param name="name">The name of the collection that will be updated</param>
		/// <param name="purposes">The newly declared purposes of the collection</param>
		/// <param name="id">The id of the collection that will be updated</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> UpdateCollection2UsingPOSTAsync(string accessKey, string secretKey, string name, string[] purposes, string id)
		{
			var requestUri = "rest/v1.1/collection/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&"+string.Join("&", purposes.Select(z => $"purposes={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete existing collection with associated profiles and faces.
		/// DeleteCollectionUsingDELETE rest/v1.1/collection/{id}
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey provided by VisageCloud</param>
		/// <param name="id">The id of the collection that will be removed</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> DeleteCollectionUsingDELETEAsync(string accessKey, string secretKey, string id)
		{
			var requestUri = "rest/v1.1/collection/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an existing collection with a given id
		/// UpdateCollectionUsingPATCH rest/v1.1/collection/{id}
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey provided by VisageCloud</param>
		/// <param name="name">The name of the collection that will be updated</param>
		/// <param name="purposes">The newly declared purposes of the collection</param>
		/// <param name="id">The id of the collection that will be updated</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> UpdateCollectionUsingPATCHAsync(string accessKey, string secretKey, string name, string[] purposes, string id)
		{
			var requestUri = "rest/v1.1/collection/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&"+string.Join("&", purposes.Select(z => $"purposes={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the profiles associated to a collection
		/// GetAllCollectionProfilesUsingGET rest/v1.1/collection/{id}/profile
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="id">The collection that contains the profile</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> GetAllCollectionProfilesUsingGETAsync(string accessKey, string secretKey, string id)
		{
			var requestUri = "rest/v1.1/collection/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/profile?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets classification attributes from a profile
		/// GetClassificationAttributesFromProfileUsingGET rest/v1.1/profile/classificationAttributes
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="profileId">The profile associated with the classification attributes</param>
		/// <param name="collectionId">The collection that contains the profile</param>
		/// <returns>OK</returns>
		public async Task GetClassificationAttributesFromProfileUsingGETAsync(string accessKey, string secretKey, string profileId, string collectionId)
		{
			var requestUri = "rest/v1.1/profile/classificationAttributes?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&profileId=" + (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"&collectionId=" + (collectionId==null? "" : System.Uri.EscapeDataString(collectionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Maps classification attributes to a profile
		/// MapClassificationAttributesToProfileUsingPUT rest/v1.1/profile/classificationAttributes
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey provided by VisageCloud</param>
		/// <param name="profileId">The profile associated with the classification attributes</param>
		/// <param name="collectionId">The collection that contains the profile</param>
		/// <param name="classificationAttributes">Comma separated key:value classification attributes</param>
		/// <returns>OK</returns>
		public async Task MapClassificationAttributesToProfileUsingPUTAsync(string accessKey, string secretKey, string profileId, string collectionId, string classificationAttributes)
		{
			var requestUri = "rest/v1.1/profile/classificationAttributes?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&profileId=" + (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"&collectionId=" + (collectionId==null? "" : System.Uri.EscapeDataString(collectionId))+"&classificationAttributes=" + (classificationAttributes==null? "" : System.Uri.EscapeDataString(classificationAttributes));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes classification attributes from a profile
		/// RemoveClassificationAttributesFromProfileUsingDELETE rest/v1.1/profile/classificationAttributes
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey provided by VisageCloud</param>
		/// <param name="profileId">The profile associated with the classification attributes</param>
		/// <param name="collectionId">The collection that contains the profile</param>
		/// <returns>OK</returns>
		public async Task RemoveClassificationAttributesFromProfileUsingDELETEAsync(string accessKey, string secretKey, string profileId, string collectionId)
		{
			var requestUri = "rest/v1.1/profile/classificationAttributes?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&profileId=" + (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"&collectionId=" + (collectionId==null? "" : System.Uri.EscapeDataString(collectionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the enrollment status of a profile: information on whether it is suitable for authentication.
		/// GetProfileEnrollmentStatusUsingGET rest/v1.1/profile/enrollmentStatus
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="profileId">The profile that contains the faces</param>
		/// <param name="collectionId">The collection that contains the profile</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> GetProfileEnrollmentStatusUsingGETAsync(string accessKey, string secretKey, string profileId, string collectionId)
		{
			var requestUri = "rest/v1.1/profile/enrollmentStatus?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&profileId=" + (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"&collectionId=" + (collectionId==null? "" : System.Uri.EscapeDataString(collectionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the faceHashes associated to a profile
		/// GetFacesFromProfileUsingGET rest/v1.1/profile/map
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="profileId">The profile that contains the faces</param>
		/// <param name="collectionId">The collection that contains the profile</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> GetFacesFromProfileUsingGETAsync(string accessKey, string secretKey, string profileId, string collectionId)
		{
			var requestUri = "rest/v1.1/profile/map?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&profileId=" + (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"&collectionId=" + (collectionId==null? "" : System.Uri.EscapeDataString(collectionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds (maps) a list of faces, identified by faceHashes, to a profile, identified by profileId
		/// MapFacesToProfileUsingPOST rest/v1.1/profile/map
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey provided by VisageCloud</param>
		/// <param name="faceHashes">Comma separated face hashes, that will be associated to a profile</param>
		/// <param name="profileId">The profile that will store the face</param>
		/// <param name="collectionId">The collection that contains the profile</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> MapFacesToProfileUsingPOSTAsync(string accessKey, string secretKey, string faceHashes, string profileId, string collectionId)
		{
			var requestUri = "rest/v1.1/profile/map?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&faceHashes=" + (faceHashes==null? "" : System.Uri.EscapeDataString(faceHashes))+"&profileId=" + (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"&collectionId=" + (collectionId==null? "" : System.Uri.EscapeDataString(collectionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes (unmaps) a list of faces, identified by faceHashes, from a profile, identified by profileId
		/// RemoveFacesFromProfileUsingDELETE rest/v1.1/profile/map
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey provided by VisageCloud</param>
		/// <param name="faceHashes">Comma separated face hashes, that will be removed from a profile</param>
		/// <param name="profileId">The profile that contains the face</param>
		/// <param name="collectionId">The collection that contains the profile</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> RemoveFacesFromProfileUsingDELETEAsync(string accessKey, string secretKey, string faceHashes, string profileId, string collectionId)
		{
			var requestUri = "rest/v1.1/profile/map?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&faceHashes=" + (faceHashes==null? "" : System.Uri.EscapeDataString(faceHashes))+"&profileId=" + (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"&collectionId=" + (collectionId==null? "" : System.Uri.EscapeDataString(collectionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new profile with no faces associated to it (empty profile)
		/// AddProfileUsingPOST rest/v1.1/profile/profile
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey provided by VisageCloud</param>
		/// <param name="collectionId">Uniquely identified collection that can store multiple profiles</param>
		/// <param name="externalId">External reference to additional information you don’t want to share with VisageCloud</param>
		/// <param name="screenName">Human-readable label for the profile</param>
		/// <param name="labels">Allows you to do finer filtering in face recognition</param>
		/// <param name="classificationAttributes">Comma separated key:value classification attributes</param>
		/// <param name="details">Comma separated key:value details of profile</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> AddProfileUsingPOSTAsync(string accessKey, string secretKey, string collectionId, string externalId, string screenName, string[] labels, string classificationAttributes, string details)
		{
			var requestUri = "rest/v1.1/profile/profile?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&collectionId=" + (collectionId==null? "" : System.Uri.EscapeDataString(collectionId))+"&externalId=" + (externalId==null? "" : System.Uri.EscapeDataString(externalId))+"&screenName=" + (screenName==null? "" : System.Uri.EscapeDataString(screenName))+"&"+string.Join("&", labels.Select(z => $"labels={System.Uri.EscapeDataString(z.ToString())}"))+"&classificationAttributes=" + (classificationAttributes==null? "" : System.Uri.EscapeDataString(classificationAttributes))+"&details=" + (details==null? "" : System.Uri.EscapeDataString(details));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a profile and unmaps all its faces
		/// DeleteProfile2UsingDELETE rest/v1.1/profile/profile
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey provided by VisageCloud</param>
		/// <param name="collectionId">Uniquely identified collection that can store multiple profiles</param>
		/// <param name="profileId">The profile id (provide this if you don't have the externalId</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> DeleteProfile2UsingDELETEAsync(string accessKey, string secretKey, string collectionId, string profileId)
		{
			var requestUri = "rest/v1.1/profile/profile?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&collectionId=" + (collectionId==null? "" : System.Uri.EscapeDataString(collectionId))+"&profileId=" + (profileId==null? "" : System.Uri.EscapeDataString(profileId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a profile
		/// GetProfileUsingGET rest/v1.1/profile/{id}
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="collectionId">Uniquely identified collection that can store multiple profiles</param>
		/// <param name="withFaces">Retrieves the profile with all its associated faces</param>
		/// <param name="id">The profile id (provide this if you don't have the externalId</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> GetProfileUsingGETAsync(string accessKey, string secretKey, string collectionId, string withFaces, string id)
		{
			var requestUri = "rest/v1.1/profile/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&collectionId=" + (collectionId==null? "" : System.Uri.EscapeDataString(collectionId))+"&withFaces=" + (withFaces==null? "" : System.Uri.EscapeDataString(withFaces));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a profile and unmaps all its faces
		/// DeleteProfileUsingDELETE rest/v1.1/profile/{id}
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey provided by VisageCloud</param>
		/// <param name="collectionId">Uniquely identified collection that can store multiple profiles</param>
		/// <param name="id">The profile id (provide this if you don't have the externalId</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> DeleteProfileUsingDELETEAsync(string accessKey, string secretKey, string collectionId, string id)
		{
			var requestUri = "rest/v1.1/profile/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&collectionId=" + (collectionId==null? "" : System.Uri.EscapeDataString(collectionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an existing profile with a given id
		/// UpdateProfileUsingPATCH rest/v1.1/profile/{id}
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="id">The id of the profile that will be updated</param>
		/// <param name="collectionId">Uniquely identified collection that can store multiple profiles</param>
		/// <param name="externalId">External reference to additional information you don’t want to share with VisageCloud</param>
		/// <param name="screenName">Human-readable label for the profile</param>
		/// <param name="labels">Allows you to do finer filtering in face recognition</param>
		/// <param name="classificationAttributes">Comma separated key:value classification attributes</param>
		/// <param name="details">Comma separated key:value details of profile</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> UpdateProfileUsingPATCHAsync(string accessKey, string secretKey, string id, string collectionId, string externalId, string screenName, string[] labels, string classificationAttributes, string details)
		{
			var requestUri = "rest/v1.1/profile/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&collectionId=" + (collectionId==null? "" : System.Uri.EscapeDataString(collectionId))+"&externalId=" + (externalId==null? "" : System.Uri.EscapeDataString(externalId))+"&screenName=" + (screenName==null? "" : System.Uri.EscapeDataString(screenName))+"&"+string.Join("&", labels.Select(z => $"labels={System.Uri.EscapeDataString(z.ToString())}"))+"&classificationAttributes=" + (classificationAttributes==null? "" : System.Uri.EscapeDataString(classificationAttributes))+"&details=" + (details==null? "" : System.Uri.EscapeDataString(details));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show status of all streams from account
		/// StreamsByAccountUsingGET rest/v1.1/stream/all
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> StreamsByAccountUsingGETAsync(string accessKey, string secretKey)
		{
			var requestUri = "rest/v1.1/stream/all?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get last N recognized individuals from stream
		/// GetLastNAttedanceUsingGET rest/v1.1/stream/attendance
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="streamIds">The id of the stream for which the frames will be retrieved</param>
		/// <param name="count">How many frames to retrieve at a time</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> GetLastNAttedanceUsingGETAsync(string accessKey, string secretKey, string[] streamIds, int count)
		{
			var requestUri = "rest/v1.1/stream/attendance?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&"+string.Join("&", streamIds.Select(z => $"streamIds={System.Uri.EscapeDataString(z.ToString())}"))+"&count="+count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cleanup frames older than specified timeframe
		/// CleanupStreamUsingPATCH rest/v1.1/stream/cleanup
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey provided by VisageCloud</param>
		/// <param name="streamId">The id of the stream that will be stopped</param>
		/// <param name="interval">Frames older than interval (seconds) will be cleaned up</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> CleanupStreamUsingPATCHAsync(string accessKey, string secretKey, string streamId, int interval)
		{
			var requestUri = "rest/v1.1/stream/cleanup?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&streamId=" + (streamId==null? "" : System.Uri.EscapeDataString(streamId))+"&interval="+interval;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get individual frame image
		/// GetFrameImageUsingGET rest/v1.1/stream/frameImage
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="streamId">The id of the stream for which the frames will be retrieved</param>
		/// <param name="timestamp">Timestamp of frame to retrieve</param>
		/// <returns>OK</returns>
		public async Task GetFrameImageUsingGETAsync(string accessKey, string secretKey, string streamId, long timestamp)
		{
			var requestUri = "rest/v1.1/stream/frameImage?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&streamId=" + (streamId==null? "" : System.Uri.EscapeDataString(streamId))+"&timestamp="+timestamp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get last processed N frames from stream
		/// GetLastNFramesUsingGET rest/v1.1/stream/frames
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey or readOnlyKey provided by VisageCloud</param>
		/// <param name="streamId">The id of the stream for which the frames will be retrieved</param>
		/// <param name="count">How many frames to retrieve at a time</param>
		/// <param name="collectionId">The collection id you want to run recognition against</param>
		/// <param name="labels">Labels associated with the given picture or picture URL</param>
		/// <param name="attributeFilters">Filters that will be applied on the recognition operation</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> GetLastNFramesUsingGETAsync(string accessKey, string secretKey, string streamId, int count, string collectionId, string[] labels, string[] attributeFilters)
		{
			var requestUri = "rest/v1.1/stream/frames?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&streamId=" + (streamId==null? "" : System.Uri.EscapeDataString(streamId))+"&count="+count+"&collectionId=" + (collectionId==null? "" : System.Uri.EscapeDataString(collectionId))+"&"+string.Join("&", labels.Select(z => $"labels={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", attributeFilters.Select(z => $"attributeFilters={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start existing stream
		/// StartStreamUsingPATCH rest/v1.1/stream/start
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey provided by VisageCloud</param>
		/// <param name="streamId">The id of the stream that will be started</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> StartStreamUsingPATCHAsync(string accessKey, string secretKey, string streamId)
		{
			var requestUri = "rest/v1.1/stream/start?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&streamId=" + (streamId==null? "" : System.Uri.EscapeDataString(streamId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop existing stream
		/// StopStreamUsingPATCH rest/v1.1/stream/stop
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey provided by VisageCloud</param>
		/// <param name="streamId">The id of the stream that will be stopped</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> StopStreamUsingPATCHAsync(string accessKey, string secretKey, string streamId)
		{
			var requestUri = "rest/v1.1/stream/stop?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&streamId=" + (streamId==null? "" : System.Uri.EscapeDataString(streamId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new stream with given name
		/// AddStreamUsingPOST rest/v1.1/stream/stream
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey provided by VisageCloud</param>
		/// <param name="name">The name of the stream that will be created</param>
		/// <param name="url">The url of the stream</param>
		/// <param name="method">Streaming method</param>
		/// <param name="username">Username</param>
		/// <param name="password">Password</param>
		/// <param name="skipFramesWithNoFaces">Boolean value indicating whether you want the original picture to be stored for later retrieval</param>
		/// <param name="retentionTime">Number of seconds for frames to be kept. Default is 605000s (7 days)</param>
		/// <param name="storeOriginalFrames">Boolean value indicating whether you want the original picture to be stored for later retrieval</param>
		/// <param name="storeAttendanceFaces">Boolean value indicating whether you want to store permanently store faces clippings of the recognized faces</param>
		/// <param name="storeAttendanceFrames">Boolean value indicating whether you want to store permanently store frames with a recognized face in them</param>
		/// <param name="isActive">Boolean value indicating whether the stream is currently active or not</param>
		/// <param name="associatedCollections">List of collection ids which will be used to measure attendance</param>
		/// <param name="attributes">Attributes of the stream</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> AddStreamUsingPOSTAsync(string accessKey, string secretKey, string name, string url, AddStreamUsingPOSTMethod method, string username, string password, bool skipFramesWithNoFaces, int retentionTime, bool storeOriginalFrames, bool storeAttendanceFaces, bool storeAttendanceFrames, bool isActive, string[] associatedCollections, string attributes)
		{
			var requestUri = "rest/v1.1/stream/stream?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&url=" + (url==null? "" : System.Uri.EscapeDataString(url))+"&method=" + method+"&username=" + (username==null? "" : System.Uri.EscapeDataString(username))+"&password=" + (password==null? "" : System.Uri.EscapeDataString(password))+"&skipFramesWithNoFaces="+skipFramesWithNoFaces+"&retentionTime="+retentionTime+"&storeOriginalFrames="+storeOriginalFrames+"&storeAttendanceFaces="+storeAttendanceFaces+"&storeAttendanceFrames="+storeAttendanceFrames+"&isActive="+isActive+"&"+string.Join("&", associatedCollections.Select(z => $"associatedCollections={System.Uri.EscapeDataString(z.ToString())}"))+"&attributes=" + (attributes==null? "" : System.Uri.EscapeDataString(attributes));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete existing stream
		/// RemoveStreamUsingDELETE rest/v1.1/stream/{id}
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey provided by VisageCloud</param>
		/// <param name="id">The id of the stream that will be removed</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> RemoveStreamUsingDELETEAsync(string accessKey, string secretKey, string id)
		{
			var requestUri = "rest/v1.1/stream/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an existing stream with a given ID
		/// GetStreamUsingGET rest/v1.1/stream/{streamId}
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey provided by VisageCloud</param>
		/// <param name="streamId">The id of the stream for which the data will be retrieved</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> GetStreamUsingGETAsync(string accessKey, string secretKey, string streamId)
		{
			var requestUri = "rest/v1.1/stream/"+ (streamId==null? "" : System.Uri.EscapeDataString(streamId))+"?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an existing stream with a given ID
		/// UpdateStreamUsingPATCH rest/v1.1/stream/{streamId}
		/// </summary>
		/// <param name="accessKey">The accessKey provided by VisageCloud</param>
		/// <param name="secretKey">The secretKey provided by VisageCloud</param>
		/// <param name="streamId">The id of the stream that will be updated</param>
		/// <param name="name">The name of the stream that will be updated</param>
		/// <param name="url">The url of the stream</param>
		/// <param name="method">Streaming method</param>
		/// <param name="username">Username</param>
		/// <param name="password">Password</param>
		/// <param name="skipFramesWithNoFaces">Boolean value indicating whether you want the original picture to be stored for later retrieval</param>
		/// <param name="retentionTime">Number of seconds for frames to be kept</param>
		/// <param name="storeOriginalFrames">Boolean value indicating whether you want the original picture to be stored for later retrieval</param>
		/// <param name="storeAttendanceFaces">Boolean value indicating whether you want to store permanently store faces clippings of the recognized faces</param>
		/// <param name="storeAttendanceFrames">Boolean value indicating whether you want to store permanently store frames with a recognized face in them</param>
		/// <param name="isActive">Boolean value indicating whether the stream is currently active or not</param>
		/// <param name="associatedCollections">List of collection ids which will be used to measure attendance</param>
		/// <param name="attributes">Attributes of the stream</param>
		/// <returns>OK</returns>
		public async Task<RestResponse> UpdateStreamUsingPATCHAsync(
					string accessKey, 
					string secretKey, 
					string streamId, 
					string name, 
					string url, 
					AddStreamUsingPOSTMethod method, 
					string username, 
					string password, 
					bool skipFramesWithNoFaces, 
					int retentionTime, 
					bool storeOriginalFrames, 
					bool storeAttendanceFaces, 
					bool storeAttendanceFrames, 
					bool isActive, 
					string[] associatedCollections, 
					string attributes)
		{
			var requestUri = "rest/v1.1/stream/"+ (streamId==null? "" : System.Uri.EscapeDataString(streamId))+"?accessKey=" + (accessKey==null? "" : System.Uri.EscapeDataString(accessKey))+"&secretKey=" + (secretKey==null? "" : System.Uri.EscapeDataString(secretKey))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&url=" + (url==null? "" : System.Uri.EscapeDataString(url))+"&method=" + method+"&username=" + (username==null? "" : System.Uri.EscapeDataString(username))+"&password=" + (password==null? "" : System.Uri.EscapeDataString(password))+"&skipFramesWithNoFaces="+skipFramesWithNoFaces+"&retentionTime="+retentionTime+"&storeOriginalFrames="+storeOriginalFrames+"&storeAttendanceFaces="+storeAttendanceFaces+"&storeAttendanceFrames="+storeAttendanceFrames+"&isActive="+isActive+"&"+string.Join("&", associatedCollections.Select(z => $"associatedCollections={System.Uri.EscapeDataString(z.ToString())}"))+"&attributes=" + (attributes==null? "" : System.Uri.EscapeDataString(attributes));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum PerformAnalysisUsingPOSTAlgorithmVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V2 = 1,
	}
	
	public enum AddStreamUsingPOSTMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEBRTC_PULL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEBRTC_PUSH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INGESTION_ENDPOINT = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
