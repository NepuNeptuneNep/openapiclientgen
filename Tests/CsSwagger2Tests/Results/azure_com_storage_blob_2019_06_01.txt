//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public class BlobContainer
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobServiceItems
	{
		
		/// <summary>
		/// List of blob services returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public BlobServiceProperties[] Value { get; set; }
	}
	
	public class BlobServiceProperties
	{
	}
	
	/// <summary>
	/// The blob service properties for change feed events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ChangeFeed
	{
		
		/// <summary>
		/// Indicates whether change feed event logging is enabled for the Blob service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// The properties of a container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerProperties
	{
		
		/// <summary>
		/// The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasImmutabilityPolicy")]
		public System.Nullable<System.Boolean> HasImmutabilityPolicy { get; set; }
		
		/// <summary>
		/// The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasLegalHold")]
		public System.Nullable<System.Boolean> HasLegalHold { get; set; }
		
		/// <summary>
		/// The properties of an ImmutabilityPolicy of a blob container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="immutabilityPolicy")]
		public ImmutabilityPolicyProperties ImmutabilityPolicy { get; set; }
		
		/// <summary>
		/// Returns the date and time the container was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		/// <summary>
		/// Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leaseDuration")]
		public System.Nullable<ContainerPropertiesLeaseDuration> LeaseDuration { get; set; }
		
		/// <summary>
		/// Lease state of the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leaseState")]
		public System.Nullable<ContainerPropertiesLeaseState> LeaseState { get; set; }
		
		/// <summary>
		/// The lease status of the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leaseStatus")]
		public System.Nullable<ContainerPropertiesLeaseStatus> LeaseStatus { get; set; }
		
		/// <summary>
		/// The LegalHold property of a blob container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legalHold")]
		public LegalHoldProperties LegalHold { get; set; }
		
		/// <summary>
		/// A name-value pair to associate with the container as metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// Specifies whether data in the container may be accessed publicly and the level of access.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicAccess")]
		public System.Nullable<ContainerPropertiesPublicAccess> PublicAccess { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ContainerPropertiesLeaseDuration
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Infinite = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fixed = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ContainerPropertiesLeaseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Leased = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Expired = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Breaking = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Broken = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ContainerPropertiesLeaseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Locked = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unlocked = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ContainerPropertiesPublicAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Container = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Blob = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 2,
	}
	
	public class ImmutabilityPolicy
	{
	}
	
	/// <summary>
	/// The properties of an ImmutabilityPolicy of a blob container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImmutabilityPolicyProperties
	{
		
		/// <summary>
		/// ImmutabilityPolicy Etag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The properties of an ImmutabilityPolicy of a blob container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ImmutabilityPolicyProperty Properties { get; set; }
		
		/// <summary>
		/// The ImmutabilityPolicy update history of the blob container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateHistory")]
		public UpdateHistoryProperty[] UpdateHistory { get; set; }
	}
	
	/// <summary>
	/// An update history of the ImmutabilityPolicy of a blob container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateHistoryProperty
	{
		
		/// <summary>
		/// The immutability period for the blobs in the container since the policy creation, in days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="immutabilityPeriodSinceCreationInDays")]
		public System.Nullable<System.Int32> ImmutabilityPeriodSinceCreationInDays { get; set; }
		
		/// <summary>
		/// Returns the Object ID of the user who updated the ImmutabilityPolicy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectIdentifier")]
		public string ObjectIdentifier { get; set; }
		
		/// <summary>
		/// Returns the Tenant ID that issued the token for the user who updated the ImmutabilityPolicy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Returns the date and time the ImmutabilityPolicy was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		/// <summary>
		/// The ImmutabilityPolicy update type of a blob container, possible values include: put, lock and extend.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update")]
		public System.Nullable<UpdateHistoryPropertyUpdate> Update { get; set; }
		
		/// <summary>
		/// Returns the User Principal Name of the user who updated the ImmutabilityPolicy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upn")]
		public string Upn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum UpdateHistoryPropertyUpdate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		put = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lock")]
		_lock = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		extend = 2,
	}
	
	/// <summary>
	/// The properties of an ImmutabilityPolicy of a blob container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImmutabilityPolicyProperty
	{
		
		/// <summary>
		/// The immutability period for the blobs in the container since the policy creation, in days.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="immutabilityPeriodSinceCreationInDays")]
		public int ImmutabilityPeriodSinceCreationInDays { get; set; }
		
		/// <summary>
		/// The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ContainerPropertiesLeaseStatus State { get; set; }
	}
	
	/// <summary>
	/// Lease Container request schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LeaseContainerRequest
	{
		
		/// <summary>
		/// Specifies the lease action. Can be one of the available actions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public LeaseContainerRequestAction Action { get; set; }
		
		/// <summary>
		/// Optional. For a break action, proposed duration the lease should continue before it is broken, in seconds, between 0 and 60.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakPeriod")]
		public System.Nullable<System.Int32> BreakPeriod { get; set; }
		
		/// <summary>
		/// Required for acquire. Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leaseDuration")]
		public System.Nullable<System.Int32> LeaseDuration { get; set; }
		
		/// <summary>
		/// Identifies the lease. Can be specified in any valid GUID string format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leaseId")]
		public string LeaseId { get; set; }
		
		/// <summary>
		/// Optional for acquire, required for change. Proposed lease ID, in a GUID string format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposedLeaseId")]
		public string ProposedLeaseId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum LeaseContainerRequestAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Acquire = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Renew = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Change = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Release = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Break = 4,
	}
	
	/// <summary>
	/// Lease Container response schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LeaseContainerResponse
	{
		
		/// <summary>
		/// Returned unique lease ID that must be included with any request to delete the container, or to renew, change, or release the lease.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leaseId")]
		public string LeaseId { get; set; }
		
		/// <summary>
		/// Approximate time remaining in the lease period, in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leaseTimeSeconds")]
		public string LeaseTimeSeconds { get; set; }
	}
	
	/// <summary>
	/// The LegalHold property of a blob container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LegalHold
	{
		
		/// <summary>
		/// The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasLegalHold")]
		public System.Nullable<System.Boolean> HasLegalHold { get; set; }
		
		/// <summary>
		/// Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case at SRP.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// The LegalHold property of a blob container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LegalHoldProperties
	{
		
		/// <summary>
		/// The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasLegalHold")]
		public System.Nullable<System.Boolean> HasLegalHold { get; set; }
		
		/// <summary>
		/// The list of LegalHold tags of a blob container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagProperty[] Tags { get; set; }
	}
	
	/// <summary>
	/// A tag of the LegalHold of a blob container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TagProperty
	{
		
		/// <summary>
		/// Returns the Object ID of the user who added the tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectIdentifier")]
		public string ObjectIdentifier { get; set; }
		
		/// <summary>
		/// The tag value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
		
		/// <summary>
		/// Returns the Tenant ID that issued the token for the user who added the tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Returns the date and time the tag was added.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		/// <summary>
		/// Returns the User Principal Name of the user who added the tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upn")]
		public string Upn { get; set; }
	}
	
	public class ListContainerItem
	{
	}
	
	/// <summary>
	/// Response schema. Contains list of blobs returned, and if paging is requested or required, a URL to next page of containers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListContainerItems
	{
		
		/// <summary>
		/// Request URL that can be used to query next page of containers. Returned when total number of requested containers exceed maximum page size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of blobs containers returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ListContainerItem[] Value { get; set; }
	}
	
	/// <summary>
	/// The blob service properties for blob restore policy
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RestorePolicyProperties
	{
		
		/// <summary>
		/// how long this blob can be restored. It should be great than zero and less than DeleteRetentionPolicy.days.
		/// Minimum: 1
		/// Maximum: 365
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="days")]
		[System.ComponentModel.DataAnnotations.Range(1, 365)]
		public System.Nullable<System.Int32> Days { get; set; }
		
		/// <summary>
		/// Blob restore is enabled if set to true.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List blob services of storage account. It returns a collection of one object named default.
		/// BlobServices_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <returns>OK -- List blob services operation completed successfully.</returns>
		public async Task<BlobServiceItems> BlobServices_ListAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/blobServices&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BlobServiceItems>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.
		/// BlobContainers_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="maxpagesize">Optional. Specified maximum number of containers that can be included in the list.</param>
		/// <param name="filter">Optional. When specified, only container names starting with the filter will be listed.</param>
		/// <returns>OK -- List Container operation completed successfully.</returns>
		public async Task<ListContainerItems> BlobContainers_ListAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, string maxpagesize, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/blobServices/default/containers&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$maxpagesize=" + (maxpagesize==null? "" : System.Uri.EscapeDataString(maxpagesize))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListContainerItems>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets properties of a specified container.
		/// BlobContainers_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="containerName">The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <returns>OK -- Get Container operation completed successfully.</returns>
		public async Task<BlobContainer> BlobContainers_GetAsync(string resourceGroupName, string accountName, string containerName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/blobServices/default/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BlobContainer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new container under the specified account as described by request body. The container resource includes metadata and properties for that container. It does not include a list of the blobs contained by the container.
		/// BlobContainers_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="containerName">The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="requestBody">Properties of the blob container to create.</param>
		/// <returns>OK -- The Container is already created.</returns>
		public async Task<BlobContainer> BlobContainers_CreateAsync(string resourceGroupName, string accountName, string containerName, string api_version, string subscriptionId, BlobContainer requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/blobServices/default/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BlobContainer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes specified container under its account.
		/// BlobContainers_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="containerName">The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <returns>OK -- Delete Container operation completed successfully.</returns>
		public async Task BlobContainers_DeleteAsync(string resourceGroupName, string accountName, string containerName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/blobServices/default/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates container properties as specified in request body. Properties not mentioned in the request will be unchanged. Update fails if the specified container doesn't already exist.
		/// BlobContainers_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="containerName">The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="requestBody">Properties to update for the blob container.</param>
		/// <returns>OK -- Update Container operation completed successfully.</returns>
		public async Task<BlobContainer> BlobContainers_UpdateAsync(string resourceGroupName, string accountName, string containerName, string api_version, string subscriptionId, BlobContainer requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/blobServices/default/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BlobContainer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clears legal hold tags. Clearing the same or non-existent tag results in an idempotent operation. ClearLegalHold clears out only the specified tags in the request.
		/// BlobContainers_ClearLegalHold subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/clearLegalHold
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="containerName">The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="requestBody">The LegalHold property that will be clear from a blob container.</param>
		/// <returns>OK -- Clear legal hold tags for Container completed successfully.</returns>
		public async Task<LegalHold> BlobContainers_ClearLegalHoldAsync(string resourceGroupName, string accountName, string containerName, string api_version, string subscriptionId, LegalHold requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/blobServices/default/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/clearLegalHold&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LegalHold>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action allowed on a Locked policy will be this action. ETag in If-Match is required for this operation.
		/// BlobContainers_ExtendImmutabilityPolicy subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/extend
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="containerName">The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="requestBody">The ImmutabilityPolicy Properties that will be extended for a blob container.</param>
		/// <returns>OK -- Extends container ImmutabilityPolicy operation completed successfully..</returns>
		public async Task<ImmutabilityPolicy> BlobContainers_ExtendImmutabilityPolicyAsync(string resourceGroupName, string accountName, string containerName, string api_version, string subscriptionId, ImmutabilityPolicy requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/blobServices/default/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/immutabilityPolicies/default/extend&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ImmutabilityPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation.
		/// BlobContainers_LockImmutabilityPolicy subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/lock
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="containerName">The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <returns>OK -- Locks container ImmutabilityPolicy operation completed successfully.</returns>
		public async Task<ImmutabilityPolicy> BlobContainers_LockImmutabilityPolicyAsync(string resourceGroupName, string accountName, string containerName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/blobServices/default/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/immutabilityPolicies/default/lock&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ImmutabilityPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the existing immutability policy along with the corresponding ETag in response headers and body.
		/// BlobContainers_GetImmutabilityPolicy subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="containerName">The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="immutabilityPolicyName">The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default'</param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <returns>OK -- Gets container ImmutabilityPolicy operation completed successfully.</returns>
		public async Task<ImmutabilityPolicy> BlobContainers_GetImmutabilityPolicyAsync(string resourceGroupName, string accountName, string containerName, BlobContainers_GetImmutabilityPolicyImmutabilityPolicyName immutabilityPolicyName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/blobServices/default/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/immutabilityPolicies/"+immutabilityPolicyName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ImmutabilityPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation.
		/// BlobContainers_CreateOrUpdateImmutabilityPolicy subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="containerName">The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="immutabilityPolicyName">The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default'</param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="requestBody">The ImmutabilityPolicy Properties that will be created or updated to a blob container.</param>
		/// <returns>OK -- Creates or updates container ImmutabilityPolicy operation completed successfully.</returns>
		public async Task<ImmutabilityPolicy> BlobContainers_CreateOrUpdateImmutabilityPolicyAsync(string resourceGroupName, string accountName, string containerName, BlobContainers_CreateOrUpdateImmutabilityPolicyImmutabilityPolicyName immutabilityPolicyName, string api_version, string subscriptionId, ImmutabilityPolicy requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/blobServices/default/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/immutabilityPolicies/"+immutabilityPolicyName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ImmutabilityPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Aborts an unlocked immutability policy. The response of delete has immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation. Deleting a locked immutability policy is not allowed, only way is to delete the container after deleting all blobs inside the container.
		/// BlobContainers_DeleteImmutabilityPolicy subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="containerName">The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="immutabilityPolicyName">The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default'</param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <returns>OK -- Deletes container ImmutabilityPolicy operation completed successfully.</returns>
		public async Task<ImmutabilityPolicy> BlobContainers_DeleteImmutabilityPolicyAsync(string resourceGroupName, string accountName, string containerName, BlobContainers_DeleteImmutabilityPolicyImmutabilityPolicyName immutabilityPolicyName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/blobServices/default/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/immutabilityPolicies/"+immutabilityPolicyName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ImmutabilityPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The Lease Container operation establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite.
		/// BlobContainers_Lease subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/lease
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="containerName">The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="requestBody">Lease Container request body.</param>
		/// <returns>OK -- Lease Container operation completed successfully.</returns>
		public async Task<LeaseContainerResponse> BlobContainers_LeaseAsync(string resourceGroupName, string accountName, string containerName, string api_version, string subscriptionId, LeaseContainerRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/blobServices/default/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/lease&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LeaseContainerResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows an append pattern and does not clear out the existing tags that are not specified in the request.
		/// BlobContainers_SetLegalHold subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/setLegalHold
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="containerName">The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="requestBody">The LegalHold property that will be set to a blob container.</param>
		/// <returns>OK -- Set legal hold tags for Container completed successfully.</returns>
		public async Task<LegalHold> BlobContainers_SetLegalHoldAsync(string resourceGroupName, string accountName, string containerName, string api_version, string subscriptionId, LegalHold requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/blobServices/default/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/setLegalHold&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LegalHold>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the properties of a storage account’s Blob service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
		/// BlobServices_GetServiceProperties subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/{BlobServicesName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="BlobServicesName">The name of the blob Service within the specified storage account. Blob Service Name must be 'default'</param>
		/// <returns>OK -- returned the properties of a storage account’s Blob service.</returns>
		public async Task<BlobServiceProperties> BlobServices_GetServicePropertiesAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, BlobServices_GetServicePropertiesBlobServicesName BlobServicesName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/blobServices/"+BlobServicesName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BlobServiceProperties>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the properties of a storage account’s Blob service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
		/// BlobServices_SetServiceProperties subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/{BlobServicesName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="BlobServicesName">The name of the blob Service within the specified storage account. Blob Service Name must be 'default'</param>
		/// <param name="requestBody">The properties of a storage account’s Blob service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.</param>
		/// <returns>OK -- Sets The properties of a storage account’s Blob service successfully.</returns>
		public async Task<BlobServiceProperties> BlobServices_SetServicePropertiesAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, BlobServices_SetServicePropertiesBlobServicesName BlobServicesName, BlobServiceProperties requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/blobServices/"+BlobServicesName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BlobServiceProperties>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum BlobContainers_GetImmutabilityPolicyImmutabilityPolicyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
	
	public enum BlobContainers_CreateOrUpdateImmutabilityPolicyImmutabilityPolicyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
	
	public enum BlobContainers_DeleteImmutabilityPolicyImmutabilityPolicyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
	
	public enum BlobServices_GetServicePropertiesBlobServicesName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
	
	public enum BlobServices_SetServicePropertiesBlobServicesName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
