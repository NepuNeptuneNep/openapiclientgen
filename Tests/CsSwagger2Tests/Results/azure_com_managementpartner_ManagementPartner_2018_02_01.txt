//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// this is the management partner operations error
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Error
	{
		
		/// <summary>
		/// this is the extended error info
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ExtendedErrorInfo Error1 { get; set; }
	}
	
	/// <summary>
	/// this is the extended error info
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExtendedErrorInfo
	{
		
		/// <summary>
		/// this is the error response code that management partner operations may return
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<ExtendedErrorInfoCode> Code { get; set; }
		
		/// <summary>
		/// this is the extended error info message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExtendedErrorInfoCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFound = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Conflict = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequest = 2,
	}
	
	/// <summary>
	/// this is the error response code that management partner operations may return
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ErrorResponseCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFound = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Conflict = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequest = 2,
	}
	
	/// <summary>
	/// this is the management partner state: Active or Deleted
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ManagementPartnerState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 1,
	}
	
	/// <summary>
	/// this is the management partner operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDisplay
	{
		
		/// <summary>
		/// the is management partner operation description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// the is management partner operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// the is management partner provider
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// the is management partner resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// this is the management partner operations list
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationList
	{
		
		/// <summary>
		/// Url to get the next page of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// this is the operation response list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public OperationResponse[] Value { get; set; }
	}
	
	/// <summary>
	/// this is the management partner operations response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationResponse
	{
		
		/// <summary>
		/// this is the management partner operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplay Display { get; set; }
		
		/// <summary>
		/// this is the operation response name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// the is operation response origin information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
	}
	
	/// <summary>
	/// this is the management partner properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PartnerProperties
	{
		
		/// <summary>
		/// This is the DateTime when the partner was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// This is the object id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// This is the partner id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerId")]
		public string PartnerId { get; set; }
		
		/// <summary>
		/// This is the partner name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerName")]
		public string PartnerName { get; set; }
		
		/// <summary>
		/// this is the management partner state: Active or Deleted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ManagementPartnerState State { get; set; }
		
		/// <summary>
		/// This is the tenant id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// This is the DateTime when the partner was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedTime")]
		public System.Nullable<System.DateTimeOffset> UpdatedTime { get; set; }
		
		/// <summary>
		/// This is the version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// this is the management partner operations response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PartnerResponse
	{
		
		/// <summary>
		/// Type of the partner
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public System.Nullable<System.Int32> Etag { get; set; }
		
		/// <summary>
		/// Identifier of the partner
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the partner
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// this is the management partner properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PartnerProperties Properties { get; set; }
		
		/// <summary>
		/// Type of resource. "Microsoft.ManagementPartner/partners"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get operations.
		/// List all the operations.
		/// Operation_List providers/Microsoft.ManagementPartner/operations
		/// </summary>
		/// <param name="api_version">Supported version.</param>
		/// <returns>List all the operations.</returns>
		public async Task<OperationList> Operation_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.ManagementPartner/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OperationList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a specific `Partner`.
		/// Get the management partner using the objectId and tenantId.
		/// Partners_Get providers/Microsoft.ManagementPartner/partners
		/// </summary>
		/// <param name="api_version">Supported version.</param>
		/// <returns>Get the details of the `Partner`.</returns>
		public async Task<PartnerResponse> Partners_GetAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.ManagementPartner/partners?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PartnerResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a specific `Partner`.
		/// Get the management partner using the partnerId, objectId and tenantId.
		/// Partner_Get providers/Microsoft.ManagementPartner/partners/{partnerId}
		/// </summary>
		/// <param name="partnerId">Id of the Partner</param>
		/// <param name="api_version">Supported version.</param>
		/// <returns>Get the details of the `Partner`.</returns>
		public async Task<PartnerResponse> Partner_GetAsync(string partnerId, string api_version)
		{
			var requestUri = "providers/Microsoft.ManagementPartner/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PartnerResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a specific `Partner`.
		/// Create a management partner for the objectId and tenantId.
		/// Partner_Create providers/Microsoft.ManagementPartner/partners/{partnerId}
		/// </summary>
		/// <param name="partnerId">Id of the Partner</param>
		/// <param name="api_version">Supported version.</param>
		/// <returns>Get the details of the `Partner`.</returns>
		public async Task<PartnerResponse> Partner_CreateAsync(string partnerId, string api_version)
		{
			var requestUri = "providers/Microsoft.ManagementPartner/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PartnerResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a specific `Partner`.
		/// Delete the management partner for the objectId and tenantId.
		/// Partner_Delete providers/Microsoft.ManagementPartner/partners/{partnerId}
		/// </summary>
		/// <param name="partnerId">Id of the Partner</param>
		/// <param name="api_version">Supported version.</param>
		/// <returns>Deleted the `Partner`.</returns>
		public async Task Partner_DeleteAsync(string partnerId, string api_version)
		{
			var requestUri = "providers/Microsoft.ManagementPartner/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a specific `Partner`.
		/// Update the management partner for the objectId and tenantId.
		/// Partner_Update providers/Microsoft.ManagementPartner/partners/{partnerId}
		/// </summary>
		/// <param name="partnerId">Id of the Partner</param>
		/// <param name="api_version">Supported version.</param>
		/// <returns>Get the details of the `Partner`.</returns>
		public async Task<PartnerResponse> Partner_UpdateAsync(string partnerId, string api_version)
		{
			var requestUri = "providers/Microsoft.ManagementPartner/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PartnerResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
