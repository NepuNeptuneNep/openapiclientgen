//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Response for ListAuthorizations API service call retrieves all authorizations that belongs to an ExpressRouteCircuit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AuthorizationListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The authorizations in an ExpressRoute Circuit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ExpressRouteCircuitAuthorization[] Value { get; set; }
	}
	
	public class ExpressRouteCircuitAuthorization
	{
	}
	
	/// <summary>
	/// Properties of ExpressRouteCircuitAuthorization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AuthorizationPropertiesFormat
	{
		
		/// <summary>
		/// The authorization key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationKey")]
		public string AuthorizationKey { get; set; }
		
		/// <summary>
		/// The authorization use status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationUseStatus")]
		public System.Nullable<AuthorizationPropertiesFormatAuthorizationUseStatus> AuthorizationUseStatus { get; set; }
		
		/// <summary>
		/// The current provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<AuthorizationPropertiesFormatProvisioningState> ProvisioningState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AuthorizationPropertiesFormatAuthorizationUseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InUse = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AuthorizationPropertiesFormatProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
	}
	
	/// <summary>
	/// Express Route Circuit connection state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CircuitConnectionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Connected = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Connecting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disconnected = 2,
	}
	
	public class ExpressRouteCircuit
	{
	}
	
	/// <summary>
	/// The ARP table associated with the ExpressRouteCircuit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCircuitArpTable
	{
		
		/// <summary>
		/// Entry age in minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="age")]
		public System.Nullable<System.Int32> Age { get; set; }
		
		/// <summary>
		/// Interface address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interface")]
		public string Interface { get; set; }
		
		/// <summary>
		/// The IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// The MAC address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="macAddress")]
		public string MacAddress { get; set; }
	}
	
	public class ExpressRouteCircuitConnection
	{
	}
	
	/// <summary>
	/// Response for ListConnections API service call retrieves all global reach connections that belongs to a Private Peering for an ExpressRouteCircuit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCircuitConnectionListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The global reach connection associated with Private Peering in an ExpressRoute Circuit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ExpressRouteCircuitConnection[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of the express route circuit connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCircuitConnectionPropertiesFormat
	{
		
		/// <summary>
		/// /29 IP address space to carve out Customer addresses for tunnels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressPrefix")]
		public string AddressPrefix { get; set; }
		
		/// <summary>
		/// The authorization key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationKey")]
		public string AuthorizationKey { get; set; }
		
		/// <summary>
		/// Express Route Circuit connection state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="circuitConnectionStatus")]
		public CircuitConnectionStatus CircuitConnectionStatus { get; set; }
		
		/// <summary>
		/// Reference to another subresource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expressRouteCircuitPeering")]
		public object ExpressRouteCircuitPeering { get; set; }
		
		/// <summary>
		/// Reference to another subresource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peerExpressRouteCircuitPeering")]
		public object PeerExpressRouteCircuitPeering { get; set; }
		
		/// <summary>
		/// The current provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public AuthorizationPropertiesFormatProvisioningState ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// Response for ListExpressRouteCircuit API service call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCircuitListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of ExpressRouteCircuits in a resource group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ExpressRouteCircuit[] Value { get; set; }
	}
	
	public class ExpressRouteCircuitPeering
	{
	}
	
	/// <summary>
	/// Specifies the peering configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCircuitPeeringConfig
	{
		
		/// <summary>
		/// The communities of bgp peering. Specified for microsoft peering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertisedCommunities")]
		public string[] AdvertisedCommunities { get; set; }
		
		/// <summary>
		/// The reference of AdvertisedPublicPrefixes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertisedPublicPrefixes")]
		public string[] AdvertisedPublicPrefixes { get; set; }
		
		/// <summary>
		/// The advertised public prefix state of the Peering resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertisedPublicPrefixesState")]
		public System.Nullable<ExpressRouteCircuitPeeringConfigAdvertisedPublicPrefixesState> AdvertisedPublicPrefixesState { get; set; }
		
		/// <summary>
		/// The CustomerASN of the peering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerASN")]
		public System.Nullable<System.Int32> CustomerASN { get; set; }
		
		/// <summary>
		/// The legacy mode of the peering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legacyMode")]
		public System.Nullable<System.Int32> LegacyMode { get; set; }
		
		/// <summary>
		/// The RoutingRegistryName of the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingRegistryName")]
		public string RoutingRegistryName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExpressRouteCircuitPeeringConfigAdvertisedPublicPrefixesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotConfigured = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Configuring = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Configured = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ValidationNeeded = 3,
	}
	
	/// <summary>
	/// Response for ListPeering API service call retrieves all peerings that belong to an ExpressRouteCircuit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCircuitPeeringListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The peerings in an express route circuit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ExpressRouteCircuitPeering[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of the express route circuit peering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCircuitPeeringPropertiesFormat
	{
		
		/// <summary>
		/// The Azure ASN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureASN")]
		public System.Nullable<System.Int32> AzureASN { get; set; }
		
		/// <summary>
		/// The list of circuit connections associated with Azure Private Peering for this circuit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public ExpressRouteCircuitConnection[] Connections { get; set; }
		
		/// <summary>
		/// The ID of the ExpressRouteConnection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expressRouteConnection")]
		public object ExpressRouteConnection { get; set; }
		
		/// <summary>
		/// The GatewayManager Etag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatewayManagerEtag")]
		public string GatewayManagerEtag { get; set; }
		
		/// <summary>
		/// Contains IPv6 peering config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipv6PeeringConfig")]
		public Ipv6ExpressRouteCircuitPeeringConfig Ipv6PeeringConfig { get; set; }
		
		/// <summary>
		/// Who was the last to modify the peering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedBy")]
		public string LastModifiedBy { get; set; }
		
		/// <summary>
		/// Specifies the peering configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="microsoftPeeringConfig")]
		public ExpressRouteCircuitPeeringConfig MicrosoftPeeringConfig { get; set; }
		
		/// <summary>
		/// The peer ASN.
		/// Minimum: 1
		/// Maximum: 4294967295
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peerASN")]
		[System.ComponentModel.DataAnnotations.Range(1, 4294967295)]
		public System.Nullable<System.Int64> PeerASN { get; set; }
		
		/// <summary>
		/// The list of peered circuit connections associated with Azure Private Peering for this circuit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peeredConnections")]
		public PeerExpressRouteCircuitConnection[] PeeredConnections { get; set; }
		
		/// <summary>
		/// The peering type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peeringType")]
		public System.Nullable<ExpressRouteCircuitPeeringPropertiesFormatPeeringType> PeeringType { get; set; }
		
		/// <summary>
		/// The primary port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryAzurePort")]
		public string PrimaryAzurePort { get; set; }
		
		/// <summary>
		/// The primary address prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryPeerAddressPrefix")]
		public string PrimaryPeerAddressPrefix { get; set; }
		
		/// <summary>
		/// The current provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public AuthorizationPropertiesFormatProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Reference to another subresource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeFilter")]
		public object RouteFilter { get; set; }
		
		/// <summary>
		/// The secondary port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryAzurePort")]
		public string SecondaryAzurePort { get; set; }
		
		/// <summary>
		/// The secondary address prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryPeerAddressPrefix")]
		public string SecondaryPeerAddressPrefix { get; set; }
		
		/// <summary>
		/// The shared key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedKey")]
		public string SharedKey { get; set; }
		
		/// <summary>
		/// The state of peering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ExpressRouteCircuitPeeringPropertiesFormatState> State { get; set; }
		
		/// <summary>
		/// Contains stats associated with the peering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public ExpressRouteCircuitStats Stats { get; set; }
		
		/// <summary>
		/// The VLAN ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vlanId")]
		public System.Nullable<System.Int32> VlanId { get; set; }
	}
	
	public class PeerExpressRouteCircuitConnection
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExpressRouteCircuitPeeringPropertiesFormatPeeringType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzurePublicPeering = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzurePrivatePeering = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MicrosoftPeering = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExpressRouteCircuitPeeringPropertiesFormatState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
	}
	
	/// <summary>
	/// Properties of ExpressRouteCircuit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCircuitPropertiesFormat
	{
		
		/// <summary>
		/// Allow classic operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowClassicOperations")]
		public System.Nullable<System.Boolean> AllowClassicOperations { get; set; }
		
		/// <summary>
		/// The list of authorizations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizations")]
		public ExpressRouteCircuitAuthorization[] Authorizations { get; set; }
		
		/// <summary>
		/// The bandwidth of the circuit when the circuit is provisioned on an ExpressRoutePort resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandwidthInGbps")]
		public System.Nullable<System.Double> BandwidthInGbps { get; set; }
		
		/// <summary>
		/// The CircuitProvisioningState state of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="circuitProvisioningState")]
		public string CircuitProvisioningState { get; set; }
		
		/// <summary>
		/// Reference to another subresource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expressRoutePort")]
		public object ExpressRoutePort { get; set; }
		
		/// <summary>
		/// The GatewayManager Etag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatewayManagerEtag")]
		public string GatewayManagerEtag { get; set; }
		
		/// <summary>
		/// Flag denoting Global reach status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="globalReachEnabled")]
		public System.Nullable<System.Boolean> GlobalReachEnabled { get; set; }
		
		/// <summary>
		/// The list of peerings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peerings")]
		public ExpressRouteCircuitPeering[] Peerings { get; set; }
		
		/// <summary>
		/// The current provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public AuthorizationPropertiesFormatProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The ServiceKey.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceKey")]
		public string ServiceKey { get; set; }
		
		/// <summary>
		/// The ServiceProviderNotes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceProviderNotes")]
		public string ServiceProviderNotes { get; set; }
		
		/// <summary>
		/// Contains ServiceProviderProperties in an ExpressRouteCircuit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceProviderProperties")]
		public ExpressRouteCircuitServiceProviderProperties ServiceProviderProperties { get; set; }
		
		/// <summary>
		/// The ServiceProviderProvisioningState state of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceProviderProvisioningState")]
		public System.Nullable<ExpressRouteCircuitPropertiesFormatServiceProviderProvisioningState> ServiceProviderProvisioningState { get; set; }
		
		/// <summary>
		/// The identifier of the circuit traffic. Outer tag for QinQ encapsulation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stag")]
		public System.Nullable<System.Int32> Stag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExpressRouteCircuitPropertiesFormatServiceProviderProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotProvisioned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Provisioning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Provisioned = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deprovisioning = 3,
	}
	
	/// <summary>
	/// The routes table associated with the ExpressRouteCircuit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCircuitRoutesTable
	{
		
		/// <summary>
		/// Local preference value as set with the set local-preference route-map configuration command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locPrf")]
		public string LocPrf { get; set; }
		
		/// <summary>
		/// IP address of a network entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		/// <summary>
		/// NextHop address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextHop")]
		public string NextHop { get; set; }
		
		/// <summary>
		/// Autonomous system paths to the destination network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Route Weight.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	/// <summary>
	/// The routes table associated with the ExpressRouteCircuit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCircuitRoutesTableSummary
	{
		
		/// <summary>
		/// Autonomous system number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="as")]
		public System.Nullable<System.Int32> As { get; set; }
		
		/// <summary>
		/// IP address of the neighbor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighbor")]
		public string Neighbor { get; set; }
		
		/// <summary>
		/// Current state of the BGP session, and the number of prefixes that have been received from a neighbor or peer group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statePfxRcd")]
		public string StatePfxRcd { get; set; }
		
		/// <summary>
		/// The length of time that the BGP session has been in the Established state, or the current status if not in the Established state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upDown")]
		public string UpDown { get; set; }
		
		/// <summary>
		/// BGP version number spoken to the neighbor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="v")]
		public System.Nullable<System.Int32> V { get; set; }
	}
	
	/// <summary>
	/// Contains ServiceProviderProperties in an ExpressRouteCircuit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCircuitServiceProviderProperties
	{
		
		/// <summary>
		/// The BandwidthInMbps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandwidthInMbps")]
		public System.Nullable<System.Int32> BandwidthInMbps { get; set; }
		
		/// <summary>
		/// The peering location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peeringLocation")]
		public string PeeringLocation { get; set; }
		
		/// <summary>
		/// The serviceProviderName.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceProviderName")]
		public string ServiceProviderName { get; set; }
	}
	
	/// <summary>
	/// Contains SKU in an ExpressRouteCircuit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCircuitSku
	{
		
		/// <summary>
		/// The family of the SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public System.Nullable<ExpressRouteCircuitSkuFamily> Family { get; set; }
		
		/// <summary>
		/// The name of the SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The tier of the SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public System.Nullable<ExpressRouteCircuitSkuTier> Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExpressRouteCircuitSkuFamily
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnlimitedData = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeteredData = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExpressRouteCircuitSkuTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Local = 3,
	}
	
	/// <summary>
	/// Contains stats associated with the peering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCircuitStats
	{
		
		/// <summary>
		/// The Primary BytesIn of the peering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primarybytesIn")]
		public System.Nullable<System.Int64> PrimarybytesIn { get; set; }
		
		/// <summary>
		/// The primary BytesOut of the peering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primarybytesOut")]
		public System.Nullable<System.Int64> PrimarybytesOut { get; set; }
		
		/// <summary>
		/// The secondary BytesIn of the peering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondarybytesIn")]
		public System.Nullable<System.Int64> SecondarybytesIn { get; set; }
		
		/// <summary>
		/// The secondary BytesOut of the peering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondarybytesOut")]
		public System.Nullable<System.Int64> SecondarybytesOut { get; set; }
	}
	
	/// <summary>
	/// Response for ListArpTable associated with the Express Route Circuits API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCircuitsArpTableListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of the ARP tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ExpressRouteCircuitArpTable[] Value { get; set; }
	}
	
	/// <summary>
	/// Response for ListRoutesTable associated with the Express Route Circuits API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCircuitsRoutesTableListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of routes table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ExpressRouteCircuitRoutesTable[] Value { get; set; }
	}
	
	/// <summary>
	/// Response for ListRoutesTable associated with the Express Route Circuits API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCircuitsRoutesTableSummaryListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of the routes table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ExpressRouteCircuitRoutesTableSummary[] Value { get; set; }
	}
	
	/// <summary>
	/// The state of peering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExpressRoutePeeringState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
	}
	
	/// <summary>
	/// The peering type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExpressRoutePeeringType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzurePublicPeering = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzurePrivatePeering = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MicrosoftPeering = 2,
	}
	
	public class ExpressRouteServiceProvider
	{
	}
	
	/// <summary>
	/// Contains bandwidths offered in ExpressRouteServiceProvider resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteServiceProviderBandwidthsOffered
	{
		
		/// <summary>
		/// The OfferName.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerName")]
		public string OfferName { get; set; }
		
		/// <summary>
		/// The ValueInMbps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueInMbps")]
		public System.Nullable<System.Int32> ValueInMbps { get; set; }
	}
	
	/// <summary>
	/// Response for the ListExpressRouteServiceProvider API service call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteServiceProviderListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of ExpressRouteResourceProvider resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ExpressRouteServiceProvider[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of ExpressRouteServiceProvider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteServiceProviderPropertiesFormat
	{
		
		/// <summary>
		/// A list of bandwidths offered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandwidthsOffered")]
		public ExpressRouteServiceProviderBandwidthsOffered[] BandwidthsOffered { get; set; }
		
		/// <summary>
		/// A list of peering locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peeringLocations")]
		public string[] PeeringLocations { get; set; }
		
		/// <summary>
		/// The current provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public AuthorizationPropertiesFormatProvisioningState ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// Contains IPv6 peering config.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Ipv6ExpressRouteCircuitPeeringConfig
	{
		
		/// <summary>
		/// Specifies the peering configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="microsoftPeeringConfig")]
		public ExpressRouteCircuitPeeringConfig MicrosoftPeeringConfig { get; set; }
		
		/// <summary>
		/// The primary address prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryPeerAddressPrefix")]
		public string PrimaryPeerAddressPrefix { get; set; }
		
		/// <summary>
		/// Reference to another subresource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeFilter")]
		public object RouteFilter { get; set; }
		
		/// <summary>
		/// The secondary address prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryPeerAddressPrefix")]
		public string SecondaryPeerAddressPrefix { get; set; }
		
		/// <summary>
		/// The state of peering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ExpressRouteCircuitPeeringPropertiesFormatState State { get; set; }
	}
	
	/// <summary>
	/// Response for ListPeeredConnections API service call retrieves all global reach peer circuit connections that belongs to a Private Peering for an ExpressRouteCircuit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PeerExpressRouteCircuitConnectionListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The global reach peer circuit connection associated with Private Peering in an ExpressRoute Circuit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PeerExpressRouteCircuitConnection[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of the peer express route circuit connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PeerExpressRouteCircuitConnectionPropertiesFormat
	{
		
		/// <summary>
		/// /29 IP address space to carve out Customer addresses for tunnels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressPrefix")]
		public string AddressPrefix { get; set; }
		
		/// <summary>
		/// The resource guid of the authorization used for the express route circuit connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authResourceGuid")]
		public string AuthResourceGuid { get; set; }
		
		/// <summary>
		/// Express Route Circuit connection state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="circuitConnectionStatus")]
		public CircuitConnectionStatus CircuitConnectionStatus { get; set; }
		
		/// <summary>
		/// The name of the express route circuit connection resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionName")]
		public string ConnectionName { get; set; }
		
		/// <summary>
		/// Reference to another subresource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expressRouteCircuitPeering")]
		public object ExpressRouteCircuitPeering { get; set; }
		
		/// <summary>
		/// Reference to another subresource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peerExpressRouteCircuitPeering")]
		public object PeerExpressRouteCircuitPeering { get; set; }
		
		/// <summary>
		/// The current provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public AuthorizationPropertiesFormatProvisioningState ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// The ServiceProviderProvisioningState state of the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServiceProviderProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotProvisioned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Provisioning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Provisioned = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deprovisioning = 3,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets all the express route circuits in a subscription.
		/// ExpressRouteCircuits_ListAll subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteCircuits
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns a list of ExpressRouteCircuit resources.</returns>
		public async Task<ExpressRouteCircuitListResult> ExpressRouteCircuits_ListAllAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Network/expressRouteCircuits?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCircuitListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the available express route service providers.
		/// ExpressRouteServiceProviders_List subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteServiceProviders
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns a list of ExpressRouteServiceProvider resources.</returns>
		public async Task<ExpressRouteServiceProviderListResult> ExpressRouteServiceProviders_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Network/expressRouteServiceProviders?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteServiceProviderListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the express route circuits in a resource group.
		/// ExpressRouteCircuits_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns the resulting ExpressRouteCircuitAuthorization resource.</returns>
		public async Task<ExpressRouteCircuitListResult> ExpressRouteCircuits_ListAsync(string resourceGroupName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCircuitListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified express route circuit.
		/// ExpressRouteCircuits_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of express route circuit.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns the resulting ExpressRouteCircuit resource.</returns>
		public async Task<ExpressRouteCircuit> ExpressRouteCircuits_GetAsync(string resourceGroupName, string circuitName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCircuit>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an express route circuit.
		/// ExpressRouteCircuits_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the circuit.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the create or update express route circuit operation.</param>
		/// <returns>Update successful. The operation returns the resulting ExpressRouteCircuit resource.</returns>
		public async Task<ExpressRouteCircuit> ExpressRouteCircuits_CreateOrUpdateAsync(string resourceGroupName, string circuitName, string api_version, string subscriptionId, ExpressRouteCircuit requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCircuit>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified express route circuit.
		/// ExpressRouteCircuits_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the express route circuit.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Delete successful.</returns>
		public async Task ExpressRouteCircuits_DeleteAsync(string resourceGroupName, string circuitName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an express route circuit tags.
		/// ExpressRouteCircuits_UpdateTags subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the circuit.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to update express route circuit tags.</param>
		/// <returns>Update successful. The operation returns the resulting ExpressRouteCircuit resource.</returns>
		public async Task<ExpressRouteCircuit> ExpressRouteCircuits_UpdateTagsAsync(string resourceGroupName, string circuitName, string api_version, string subscriptionId, object requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCircuit>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all authorizations in an express route circuit.
		/// ExpressRouteCircuitAuthorizations_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the circuit.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns a list of ExpressRouteCircuitAuthorization resources.</returns>
		public async Task<AuthorizationListResult> ExpressRouteCircuitAuthorizations_ListAsync(string resourceGroupName, string circuitName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"/authorizations&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AuthorizationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified authorization from the specified express route circuit.
		/// ExpressRouteCircuitAuthorizations_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations/{authorizationName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the express route circuit.</param>
		/// <param name="authorizationName">The name of the authorization.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns the ExpressRouteCircuitAuthorization resource.</returns>
		public async Task<ExpressRouteCircuitAuthorization> ExpressRouteCircuitAuthorizations_GetAsync(string resourceGroupName, string circuitName, string authorizationName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"/authorizations/"+ (authorizationName==null? "" : System.Uri.EscapeDataString(authorizationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCircuitAuthorization>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an authorization in the specified express route circuit.
		/// ExpressRouteCircuitAuthorizations_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations/{authorizationName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the express route circuit.</param>
		/// <param name="authorizationName">The name of the authorization.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the create or update express route circuit authorization operation.</param>
		/// <returns>Update successful. The operation returns the resulting ExpressRouteCircuitAuthorization resource.</returns>
		public async Task<ExpressRouteCircuitAuthorization> ExpressRouteCircuitAuthorizations_CreateOrUpdateAsync(string resourceGroupName, string circuitName, string authorizationName, string api_version, string subscriptionId, ExpressRouteCircuitAuthorization requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"/authorizations/"+ (authorizationName==null? "" : System.Uri.EscapeDataString(authorizationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCircuitAuthorization>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified authorization from the specified express route circuit.
		/// ExpressRouteCircuitAuthorizations_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations/{authorizationName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the express route circuit.</param>
		/// <param name="authorizationName">The name of the authorization.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Delete successful.</returns>
		public async Task ExpressRouteCircuitAuthorizations_DeleteAsync(string resourceGroupName, string circuitName, string authorizationName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"/authorizations/"+ (authorizationName==null? "" : System.Uri.EscapeDataString(authorizationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all peerings in a specified express route circuit.
		/// ExpressRouteCircuitPeerings_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the express route circuit.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns a list of ExpressRouteCircuitPeering resources.</returns>
		public async Task<ExpressRouteCircuitPeeringListResult> ExpressRouteCircuitPeerings_ListAsync(string resourceGroupName, string circuitName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"/peerings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCircuitPeeringListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified peering for the express route circuit.
		/// ExpressRouteCircuitPeerings_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the express route circuit.</param>
		/// <param name="peeringName">The name of the peering.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns the resulting ExpressRouteCircuitPeering resource.</returns>
		public async Task<ExpressRouteCircuitPeering> ExpressRouteCircuitPeerings_GetAsync(string resourceGroupName, string circuitName, string peeringName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"/peerings/"+ (peeringName==null? "" : System.Uri.EscapeDataString(peeringName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCircuitPeering>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a peering in the specified express route circuits.
		/// ExpressRouteCircuitPeerings_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the express route circuit.</param>
		/// <param name="peeringName">The name of the peering.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the create or update express route circuit peering operation.</param>
		/// <returns>Update successful. The operation returns the resulting ExpressRouteCircuitPeering resource.</returns>
		public async Task<ExpressRouteCircuitPeering> ExpressRouteCircuitPeerings_CreateOrUpdateAsync(string resourceGroupName, string circuitName, string peeringName, string api_version, string subscriptionId, ExpressRouteCircuitPeering requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"/peerings/"+ (peeringName==null? "" : System.Uri.EscapeDataString(peeringName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCircuitPeering>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified peering from the specified express route circuit.
		/// ExpressRouteCircuitPeerings_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the express route circuit.</param>
		/// <param name="peeringName">The name of the peering.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Delete successful.</returns>
		public async Task ExpressRouteCircuitPeerings_DeleteAsync(string resourceGroupName, string circuitName, string peeringName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"/peerings/"+ (peeringName==null? "" : System.Uri.EscapeDataString(peeringName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the currently advertised ARP table associated with the express route circuit in a resource group.
		/// ExpressRouteCircuits_ListArpTable subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/arpTables/{devicePath}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the express route circuit.</param>
		/// <param name="peeringName">The name of the peering.</param>
		/// <param name="devicePath">The path of the device.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns the resulting ExpressRouteCircuitsArpTable resource.</returns>
		public async Task<ExpressRouteCircuitsArpTableListResult> ExpressRouteCircuits_ListArpTableAsync(string resourceGroupName, string circuitName, string peeringName, string devicePath, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"/peerings/"+ (peeringName==null? "" : System.Uri.EscapeDataString(peeringName))+"/arpTables/"+ (devicePath==null? "" : System.Uri.EscapeDataString(devicePath))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCircuitsArpTableListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all global reach connections associated with a private peering in an express route circuit.
		/// ExpressRouteCircuitConnections_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/connections
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the circuit.</param>
		/// <param name="peeringName">The name of the peering.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns a list of ExpressRouteCircuitConnections resources.</returns>
		public async Task<ExpressRouteCircuitConnectionListResult> ExpressRouteCircuitConnections_ListAsync(string resourceGroupName, string circuitName, string peeringName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"/peerings/"+ (peeringName==null? "" : System.Uri.EscapeDataString(peeringName))+"/connections&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCircuitConnectionListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified Express Route Circuit Connection from the specified express route circuit.
		/// ExpressRouteCircuitConnections_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/connections/{connectionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the express route circuit.</param>
		/// <param name="peeringName">The name of the peering.</param>
		/// <param name="connectionName">The name of the express route circuit connection.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns the resulting Express Route Circuit Connection resource.</returns>
		public async Task<ExpressRouteCircuitConnection> ExpressRouteCircuitConnections_GetAsync(string resourceGroupName, string circuitName, string peeringName, string connectionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"/peerings/"+ (peeringName==null? "" : System.Uri.EscapeDataString(peeringName))+"/connections/"+ (connectionName==null? "" : System.Uri.EscapeDataString(connectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCircuitConnection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a Express Route Circuit Connection in the specified express route circuits.
		/// ExpressRouteCircuitConnections_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/connections/{connectionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the express route circuit.</param>
		/// <param name="peeringName">The name of the peering.</param>
		/// <param name="connectionName">The name of the express route circuit connection.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the create or update express route circuit connection operation.</param>
		/// <returns>Update successful. The operation returns the resulting ExpressRouteCircuitPeering resource.</returns>
		public async Task<ExpressRouteCircuitConnection> ExpressRouteCircuitConnections_CreateOrUpdateAsync(string resourceGroupName, string circuitName, string peeringName, string connectionName, string api_version, string subscriptionId, ExpressRouteCircuitConnection requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"/peerings/"+ (peeringName==null? "" : System.Uri.EscapeDataString(peeringName))+"/connections/"+ (connectionName==null? "" : System.Uri.EscapeDataString(connectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCircuitConnection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Express Route Circuit Connection from the specified express route circuit.
		/// ExpressRouteCircuitConnections_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/connections/{connectionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the express route circuit.</param>
		/// <param name="peeringName">The name of the peering.</param>
		/// <param name="connectionName">The name of the express route circuit connection.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Delete successful.</returns>
		public async Task ExpressRouteCircuitConnections_DeleteAsync(string resourceGroupName, string circuitName, string peeringName, string connectionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"/peerings/"+ (peeringName==null? "" : System.Uri.EscapeDataString(peeringName))+"/connections/"+ (connectionName==null? "" : System.Uri.EscapeDataString(connectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all global reach peer connections associated with a private peering in an express route circuit.
		/// PeerExpressRouteCircuitConnections_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/peerConnections
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the circuit.</param>
		/// <param name="peeringName">The name of the peering.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns a list of PeerExpressRouteCircuitConnections resources.</returns>
		public async Task<PeerExpressRouteCircuitConnectionListResult> PeerExpressRouteCircuitConnections_ListAsync(string resourceGroupName, string circuitName, string peeringName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"/peerings/"+ (peeringName==null? "" : System.Uri.EscapeDataString(peeringName))+"/peerConnections&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PeerExpressRouteCircuitConnectionListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified Peer Express Route Circuit Connection from the specified express route circuit.
		/// PeerExpressRouteCircuitConnections_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/peerConnections/{connectionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the express route circuit.</param>
		/// <param name="peeringName">The name of the peering.</param>
		/// <param name="connectionName">The name of the peer express route circuit connection.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns the resulting Peer Express Route Circuit Connection resource.</returns>
		public async Task<PeerExpressRouteCircuitConnection> PeerExpressRouteCircuitConnections_GetAsync(string resourceGroupName, string circuitName, string peeringName, string connectionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"/peerings/"+ (peeringName==null? "" : System.Uri.EscapeDataString(peeringName))+"/peerConnections/"+ (connectionName==null? "" : System.Uri.EscapeDataString(connectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PeerExpressRouteCircuitConnection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the currently advertised routes table associated with the express route circuit in a resource group.
		/// ExpressRouteCircuits_ListRoutesTable subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/routeTables/{devicePath}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the express route circuit.</param>
		/// <param name="peeringName">The name of the peering.</param>
		/// <param name="devicePath">The path of the device.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns the resulting ExpressRouteCircuitsRouteTable resource.</returns>
		public async Task<ExpressRouteCircuitsRoutesTableListResult> ExpressRouteCircuits_ListRoutesTableAsync(string resourceGroupName, string circuitName, string peeringName, string devicePath, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"/peerings/"+ (peeringName==null? "" : System.Uri.EscapeDataString(peeringName))+"/routeTables/"+ (devicePath==null? "" : System.Uri.EscapeDataString(devicePath))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCircuitsRoutesTableListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the currently advertised routes table summary associated with the express route circuit in a resource group.
		/// ExpressRouteCircuits_ListRoutesTableSummary subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/routeTablesSummary/{devicePath}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the express route circuit.</param>
		/// <param name="peeringName">The name of the peering.</param>
		/// <param name="devicePath">The path of the device.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns the resulting ExpressRouteCircuitsRoutesTableSummary resource.</returns>
		public async Task<ExpressRouteCircuitsRoutesTableSummaryListResult> ExpressRouteCircuits_ListRoutesTableSummaryAsync(string resourceGroupName, string circuitName, string peeringName, string devicePath, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"/peerings/"+ (peeringName==null? "" : System.Uri.EscapeDataString(peeringName))+"/routeTablesSummary/"+ (devicePath==null? "" : System.Uri.EscapeDataString(devicePath))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCircuitsRoutesTableSummaryListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all stats from an express route circuit in a resource group.
		/// ExpressRouteCircuits_GetPeeringStats subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/stats
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the express route circuit.</param>
		/// <param name="peeringName">The name of the peering.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns the resulting ExpressRouteCircuitStats resource.</returns>
		public async Task<ExpressRouteCircuitStats> ExpressRouteCircuits_GetPeeringStatsAsync(string resourceGroupName, string circuitName, string peeringName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"/peerings/"+ (peeringName==null? "" : System.Uri.EscapeDataString(peeringName))+"/stats&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCircuitStats>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the stats from an express route circuit in a resource group.
		/// ExpressRouteCircuits_GetStats subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/stats
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="circuitName">The name of the express route circuit.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns the resulting ExpressRouteCircuitStats resource.</returns>
		public async Task<ExpressRouteCircuitStats> ExpressRouteCircuits_GetStatsAsync(string resourceGroupName, string circuitName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCircuits/"+ (circuitName==null? "" : System.Uri.EscapeDataString(circuitName))+"/stats&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCircuitStats>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
