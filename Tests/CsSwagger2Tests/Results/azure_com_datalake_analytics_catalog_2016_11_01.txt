//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A Data Lake Analytics catalog access control list (ACL) entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Acl
	{
		
		/// <summary>
		/// the access control list (ACL) entry type. UserObj and GroupObj denote the owning user and group, respectively.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aceType")]
		public System.Nullable<AclAceType> AceType { get; set; }
		
		/// <summary>
		/// the permission type of the access control list (ACL) entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permission")]
		public System.Nullable<AclPermission> Permission { get; set; }
		
		/// <summary>
		/// the Azure AD object ID of the user or group being specified in the access control list (ACL) entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AclAceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserObj = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GroupObj = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		User = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Group = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AclPermission
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Use = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Create = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Drop = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alter = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Write = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 6,
	}
	
	/// <summary>
	/// The parameters used to create or update an access control list (ACL) entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AclCreateOrUpdateParameters
	{
		
		/// <summary>
		/// the access control list (ACL) entry type. UserObj and GroupObj denote the owning user and group, respectively.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aceType")]
		public AclAceType AceType { get; set; }
		
		/// <summary>
		/// the permission type of the access control list (ACL) entry.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="permission")]
		public AclPermission Permission { get; set; }
		
		/// <summary>
		/// the Azure AD object ID of the user or group being specified in the access control list (ACL) entry.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	/// <summary>
	/// The parameters used to delete an access control list (ACL) entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AclDeleteParameters
	{
		
		/// <summary>
		/// the access control list (ACL) entry type. UserObj and GroupObj denote the owning user and group, respectively.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aceType")]
		public AclAceType AceType { get; set; }
		
		/// <summary>
		/// the Azure AD object ID of the user or group being specified in the access control list (ACL) entry.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog access control list (ACL).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AclList : CatalogItemList
	{
		
		/// <summary>
		/// the access control list (ACL).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Acl[] Value { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogItem
	{
		
		/// <summary>
		/// the name of the Data Lake Analytics account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computeAccountName")]
		public string ComputeAccountName { get; set; }
		
		/// <summary>
		/// the version of the catalog item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog item list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogItemList
	{
		
		/// <summary>
		/// the link to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
	}
	
	/// <summary>
	/// Data Lake Analytics catalog credential creation parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataLakeAnalyticsCatalogCredentialCreateParameters
	{
		
		/// <summary>
		/// the password for the credential and user with access to the data source.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// the URI identifier for the data source this credential can connect to in the format <hostname>:<port>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// the object identifier for the user associated with this credential with access to the data source.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// Data Lake Analytics catalog credential deletion parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataLakeAnalyticsCatalogCredentialDeleteParameters
	{
		
		/// <summary>
		/// the current password for the credential and user with access to the data source. This is required if the requester is not the account owner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	/// <summary>
	/// Data Lake Analytics catalog credential update parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataLakeAnalyticsCatalogCredentialUpdateParameters
	{
		
		/// <summary>
		/// the new password for the credential and user with access to the data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newPassword")]
		public string NewPassword { get; set; }
		
		/// <summary>
		/// the current password for the credential and user with access to the data source. This is required if the requester is not the account owner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// the URI identifier for the data source this credential can connect to in the format <hostname>:<port>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// the object identifier for the user associated with this credential with access to the data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// Data Lake Analytics catalog secret creation and update parameters. This is deprecated and will be removed in the next release. Please use DataLakeAnalyticsCatalogCredentialCreateOrUpdateParameters instead.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters
	{
		
		/// <summary>
		/// the password for the secret to pass in
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// the URI identifier for the secret in the format <hostname>:<port>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics DDL name item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DdlName
	{
		
		/// <summary>
		/// the name of the table associated with this database and schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstPart")]
		public string FirstPart { get; set; }
		
		/// <summary>
		/// the name of the table associated with this database and schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondPart")]
		public string SecondPart { get; set; }
		
		/// <summary>
		/// the name of the table associated with this database and schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="server")]
		public string Server { get; set; }
		
		/// <summary>
		/// the name of the table associated with this database and schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thirdPart")]
		public string ThirdPart { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog entity identifier object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EntityId
	{
		
		/// <summary>
		/// A Data Lake Analytics DDL name item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public DdlName Name { get; set; }
		
		/// <summary>
		/// the version of the external data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog external table item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExternalTable
	{
		
		/// <summary>
		/// A Data Lake Analytics catalog entity identifier object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSource")]
		public EntityId DataSource { get; set; }
		
		/// <summary>
		/// the name of the table associated with this database and schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableName")]
		public string TableName { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog type field information item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TypeFieldInfo
	{
		
		/// <summary>
		/// the name of the field associated with this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// the type of the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL Assembly.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlAssembly : CatalogItem
	{
		
		/// <summary>
		/// the name of the assembly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assemblyName")]
		public string AssemblyName { get; set; }
		
		/// <summary>
		/// the name of the CLR.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clrName")]
		public string ClrName { get; set; }
		
		/// <summary>
		/// the name of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// the list of dependencies associated with the assembly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependencies")]
		public USqlAssemblyDependencyInfo[] Dependencies { get; set; }
		
		/// <summary>
		/// the list of files associated with the assembly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="files")]
		public USqlAssemblyFileInfo[] Files { get; set; }
		
		/// <summary>
		/// the switch indicating if this assembly is user defined or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isUserDefined")]
		public System.Nullable<System.Boolean> IsUserDefined { get; set; }
		
		/// <summary>
		/// the switch indicating if this assembly is visible or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isVisible")]
		public System.Nullable<System.Boolean> IsVisible { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL dependency information item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlAssemblyDependencyInfo
	{
		
		/// <summary>
		/// A Data Lake Analytics catalog entity identifier object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public EntityId EntityId { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL assembly file information item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlAssemblyFileInfo
	{
		
		/// <summary>
		/// The content path to the assembly file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentPath")]
		public string ContentPath { get; set; }
		
		/// <summary>
		/// The original path to the assembly file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalPath")]
		public string OriginalPath { get; set; }
		
		/// <summary>
		/// the assembly file type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<USqlAssemblyFileInfoType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum USqlAssemblyFileInfoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Assembly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Resource = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nodeploy = 2,
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL assembly CLR item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlAssemblyClr : CatalogItem
	{
		
		/// <summary>
		/// the name of the assembly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assemblyClrName")]
		public string AssemblyClrName { get; set; }
		
		/// <summary>
		/// the name of the CLR.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clrName")]
		public string ClrName { get; set; }
		
		/// <summary>
		/// the name of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL assembly CLR item list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlAssemblyList : CatalogItemList
	{
		
		/// <summary>
		/// the list of assemblies in the database
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public USqlAssemblyClr[] Value { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL credential item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlCredential : CatalogItem
	{
		
		/// <summary>
		/// the name of the credential.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentialName")]
		public string CredentialName { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL credential item list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlCredentialList : CatalogItemList
	{
		
		/// <summary>
		/// the list of credentials in the database
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public USqlCredential[] Value { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL database item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlDatabase : CatalogItem
	{
		
		/// <summary>
		/// the name of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL database item list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlDatabaseList : CatalogItemList
	{
		
		/// <summary>
		/// the list of databases
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public USqlDatabase[] Value { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL directed column item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlDirectedColumn
	{
		
		/// <summary>
		/// the switch indicating if the index is descending or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="descending")]
		public System.Nullable<System.Boolean> Descending { get; set; }
		
		/// <summary>
		/// the name of the index in the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL distribution information object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlDistributionInfo
	{
		
		/// <summary>
		/// the count of indices using this distribution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// the dynamic count of indices using this distribution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicCount")]
		public System.Nullable<System.Int32> DynamicCount { get; set; }
		
		/// <summary>
		/// the list of directed columns in the distribution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keys")]
		public USqlDirectedColumn[] Keys { get; set; }
		
		/// <summary>
		/// the type of this distribution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<System.Int32> Type { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL external datasource item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlExternalDataSource : CatalogItem
	{
		
		/// <summary>
		/// the name of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// the name of the external data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalDataSourceName")]
		public string ExternalDataSourceName { get; set; }
		
		/// <summary>
		/// the name of the provider for the external data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// the name of the provider string for the external data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerString")]
		public string ProviderString { get; set; }
		
		/// <summary>
		/// the list of types to push down from the external data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushdownTypes")]
		public string[] PushdownTypes { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL external datasource item list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlExternalDataSourceList : CatalogItemList
	{
		
		/// <summary>
		/// the list of external data sources in the database
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public USqlExternalDataSource[] Value { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL table index item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlIndex
	{
		
		/// <summary>
		/// the list of columns in the index
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public string[] Columns { get; set; }
		
		/// <summary>
		/// A Data Lake Analytics catalog U-SQL distribution information object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distributionInfo")]
		public USqlDistributionInfo DistributionInfo { get; set; }
		
		/// <summary>
		/// the ID of this index within the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexId")]
		public System.Nullable<System.Int32> IndexId { get; set; }
		
		/// <summary>
		/// the list of directed columns in the index
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexKeys")]
		public USqlDirectedColumn[] IndexKeys { get; set; }
		
		/// <summary>
		/// the switch indicating if this index is a columnstore index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isColumnstore")]
		public System.Nullable<System.Boolean> IsColumnstore { get; set; }
		
		/// <summary>
		/// the switch indicating if this index is a unique index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isUnique")]
		public System.Nullable<System.Boolean> IsUnique { get; set; }
		
		/// <summary>
		/// the name of the index in the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// partition function ID for the index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionFunction")]
		public string PartitionFunction { get; set; }
		
		/// <summary>
		/// the list of partition keys in the index
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionKeyList")]
		public string[] PartitionKeyList { get; set; }
		
		/// <summary>
		/// the list of full paths to the streams that contain this index in the DataLake account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamNames")]
		public string[] StreamNames { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL package item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlPackage : CatalogItem
	{
		
		/// <summary>
		/// the name of the database containing the package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// the definition of the package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public string Definition { get; set; }
		
		/// <summary>
		/// the name of the package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// the name of the schema associated with this package and database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaName")]
		public string SchemaName { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL package item list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlPackageList : CatalogItemList
	{
		
		/// <summary>
		/// the list of packages in the database and schema combination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public USqlPackage[] Value { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL procedure item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlProcedure : CatalogItem
	{
		
		/// <summary>
		/// the name of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// the defined query of the procedure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public string Definition { get; set; }
		
		/// <summary>
		/// the name of the procedure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="procName")]
		public string ProcName { get; set; }
		
		/// <summary>
		/// the name of the schema associated with this procedure and database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaName")]
		public string SchemaName { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL procedure item list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlProcedureList : CatalogItemList
	{
		
		/// <summary>
		/// the list of procedure in the database and schema combination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public USqlProcedure[] Value { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL schema item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlSchema : CatalogItem
	{
		
		/// <summary>
		/// the name of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// the name of the schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaName")]
		public string SchemaName { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL schema item list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlSchemaList : CatalogItemList
	{
		
		/// <summary>
		/// the list of schemas in the database
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public USqlSchema[] Value { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL secret item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlSecret : CatalogItem
	{
		
		/// <summary>
		/// the creation time of the credential object. This is the only information returned about a secret from a GET.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// the name of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// the password for the secret to pass in
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// the name of the secret.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretName")]
		public string SecretName { get; set; }
		
		/// <summary>
		/// the URI identifier for the secret in the format <hostname>:<port>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL table item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlTable : CatalogItem
	{
		
		/// <summary>
		/// the list of columns in this table
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnList")]
		public USqlTableColumn[] ColumnList { get; set; }
		
		/// <summary>
		/// the name of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// A Data Lake Analytics catalog U-SQL distribution information object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distributionInfo")]
		public USqlDistributionInfo DistributionInfo { get; set; }
		
		/// <summary>
		/// A Data Lake Analytics catalog external table item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalTable")]
		public ExternalTable ExternalTable { get; set; }
		
		/// <summary>
		/// the list of indices in this table
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexList")]
		public USqlIndex[] IndexList { get; set; }
		
		/// <summary>
		/// the list of partition keys in the table
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionKeyList")]
		public string[] PartitionKeyList { get; set; }
		
		/// <summary>
		/// the name of the schema associated with this table and database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaName")]
		public string SchemaName { get; set; }
		
		/// <summary>
		/// the name of the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableName")]
		public string TableName { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL table column item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlTableColumn
	{
		
		/// <summary>
		/// the name of the column in the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// the object type of the specified column (such as System.String).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL table fragment item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlTableFragment
	{
		
		/// <summary>
		/// the creation time of the table fragment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		/// <summary>
		/// the version of the catalog item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fragmentId")]
		public string FragmentId { get; set; }
		
		/// <summary>
		/// the ordinal of the index which contains the table fragment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexId")]
		public System.Nullable<System.Int32> IndexId { get; set; }
		
		/// <summary>
		/// the parent object Id of the table fragment. The parent could be a table or table partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public string ParentId { get; set; }
		
		/// <summary>
		/// the number of rows in the table fragment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowCount")]
		public System.Nullable<System.Int64> RowCount { get; set; }
		
		/// <summary>
		/// the data size of the table fragment in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int64> Size { get; set; }
		
		/// <summary>
		/// the relative path for the table fragment location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamPath")]
		public string StreamPath { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL table fragment item list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlTableFragmentList : CatalogItemList
	{
		
		/// <summary>
		/// the list of table fragments in the database, schema and table combination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public USqlTableFragment[] Value { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL table item list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlTableList : CatalogItemList
	{
		
		/// <summary>
		/// the list of tables in the database and schema combination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public USqlTable[] Value { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL table partition item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlTablePartition : CatalogItem
	{
		
		/// <summary>
		/// the creation time of the partition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		/// <summary>
		/// the name of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// the index ID for this partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexId")]
		public System.Nullable<System.Int32> IndexId { get; set; }
		
		/// <summary>
		/// the list of labels associated with this partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string[] Label { get; set; }
		
		/// <summary>
		/// A Data Lake Analytics DDL name item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentName")]
		public DdlName ParentName { get; set; }
		
		/// <summary>
		/// the name of the table partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionName")]
		public string PartitionName { get; set; }
		
		/// <summary>
		/// the name of the schema associated with this table partition and database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaName")]
		public string SchemaName { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL table partition item list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlTablePartitionList : CatalogItemList
	{
		
		/// <summary>
		/// the list of table partitions in the database, schema and table combination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public USqlTablePartition[] Value { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog table or partition preview rows item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlTablePreview
	{
		
		/// <summary>
		/// the rows of the table or partition preview, where each row is an array of string representations the row's values. Note: Byte arrays will appear as base-64 encoded values, SqlMap and SqlArray objects will appear as escaped JSON objects, and DateTime objects will appear as ISO formatted UTC date-times.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public string[] Rows { get; set; }
		
		/// <summary>
		/// the schema of the table or partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public USqlTableColumn[] Schema { get; set; }
		
		/// <summary>
		/// the total number of columns in the table or partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalColumnCount")]
		public System.Nullable<System.Int64> TotalColumnCount { get; set; }
		
		/// <summary>
		/// the total number of rows in the table or partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalRowCount")]
		public System.Nullable<System.Int64> TotalRowCount { get; set; }
		
		/// <summary>
		/// true if the amount of data in the response is less than expected due to the preview operation's size limitations. This can occur if the requested rows or row counts are too large.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="truncated")]
		public System.Nullable<System.Boolean> Truncated { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL table statistics item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlTableStatistics : CatalogItem
	{
		
		/// <summary>
		/// the list of column names associated with these statistics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colNames")]
		public string[] ColNames { get; set; }
		
		/// <summary>
		/// the creation time of the statistics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		/// <summary>
		/// the name of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// the filter definition for the statistics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterDefinition")]
		public string FilterDefinition { get; set; }
		
		/// <summary>
		/// the switch indicating if these statistics have a filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasFilter")]
		public System.Nullable<System.Boolean> HasFilter { get; set; }
		
		/// <summary>
		/// the switch indicating if these statistics are automatically created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAutoCreated")]
		public System.Nullable<System.Boolean> IsAutoCreated { get; set; }
		
		/// <summary>
		/// the switch indicating if these statistics are user created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isUserCreated")]
		public System.Nullable<System.Boolean> IsUserCreated { get; set; }
		
		/// <summary>
		/// the name of the schema associated with this table and database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaName")]
		public string SchemaName { get; set; }
		
		/// <summary>
		/// the path to the statistics data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statDataPath")]
		public string StatDataPath { get; set; }
		
		/// <summary>
		/// the name of the table statistics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statisticsName")]
		public string StatisticsName { get; set; }
		
		/// <summary>
		/// the name of the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableName")]
		public string TableName { get; set; }
		
		/// <summary>
		/// the last time the statistics were updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.Nullable<System.DateTimeOffset> UpdateTime { get; set; }
		
		/// <summary>
		/// the name of the user statistics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userStatName")]
		public string UserStatName { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL table statistics item list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlTableStatisticsList : CatalogItemList
	{
		
		/// <summary>
		/// the list of table statistics in the database, schema and table combination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public USqlTableStatistics[] Value { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL table type item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlTableType : USqlType
	{
		
		/// <summary>
		/// the type field information associated with this table type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public TypeFieldInfo[] Columns { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL table type item list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlTableTypeList : CatalogItemList
	{
		
		/// <summary>
		/// the list of table types in the database and schema combination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public USqlTableType[] Value { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL table valued function item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlTableValuedFunction : CatalogItem
	{
		
		/// <summary>
		/// the name of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// the definition of the table valued function.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public string Definition { get; set; }
		
		/// <summary>
		/// the name of the schema associated with this database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaName")]
		public string SchemaName { get; set; }
		
		/// <summary>
		/// the name of the table valued function.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tvfName")]
		public string TvfName { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL table valued function item list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlTableValuedFunctionList : CatalogItemList
	{
		
		/// <summary>
		/// the list of table valued functions in the database and schema combination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public USqlTableValuedFunction[] Value { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL type item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlType : CatalogItem
	{
		
		/// <summary>
		/// the C# name for this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cSharpName")]
		public string CSharpName { get; set; }
		
		/// <summary>
		/// the name of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// the fully qualified C# name for this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullCSharpName")]
		public string FullCSharpName { get; set; }
		
		/// <summary>
		/// The switch indicating if this type is an assembly type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAssemblyType")]
		public System.Nullable<System.Boolean> IsAssemblyType { get; set; }
		
		/// <summary>
		/// The switch indicating if this type is a complex type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isComplexType")]
		public System.Nullable<System.Boolean> IsComplexType { get; set; }
		
		/// <summary>
		/// The switch indicating if this type is nullable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isNullable")]
		public System.Nullable<System.Boolean> IsNullable { get; set; }
		
		/// <summary>
		/// The switch indicating if this type is a table type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isTableType")]
		public System.Nullable<System.Boolean> IsTableType { get; set; }
		
		/// <summary>
		/// The switch indicating if this type is user defined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isUserDefined")]
		public System.Nullable<System.Boolean> IsUserDefined { get; set; }
		
		/// <summary>
		/// the principal ID for this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public System.Nullable<System.Int32> PrincipalId { get; set; }
		
		/// <summary>
		/// the schema ID for this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaId")]
		public System.Nullable<System.Int32> SchemaId { get; set; }
		
		/// <summary>
		/// the name of the schema associated with this table and database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaName")]
		public string SchemaName { get; set; }
		
		/// <summary>
		/// the system type ID for this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemTypeId")]
		public System.Nullable<System.Int32> SystemTypeId { get; set; }
		
		/// <summary>
		/// the type family for this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="typeFamily")]
		public string TypeFamily { get; set; }
		
		/// <summary>
		/// the name of type for this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="typeName")]
		public string TypeName { get; set; }
		
		/// <summary>
		/// the user type ID for this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userTypeId")]
		public System.Nullable<System.Int32> UserTypeId { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL type item list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlTypeList : CatalogItemList
	{
		
		/// <summary>
		/// the list of types in the database and schema combination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public USqlType[] Value { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL view item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlView : CatalogItem
	{
		
		/// <summary>
		/// the name of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// the defined query of the view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public string Definition { get; set; }
		
		/// <summary>
		/// the name of the schema associated with this view and database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaName")]
		public string SchemaName { get; set; }
		
		/// <summary>
		/// the name of the view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewName")]
		public string ViewName { get; set; }
	}
	
	/// <summary>
	/// A Data Lake Analytics catalog U-SQL view item list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class USqlViewList : CatalogItemList
	{
		
		/// <summary>
		/// the list of view in the database and schema combination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public USqlView[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves the list of access control list (ACL) entries for the Data Lake Analytics catalog.
		/// Catalog_ListAcls catalog/usql/acl
		/// </summary>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of access control list (ACL) entries for the Data Lake Analytics catalog.</returns>
		public async Task<AclList> Catalog_ListAclsAsync(string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "catalog/usql/acl?$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AclList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of databases from the Data Lake Analytics catalog.
		/// Catalog_ListDatabases catalog/usql/databases
		/// </summary>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of databases.</returns>
		public async Task<USqlDatabaseList> Catalog_ListDatabasesAsync(string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "catalog/usql/databases?$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlDatabaseList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the specified database from the Data Lake Analytics catalog.
		/// Catalog_GetDatabase catalog/usql/databases/{databaseName}
		/// </summary>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the details of the specified database.</returns>
		public async Task<USqlDatabase> Catalog_GetDatabaseAsync(string databaseName, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlDatabase>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of access control list (ACL) entries for the database from the Data Lake Analytics catalog.
		/// Catalog_ListAclsByDatabase catalog/usql/databases/{databaseName}/acl
		/// </summary>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of access control list (ACL) entries for the specified database.</returns>
		public async Task<AclList> Catalog_ListAclsByDatabaseAsync(string databaseName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/acl&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AclList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of assemblies from the Data Lake Analytics catalog.
		/// Catalog_ListAssemblies catalog/usql/databases/{databaseName}/assemblies
		/// </summary>
		/// <param name="databaseName">The name of the database containing the assembly.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of assemblies in the specified database.</returns>
		public async Task<USqlAssemblyList> Catalog_ListAssembliesAsync(string databaseName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/assemblies&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlAssemblyList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the specified assembly from the Data Lake Analytics catalog.
		/// Catalog_GetAssembly catalog/usql/databases/{databaseName}/assemblies/{assemblyName}
		/// </summary>
		/// <param name="databaseName">The name of the database containing the assembly.</param>
		/// <param name="assemblyName">The name of the assembly.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the details of the specified assembly in the specified database.</returns>
		public async Task<USqlAssembly> Catalog_GetAssemblyAsync(string databaseName, string assemblyName, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/assemblies/"+ (assemblyName==null? "" : System.Uri.EscapeDataString(assemblyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlAssembly>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of credentials from the Data Lake Analytics catalog.
		/// Catalog_ListCredentials catalog/usql/databases/{databaseName}/credentials
		/// </summary>
		/// <param name="databaseName">The name of the database containing the schema.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of credentials in the specified database.</returns>
		public async Task<USqlCredentialList> Catalog_ListCredentialsAsync(string databaseName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/credentials&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlCredentialList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the specified credential from the Data Lake Analytics catalog.
		/// Catalog_GetCredential catalog/usql/databases/{databaseName}/credentials/{credentialName}
		/// </summary>
		/// <param name="databaseName">The name of the database containing the schema.</param>
		/// <param name="credentialName">The name of the credential.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the specified credential (name only) from the specified database.</returns>
		public async Task<USqlCredential> Catalog_GetCredentialAsync(string databaseName, string credentialName, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/credentials/"+ (credentialName==null? "" : System.Uri.EscapeDataString(credentialName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlCredential>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates the specified credential for use with external data sources in the specified database.
		/// Catalog_CreateCredential catalog/usql/databases/{databaseName}/credentials/{credentialName}
		/// </summary>
		/// <param name="databaseName">The name of the database in which to create the credential. Note: This is NOT an external database name, but the name of an existing U-SQL database that should contain the new credential object.</param>
		/// <param name="credentialName">The name of the credential.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The parameters required to create the credential (name and password)</param>
		/// <returns>Successfully created the credential within the specified database.</returns>
		public async Task Catalog_CreateCredentialAsync(string databaseName, string credentialName, string api_version, DataLakeAnalyticsCatalogCredentialCreateParameters requestBody)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/credentials/"+ (credentialName==null? "" : System.Uri.EscapeDataString(credentialName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified credential in the specified database
		/// Catalog_DeleteCredential catalog/usql/databases/{databaseName}/credentials/{credentialName}
		/// </summary>
		/// <param name="databaseName">The name of the database containing the credential.</param>
		/// <param name="credentialName">The name of the credential to delete</param>
		/// <param name="cascade">Indicates if the delete should be a cascading delete (which deletes all resources dependent on the credential as well as the credential) or not. If false will fail if there are any resources relying on the credential.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The parameters to delete a credential if the current user is not the account owner.</param>
		/// <returns>Successfully deleted the specified credential from the specified database.</returns>
		public async Task Catalog_DeleteCredentialAsync(string databaseName, string credentialName, bool cascade, string api_version, DataLakeAnalyticsCatalogCredentialDeleteParameters requestBody)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/credentials/"+ (credentialName==null? "" : System.Uri.EscapeDataString(credentialName))+"&cascade="+cascade+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the specified credential for use with external data sources in the specified database
		/// Catalog_UpdateCredential catalog/usql/databases/{databaseName}/credentials/{credentialName}
		/// </summary>
		/// <param name="databaseName">The name of the database containing the credential.</param>
		/// <param name="credentialName">The name of the credential.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The parameters required to modify the credential (name and password)</param>
		/// <returns>Successfully updated the specified credential's password in the specified database</returns>
		public async Task Catalog_UpdateCredentialAsync(string databaseName, string credentialName, string api_version, DataLakeAnalyticsCatalogCredentialUpdateParameters requestBody)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/credentials/"+ (credentialName==null? "" : System.Uri.EscapeDataString(credentialName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of external data sources from the Data Lake Analytics catalog.
		/// Catalog_ListExternalDataSources catalog/usql/databases/{databaseName}/externaldatasources
		/// </summary>
		/// <param name="databaseName">The name of the database containing the external data sources.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of external data sources in the specified database.</returns>
		public async Task<USqlExternalDataSourceList> Catalog_ListExternalDataSourcesAsync(string databaseName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/externaldatasources&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlExternalDataSourceList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the specified external data source from the Data Lake Analytics catalog.
		/// Catalog_GetExternalDataSource catalog/usql/databases/{databaseName}/externaldatasources/{externalDataSourceName}
		/// </summary>
		/// <param name="databaseName">The name of the database containing the external data source.</param>
		/// <param name="externalDataSourceName">The name of the external data source.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved details of the specified external data source in the specified database.</returns>
		public async Task<USqlExternalDataSource> Catalog_GetExternalDataSourceAsync(string databaseName, string externalDataSourceName, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/externaldatasources/"+ (externalDataSourceName==null? "" : System.Uri.EscapeDataString(externalDataSourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlExternalDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of schemas from the Data Lake Analytics catalog.
		/// Catalog_ListSchemas catalog/usql/databases/{databaseName}/schemas
		/// </summary>
		/// <param name="databaseName">The name of the database containing the schema.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of schemas in the specified database.</returns>
		public async Task<USqlSchemaList> Catalog_ListSchemasAsync(string databaseName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlSchemaList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the specified schema from the Data Lake Analytics catalog.
		/// Catalog_GetSchema catalog/usql/databases/{databaseName}/schemas/{schemaName}
		/// </summary>
		/// <param name="databaseName">The name of the database containing the schema.</param>
		/// <param name="schemaName">The name of the schema.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the details of the specified schema in the specified database.</returns>
		public async Task<USqlSchema> Catalog_GetSchemaAsync(string databaseName, string schemaName, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlSchema>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of packages from the Data Lake Analytics catalog.
		/// Catalog_ListPackages catalog/usql/databases/{databaseName}/schemas/{schemaName}/packages
		/// </summary>
		/// <param name="databaseName">The name of the database containing the packages.</param>
		/// <param name="schemaName">The name of the schema containing the packages.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of packages in the specified database and schema.</returns>
		public async Task<USqlPackageList> Catalog_ListPackagesAsync(string databaseName, string schemaName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/packages&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlPackageList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the specified package from the Data Lake Analytics catalog.
		/// Catalog_GetPackage catalog/usql/databases/{databaseName}/schemas/{schemaName}/packages/{packageName}
		/// </summary>
		/// <param name="databaseName">The name of the database containing the package.</param>
		/// <param name="schemaName">The name of the schema containing the package.</param>
		/// <param name="packageName">The name of the package.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the specified package from the underlying database and schema combination</returns>
		public async Task<USqlPackage> Catalog_GetPackageAsync(string databaseName, string schemaName, string packageName, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/packages/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlPackage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of procedures from the Data Lake Analytics catalog.
		/// Catalog_ListProcedures catalog/usql/databases/{databaseName}/schemas/{schemaName}/procedures
		/// </summary>
		/// <param name="databaseName">The name of the database containing the procedures.</param>
		/// <param name="schemaName">The name of the schema containing the procedures.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of procedures in the specified database and schema.</returns>
		public async Task<USqlProcedureList> Catalog_ListProceduresAsync(string databaseName, string schemaName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/procedures&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlProcedureList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the specified procedure from the Data Lake Analytics catalog.
		/// Catalog_GetProcedure catalog/usql/databases/{databaseName}/schemas/{schemaName}/procedures/{procedureName}
		/// </summary>
		/// <param name="databaseName">The name of the database containing the procedure.</param>
		/// <param name="schemaName">The name of the schema containing the procedure.</param>
		/// <param name="procedureName">The name of the procedure.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the specified procedure from the underlying database and schema combination.</returns>
		public async Task<USqlProcedure> Catalog_GetProcedureAsync(string databaseName, string schemaName, string procedureName, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/procedures/"+ (procedureName==null? "" : System.Uri.EscapeDataString(procedureName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlProcedure>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of all table statistics within the specified schema from the Data Lake Analytics catalog.
		/// Catalog_ListTableStatisticsByDatabaseAndSchema catalog/usql/databases/{databaseName}/schemas/{schemaName}/statistics
		/// </summary>
		/// <param name="databaseName">The name of the database containing the statistics.</param>
		/// <param name="schemaName">The name of the schema containing the statistics.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of all table statistics in the specified database and schema.</returns>
		public async Task<USqlTableStatisticsList> Catalog_ListTableStatisticsByDatabaseAndSchemaAsync(string databaseName, string schemaName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/statistics&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlTableStatisticsList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of tables from the Data Lake Analytics catalog.
		/// Catalog_ListTables catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables
		/// </summary>
		/// <param name="databaseName">The name of the database containing the tables.</param>
		/// <param name="schemaName">The name of the schema containing the tables.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="basic">The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of tables in the specified database and schema.</returns>
		public async Task<USqlTableList> Catalog_ListTablesAsync(string databaseName, string schemaName, string filter, int top, int skip, string select, string orderby, bool count, bool basic, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/tables&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&basic="+basic+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlTableList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the specified table from the Data Lake Analytics catalog.
		/// Catalog_GetTable catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}
		/// </summary>
		/// <param name="databaseName">The name of the database containing the table.</param>
		/// <param name="schemaName">The name of the schema containing the table.</param>
		/// <param name="tableName">The name of the table.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the specified table from the underlying database and schema combination</returns>
		public async Task<USqlTable> Catalog_GetTableAsync(string databaseName, string schemaName, string tableName, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/tables/"+ (tableName==null? "" : System.Uri.EscapeDataString(tableName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlTable>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of table partitions from the Data Lake Analytics catalog.
		/// Catalog_ListTablePartitions catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/partitions
		/// </summary>
		/// <param name="databaseName">The name of the database containing the partitions.</param>
		/// <param name="schemaName">The name of the schema containing the partitions.</param>
		/// <param name="tableName">The name of the table containing the partitions.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of table partitions in the specified database, schema, and table.</returns>
		public async Task<USqlTablePartitionList> Catalog_ListTablePartitionsAsync(string databaseName, string schemaName, string tableName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/tables/"+ (tableName==null? "" : System.Uri.EscapeDataString(tableName))+"/partitions&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlTablePartitionList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the specified table partition from the Data Lake Analytics catalog.
		/// Catalog_GetTablePartition catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/partitions/{partitionName}
		/// </summary>
		/// <param name="databaseName">The name of the database containing the partition.</param>
		/// <param name="schemaName">The name of the schema containing the partition.</param>
		/// <param name="tableName">The name of the table containing the partition.</param>
		/// <param name="partitionName">The name of the table partition.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the details of the specified table partition in the specified database, schema, and table.</returns>
		public async Task<USqlTablePartition> Catalog_GetTablePartitionAsync(string databaseName, string schemaName, string tableName, string partitionName, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/tables/"+ (tableName==null? "" : System.Uri.EscapeDataString(tableName))+"/partitions/"+ (partitionName==null? "" : System.Uri.EscapeDataString(partitionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlTablePartition>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a preview set of rows in given partition.
		/// Catalog_PreviewTablePartition catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/partitions/{partitionName}/previewrows
		/// </summary>
		/// <param name="databaseName">The name of the database containing the partition.</param>
		/// <param name="schemaName">The name of the schema containing the partition.</param>
		/// <param name="tableName">The name of the table containing the partition.</param>
		/// <param name="partitionName">The name of the table partition.</param>
		/// <param name="maxRows">The maximum number of preview rows to be retrieved.Rows returned may be less than or equal to this number depending on row sizes and number of rows in the partition.</param>
		/// <param name="maxColumns">The maximum number of columns to be retrieved.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved preview rows for the specified partition.</returns>
		public async Task<USqlTablePreview> Catalog_PreviewTablePartitionAsync(string databaseName, string schemaName, string tableName, string partitionName, long maxRows, long maxColumns, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/tables/"+ (tableName==null? "" : System.Uri.EscapeDataString(tableName))+"/partitions/"+ (partitionName==null? "" : System.Uri.EscapeDataString(partitionName))+"/previewrows&maxRows="+maxRows+"&maxColumns="+maxColumns+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlTablePreview>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a preview set of rows in given table.
		/// Catalog_PreviewTable catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/previewrows
		/// </summary>
		/// <param name="databaseName">The name of the database containing the table.</param>
		/// <param name="schemaName">The name of the schema containing the table.</param>
		/// <param name="tableName">The name of the table.</param>
		/// <param name="maxRows">The maximum number of preview rows to be retrieved. Rows returned may be less than or equal to this number depending on row sizes and number of rows in the table.</param>
		/// <param name="maxColumns">The maximum number of columns to be retrieved.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved preview rows for the specified table.</returns>
		public async Task<USqlTablePreview> Catalog_PreviewTableAsync(string databaseName, string schemaName, string tableName, long maxRows, long maxColumns, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/tables/"+ (tableName==null? "" : System.Uri.EscapeDataString(tableName))+"/previewrows&maxRows="+maxRows+"&maxColumns="+maxColumns+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlTablePreview>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of table statistics from the Data Lake Analytics catalog.
		/// Catalog_ListTableStatistics catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/statistics
		/// </summary>
		/// <param name="databaseName">The name of the database containing the statistics.</param>
		/// <param name="schemaName">The name of the schema containing the statistics.</param>
		/// <param name="tableName">The name of the table containing the statistics.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of table statistics in the specified database and schema.</returns>
		public async Task<USqlTableStatisticsList> Catalog_ListTableStatisticsAsync(string databaseName, string schemaName, string tableName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/tables/"+ (tableName==null? "" : System.Uri.EscapeDataString(tableName))+"/statistics&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlTableStatisticsList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the specified table statistics from the Data Lake Analytics catalog.
		/// Catalog_GetTableStatistic catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/statistics/{statisticsName}
		/// </summary>
		/// <param name="databaseName">The name of the database containing the statistics.</param>
		/// <param name="schemaName">The name of the schema containing the statistics.</param>
		/// <param name="tableName">The name of the table containing the statistics.</param>
		/// <param name="statisticsName">The name of the table statistics.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the details of the specified table statistics in the specified database and schema.</returns>
		public async Task<USqlTableStatistics> Catalog_GetTableStatisticAsync(string databaseName, string schemaName, string tableName, string statisticsName, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/tables/"+ (tableName==null? "" : System.Uri.EscapeDataString(tableName))+"/statistics/"+ (statisticsName==null? "" : System.Uri.EscapeDataString(statisticsName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlTableStatistics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of table fragments from the Data Lake Analytics catalog.
		/// Catalog_ListTableFragments catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/tablefragments
		/// </summary>
		/// <param name="databaseName">The name of the database containing the table fragments.</param>
		/// <param name="schemaName">The name of the schema containing the table fragments.</param>
		/// <param name="tableName">The name of the table containing the table fragments.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of table fragments in the specified database and schema.</returns>
		public async Task<USqlTableFragmentList> Catalog_ListTableFragmentsAsync(string databaseName, string schemaName, string tableName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/tables/"+ (tableName==null? "" : System.Uri.EscapeDataString(tableName))+"/tablefragments&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlTableFragmentList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of table types from the Data Lake Analytics catalog.
		/// Catalog_ListTableTypes catalog/usql/databases/{databaseName}/schemas/{schemaName}/tabletypes
		/// </summary>
		/// <param name="databaseName">The name of the database containing the table types.</param>
		/// <param name="schemaName">The name of the schema containing the table types.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of table types in the specified database and schema.</returns>
		public async Task<USqlTableTypeList> Catalog_ListTableTypesAsync(string databaseName, string schemaName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/tabletypes&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlTableTypeList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the specified table type from the Data Lake Analytics catalog.
		/// Catalog_GetTableType catalog/usql/databases/{databaseName}/schemas/{schemaName}/tabletypes/{tableTypeName}
		/// </summary>
		/// <param name="databaseName">The name of the database containing the table type.</param>
		/// <param name="schemaName">The name of the schema containing the table type.</param>
		/// <param name="tableTypeName">The name of the table type to retrieve.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the specified table type from the underlying database and schema combination</returns>
		public async Task<USqlTableType> Catalog_GetTableTypeAsync(string databaseName, string schemaName, string tableTypeName, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/tabletypes/"+ (tableTypeName==null? "" : System.Uri.EscapeDataString(tableTypeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlTableType>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of table valued functions from the Data Lake Analytics catalog.
		/// Catalog_ListTableValuedFunctions catalog/usql/databases/{databaseName}/schemas/{schemaName}/tablevaluedfunctions
		/// </summary>
		/// <param name="databaseName">The name of the database containing the table valued functions.</param>
		/// <param name="schemaName">The name of the schema containing the table valued functions.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of table valued functions in the specified database and schema.</returns>
		public async Task<USqlTableValuedFunctionList> Catalog_ListTableValuedFunctionsAsync(string databaseName, string schemaName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/tablevaluedfunctions&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlTableValuedFunctionList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the specified table valued function from the Data Lake Analytics catalog.
		/// Catalog_GetTableValuedFunction catalog/usql/databases/{databaseName}/schemas/{schemaName}/tablevaluedfunctions/{tableValuedFunctionName}
		/// </summary>
		/// <param name="databaseName">The name of the database containing the table valued function.</param>
		/// <param name="schemaName">The name of the schema containing the table valued function.</param>
		/// <param name="tableValuedFunctionName">The name of the tableValuedFunction.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the details of the specified table valued function in the specified database and schema.</returns>
		public async Task<USqlTableValuedFunction> Catalog_GetTableValuedFunctionAsync(string databaseName, string schemaName, string tableValuedFunctionName, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/tablevaluedfunctions/"+ (tableValuedFunctionName==null? "" : System.Uri.EscapeDataString(tableValuedFunctionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlTableValuedFunction>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of types within the specified database and schema from the Data Lake Analytics catalog.
		/// Catalog_ListTypes catalog/usql/databases/{databaseName}/schemas/{schemaName}/types
		/// </summary>
		/// <param name="databaseName">The name of the database containing the types.</param>
		/// <param name="schemaName">The name of the schema containing the types.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of types in the specified database and schema.</returns>
		public async Task<USqlTypeList> Catalog_ListTypesAsync(string databaseName, string schemaName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/types&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlTypeList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of views from the Data Lake Analytics catalog.
		/// Catalog_ListViews catalog/usql/databases/{databaseName}/schemas/{schemaName}/views
		/// </summary>
		/// <param name="databaseName">The name of the database containing the views.</param>
		/// <param name="schemaName">The name of the schema containing the views.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of views in the specified database and schema.</returns>
		public async Task<USqlViewList> Catalog_ListViewsAsync(string databaseName, string schemaName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/views&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlViewList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the specified view from the Data Lake Analytics catalog.
		/// Catalog_GetView catalog/usql/databases/{databaseName}/schemas/{schemaName}/views/{viewName}
		/// </summary>
		/// <param name="databaseName">The name of the database containing the view.</param>
		/// <param name="schemaName">The name of the schema containing the view.</param>
		/// <param name="viewName">The name of the view.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the specified view from the underlying database and schema combination</returns>
		public async Task<USqlView> Catalog_GetViewAsync(string databaseName, string schemaName, string viewName, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName))+"/views/"+ (viewName==null? "" : System.Uri.EscapeDataString(viewName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlView>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes all secrets in the specified database. This is deprecated and will be removed in the next release. In the future, please only drop individual credentials using DeleteCredential
		/// Catalog_DeleteAllSecrets catalog/usql/databases/{databaseName}/secrets
		/// </summary>
		/// <param name="databaseName">The name of the database containing the secret.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully deleted all secrets from the specified database.</returns>
		public async Task Catalog_DeleteAllSecretsAsync(string databaseName, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/secrets&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use GetCredential instead.
		/// Catalog_GetSecret catalog/usql/databases/{databaseName}/secrets/{secretName}
		/// </summary>
		/// <param name="databaseName">The name of the database containing the secret.</param>
		/// <param name="secretName">The name of the secret to get</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved details of the specified secret in the specified database.</returns>
		public async Task<USqlSecret> Catalog_GetSecretAsync(string databaseName, string secretName, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/secrets/"+ (secretName==null? "" : System.Uri.EscapeDataString(secretName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlSecret>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use CreateCredential instead.
		/// Catalog_CreateSecret catalog/usql/databases/{databaseName}/secrets/{secretName}
		/// </summary>
		/// <param name="databaseName">The name of the database in which to create the secret.</param>
		/// <param name="secretName">The name of the secret.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The parameters required to create the secret (name and password)</param>
		/// <returns>Successfully created the specified secret in the specified database.</returns>
		public async Task Catalog_CreateSecretAsync(string databaseName, string secretName, string api_version, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters requestBody)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/secrets/"+ (secretName==null? "" : System.Uri.EscapeDataString(secretName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use DeleteCredential instead.
		/// Catalog_DeleteSecret catalog/usql/databases/{databaseName}/secrets/{secretName}
		/// </summary>
		/// <param name="databaseName">The name of the database containing the secret.</param>
		/// <param name="secretName">The name of the secret to delete</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully deleted the specified secret from the specified database.</returns>
		public async Task Catalog_DeleteSecretAsync(string databaseName, string secretName, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/secrets/"+ (secretName==null? "" : System.Uri.EscapeDataString(secretName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use UpdateCredential instead.
		/// Catalog_UpdateSecret catalog/usql/databases/{databaseName}/secrets/{secretName}
		/// </summary>
		/// <param name="databaseName">The name of the database containing the secret.</param>
		/// <param name="secretName">The name of the secret.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The parameters required to modify the secret (name and password)</param>
		/// <returns>Successfully updated the details of the specified secret in the specified database.</returns>
		public async Task Catalog_UpdateSecretAsync(string databaseName, string secretName, string api_version, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters requestBody)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/secrets/"+ (secretName==null? "" : System.Uri.EscapeDataString(secretName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of all statistics in a database from the Data Lake Analytics catalog.
		/// Catalog_ListTableStatisticsByDatabase catalog/usql/databases/{databaseName}/statistics
		/// </summary>
		/// <param name="databaseName">The name of the database containing the table statistics.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of all table statistics in the specified database.</returns>
		public async Task<USqlTableStatisticsList> Catalog_ListTableStatisticsByDatabaseAsync(string databaseName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/statistics&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlTableStatisticsList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of all tables in a database from the Data Lake Analytics catalog.
		/// Catalog_ListTablesByDatabase catalog/usql/databases/{databaseName}/tables
		/// </summary>
		/// <param name="databaseName">The name of the database containing the tables.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="basic">The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of all tables in the specified database.</returns>
		public async Task<USqlTableList> Catalog_ListTablesByDatabaseAsync(string databaseName, string filter, int top, int skip, string select, string orderby, bool count, bool basic, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/tables&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&basic="+basic+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlTableList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of all table valued functions in a database from the Data Lake Analytics catalog.
		/// Catalog_ListTableValuedFunctionsByDatabase catalog/usql/databases/{databaseName}/tablevaluedfunctions
		/// </summary>
		/// <param name="databaseName">The name of the database containing the table valued functions.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of all table valued functions in the specified database.</returns>
		public async Task<USqlTableValuedFunctionList> Catalog_ListTableValuedFunctionsByDatabaseAsync(string databaseName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/tablevaluedfunctions&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlTableValuedFunctionList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of all views in a database from the Data Lake Analytics catalog.
		/// Catalog_ListViewsByDatabase catalog/usql/databases/{databaseName}/views
		/// </summary>
		/// <param name="databaseName">The name of the database containing the views.</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="top">The number of items to return. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="skip">The number of items to skip over before returning elements. Optional.
		/// Minimum: 1
		// </param>
		/// <param name="select">OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.</param>
		/// <param name="orderby">OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.</param>
		/// <param name="count">The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successfully retrieved the list of all views in the specified database.</returns>
		public async Task<USqlViewList> Catalog_ListViewsByDatabaseAsync(string databaseName, string filter, int top, int skip, string select, string orderby, bool count, string api_version)
		{
			var requestUri = "catalog/usql/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/views&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skip="+skip+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$count="+count+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<USqlViewList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
