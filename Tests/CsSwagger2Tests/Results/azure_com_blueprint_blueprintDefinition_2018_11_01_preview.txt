//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents a blueprint artifact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Artifact
	{
		
		/// <summary>
		/// Specifies the kind of blueprint artifact.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public ArtifactKind Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ArtifactKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		template = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		roleAssignment = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		policyAssignment = 2,
	}
	
	/// <summary>
	/// List of blueprint artifacts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactList
	{
		
		/// <summary>
		/// Link to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of blueprint artifacts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Artifact[] Value { get; set; }
	}
	
	/// <summary>
	/// Common properties shared by different artifacts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactPropertiesBase
	{
		
		/// <summary>
		/// Artifacts which need to be deployed before the specified artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependsOn")]
		public string[] DependsOn { get; set; }
	}
	
	/// <summary>
	/// Common properties for all Azure resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureResourceBase
	{
		
		/// <summary>
		/// String Id used to locate any resource on Azure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents a Blueprint definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Blueprint
	{
		
		/// <summary>
		/// Schema for blueprint definition properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public BlueprintProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Schema for blueprint definition properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlueprintProperties
	{
		
		/// <summary>
		/// Layout view of the blueprint definition for UI reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="layout")]
		public string Layout { get; set; }
		
		/// <summary>
		/// Published versions of this blueprint definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public string Versions { get; set; }
	}
	
	/// <summary>
	/// List of blueprint definitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlueprintList
	{
		
		/// <summary>
		/// Link to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of blueprint definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Blueprint[] Value { get; set; }
	}
	
	/// <summary>
	/// Shared properties between all blueprint resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlueprintResourcePropertiesBase
	{
		
		/// <summary>
		/// Multi-line explain this resource.
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Description { get; set; }
		
		/// <summary>
		/// One-liner string explain this resource.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// Shared status properties between all blueprint resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlueprintResourceStatusBase
	{
		
		/// <summary>
		/// Last modified time of this blueprint definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// Creation time of this blueprint definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeCreated")]
		public System.Nullable<System.DateTimeOffset> TimeCreated { get; set; }
	}
	
	/// <summary>
	/// The status of the blueprint. This field is readonly.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlueprintStatus
	{
	}
	
	/// <summary>
	/// Represent a parameter with constrains and metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ParameterDefinition
	{
		
		/// <summary>
		/// Array of allowed values for this parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedValues")]
		public string[] AllowedValues { get; set; }
		
		/// <summary>
		/// Default Value for this parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public object DefaultValue { get; set; }
		
		/// <summary>
		/// User-friendly properties for this parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ParameterDefinitionMetadata Metadata { get; set; }
		
		/// <summary>
		/// Allowed data types for Resource Manager template parameters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ParameterDefinitionType Type { get; set; }
	}
	
	/// <summary>
	/// User-friendly properties for this parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ParameterDefinitionMetadata
	{
		
		/// <summary>
		/// Description of this parameter/resourceGroup.
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Description { get; set; }
		
		/// <summary>
		/// DisplayName of this parameter/resourceGroup.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// StrongType for UI to render rich experience during blueprint assignment. Supported strong types are resourceType, principalId and location.
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="strongType")]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string StrongType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ParameterDefinitionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
		_string = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		array = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bool")]
		_bool = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="int")]
		_int = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="object")]
		_object = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		secureObject = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		secureString = 6,
	}
	
	/// <summary>
	/// A dictionary hold parameter name and its metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ParameterDefinitionCollection
	{
	}
	
	/// <summary>
	/// Value for the specified parameter. Can be either 'value' or 'reference' but not both.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ParameterValue
	{
		
		/// <summary>
		/// Reference to a Key Vault secret.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public SecretValueReference Reference { get; set; }
		
		/// <summary>
		/// Parameter value as value type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	/// <summary>
	/// Reference to a Key Vault secret.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecretValueReference
	{
		
		/// <summary>
		/// Specifies the link to a Key Vault.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyVault")]
		public KeyVaultReference KeyVault { get; set; }
		
		/// <summary>
		/// Name of the secret.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretName")]
		public string SecretName { get; set; }
		
		/// <summary>
		/// The version of the secret to use. If left blank, the latest version of the secret is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretVersion")]
		public string SecretVersion { get; set; }
	}
	
	/// <summary>
	/// Specifies the link to a Key Vault.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyVaultReference
	{
		
		/// <summary>
		/// Azure resource ID of the Key Vault.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// A dictionary for parameters and their corresponding values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ParameterValueCollection
	{
	}
	
	/// <summary>
	/// Blueprint artifact that applies a Policy assignment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PolicyAssignmentArtifact
	{
		
		/// <summary>
		/// Properties of a Policy assignment blueprint artifact.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PolicyAssignmentArtifactProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a Policy assignment blueprint artifact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PolicyAssignmentArtifactProperties
	{
		
		/// <summary>
		/// A dictionary for parameters and their corresponding values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ParameterValueCollection Parameters { get; set; }
		
		/// <summary>
		/// Azure resource ID of the policy definition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policyDefinitionId")]
		public string PolicyDefinitionId { get; set; }
		
		/// <summary>
		/// Name of the resource group placeholder to which the policy will be assigned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
	}
	
	/// <summary>
	/// Represents a published blueprint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PublishedBlueprint
	{
		
		/// <summary>
		/// Schema for published blueprint definition properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PublishedBlueprintProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Schema for published blueprint definition properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PublishedBlueprintProperties
	{
		
		/// <summary>
		/// Name of the published blueprint definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blueprintName")]
		public string BlueprintName { get; set; }
		
		/// <summary>
		/// Version-specific change notes.
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string ChangeNotes { get; set; }
	}
	
	/// <summary>
	/// List of published blueprint definitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PublishedBlueprintList
	{
		
		/// <summary>
		/// Link to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of published blueprint definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PublishedBlueprint[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents an Azure resource group in a blueprint definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceGroupDefinition
	{
		
		/// <summary>
		/// Artifacts which need to be deployed before this resource group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependsOn")]
		public string[] DependsOn { get; set; }
		
		/// <summary>
		/// Location of this resourceGroup. Leave empty if the resource group location will be specified during the blueprint assignment.
		/// Max length: 90
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		[System.ComponentModel.DataAnnotations.MaxLength(90)]
		public string Location { get; set; }
		
		/// <summary>
		/// User-friendly properties for this parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ParameterDefinitionMetadata Metadata { get; set; }
		
		/// <summary>
		/// Name of this resourceGroup. Leave empty if the resource group name will be specified during the blueprint assignment.
		/// Min length: 1
		/// Max length: 90
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(90)]
		public string Name { get; set; }
		
		/// <summary>
		/// A dictionary of resource group tag values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public ResourceGroupTagCollection Tags { get; set; }
	}
	
	/// <summary>
	/// A dictionary of resource group tag values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceGroupTagCollection
	{
	}
	
	/// <summary>
	/// A dictionary which maps resource group placeholders to the resource groups which will be created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceGroupDefinitionCollection
	{
	}
	
	/// <summary>
	/// Represents an Azure resource group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceGroupValue
	{
		
		/// <summary>
		/// Location of the resource group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Name of the resource group.
		/// Min length: 1
		/// Max length: 90
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(90)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A dictionary which maps resource group placeholders to the resource groups which will be created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceGroupValueCollection
	{
	}
	
	/// <summary>
	/// Supported operations of this resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceProviderOperation
	{
		
		/// <summary>
		/// Display metadata associated with the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name, in format of {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Results of the request to list operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceProviderOperationList
	{
		
		/// <summary>
		/// List of operations supported by this resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ResourceProviderOperation[] Value { get; set; }
	}
	
	/// <summary>
	/// Blueprint artifact that applies a Role assignment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoleAssignmentArtifact
	{
		
		/// <summary>
		/// Properties of a Role assignment blueprint artifact.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RoleAssignmentArtifactProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a Role assignment blueprint artifact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoleAssignmentArtifactProperties
	{
		
		/// <summary>
		/// Array of user or group identities in Azure Active Directory. The roleDefinition will apply to each identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principalIds")]
		public object PrincipalIds { get; set; }
		
		/// <summary>
		/// RoleAssignment will be scope to this resourceGroup. If empty, it scopes to the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// Azure resource ID of the RoleDefinition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleDefinitionId")]
		public string RoleDefinitionId { get; set; }
	}
	
	/// <summary>
	/// Shared Schema for both blueprintProperties and publishedBlueprintProperties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SharedBlueprintProperties
	{
		
		/// <summary>
		/// A dictionary hold parameter name and its metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ParameterDefinitionCollection Parameters { get; set; }
		
		/// <summary>
		/// A dictionary which maps resource group placeholders to the resource groups which will be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroups")]
		public ResourceGroupDefinitionCollection ResourceGroups { get; set; }
		
		/// <summary>
		/// The status of the blueprint. This field is readonly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BlueprintStatus Status { get; set; }
		
		/// <summary>
		/// The scope where this blueprint definition can be assigned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetScope")]
		public System.Nullable<SharedBlueprintPropertiesTargetScope> TargetScope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SharedBlueprintPropertiesTargetScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		subscription = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		managementGroup = 1,
	}
	
	/// <summary>
	/// Blueprint artifact that deploys a Resource Manager template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TemplateArtifact
	{
		
		/// <summary>
		/// Properties of a Resource Manager template blueprint artifact.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public TemplateArtifactProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a Resource Manager template blueprint artifact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TemplateArtifactProperties
	{
		
		/// <summary>
		/// A dictionary for parameters and their corresponding values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ParameterValueCollection Parameters { get; set; }
		
		/// <summary>
		/// If applicable, the name of the resource group placeholder to which the Resource Manager template blueprint artifact will be deployed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// The Resource Manager template blueprint artifact body.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="template")]
		public string Template { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List blueprint definitions.
		/// Blueprints_List {scope}/providers/Microsoft.Blueprint/blueprints
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="scope">The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.</param>
		/// <returns>OK -- retrieved list of blueprint definitions.</returns>
		public async Task<BlueprintList> Blueprints_ListAsync(string api_version, string scope)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Blueprint/blueprints?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BlueprintList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a blueprint definition.
		/// Blueprints_Get {scope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="scope">The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.</param>
		/// <param name="blueprintName">Name of the blueprint definition.</param>
		/// <returns>OK -- blueprint definition retrieved.</returns>
		public async Task<Blueprint> Blueprints_GetAsync(string api_version, string scope, string blueprintName)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Blueprint/blueprints/"+ (blueprintName==null? "" : System.Uri.EscapeDataString(blueprintName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Blueprint>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a blueprint definition.
		/// Blueprints_CreateOrUpdate {scope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="scope">The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.</param>
		/// <param name="blueprintName">Name of the blueprint definition.</param>
		/// <param name="requestBody">Blueprint definition.</param>
		public async Task Blueprints_CreateOrUpdateAsync(string api_version, string scope, string blueprintName, Blueprint requestBody)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Blueprint/blueprints/"+ (blueprintName==null? "" : System.Uri.EscapeDataString(blueprintName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a blueprint definition.
		/// Blueprints_Delete {scope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="scope">The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.</param>
		/// <param name="blueprintName">Name of the blueprint definition.</param>
		/// <returns>OK -- blueprint definition deleted.</returns>
		public async Task<Blueprint> Blueprints_DeleteAsync(string api_version, string scope, string blueprintName)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Blueprint/blueprints/"+ (blueprintName==null? "" : System.Uri.EscapeDataString(blueprintName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Blueprint>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List artifacts for a given blueprint definition.
		/// Artifacts_List {scope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/artifacts
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="scope">The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.</param>
		/// <param name="blueprintName">Name of the blueprint definition.</param>
		/// <returns>OK -- blueprint artifacts retrieved.</returns>
		public async Task<ArtifactList> Artifacts_ListAsync(string api_version, string scope, string blueprintName)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Blueprint/blueprints/"+ (blueprintName==null? "" : System.Uri.EscapeDataString(blueprintName))+"/artifacts?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ArtifactList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a blueprint artifact.
		/// Artifacts_Get {scope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/artifacts/{artifactName}
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="scope">The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.</param>
		/// <param name="blueprintName">Name of the blueprint definition.</param>
		/// <param name="artifactName">Name of the blueprint artifact.</param>
		/// <returns>OK -- blueprint artifact retrieved.</returns>
		public async Task<Artifact> Artifacts_GetAsync(string api_version, string scope, string blueprintName, string artifactName)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Blueprint/blueprints/"+ (blueprintName==null? "" : System.Uri.EscapeDataString(blueprintName))+"/artifacts/"+ (artifactName==null? "" : System.Uri.EscapeDataString(artifactName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Artifact>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update blueprint artifact.
		/// Artifacts_CreateOrUpdate {scope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/artifacts/{artifactName}
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="scope">The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.</param>
		/// <param name="blueprintName">Name of the blueprint definition.</param>
		/// <param name="artifactName">Name of the blueprint artifact.</param>
		/// <param name="requestBody">Blueprint artifact to create or update.</param>
		public async Task Artifacts_CreateOrUpdateAsync(string api_version, string scope, string blueprintName, string artifactName, Artifact requestBody)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Blueprint/blueprints/"+ (blueprintName==null? "" : System.Uri.EscapeDataString(blueprintName))+"/artifacts/"+ (artifactName==null? "" : System.Uri.EscapeDataString(artifactName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a blueprint artifact.
		/// Artifacts_Delete {scope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/artifacts/{artifactName}
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="scope">The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.</param>
		/// <param name="blueprintName">Name of the blueprint definition.</param>
		/// <param name="artifactName">Name of the blueprint artifact.</param>
		/// <returns>OK -- blueprint artifact deleted.</returns>
		public async Task<Artifact> Artifacts_DeleteAsync(string api_version, string scope, string blueprintName, string artifactName)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Blueprint/blueprints/"+ (blueprintName==null? "" : System.Uri.EscapeDataString(blueprintName))+"/artifacts/"+ (artifactName==null? "" : System.Uri.EscapeDataString(artifactName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Artifact>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List published versions of given blueprint definition.
		/// PublishedBlueprints_List {scope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/versions
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="scope">The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.</param>
		/// <param name="blueprintName">Name of the blueprint definition.</param>
		/// <returns>OK -- all published versions of blueprint definition retrieved.</returns>
		public async Task<PublishedBlueprintList> PublishedBlueprints_ListAsync(string api_version, string scope, string blueprintName)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Blueprint/blueprints/"+ (blueprintName==null? "" : System.Uri.EscapeDataString(blueprintName))+"/versions?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublishedBlueprintList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a published version of a blueprint definition.
		/// PublishedBlueprints_Get {scope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/versions/{versionId}
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="scope">The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.</param>
		/// <param name="blueprintName">Name of the blueprint definition.</param>
		/// <param name="versionId">Version of the published blueprint definition.</param>
		/// <returns>OK -- published blueprint definition retrieved.</returns>
		public async Task<PublishedBlueprint> PublishedBlueprints_GetAsync(string api_version, string scope, string blueprintName, string versionId)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Blueprint/blueprints/"+ (blueprintName==null? "" : System.Uri.EscapeDataString(blueprintName))+"/versions/"+ (versionId==null? "" : System.Uri.EscapeDataString(versionId))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublishedBlueprint>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Publish a new version of the blueprint definition with the latest artifacts. Published blueprint definitions are immutable.
		/// PublishedBlueprints_Create {scope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/versions/{versionId}
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="scope">The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.</param>
		/// <param name="blueprintName">Name of the blueprint definition.</param>
		/// <param name="versionId">Version of the published blueprint definition.</param>
		/// <param name="requestBody">Published Blueprint to create or update.</param>
		public async Task PublishedBlueprints_CreateAsync(string api_version, string scope, string blueprintName, string versionId, PublishedBlueprint requestBody)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Blueprint/blueprints/"+ (blueprintName==null? "" : System.Uri.EscapeDataString(blueprintName))+"/versions/"+ (versionId==null? "" : System.Uri.EscapeDataString(versionId))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a published version of a blueprint definition.
		/// PublishedBlueprints_Delete {scope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/versions/{versionId}
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="scope">The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.</param>
		/// <param name="blueprintName">Name of the blueprint definition.</param>
		/// <param name="versionId">Version of the published blueprint definition.</param>
		/// <returns>OK -- published version of blueprint definition deleted.</returns>
		public async Task<PublishedBlueprint> PublishedBlueprints_DeleteAsync(string api_version, string scope, string blueprintName, string versionId)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Blueprint/blueprints/"+ (blueprintName==null? "" : System.Uri.EscapeDataString(blueprintName))+"/versions/"+ (versionId==null? "" : System.Uri.EscapeDataString(versionId))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublishedBlueprint>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List artifacts for a version of a published blueprint definition.
		/// PublishedArtifacts_List {scope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/versions/{versionId}/artifacts
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="scope">The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.</param>
		/// <param name="blueprintName">Name of the blueprint definition.</param>
		/// <param name="versionId">Version of the published blueprint definition.</param>
		/// <returns>OK -- artifacts of a version of published blueprint definition retrieved.</returns>
		public async Task<ArtifactList> PublishedArtifacts_ListAsync(string api_version, string scope, string blueprintName, string versionId)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Blueprint/blueprints/"+ (blueprintName==null? "" : System.Uri.EscapeDataString(blueprintName))+"/versions/"+ (versionId==null? "" : System.Uri.EscapeDataString(versionId))+"/artifacts?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ArtifactList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an artifact for a published blueprint definition.
		/// PublishedArtifacts_Get {scope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/versions/{versionId}/artifacts/{artifactName}
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="scope">The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.</param>
		/// <param name="blueprintName">Name of the blueprint definition.</param>
		/// <param name="versionId">Version of the published blueprint definition.</param>
		/// <param name="artifactName">Name of the blueprint artifact.</param>
		/// <returns>OK -- artifact of published blueprint definition retrieved.</returns>
		public async Task<Artifact> PublishedArtifacts_GetAsync(string api_version, string scope, string blueprintName, string versionId, string artifactName)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Blueprint/blueprints/"+ (blueprintName==null? "" : System.Uri.EscapeDataString(blueprintName))+"/versions/"+ (versionId==null? "" : System.Uri.EscapeDataString(versionId))+"/artifacts/"+ (artifactName==null? "" : System.Uri.EscapeDataString(artifactName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Artifact>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
