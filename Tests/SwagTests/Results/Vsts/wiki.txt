//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Comment on an artifact like Work Item or Wiki, etc.
	/// </summary>
	public class Comment
	{
		
		/// <summary>
		/// The id of the artifact this comment belongs to
		/// </summary>
		public string ArtifactId { get; set; }
		
		public IdentityRef CreatedBy { get; set; }
		
		/// <summary>
		/// The creation date of the comment.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The id assigned to the comment.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Indicates if the comment has been deleted.
		/// </summary>
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		/// <summary>
		/// The mentions of the comment.
		/// </summary>
		public CommentMention[] Mentions { get; set; }
		
		public IdentityRef ModifiedBy { get; set; }
		
		/// <summary>
		/// The last modification date of the comment.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ModifiedDate { get; set; }
		
		/// <summary>
		/// The comment id of the parent comment, if any
		/// </summary>
		public System.Nullable<System.Int32> ParentId { get; set; }
		
		/// <summary>
		/// The reactions on the comment.
		/// </summary>
		public CommentReaction[] Reactions { get; set; }
		
		/// <summary>
		/// The rendered text of the comment
		/// </summary>
		public string RenderedText { get; set; }
		
		/// <summary>
		/// Represents a list of comments.
		/// </summary>
		public CommentList Replies { get; set; }
		
		/// <summary>
		/// Indicates the current state of the comment
		/// </summary>
		public System.Nullable<CommentState> State { get; set; }
		
		/// <summary>
		/// The plaintext/markdown version of the comment
		/// </summary>
		public string Text { get; set; }
		
		/// <summary>
		/// The current version of the comment
		/// </summary>
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	public class IdentityRef
	{
		
		/// <summary>
		/// Deprecated - Can be retrieved by querying the Graph user referenced in the "self" entry of the IdentityRef "_links" dictionary
		/// </summary>
		public string DirectoryAlias { get; set; }
		
		public string Id { get; set; }
		
		/// <summary>
		/// Deprecated - Available in the "avatar" entry of the IdentityRef "_links" dictionary
		/// </summary>
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Deprecated - Can be retrieved by querying the Graph membership state referenced in the "membershipState" entry of the GraphUser "_links" dictionary
		/// </summary>
		public System.Nullable<System.Boolean> Inactive { get; set; }
		
		/// <summary>
		/// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsAadUserType/Descriptor.IsAadGroupType)
		/// </summary>
		public System.Nullable<System.Boolean> IsAadIdentity { get; set; }
		
		/// <summary>
		/// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsGroupType)
		/// </summary>
		public System.Nullable<System.Boolean> IsContainer { get; set; }
		
		public System.Nullable<System.Boolean> IsDeletedInOrigin { get; set; }
		
		/// <summary>
		/// Deprecated - not in use in most preexisting implementations of ToIdentityRef
		/// </summary>
		public string ProfileUrl { get; set; }
		
		/// <summary>
		/// Deprecated - use Domain+PrincipalName instead
		/// </summary>
		public string UniqueName { get; set; }
	}
	
	/// <summary>
	/// Contains information about various artifacts mentioned in the comment
	/// </summary>
	public class CommentMention
	{
		
		/// <summary>
		/// Id of the artifact this mention belongs to
		/// </summary>
		public string ArtifactId { get; set; }
		
		/// <summary>
		/// Id of the comment associated with this mention. Nullable to support legacy mentions which can potentially have null commentId
		/// </summary>
		public System.Nullable<System.Int32> CommentId { get; set; }
		
		/// <summary>
		/// Value of the mentioned artifact. Expected Value varies by CommentMentionType: Person:         VSID associated with the identity Work Item:      ID of the work item Pull Request:   ID of the Pull Request
		/// </summary>
		public string MentionedArtifact { get; set; }
		
		/// <summary>
		/// The context which represent where this mentioned was parsed from
		/// </summary>
		public System.Nullable<CommentMentionType> Type { get; set; }
	}
	
	public enum CommentMentionType
	{
		
		person = 0,
		
		workItem = 1,
		
		pullRequest = 2,
	}
	
	/// <summary>
	/// Contains information about comment reaction for a particular reaction type.
	/// </summary>
	public class CommentReaction
	{
		
		/// <summary>
		/// The id of the comment this reaction belongs to.
		/// </summary>
		public System.Nullable<System.Int32> CommentId { get; set; }
		
		/// <summary>
		/// Total number of reactions for the CommentReactionType.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Flag to indicate if the current user has engaged on this particular EngagementType (e.g. if they liked the associated comment).
		/// </summary>
		public System.Nullable<System.Boolean> IsCurrentUserEngaged { get; set; }
		
		/// <summary>
		/// Type of the reaction.
		/// </summary>
		public System.Nullable<CommentReactionType> Type { get; set; }
	}
	
	public enum CommentReactionType
	{
		
		like = 0,
		
		dislike = 1,
		
		heart = 2,
		
		hooray = 3,
		
		smile = 4,
		
		confused = 5,
	}
	
	/// <summary>
	/// Represents a list of comments.
	/// </summary>
	public class CommentList
	{
		
		/// <summary>
		/// List of comments in the current batch.
		/// </summary>
		public Comment[] Comments { get; set; }
		
		/// <summary>
		/// A string token that can be used to retrieving next page of comments if available. Otherwise null.
		/// </summary>
		public string ContinuationToken { get; set; }
		
		/// <summary>
		/// The count of comments in the current batch.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Uri to the next page of comments if it is available. Otherwise null.
		/// </summary>
		public string NextPage { get; set; }
		
		/// <summary>
		/// Total count of comments on a work item.
		/// </summary>
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	public enum CommentState
	{
		
		active = 0,
		
		resolved = 1,
		
		closed = 2,
	}
	
	/// <summary>
	/// Represents an attachment to a comment.
	/// </summary>
	public class CommentAttachment
	{
		
		public IdentityRef CreatedBy { get; set; }
		
		/// <summary>
		/// The creation date of the attachment.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Unique Id of the attachment.
		/// </summary>
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Represents a request to create a work item comment.
	/// </summary>
	public class CommentCreateParameters
	{
		
		/// <summary>
		/// Optional CommentId of the parent in order to add a reply for an existing comment
		/// </summary>
		public System.Nullable<System.Int32> ParentId { get; set; }
		
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Base class for comment resource references
	/// </summary>
	public class CommentResourceReference
	{
		
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Represents a request to update a comment.
	/// </summary>
	public class CommentUpdateParameters
	{
		
		/// <summary>
		/// Set the current state of the comment
		/// </summary>
		public System.Nullable<CommentUpdateParametersState> State { get; set; }
		
		/// <summary>
		/// The updated text of the comment
		/// </summary>
		public string Text { get; set; }
	}
	
	public enum CommentUpdateParametersState
	{
		
		active = 0,
		
		resolved = 1,
		
		closed = 2,
	}
	
	public class GitRepository
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		public string DefaultBranch { get; set; }
		
		public string Id { get; set; }
		
		/// <summary>
		/// True if the repository was created as a fork
		/// </summary>
		public System.Nullable<System.Boolean> IsFork { get; set; }
		
		public string Name { get; set; }
		
		public GitRepositoryRef ParentRepository { get; set; }
		
		public TeamProjectReference Project { get; set; }
		
		public string RemoteUrl { get; set; }
		
		/// <summary>
		/// Compressed size (bytes) of the repository.
		/// </summary>
		public System.Nullable<System.Int64> Size { get; set; }
		
		public string SshUrl { get; set; }
		
		public string Url { get; set; }
		
		public string[] ValidRemoteUrls { get; set; }
		
		public string WebUrl { get; set; }
	}
	
	/// <summary>
	/// The class to represent a collection of REST reference links.
	/// </summary>
	public class ReferenceLinks
	{
		
		/// <summary>
		/// The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Links { get; set; }
	}
	
	public class GitRepositoryRef
	{
		
		public TeamProjectCollectionReference Collection { get; set; }
		
		public string Id { get; set; }
		
		/// <summary>
		/// True if the repository was created as a fork
		/// </summary>
		public System.Nullable<System.Boolean> IsFork { get; set; }
		
		public string Name { get; set; }
		
		public TeamProjectReference Project { get; set; }
		
		public string RemoteUrl { get; set; }
		
		public string SshUrl { get; set; }
		
		public string Url { get; set; }
	}
	
	public class TeamProjectCollectionReference
	{
		
		public string Id { get; set; }
		
		public string Name { get; set; }
		
		public string Url { get; set; }
	}
	
	public class TeamProjectReference
	{
		
		public string Abbreviation { get; set; }
		
		public string DefaultTeamImageUrl { get; set; }
		
		public string Description { get; set; }
		
		public string Id { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
		
		public string Name { get; set; }
		
		public System.Nullable<System.Int64> Revision { get; set; }
		
		public System.Nullable<TeamProjectReferenceState> State { get; set; }
		
		public string Url { get; set; }
		
		public System.Nullable<TeamProjectReferenceVisibility> Visibility { get; set; }
	}
	
	public enum TeamProjectReferenceState
	{
		
		deleting = 0,
		
		_new = 1,
		
		wellFormed = 2,
		
		createPending = 3,
		
		all = 4,
		
		unchanged = 5,
		
		deleted = 6,
	}
	
	public enum TeamProjectReferenceVisibility
	{
		
		_private = 0,
		
		_public = 1,
	}
	
	public class GitVersionDescriptor
	{
		
		/// <summary>
		/// Version string identifier (name of tag/branch, SHA1 of commit)
		/// </summary>
		public string Version { get; set; }
		
		/// <summary>
		/// Version options - Specify additional modifiers to version (e.g Previous)
		/// </summary>
		public System.Nullable<GitVersionDescriptorVersionOptions> VersionOptions { get; set; }
		
		/// <summary>
		/// Version type (branch, tag, or commit). Determines how Id is interpreted
		/// </summary>
		public System.Nullable<GitVersionDescriptorVersionType> VersionType { get; set; }
	}
	
	public enum GitVersionDescriptorVersionOptions
	{
		
		none = 0,
		
		previousChange = 1,
		
		firstParent = 2,
	}
	
	public enum GitVersionDescriptorVersionType
	{
		
		branch = 0,
		
		tag = 1,
		
		commit = 2,
	}
	
	public class GraphSubjectBase
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
		/// </summary>
		public string Descriptor { get; set; }
		
		/// <summary>
		/// This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// This url is the full route to the source resource of this graph subject.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
	/// </summary>
	public class VssJsonCollectionWrapper
	{
		
		public string Value { get; set; }
	}
	
	public class VssJsonCollectionWrapperBase
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	/// <summary>
	/// Defines a wiki repository which encapsulates the git repository backing the wiki.
	/// </summary>
	public class Wiki
	{
		
		/// <summary>
		/// The head commit associated with the git repository backing up the wiki.
		/// </summary>
		public string HeadCommit { get; set; }
		
		/// <summary>
		/// The ID of the wiki which is same as the ID of the Git repository that it is backed by.
		/// </summary>
		public string Id { get; set; }
		
		public GitRepository Repository { get; set; }
	}
	
	/// <summary>
	/// Defines properties for wiki attachment file.
	/// </summary>
	public class WikiAttachment
	{
		
		/// <summary>
		/// Name of the wiki attachment file.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Path of the wiki attachment file.
		/// </summary>
		public string Path { get; set; }
	}
	
	/// <summary>
	/// Response contract for the Wiki Attachments API
	/// </summary>
	public class WikiAttachmentResponse
	{
		
		/// <summary>
		/// Defines properties for wiki attachment file.
		/// </summary>
		public WikiAttachment Attachment { get; set; }
		
		/// <summary>
		/// Contains the list of ETag values from the response header of the attachments API call. The first item in the list contains the version of the wiki attachment.
		/// </summary>
		public string[] ETag { get; set; }
	}
	
	/// <summary>
	/// Base wiki creation parameters.
	/// </summary>
	public class WikiCreateBaseParameters
	{
		
		/// <summary>
		/// Folder path inside repository which is shown as Wiki. Not required for ProjectWiki type.
		/// </summary>
		public string MappedPath { get; set; }
		
		/// <summary>
		/// Wiki name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// ID of the project in which the wiki is to be created.
		/// </summary>
		public string ProjectId { get; set; }
		
		/// <summary>
		/// ID of the git repository that backs up the wiki. Not required for ProjectWiki type.
		/// </summary>
		public string RepositoryId { get; set; }
		
		/// <summary>
		/// Type of the wiki.
		/// </summary>
		public System.Nullable<WikiCreateBaseParametersType> Type { get; set; }
	}
	
	public enum WikiCreateBaseParametersType
	{
		
		projectWiki = 0,
		
		codeWiki = 1,
	}
	
	/// <summary>
	/// Wiki creations parameters.
	/// </summary>
	public class WikiCreateParameters
	{
		
		/// <summary>
		/// Wiki name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// ID of the project in which the wiki is to be created.
		/// </summary>
		public string ProjectId { get; set; }
	}
	
	/// <summary>
	/// Wiki creation parameters.
	/// </summary>
	public class WikiCreateParametersV2
	{
		
		public GitVersionDescriptor Version { get; set; }
	}
	
	/// <summary>
	/// Defines a page in a wiki.
	/// </summary>
	public class WikiPage
	{
		
		/// <summary>
		/// Path of the git item corresponding to the wiki page stored in the backing Git repository.
		/// </summary>
		public string GitItemPath { get; set; }
		
		/// <summary>
		/// When present, permanent identifier for the wiki page
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// True if a page is non-conforming, i.e. 1) if the name doesn't match page naming standards. 2) if the page does not have a valid entry in the appropriate order file.
		/// </summary>
		public System.Nullable<System.Boolean> IsNonConformant { get; set; }
		
		/// <summary>
		/// True if this page has subpages under its path.
		/// </summary>
		public System.Nullable<System.Boolean> IsParentPage { get; set; }
		
		/// <summary>
		/// Order of the wiki page, relative to other pages in the same hierarchy level.
		/// </summary>
		public System.Nullable<System.Int32> Order { get; set; }
		
		/// <summary>
		/// Path of the wiki page.
		/// </summary>
		public string Path { get; set; }
		
		/// <summary>
		/// Remote web url to the wiki page.
		/// </summary>
		public string RemoteUrl { get; set; }
		
		/// <summary>
		/// List of subpages of the current page.
		/// </summary>
		public WikiPage[] SubPages { get; set; }
		
		/// <summary>
		/// REST url for this wiki page.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Contract encapsulating parameters for the page create or update operations.
	/// </summary>
	public class WikiPageCreateOrUpdateParameters
	{
		
		/// <summary>
		/// Content of the wiki page.
		/// </summary>
		public string Content { get; set; }
	}
	
	/// <summary>
	/// Defines a page with its metedata in a wiki.
	/// </summary>
	public class WikiPageDetail
	{
		
		/// <summary>
		/// When present, permanent identifier for the wiki page
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Path of the wiki page.
		/// </summary>
		public string Path { get; set; }
		
		/// <summary>
		/// Path of the wiki page.
		/// </summary>
		public WikiPageStat[] ViewStats { get; set; }
	}
	
	/// <summary>
	/// Defines properties for wiki page stat.
	/// </summary>
	public class WikiPageStat
	{
		
		/// <summary>
		/// the count of the stat for the Day
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Day of the stat
		/// </summary>
		public System.Nullable<System.DateTimeOffset> Day { get; set; }
	}
	
	/// <summary>
	/// Request contract for Wiki Page Move.
	/// </summary>
	public class WikiPageMove
	{
		
		/// <summary>
		/// Defines a page in a wiki.
		/// </summary>
		public WikiPage Page { get; set; }
	}
	
	/// <summary>
	/// Contract encapsulating parameters for the page move operation.
	/// </summary>
	public class WikiPageMoveParameters
	{
		
		/// <summary>
		/// New order of the wiki page.
		/// </summary>
		public System.Nullable<System.Int32> NewOrder { get; set; }
		
		/// <summary>
		/// New path of the wiki page.
		/// </summary>
		public string NewPath { get; set; }
		
		/// <summary>
		/// Current path of the wiki page.
		/// </summary>
		public string Path { get; set; }
	}
	
	/// <summary>
	/// Response contract for the Wiki Page Move API.
	/// </summary>
	public class WikiPageMoveResponse
	{
		
		/// <summary>
		/// Contains the list of ETag values from the response header of the page move API call. The first item in the list contains the version of the wiki page subject to page move.
		/// </summary>
		public string[] ETag { get; set; }
		
		/// <summary>
		/// Request contract for Wiki Page Move.
		/// </summary>
		public WikiPageMove PageMove { get; set; }
	}
	
	/// <summary>
	/// Response contract for the Wiki Pages PUT, PATCH and DELETE APIs.
	/// </summary>
	public class WikiPageResponse
	{
		
		/// <summary>
		/// Contains the list of ETag values from the response header of the pages API call. The first item in the list contains the version of the wiki page.
		/// </summary>
		public string[] ETag { get; set; }
		
		/// <summary>
		/// Defines a page in a wiki.
		/// </summary>
		public WikiPage Page { get; set; }
	}
	
	/// <summary>
	/// Contract encapsulating parameters for the pages batch.
	/// </summary>
	public class WikiPagesBatchRequest
	{
		
		/// <summary>
		/// If the list of page data returned is not complete, a continuation token to query next batch of pages is included in the response header as "x-ms-continuationtoken". Omit this parameter to get the first batch of Wiki Page Data.
		/// </summary>
		public string ContinuationToken { get; set; }
		
		/// <summary>
		/// last N days from the current day for which page views is to be returned. It's inclusive of current day.
		/// </summary>
		public System.Nullable<System.Int32> PageViewsForDays { get; set; }
		
		/// <summary>
		/// Total count of pages on a wiki to return.
		/// </summary>
		public System.Nullable<System.Int32> Top { get; set; }
	}
	
	/// <summary>
	/// Defines properties for wiki page view stats.
	/// </summary>
	public class WikiPageViewStats
	{
		
		/// <summary>
		/// Wiki page view count.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Wiki page last viewed time.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastViewedTime { get; set; }
		
		/// <summary>
		/// Wiki page path.
		/// </summary>
		public string Path { get; set; }
	}
	
	public class WikiUpdatedNotificationMessage
	{
		
		/// <summary>
		/// Collection host Id for which the wikis are updated.
		/// </summary>
		public string CollectionId { get; set; }
		
		/// <summary>
		/// Project Id for which the wikis are updated.
		/// </summary>
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Repository Id associated with the particular wiki which is added, updated or deleted.
		/// </summary>
		public string RepositoryId { get; set; }
	}
	
	/// <summary>
	/// Wiki update parameters.
	/// </summary>
	public class WikiUpdateParameters
	{
		
		/// <summary>
		/// Name for wiki.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Versions of the wiki.
		/// </summary>
		public GitVersionDescriptor[] Versions { get; set; }
	}
	
	/// <summary>
	/// Defines a wiki resource.
	/// </summary>
	public class WikiV2
	{
		
		/// <summary>
		/// ID of the wiki.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Properties of the wiki.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// Remote web url to the wiki.
		/// </summary>
		public string RemoteUrl { get; set; }
		
		/// <summary>
		/// REST url for this wiki.
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// Versions of the wiki.
		/// </summary>
		public GitVersionDescriptor[] Versions { get; set; }
	}
	
	public partial class MyClient
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public MyClient(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets all wikis in a project or collection.
		/// Wikis_List {organization}/{project}/_apis/wiki/wikis
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WikiV2[]> Wikis_ListAsync(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiV2[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all wikis in a project or collection.
		/// Wikis_List {organization}/{project}/_apis/wiki/wikis
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WikiV2[] Wikis_List(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiV2[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates the wiki resource.
		/// Wikis_Create {organization}/{project}/_apis/wiki/wikis
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Parameters for the wiki creation.</param>
		public async Task Wikis_CreateAsync(string organization, string project, string api_version, WikiCreateParametersV2 requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates the wiki resource.
		/// Wikis_Create {organization}/{project}/_apis/wiki/wikis
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Parameters for the wiki creation.</param>
		public void Wikis_Create(string organization, string project, string api_version, WikiCreateParametersV2 requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the wiki corresponding to the wiki ID or wiki name provided.
		/// Wikis_Get {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WikiV2> Wikis_GetAsync(string organization, string wikiIdentifier, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiV2>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the wiki corresponding to the wiki ID or wiki name provided.
		/// Wikis_Get {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WikiV2 Wikis_Get(string organization, string wikiIdentifier, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiV2>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the wiki corresponding to the wiki ID or wiki name provided.
		/// Wikis_Delete {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>Wiki deleted</returns>
		public async Task<WikiV2> Wikis_DeleteAsync(string organization, string wikiIdentifier, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiV2>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the wiki corresponding to the wiki ID or wiki name provided.
		/// Wikis_Delete {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>Wiki deleted</returns>
		public WikiV2 Wikis_Delete(string organization, string wikiIdentifier, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiV2>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the wiki corresponding to the wiki ID or wiki name provided using the update parameters.
		/// Wikis_Update {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Update parameters.</param>
		/// <returns>successful operation</returns>
		public async Task<WikiV2> Wikis_UpdateAsync(string organization, string wikiIdentifier, string project, string api_version, WikiUpdateParameters requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiV2>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the wiki corresponding to the wiki ID or wiki name provided using the update parameters.
		/// Wikis_Update {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Update parameters.</param>
		/// <returns>successful operation</returns>
		public WikiV2 Wikis_Update(string organization, string wikiIdentifier, string project, string api_version, WikiUpdateParameters requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiV2>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a page move operation that updates the path and order of the page as provided in the parameters.
		/// Page_Moves_Create {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pagemoves
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="comment">Comment that is to be associated with this page move.</param>
		/// <param name="versionDescriptor_version">Version string identifier (name of tag/branch, SHA1 of commit)</param>
		/// <param name="versionDescriptor_versionOptions">Version options - Specify additional modifiers to version (e.g Previous)</param>
		/// <param name="versionDescriptor_versionType">Version type (branch, tag, or commit). Determines how Id is interpreted</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Page more operation parameters.</param>
		public async Task Page_Moves_CreateAsync(string organization, string project, string wikiIdentifier, string comment, string versionDescriptor_version, GitVersionDescriptorVersionOptions versionDescriptor_versionOptions, GitVersionDescriptorVersionType versionDescriptor_versionType, string api_version, WikiPageMoveParameters requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"/pagemoves&comment=" + (comment==null? "" : System.Uri.EscapeDataString(comment))+"&versionDescriptor.version=" + (versionDescriptor_version==null? "" : System.Uri.EscapeDataString(versionDescriptor_version))+"&versionDescriptor.versionOptions=" + versionDescriptor_versionOptions+"&versionDescriptor.versionType=" + versionDescriptor_versionType+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a page move operation that updates the path and order of the page as provided in the parameters.
		/// Page_Moves_Create {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pagemoves
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="comment">Comment that is to be associated with this page move.</param>
		/// <param name="versionDescriptor_version">Version string identifier (name of tag/branch, SHA1 of commit)</param>
		/// <param name="versionDescriptor_versionOptions">Version options - Specify additional modifiers to version (e.g Previous)</param>
		/// <param name="versionDescriptor_versionType">Version type (branch, tag, or commit). Determines how Id is interpreted</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Page more operation parameters.</param>
		public void Page_Moves_Create(string organization, string project, string wikiIdentifier, string comment, string versionDescriptor_version, GitVersionDescriptorVersionOptions versionDescriptor_versionOptions, GitVersionDescriptorVersionType versionDescriptor_versionType, string api_version, WikiPageMoveParameters requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"/pagemoves&comment=" + (comment==null? "" : System.Uri.EscapeDataString(comment))+"&versionDescriptor.version=" + (versionDescriptor_version==null? "" : System.Uri.EscapeDataString(versionDescriptor_version))+"&versionDescriptor.versionOptions=" + versionDescriptor_versionOptions+"&versionDescriptor.versionType=" + versionDescriptor_versionType+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets metadata or content of the wiki page for the provided path. Content negotiation is done based on the `Accept` header sent in the request.
		/// Pages_Get_Page {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="path">Wiki page path.</param>
		/// <param name="recursionLevel">Recursion level for subpages retrieval. Defaults to `None` (Optional).</param>
		/// <param name="versionDescriptor_version">Version string identifier (name of tag/branch, SHA1 of commit)</param>
		/// <param name="versionDescriptor_versionOptions">Version options - Specify additional modifiers to version (e.g Previous)</param>
		/// <param name="versionDescriptor_versionType">Version type (branch, tag, or commit). Determines how Id is interpreted</param>
		/// <param name="includeContent">True to include the content of the page in the response for Json content type. Defaults to false (Optional)</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WikiPage> Pages_Get_PageAsync(string organization, string project, string wikiIdentifier, string path, Pages_Get_PageRecursionLevel recursionLevel, string versionDescriptor_version, GitVersionDescriptorVersionOptions versionDescriptor_versionOptions, GitVersionDescriptorVersionType versionDescriptor_versionType, bool includeContent, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"/pages&path=" + (path==null? "" : System.Uri.EscapeDataString(path))+"&recursionLevel=" + recursionLevel+"&versionDescriptor.version=" + (versionDescriptor_version==null? "" : System.Uri.EscapeDataString(versionDescriptor_version))+"&versionDescriptor.versionOptions=" + versionDescriptor_versionOptions+"&versionDescriptor.versionType=" + versionDescriptor_versionType+"&includeContent="+includeContent+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets metadata or content of the wiki page for the provided path. Content negotiation is done based on the `Accept` header sent in the request.
		/// Pages_Get_Page {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="path">Wiki page path.</param>
		/// <param name="recursionLevel">Recursion level for subpages retrieval. Defaults to `None` (Optional).</param>
		/// <param name="versionDescriptor_version">Version string identifier (name of tag/branch, SHA1 of commit)</param>
		/// <param name="versionDescriptor_versionOptions">Version options - Specify additional modifiers to version (e.g Previous)</param>
		/// <param name="versionDescriptor_versionType">Version type (branch, tag, or commit). Determines how Id is interpreted</param>
		/// <param name="includeContent">True to include the content of the page in the response for Json content type. Defaults to false (Optional)</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WikiPage Pages_Get_Page(string organization, string project, string wikiIdentifier, string path, Pages_Get_PageRecursionLevel recursionLevel, string versionDescriptor_version, GitVersionDescriptorVersionOptions versionDescriptor_versionOptions, GitVersionDescriptorVersionType versionDescriptor_versionType, bool includeContent, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"/pages&path=" + (path==null? "" : System.Uri.EscapeDataString(path))+"&recursionLevel=" + recursionLevel+"&versionDescriptor.version=" + (versionDescriptor_version==null? "" : System.Uri.EscapeDataString(versionDescriptor_version))+"&versionDescriptor.versionOptions=" + versionDescriptor_versionOptions+"&versionDescriptor.versionType=" + versionDescriptor_versionType+"&includeContent="+includeContent+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or edits a wiki page.
		/// Pages_Create_Or_Update {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="path">Wiki page path.</param>
		/// <param name="comment">Comment to be associated with the page operation.</param>
		/// <param name="versionDescriptor_version">Version string identifier (name of tag/branch, SHA1 of commit)</param>
		/// <param name="versionDescriptor_versionOptions">Version options - Specify additional modifiers to version (e.g Previous)</param>
		/// <param name="versionDescriptor_versionType">Version type (branch, tag, or commit). Determines how Id is interpreted</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Wiki create or update operation parameters.</param>
		/// <returns>Page edited. Edited page's version is populated in the ETag response header.</returns>
		public async Task<WikiPage> Pages_Create_Or_UpdateAsync(string organization, string project, string wikiIdentifier, string path, string comment, string versionDescriptor_version, GitVersionDescriptorVersionOptions versionDescriptor_versionOptions, GitVersionDescriptorVersionType versionDescriptor_versionType, string api_version, WikiPageCreateOrUpdateParameters requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"/pages&path=" + (path==null? "" : System.Uri.EscapeDataString(path))+"&comment=" + (comment==null? "" : System.Uri.EscapeDataString(comment))+"&versionDescriptor.version=" + (versionDescriptor_version==null? "" : System.Uri.EscapeDataString(versionDescriptor_version))+"&versionDescriptor.versionOptions=" + versionDescriptor_versionOptions+"&versionDescriptor.versionType=" + versionDescriptor_versionType+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates or edits a wiki page.
		/// Pages_Create_Or_Update {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="path">Wiki page path.</param>
		/// <param name="comment">Comment to be associated with the page operation.</param>
		/// <param name="versionDescriptor_version">Version string identifier (name of tag/branch, SHA1 of commit)</param>
		/// <param name="versionDescriptor_versionOptions">Version options - Specify additional modifiers to version (e.g Previous)</param>
		/// <param name="versionDescriptor_versionType">Version type (branch, tag, or commit). Determines how Id is interpreted</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Wiki create or update operation parameters.</param>
		/// <returns>Page edited. Edited page's version is populated in the ETag response header.</returns>
		public WikiPage Pages_Create_Or_Update(string organization, string project, string wikiIdentifier, string path, string comment, string versionDescriptor_version, GitVersionDescriptorVersionOptions versionDescriptor_versionOptions, GitVersionDescriptorVersionType versionDescriptor_versionType, string api_version, WikiPageCreateOrUpdateParameters requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"/pages&path=" + (path==null? "" : System.Uri.EscapeDataString(path))+"&comment=" + (comment==null? "" : System.Uri.EscapeDataString(comment))+"&versionDescriptor.version=" + (versionDescriptor_version==null? "" : System.Uri.EscapeDataString(versionDescriptor_version))+"&versionDescriptor.versionOptions=" + versionDescriptor_versionOptions+"&versionDescriptor.versionType=" + versionDescriptor_versionType+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a wiki page.
		/// Pages_Delete_Page {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="path">Wiki page path.</param>
		/// <param name="comment">Comment to be associated with this page delete.</param>
		/// <param name="versionDescriptor_version">Version string identifier (name of tag/branch, SHA1 of commit)</param>
		/// <param name="versionDescriptor_versionOptions">Version options - Specify additional modifiers to version (e.g Previous)</param>
		/// <param name="versionDescriptor_versionType">Version type (branch, tag, or commit). Determines how Id is interpreted</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>Page deleted.</returns>
		public async Task<WikiPage> Pages_Delete_PageAsync(string organization, string project, string wikiIdentifier, string path, string comment, string versionDescriptor_version, GitVersionDescriptorVersionOptions versionDescriptor_versionOptions, GitVersionDescriptorVersionType versionDescriptor_versionType, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"/pages&path=" + (path==null? "" : System.Uri.EscapeDataString(path))+"&comment=" + (comment==null? "" : System.Uri.EscapeDataString(comment))+"&versionDescriptor.version=" + (versionDescriptor_version==null? "" : System.Uri.EscapeDataString(versionDescriptor_version))+"&versionDescriptor.versionOptions=" + versionDescriptor_versionOptions+"&versionDescriptor.versionType=" + versionDescriptor_versionType+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a wiki page.
		/// Pages_Delete_Page {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="path">Wiki page path.</param>
		/// <param name="comment">Comment to be associated with this page delete.</param>
		/// <param name="versionDescriptor_version">Version string identifier (name of tag/branch, SHA1 of commit)</param>
		/// <param name="versionDescriptor_versionOptions">Version options - Specify additional modifiers to version (e.g Previous)</param>
		/// <param name="versionDescriptor_versionType">Version type (branch, tag, or commit). Determines how Id is interpreted</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>Page deleted.</returns>
		public WikiPage Pages_Delete_Page(string organization, string project, string wikiIdentifier, string path, string comment, string versionDescriptor_version, GitVersionDescriptorVersionOptions versionDescriptor_versionOptions, GitVersionDescriptorVersionType versionDescriptor_versionType, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"/pages&path=" + (path==null? "" : System.Uri.EscapeDataString(path))+"&comment=" + (comment==null? "" : System.Uri.EscapeDataString(comment))+"&versionDescriptor.version=" + (versionDescriptor_version==null? "" : System.Uri.EscapeDataString(versionDescriptor_version))+"&versionDescriptor.versionOptions=" + versionDescriptor_versionOptions+"&versionDescriptor.versionType=" + versionDescriptor_versionType+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets metadata or content of the wiki page for the provided page id. Content negotiation is done based on the `Accept` header sent in the request.
		/// Pages_Get_Page_By_Id {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name..</param>
		/// <param name="id">Wiki page ID.</param>
		/// <param name="recursionLevel">Recursion level for subpages retrieval. Defaults to `None` (Optional).</param>
		/// <param name="includeContent">True to include the content of the page in the response for Json content type. Defaults to false (Optional)</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WikiPage> Pages_Get_Page_By_IdAsync(string organization, string project, string wikiIdentifier, int id, Pages_Get_PageRecursionLevel recursionLevel, bool includeContent, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"/pages/"+id+"&recursionLevel=" + recursionLevel+"&includeContent="+includeContent+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets metadata or content of the wiki page for the provided page id. Content negotiation is done based on the `Accept` header sent in the request.
		/// Pages_Get_Page_By_Id {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name..</param>
		/// <param name="id">Wiki page ID.</param>
		/// <param name="recursionLevel">Recursion level for subpages retrieval. Defaults to `None` (Optional).</param>
		/// <param name="includeContent">True to include the content of the page in the response for Json content type. Defaults to false (Optional)</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WikiPage Pages_Get_Page_By_Id(string organization, string project, string wikiIdentifier, int id, Pages_Get_PageRecursionLevel recursionLevel, bool includeContent, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"/pages/"+id+"&recursionLevel=" + recursionLevel+"&includeContent="+includeContent+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a wiki page.
		/// Pages_Delete_Page_By_Id {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="id">Wiki page ID.</param>
		/// <param name="comment">Comment to be associated with this page delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>Page deleted.</returns>
		public async Task<WikiPage> Pages_Delete_Page_By_IdAsync(string organization, string project, string wikiIdentifier, int id, string comment, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"/pages/"+id+"&comment=" + (comment==null? "" : System.Uri.EscapeDataString(comment))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a wiki page.
		/// Pages_Delete_Page_By_Id {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="id">Wiki page ID.</param>
		/// <param name="comment">Comment to be associated with this page delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>Page deleted.</returns>
		public WikiPage Pages_Delete_Page_By_Id(string organization, string project, string wikiIdentifier, int id, string comment, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"/pages/"+id+"&comment=" + (comment==null? "" : System.Uri.EscapeDataString(comment))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edits a wiki page.
		/// Pages_Update {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="id">Wiki page ID.</param>
		/// <param name="comment">Comment to be associated with the page operation.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Wiki update operation parameters.</param>
		/// <returns>Page edited. Edited page's version is populated in the ETag response header.</returns>
		public async Task<WikiPage> Pages_UpdateAsync(string organization, string project, string wikiIdentifier, int id, string comment, string api_version, WikiPageCreateOrUpdateParameters requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"/pages/"+id+"&comment=" + (comment==null? "" : System.Uri.EscapeDataString(comment))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Edits a wiki page.
		/// Pages_Update {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="id">Wiki page ID.</param>
		/// <param name="comment">Comment to be associated with the page operation.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Wiki update operation parameters.</param>
		/// <returns>Page edited. Edited page's version is populated in the ETag response header.</returns>
		public WikiPage Pages_Update(string organization, string project, string wikiIdentifier, int id, string comment, string api_version, WikiPageCreateOrUpdateParameters requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"/pages/"+id+"&comment=" + (comment==null? "" : System.Uri.EscapeDataString(comment))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns page detail corresponding to Page ID.
		/// Page_Stats_Get {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages/{pageId}/stats
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="pageId">Wiki page ID.</param>
		/// <param name="pageViewsForDays">last N days from the current day for which page views is to be returned. It's inclusive of current day.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WikiPageDetail> Page_Stats_GetAsync(string organization, string project, string wikiIdentifier, int pageId, int pageViewsForDays, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"/pages/"+pageId+"/stats&pageViewsForDays="+pageViewsForDays+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiPageDetail>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns page detail corresponding to Page ID.
		/// Page_Stats_Get {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages/{pageId}/stats
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="pageId">Wiki page ID.</param>
		/// <param name="pageViewsForDays">last N days from the current day for which page views is to be returned. It's inclusive of current day.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WikiPageDetail Page_Stats_Get(string organization, string project, string wikiIdentifier, int pageId, int pageViewsForDays, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"/pages/"+pageId+"/stats&pageViewsForDays="+pageViewsForDays+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiPageDetail>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns pageable list of Wiki Pages
		/// Pages_Batch_Get {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pagesbatch
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="versionDescriptor_version">Version string identifier (name of tag/branch, SHA1 of commit)</param>
		/// <param name="versionDescriptor_versionOptions">Version options - Specify additional modifiers to version (e.g Previous)</param>
		/// <param name="versionDescriptor_versionType">Version type (branch, tag, or commit). Determines how Id is interpreted</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Wiki batch page request.</param>
		/// <returns>successful operation</returns>
		public async Task<WikiPageDetail[]> Pages_Batch_GetAsync(string organization, string project, string wikiIdentifier, string versionDescriptor_version, GitVersionDescriptorVersionOptions versionDescriptor_versionOptions, GitVersionDescriptorVersionType versionDescriptor_versionType, string api_version, WikiPagesBatchRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"/pagesbatch&versionDescriptor.version=" + (versionDescriptor_version==null? "" : System.Uri.EscapeDataString(versionDescriptor_version))+"&versionDescriptor.versionOptions=" + versionDescriptor_versionOptions+"&versionDescriptor.versionType=" + versionDescriptor_versionType+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiPageDetail[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns pageable list of Wiki Pages
		/// Pages_Batch_Get {organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pagesbatch
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="wikiIdentifier">Wiki ID or wiki name.</param>
		/// <param name="versionDescriptor_version">Version string identifier (name of tag/branch, SHA1 of commit)</param>
		/// <param name="versionDescriptor_versionOptions">Version options - Specify additional modifiers to version (e.g Previous)</param>
		/// <param name="versionDescriptor_versionType">Version type (branch, tag, or commit). Determines how Id is interpreted</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Wiki batch page request.</param>
		/// <returns>successful operation</returns>
		public WikiPageDetail[] Pages_Batch_Get(string organization, string project, string wikiIdentifier, string versionDescriptor_version, GitVersionDescriptorVersionOptions versionDescriptor_versionOptions, GitVersionDescriptorVersionType versionDescriptor_versionType, string api_version, WikiPagesBatchRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wiki/wikis/"+ (wikiIdentifier==null? "" : System.Uri.EscapeDataString(wikiIdentifier))+"/pagesbatch&versionDescriptor.version=" + (versionDescriptor_version==null? "" : System.Uri.EscapeDataString(versionDescriptor_version))+"&versionDescriptor.versionOptions=" + versionDescriptor_versionOptions+"&versionDescriptor.versionType=" + versionDescriptor_versionType+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiPageDetail[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Pages_Get_PageRecursionLevel
	{
		
		none = 0,
		
		oneLevel = 1,
		
		oneLevelPlusNestedEmptyFolders = 2,
		
		full = 3,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
