//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public class Avatar
	{
		
		public System.Nullable<System.Boolean> IsAutoGenerated { get; set; }
		
		public System.Nullable<AvatarSize> Size { get; set; }
		
		public System.Nullable<System.DateTimeOffset> TimeStamp { get; set; }
		
		public string[] Value { get; set; }
	}
	
	public enum AvatarSize
	{
		
		small = 0,
		
		medium = 1,
		
		large = 2,
	}
	
	public class GraphCachePolicies
	{
		
		/// <summary>
		/// Size of the cache
		/// </summary>
		public System.Nullable<System.Int32> CacheSize { get; set; }
	}
	
	/// <summary>
	/// Subject descriptor of a Graph entity
	/// </summary>
	public class GraphDescriptorResult
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The class to represent a collection of REST reference links.
	/// </summary>
	public class ReferenceLinks
	{
		
		/// <summary>
		/// The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Links { get; set; }
	}
	
	/// <summary>
	/// Represents a set of data used to communicate with a federated provider on behalf of a particular user.
	/// </summary>
	public class GraphFederatedProviderData
	{
		
		/// <summary>
		/// The access token that can be used to communicated with the federated provider on behalf on the target identity, if we were able to successfully acquire one, otherwise <code>null</code>, if we were not.
		/// </summary>
		public string AccessToken { get; set; }
		
		/// <summary>
		/// The name of the federated provider, e.g. "github.com".
		/// </summary>
		public string ProviderName { get; set; }
		
		/// <summary>
		/// The descriptor of the graph subject to which this federated provider data corresponds.
		/// </summary>
		public string SubjectDescriptor { get; set; }
		
		/// <summary>
		/// The version number of this federated provider data, which corresponds to when it was last updated. Can be used to prevent returning stale provider data from the cache when the caller is aware of a newer version, such as to prevent local cache poisoning from a remote cache or store. This is the app layer equivalent of the data layer sequence ID.
		/// </summary>
		public System.Nullable<System.Int64> Version { get; set; }
	}
	
	public class GraphGlobalExtendedPropertyBatch
	{
		
		public string[] PropertyNameFilters { get; set; }
		
		public string[] SubjectDescriptors { get; set; }
	}
	
	/// <summary>
	/// Graph group entity
	/// </summary>
	public class GraphGroup
	{
		
		/// <summary>
		/// A short phrase to help human readers disambiguate groups with similar names
		/// </summary>
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Do not attempt to use this type to create a new group. This type does not contain sufficient fields to create a new group.
	/// </summary>
	public class GraphGroupCreationContext
	{
		
		/// <summary>
		/// Optional: If provided, we will use this identifier for the storage key of the created group
		/// </summary>
		public string StorageKey { get; set; }
	}
	
	/// <summary>
	/// Use this type to create a new group using the mail address as a reference to an existing group from an external AD or AAD backed provider. This is the subset of GraphGroup fields required for creation of a group for the AAD and AD use case.
	/// </summary>
	public class GraphGroupMailAddressCreationContext
	{
		
		/// <summary>
		/// This should be the mail address or the group in the source AD or AAD provider. Example: jamal@contoso.com Team Services will communicate with the source provider to fill all other fields on creation.
		/// </summary>
		public string MailAddress { get; set; }
	}
	
	/// <summary>
	/// Use this type to create a new group using the OriginID as a reference to an existing group from an external AD or AAD backed provider. This is the subset of GraphGroup fields required for creation of a group for the AD and AAD use case.
	/// </summary>
	public class GraphGroupOriginIdCreationContext
	{
		
		/// <summary>
		/// This should be the object id or sid of the group from the source AD or AAD provider. Example: d47d025a-ce2f-4a79-8618-e8862ade30dd Team Services will communicate with the source provider to fill all other fields on creation.
		/// </summary>
		public string OriginId { get; set; }
	}
	
	/// <summary>
	/// Use this type to create a new Vsts group that is not backed by an external provider.
	/// </summary>
	public class GraphGroupVstsCreationContext
	{
		
		/// <summary>
		/// For internal use only in back compat scenarios.
		/// </summary>
		public System.Nullable<System.Boolean> CrossProject { get; set; }
		
		/// <summary>
		/// Used by VSTS groups; if set this will be the group description, otherwise ignored
		/// </summary>
		public string Description { get; set; }
		
		public string Descriptor { get; set; }
		
		/// <summary>
		/// Used by VSTS groups; if set this will be the group DisplayName, otherwise ignored
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// For internal use only in back compat scenarios.
		/// </summary>
		public System.Nullable<System.Boolean> RestrictedVisibility { get; set; }
		
		/// <summary>
		/// For internal use only in back compat scenarios.
		/// </summary>
		public string SpecialGroupType { get; set; }
	}
	
	public class GraphMember
	{
		
		/// <summary>
		/// This represents the name of the container of origin for a graph member. (For MSA this is "Windows Live ID", for AD the name of the domain, for AAD the tenantID of the directory, for VSTS groups the ScopeId, etc)
		/// </summary>
		public string Domain { get; set; }
		
		/// <summary>
		/// The email address of record for a given graph member. This may be different than the principal name.
		/// </summary>
		public string MailAddress { get; set; }
		
		/// <summary>
		/// This is the PrincipalName of this graph member from the source provider. The source provider may change this field over time and it is not guaranteed to be immutable for the life of the graph member by VSTS.
		/// </summary>
		public string PrincipalName { get; set; }
	}
	
	/// <summary>
	/// Relationship between a container and a member
	/// </summary>
	public class GraphMembership
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		public string ContainerDescriptor { get; set; }
		
		public string MemberDescriptor { get; set; }
	}
	
	/// <summary>
	/// Status of a Graph membership (active/inactive)
	/// </summary>
	public class GraphMembershipState
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// When true, the membership is active
		/// </summary>
		public System.Nullable<System.Boolean> Active { get; set; }
	}
	
	public class GraphMembershipTraversal
	{
		
		/// <summary>
		/// Reason why the subject could not be traversed completely
		/// </summary>
		public string IncompletenessReason { get; set; }
		
		/// <summary>
		/// When true, the subject is traversed completely
		/// </summary>
		public System.Nullable<System.Boolean> IsComplete { get; set; }
		
		/// <summary>
		/// The traversed subject descriptor
		/// </summary>
		public string SubjectDescriptor { get; set; }
		
		/// <summary>
		/// Subject descriptor ids of the traversed members
		/// </summary>
		public string[] TraversedSubjectIds { get; set; }
		
		/// <summary>
		/// Subject descriptors of the traversed members
		/// </summary>
		public string[] TraversedSubjects { get; set; }
	}
	
	/// <summary>
	/// Who is the provider for this user and what is the identifier and domain that is used to uniquely identify the user.
	/// </summary>
	public class GraphProviderInfo
	{
		
		/// <summary>
		/// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
		/// </summary>
		public string Descriptor { get; set; }
		
		/// <summary>
		/// This represents the name of the container of origin for a graph member. (For MSA this is "Windows Live ID", for AAD the tenantID of the directory.)
		/// </summary>
		public string Domain { get; set; }
		
		/// <summary>
		/// The type of source provider for the origin identifier (ex: "aad", "msa")
		/// </summary>
		public string Origin { get; set; }
		
		/// <summary>
		/// The unique identifier from the system of origin. (For MSA this is the PUID in hex notation, for AAD this is the object id.)
		/// </summary>
		public string OriginId { get; set; }
	}
	
	/// <summary>
	/// Container where a graph entity is defined (organization, project, team)
	/// </summary>
	public class GraphScope
	{
		
		/// <summary>
		/// The subject descriptor that references the administrators group for this scope. Only members of this group can change the contents of this scope or assign other users permissions to access this scope.
		/// </summary>
		public string AdministratorDescriptor { get; set; }
		
		/// <summary>
		/// When true, this scope is also a securing host for one or more scopes.
		/// </summary>
		public System.Nullable<System.Boolean> IsGlobal { get; set; }
		
		/// <summary>
		/// The subject descriptor for the closest account or organization in the ancestor tree of this scope.
		/// </summary>
		public string ParentDescriptor { get; set; }
		
		/// <summary>
		/// The type of this scope. Typically ServiceHost or TeamProject.
		/// </summary>
		public System.Nullable<GraphScopeScopeType> ScopeType { get; set; }
		
		/// <summary>
		/// The subject descriptor for the containing organization in the ancestor tree of this scope.
		/// </summary>
		public string SecuringHostDescriptor { get; set; }
	}
	
	public enum GraphScopeScopeType
	{
		
		generic = 0,
		
		serviceHost = 1,
		
		teamProject = 2,
	}
	
	/// <summary>
	/// This type is the subset of fields that can be provided by the user to create a Vsts scope. Scope creation is currently limited to internal back-compat scenarios. End users that attempt to create a scope with this API will fail.
	/// </summary>
	public class GraphScopeCreationContext
	{
		
		/// <summary>
		/// Set this field to override the default description of this scope's admin group.
		/// </summary>
		public string AdminGroupDescription { get; set; }
		
		/// <summary>
		/// All scopes have an Administrator Group that controls access to the contents of the scope. Set this field to use a non-default group name for that administrators group.
		/// </summary>
		public string AdminGroupName { get; set; }
		
		/// <summary>
		/// Set this optional field if this scope is created on behalf of a user other than the user making the request. This should be the Id of the user that is not the requester.
		/// </summary>
		public string CreatorId { get; set; }
		
		/// <summary>
		/// The scope must be provided with a unique name within the parent scope. This means the created scope can have a parent or child with the same name, but no siblings with the same name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The type of scope being created.
		/// </summary>
		public System.Nullable<GraphScopeCreationContextScopeType> ScopeType { get; set; }
		
		/// <summary>
		/// An optional ID that uniquely represents the scope within it's parent scope. If this parameter is not provided, Vsts will generate on automatically.
		/// </summary>
		public string StorageKey { get; set; }
	}
	
	public enum GraphScopeCreationContextScopeType
	{
		
		generic = 0,
		
		serviceHost = 1,
		
		teamProject = 2,
	}
	
	/// <summary>
	/// Storage key of a Graph entity
	/// </summary>
	public class GraphStorageKeyResult
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Top-level graph entity
	/// </summary>
	public class GraphSubject
	{
		
		/// <summary>
		/// [Internal Use Only] The legacy descriptor is here in case you need to access old version IMS using identity descriptor.
		/// </summary>
		public string LegacyDescriptor { get; set; }
		
		/// <summary>
		/// The type of source provider for the origin identifier (ex:AD, AAD, MSA)
		/// </summary>
		public string Origin { get; set; }
		
		/// <summary>
		/// The unique identifier from the system of origin. Typically a sid, object id or Guid. Linking and unlinking operations can cause this value to change for a user because the user is not backed by a different provider and has a different unique id in the new provider.
		/// </summary>
		public string OriginId { get; set; }
		
		/// <summary>
		/// This field identifies the type of the graph subject (ex: Group, Scope, User).
		/// </summary>
		public string SubjectKind { get; set; }
	}
	
	public class GraphSubjectBase
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
		/// </summary>
		public string Descriptor { get; set; }
		
		/// <summary>
		/// This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// This url is the full route to the source resource of this graph subject.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Batching of subjects to lookup using the Graph API
	/// </summary>
	public class GraphSubjectLookup
	{
		
		public GraphSubjectLookupKey[] LookupKeys { get; set; }
	}
	
	public class GraphSubjectLookupKey
	{
		
		public string Descriptor { get; set; }
	}
	
	/// <summary>
	/// Subject to search using the Graph API
	/// </summary>
	public class GraphSubjectQuery
	{
		
		/// <summary>
		/// Search term to search for Azure Devops users or/and groups
		/// </summary>
		public string Query { get; set; }
		
		/// <summary>
		/// Optional parameter. Specify a non-default scope (collection, project) to search for users or groups within the scope.
		/// </summary>
		public string ScopeDescriptor { get; set; }
		
		/// <summary>
		/// "User" or "Group" can be specified, both or either
		/// </summary>
		public string[] SubjectKind { get; set; }
	}
	
	public class GraphSystemSubject
	{
	}
	
	/// <summary>
	/// Graph user entity
	/// </summary>
	public class GraphUser
	{
		
		/// <summary>
		/// The short, generally unique name for the user in the backing directory. For AAD users, this corresponds to the mail nickname, which is often but not necessarily similar to the part of the user's mail address before the @ sign. For GitHub users, this corresponds to the GitHub user handle.
		/// </summary>
		public string DirectoryAlias { get; set; }
		
		/// <summary>
		/// When true, the group has been deleted in the identity provider
		/// </summary>
		public System.Nullable<System.Boolean> IsDeletedInOrigin { get; set; }
		
		/// <summary>
		/// The meta type of the user in the origin, such as "member", "guest", etc. See UserMetaType for the set of possible values.
		/// </summary>
		public string MetaType { get; set; }
	}
	
	/// <summary>
	/// Do not attempt to use this type to create a new user. Use one of the subclasses instead. This type does not contain sufficient fields to create a new user.
	/// </summary>
	public class GraphUserCreationContext
	{
		
		/// <summary>
		/// Optional: If provided, we will use this identifier for the storage key of the created user
		/// </summary>
		public string StorageKey { get; set; }
	}
	
	/// <summary>
	/// Use this type to create a new user using the mail address as a reference to an existing user from an external AD or AAD backed provider. This is the subset of GraphUser fields required for creation of a GraphUser for the AD and AAD use case when looking up the user by its mail address in the backing provider.
	/// </summary>
	public class GraphUserMailAddressCreationContext
	{
		
		public string MailAddress { get; set; }
	}
	
	/// <summary>
	/// Use this type to create a new user using the OriginID as a reference to an existing user from an external AD or AAD backed provider. This is the subset of GraphUser fields required for creation of a GraphUser for the AD and AAD use case when looking up the user by its unique ID in the backing provider.
	/// </summary>
	public class GraphUserOriginIdCreationContext
	{
		
		/// <summary>
		/// This should be the name of the origin provider. Example: github.com
		/// </summary>
		public string Origin { get; set; }
		
		/// <summary>
		/// This should be the object id or sid of the user from the source AD or AAD provider. Example: d47d025a-ce2f-4a79-8618-e8862ade30dd Team Services will communicate with the source provider to fill all other fields on creation.
		/// </summary>
		public string OriginId { get; set; }
	}
	
	/// <summary>
	/// Use this type to update an existing user using the OriginID as a reference to an existing user from an external AD or AAD backed provider. This is the subset of GraphUser fields required for creation of a GraphUser for the AD and AAD use case when looking up the user by its unique ID in the backing provider.
	/// </summary>
	public class GraphUserOriginIdUpdateContext
	{
		
		/// <summary>
		/// This should be the object id or sid of the user from the source AD or AAD provider. Example: d47d025a-ce2f-4a79-8618-e8862ade30dd Azure Devops will communicate with the source provider to fill all other fields on creation.
		/// </summary>
		public string OriginId { get; set; }
	}
	
	/// <summary>
	/// Use this type to create a new user using the principal name as a reference to an existing user from an external AD or AAD backed provider. This is the subset of GraphUser fields required for creation of a GraphUser for the AD and AAD use case when looking up the user by its principal name in the backing provider.
	/// </summary>
	public class GraphUserPrincipalNameCreationContext
	{
		
		/// <summary>
		/// This should be the principal name or upn of the user in the source AD or AAD provider. Example: jamal@contoso.com Team Services will communicate with the source provider to fill all other fields on creation.
		/// </summary>
		public string PrincipalName { get; set; }
	}
	
	/// <summary>
	/// Do not attempt to use this type to update user. Use one of the subclasses instead. This type does not contain sufficient fields to create a new user.
	/// </summary>
	public class GraphUserUpdateContext
	{
	}
	
	/// <summary>
	/// The JSON model for JSON Patch Operations
	/// </summary>
	public class JsonPatchDocument
	{
	}
	
	/// <summary>
	/// The JSON model for a JSON Patch operation
	/// </summary>
	public class JsonPatchOperation
	{
		
		/// <summary>
		/// The path to copy from for the Move/Copy operation.
		/// </summary>
		public string From { get; set; }
		
		/// <summary>
		/// The patch operation
		/// </summary>
		public System.Nullable<JsonPatchOperationOp> Op { get; set; }
		
		/// <summary>
		/// The path for the operation. In the case of an array, a zero based index can be used to specify the position in the array (e.g. /biscuits/0/name). The "-" character can be used instead of an index to insert at the end of the array (e.g. /biscuits/-).
		/// </summary>
		public string Path { get; set; }
		
		/// <summary>
		/// The value for the operation. This is either a primitive or a JToken.
		/// </summary>
		public string Value { get; set; }
	}
	
	public enum JsonPatchOperationOp
	{
		
		add = 0,
		
		remove = 1,
		
		replace = 2,
		
		move = 3,
		
		copy = 4,
		
		test = 5,
	}
	
	/// <summary>
	/// Represents an abstract JSON token.
	/// </summary>
	public class JToken
	{
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken First { get; set; }
		
		/// <summary>
		/// Gets a value indicating whether this token has child tokens.
		/// </summary>
		public System.Nullable<System.Boolean> HasValues { get; set; }
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken Item { get; set; }
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken Last { get; set; }
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken Next { get; set; }
		
		/// <summary>
		/// Gets or sets the parent.
		/// </summary>
		public string Parent { get; set; }
		
		/// <summary>
		/// Gets the path of the JSON token.
		/// </summary>
		public string Path { get; set; }
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken Previous { get; set; }
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken Root { get; set; }
		
		/// <summary>
		/// Gets the node type for this JToken.
		/// </summary>
		public string Type { get; set; }
	}
	
	public class PagedGraphGroups
	{
		
		/// <summary>
		/// This will be non-null if there is another page of data. There will never be more than one continuation token returned by a request.
		/// </summary>
		public string[] ContinuationToken { get; set; }
		
		/// <summary>
		/// The enumerable list of groups found within a page.
		/// </summary>
		public GraphGroup[] GraphGroups { get; set; }
	}
	
	public class PagedGraphUsers
	{
		
		/// <summary>
		/// This will be non-null if there is another page of data. There will never be more than one continuation token returned by a request.
		/// </summary>
		public string[] ContinuationToken { get; set; }
		
		/// <summary>
		/// The enumerable set of users found within a page.
		/// </summary>
		public GraphUser[] GraphUsers { get; set; }
	}
	
	public class RequestAccessPayLoad
	{
		
		public string Message { get; set; }
		
		public string ProjectUri { get; set; }
		
		public string UrlRequested { get; set; }
	}
	
	/// <summary>
	/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
	/// </summary>
	public class VssJsonCollectionWrapper
	{
		
		public string Value { get; set; }
	}
	
	public class VssJsonCollectionWrapperBase
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	public partial class MyClient
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public MyClient(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Resolve a storage key to a descriptor
		/// Descriptors_Get {organization}/_apis/graph/descriptors/{storageKey}
		/// </summary>
		/// <param name="storageKey">Storage key of the subject (user, group, scope, etc.) to resolve</param>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<GraphDescriptorResult> Descriptors_GetAsync(string storageKey, string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/descriptors/"+ (storageKey==null? "" : System.Uri.EscapeDataString(storageKey))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphDescriptorResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resolve a storage key to a descriptor
		/// Descriptors_Get {organization}/_apis/graph/descriptors/{storageKey}
		/// </summary>
		/// <param name="storageKey">Storage key of the subject (user, group, scope, etc.) to resolve</param>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public GraphDescriptorResult Descriptors_Get(string storageKey, string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/descriptors/"+ (storageKey==null? "" : System.Uri.EscapeDataString(storageKey))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphDescriptorResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of all groups in the current scope (usually organization or account).
		/// 
		/// The optional parameters are used to filter down the returned results. Returned results are in no guaranteed order.
		/// 
		/// Since the list of groups may be large, results are returned in pages of groups.  If there are more results
		/// than can be returned in a single page, the result set will contain a continuation token for retrieval of the
		/// next set of results.
		/// Groups_List {organization}/_apis/graph/groups
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="scopeDescriptor">Specify a non-default scope (collection, project) to search for groups.</param>
		/// <param name="subjectTypes">A comma separated list of user subject subtypes to reduce the retrieved results, e.g. Microsoft.IdentityModel.Claims.ClaimsIdentity</param>
		/// <param name="continuationToken">An opaque data blob that allows the next page of data to resume immediately after where the previous page ended. The only reliable way to know if there is more data left is the presence of a continuation token.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<GraphGroup[]> Groups_ListAsync(string organization, string scopeDescriptor, string subjectTypes, string continuationToken, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/groups&scopeDescriptor=" + (scopeDescriptor==null? "" : System.Uri.EscapeDataString(scopeDescriptor))+"&subjectTypes=" + (subjectTypes==null? "" : System.Uri.EscapeDataString(subjectTypes))+"&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphGroup[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of all groups in the current scope (usually organization or account).
		/// 
		/// The optional parameters are used to filter down the returned results. Returned results are in no guaranteed order.
		/// 
		/// Since the list of groups may be large, results are returned in pages of groups.  If there are more results
		/// than can be returned in a single page, the result set will contain a continuation token for retrieval of the
		/// next set of results.
		/// Groups_List {organization}/_apis/graph/groups
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="scopeDescriptor">Specify a non-default scope (collection, project) to search for groups.</param>
		/// <param name="subjectTypes">A comma separated list of user subject subtypes to reduce the retrieved results, e.g. Microsoft.IdentityModel.Claims.ClaimsIdentity</param>
		/// <param name="continuationToken">An opaque data blob that allows the next page of data to resume immediately after where the previous page ended. The only reliable way to know if there is more data left is the presence of a continuation token.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public GraphGroup[] Groups_List(string organization, string scopeDescriptor, string subjectTypes, string continuationToken, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/groups&scopeDescriptor=" + (scopeDescriptor==null? "" : System.Uri.EscapeDataString(scopeDescriptor))+"&subjectTypes=" + (subjectTypes==null? "" : System.Uri.EscapeDataString(subjectTypes))+"&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphGroup[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Azure DevOps group or materialize an existing AAD group.
		/// 
		/// The body of the request must be a derived type of GraphGroupCreationContext:
		/// * GraphGroupVstsCreationContext - Create a new Azure DevOps group that is not backed by an external provider.
		/// * GraphGroupMailAddressCreationContext - Create a new group using the mail address as a reference to an existing group from an external AD or AAD backed provider.
		/// * GraphGroupOriginIdCreationContext - Create a new group using the OriginID as a reference to a group from an external AD or AAD backed provider.
		/// 
		/// Optionally, you can add the newly created group as a member of an existing Azure DevOps group and/or specify a custom storage key for the group.
		/// Groups_Create {organization}/_apis/graph/groups
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="scopeDescriptor">A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization. Valid only for VSTS groups.</param>
		/// <param name="groupDescriptors">A comma separated list of descriptors referencing groups you want the graph group to join</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The subset of the full graph group used to uniquely find the graph subject in an external provider.</param>
		/// <returns>successful operation</returns>
		public async Task<GraphGroup> Groups_CreateAsync(string organization, string scopeDescriptor, string groupDescriptors, string api_version, GraphGroupCreationContext requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/groups&scopeDescriptor=" + (scopeDescriptor==null? "" : System.Uri.EscapeDataString(scopeDescriptor))+"&groupDescriptors=" + (groupDescriptors==null? "" : System.Uri.EscapeDataString(groupDescriptors))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a new Azure DevOps group or materialize an existing AAD group.
		/// 
		/// The body of the request must be a derived type of GraphGroupCreationContext:
		/// * GraphGroupVstsCreationContext - Create a new Azure DevOps group that is not backed by an external provider.
		/// * GraphGroupMailAddressCreationContext - Create a new group using the mail address as a reference to an existing group from an external AD or AAD backed provider.
		/// * GraphGroupOriginIdCreationContext - Create a new group using the OriginID as a reference to a group from an external AD or AAD backed provider.
		/// 
		/// Optionally, you can add the newly created group as a member of an existing Azure DevOps group and/or specify a custom storage key for the group.
		/// Groups_Create {organization}/_apis/graph/groups
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="scopeDescriptor">A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization. Valid only for VSTS groups.</param>
		/// <param name="groupDescriptors">A comma separated list of descriptors referencing groups you want the graph group to join</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The subset of the full graph group used to uniquely find the graph subject in an external provider.</param>
		/// <returns>successful operation</returns>
		public GraphGroup Groups_Create(string organization, string scopeDescriptor, string groupDescriptors, string api_version, GraphGroupCreationContext requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/groups&scopeDescriptor=" + (scopeDescriptor==null? "" : System.Uri.EscapeDataString(scopeDescriptor))+"&groupDescriptors=" + (groupDescriptors==null? "" : System.Uri.EscapeDataString(groupDescriptors))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a group by its descriptor.
		/// 
		/// The group will be returned even if it has been deleted from the account or has had all its memberships
		/// deleted.
		/// Groups_Get {organization}/_apis/graph/groups/{groupDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="groupDescriptor">The descriptor of the desired graph group.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<GraphGroup> Groups_GetAsync(string organization, string groupDescriptor, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/groups/"+ (groupDescriptor==null? "" : System.Uri.EscapeDataString(groupDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a group by its descriptor.
		/// 
		/// The group will be returned even if it has been deleted from the account or has had all its memberships
		/// deleted.
		/// Groups_Get {organization}/_apis/graph/groups/{groupDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="groupDescriptor">The descriptor of the desired graph group.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public GraphGroup Groups_Get(string organization, string groupDescriptor, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/groups/"+ (groupDescriptor==null? "" : System.Uri.EscapeDataString(groupDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes an Azure DevOps group from all of its parent groups.
		/// 
		/// The group will still be visible, but membership
		/// checks for the group, and all descendants which derive membership through it, will return false.”
		/// Groups_Delete {organization}/_apis/graph/groups/{groupDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="groupDescriptor">The descriptor of the group to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Groups_DeleteAsync(string organization, string groupDescriptor, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/groups/"+ (groupDescriptor==null? "" : System.Uri.EscapeDataString(groupDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes an Azure DevOps group from all of its parent groups.
		/// 
		/// The group will still be visible, but membership
		/// checks for the group, and all descendants which derive membership through it, will return false.”
		/// Groups_Delete {organization}/_apis/graph/groups/{groupDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="groupDescriptor">The descriptor of the group to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Groups_Delete(string organization, string groupDescriptor, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/groups/"+ (groupDescriptor==null? "" : System.Uri.EscapeDataString(groupDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the memberships where this descriptor is a member in the relationship.
		/// 
		/// The default value for direction is 'up' meaning return all memberships where the subject is a member (e.g. all groups the subject is a member of).
		/// Alternatively, passing the direction as 'down' will return all memberships where the subject is a container (e.g. all members of the subject group).
		/// Memberships_List {organization}/_apis/graph/Memberships/{subjectDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="subjectDescriptor">Fetch all direct memberships of this descriptor.</param>
		/// <param name="direction">Defaults to Up.</param>
		/// <param name="depth">The maximum number of edges to traverse up or down the membership tree. Currently the only supported value is '1'.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<GraphMembership[]> Memberships_ListAsync(string organization, string subjectDescriptor, Memberships_ListDirection direction, int depth, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/Memberships/"+ (subjectDescriptor==null? "" : System.Uri.EscapeDataString(subjectDescriptor))+"&direction=" + direction+"&depth="+depth+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphMembership[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the memberships where this descriptor is a member in the relationship.
		/// 
		/// The default value for direction is 'up' meaning return all memberships where the subject is a member (e.g. all groups the subject is a member of).
		/// Alternatively, passing the direction as 'down' will return all memberships where the subject is a container (e.g. all members of the subject group).
		/// Memberships_List {organization}/_apis/graph/Memberships/{subjectDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="subjectDescriptor">Fetch all direct memberships of this descriptor.</param>
		/// <param name="direction">Defaults to Up.</param>
		/// <param name="depth">The maximum number of edges to traverse up or down the membership tree. Currently the only supported value is '1'.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public GraphMembership[] Memberships_List(string organization, string subjectDescriptor, Memberships_ListDirection direction, int depth, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/Memberships/"+ (subjectDescriptor==null? "" : System.Uri.EscapeDataString(subjectDescriptor))+"&direction=" + direction+"&depth="+depth+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphMembership[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a membership relationship between a container and subject.
		/// Memberships_Get {organization}/_apis/graph/memberships/{subjectDescriptor}/{containerDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="subjectDescriptor">A descriptor to the child subject in the relationship.</param>
		/// <param name="containerDescriptor">A descriptor to the container in the relationship.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<GraphMembership> Memberships_GetAsync(string organization, string subjectDescriptor, string containerDescriptor, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/memberships/"+ (subjectDescriptor==null? "" : System.Uri.EscapeDataString(subjectDescriptor))+"/"+ (containerDescriptor==null? "" : System.Uri.EscapeDataString(containerDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphMembership>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a membership relationship between a container and subject.
		/// Memberships_Get {organization}/_apis/graph/memberships/{subjectDescriptor}/{containerDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="subjectDescriptor">A descriptor to the child subject in the relationship.</param>
		/// <param name="containerDescriptor">A descriptor to the container in the relationship.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public GraphMembership Memberships_Get(string organization, string subjectDescriptor, string containerDescriptor, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/memberships/"+ (subjectDescriptor==null? "" : System.Uri.EscapeDataString(subjectDescriptor))+"/"+ (containerDescriptor==null? "" : System.Uri.EscapeDataString(containerDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphMembership>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new membership between a container and subject.
		/// Memberships_Add {organization}/_apis/graph/memberships/{subjectDescriptor}/{containerDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="subjectDescriptor">A descriptor to a group or user that can be the child subject in the relationship.</param>
		/// <param name="containerDescriptor">A descriptor to a group that can be the container in the relationship.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<GraphMembership> Memberships_AddAsync(string organization, string subjectDescriptor, string containerDescriptor, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/memberships/"+ (subjectDescriptor==null? "" : System.Uri.EscapeDataString(subjectDescriptor))+"/"+ (containerDescriptor==null? "" : System.Uri.EscapeDataString(containerDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphMembership>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new membership between a container and subject.
		/// Memberships_Add {organization}/_apis/graph/memberships/{subjectDescriptor}/{containerDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="subjectDescriptor">A descriptor to a group or user that can be the child subject in the relationship.</param>
		/// <param name="containerDescriptor">A descriptor to a group that can be the container in the relationship.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public GraphMembership Memberships_Add(string organization, string subjectDescriptor, string containerDescriptor, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/memberships/"+ (subjectDescriptor==null? "" : System.Uri.EscapeDataString(subjectDescriptor))+"/"+ (containerDescriptor==null? "" : System.Uri.EscapeDataString(containerDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphMembership>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a membership between a container and subject.
		/// Memberships_Remove_Membership {organization}/_apis/graph/memberships/{subjectDescriptor}/{containerDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="subjectDescriptor">A descriptor to a group or user that is the child subject in the relationship.</param>
		/// <param name="containerDescriptor">A descriptor to a group that is the container in the relationship.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Memberships_Remove_MembershipAsync(string organization, string subjectDescriptor, string containerDescriptor, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/memberships/"+ (subjectDescriptor==null? "" : System.Uri.EscapeDataString(subjectDescriptor))+"/"+ (containerDescriptor==null? "" : System.Uri.EscapeDataString(containerDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a membership between a container and subject.
		/// Memberships_Remove_Membership {organization}/_apis/graph/memberships/{subjectDescriptor}/{containerDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="subjectDescriptor">A descriptor to a group or user that is the child subject in the relationship.</param>
		/// <param name="containerDescriptor">A descriptor to a group that is the container in the relationship.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Memberships_Remove_Membership(string organization, string subjectDescriptor, string containerDescriptor, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/memberships/"+ (subjectDescriptor==null? "" : System.Uri.EscapeDataString(subjectDescriptor))+"/"+ (containerDescriptor==null? "" : System.Uri.EscapeDataString(containerDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check whether a subject is active or inactive.
		/// Membership_States_Get {organization}/_apis/graph/membershipstates/{subjectDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="subjectDescriptor">Descriptor of the subject (user, group, scope, etc.) to check state of</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<GraphMembershipState> Membership_States_GetAsync(string organization, string subjectDescriptor, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/membershipstates/"+ (subjectDescriptor==null? "" : System.Uri.EscapeDataString(subjectDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphMembershipState>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check whether a subject is active or inactive.
		/// Membership_States_Get {organization}/_apis/graph/membershipstates/{subjectDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="subjectDescriptor">Descriptor of the subject (user, group, scope, etc.) to check state of</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public GraphMembershipState Membership_States_Get(string organization, string subjectDescriptor, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/membershipstates/"+ (subjectDescriptor==null? "" : System.Uri.EscapeDataString(subjectDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphMembershipState>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request_Access_Request_Access {organization}/_apis/graph/requestaccess
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Request_Access_Request_AccessAsync(string organization, string api_version, JToken requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/requestaccess&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Request_Access_Request_Access {organization}/_apis/graph/requestaccess
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Request_Access_Request_Access(string organization, string api_version, JToken requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/requestaccess&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Resolve a descriptor to a storage key.
		/// Storage_Keys_Get {organization}/_apis/graph/storagekeys/{subjectDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<GraphStorageKeyResult> Storage_Keys_GetAsync(string subjectDescriptor, string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/storagekeys/"+ (subjectDescriptor==null? "" : System.Uri.EscapeDataString(subjectDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphStorageKeyResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resolve a descriptor to a storage key.
		/// Storage_Keys_Get {organization}/_apis/graph/storagekeys/{subjectDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public GraphStorageKeyResult Storage_Keys_Get(string subjectDescriptor, string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/storagekeys/"+ (subjectDescriptor==null? "" : System.Uri.EscapeDataString(subjectDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphStorageKeyResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resolve descriptors to users, groups or scopes (Subjects) in a batch.
		/// Subject_Lookup_Lookup_Subjects {organization}/_apis/graph/subjectlookup
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">A list of descriptors that specifies a subset of subjects to retrieve. Each descriptor uniquely identifies the subject across all instance scopes, but only at a single point in time.</param>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, GraphSubject>> Subject_Lookup_Lookup_SubjectsAsync(string organization, string api_version, GraphSubjectLookup requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/subjectlookup&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, GraphSubject>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Resolve descriptors to users, groups or scopes (Subjects) in a batch.
		/// Subject_Lookup_Lookup_Subjects {organization}/_apis/graph/subjectlookup
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">A list of descriptors that specifies a subset of subjects to retrieve. Each descriptor uniquely identifies the subject across all instance scopes, but only at a single point in time.</param>
		/// <returns>successful operation</returns>
		public System.Collections.Generic.Dictionary<string, GraphSubject> Subject_Lookup_Lookup_Subjects(string organization, string api_version, GraphSubjectLookup requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/subjectlookup&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, GraphSubject>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Search for Azure Devops users, or/and groups. Results will be returned in a batch with no more than 100 graph subjects.
		/// Subject_Query_Query {organization}/_apis/graph/subjectquery
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The query that we'll be using to search includes the following: Query: the search term. The search will be prefix matching only. SubjectKind: "User" or "Group" can be specified, both or either ScopeDescriptor: Non-default scope can be specified, i.e. project scope descriptor</param>
		/// <returns>successful operation</returns>
		public async Task<GraphSubject[]> Subject_Query_QueryAsync(string organization, string api_version, GraphSubjectQuery requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/subjectquery&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphSubject[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Search for Azure Devops users, or/and groups. Results will be returned in a batch with no more than 100 graph subjects.
		/// Subject_Query_Query {organization}/_apis/graph/subjectquery
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The query that we'll be using to search includes the following: Query: the search term. The search will be prefix matching only. SubjectKind: "User" or "Group" can be specified, both or either ScopeDescriptor: Non-default scope can be specified, i.e. project scope descriptor</param>
		/// <returns>successful operation</returns>
		public GraphSubject[] Subject_Query_Query(string organization, string api_version, GraphSubjectQuery requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/subjectquery&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphSubject[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Avatars_Get {organization}/_apis/graph/Subjects/{subjectDescriptor}/avatars
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Avatar> Avatars_GetAsync(string subjectDescriptor, string organization, AvatarSize size, string format, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/Subjects/"+ (subjectDescriptor==null? "" : System.Uri.EscapeDataString(subjectDescriptor))+"/avatars&size=" + size+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Avatar>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Avatars_Get {organization}/_apis/graph/Subjects/{subjectDescriptor}/avatars
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Avatar Avatars_Get(string subjectDescriptor, string organization, AvatarSize size, string format, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/Subjects/"+ (subjectDescriptor==null? "" : System.Uri.EscapeDataString(subjectDescriptor))+"/avatars&size=" + size+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Avatar>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Avatars_Set_Avatar {organization}/_apis/graph/Subjects/{subjectDescriptor}/avatars
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Avatars_Set_AvatarAsync(string subjectDescriptor, string organization, string api_version, Avatar requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/Subjects/"+ (subjectDescriptor==null? "" : System.Uri.EscapeDataString(subjectDescriptor))+"/avatars&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Avatars_Set_Avatar {organization}/_apis/graph/Subjects/{subjectDescriptor}/avatars
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Avatars_Set_Avatar(string subjectDescriptor, string organization, string api_version, Avatar requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/Subjects/"+ (subjectDescriptor==null? "" : System.Uri.EscapeDataString(subjectDescriptor))+"/avatars&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Avatars_Delete {organization}/_apis/graph/Subjects/{subjectDescriptor}/avatars
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Avatars_DeleteAsync(string subjectDescriptor, string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/Subjects/"+ (subjectDescriptor==null? "" : System.Uri.EscapeDataString(subjectDescriptor))+"/avatars&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Avatars_Delete {organization}/_apis/graph/Subjects/{subjectDescriptor}/avatars
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Avatars_Delete(string subjectDescriptor, string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/Subjects/"+ (subjectDescriptor==null? "" : System.Uri.EscapeDataString(subjectDescriptor))+"/avatars&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of all users in a given scope.
		/// 
		/// Since the list of users may be large, results are returned in pages of users.  If there are more results
		/// than can be returned in a single page, the result set will contain a continuation token for retrieval of the
		/// next set of results.
		/// Users_List {organization}/_apis/graph/users
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="subjectTypes">A comma separated list of user subject subtypes to reduce the retrieved results, e.g. msa’, ‘aad’, ‘svc’ (service identity), ‘imp’ (imported identity), etc.</param>
		/// <param name="continuationToken">An opaque data blob that allows the next page of data to resume immediately after where the previous page ended. The only reliable way to know if there is more data left is the presence of a continuation token.</param>
		/// <param name="scopeDescriptor">Specify a non-default scope (collection, project) to search for users.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<GraphUser[]> Users_ListAsync(string organization, string subjectTypes, string continuationToken, string scopeDescriptor, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/users&subjectTypes=" + (subjectTypes==null? "" : System.Uri.EscapeDataString(subjectTypes))+"&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken))+"&scopeDescriptor=" + (scopeDescriptor==null? "" : System.Uri.EscapeDataString(scopeDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphUser[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of all users in a given scope.
		/// 
		/// Since the list of users may be large, results are returned in pages of users.  If there are more results
		/// than can be returned in a single page, the result set will contain a continuation token for retrieval of the
		/// next set of results.
		/// Users_List {organization}/_apis/graph/users
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="subjectTypes">A comma separated list of user subject subtypes to reduce the retrieved results, e.g. msa’, ‘aad’, ‘svc’ (service identity), ‘imp’ (imported identity), etc.</param>
		/// <param name="continuationToken">An opaque data blob that allows the next page of data to resume immediately after where the previous page ended. The only reliable way to know if there is more data left is the presence of a continuation token.</param>
		/// <param name="scopeDescriptor">Specify a non-default scope (collection, project) to search for users.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public GraphUser[] Users_List(string organization, string subjectTypes, string continuationToken, string scopeDescriptor, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/users&subjectTypes=" + (subjectTypes==null? "" : System.Uri.EscapeDataString(subjectTypes))+"&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken))+"&scopeDescriptor=" + (scopeDescriptor==null? "" : System.Uri.EscapeDataString(scopeDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphUser[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Materialize an existing AAD or MSA user into the VSTS account.
		/// 
		/// NOTE: Created users are not active in an account unless they have been explicitly assigned a parent group at creation time or have signed in
		/// and been autolicensed through AAD group memberships.
		/// 
		/// Adding a user to an account is required before the user can be added to VSTS groups or assigned an asset.
		/// 
		/// The body of the request must be a derived type of GraphUserCreationContext:
		/// * GraphUserMailAddressCreationContext - Create a new user using the mail address as a reference to an existing user from an external AD or AAD backed provider.
		/// * GraphUserOriginIdCreationContext - Create a new user using the OriginID as a reference to an existing user from an external AD or AAD backed provider.
		/// * GraphUserPrincipalNameCreationContext - Create a new user using the principal name as a reference to an existing user from an external AD or AAD backed provider.
		/// 
		/// If the user to be added corresponds to a user that was previously deleted, then that user will be restored.
		/// 
		/// Optionally, you can add the newly created user as a member of an existing VSTS group and/or specify a custom storage key for the user.
		/// Users_Create {organization}/_apis/graph/users
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="groupDescriptors">A comma separated list of descriptors of groups you want the graph user to join</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The subset of the full graph user used to uniquely find the graph subject in an external provider.</param>
		/// <returns>successful operation</returns>
		public async Task<GraphUser> Users_CreateAsync(string organization, string groupDescriptors, string api_version, GraphUserCreationContext requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/users&groupDescriptors=" + (groupDescriptors==null? "" : System.Uri.EscapeDataString(groupDescriptors))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphUser>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Materialize an existing AAD or MSA user into the VSTS account.
		/// 
		/// NOTE: Created users are not active in an account unless they have been explicitly assigned a parent group at creation time or have signed in
		/// and been autolicensed through AAD group memberships.
		/// 
		/// Adding a user to an account is required before the user can be added to VSTS groups or assigned an asset.
		/// 
		/// The body of the request must be a derived type of GraphUserCreationContext:
		/// * GraphUserMailAddressCreationContext - Create a new user using the mail address as a reference to an existing user from an external AD or AAD backed provider.
		/// * GraphUserOriginIdCreationContext - Create a new user using the OriginID as a reference to an existing user from an external AD or AAD backed provider.
		/// * GraphUserPrincipalNameCreationContext - Create a new user using the principal name as a reference to an existing user from an external AD or AAD backed provider.
		/// 
		/// If the user to be added corresponds to a user that was previously deleted, then that user will be restored.
		/// 
		/// Optionally, you can add the newly created user as a member of an existing VSTS group and/or specify a custom storage key for the user.
		/// Users_Create {organization}/_apis/graph/users
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="groupDescriptors">A comma separated list of descriptors of groups you want the graph user to join</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The subset of the full graph user used to uniquely find the graph subject in an external provider.</param>
		/// <returns>successful operation</returns>
		public GraphUser Users_Create(string organization, string groupDescriptors, string api_version, GraphUserCreationContext requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/users&groupDescriptors=" + (groupDescriptors==null? "" : System.Uri.EscapeDataString(groupDescriptors))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphUser>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a user by its descriptor.
		/// Users_Get {organization}/_apis/graph/users/{userDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="userDescriptor">The descriptor of the desired user.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<GraphUser> Users_GetAsync(string organization, string userDescriptor, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/users/"+ (userDescriptor==null? "" : System.Uri.EscapeDataString(userDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphUser>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a user by its descriptor.
		/// Users_Get {organization}/_apis/graph/users/{userDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="userDescriptor">The descriptor of the desired user.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public GraphUser Users_Get(string organization, string userDescriptor, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/users/"+ (userDescriptor==null? "" : System.Uri.EscapeDataString(userDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphUser>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables a user.
		/// 
		/// The user will still be visible, but membership checks for the user will return false.”
		/// Users_Delete {organization}/_apis/graph/users/{userDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="userDescriptor">The descriptor of the user to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Users_DeleteAsync(string organization, string userDescriptor, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/users/"+ (userDescriptor==null? "" : System.Uri.EscapeDataString(userDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables a user.
		/// 
		/// The user will still be visible, but membership checks for the user will return false.”
		/// Users_Delete {organization}/_apis/graph/users/{userDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="userDescriptor">The descriptor of the user to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Users_Delete(string organization, string userDescriptor, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/users/"+ (userDescriptor==null? "" : System.Uri.EscapeDataString(userDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Map an existing user to a different identity
		/// Users_Update {organization}/_apis/graph/users/{userDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="userDescriptor">the descriptor of the user to update</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The subset of the full graph user used to uniquely find the graph subject in an external provider.</param>
		/// <returns>successful operation</returns>
		public async Task<GraphUser> Users_UpdateAsync(string organization, string userDescriptor, string api_version, GraphUserUpdateContext requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/users/"+ (userDescriptor==null? "" : System.Uri.EscapeDataString(userDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphUser>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Map an existing user to a different identity
		/// Users_Update {organization}/_apis/graph/users/{userDescriptor}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="userDescriptor">the descriptor of the user to update</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The subset of the full graph user used to uniquely find the graph subject in an external provider.</param>
		/// <returns>successful operation</returns>
		public GraphUser Users_Update(string organization, string userDescriptor, string api_version, GraphUserUpdateContext requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/users/"+ (userDescriptor==null? "" : System.Uri.EscapeDataString(userDescriptor))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphUser>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provider_Info_Get {organization}/_apis/graph/Users/{userDescriptor}/providerinfo
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<GraphProviderInfo> Provider_Info_GetAsync(string userDescriptor, string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/Users/"+ (userDescriptor==null? "" : System.Uri.EscapeDataString(userDescriptor))+"/providerinfo&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphProviderInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provider_Info_Get {organization}/_apis/graph/Users/{userDescriptor}/providerinfo
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public GraphProviderInfo Provider_Info_Get(string userDescriptor, string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/graph/Users/"+ (userDescriptor==null? "" : System.Uri.EscapeDataString(userDescriptor))+"/providerinfo&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GraphProviderInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Memberships_ListDirection
	{
		
		unknown = 0,
		
		down = 1,
		
		up = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
