//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public class AssociatedWorkItem
	{
		
		public string AssignedTo { get; set; }
		
		/// <summary>
		/// Id of associated the work item.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		public string State { get; set; }
		
		public string Title { get; set; }
		
		/// <summary>
		/// REST Url of the work item.
		/// </summary>
		public string Url { get; set; }
		
		public string WebUrl { get; set; }
		
		public string WorkItemType { get; set; }
	}
	
	public class Change
	{
		
		/// <summary>
		/// The type of change that was made to the item.
		/// </summary>
		public System.Nullable<ChangeChangeType> ChangeType { get; set; }
		
		/// <summary>
		/// Current version.
		/// </summary>
		public string Item { get; set; }
		
		public ItemContent NewContent { get; set; }
		
		/// <summary>
		/// Path of the item on the server.
		/// </summary>
		public string SourceServerItem { get; set; }
		
		/// <summary>
		/// URL to retrieve the item.
		/// </summary>
		public string Url { get; set; }
	}
	
	public enum ChangeChangeType
	{
		
		none = 0,
		
		add = 1,
		
		edit = 2,
		
		encoding = 3,
		
		rename = 4,
		
		delete = 5,
		
		undelete = 6,
		
		branch = 7,
		
		merge = 8,
		
		_lock = 9,
		
		rollback = 10,
		
		sourceRename = 11,
		
		targetRename = 12,
		
		property = 13,
		
		all = 14,
	}
	
	public class ItemContent
	{
		
		public string Content { get; set; }
		
		public System.Nullable<ItemContentContentType> ContentType { get; set; }
	}
	
	public enum ItemContentContentType
	{
		
		rawText = 0,
		
		base64Encoded = 1,
	}
	
	public class CheckinNote
	{
		
		public string Name { get; set; }
		
		public string Value { get; set; }
	}
	
	public class FileContentMetadata
	{
		
		public string ContentType { get; set; }
		
		public System.Nullable<System.Int32> Encoding { get; set; }
		
		public string Extension { get; set; }
		
		public string FileName { get; set; }
		
		public System.Nullable<System.Boolean> IsBinary { get; set; }
		
		public System.Nullable<System.Boolean> IsImage { get; set; }
		
		public string VsLink { get; set; }
	}
	
	public class GitRepository
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		public string DefaultBranch { get; set; }
		
		public string Id { get; set; }
		
		/// <summary>
		/// True if the repository was created as a fork
		/// </summary>
		public System.Nullable<System.Boolean> IsFork { get; set; }
		
		public string Name { get; set; }
		
		public GitRepositoryRef ParentRepository { get; set; }
		
		/// <summary>
		/// Represents a shallow reference to a TeamProject.
		/// </summary>
		public TeamProjectReference Project { get; set; }
		
		public string RemoteUrl { get; set; }
		
		/// <summary>
		/// Compressed size (bytes) of the repository.
		/// </summary>
		public System.Nullable<System.Int64> Size { get; set; }
		
		public string SshUrl { get; set; }
		
		public string Url { get; set; }
		
		public string[] ValidRemoteUrls { get; set; }
		
		public string WebUrl { get; set; }
	}
	
	/// <summary>
	/// The class to represent a collection of REST reference links.
	/// </summary>
	public class ReferenceLinks
	{
		
		/// <summary>
		/// The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Links { get; set; }
	}
	
	public class GitRepositoryRef
	{
		
		/// <summary>
		/// Reference object for a TeamProjectCollection.
		/// </summary>
		public TeamProjectCollectionReference Collection { get; set; }
		
		public string Id { get; set; }
		
		/// <summary>
		/// True if the repository was created as a fork
		/// </summary>
		public System.Nullable<System.Boolean> IsFork { get; set; }
		
		public string Name { get; set; }
		
		/// <summary>
		/// Represents a shallow reference to a TeamProject.
		/// </summary>
		public TeamProjectReference Project { get; set; }
		
		public string RemoteUrl { get; set; }
		
		public string SshUrl { get; set; }
		
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Reference object for a TeamProjectCollection.
	/// </summary>
	public class TeamProjectCollectionReference
	{
		
		/// <summary>
		/// Collection Id.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Collection Name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Collection REST Url.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Represents a shallow reference to a TeamProject.
	/// </summary>
	public class TeamProjectReference
	{
		
		/// <summary>
		/// Project abbreviation.
		/// </summary>
		public string Abbreviation { get; set; }
		
		/// <summary>
		/// Url to default team identity image.
		/// </summary>
		public string DefaultTeamImageUrl { get; set; }
		
		/// <summary>
		/// The project's description (if any).
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Project identifier.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Project last update time.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
		
		/// <summary>
		/// Project name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Project revision.
		/// </summary>
		public System.Nullable<System.Int64> Revision { get; set; }
		
		/// <summary>
		/// Project state.
		/// </summary>
		public System.Nullable<TeamProjectReferenceState> State { get; set; }
		
		/// <summary>
		/// Url to the full version of the object.
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// Project visibility.
		/// </summary>
		public System.Nullable<TeamProjectReferenceVisibility> Visibility { get; set; }
	}
	
	public enum TeamProjectReferenceState
	{
		
		deleting = 0,
		
		_new = 1,
		
		wellFormed = 2,
		
		createPending = 3,
		
		all = 4,
		
		unchanged = 5,
		
		deleted = 6,
	}
	
	public enum TeamProjectReferenceVisibility
	{
		
		_private = 0,
		
		_public = 1,
	}
	
	public class GraphSubjectBase
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
		/// </summary>
		public string Descriptor { get; set; }
		
		/// <summary>
		/// This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// This url is the full route to the source resource of this graph subject.
		/// </summary>
		public string Url { get; set; }
	}
	
	public class IdentityRef
	{
		
		/// <summary>
		/// Deprecated - Can be retrieved by querying the Graph user referenced in the "self" entry of the IdentityRef "_links" dictionary
		/// </summary>
		public string DirectoryAlias { get; set; }
		
		public string Id { get; set; }
		
		/// <summary>
		/// Deprecated - Available in the "avatar" entry of the IdentityRef "_links" dictionary
		/// </summary>
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Deprecated - Can be retrieved by querying the Graph membership state referenced in the "membershipState" entry of the GraphUser "_links" dictionary
		/// </summary>
		public System.Nullable<System.Boolean> Inactive { get; set; }
		
		/// <summary>
		/// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsAadUserType/Descriptor.IsAadGroupType)
		/// </summary>
		public System.Nullable<System.Boolean> IsAadIdentity { get; set; }
		
		/// <summary>
		/// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsGroupType)
		/// </summary>
		public System.Nullable<System.Boolean> IsContainer { get; set; }
		
		public System.Nullable<System.Boolean> IsDeletedInOrigin { get; set; }
		
		/// <summary>
		/// Deprecated - not in use in most preexisting implementations of ToIdentityRef
		/// </summary>
		public string ProfileUrl { get; set; }
		
		/// <summary>
		/// Deprecated - use Domain+PrincipalName instead
		/// </summary>
		public string UniqueName { get; set; }
	}
	
	public class ItemModel
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		public string Content { get; set; }
		
		public FileContentMetadata ContentMetadata { get; set; }
		
		public System.Nullable<System.Boolean> IsFolder { get; set; }
		
		public System.Nullable<System.Boolean> IsSymLink { get; set; }
		
		public string Path { get; set; }
		
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Class representing a branch object.
	/// </summary>
	public class TfvcBranch
	{
		
		/// <summary>
		/// List of children for the branch.
		/// </summary>
		public TfvcBranch[] Children { get; set; }
		
		/// <summary>
		/// List of branch mappings.
		/// </summary>
		public TfvcBranchMapping[] Mappings { get; set; }
		
		/// <summary>
		/// This is the shallow branchref class.
		/// </summary>
		public TfvcShallowBranchRef Parent { get; set; }
		
		/// <summary>
		/// List of paths of the related branches.
		/// </summary>
		public TfvcShallowBranchRef[] RelatedBranches { get; set; }
	}
	
	/// <summary>
	/// A branch mapping.
	/// </summary>
	public class TfvcBranchMapping
	{
		
		/// <summary>
		/// Depth of the branch.
		/// </summary>
		public string Depth { get; set; }
		
		/// <summary>
		/// Server item for the branch.
		/// </summary>
		public string ServerItem { get; set; }
		
		/// <summary>
		/// Type of the branch.
		/// </summary>
		public string Type { get; set; }
	}
	
	/// <summary>
	/// This is the shallow branchref class.
	/// </summary>
	public class TfvcShallowBranchRef
	{
		
		/// <summary>
		/// Path for the branch.
		/// </summary>
		public string Path { get; set; }
	}
	
	/// <summary>
	/// Metadata for a branchref.
	/// </summary>
	public class TfvcBranchRef
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// Creation date of the branch.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Branch description.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Is the branch deleted?
		/// </summary>
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		public IdentityRef Owner { get; set; }
		
		/// <summary>
		/// URL to retrieve the item.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A change.
	/// </summary>
	public class TfvcChange
	{
		
		/// <summary>
		/// List of merge sources in case of rename or branch creation.
		/// </summary>
		public TfvcMergeSource[] MergeSources { get; set; }
		
		/// <summary>
		/// Version at which a (shelved) change was pended against
		/// </summary>
		public System.Nullable<System.Int32> PendingVersion { get; set; }
	}
	
	public class TfvcMergeSource
	{
		
		/// <summary>
		/// Indicates if this a rename source. If false, it is a merge source.
		/// </summary>
		public System.Nullable<System.Boolean> IsRename { get; set; }
		
		/// <summary>
		/// The server item of the merge source.
		/// </summary>
		public string ServerItem { get; set; }
		
		/// <summary>
		/// Start of the version range.
		/// </summary>
		public System.Nullable<System.Int32> VersionFrom { get; set; }
		
		/// <summary>
		/// End of the version range.
		/// </summary>
		public System.Nullable<System.Int32> VersionTo { get; set; }
	}
	
	/// <summary>
	/// A collection of changes.
	/// </summary>
	public class TfvcChangeset
	{
		
		/// <summary>
		/// Changeset Account Id also known as Organization Id.
		/// </summary>
		public string AccountId { get; set; }
		
		/// <summary>
		/// List of associated changes.
		/// </summary>
		public TfvcChange[] Changes { get; set; }
		
		/// <summary>
		/// List of Checkin Notes for the changeset.
		/// </summary>
		public CheckinNote[] CheckinNotes { get; set; }
		
		/// <summary>
		/// Changeset collection Id.
		/// </summary>
		public string CollectionId { get; set; }
		
		/// <summary>
		/// True if more changes are available.
		/// </summary>
		public System.Nullable<System.Boolean> HasMoreChanges { get; set; }
		
		/// <summary>
		/// Information on the policy override.
		/// </summary>
		public TfvcPolicyOverrideInfo PolicyOverride { get; set; }
		
		/// <summary>
		/// Team Project Ids for the changeset.
		/// </summary>
		public string[] TeamProjectIds { get; set; }
		
		/// <summary>
		/// List of work items associated with the changeset.
		/// </summary>
		public AssociatedWorkItem[] WorkItems { get; set; }
	}
	
	/// <summary>
	/// Information on the policy override.
	/// </summary>
	public class TfvcPolicyOverrideInfo
	{
		
		/// <summary>
		/// Overidden policy comment.
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Information on the failed policy that was overridden.
		/// </summary>
		public TfvcPolicyFailureInfo[] PolicyFailures { get; set; }
	}
	
	/// <summary>
	/// Policy failure information.
	/// </summary>
	public class TfvcPolicyFailureInfo
	{
		
		/// <summary>
		/// Policy failure message.
		/// </summary>
		public string Message { get; set; }
		
		/// <summary>
		/// Name of the policy that failed.
		/// </summary>
		public string PolicyName { get; set; }
	}
	
	/// <summary>
	/// Metadata for a changeset.
	/// </summary>
	public class TfvcChangesetRef
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		public IdentityRef Author { get; set; }
		
		/// <summary>
		/// Changeset Id.
		/// </summary>
		public System.Nullable<System.Int32> ChangesetId { get; set; }
		
		public IdentityRef CheckedInBy { get; set; }
		
		/// <summary>
		/// Comment for the changeset.
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Was the Comment result truncated?
		/// </summary>
		public System.Nullable<System.Boolean> CommentTruncated { get; set; }
		
		/// <summary>
		/// Creation date of the changeset.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// URL to retrieve the item.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Criteria used in a search for change lists.
	/// </summary>
	public class TfvcChangesetSearchCriteria
	{
		
		/// <summary>
		/// Alias or display name of user who made the changes.
		/// </summary>
		public string Author { get; set; }
		
		/// <summary>
		/// Whether or not to follow renames for the given item being queried.
		/// </summary>
		public System.Nullable<System.Boolean> FollowRenames { get; set; }
		
		/// <summary>
		/// If provided, only include changesets created after this date (string).
		/// </summary>
		public string FromDate { get; set; }
		
		/// <summary>
		/// If provided, only include changesets after this changesetID.
		/// </summary>
		public System.Nullable<System.Int32> FromId { get; set; }
		
		/// <summary>
		/// Whether to include the _links field on the shallow references.
		/// </summary>
		public System.Nullable<System.Boolean> IncludeLinks { get; set; }
		
		/// <summary>
		/// Path of item to search under.
		/// </summary>
		public string ItemPath { get; set; }
		
		public TfvcMappingFilter[] Mappings { get; set; }
		
		/// <summary>
		/// If provided, only include changesets created before this date (string).
		/// </summary>
		public string ToDate { get; set; }
		
		/// <summary>
		/// If provided, a version descriptor for the latest change list to include.
		/// </summary>
		public System.Nullable<System.Int32> ToId { get; set; }
	}
	
	/// <summary>
	/// MappingFilter can be used to include or exclude specific paths.
	/// </summary>
	public class TfvcMappingFilter
	{
		
		/// <summary>
		/// True if ServerPath should be excluded.
		/// </summary>
		public System.Nullable<System.Boolean> Exclude { get; set; }
		
		/// <summary>
		/// Path to be included or excluded.
		/// </summary>
		public string ServerPath { get; set; }
	}
	
	/// <summary>
	/// Request body for Get batched changesets.
	/// </summary>
	public class TfvcChangesetsRequestData
	{
		
		/// <summary>
		/// List of changeset Ids.
		/// </summary>
		public int[] ChangesetIds { get; set; }
		
		/// <summary>
		/// Max length of the comment.
		/// </summary>
		public System.Nullable<System.Int32> CommentLength { get; set; }
		
		/// <summary>
		/// Whether to include the _links field on the shallow references
		/// </summary>
		public System.Nullable<System.Boolean> IncludeLinks { get; set; }
	}
	
	/// <summary>
	/// Metadata for an item.
	/// </summary>
	public class TfvcItem
	{
		
		/// <summary>
		/// Item changed datetime.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ChangeDate { get; set; }
		
		/// <summary>
		/// Greater than 0 if item is deleted.
		/// </summary>
		public System.Nullable<System.Int32> DeletionId { get; set; }
		
		/// <summary>
		/// File encoding from database, -1 represents binary.
		/// </summary>
		public System.Nullable<System.Int32> Encoding { get; set; }
		
		/// <summary>
		/// MD5 hash as a base 64 string, applies to files only.
		/// </summary>
		public string HashValue { get; set; }
		
		/// <summary>
		/// True if item is a branch.
		/// </summary>
		public System.Nullable<System.Boolean> IsBranch { get; set; }
		
		/// <summary>
		/// True if there is a change pending.
		/// </summary>
		public System.Nullable<System.Boolean> IsPendingChange { get; set; }
		
		/// <summary>
		/// The size of the file, if applicable.
		/// </summary>
		public System.Nullable<System.Int64> Size { get; set; }
		
		/// <summary>
		/// Changeset version Id.
		/// </summary>
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Item path and Version descriptor properties
	/// </summary>
	public class TfvcItemDescriptor
	{
		
		/// <summary>
		/// Item path.
		/// </summary>
		public string Path { get; set; }
		
		/// <summary>
		/// Defaults to OneLevel.
		/// </summary>
		public System.Nullable<TfvcItemDescriptorRecursionLevel> RecursionLevel { get; set; }
		
		/// <summary>
		/// Specify the desired version, can be null or empty string only if VersionType is latest or tip.
		/// </summary>
		public string Version { get; set; }
		
		/// <summary>
		/// Defaults to None.
		/// </summary>
		public System.Nullable<TfvcItemDescriptorVersionOption> VersionOption { get; set; }
		
		/// <summary>
		/// Defaults to Latest.
		/// </summary>
		public System.Nullable<TfvcItemDescriptorVersionType> VersionType { get; set; }
	}
	
	public enum TfvcItemDescriptorRecursionLevel
	{
		
		none = 0,
		
		oneLevel = 1,
		
		oneLevelPlusNestedEmptyFolders = 2,
		
		full = 3,
	}
	
	public enum TfvcItemDescriptorVersionOption
	{
		
		none = 0,
		
		previous = 1,
		
		useRename = 2,
	}
	
	public enum TfvcItemDescriptorVersionType
	{
		
		none = 0,
		
		changeset = 1,
		
		shelveset = 2,
		
		change = 3,
		
		date = 4,
		
		latest = 5,
		
		tip = 6,
		
		mergeSource = 7,
	}
	
	/// <summary>
	/// Request body used by Get Items Batch
	/// </summary>
	public class TfvcItemRequestData
	{
		
		/// <summary>
		/// If true, include metadata about the file type
		/// </summary>
		public System.Nullable<System.Boolean> IncludeContentMetadata { get; set; }
		
		/// <summary>
		/// Whether to include the _links field on the shallow references
		/// </summary>
		public System.Nullable<System.Boolean> IncludeLinks { get; set; }
		
		public TfvcItemDescriptor[] ItemDescriptors { get; set; }
	}
	
	/// <summary>
	/// Metadata for a label.
	/// </summary>
	public class TfvcLabel
	{
		
		/// <summary>
		/// List of items.
		/// </summary>
		public TfvcItem[] Items { get; set; }
	}
	
	/// <summary>
	/// Metadata for a Label.
	/// </summary>
	public class TfvcLabelRef
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// Label description.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Label Id.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Label scope.
		/// </summary>
		public string LabelScope { get; set; }
		
		/// <summary>
		/// Last modified datetime for the label.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ModifiedDate { get; set; }
		
		/// <summary>
		/// Label name.
		/// </summary>
		public string Name { get; set; }
		
		public IdentityRef Owner { get; set; }
		
		/// <summary>
		/// Label Url.
		/// </summary>
		public string Url { get; set; }
	}
	
	public class TfvcLabelRequestData
	{
		
		/// <summary>
		/// Whether to include the _links field on the shallow references
		/// </summary>
		public System.Nullable<System.Boolean> IncludeLinks { get; set; }
		
		public string ItemLabelFilter { get; set; }
		
		public string LabelScope { get; set; }
		
		public System.Nullable<System.Int32> MaxItemCount { get; set; }
		
		public string Name { get; set; }
		
		public string Owner { get; set; }
	}
	
	/// <summary>
	/// Metadata for a shelveset.
	/// </summary>
	public class TfvcShelveset
	{
		
		/// <summary>
		/// List of changes.
		/// </summary>
		public TfvcChange[] Changes { get; set; }
		
		/// <summary>
		/// List of checkin notes.
		/// </summary>
		public CheckinNote[] Notes { get; set; }
		
		/// <summary>
		/// Information on the policy override.
		/// </summary>
		public TfvcPolicyOverrideInfo PolicyOverride { get; set; }
		
		/// <summary>
		/// List of associated workitems.
		/// </summary>
		public AssociatedWorkItem[] WorkItems { get; set; }
	}
	
	/// <summary>
	/// Metadata for a shallow shelveset.
	/// </summary>
	public class TfvcShelvesetRef
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// Shelveset comment.
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Shelveset comment truncated as applicable.
		/// </summary>
		public System.Nullable<System.Boolean> CommentTruncated { get; set; }
		
		/// <summary>
		/// Shelveset create date.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Shelveset Id.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Shelveset name.
		/// </summary>
		public string Name { get; set; }
		
		public IdentityRef Owner { get; set; }
		
		/// <summary>
		/// Shelveset Url.
		/// </summary>
		public string Url { get; set; }
	}
	
	public class TfvcShelvesetRequestData
	{
		
		/// <summary>
		/// Whether to include policyOverride and notes Only applies when requesting a single deep shelveset
		/// </summary>
		public System.Nullable<System.Boolean> IncludeDetails { get; set; }
		
		/// <summary>
		/// Whether to include the _links field on the shallow references. Does not apply when requesting a single deep shelveset object. Links will always be included in the deep shelveset.
		/// </summary>
		public System.Nullable<System.Boolean> IncludeLinks { get; set; }
		
		/// <summary>
		/// Whether to include workItems
		/// </summary>
		public System.Nullable<System.Boolean> IncludeWorkItems { get; set; }
		
		/// <summary>
		/// Max number of changes to include
		/// </summary>
		public System.Nullable<System.Int32> MaxChangeCount { get; set; }
		
		/// <summary>
		/// Max length of comment
		/// </summary>
		public System.Nullable<System.Int32> MaxCommentLength { get; set; }
		
		/// <summary>
		/// Shelveset name
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Owner's ID. Could be a name or a guid.
		/// </summary>
		public string Owner { get; set; }
	}
	
	public class TfvcStatistics
	{
		
		/// <summary>
		/// Id of the last changeset the stats are based on.
		/// </summary>
		public System.Nullable<System.Int32> ChangesetId { get; set; }
		
		/// <summary>
		/// Count of files at the requested scope.
		/// </summary>
		public System.Nullable<System.Int64> FileCountTotal { get; set; }
	}
	
	/// <summary>
	/// Version descriptor properties.
	/// </summary>
	public class TfvcVersionDescriptor
	{
		
		/// <summary>
		/// Version object.
		/// </summary>
		public string Version { get; set; }
		
		public System.Nullable<TfvcVersionDescriptorVersionOption> VersionOption { get; set; }
		
		public System.Nullable<TfvcVersionDescriptorVersionType> VersionType { get; set; }
	}
	
	public enum TfvcVersionDescriptorVersionOption
	{
		
		none = 0,
		
		previous = 1,
		
		useRename = 2,
	}
	
	public enum TfvcVersionDescriptorVersionType
	{
		
		none = 0,
		
		changeset = 1,
		
		shelveset = 2,
		
		change = 3,
		
		date = 4,
		
		latest = 5,
		
		tip = 6,
		
		mergeSource = 7,
	}
	
	public class VersionControlProjectInfo
	{
		
		public System.Nullable<VersionControlProjectInfoDefaultSourceControlType> DefaultSourceControlType { get; set; }
		
		/// <summary>
		/// Represents a shallow reference to a TeamProject.
		/// </summary>
		public TeamProjectReference Project { get; set; }
		
		public System.Nullable<System.Boolean> SupportsGit { get; set; }
		
		public System.Nullable<System.Boolean> SupportsTFVC { get; set; }
	}
	
	public enum VersionControlProjectInfoDefaultSourceControlType
	{
		
		tfvc = 0,
		
		git = 1,
	}
	
	/// <summary>
	/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
	/// </summary>
	public class VssJsonCollectionWrapper
	{
		
		public string Value { get; set; }
	}
	
	public class VssJsonCollectionWrapperBase
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	public partial class MyClient
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public MyClient(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve Tfvc changes for a given changeset.
		/// Changesets_Get_Changeset_Changes {organization}/_apis/tfvc/changesets/{id}/changes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">ID of the changeset. Default: null</param>
		/// <param name="skip">Number of results to skip. Default: null</param>
		/// <param name="top">The maximum number of results to return. Default: null</param>
		/// <param name="continuationToken">Return the next page of results. Default: null</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TfvcChange[]> Changesets_Get_Changeset_ChangesAsync(string organization, int id, int skip, int top, string continuationToken, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/tfvc/changesets/"+id+"/changes&$skip="+skip+"&$top="+top+"&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcChange[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve Tfvc changes for a given changeset.
		/// Changesets_Get_Changeset_Changes {organization}/_apis/tfvc/changesets/{id}/changes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">ID of the changeset. Default: null</param>
		/// <param name="skip">Number of results to skip. Default: null</param>
		/// <param name="top">The maximum number of results to return. Default: null</param>
		/// <param name="continuationToken">Return the next page of results. Default: null</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TfvcChange[] Changesets_Get_Changeset_Changes(string organization, int id, int skip, int top, string continuationToken, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/tfvc/changesets/"+id+"/changes&$skip="+skip+"&$top="+top+"&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcChange[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the work items associated with a particular changeset.
		/// Changesets_Get_Changeset_Work_Items {organization}/_apis/tfvc/changesets/{id}/workItems
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">ID of the changeset.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<AssociatedWorkItem[]> Changesets_Get_Changeset_Work_ItemsAsync(string organization, int id, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/tfvc/changesets/"+id+"/workItems&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociatedWorkItem[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the work items associated with a particular changeset.
		/// Changesets_Get_Changeset_Work_Items {organization}/_apis/tfvc/changesets/{id}/workItems
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">ID of the changeset.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public AssociatedWorkItem[] Changesets_Get_Changeset_Work_Items(string organization, int id, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/tfvc/changesets/"+id+"/workItems&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociatedWorkItem[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns changesets for a given list of changeset Ids.
		/// Changesets_Get_Batched_Changesets {organization}/_apis/tfvc/changesetsbatch
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">List of changeset IDs.</param>
		/// <returns>successful operation</returns>
		public async Task<TfvcChangesetRef[]> Changesets_Get_Batched_ChangesetsAsync(string organization, string api_version, TfvcChangesetsRequestData requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/tfvc/changesetsbatch&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcChangesetRef[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns changesets for a given list of changeset Ids.
		/// Changesets_Get_Batched_Changesets {organization}/_apis/tfvc/changesetsbatch
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">List of changeset IDs.</param>
		/// <returns>successful operation</returns>
		public TfvcChangesetRef[] Changesets_Get_Batched_Changesets(string organization, string api_version, TfvcChangesetsRequestData requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/tfvc/changesetsbatch&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcChangesetRef[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get items under a label.
		/// Labels_Get_Label_Items {organization}/_apis/tfvc/labels/{labelId}/items
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="labelId">Unique identifier of label</param>
		/// <param name="top">Max number of items to return</param>
		/// <param name="skip">Number of items to skip</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TfvcItem[]> Labels_Get_Label_ItemsAsync(string organization, string labelId, int top, int skip, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/tfvc/labels/"+ (labelId==null? "" : System.Uri.EscapeDataString(labelId))+"/items&$top="+top+"&$skip="+skip+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcItem[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get items under a label.
		/// Labels_Get_Label_Items {organization}/_apis/tfvc/labels/{labelId}/items
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="labelId">Unique identifier of label</param>
		/// <param name="top">Max number of items to return</param>
		/// <param name="skip">Number of items to skip</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TfvcItem[] Labels_Get_Label_Items(string organization, string labelId, int top, int skip, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/tfvc/labels/"+ (labelId==null? "" : System.Uri.EscapeDataString(labelId))+"/items&$top="+top+"&$skip="+skip+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcItem[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a single deep shelveset.
		/// Shelvesets_Get {organization}/_apis/tfvc/shelvesets
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="shelvesetId">Shelveset's unique ID</param>
		/// <param name="requestData_includeDetails">Whether to include policyOverride and notes Only applies when requesting a single deep shelveset</param>
		/// <param name="requestData_includeLinks">Whether to include the _links field on the shallow references. Does not apply when requesting a single deep shelveset object. Links will always be included in the deep shelveset.</param>
		/// <param name="requestData_includeWorkItems">Whether to include workItems</param>
		/// <param name="requestData_maxChangeCount">Max number of changes to include</param>
		/// <param name="requestData_maxCommentLength">Max length of comment</param>
		/// <param name="requestData_name">Shelveset name</param>
		/// <param name="requestData_owner">Owner's ID. Could be a name or a guid.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TfvcShelveset> Shelvesets_GetAsync(string organization, string shelvesetId, bool requestData_includeDetails, bool requestData_includeLinks, bool requestData_includeWorkItems, int requestData_maxChangeCount, int requestData_maxCommentLength, string requestData_name, string requestData_owner, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/tfvc/shelvesets&shelvesetId=" + (shelvesetId==null? "" : System.Uri.EscapeDataString(shelvesetId))+"&requestData.includeDetails="+requestData_includeDetails+"&requestData.includeLinks="+requestData_includeLinks+"&requestData.includeWorkItems="+requestData_includeWorkItems+"&requestData.maxChangeCount="+requestData_maxChangeCount+"&requestData.maxCommentLength="+requestData_maxCommentLength+"&requestData.name=" + (requestData_name==null? "" : System.Uri.EscapeDataString(requestData_name))+"&requestData.owner=" + (requestData_owner==null? "" : System.Uri.EscapeDataString(requestData_owner))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcShelveset>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a single deep shelveset.
		/// Shelvesets_Get {organization}/_apis/tfvc/shelvesets
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="shelvesetId">Shelveset's unique ID</param>
		/// <param name="requestData_includeDetails">Whether to include policyOverride and notes Only applies when requesting a single deep shelveset</param>
		/// <param name="requestData_includeLinks">Whether to include the _links field on the shallow references. Does not apply when requesting a single deep shelveset object. Links will always be included in the deep shelveset.</param>
		/// <param name="requestData_includeWorkItems">Whether to include workItems</param>
		/// <param name="requestData_maxChangeCount">Max number of changes to include</param>
		/// <param name="requestData_maxCommentLength">Max length of comment</param>
		/// <param name="requestData_name">Shelveset name</param>
		/// <param name="requestData_owner">Owner's ID. Could be a name or a guid.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TfvcShelveset Shelvesets_Get(string organization, string shelvesetId, bool requestData_includeDetails, bool requestData_includeLinks, bool requestData_includeWorkItems, int requestData_maxChangeCount, int requestData_maxCommentLength, string requestData_name, string requestData_owner, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/tfvc/shelvesets&shelvesetId=" + (shelvesetId==null? "" : System.Uri.EscapeDataString(shelvesetId))+"&requestData.includeDetails="+requestData_includeDetails+"&requestData.includeLinks="+requestData_includeLinks+"&requestData.includeWorkItems="+requestData_includeWorkItems+"&requestData.maxChangeCount="+requestData_maxChangeCount+"&requestData.maxCommentLength="+requestData_maxCommentLength+"&requestData.name=" + (requestData_name==null? "" : System.Uri.EscapeDataString(requestData_name))+"&requestData.owner=" + (requestData_owner==null? "" : System.Uri.EscapeDataString(requestData_owner))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcShelveset>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get changes included in a shelveset.
		/// Shelvesets_Get_Shelveset_Changes {organization}/_apis/tfvc/shelvesets/changes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="shelvesetId">Shelveset's unique ID</param>
		/// <param name="top">Max number of changes to return</param>
		/// <param name="skip">Number of changes to skip</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TfvcChange[]> Shelvesets_Get_Shelveset_ChangesAsync(string organization, string shelvesetId, int top, int skip, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/tfvc/shelvesets/changes&shelvesetId=" + (shelvesetId==null? "" : System.Uri.EscapeDataString(shelvesetId))+"&$top="+top+"&$skip="+skip+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcChange[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get changes included in a shelveset.
		/// Shelvesets_Get_Shelveset_Changes {organization}/_apis/tfvc/shelvesets/changes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="shelvesetId">Shelveset's unique ID</param>
		/// <param name="top">Max number of changes to return</param>
		/// <param name="skip">Number of changes to skip</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TfvcChange[] Shelvesets_Get_Shelveset_Changes(string organization, string shelvesetId, int top, int skip, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/tfvc/shelvesets/changes&shelvesetId=" + (shelvesetId==null? "" : System.Uri.EscapeDataString(shelvesetId))+"&$top="+top+"&$skip="+skip+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcChange[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get work items associated with a shelveset.
		/// Shelvesets_Get_Shelveset_Work_Items {organization}/_apis/tfvc/shelvesets/workitems
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="shelvesetId">Shelveset's unique ID</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<AssociatedWorkItem[]> Shelvesets_Get_Shelveset_Work_ItemsAsync(string organization, string shelvesetId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/tfvc/shelvesets/workitems&shelvesetId=" + (shelvesetId==null? "" : System.Uri.EscapeDataString(shelvesetId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociatedWorkItem[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get work items associated with a shelveset.
		/// Shelvesets_Get_Shelveset_Work_Items {organization}/_apis/tfvc/shelvesets/workitems
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="shelvesetId">Shelveset's unique ID</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public AssociatedWorkItem[] Shelvesets_Get_Shelveset_Work_Items(string organization, string shelvesetId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/tfvc/shelvesets/workitems&shelvesetId=" + (shelvesetId==null? "" : System.Uri.EscapeDataString(shelvesetId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociatedWorkItem[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get branch hierarchies below the specified scopePath
		/// Branches_Get_Branch_Refs {organization}/{project}/_apis/tfvc/branches
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="scopePath">Full path to the branch.  Default: $/ Examples: $/, $/MyProject, $/MyProject/SomeFolder.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="includeDeleted">Return deleted branches. Default: False</param>
		/// <param name="includeLinks">Return links. Default: False</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TfvcBranchRef[]> Branches_Get_Branch_RefsAsync(string organization, string scopePath, string project, bool includeDeleted, bool includeLinks, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/tfvc/branches&scopePath=" + (scopePath==null? "" : System.Uri.EscapeDataString(scopePath))+"&includeDeleted="+includeDeleted+"&includeLinks="+includeLinks+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcBranchRef[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get branch hierarchies below the specified scopePath
		/// Branches_Get_Branch_Refs {organization}/{project}/_apis/tfvc/branches
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="scopePath">Full path to the branch.  Default: $/ Examples: $/, $/MyProject, $/MyProject/SomeFolder.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="includeDeleted">Return deleted branches. Default: False</param>
		/// <param name="includeLinks">Return links. Default: False</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TfvcBranchRef[] Branches_Get_Branch_Refs(string organization, string scopePath, string project, bool includeDeleted, bool includeLinks, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/tfvc/branches&scopePath=" + (scopePath==null? "" : System.Uri.EscapeDataString(scopePath))+"&includeDeleted="+includeDeleted+"&includeLinks="+includeLinks+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcBranchRef[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve Tfvc Changesets
		/// 
		/// Note: This is a new version of the GetChangesets API that doesn't expose the unneeded queryParams
		/// present in the 1.0 version of the API.
		/// Changesets_Get_Changesets {organization}/{project}/_apis/tfvc/changesets
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="maxCommentLength">Include details about associated work items in the response. Default: null</param>
		/// <param name="skip">Number of results to skip. Default: null</param>
		/// <param name="top">The maximum number of results to return. Default: null</param>
		/// <param name="orderby">Results are sorted by ID in descending order by default. Use id asc to sort by ID in ascending order.</param>
		/// <param name="searchCriteria_author">Alias or display name of user who made the changes.</param>
		/// <param name="searchCriteria_followRenames">Whether or not to follow renames for the given item being queried.</param>
		/// <param name="searchCriteria_fromDate">If provided, only include changesets created after this date (string).</param>
		/// <param name="searchCriteria_fromId">If provided, only include changesets after this changesetID.</param>
		/// <param name="searchCriteria_includeLinks">Whether to include the _links field on the shallow references.</param>
		/// <param name="searchCriteria_itemPath">Path of item to search under.</param>
		/// <param name="searchCriteria_mappings">Following criteria available (.itemPath, .version, .versionType, .versionOption, .author, .fromId, .toId, .fromDate, .toDate) Default: null</param>
		/// <param name="searchCriteria_toDate">If provided, only include changesets created before this date (string).</param>
		/// <param name="searchCriteria_toId">If provided, a version descriptor for the latest change list to include.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TfvcChangesetRef[]> Changesets_Get_ChangesetsAsync(
					string organization, 
					string project, 
					int maxCommentLength, 
					int skip, 
					int top, 
					string orderby, 
					string searchCriteria_author, 
					bool searchCriteria_followRenames, 
					string searchCriteria_fromDate, 
					int searchCriteria_fromId, 
					bool searchCriteria_includeLinks, 
					string searchCriteria_itemPath, 
					TfvcMappingFilter[] searchCriteria_mappings, 
					string searchCriteria_toDate, 
					int searchCriteria_toId, 
					string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/tfvc/changesets&maxCommentLength="+maxCommentLength+"&$skip="+skip+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&searchCriteria.author=" + (searchCriteria_author==null? "" : System.Uri.EscapeDataString(searchCriteria_author))+"&searchCriteria.followRenames="+searchCriteria_followRenames+"&searchCriteria.fromDate=" + (searchCriteria_fromDate==null? "" : System.Uri.EscapeDataString(searchCriteria_fromDate))+"&searchCriteria.fromId="+searchCriteria_fromId+"&searchCriteria.includeLinks="+searchCriteria_includeLinks+"&searchCriteria.itemPath=" + (searchCriteria_itemPath==null? "" : System.Uri.EscapeDataString(searchCriteria_itemPath))+"&"+string.Join("&", searchCriteria_mappings.Select(z => $"searchCriteria.mappings={z}"))+"&searchCriteria.toDate=" + (searchCriteria_toDate==null? "" : System.Uri.EscapeDataString(searchCriteria_toDate))+"&searchCriteria.toId="+searchCriteria_toId+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcChangesetRef[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve Tfvc Changesets
		/// 
		/// Note: This is a new version of the GetChangesets API that doesn't expose the unneeded queryParams
		/// present in the 1.0 version of the API.
		/// Changesets_Get_Changesets {organization}/{project}/_apis/tfvc/changesets
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="maxCommentLength">Include details about associated work items in the response. Default: null</param>
		/// <param name="skip">Number of results to skip. Default: null</param>
		/// <param name="top">The maximum number of results to return. Default: null</param>
		/// <param name="orderby">Results are sorted by ID in descending order by default. Use id asc to sort by ID in ascending order.</param>
		/// <param name="searchCriteria_author">Alias or display name of user who made the changes.</param>
		/// <param name="searchCriteria_followRenames">Whether or not to follow renames for the given item being queried.</param>
		/// <param name="searchCriteria_fromDate">If provided, only include changesets created after this date (string).</param>
		/// <param name="searchCriteria_fromId">If provided, only include changesets after this changesetID.</param>
		/// <param name="searchCriteria_includeLinks">Whether to include the _links field on the shallow references.</param>
		/// <param name="searchCriteria_itemPath">Path of item to search under.</param>
		/// <param name="searchCriteria_mappings">Following criteria available (.itemPath, .version, .versionType, .versionOption, .author, .fromId, .toId, .fromDate, .toDate) Default: null</param>
		/// <param name="searchCriteria_toDate">If provided, only include changesets created before this date (string).</param>
		/// <param name="searchCriteria_toId">If provided, a version descriptor for the latest change list to include.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TfvcChangesetRef[] Changesets_Get_Changesets(
					string organization, 
					string project, 
					int maxCommentLength, 
					int skip, 
					int top, 
					string orderby, 
					string searchCriteria_author, 
					bool searchCriteria_followRenames, 
					string searchCriteria_fromDate, 
					int searchCriteria_fromId, 
					bool searchCriteria_includeLinks, 
					string searchCriteria_itemPath, 
					TfvcMappingFilter[] searchCriteria_mappings, 
					string searchCriteria_toDate, 
					int searchCriteria_toId, 
					string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/tfvc/changesets&maxCommentLength="+maxCommentLength+"&$skip="+skip+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&searchCriteria.author=" + (searchCriteria_author==null? "" : System.Uri.EscapeDataString(searchCriteria_author))+"&searchCriteria.followRenames="+searchCriteria_followRenames+"&searchCriteria.fromDate=" + (searchCriteria_fromDate==null? "" : System.Uri.EscapeDataString(searchCriteria_fromDate))+"&searchCriteria.fromId="+searchCriteria_fromId+"&searchCriteria.includeLinks="+searchCriteria_includeLinks+"&searchCriteria.itemPath=" + (searchCriteria_itemPath==null? "" : System.Uri.EscapeDataString(searchCriteria_itemPath))+"&"+string.Join("&", searchCriteria_mappings.Select(z => $"searchCriteria.mappings={z}"))+"&searchCriteria.toDate=" + (searchCriteria_toDate==null? "" : System.Uri.EscapeDataString(searchCriteria_toDate))+"&searchCriteria.toId="+searchCriteria_toId+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcChangesetRef[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new changeset.
		/// 
		/// Accepts TfvcChangeset as JSON body
		/// Changesets_Create {organization}/{project}/_apis/tfvc/changesets
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TfvcChangesetRef> Changesets_CreateAsync(string organization, string project, string api_version, TfvcChangeset requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/tfvc/changesets&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcChangesetRef>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a new changeset.
		/// 
		/// Accepts TfvcChangeset as JSON body
		/// Changesets_Create {organization}/{project}/_apis/tfvc/changesets
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TfvcChangesetRef Changesets_Create(string organization, string project, string api_version, TfvcChangeset requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/tfvc/changesets&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcChangesetRef>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Tfvc Changeset
		/// Changesets_Get {organization}/{project}/_apis/tfvc/changesets/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">Changeset Id to retrieve.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="maxChangeCount">Number of changes to return (maximum 100 changes) Default: 0</param>
		/// <param name="includeDetails">Include policy details and check-in notes in the response. Default: false</param>
		/// <param name="includeWorkItems">Include workitems. Default: false</param>
		/// <param name="maxCommentLength">Include details about associated work items in the response. Default: null</param>
		/// <param name="includeSourceRename">Include renames.  Default: false</param>
		/// <param name="skip">Number of results to skip. Default: null</param>
		/// <param name="top">The maximum number of results to return. Default: null</param>
		/// <param name="orderby">Results are sorted by ID in descending order by default. Use id asc to sort by ID in ascending order.</param>
		/// <param name="searchCriteria_author">Alias or display name of user who made the changes.</param>
		/// <param name="searchCriteria_followRenames">Whether or not to follow renames for the given item being queried.</param>
		/// <param name="searchCriteria_fromDate">If provided, only include changesets created after this date (string).</param>
		/// <param name="searchCriteria_fromId">If provided, only include changesets after this changesetID.</param>
		/// <param name="searchCriteria_includeLinks">Whether to include the _links field on the shallow references.</param>
		/// <param name="searchCriteria_itemPath">Path of item to search under.</param>
		/// <param name="searchCriteria_mappings">Following criteria available (.itemPath, .version, .versionType, .versionOption, .author, .fromId, .toId, .fromDate, .toDate) Default: null</param>
		/// <param name="searchCriteria_toDate">If provided, only include changesets created before this date (string).</param>
		/// <param name="searchCriteria_toId">If provided, a version descriptor for the latest change list to include.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TfvcChangeset> Changesets_GetAsync(
					string organization, 
					int id, 
					string project, 
					int maxChangeCount, 
					bool includeDetails, 
					bool includeWorkItems, 
					int maxCommentLength, 
					bool includeSourceRename, 
					int skip, 
					int top, 
					string orderby, 
					string searchCriteria_author, 
					bool searchCriteria_followRenames, 
					string searchCriteria_fromDate, 
					int searchCriteria_fromId, 
					bool searchCriteria_includeLinks, 
					string searchCriteria_itemPath, 
					TfvcMappingFilter[] searchCriteria_mappings, 
					string searchCriteria_toDate, 
					int searchCriteria_toId, 
					string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/tfvc/changesets/"+id+"&maxChangeCount="+maxChangeCount+"&includeDetails="+includeDetails+"&includeWorkItems="+includeWorkItems+"&maxCommentLength="+maxCommentLength+"&includeSourceRename="+includeSourceRename+"&$skip="+skip+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&searchCriteria.author=" + (searchCriteria_author==null? "" : System.Uri.EscapeDataString(searchCriteria_author))+"&searchCriteria.followRenames="+searchCriteria_followRenames+"&searchCriteria.fromDate=" + (searchCriteria_fromDate==null? "" : System.Uri.EscapeDataString(searchCriteria_fromDate))+"&searchCriteria.fromId="+searchCriteria_fromId+"&searchCriteria.includeLinks="+searchCriteria_includeLinks+"&searchCriteria.itemPath=" + (searchCriteria_itemPath==null? "" : System.Uri.EscapeDataString(searchCriteria_itemPath))+"&"+string.Join("&", searchCriteria_mappings.Select(z => $"searchCriteria.mappings={z}"))+"&searchCriteria.toDate=" + (searchCriteria_toDate==null? "" : System.Uri.EscapeDataString(searchCriteria_toDate))+"&searchCriteria.toId="+searchCriteria_toId+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcChangeset>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Tfvc Changeset
		/// Changesets_Get {organization}/{project}/_apis/tfvc/changesets/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">Changeset Id to retrieve.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="maxChangeCount">Number of changes to return (maximum 100 changes) Default: 0</param>
		/// <param name="includeDetails">Include policy details and check-in notes in the response. Default: false</param>
		/// <param name="includeWorkItems">Include workitems. Default: false</param>
		/// <param name="maxCommentLength">Include details about associated work items in the response. Default: null</param>
		/// <param name="includeSourceRename">Include renames.  Default: false</param>
		/// <param name="skip">Number of results to skip. Default: null</param>
		/// <param name="top">The maximum number of results to return. Default: null</param>
		/// <param name="orderby">Results are sorted by ID in descending order by default. Use id asc to sort by ID in ascending order.</param>
		/// <param name="searchCriteria_author">Alias or display name of user who made the changes.</param>
		/// <param name="searchCriteria_followRenames">Whether or not to follow renames for the given item being queried.</param>
		/// <param name="searchCriteria_fromDate">If provided, only include changesets created after this date (string).</param>
		/// <param name="searchCriteria_fromId">If provided, only include changesets after this changesetID.</param>
		/// <param name="searchCriteria_includeLinks">Whether to include the _links field on the shallow references.</param>
		/// <param name="searchCriteria_itemPath">Path of item to search under.</param>
		/// <param name="searchCriteria_mappings">Following criteria available (.itemPath, .version, .versionType, .versionOption, .author, .fromId, .toId, .fromDate, .toDate) Default: null</param>
		/// <param name="searchCriteria_toDate">If provided, only include changesets created before this date (string).</param>
		/// <param name="searchCriteria_toId">If provided, a version descriptor for the latest change list to include.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TfvcChangeset Changesets_Get(
					string organization, 
					int id, 
					string project, 
					int maxChangeCount, 
					bool includeDetails, 
					bool includeWorkItems, 
					int maxCommentLength, 
					bool includeSourceRename, 
					int skip, 
					int top, 
					string orderby, 
					string searchCriteria_author, 
					bool searchCriteria_followRenames, 
					string searchCriteria_fromDate, 
					int searchCriteria_fromId, 
					bool searchCriteria_includeLinks, 
					string searchCriteria_itemPath, 
					TfvcMappingFilter[] searchCriteria_mappings, 
					string searchCriteria_toDate, 
					int searchCriteria_toId, 
					string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/tfvc/changesets/"+id+"&maxChangeCount="+maxChangeCount+"&includeDetails="+includeDetails+"&includeWorkItems="+includeWorkItems+"&maxCommentLength="+maxCommentLength+"&includeSourceRename="+includeSourceRename+"&$skip="+skip+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&searchCriteria.author=" + (searchCriteria_author==null? "" : System.Uri.EscapeDataString(searchCriteria_author))+"&searchCriteria.followRenames="+searchCriteria_followRenames+"&searchCriteria.fromDate=" + (searchCriteria_fromDate==null? "" : System.Uri.EscapeDataString(searchCriteria_fromDate))+"&searchCriteria.fromId="+searchCriteria_fromId+"&searchCriteria.includeLinks="+searchCriteria_includeLinks+"&searchCriteria.itemPath=" + (searchCriteria_itemPath==null? "" : System.Uri.EscapeDataString(searchCriteria_itemPath))+"&"+string.Join("&", searchCriteria_mappings.Select(z => $"searchCriteria.mappings={z}"))+"&searchCriteria.toDate=" + (searchCriteria_toDate==null? "" : System.Uri.EscapeDataString(searchCriteria_toDate))+"&searchCriteria.toId="+searchCriteria_toId+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcChangeset>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Post for retrieving a set of items given a list of paths or a long path. Allows for specifying the recursionLevel and version descriptors for each path.
		/// Items_Get_Items_Batch {organization}/{project}/_apis/tfvc/itembatch
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Items_Get_Items_BatchAsync(string organization, string project, string api_version, TfvcItemRequestData requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/tfvc/itembatch&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Post for retrieving a set of items given a list of paths or a long path. Allows for specifying the recursionLevel and version descriptors for each path.
		/// Items_Get_Items_Batch {organization}/{project}/_apis/tfvc/itembatch
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public string[] Items_Get_Items_Batch(string organization, string project, string api_version, TfvcItemRequestData requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/tfvc/itembatch&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of Tfvc items
		/// Items_List {organization}/{project}/_apis/tfvc/items
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="scopePath">Version control path of a folder to return multiple items.</param>
		/// <param name="recursionLevel">None (just the item), or OneLevel (contents of a folder).</param>
		/// <param name="includeLinks">True to include links.</param>
		/// <param name="versionDescriptor_version">Version object.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TfvcItem[]> Items_ListAsync(string organization, string project, string scopePath, TfvcItemDescriptorRecursionLevel recursionLevel, bool includeLinks, string versionDescriptor_version, TfvcItemDescriptorVersionOption versionDescriptor_versionOption, TfvcItemDescriptorVersionType versionDescriptor_versionType, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/tfvc/items&scopePath=" + (scopePath==null? "" : System.Uri.EscapeDataString(scopePath))+"&recursionLevel=" + recursionLevel+"&includeLinks="+includeLinks+"&versionDescriptor.version=" + (versionDescriptor_version==null? "" : System.Uri.EscapeDataString(versionDescriptor_version))+"&versionDescriptor.versionOption=" + versionDescriptor_versionOption+"&versionDescriptor.versionType=" + versionDescriptor_versionType+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcItem[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of Tfvc items
		/// Items_List {organization}/{project}/_apis/tfvc/items
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="scopePath">Version control path of a folder to return multiple items.</param>
		/// <param name="recursionLevel">None (just the item), or OneLevel (contents of a folder).</param>
		/// <param name="includeLinks">True to include links.</param>
		/// <param name="versionDescriptor_version">Version object.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TfvcItem[] Items_List(string organization, string project, string scopePath, TfvcItemDescriptorRecursionLevel recursionLevel, bool includeLinks, string versionDescriptor_version, TfvcItemDescriptorVersionOption versionDescriptor_versionOption, TfvcItemDescriptorVersionType versionDescriptor_versionType, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/tfvc/items&scopePath=" + (scopePath==null? "" : System.Uri.EscapeDataString(scopePath))+"&recursionLevel=" + recursionLevel+"&includeLinks="+includeLinks+"&versionDescriptor.version=" + (versionDescriptor_version==null? "" : System.Uri.EscapeDataString(versionDescriptor_version))+"&versionDescriptor.versionOption=" + versionDescriptor_versionOption+"&versionDescriptor.versionType=" + versionDescriptor_versionType+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcItem[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a collection of shallow label references.
		/// Labels_List {organization}/{project}/_apis/tfvc/labels
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="requestData_includeLinks">Whether to include the _links field on the shallow references</param>
		/// <param name="requestData_itemLabelFilter">labelScope, name, owner, and itemLabelFilter</param>
		/// <param name="requestData_labelScope">labelScope, name, owner, and itemLabelFilter</param>
		/// <param name="requestData_maxItemCount">labelScope, name, owner, and itemLabelFilter</param>
		/// <param name="requestData_name">labelScope, name, owner, and itemLabelFilter</param>
		/// <param name="requestData_owner">labelScope, name, owner, and itemLabelFilter</param>
		/// <param name="top">Max number of labels to return, defaults to 100 when undefined</param>
		/// <param name="skip">Number of labels to skip</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TfvcLabelRef[]> Labels_ListAsync(string organization, string project, bool requestData_includeLinks, string requestData_itemLabelFilter, string requestData_labelScope, int requestData_maxItemCount, string requestData_name, string requestData_owner, int top, int skip, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/tfvc/labels&requestData.includeLinks="+requestData_includeLinks+"&requestData.itemLabelFilter=" + (requestData_itemLabelFilter==null? "" : System.Uri.EscapeDataString(requestData_itemLabelFilter))+"&requestData.labelScope=" + (requestData_labelScope==null? "" : System.Uri.EscapeDataString(requestData_labelScope))+"&requestData.maxItemCount="+requestData_maxItemCount+"&requestData.name=" + (requestData_name==null? "" : System.Uri.EscapeDataString(requestData_name))+"&requestData.owner=" + (requestData_owner==null? "" : System.Uri.EscapeDataString(requestData_owner))+"&$top="+top+"&$skip="+skip+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcLabelRef[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a collection of shallow label references.
		/// Labels_List {organization}/{project}/_apis/tfvc/labels
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="requestData_includeLinks">Whether to include the _links field on the shallow references</param>
		/// <param name="requestData_itemLabelFilter">labelScope, name, owner, and itemLabelFilter</param>
		/// <param name="requestData_labelScope">labelScope, name, owner, and itemLabelFilter</param>
		/// <param name="requestData_maxItemCount">labelScope, name, owner, and itemLabelFilter</param>
		/// <param name="requestData_name">labelScope, name, owner, and itemLabelFilter</param>
		/// <param name="requestData_owner">labelScope, name, owner, and itemLabelFilter</param>
		/// <param name="top">Max number of labels to return, defaults to 100 when undefined</param>
		/// <param name="skip">Number of labels to skip</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TfvcLabelRef[] Labels_List(string organization, string project, bool requestData_includeLinks, string requestData_itemLabelFilter, string requestData_labelScope, int requestData_maxItemCount, string requestData_name, string requestData_owner, int top, int skip, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/tfvc/labels&requestData.includeLinks="+requestData_includeLinks+"&requestData.itemLabelFilter=" + (requestData_itemLabelFilter==null? "" : System.Uri.EscapeDataString(requestData_itemLabelFilter))+"&requestData.labelScope=" + (requestData_labelScope==null? "" : System.Uri.EscapeDataString(requestData_labelScope))+"&requestData.maxItemCount="+requestData_maxItemCount+"&requestData.name=" + (requestData_name==null? "" : System.Uri.EscapeDataString(requestData_name))+"&requestData.owner=" + (requestData_owner==null? "" : System.Uri.EscapeDataString(requestData_owner))+"&$top="+top+"&$skip="+skip+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcLabelRef[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a single deep label.
		/// Labels_Get {organization}/{project}/_apis/tfvc/labels/{labelId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="labelId">Unique identifier of label</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="requestData_includeLinks">Whether to include the _links field on the shallow references</param>
		/// <param name="requestData_itemLabelFilter">maxItemCount</param>
		/// <param name="requestData_labelScope">maxItemCount</param>
		/// <param name="requestData_maxItemCount">maxItemCount</param>
		/// <param name="requestData_name">maxItemCount</param>
		/// <param name="requestData_owner">maxItemCount</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TfvcLabel> Labels_GetAsync(string organization, string labelId, string project, bool requestData_includeLinks, string requestData_itemLabelFilter, string requestData_labelScope, int requestData_maxItemCount, string requestData_name, string requestData_owner, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/tfvc/labels/"+ (labelId==null? "" : System.Uri.EscapeDataString(labelId))+"&requestData.includeLinks="+requestData_includeLinks+"&requestData.itemLabelFilter=" + (requestData_itemLabelFilter==null? "" : System.Uri.EscapeDataString(requestData_itemLabelFilter))+"&requestData.labelScope=" + (requestData_labelScope==null? "" : System.Uri.EscapeDataString(requestData_labelScope))+"&requestData.maxItemCount="+requestData_maxItemCount+"&requestData.name=" + (requestData_name==null? "" : System.Uri.EscapeDataString(requestData_name))+"&requestData.owner=" + (requestData_owner==null? "" : System.Uri.EscapeDataString(requestData_owner))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcLabel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a single deep label.
		/// Labels_Get {organization}/{project}/_apis/tfvc/labels/{labelId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="labelId">Unique identifier of label</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="requestData_includeLinks">Whether to include the _links field on the shallow references</param>
		/// <param name="requestData_itemLabelFilter">maxItemCount</param>
		/// <param name="requestData_labelScope">maxItemCount</param>
		/// <param name="requestData_maxItemCount">maxItemCount</param>
		/// <param name="requestData_name">maxItemCount</param>
		/// <param name="requestData_owner">maxItemCount</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TfvcLabel Labels_Get(string organization, string labelId, string project, bool requestData_includeLinks, string requestData_itemLabelFilter, string requestData_labelScope, int requestData_maxItemCount, string requestData_name, string requestData_owner, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/tfvc/labels/"+ (labelId==null? "" : System.Uri.EscapeDataString(labelId))+"&requestData.includeLinks="+requestData_includeLinks+"&requestData.itemLabelFilter=" + (requestData_itemLabelFilter==null? "" : System.Uri.EscapeDataString(requestData_itemLabelFilter))+"&requestData.labelScope=" + (requestData_labelScope==null? "" : System.Uri.EscapeDataString(requestData_labelScope))+"&requestData.maxItemCount="+requestData_maxItemCount+"&requestData.name=" + (requestData_name==null? "" : System.Uri.EscapeDataString(requestData_name))+"&requestData.owner=" + (requestData_owner==null? "" : System.Uri.EscapeDataString(requestData_owner))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcLabel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
