//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public class AbortTestRunRequest
	{
		
		public System.Nullable<System.Int32> Options { get; set; }
		
		public string ProjectName { get; set; }
		
		public System.Nullable<System.Int32> Revision { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
	}
	
	public class AfnStrip
	{
		
		/// <summary>
		/// Auxiliary Url to be consumed by MTM
		/// </summary>
		public string AuxiliaryUrl { get; set; }
		
		/// <summary>
		/// Creation date of the AfnStrip
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// File name of the attachment created
		/// </summary>
		public string FileName { get; set; }
		
		/// <summary>
		/// ID of AfnStrip. This is same as the attachment ID.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Project identifier which contains AfnStrip
		/// </summary>
		public string Project { get; set; }
		
		/// <summary>
		/// Service in which this attachment is stored in
		/// </summary>
		public string StoredIn { get; set; }
		
		/// <summary>
		/// Afn strip stream.
		/// </summary>
		public string Stream { get; set; }
		
		/// <summary>
		/// ID of the testcase.
		/// </summary>
		public System.Nullable<System.Int32> TestCaseId { get; set; }
		
		/// <summary>
		/// Backing test result id.
		/// </summary>
		public System.Nullable<System.Int32> TestResultId { get; set; }
		
		/// <summary>
		/// Backing test run id.
		/// </summary>
		public System.Nullable<System.Int32> TestRunId { get; set; }
		
		/// <summary>
		/// Byte stream (uncompressed) length of Afn strip.
		/// </summary>
		public System.Nullable<System.Int64> UnCompressedStreamLength { get; set; }
		
		/// <summary>
		/// Url of the attachment created.
		/// </summary>
		public string Url { get; set; }
	}
	
	public class AggregatedDataForResultTrend
	{
		
		/// <summary>
		/// This is tests execution duration.
		/// </summary>
		public string Duration { get; set; }
		
		public System.Collections.Generic.Dictionary<string, AggregatedResultsByOutcome> ResultsByOutcome { get; set; }
		
		public System.Collections.Generic.Dictionary<string, AggregatedRunsByState> RunSummaryByState { get; set; }
		
		public TestResultsContext TestResultsContext { get; set; }
		
		public System.Nullable<System.Int32> TotalTests { get; set; }
	}
	
	public class AggregatedResultsByOutcome
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
		
		public string Duration { get; set; }
		
		public string GroupByField { get; set; }
		
		public string GroupByValue { get; set; }
		
		public System.Nullable<AggregatedResultsByOutcomeOutcome> Outcome { get; set; }
		
		public System.Nullable<System.Int32> RerunResultCount { get; set; }
	}
	
	public enum AggregatedResultsByOutcomeOutcome
	{
		
		unspecified = 0,
		
		none = 1,
		
		passed = 2,
		
		failed = 3,
		
		inconclusive = 4,
		
		timeout = 5,
		
		aborted = 6,
		
		blocked = 7,
		
		notExecuted = 8,
		
		warning = 9,
		
		error = 10,
		
		notApplicable = 11,
		
		paused = 12,
		
		inProgress = 13,
		
		notImpacted = 14,
	}
	
	public class AggregatedRunsByState
	{
		
		public System.Collections.Generic.Dictionary<string, AggregatedResultsByOutcome> ResultsByOutcome { get; set; }
		
		public System.Nullable<System.Int32> RunsCount { get; set; }
		
		public System.Nullable<AggregatedRunsByStateState> State { get; set; }
	}
	
	public enum AggregatedRunsByStateState
	{
		
		unspecified = 0,
		
		notStarted = 1,
		
		inProgress = 2,
		
		completed = 3,
		
		aborted = 4,
		
		waiting = 5,
		
		needsInvestigation = 6,
	}
	
	public class TestResultsContext
	{
		
		/// <summary>
		/// Reference to a build.
		/// </summary>
		public BuildReference Build { get; set; }
		
		public System.Nullable<TestResultsContextContextType> ContextType { get; set; }
		
		/// <summary>
		/// Pipeline reference
		/// </summary>
		public PipelineReference PipelineReference { get; set; }
		
		/// <summary>
		/// Reference to a release.
		/// </summary>
		public ReleaseReference Release { get; set; }
	}
	
	/// <summary>
	/// Reference to a build.
	/// </summary>
	public class BuildReference
	{
		
		/// <summary>
		/// Branch name.
		/// </summary>
		public string BranchName { get; set; }
		
		/// <summary>
		/// Build system.
		/// </summary>
		public string BuildSystem { get; set; }
		
		/// <summary>
		/// Build Definition ID.
		/// </summary>
		public System.Nullable<System.Int32> DefinitionId { get; set; }
		
		/// <summary>
		/// Build ID.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Build Number.
		/// </summary>
		public string Number { get; set; }
		
		/// <summary>
		/// Repository ID.
		/// </summary>
		public string RepositoryId { get; set; }
		
		/// <summary>
		/// Build URI.
		/// </summary>
		public string Uri { get; set; }
	}
	
	public enum TestResultsContextContextType
	{
		
		build = 0,
		
		release = 1,
		
		pipeline = 2,
	}
	
	/// <summary>
	/// Pipeline reference
	/// </summary>
	public class PipelineReference
	{
		
		/// <summary>
		/// Job in pipeline. This is related to matrixing in YAML.
		/// </summary>
		public JobReference JobReference { get; set; }
		
		/// <summary>
		/// Phase in pipeline
		/// </summary>
		public PhaseReference PhaseReference { get; set; }
		
		/// <summary>
		/// Reference of the pipeline with which this pipeline instance is related.
		/// </summary>
		public System.Nullable<System.Int32> PipelineId { get; set; }
		
		/// <summary>
		/// Stage in pipeline
		/// </summary>
		public StageReference StageReference { get; set; }
	}
	
	/// <summary>
	/// Job in pipeline. This is related to matrixing in YAML.
	/// </summary>
	public class JobReference
	{
		
		/// <summary>
		/// Attempt number of the job
		/// </summary>
		public System.Nullable<System.Int32> Attempt { get; set; }
		
		/// <summary>
		/// Matrixing in YAML generates copies of a job with different inputs in matrix. JobName is the name of those input. Maximum supported length for name is 256 character.
		/// </summary>
		public string JobName { get; set; }
	}
	
	/// <summary>
	/// Phase in pipeline
	/// </summary>
	public class PhaseReference
	{
		
		/// <summary>
		/// Attempt number of the phase
		/// </summary>
		public System.Nullable<System.Int32> Attempt { get; set; }
		
		/// <summary>
		/// Name of the phase. Maximum supported length for name is 256 character.
		/// </summary>
		public string PhaseName { get; set; }
	}
	
	/// <summary>
	/// Stage in pipeline
	/// </summary>
	public class StageReference
	{
		
		/// <summary>
		/// Attempt number of stage
		/// </summary>
		public System.Nullable<System.Int32> Attempt { get; set; }
		
		/// <summary>
		/// Name of the stage. Maximum supported length for name is 256 character.
		/// </summary>
		public string StageName { get; set; }
	}
	
	/// <summary>
	/// Reference to a release.
	/// </summary>
	public class ReleaseReference
	{
		
		/// <summary>
		/// Number of Release Attempt.
		/// </summary>
		public System.Nullable<System.Int32> Attempt { get; set; }
		
		/// <summary>
		/// Release Creation Date.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// Release definition ID.
		/// </summary>
		public System.Nullable<System.Int32> DefinitionId { get; set; }
		
		/// <summary>
		/// Environment creation Date.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> EnvironmentCreationDate { get; set; }
		
		/// <summary>
		/// Release environment definition ID.
		/// </summary>
		public System.Nullable<System.Int32> EnvironmentDefinitionId { get; set; }
		
		/// <summary>
		/// Release environment definition name.
		/// </summary>
		public string EnvironmentDefinitionName { get; set; }
		
		/// <summary>
		/// Release environment ID.
		/// </summary>
		public System.Nullable<System.Int32> EnvironmentId { get; set; }
		
		/// <summary>
		/// Release environment name.
		/// </summary>
		public string EnvironmentName { get; set; }
		
		/// <summary>
		/// Release ID.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Release name.
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Result deatils for a particular test result outcome.
	/// </summary>
	public class AggregatedResultDetailsByOutcome
	{
		
		/// <summary>
		/// Number of results for current outcome.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Time taken by results.
		/// </summary>
		public string Duration { get; set; }
		
		/// <summary>
		/// Test result outcome
		/// </summary>
		public System.Nullable<AggregatedResultDetailsByOutcomeOutcome> Outcome { get; set; }
		
		/// <summary>
		/// Number of results on rerun
		/// </summary>
		public System.Nullable<System.Int32> RerunResultCount { get; set; }
	}
	
	public enum AggregatedResultDetailsByOutcomeOutcome
	{
		
		unspecified = 0,
		
		none = 1,
		
		passed = 2,
		
		failed = 3,
		
		inconclusive = 4,
		
		timeout = 5,
		
		aborted = 6,
		
		blocked = 7,
		
		notExecuted = 8,
		
		warning = 9,
		
		error = 10,
		
		notApplicable = 11,
		
		paused = 12,
		
		inProgress = 13,
		
		notImpacted = 14,
	}
	
	public class AggregatedResultsAnalysis
	{
		
		public string Duration { get; set; }
		
		public System.Collections.Generic.Dictionary<string, AggregatedResultsByOutcome> NotReportedResultsByOutcome { get; set; }
		
		public TestResultsContext PreviousContext { get; set; }
		
		public System.Collections.Generic.Dictionary<string, AggregatedResultsByOutcome> ResultsByOutcome { get; set; }
		
		public AggregatedResultsDifference ResultsDifference { get; set; }
		
		public System.Collections.Generic.Dictionary<string, AggregatedRunsByOutcome> RunSummaryByOutcome { get; set; }
		
		public System.Collections.Generic.Dictionary<string, AggregatedRunsByState> RunSummaryByState { get; set; }
		
		public System.Nullable<System.Int32> TotalTests { get; set; }
	}
	
	public class AggregatedResultsDifference
	{
		
		public string IncreaseInDuration { get; set; }
		
		public System.Nullable<System.Int32> IncreaseInFailures { get; set; }
		
		public System.Nullable<System.Int32> IncreaseInNonImpactedTests { get; set; }
		
		public System.Nullable<System.Int32> IncreaseInOtherTests { get; set; }
		
		public System.Nullable<System.Int32> IncreaseInPassedTests { get; set; }
		
		public System.Nullable<System.Int32> IncreaseInTotalTests { get; set; }
	}
	
	public class AggregatedRunsByOutcome
	{
		
		public System.Nullable<AggregatedRunsByOutcomeOutcome> Outcome { get; set; }
		
		public System.Nullable<System.Int32> RunsCount { get; set; }
	}
	
	public enum AggregatedRunsByOutcomeOutcome
	{
		
		passed = 0,
		
		failed = 1,
		
		notImpacted = 2,
		
		others = 3,
	}
	
	public class BatchResponse
	{
		
		public string Error { get; set; }
		
		public Response[] Responses { get; set; }
		
		public System.Nullable<BatchResponseStatus> Status { get; set; }
	}
	
	public class Response
	{
		
		public string Error { get; set; }
		
		public string Id { get; set; }
		
		public System.Nullable<ResponseStatus> Status { get; set; }
		
		public string Url { get; set; }
	}
	
	public enum ResponseStatus
	{
		
		_continue = 0,
		
		switchingProtocols = 1,
		
		ok = 2,
		
		created = 3,
		
		accepted = 4,
		
		nonAuthoritativeInformation = 5,
		
		noContent = 6,
		
		resetContent = 7,
		
		partialContent = 8,
		
		multipleChoices = 9,
		
		ambiguous = 10,
		
		movedPermanently = 11,
		
		moved = 12,
		
		found = 13,
		
		redirect = 14,
		
		seeOther = 15,
		
		redirectMethod = 16,
		
		notModified = 17,
		
		useProxy = 18,
		
		unused = 19,
		
		temporaryRedirect = 20,
		
		redirectKeepVerb = 21,
		
		badRequest = 22,
		
		unauthorized = 23,
		
		paymentRequired = 24,
		
		forbidden = 25,
		
		notFound = 26,
		
		methodNotAllowed = 27,
		
		notAcceptable = 28,
		
		proxyAuthenticationRequired = 29,
		
		requestTimeout = 30,
		
		conflict = 31,
		
		gone = 32,
		
		lengthRequired = 33,
		
		preconditionFailed = 34,
		
		requestEntityTooLarge = 35,
		
		requestUriTooLong = 36,
		
		unsupportedMediaType = 37,
		
		requestedRangeNotSatisfiable = 38,
		
		expectationFailed = 39,
		
		upgradeRequired = 40,
		
		internalServerError = 41,
		
		notImplemented = 42,
		
		badGateway = 43,
		
		serviceUnavailable = 44,
		
		gatewayTimeout = 45,
		
		httpVersionNotSupported = 46,
	}
	
	public enum BatchResponseStatus
	{
		
		_continue = 0,
		
		switchingProtocols = 1,
		
		ok = 2,
		
		created = 3,
		
		accepted = 4,
		
		nonAuthoritativeInformation = 5,
		
		noContent = 6,
		
		resetContent = 7,
		
		partialContent = 8,
		
		multipleChoices = 9,
		
		ambiguous = 10,
		
		movedPermanently = 11,
		
		moved = 12,
		
		found = 13,
		
		redirect = 14,
		
		seeOther = 15,
		
		redirectMethod = 16,
		
		notModified = 17,
		
		useProxy = 18,
		
		unused = 19,
		
		temporaryRedirect = 20,
		
		redirectKeepVerb = 21,
		
		badRequest = 22,
		
		unauthorized = 23,
		
		paymentRequired = 24,
		
		forbidden = 25,
		
		notFound = 26,
		
		methodNotAllowed = 27,
		
		notAcceptable = 28,
		
		proxyAuthenticationRequired = 29,
		
		requestTimeout = 30,
		
		conflict = 31,
		
		gone = 32,
		
		lengthRequired = 33,
		
		preconditionFailed = 34,
		
		requestEntityTooLarge = 35,
		
		requestUriTooLong = 36,
		
		unsupportedMediaType = 37,
		
		requestedRangeNotSatisfiable = 38,
		
		expectationFailed = 39,
		
		upgradeRequired = 40,
		
		internalServerError = 41,
		
		notImplemented = 42,
		
		badGateway = 43,
		
		serviceUnavailable = 44,
		
		gatewayTimeout = 45,
		
		httpVersionNotSupported = 46,
	}
	
	/// <summary>
	/// BuildConfiguration Details.
	/// </summary>
	public class BuildConfiguration
	{
		
		/// <summary>
		/// Branch name for which build is generated.
		/// </summary>
		public string BranchName { get; set; }
		
		/// <summary>
		/// BuildDefinitionId for build.
		/// </summary>
		public System.Nullable<System.Int32> BuildDefinitionId { get; set; }
		
		/// <summary>
		/// Build system.
		/// </summary>
		public string BuildSystem { get; set; }
		
		/// <summary>
		/// Build Creation Date.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// Build flavor (eg Build/Release).
		/// </summary>
		public string Flavor { get; set; }
		
		/// <summary>
		/// BuildConfiguration Id.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Build Number.
		/// </summary>
		public string Number { get; set; }
		
		/// <summary>
		/// BuildConfiguration Platform.
		/// </summary>
		public string Platform { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Project { get; set; }
		
		/// <summary>
		/// Repository Guid for the Build.
		/// </summary>
		public string RepositoryGuid { get; set; }
		
		/// <summary>
		/// Repository Type (eg. TFSGit).
		/// </summary>
		public string RepositoryType { get; set; }
		
		/// <summary>
		/// Source Version(/first commit) for the build was triggered.
		/// </summary>
		public string SourceVersion { get; set; }
		
		/// <summary>
		/// Target BranchName.
		/// </summary>
		public string TargetBranchName { get; set; }
		
		/// <summary>
		/// Build Uri.
		/// </summary>
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
	/// </summary>
	public class ShallowReference
	{
		
		/// <summary>
		/// ID of the resource
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the linked resource (definition name, controller name, etc.)
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Full http link to the resource
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Build Coverage Detail
	/// </summary>
	public class BuildCoverage
	{
		
		/// <summary>
		/// Code Coverage File Url
		/// </summary>
		public string CodeCoverageFileUrl { get; set; }
		
		/// <summary>
		/// BuildConfiguration Details.
		/// </summary>
		public BuildConfiguration Configuration { get; set; }
		
		/// <summary>
		/// Last Error
		/// </summary>
		public string LastError { get; set; }
		
		/// <summary>
		/// List of Modules
		/// </summary>
		public ModuleCoverage[] Modules { get; set; }
		
		/// <summary>
		/// State
		/// </summary>
		public string State { get; set; }
	}
	
	public class ModuleCoverage
	{
		
		public System.Nullable<System.Int32> BlockCount { get; set; }
		
		public string[] BlockData { get; set; }
		
		/// <summary>
		/// Code Coverage File Url
		/// </summary>
		public string FileUrl { get; set; }
		
		public FunctionCoverage[] Functions { get; set; }
		
		public string Name { get; set; }
		
		public string Signature { get; set; }
		
		public System.Nullable<System.Int32> SignatureAge { get; set; }
		
		public CoverageStatistics Statistics { get; set; }
	}
	
	public class FunctionCoverage
	{
		
		public string Class { get; set; }
		
		public string Name { get; set; }
		
		public string Namespace { get; set; }
		
		public string SourceFile { get; set; }
		
		public CoverageStatistics Statistics { get; set; }
	}
	
	public class CoverageStatistics
	{
		
		public System.Nullable<System.Int32> BlocksCovered { get; set; }
		
		public System.Nullable<System.Int32> BlocksNotCovered { get; set; }
		
		public System.Nullable<System.Int32> LinesCovered { get; set; }
		
		public System.Nullable<System.Int32> LinesNotCovered { get; set; }
		
		public System.Nullable<System.Int32> LinesPartiallyCovered { get; set; }
	}
	
	public class BuildReference2
	{
		
		public string BranchName { get; set; }
		
		public System.Nullable<System.Int32> BuildConfigurationId { get; set; }
		
		public System.Nullable<System.Int32> BuildDefinitionId { get; set; }
		
		public System.Nullable<System.Boolean> BuildDeleted { get; set; }
		
		public string BuildFlavor { get; set; }
		
		public System.Nullable<System.Int32> BuildId { get; set; }
		
		public string BuildNumber { get; set; }
		
		public string BuildPlatform { get; set; }
		
		public string BuildSystem { get; set; }
		
		public string BuildUri { get; set; }
		
		public System.Nullable<System.Int32> CoverageId { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		public string ProjectId { get; set; }
		
		public string RepoId { get; set; }
		
		public string RepoType { get; set; }
		
		public string SourceVersion { get; set; }
	}
	
	public class BulkResultUpdateRequest
	{
		
		public string ProjectName { get; set; }
		
		public ResultUpdateRequest[] Requests { get; set; }
	}
	
	public class ResultUpdateRequest
	{
		
		public TestActionResult[] ActionResultDeletes { get; set; }
		
		public TestActionResult[] ActionResults { get; set; }
		
		public TestResultAttachmentIdentity[] AttachmentDeletes { get; set; }
		
		public TestResultAttachment[] Attachments { get; set; }
		
		public TestResultParameter[] ParameterDeletes { get; set; }
		
		public TestResultParameter[] Parameters { get; set; }
		
		public LegacyTestCaseResult TestCaseResult { get; set; }
		
		public System.Nullable<System.Int32> TestResultId { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
	}
	
	public class TestActionResult
	{
		
		public string ActionPath { get; set; }
		
		public string Comment { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		public System.Nullable<System.DateTimeOffset> DateCompleted { get; set; }
		
		public System.Nullable<System.DateTimeOffset> DateStarted { get; set; }
		
		public System.Nullable<System.Int64> Duration { get; set; }
		
		public string ErrorMessage { get; set; }
		
		public LegacyTestCaseResultIdentifier Id { get; set; }
		
		public System.Nullable<System.Int32> IterationId { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		public string LastUpdatedBy { get; set; }
		
		public string Outcome { get; set; }
		
		public System.Nullable<System.Int32> SharedStepId { get; set; }
		
		public System.Nullable<System.Int32> SharedStepRevision { get; set; }
	}
	
	public class LegacyTestCaseResultIdentifier
	{
		
		public string AreaUri { get; set; }
		
		public System.Nullable<System.Int32> TestResultId { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
	}
	
	public class TestResultAttachmentIdentity
	{
		
		public System.Nullable<System.Int32> AttachmentId { get; set; }
		
		public System.Nullable<System.Int32> SessionId { get; set; }
		
		public System.Nullable<System.Int32> TestResultId { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
	}
	
	public class TestResultAttachment
	{
		
		public string ActionPath { get; set; }
		
		public System.Nullable<TestResultAttachmentAttachmentType> AttachmentType { get; set; }
		
		public string Comment { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		public string DownloadQueryString { get; set; }
		
		public string FileName { get; set; }
		
		public System.Nullable<System.Int32> Id { get; set; }
		
		public System.Nullable<System.Boolean> IsComplete { get; set; }
		
		public System.Nullable<System.Int32> IterationId { get; set; }
		
		public System.Nullable<System.Int64> Length { get; set; }
		
		public System.Nullable<System.Int32> SessionId { get; set; }
		
		public System.Nullable<System.Int32> TestResultId { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
		
		public string TmiRunId { get; set; }
	}
	
	public enum TestResultAttachmentAttachmentType
	{
		
		generalAttachment = 0,
		
		codeCoverage = 1,
		
		consoleLog = 2,
	}
	
	public class TestResultParameter
	{
		
		public string ActionPath { get; set; }
		
		public string[] Actual { get; set; }
		
		public string[] Expected { get; set; }
		
		public System.Nullable<System.Int32> IterationId { get; set; }
		
		public string ParameterName { get; set; }
		
		public System.Nullable<System.Int32> TestResultId { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
	}
	
	public class LegacyTestCaseResult
	{
		
		public System.Nullable<System.Int32> AfnStripId { get; set; }
		
		public System.Nullable<System.Int32> AreaId { get; set; }
		
		public string AreaUri { get; set; }
		
		public string AutomatedTestId { get; set; }
		
		public string AutomatedTestName { get; set; }
		
		public string AutomatedTestStorage { get; set; }
		
		public string AutomatedTestType { get; set; }
		
		public string AutomatedTestTypeId { get; set; }
		
		public string BuildNumber { get; set; }
		
		public LegacyBuildConfiguration BuildReference { get; set; }
		
		public string Comment { get; set; }
		
		public string ComputerName { get; set; }
		
		public System.Nullable<System.Int32> ConfigurationId { get; set; }
		
		public string ConfigurationName { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		public TestExtensionField[] CustomFields { get; set; }
		
		public System.Nullable<System.DateTimeOffset> DateCompleted { get; set; }
		
		public System.Nullable<System.DateTimeOffset> DateStarted { get; set; }
		
		public System.Nullable<System.Int64> Duration { get; set; }
		
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Failing since information of a test result.
		/// </summary>
		public FailingSince FailingSince { get; set; }
		
		public string FailureType { get; set; }
		
		public LegacyTestCaseResultIdentifier Id { get; set; }
		
		public System.Nullable<System.Boolean> IsRerun { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		public string LastUpdatedBy { get; set; }
		
		public string LastUpdatedByName { get; set; }
		
		public string Outcome { get; set; }
		
		public string Owner { get; set; }
		
		public string OwnerName { get; set; }
		
		public string Priority { get; set; }
		
		public LegacyReleaseReference ReleaseReference { get; set; }
		
		public System.Nullable<System.Int32> ResetCount { get; set; }
		
		public System.Nullable<System.Int32> ResolutionStateId { get; set; }
		
		public System.Nullable<LegacyTestCaseResultResultGroupType> ResultGroupType { get; set; }
		
		public System.Nullable<System.Int32> Revision { get; set; }
		
		public string RunBy { get; set; }
		
		public string RunByName { get; set; }
		
		public System.Nullable<System.Int32> SequenceId { get; set; }
		
		public TestExtensionField StackTrace { get; set; }
		
		public string State { get; set; }
		
		public System.Nullable<System.Int32> SubResultCount { get; set; }
		
		public string SuiteName { get; set; }
		
		public string TestCaseArea { get; set; }
		
		public string TestCaseAreaUri { get; set; }
		
		public System.Nullable<System.Int32> TestCaseId { get; set; }
		
		public System.Nullable<System.Int32> TestCaseReferenceId { get; set; }
		
		public System.Nullable<System.Int32> TestCaseRevision { get; set; }
		
		public string TestCaseTitle { get; set; }
		
		public System.Nullable<System.Int32> TestPlanId { get; set; }
		
		public System.Nullable<System.Int32> TestPointId { get; set; }
		
		public System.Nullable<System.Int32> TestResultId { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
		
		public string TestRunTitle { get; set; }
		
		public System.Nullable<System.Int32> TestSuiteId { get; set; }
	}
	
	public class LegacyBuildConfiguration
	{
		
		public string BranchName { get; set; }
		
		public System.Nullable<System.Int32> BuildConfigurationId { get; set; }
		
		public System.Nullable<System.Int32> BuildDefinitionId { get; set; }
		
		public string BuildDefinitionName { get; set; }
		
		public string BuildFlavor { get; set; }
		
		public System.Nullable<System.Int32> BuildId { get; set; }
		
		public string BuildNumber { get; set; }
		
		public string BuildPlatform { get; set; }
		
		public string BuildQuality { get; set; }
		
		public string BuildSystem { get; set; }
		
		public string BuildUri { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CompletedDate { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		public System.Nullable<System.Int32> OldBuildConfigurationId { get; set; }
		
		public string RepositoryId { get; set; }
		
		public string RepositoryType { get; set; }
		
		public string SourceVersion { get; set; }
		
		public string TeamProjectName { get; set; }
	}
	
	public class TestExtensionField
	{
		
		public TestExtensionFieldDetails Field { get; set; }
		
		public string Value { get; set; }
	}
	
	public class TestExtensionFieldDetails
	{
		
		public System.Nullable<System.Int32> Id { get; set; }
		
		public System.Nullable<System.Boolean> IsResultScoped { get; set; }
		
		public System.Nullable<System.Boolean> IsRunScoped { get; set; }
		
		public System.Nullable<System.Boolean> IsSystemField { get; set; }
		
		public string Name { get; set; }
		
		public System.Nullable<TestExtensionFieldDetailsType> Type { get; set; }
	}
	
	public enum TestExtensionFieldDetailsType
	{
		
		bigInt = 0,
		
		binary = 1,
		
		bit = 2,
		
		_char = 3,
		
		dateTime = 4,
		
		_decimal = 5,
		
		_float = 6,
		
		image = 7,
		
		_int = 8,
		
		money = 9,
		
		nChar = 10,
		
		nText = 11,
		
		nVarChar = 12,
		
		real = 13,
		
		uniqueIdentifier = 14,
		
		smallDateTime = 15,
		
		smallInt = 16,
		
		smallMoney = 17,
		
		text = 18,
		
		timestamp = 19,
		
		tinyInt = 20,
		
		varBinary = 21,
		
		varChar = 22,
		
		variant = 23,
		
		xml = 24,
		
		udt = 25,
		
		structured = 26,
		
		date = 27,
		
		time = 28,
		
		dateTime2 = 29,
		
		dateTimeOffset = 30,
	}
	
	/// <summary>
	/// Failing since information of a test result.
	/// </summary>
	public class FailingSince
	{
		
		/// <summary>
		/// Reference to a build.
		/// </summary>
		public BuildReference Build { get; set; }
		
		/// <summary>
		/// Time since failing.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Reference to a release.
		/// </summary>
		public ReleaseReference Release { get; set; }
	}
	
	public class LegacyReleaseReference
	{
		
		public System.Nullable<System.Int32> Attempt { get; set; }
		
		public System.Nullable<System.DateTimeOffset> EnvironmentCreationDate { get; set; }
		
		public System.Nullable<System.Int32> PrimaryArtifactBuildId { get; set; }
		
		public string PrimaryArtifactProjectId { get; set; }
		
		public string PrimaryArtifactType { get; set; }
		
		public System.Nullable<System.DateTimeOffset> ReleaseCreationDate { get; set; }
		
		public System.Nullable<System.Int32> ReleaseDefId { get; set; }
		
		public System.Nullable<System.Int32> ReleaseEnvDefId { get; set; }
		
		public System.Nullable<System.Int32> ReleaseEnvId { get; set; }
		
		public string ReleaseEnvName { get; set; }
		
		public string ReleaseEnvUri { get; set; }
		
		public System.Nullable<System.Int32> ReleaseId { get; set; }
		
		public string ReleaseName { get; set; }
		
		public System.Nullable<System.Int32> ReleaseRefId { get; set; }
		
		public string ReleaseUri { get; set; }
	}
	
	public enum LegacyTestCaseResultResultGroupType
	{
		
		none = 0,
		
		rerun = 1,
		
		dataDriven = 2,
		
		orderedTest = 3,
		
		generic = 4,
	}
	
	/// <summary>
	/// Detail About Clone Operation.
	/// </summary>
	public class CloneOperationInformation
	{
		
		/// <summary>
		/// Clone Statistics Details.
		/// </summary>
		public CloneStatistics CloneStatistics { get; set; }
		
		/// <summary>
		/// If the operation is complete, the DateTime of completion. If operation is not complete, this is DateTime.MaxValue
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CompletionDate { get; set; }
		
		/// <summary>
		/// DateTime when the operation was started
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference DestinationObject { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference DestinationPlan { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference DestinationProject { get; set; }
		
		/// <summary>
		/// If the operation has Failed, Message contains the reason for failure. Null otherwise.
		/// </summary>
		public string Message { get; set; }
		
		/// <summary>
		/// The ID of the operation
		/// </summary>
		public System.Nullable<System.Int32> OpId { get; set; }
		
		/// <summary>
		/// The type of the object generated as a result of the Clone operation
		/// </summary>
		public System.Nullable<CloneOperationInformationResultObjectType> ResultObjectType { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference SourceObject { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference SourcePlan { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference SourceProject { get; set; }
		
		/// <summary>
		/// Current state of the operation. When State reaches Succeeded or Failed, the operation is complete
		/// </summary>
		public System.Nullable<CloneOperationInformationState> State { get; set; }
		
		/// <summary>
		/// Url for getting the clone information
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Clone Statistics Details.
	/// </summary>
	public class CloneStatistics
	{
		
		/// <summary>
		/// Number of requirements cloned so far.
		/// </summary>
		public System.Nullable<System.Int32> ClonedRequirementsCount { get; set; }
		
		/// <summary>
		/// Number of shared steps cloned so far.
		/// </summary>
		public System.Nullable<System.Int32> ClonedSharedStepsCount { get; set; }
		
		/// <summary>
		/// Number of test cases cloned so far
		/// </summary>
		public System.Nullable<System.Int32> ClonedTestCasesCount { get; set; }
		
		/// <summary>
		/// Total number of requirements to be cloned
		/// </summary>
		public System.Nullable<System.Int32> TotalRequirementsCount { get; set; }
		
		/// <summary>
		/// Total number of test cases to be cloned
		/// </summary>
		public System.Nullable<System.Int32> TotalTestCasesCount { get; set; }
	}
	
	public enum CloneOperationInformationResultObjectType
	{
		
		testSuite = 0,
		
		testPlan = 1,
	}
	
	public enum CloneOperationInformationState
	{
		
		failed = 0,
		
		inProgress = 1,
		
		queued = 2,
		
		succeeded = 3,
	}
	
	/// <summary>
	/// Clone options for cloning the test suite.
	/// </summary>
	public class CloneOptions
	{
		
		/// <summary>
		/// If set to true requirements will be cloned
		/// </summary>
		public System.Nullable<System.Boolean> CloneRequirements { get; set; }
		
		/// <summary>
		/// copy all suites from a source plan
		/// </summary>
		public System.Nullable<System.Boolean> CopyAllSuites { get; set; }
		
		/// <summary>
		/// copy ancestor hierarchy
		/// </summary>
		public System.Nullable<System.Boolean> CopyAncestorHierarchy { get; set; }
		
		/// <summary>
		/// Name of the workitem type of the clone
		/// </summary>
		public string DestinationWorkItemType { get; set; }
		
		/// <summary>
		/// Key value pairs where the key value is overridden by the value.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> OverrideParameters { get; set; }
		
		/// <summary>
		/// Comment on the link that will link the new clone  test case to the original Set null for no comment
		/// </summary>
		public string RelatedLinkComment { get; set; }
	}
	
	/// <summary>
	/// Represents the build configuration (platform, flavor) and coverage data for the build
	/// </summary>
	public class CodeCoverageData
	{
		
		/// <summary>
		/// Flavor of build for which data is retrieved/published
		/// </summary>
		public string BuildFlavor { get; set; }
		
		/// <summary>
		/// Platform of build for which data is retrieved/published
		/// </summary>
		public string BuildPlatform { get; set; }
		
		/// <summary>
		/// List of coverage data for the build
		/// </summary>
		public CodeCoverageStatistics[] CoverageStats { get; set; }
	}
	
	/// <summary>
	/// Represents the code coverage statistics for a particular coverage label (modules, statements, blocks, etc.)
	/// </summary>
	public class CodeCoverageStatistics
	{
		
		/// <summary>
		/// Covered units
		/// </summary>
		public System.Nullable<System.Int32> Covered { get; set; }
		
		/// <summary>
		/// Delta of coverage
		/// </summary>
		public System.Nullable<System.Double> Delta { get; set; }
		
		/// <summary>
		/// Is delta valid
		/// </summary>
		public System.Nullable<System.Boolean> IsDeltaAvailable { get; set; }
		
		/// <summary>
		/// Label of coverage data ("Blocks", "Statements", "Modules", etc.)
		/// </summary>
		public string Label { get; set; }
		
		/// <summary>
		/// Position of label
		/// </summary>
		public System.Nullable<System.Int32> Position { get; set; }
		
		/// <summary>
		/// Total units
		/// </summary>
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	/// <summary>
	/// Represents the code coverage summary results Used to publish or retrieve code coverage summary against a build
	/// </summary>
	public class CodeCoverageSummary
	{
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Build { get; set; }
		
		/// <summary>
		/// List of coverage data and details for the build
		/// </summary>
		public CodeCoverageData[] CoverageData { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference DeltaBuild { get; set; }
		
		/// <summary>
		/// Uri of build against which difference in coverage is computed
		/// </summary>
		public System.Nullable<CodeCoverageSummaryStatus> Status { get; set; }
	}
	
	public enum CodeCoverageSummaryStatus
	{
		
		none = 0,
		
		inProgress = 1,
		
		completed = 2,
		
		finalized = 3,
		
		pending = 4,
		
		updateRequestQueued = 5,
	}
	
	public class CodeCoverageSummary2
	{
		
		public System.Nullable<System.Int32> BuildConfigurationId { get; set; }
		
		public System.Nullable<System.Int32> Covered { get; set; }
		
		public string Label { get; set; }
		
		public System.Nullable<System.Int32> Position { get; set; }
		
		public string ProjectId { get; set; }
		
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public class Coverage2
	{
		
		public System.Nullable<System.Int32> CoverageId { get; set; }
		
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		public string LastError { get; set; }
		
		public string State { get; set; }
	}
	
	public class CreateTestMessageLogEntryRequest
	{
		
		public string ProjectName { get; set; }
		
		public TestMessageLogEntry[] TestMessageLogEntry { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
	}
	
	public class TestMessageLogEntry
	{
		
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		public System.Nullable<System.Int32> EntryId { get; set; }
		
		public string LogLevel { get; set; }
		
		public string LogUser { get; set; }
		
		public string LogUserName { get; set; }
		
		public string Message { get; set; }
		
		public System.Nullable<System.Int32> TestMessageLogId { get; set; }
	}
	
	public class CreateTestResultsRequest
	{
		
		public string ProjectName { get; set; }
		
		public LegacyTestCaseResult[] Results { get; set; }
	}
	
	public class CreateTestRunRequest
	{
		
		public string ProjectName { get; set; }
		
		public LegacyTestCaseResult[] Results { get; set; }
		
		public LegacyTestRun TestRun { get; set; }
		
		public LegacyTestSettings TestSettings { get; set; }
	}
	
	public class LegacyTestRun
	{
		
		public System.Nullable<System.Int32> BugsCount { get; set; }
		
		public System.Nullable<System.Int32> BuildConfigurationId { get; set; }
		
		public string BuildFlavor { get; set; }
		
		public string BuildNumber { get; set; }
		
		public string BuildPlatform { get; set; }
		
		public LegacyBuildConfiguration BuildReference { get; set; }
		
		public string BuildUri { get; set; }
		
		public string Comment { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CompleteDate { get; set; }
		
		public int[] ConfigurationIds { get; set; }
		
		public string Controller { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		public string CsmContent { get; set; }
		
		public string CsmParameters { get; set; }
		
		public TestExtensionField[] CustomFields { get; set; }
		
		public string DropLocation { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference DtlAutEnvironment { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference DtlTestEnvironment { get; set; }
		
		public System.Nullable<System.DateTimeOffset> DueDate { get; set; }
		
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// This class is used to provide the filters used for discovery
		/// </summary>
		public RunFilter Filter { get; set; }
		
		public System.Nullable<System.Int32> IncompleteTests { get; set; }
		
		public System.Nullable<System.Boolean> IsAutomated { get; set; }
		
		public System.Nullable<System.Boolean> IsBvt { get; set; }
		
		public string Iteration { get; set; }
		
		public System.Nullable<System.Int32> IterationId { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		public string LastUpdatedBy { get; set; }
		
		public string LastUpdatedByName { get; set; }
		
		public string LegacySharePath { get; set; }
		
		public System.Nullable<System.Int32> NotApplicableTests { get; set; }
		
		public string Owner { get; set; }
		
		public string OwnerName { get; set; }
		
		public System.Nullable<System.Int32> PassedTests { get; set; }
		
		public string PostProcessState { get; set; }
		
		public System.Nullable<System.Int32> PublicTestSettingsId { get; set; }
		
		public string ReleaseEnvironmentUri { get; set; }
		
		public LegacyReleaseReference ReleaseReference { get; set; }
		
		public string ReleaseUri { get; set; }
		
		public System.Nullable<System.Int32> Revision { get; set; }
		
		public string[] RowVersion { get; set; }
		
		public System.Nullable<System.Boolean> RunHasDtlEnvironment { get; set; }
		
		public string RunTimeout { get; set; }
		
		public string ServiceVersion { get; set; }
		
		public string SourceWorkflow { get; set; }
		
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		public string State { get; set; }
		
		public string SubscriptionName { get; set; }
		
		public string Substate { get; set; }
		
		public string TeamProject { get; set; }
		
		public string TeamProjectUri { get; set; }
		
		public string TestConfigurationsMapping { get; set; }
		
		public string TestEnvironmentId { get; set; }
		
		public TestMessageLogDetails[] TestMessageLogEntries { get; set; }
		
		public System.Nullable<System.Int32> TestMessageLogId { get; set; }
		
		public System.Nullable<System.Int32> TestPlanId { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
		
		public LegacyTestRunStatistic[] TestRunStatistics { get; set; }
		
		public System.Nullable<System.Int32> TestSettingsId { get; set; }
		
		public string Title { get; set; }
		
		public System.Nullable<System.Int32> TotalTests { get; set; }
		
		public string Type { get; set; }
		
		public System.Nullable<System.Int32> UnanalyzedTests { get; set; }
		
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// This class is used to provide the filters used for discovery
	/// </summary>
	public class RunFilter
	{
		
		/// <summary>
		/// filter for the test case sources (test containers)
		/// </summary>
		public string SourceFilter { get; set; }
		
		/// <summary>
		/// filter for the test cases
		/// </summary>
		public string TestCaseFilter { get; set; }
	}
	
	/// <summary>
	/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
	/// </summary>
	public class TestMessageLogDetails
	{
		
		/// <summary>
		/// Date when the resource is created
		/// </summary>
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		/// <summary>
		/// Id of the resource
		/// </summary>
		public System.Nullable<System.Int32> EntryId { get; set; }
		
		/// <summary>
		/// Message of the resource
		/// </summary>
		public string Message { get; set; }
	}
	
	public class LegacyTestRunStatistic
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
		
		public string Outcome { get; set; }
		
		/// <summary>
		/// Test Resolution State Details.
		/// </summary>
		public TestResolutionState ResolutionState { get; set; }
		
		public string State { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
	}
	
	/// <summary>
	/// Test Resolution State Details.
	/// </summary>
	public class TestResolutionState
	{
		
		/// <summary>
		/// Test Resolution state Id.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Test Resolution State Name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Project { get; set; }
	}
	
	public class LegacyTestSettings
	{
		
		public System.Nullable<System.Int32> AreaId { get; set; }
		
		public string AreaPath { get; set; }
		
		public string CreatedBy { get; set; }
		
		public string CreatedByName { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		public string Description { get; set; }
		
		public System.Nullable<System.Int32> Id { get; set; }
		
		public System.Nullable<System.Boolean> IsAutomated { get; set; }
		
		public System.Nullable<System.Boolean> IsPublic { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		public string LastUpdatedBy { get; set; }
		
		public string LastUpdatedByName { get; set; }
		
		public TestSettingsMachineRole[] MachineRoles { get; set; }
		
		public string Name { get; set; }
		
		public System.Nullable<System.Int32> Revision { get; set; }
		
		public string Settings { get; set; }
		
		public string TeamProjectUri { get; set; }
	}
	
	public class TestSettingsMachineRole
	{
		
		public System.Nullable<System.Boolean> IsExecution { get; set; }
		
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A custom field information. Allowed Key : Value pairs - ( AttemptId: int value, IsTestResultFlaky: bool)
	/// </summary>
	public class CustomTestField
	{
		
		/// <summary>
		/// Field Name.
		/// </summary>
		public string FieldName { get; set; }
		
		/// <summary>
		/// Field value.
		/// </summary>
		public string Value { get; set; }
	}
	
	public class CustomTestFieldDefinition
	{
		
		public System.Nullable<System.Int32> FieldId { get; set; }
		
		public string FieldName { get; set; }
		
		public System.Nullable<CustomTestFieldDefinitionFieldType> FieldType { get; set; }
		
		public System.Nullable<CustomTestFieldDefinitionScope> Scope { get; set; }
	}
	
	public enum CustomTestFieldDefinitionFieldType
	{
		
		bit = 0,
		
		dateTime = 1,
		
		_int = 2,
		
		_float = 3,
		
		_string = 4,
		
		guid = 5,
	}
	
	public enum CustomTestFieldDefinitionScope
	{
		
		none = 0,
		
		testRun = 1,
		
		testResult = 2,
		
		system = 3,
		
		all = 4,
	}
	
	public class DatedTestFieldData
	{
		
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		public TestFieldData Value { get; set; }
	}
	
	public class TestFieldData
	{
		
		public System.Collections.Generic.Dictionary<string, object> Dimensions { get; set; }
		
		public System.Nullable<System.Int64> Measure { get; set; }
	}
	
	public class DefaultAfnStripBinding
	{
		
		public System.Nullable<System.Int32> TestCaseId { get; set; }
		
		public System.Nullable<System.Int32> TestResultId { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
	}
	
	public class DeleteTestRunRequest
	{
		
		public string ProjectName { get; set; }
		
		public int[] TestRunIds { get; set; }
	}
	
	public class DownloadAttachmentsRequest
	{
		
		public int[] Ids { get; set; }
		
		public int[] Lengths { get; set; }
	}
	
	/// <summary>
	/// This is a temporary class to provide the details for the test run environment.
	/// </summary>
	public class DtlEnvironmentDetails
	{
		
		public string CsmContent { get; set; }
		
		public string CsmParameters { get; set; }
		
		public string SubscriptionName { get; set; }
	}
	
	public class FetchTestResultsRequest
	{
		
		public TestCaseResultIdAndRev[] IdAndRevs { get; set; }
		
		public System.Nullable<System.Boolean> IncludeActionResults { get; set; }
		
		public string ProjectName { get; set; }
	}
	
	public class TestCaseResultIdAndRev
	{
		
		public LegacyTestCaseResultIdentifier Id { get; set; }
		
		public System.Nullable<System.Int32> Revision { get; set; }
	}
	
	public class FetchTestResultsResponse
	{
		
		public TestActionResult[] ActionResults { get; set; }
		
		public TestResultAttachment[] Attachments { get; set; }
		
		public LegacyTestCaseResultIdentifier[] DeletedIds { get; set; }
		
		public LegacyTestCaseResult[] Results { get; set; }
		
		public TestResultParameter[] TestParameters { get; set; }
	}
	
	public class FieldDetailsForTestResults
	{
		
		/// <summary>
		/// Group by field name
		/// </summary>
		public string FieldName { get; set; }
		
		/// <summary>
		/// Group by field values
		/// </summary>
		public string[] GroupsForField { get; set; }
	}
	
	public class FileCoverage
	{
		
		/// <summary>
		/// List of line blocks along with their coverage status
		/// </summary>
		public LineBlockCoverage[] LineBlocksCoverage { get; set; }
		
		/// <summary>
		/// File path for which coverage information is sought for
		/// </summary>
		public string Path { get; set; }
	}
	
	public class LineBlockCoverage
	{
		
		/// <summary>
		/// End of line block
		/// </summary>
		public System.Nullable<System.Int32> End { get; set; }
		
		/// <summary>
		/// Start of line block
		/// </summary>
		public System.Nullable<System.Int32> Start { get; set; }
		
		/// <summary>
		/// Coverage status. Covered: 0, NotCovered: 1,  PartiallyCovered: 2
		/// </summary>
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	public class FileCoverageRequest
	{
		
		public string FilePath { get; set; }
		
		public System.Nullable<System.Int32> PullRequestBaseIterationId { get; set; }
		
		public System.Nullable<System.Int32> PullRequestId { get; set; }
		
		public System.Nullable<System.Int32> PullRequestIterationId { get; set; }
		
		public string RepoId { get; set; }
	}
	
	public class FilterPointQuery
	{
		
		public System.Nullable<System.Int32> PlanId { get; set; }
		
		public int[] PointIds { get; set; }
		
		public string[] PointOutcome { get; set; }
		
		public string[] ResultState { get; set; }
	}
	
	public class FlakyDetection
	{
		
		public FlakyDetectionPipelines FlakyDetectionPipelines { get; set; }
		
		/// <summary>
		/// FlakyDetectionType defines Detection type i.e. 1. System or 2. Manual.
		/// </summary>
		public System.Nullable<FlakyDetectionFlakyDetectionType> FlakyDetectionType { get; set; }
	}
	
	public class FlakyDetectionPipelines
	{
		
		/// <summary>
		/// AllowedPipelines - List All Pipelines allowed for detection.
		/// </summary>
		public int[] AllowedPipelines { get; set; }
		
		/// <summary>
		/// IsAllPipelinesAllowed if users configure all system's pipelines.
		/// </summary>
		public System.Nullable<System.Boolean> IsAllPipelinesAllowed { get; set; }
	}
	
	public enum FlakyDetectionFlakyDetectionType
	{
		
		custom = 0,
		
		system = 1,
	}
	
	public class FlakySettings
	{
		
		public FlakyDetection FlakyDetection { get; set; }
		
		/// <summary>
		/// FlakyInSummaryReport defines flaky data should show in summary report or not.
		/// </summary>
		public System.Nullable<System.Boolean> FlakyInSummaryReport { get; set; }
		
		/// <summary>
		/// IsFlakyBugCreated defines if there is any bug that has been created with flaky testresult.
		/// </summary>
		public System.Nullable<System.Boolean> IsFlakyBugCreated { get; set; }
		
		/// <summary>
		/// ManualMarkUnmarkFlaky defines manual marking unmarking of flaky testcase.
		/// </summary>
		public System.Nullable<System.Boolean> ManualMarkUnmarkFlaky { get; set; }
	}
	
	public class FunctionCoverage2
	{
		
		public System.Nullable<System.Int32> BlocksCovered { get; set; }
		
		public System.Nullable<System.Int32> BlocksNotCovered { get; set; }
		
		public string Class { get; set; }
		
		public System.Nullable<System.Int32> CoverageId { get; set; }
		
		public System.Nullable<System.Int32> FunctionId { get; set; }
		
		public System.Nullable<System.Int32> LinesCovered { get; set; }
		
		public System.Nullable<System.Int32> LinesNotCovered { get; set; }
		
		public System.Nullable<System.Int32> LinesPartiallyCovered { get; set; }
		
		public System.Nullable<System.Int32> ModuleId { get; set; }
		
		public string Name { get; set; }
		
		public string Namespace { get; set; }
		
		public string SourceFile { get; set; }
	}
	
	public class GraphSubjectBase
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
		/// </summary>
		public string Descriptor { get; set; }
		
		/// <summary>
		/// This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// This url is the full route to the source resource of this graph subject.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// The class to represent a collection of REST reference links.
	/// </summary>
	public class ReferenceLinks
	{
		
		/// <summary>
		/// The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Links { get; set; }
	}
	
	public class HttpPostedTcmAttachment
	{
		
		public string AttachmentContent { get; set; }
		
		public System.Nullable<System.Int32> ContentLength { get; set; }
		
		public string ContentType { get; set; }
		
		public string FileName { get; set; }
	}
	
	public class IdentityRef
	{
		
		/// <summary>
		/// Deprecated - Can be retrieved by querying the Graph user referenced in the "self" entry of the IdentityRef "_links" dictionary
		/// </summary>
		public string DirectoryAlias { get; set; }
		
		public string Id { get; set; }
		
		/// <summary>
		/// Deprecated - Available in the "avatar" entry of the IdentityRef "_links" dictionary
		/// </summary>
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Deprecated - Can be retrieved by querying the Graph membership state referenced in the "membershipState" entry of the GraphUser "_links" dictionary
		/// </summary>
		public System.Nullable<System.Boolean> Inactive { get; set; }
		
		/// <summary>
		/// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsAadUserType/Descriptor.IsAadGroupType)
		/// </summary>
		public System.Nullable<System.Boolean> IsAadIdentity { get; set; }
		
		/// <summary>
		/// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsGroupType)
		/// </summary>
		public System.Nullable<System.Boolean> IsContainer { get; set; }
		
		public System.Nullable<System.Boolean> IsDeletedInOrigin { get; set; }
		
		/// <summary>
		/// Deprecated - not in use in most preexisting implementations of ToIdentityRef
		/// </summary>
		public string ProfileUrl { get; set; }
		
		/// <summary>
		/// Deprecated - use Domain+PrincipalName instead
		/// </summary>
		public string UniqueName { get; set; }
	}
	
	/// <summary>
	/// Last result details of test point.
	/// </summary>
	public class LastResultDetails
	{
		
		/// <summary>
		/// CompletedDate of LastResult.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> DateCompleted { get; set; }
		
		/// <summary>
		/// Duration of LastResult.
		/// </summary>
		public System.Nullable<System.Int64> Duration { get; set; }
		
		public IdentityRef RunBy { get; set; }
	}
	
	public class LinkedWorkItemsQuery
	{
		
		public string[] AutomatedTestNames { get; set; }
		
		public System.Nullable<System.Int32> PlanId { get; set; }
		
		public int[] PointIds { get; set; }
		
		public int[] SuiteIds { get; set; }
		
		public int[] TestCaseIds { get; set; }
		
		public string WorkItemCategory { get; set; }
	}
	
	public class LinkedWorkItemsQueryResult
	{
		
		public string AutomatedTestName { get; set; }
		
		public System.Nullable<System.Int32> PlanId { get; set; }
		
		public System.Nullable<System.Int32> PointId { get; set; }
		
		public System.Nullable<System.Int32> SuiteId { get; set; }
		
		public System.Nullable<System.Int32> TestCaseId { get; set; }
		
		public WorkItemReference[] WorkItems { get; set; }
	}
	
	/// <summary>
	/// WorkItem reference Details.
	/// </summary>
	public class WorkItemReference
	{
		
		/// <summary>
		/// WorkItem Id.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// WorkItem Name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// WorkItem Type.
		/// </summary>
		public string Type { get; set; }
		
		/// <summary>
		/// WorkItem Url. Valid Values : (Bug, Task, User Story, Test Case)
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// WorkItem WebUrl.
		/// </summary>
		public string WebUrl { get; set; }
	}
	
	public class ModuleCoverage2
	{
		
		public System.Nullable<System.Int32> BlockCount { get; set; }
		
		public string[] BlockData { get; set; }
		
		public System.Nullable<System.Int32> BlockDataLength { get; set; }
		
		public System.Nullable<System.Int32> BlocksCovered { get; set; }
		
		public System.Nullable<System.Int32> BlocksNotCovered { get; set; }
		
		public string CoverageFileUrl { get; set; }
		
		public System.Nullable<System.Int32> CoverageId { get; set; }
		
		public System.Nullable<System.Int32> LinesCovered { get; set; }
		
		public System.Nullable<System.Int32> LinesNotCovered { get; set; }
		
		public System.Nullable<System.Int32> LinesPartiallyCovered { get; set; }
		
		public System.Nullable<System.Int32> ModuleId { get; set; }
		
		public string Name { get; set; }
		
		public string Signature { get; set; }
		
		public System.Nullable<System.Int32> SignatureAge { get; set; }
	}
	
	/// <summary>
	/// Name value pair
	/// </summary>
	public class NameValuePair
	{
		
		/// <summary>
		/// Name
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Value
		/// </summary>
		public string Value { get; set; }
	}
	
	public class NewTestResultLoggingSettings
	{
		
		/// <summary>
		/// LogNewTests defines whether or not we will record new test cases coming into the system
		/// </summary>
		public System.Nullable<System.Boolean> LogNewTests { get; set; }
	}
	
	/// <summary>
	/// Test summary of a pipeline instance.
	/// </summary>
	public class PipelineTestMetrics
	{
		
		/// <summary>
		/// Pipeline reference
		/// </summary>
		public PipelineReference CurrentContext { get; set; }
		
		/// <summary>
		/// Results insights for runs with state completed and NeedInvestigation.
		/// </summary>
		public ResultsAnalysis ResultsAnalysis { get; set; }
		
		/// <summary>
		/// Summary of results for a pipeline instance.
		/// </summary>
		public ResultSummary ResultSummary { get; set; }
		
		/// <summary>
		/// Summary of runs for a pipeline instance.
		/// </summary>
		public RunSummary RunSummary { get; set; }
		
		/// <summary>
		/// Summary at child node.
		/// </summary>
		public PipelineTestMetrics[] SummaryAtChild { get; set; }
	}
	
	/// <summary>
	/// Results insights for runs with state completed and NeedInvestigation.
	/// </summary>
	public class ResultsAnalysis
	{
		
		/// <summary>
		/// Pipeline reference
		/// </summary>
		public PipelineReference PreviousContext { get; set; }
		
		public AggregatedResultsDifference ResultsDifference { get; set; }
		
		public TestResultFailuresAnalysis TestFailuresAnalysis { get; set; }
	}
	
	public class TestResultFailuresAnalysis
	{
		
		public TestFailureDetails ExistingFailures { get; set; }
		
		public TestFailureDetails FixedTests { get; set; }
		
		public TestFailureDetails NewFailures { get; set; }
	}
	
	public class TestFailureDetails
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
		
		public TestCaseResultIdentifier[] TestResults { get; set; }
	}
	
	/// <summary>
	/// Reference to a test result.
	/// </summary>
	public class TestCaseResultIdentifier
	{
		
		/// <summary>
		/// Test result ID.
		/// </summary>
		public System.Nullable<System.Int32> TestResultId { get; set; }
		
		/// <summary>
		/// Test run ID.
		/// </summary>
		public System.Nullable<System.Int32> TestRunId { get; set; }
	}
	
	/// <summary>
	/// Summary of results for a pipeline instance.
	/// </summary>
	public class ResultSummary
	{
		
		/// <summary>
		/// Result summary of pipeline, group by TestRun state.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, ResultsSummaryByOutcome> ResultSummaryByRunState { get; set; }
	}
	
	/// <summary>
	/// Result summary by the outcome of test results.
	/// </summary>
	public class ResultsSummaryByOutcome
	{
		
		/// <summary>
		/// Aggregated result details for each test result outcome.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, AggregatedResultDetailsByOutcome> AggregatedResultDetailsByOutcome { get; set; }
		
		/// <summary>
		/// Time taken by results.
		/// </summary>
		public string Duration { get; set; }
		
		/// <summary>
		/// Total number of not reported test results.
		/// </summary>
		public System.Nullable<System.Int32> NotReportedTestCount { get; set; }
		
		/// <summary>
		/// Total number of test results. (It includes NotImpacted test results as well which need to exclude while calculating pass/fail test result percentage).
		/// </summary>
		public System.Nullable<System.Int32> TotalTestCount { get; set; }
	}
	
	/// <summary>
	/// Summary of runs for a pipeline instance.
	/// </summary>
	public class RunSummary
	{
		
		/// <summary>
		/// Total time taken by runs with state completed and NeedInvestigation.
		/// </summary>
		public string Duration { get; set; }
		
		/// <summary>
		/// NoConfig runs count.
		/// </summary>
		public System.Nullable<System.Int32> NoConfigRunsCount { get; set; }
		
		/// <summary>
		/// Runs count by outcome for runs with state completed and NeedInvestigation runs.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, int> RunSummaryByOutcome { get; set; }
		
		/// <summary>
		/// Runs count by state.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, int> RunSummaryByState { get; set; }
		
		/// <summary>
		/// Total runs count.
		/// </summary>
		public System.Nullable<System.Int32> TotalRunsCount { get; set; }
	}
	
	/// <summary>
	/// A model class used for creating and updating test plans.
	/// </summary>
	public class PlanUpdateModel
	{
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Area { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Build { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference BuildDefinition { get; set; }
		
		/// <summary>
		/// IDs of configurations to be applied when new test suites and test cases are added to the test plan.
		/// </summary>
		public int[] ConfigurationIds { get; set; }
		
		/// <summary>
		/// Description of the test plan.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// End date for the test plan.
		/// </summary>
		public string EndDate { get; set; }
		
		/// <summary>
		/// Iteration path assigned to the test plan. This indicates when the target iteration by which the testing in this plan is supposed to be complete and the product is ready to be released.
		/// </summary>
		public string Iteration { get; set; }
		
		/// <summary>
		/// Name of the test plan.
		/// </summary>
		public string Name { get; set; }
		
		public IdentityRef Owner { get; set; }
		
		/// <summary>
		/// Reference to release environment resource.
		/// </summary>
		public ReleaseEnvironmentDefinitionReference ReleaseEnvironmentDefinition { get; set; }
		
		/// <summary>
		/// Start date for the test plan.
		/// </summary>
		public string StartDate { get; set; }
		
		/// <summary>
		/// State of the test plan.
		/// </summary>
		public string State { get; set; }
		
		/// <summary>
		/// Test outcome settings
		/// </summary>
		public TestOutcomeSettings TestOutcomeSettings { get; set; }
	}
	
	/// <summary>
	/// Reference to release environment resource.
	/// </summary>
	public class ReleaseEnvironmentDefinitionReference
	{
		
		/// <summary>
		/// ID of the release definition that contains the release environment definition.
		/// </summary>
		public System.Nullable<System.Int32> DefinitionId { get; set; }
		
		/// <summary>
		/// ID of the release environment definition.
		/// </summary>
		public System.Nullable<System.Int32> EnvironmentDefinitionId { get; set; }
	}
	
	/// <summary>
	/// Test outcome settings
	/// </summary>
	public class TestOutcomeSettings
	{
		
		/// <summary>
		/// Value to configure how test outcomes for the same tests across suites are shown
		/// </summary>
		public System.Nullable<System.Boolean> SyncOutcomeAcrossSuites { get; set; }
	}
	
	/// <summary>
	/// Adding test cases to a suite creates one of more test points based on the default configurations and testers assigned to the test suite. PointAssignment is the list of test points that were created for each of the test cases that were added to the test suite.
	/// </summary>
	public class PointAssignment
	{
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Configuration { get; set; }
		
		public IdentityRef Tester { get; set; }
	}
	
	public class PointLastResult
	{
		
		public System.Nullable<System.DateTimeOffset> LastUpdatedDate { get; set; }
		
		public System.Nullable<System.Int32> PointId { get; set; }
	}
	
	/// <summary>
	/// Filter class for test point.
	/// </summary>
	public class PointsFilter
	{
		
		/// <summary>
		/// List of Configurations for filtering.
		/// </summary>
		public string[] ConfigurationNames { get; set; }
		
		/// <summary>
		/// List of test case id for filtering.
		/// </summary>
		public int[] TestcaseIds { get; set; }
		
		/// <summary>
		/// List of tester for filtering.
		/// </summary>
		public IdentityRef[] Testers { get; set; }
	}
	
	public class PointsReference2
	{
		
		public System.Nullable<System.Int32> PlanId { get; set; }
		
		public System.Nullable<System.Int32> PointId { get; set; }
	}
	
	public class PointsResults2
	{
		
		public System.Nullable<System.Int32> ChangeNumber { get; set; }
		
		public string LastFailureType { get; set; }
		
		public System.Nullable<System.Int32> LastResolutionStateId { get; set; }
		
		public string LastResultOutcome { get; set; }
		
		public string LastResultState { get; set; }
		
		public System.Nullable<System.Int32> LastTestResultId { get; set; }
		
		public System.Nullable<System.Int32> LastTestRunId { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		public string LastUpdatedBy { get; set; }
		
		public System.Nullable<System.Int32> PlanId { get; set; }
		
		public System.Nullable<System.Int32> PointId { get; set; }
	}
	
	/// <summary>
	/// Model to update test point.
	/// </summary>
	public class PointUpdateModel
	{
		
		/// <summary>
		/// Outcome to update.
		/// </summary>
		public string Outcome { get; set; }
		
		/// <summary>
		/// Reset test point to active.
		/// </summary>
		public System.Nullable<System.Boolean> ResetToActive { get; set; }
		
		public IdentityRef Tester { get; set; }
	}
	
	/// <summary>
	/// Test point workitem property.
	/// </summary>
	public class PointWorkItemProperty
	{
		
		/// <summary>
		/// key value pair of test point work item property.
		/// </summary>
		public string WorkItem { get; set; }
	}
	
	/// <summary>
	/// The class to represent a Generic store for test session data.
	/// </summary>
	public class PropertyBag
	{
		
		/// <summary>
		/// Generic store for test session data
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> Bag { get; set; }
	}
	
	public class QueryByPointRequest
	{
		
		public string ProjectName { get; set; }
		
		public System.Nullable<System.Int32> TestPlanId { get; set; }
		
		public System.Nullable<System.Int32> TestPointId { get; set; }
	}
	
	public class QueryByRunRequest
	{
		
		public System.Nullable<System.Boolean> IncludeActionResults { get; set; }
		
		public string Outcome { get; set; }
		
		public string Owner { get; set; }
		
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		public string ProjectName { get; set; }
		
		public string State { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
	}
	
	public class QueryModel
	{
		
		public string Query { get; set; }
	}
	
	public class QueryTestActionResultRequest
	{
		
		public LegacyTestCaseResultIdentifier Identifier { get; set; }
		
		public string ProjectName { get; set; }
	}
	
	public class QueryTestActionResultResponse
	{
		
		public TestActionResult[] TestActionResults { get; set; }
		
		public TestResultAttachment[] TestAttachments { get; set; }
		
		public TestResultParameter[] TestResultParameters { get; set; }
	}
	
	public class QueryTestMessageLogEntryRequest
	{
		
		public string ProjectName { get; set; }
		
		public System.Nullable<System.Int32> TestMessageLogId { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
	}
	
	public class QueryTestRuns2Request
	{
		
		public System.Nullable<System.Boolean> IncludeStatistics { get; set; }
		
		public ResultsStoreQuery Query { get; set; }
	}
	
	public class ResultsStoreQuery
	{
		
		public System.Nullable<System.Boolean> DayPrecision { get; set; }
		
		public string QueryText { get; set; }
		
		public string TeamProjectName { get; set; }
		
		public string TimeZone { get; set; }
	}
	
	public class QueryTestRunsRequest
	{
		
		public string BuildUri { get; set; }
		
		public string Owner { get; set; }
		
		public System.Nullable<System.Int32> PlanId { get; set; }
		
		public System.Nullable<System.Int32> Skip { get; set; }
		
		public string TeamProjectName { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
		
		public System.Nullable<System.Int32> Top { get; set; }
	}
	
	public class QueryTestRunStatsRequest
	{
		
		public string TeamProjectName { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
	}
	
	public class ReleaseReference2
	{
		
		public System.Nullable<System.Int32> Attempt { get; set; }
		
		public System.Nullable<System.DateTimeOffset> EnvironmentCreationDate { get; set; }
		
		public string ProjectId { get; set; }
		
		public System.Nullable<System.DateTimeOffset> ReleaseCreationDate { get; set; }
		
		public System.Nullable<System.Int32> ReleaseDefId { get; set; }
		
		public System.Nullable<System.Int32> ReleaseEnvDefId { get; set; }
		
		public System.Nullable<System.Int32> ReleaseEnvId { get; set; }
		
		public string ReleaseEnvName { get; set; }
		
		public string ReleaseEnvUri { get; set; }
		
		public System.Nullable<System.Int32> ReleaseId { get; set; }
		
		public string ReleaseName { get; set; }
		
		public System.Nullable<System.Int32> ReleaseRefId { get; set; }
		
		public string ReleaseUri { get; set; }
	}
	
	public class RequirementsToTestsMapping2
	{
		
		public string CreatedBy { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		public string DeletedBy { get; set; }
		
		public System.Nullable<System.DateTimeOffset> DeletionDate { get; set; }
		
		public System.Nullable<System.Boolean> IsMigratedToWIT { get; set; }
		
		public string ProjectId { get; set; }
		
		public System.Nullable<System.Int32> TestMetadataId { get; set; }
		
		public System.Nullable<System.Int32> WorkItemId { get; set; }
	}
	
	public class ResetTestResultsRequest
	{
		
		public LegacyTestCaseResultIdentifier[] Ids { get; set; }
		
		public string ProjectName { get; set; }
	}
	
	/// <summary>
	/// Test result retention settings
	/// </summary>
	public class ResultRetentionSettings
	{
		
		/// <summary>
		/// Automated test result retention duration in days
		/// </summary>
		public System.Nullable<System.Int32> AutomatedResultsRetentionDuration { get; set; }
		
		public IdentityRef LastUpdatedBy { get; set; }
		
		/// <summary>
		/// Last updated date
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastUpdatedDate { get; set; }
		
		/// <summary>
		/// Manual test result retention duration in days
		/// </summary>
		public System.Nullable<System.Int32> ManualResultsRetentionDuration { get; set; }
	}
	
	public class ResultsByQueryRequest
	{
		
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		public ResultsStoreQuery Query { get; set; }
	}
	
	public class ResultsByQueryResponse
	{
		
		public LegacyTestCaseResultIdentifier[] ExcessIds { get; set; }
		
		public LegacyTestCaseResult[] TestResults { get; set; }
	}
	
	public class ResultsFilter
	{
		
		public string AutomatedTestName { get; set; }
		
		public string Branch { get; set; }
		
		public System.Nullable<ResultsFilterExecutedIn> ExecutedIn { get; set; }
		
		public string GroupBy { get; set; }
		
		public System.Nullable<System.DateTimeOffset> MaxCompleteDate { get; set; }
		
		public System.Nullable<System.Int32> ResultsCount { get; set; }
		
		public System.Nullable<System.Int32> TestCaseId { get; set; }
		
		public int[] TestCaseReferenceIds { get; set; }
		
		public System.Nullable<System.Int32> TestPlanId { get; set; }
		
		public int[] TestPointIds { get; set; }
		
		public TestResultsContext TestResultsContext { get; set; }
		
		public System.Nullable<System.Int32> TrendDays { get; set; }
	}
	
	public enum ResultsFilterExecutedIn
	{
		
		any = 0,
		
		tcm = 1,
		
		tfs = 2,
	}
	
	public class ResultUpdateRequestModel
	{
		
		public TestActionResultModel[] ActionResultDeletes { get; set; }
		
		public TestActionResultModel[] ActionResults { get; set; }
		
		public TestResultParameterModel[] ParameterDeletes { get; set; }
		
		public TestResultParameterModel[] Parameters { get; set; }
		
		public TestCaseResultUpdateModel TestCaseResult { get; set; }
	}
	
	/// <summary>
	/// Represents a test step result.
	/// </summary>
	public class TestActionResultModel
	{
		
		/// <summary>
		/// Path identifier test step in test case workitem.
		/// </summary>
		public string ActionPath { get; set; }
		
		/// <summary>
		/// Iteration ID of test action result.
		/// </summary>
		public System.Nullable<System.Int32> IterationId { get; set; }
		
		/// <summary>
		/// Reference to shared step workitem.
		/// </summary>
		public SharedStepModel SharedStepModel { get; set; }
		
		/// <summary>
		/// This is step Id of test case. For shared step, it is step Id of shared step in test case workitem; step Id in shared step. Example: TestCase workitem has two steps: 1) Normal step with Id = 1 2) Shared Step with Id = 2. Inside shared step: a) Normal Step with Id = 1 Value for StepIdentifier for First step: "1" Second step: "2;1"
		/// </summary>
		public string StepIdentifier { get; set; }
		
		/// <summary>
		/// Url of test action result.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Reference to shared step workitem.
	/// </summary>
	public class SharedStepModel
	{
		
		/// <summary>
		/// WorkItem shared step ID.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Shared step workitem revision.
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
	}
	
	/// <summary>
	/// Test parameter information in a test iteration.
	/// </summary>
	public class TestResultParameterModel
	{
		
		/// <summary>
		/// Test step path where parameter is referenced.
		/// </summary>
		public string ActionPath { get; set; }
		
		/// <summary>
		/// Iteration ID.
		/// </summary>
		public System.Nullable<System.Int32> IterationId { get; set; }
		
		/// <summary>
		/// Name of parameter.
		/// </summary>
		public string ParameterName { get; set; }
		
		/// <summary>
		/// This is step Id of test case. For shared step, it is step Id of shared step in test case workitem; step Id in shared step. Example: TestCase workitem has two steps: 1) Normal step with Id = 1 2) Shared Step with Id = 2. Inside shared step: a) Normal Step with Id = 1 Value for StepIdentifier for First step: "1" Second step: "2;1"
		/// </summary>
		public string StepIdentifier { get; set; }
		
		/// <summary>
		/// Url of test parameter.
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// Value of parameter.
		/// </summary>
		public string Value { get; set; }
	}
	
	public class TestCaseResultUpdateModel
	{
		
		public int[] AssociatedWorkItems { get; set; }
		
		public string AutomatedTestTypeId { get; set; }
		
		public string Comment { get; set; }
		
		public string CompletedDate { get; set; }
		
		public string ComputerName { get; set; }
		
		public CustomTestField[] CustomFields { get; set; }
		
		public string DurationInMs { get; set; }
		
		public string ErrorMessage { get; set; }
		
		public string FailureType { get; set; }
		
		public string Outcome { get; set; }
		
		public IdentityRef Owner { get; set; }
		
		public string ResolutionState { get; set; }
		
		public IdentityRef RunBy { get; set; }
		
		public string StackTrace { get; set; }
		
		public string StartedDate { get; set; }
		
		public string State { get; set; }
		
		public string TestCasePriority { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestResult { get; set; }
	}
	
	public class ResultUpdateResponse
	{
		
		public int[] AttachmentIds { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		public string LastUpdatedBy { get; set; }
		
		public string LastUpdatedByName { get; set; }
		
		public System.Nullable<System.Int32> MaxReservedSubResultId { get; set; }
		
		public System.Nullable<System.Int32> Revision { get; set; }
		
		public System.Nullable<System.Int32> TestPlanId { get; set; }
		
		public System.Nullable<System.Int32> TestResultId { get; set; }
	}
	
	public class ResultUpdateResponseModel
	{
		
		public System.Nullable<System.Int32> Revision { get; set; }
	}
	
	/// <summary>
	/// Test run create details.
	/// </summary>
	public class RunCreateModel
	{
		
		/// <summary>
		/// true if test run is automated, false otherwise. By default it will be false.
		/// </summary>
		public System.Nullable<System.Boolean> Automated { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Build { get; set; }
		
		/// <summary>
		/// Drop location of the build used for test run.
		/// </summary>
		public string BuildDropLocation { get; set; }
		
		/// <summary>
		/// Flavor of the build used for test run. (E.g: Release, Debug)
		/// </summary>
		public string BuildFlavor { get; set; }
		
		/// <summary>
		/// Platform of the build used for test run. (E.g.: x86, amd64)
		/// </summary>
		public string BuildPlatform { get; set; }
		
		/// <summary>
		/// BuildConfiguration Details.
		/// </summary>
		public BuildConfiguration BuildReference { get; set; }
		
		/// <summary>
		/// Comments entered by those analyzing the run.
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Completed date time of the run.
		/// </summary>
		public string CompleteDate { get; set; }
		
		/// <summary>
		/// IDs of the test configurations associated with the run.
		/// </summary>
		public int[] ConfigurationIds { get; set; }
		
		/// <summary>
		/// Name of the test controller used for automated run.
		/// </summary>
		public string Controller { get; set; }
		
		/// <summary>
		/// Additional properties of test Run.
		/// </summary>
		public CustomTestField[] CustomTestFields { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference DtlAutEnvironment { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference DtlTestEnvironment { get; set; }
		
		/// <summary>
		/// Due date and time for test run.
		/// </summary>
		public string DueDate { get; set; }
		
		/// <summary>
		/// This is a temporary class to provide the details for the test run environment.
		/// </summary>
		public DtlEnvironmentDetails EnvironmentDetails { get; set; }
		
		/// <summary>
		/// Error message associated with the run.
		/// </summary>
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// This class is used to provide the filters used for discovery
		/// </summary>
		public RunFilter Filter { get; set; }
		
		/// <summary>
		/// The iteration in which to create the run. Root iteration of the team project will be default
		/// </summary>
		public string Iteration { get; set; }
		
		/// <summary>
		/// Name of the test run.
		/// </summary>
		public string Name { get; set; }
		
		public IdentityRef Owner { get; set; }
		
		/// <summary>
		/// Pipeline reference
		/// </summary>
		public PipelineReference PipelineReference { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Plan { get; set; }
		
		/// <summary>
		/// IDs of the test points to use in the run.
		/// </summary>
		public int[] PointIds { get; set; }
		
		/// <summary>
		/// URI of release environment associated with the run.
		/// </summary>
		public string ReleaseEnvironmentUri { get; set; }
		
		/// <summary>
		/// Reference to a release.
		/// </summary>
		public ReleaseReference ReleaseReference { get; set; }
		
		/// <summary>
		/// URI of release associated with the run.
		/// </summary>
		public string ReleaseUri { get; set; }
		
		/// <summary>
		/// Run summary for run Type = NoConfigRun.
		/// </summary>
		public RunSummaryModel[] RunSummary { get; set; }
		
		/// <summary>
		/// Timespan till the run times out.
		/// </summary>
		public string RunTimeout { get; set; }
		
		/// <summary>
		/// SourceWorkFlow(CI/CD) of the test run.
		/// </summary>
		public string SourceWorkflow { get; set; }
		
		/// <summary>
		/// Start date time of the run.
		/// </summary>
		public string StartDate { get; set; }
		
		/// <summary>
		/// The state of the run. Type TestRunState Valid states - Unspecified ,NotStarted, InProgress, Completed, Waiting, Aborted, NeedsInvestigation
		/// </summary>
		public string State { get; set; }
		
		/// <summary>
		/// Tags to attach with the test run, maximum of 5 tags can be added to run.
		/// </summary>
		public TestTag[] Tags { get; set; }
		
		/// <summary>
		/// TestConfigurationMapping of the test run.
		/// </summary>
		public string TestConfigurationsMapping { get; set; }
		
		/// <summary>
		/// ID of the test environment associated with the run.
		/// </summary>
		public string TestEnvironmentId { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestSettings { get; set; }
		
		/// <summary>
		/// Type of the run(RunType) Valid Values : (Unspecified, Normal, Blocking, Web, MtrRunInitiatedFromWeb, RunWithDtlEnv, NoConfigRun)
		/// </summary>
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Run summary for each output type of test.
	/// </summary>
	public class RunSummaryModel
	{
		
		/// <summary>
		/// Total time taken in milliseconds.
		/// </summary>
		public System.Nullable<System.Int64> Duration { get; set; }
		
		/// <summary>
		/// Number of results for Outcome TestOutcome
		/// </summary>
		public System.Nullable<System.Int32> ResultCount { get; set; }
		
		/// <summary>
		/// Summary is based on outcome
		/// </summary>
		public System.Nullable<RunSummaryModelTestOutcome> TestOutcome { get; set; }
	}
	
	public enum RunSummaryModelTestOutcome
	{
		
		unspecified = 0,
		
		none = 1,
		
		passed = 2,
		
		failed = 3,
		
		inconclusive = 4,
		
		timeout = 5,
		
		aborted = 6,
		
		blocked = 7,
		
		notExecuted = 8,
		
		warning = 9,
		
		error = 10,
		
		notApplicable = 11,
		
		paused = 12,
		
		inProgress = 13,
		
		notImpacted = 14,
	}
	
	/// <summary>
	/// Tag attached to a run or result.
	/// </summary>
	public class TestTag
	{
		
		/// <summary>
		/// Name of the tag, alphanumeric value less than 30 chars
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Test run statistics per outcome.
	/// </summary>
	public class RunStatistic
	{
		
		/// <summary>
		/// Test result count fo the given outcome.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Test result outcome
		/// </summary>
		public string Outcome { get; set; }
		
		/// <summary>
		/// Test Resolution State Details.
		/// </summary>
		public TestResolutionState ResolutionState { get; set; }
		
		/// <summary>
		/// ResultMetadata for the given outcome/count.
		/// </summary>
		public System.Nullable<RunStatisticResultMetadata> ResultMetadata { get; set; }
		
		/// <summary>
		/// State of the test run
		/// </summary>
		public string State { get; set; }
	}
	
	public enum RunStatisticResultMetadata
	{
		
		rerun = 0,
		
		flaky = 1,
	}
	
	public class RunUpdateModel
	{
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Build { get; set; }
		
		/// <summary>
		/// Drop location of the build used for test run.
		/// </summary>
		public string BuildDropLocation { get; set; }
		
		/// <summary>
		/// Flavor of the build used for test run. (E.g: Release, Debug)
		/// </summary>
		public string BuildFlavor { get; set; }
		
		/// <summary>
		/// Platform of the build used for test run. (E.g.: x86, amd64)
		/// </summary>
		public string BuildPlatform { get; set; }
		
		/// <summary>
		/// Comments entered by those analyzing the run.
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Completed date time of the run.
		/// </summary>
		public string CompletedDate { get; set; }
		
		/// <summary>
		/// Name of the test controller used for automated run.
		/// </summary>
		public string Controller { get; set; }
		
		/// <summary>
		/// true to delete inProgess Results , false otherwise.
		/// </summary>
		public System.Nullable<System.Boolean> DeleteInProgressResults { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference DtlAutEnvironment { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference DtlEnvironment { get; set; }
		
		/// <summary>
		/// This is a temporary class to provide the details for the test run environment.
		/// </summary>
		public DtlEnvironmentDetails DtlEnvironmentDetails { get; set; }
		
		/// <summary>
		/// Due date and time for test run.
		/// </summary>
		public string DueDate { get; set; }
		
		/// <summary>
		/// Error message associated with the run.
		/// </summary>
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// The iteration in which to create the run.
		/// </summary>
		public string Iteration { get; set; }
		
		/// <summary>
		/// Log entries associated with the run. Use a comma-separated list of multiple log entry objects. { logEntry }, { logEntry }, ...
		/// </summary>
		public TestMessageLogDetails[] LogEntries { get; set; }
		
		/// <summary>
		/// Name of the test run.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// URI of release environment associated with the run.
		/// </summary>
		public string ReleaseEnvironmentUri { get; set; }
		
		/// <summary>
		/// URI of release associated with the run.
		/// </summary>
		public string ReleaseUri { get; set; }
		
		/// <summary>
		/// Run summary for run Type = NoConfigRun.
		/// </summary>
		public RunSummaryModel[] RunSummary { get; set; }
		
		/// <summary>
		/// SourceWorkFlow(CI/CD) of the test run.
		/// </summary>
		public string SourceWorkflow { get; set; }
		
		/// <summary>
		/// Start date time of the run.
		/// </summary>
		public string StartedDate { get; set; }
		
		/// <summary>
		/// The state of the test run Below are the valid values - NotStarted, InProgress, Completed, Aborted, Waiting
		/// </summary>
		public string State { get; set; }
		
		/// <summary>
		/// The types of sub states for test run.
		/// </summary>
		public System.Nullable<RunUpdateModelSubstate> Substate { get; set; }
		
		/// <summary>
		/// Tags to attach with the test run.
		/// </summary>
		public TestTag[] Tags { get; set; }
		
		/// <summary>
		/// ID of the test environment associated with the run.
		/// </summary>
		public string TestEnvironmentId { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestSettings { get; set; }
	}
	
	public enum RunUpdateModelSubstate
	{
		
		none = 0,
		
		creatingEnvironment = 1,
		
		runningTests = 2,
		
		canceledByUser = 3,
		
		abortedBySystem = 4,
		
		timedOut = 5,
		
		pendingAnalysis = 6,
		
		analyzed = 7,
		
		cancellationInProgress = 8,
	}
	
	public class ShallowTestCaseResult
	{
		
		public string AutomatedTestName { get; set; }
		
		public string AutomatedTestStorage { get; set; }
		
		public System.Nullable<System.Double> DurationInMs { get; set; }
		
		public System.Nullable<System.Int32> Id { get; set; }
		
		public System.Nullable<System.Boolean> IsReRun { get; set; }
		
		public string Outcome { get; set; }
		
		public string Owner { get; set; }
		
		public System.Nullable<System.Int32> Priority { get; set; }
		
		public System.Nullable<System.Int32> RefId { get; set; }
		
		public System.Nullable<System.Int32> RunId { get; set; }
		
		public string[] Tags { get; set; }
		
		public string TestCaseTitle { get; set; }
	}
	
	/// <summary>
	/// Suite create model
	/// </summary>
	public class SuiteCreateModel
	{
		
		/// <summary>
		/// Name of test suite.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// For query based suites, query string that defines the suite.
		/// </summary>
		public string QueryString { get; set; }
		
		/// <summary>
		/// For requirements test suites, the IDs of the requirements.
		/// </summary>
		public int[] RequirementIds { get; set; }
		
		/// <summary>
		/// Type of test suite to create. It can have value from DynamicTestSuite, StaticTestSuite and RequirementTestSuite.
		/// </summary>
		public string SuiteType { get; set; }
	}
	
	/// <summary>
	/// A suite entry defines properties for a test suite.
	/// </summary>
	public class SuiteEntry
	{
		
		/// <summary>
		/// Id of child suite in the test suite.
		/// </summary>
		public System.Nullable<System.Int32> ChildSuiteId { get; set; }
		
		/// <summary>
		/// Sequence number for the test case or child test suite in the test suite.
		/// </summary>
		public System.Nullable<System.Int32> SequenceNumber { get; set; }
		
		/// <summary>
		/// Id for the test suite.
		/// </summary>
		public System.Nullable<System.Int32> SuiteId { get; set; }
		
		/// <summary>
		/// Id of a test case in the test suite.
		/// </summary>
		public System.Nullable<System.Int32> TestCaseId { get; set; }
	}
	
	/// <summary>
	/// A model to define sequence of test suite entries in a test suite.
	/// </summary>
	public class SuiteEntryUpdateModel
	{
		
		/// <summary>
		/// Id of the child suite in the test suite.
		/// </summary>
		public System.Nullable<System.Int32> ChildSuiteId { get; set; }
		
		/// <summary>
		/// Updated sequence number for the test case or child test suite in the test suite.
		/// </summary>
		public System.Nullable<System.Int32> SequenceNumber { get; set; }
		
		/// <summary>
		/// Id of the test case in the test suite.
		/// </summary>
		public System.Nullable<System.Int32> TestCaseId { get; set; }
	}
	
	/// <summary>
	/// Test case for the suite.
	/// </summary>
	public class SuiteTestCase
	{
		
		/// <summary>
		/// Point Assignment for test suite's test case.
		/// </summary>
		public PointAssignment[] PointAssignments { get; set; }
		
		/// <summary>
		/// WorkItem reference Details.
		/// </summary>
		public WorkItemReference TestCase { get; set; }
	}
	
	/// <summary>
	/// Test suite update model.
	/// </summary>
	public class SuiteTestCaseUpdateModel
	{
		
		/// <summary>
		/// Shallow reference of configurations for the test cases in the suite.
		/// </summary>
		public ShallowReference[] Configurations { get; set; }
	}
	
	/// <summary>
	/// Test suite update model.
	/// </summary>
	public class SuiteUpdateModel
	{
		
		/// <summary>
		/// Shallow reference of default configurations for the suite.
		/// </summary>
		public ShallowReference[] DefaultConfigurations { get; set; }
		
		/// <summary>
		/// Shallow reference of test suite.
		/// </summary>
		public ShallowReference[] DefaultTesters { get; set; }
		
		/// <summary>
		/// Specifies if the default configurations have to be inherited from the parent test suite in which the test suite is created.
		/// </summary>
		public System.Nullable<System.Boolean> InheritDefaultConfigurations { get; set; }
		
		/// <summary>
		/// Test suite name
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Parent { get; set; }
		
		/// <summary>
		/// For query based suites, the new query string.
		/// </summary>
		public string QueryString { get; set; }
	}
	
	public class TCMPropertyBag2
	{
		
		public System.Nullable<System.Int32> ArtifactId { get; set; }
		
		public System.Nullable<System.Int32> ArtifactType { get; set; }
		
		public string Name { get; set; }
		
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The Team Context for an operation.
	/// </summary>
	public class TeamContext
	{
		
		/// <summary>
		/// The team project Id or name.  Ignored if ProjectId is set.
		/// </summary>
		public string Project { get; set; }
		
		/// <summary>
		/// The Team Project ID.  Required if Project is not set.
		/// </summary>
		public string ProjectId { get; set; }
		
		/// <summary>
		/// The Team Id or name.  Ignored if TeamId is set.
		/// </summary>
		public string Team { get; set; }
		
		/// <summary>
		/// The Team Id
		/// </summary>
		public string TeamId { get; set; }
	}
	
	/// <summary>
	/// Represents a shallow reference to a TeamProject.
	/// </summary>
	public class TeamProjectReference
	{
		
		/// <summary>
		/// Project abbreviation.
		/// </summary>
		public string Abbreviation { get; set; }
		
		/// <summary>
		/// Url to default team identity image.
		/// </summary>
		public string DefaultTeamImageUrl { get; set; }
		
		/// <summary>
		/// The project's description (if any).
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Project identifier.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Project last update time.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
		
		/// <summary>
		/// Project name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Project revision.
		/// </summary>
		public System.Nullable<System.Int64> Revision { get; set; }
		
		/// <summary>
		/// Project state.
		/// </summary>
		public System.Nullable<TeamProjectReferenceState> State { get; set; }
		
		/// <summary>
		/// Url to the full version of the object.
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// Project visibility.
		/// </summary>
		public System.Nullable<TeamProjectReferenceVisibility> Visibility { get; set; }
	}
	
	public enum TeamProjectReferenceState
	{
		
		deleting = 0,
		
		_new = 1,
		
		wellFormed = 2,
		
		createPending = 3,
		
		all = 4,
		
		unchanged = 5,
		
		deleted = 6,
	}
	
	public enum TeamProjectReferenceVisibility
	{
		
		_private = 0,
		
		_public = 1,
	}
	
	public class TestActionResult2
	{
		
		public string ActionPath { get; set; }
		
		public string Comment { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		public System.Nullable<System.DateTimeOffset> DateCompleted { get; set; }
		
		public System.Nullable<System.DateTimeOffset> DateStarted { get; set; }
		
		public System.Nullable<System.Int64> Duration { get; set; }
		
		public string ErrorMessage { get; set; }
		
		public System.Nullable<System.Int32> IterationId { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		public string Outcome { get; set; }
		
		public System.Nullable<System.Int32> SharedStepId { get; set; }
		
		public System.Nullable<System.Int32> SharedStepRevision { get; set; }
		
		public System.Nullable<System.Int32> TestResultId { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
	}
	
	public class TestAttachment
	{
		
		/// <summary>
		/// Attachment type.
		/// </summary>
		public System.Nullable<TestAttachmentAttachmentType> AttachmentType { get; set; }
		
		/// <summary>
		/// Comment associated with attachment.
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Attachment created date.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Attachment file name
		/// </summary>
		public string FileName { get; set; }
		
		/// <summary>
		/// ID of the attachment.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Attachment size.
		/// </summary>
		public System.Nullable<System.Int64> Size { get; set; }
		
		/// <summary>
		/// Attachment Url.
		/// </summary>
		public string Url { get; set; }
	}
	
	public enum TestAttachmentAttachmentType
	{
		
		generalAttachment = 0,
		
		codeCoverage = 1,
		
		consoleLog = 2,
	}
	
	/// <summary>
	/// Reference to test attachment.
	/// </summary>
	public class TestAttachmentReference
	{
		
		/// <summary>
		/// ID of the attachment.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Url to download the attachment.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Test attachment request model
	/// </summary>
	public class TestAttachmentRequestModel
	{
		
		/// <summary>
		/// Attachment type By Default it will be GeneralAttachment. It can be one of the following type. { GeneralAttachment, AfnStrip, BugFilingData, CodeCoverage, IntermediateCollectorData, RunConfig, TestImpactDetails, TmiTestRunDeploymentFiles, TmiTestRunReverseDeploymentFiles, TmiTestResultDetail, TmiTestRunSummary }
		/// </summary>
		public string AttachmentType { get; set; }
		
		/// <summary>
		/// Comment associated with attachment
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Attachment filename
		/// </summary>
		public string FileName { get; set; }
		
		/// <summary>
		/// Base64 encoded file stream
		/// </summary>
		public string Stream { get; set; }
	}
	
	public class TestAuthoringDetails
	{
		
		public System.Nullable<System.Int32> ConfigurationId { get; set; }
		
		public System.Nullable<System.Boolean> IsAutomated { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		public System.Nullable<System.Int32> PointId { get; set; }
		
		public string Priority { get; set; }
		
		public string RunBy { get; set; }
		
		public System.Nullable<TestAuthoringDetailsState> State { get; set; }
		
		public System.Nullable<System.Int32> SuiteId { get; set; }
		
		public string TesterId { get; set; }
	}
	
	public enum TestAuthoringDetailsState
	{
		
		none = 0,
		
		ready = 1,
		
		completed = 2,
		
		notReady = 3,
		
		inProgress = 4,
		
		maxValue = 5,
	}
	
	public class TestCaseMetadata2
	{
		
		public string Container { get; set; }
		
		public string Name { get; set; }
		
		public string ProjectId { get; set; }
		
		public System.Nullable<System.Int32> TestMetadataId { get; set; }
	}
	
	public class TestCaseReference2
	{
		
		public System.Nullable<System.Int32> AreaId { get; set; }
		
		public string AutomatedTestId { get; set; }
		
		public string AutomatedTestName { get; set; }
		
		public string[] AutomatedTestNameHash { get; set; }
		
		public string AutomatedTestStorage { get; set; }
		
		public string[] AutomatedTestStorageHash { get; set; }
		
		public string AutomatedTestType { get; set; }
		
		public System.Nullable<System.Int32> ConfigurationId { get; set; }
		
		public string CreatedBy { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastRefTestRunDate { get; set; }
		
		public string Owner { get; set; }
		
		public string Priority { get; set; }
		
		public string ProjectId { get; set; }
		
		public System.Nullable<System.Int32> TestCaseId { get; set; }
		
		public System.Nullable<System.Int32> TestCaseRefId { get; set; }
		
		public System.Nullable<System.Int32> TestCaseRevision { get; set; }
		
		public string TestCaseTitle { get; set; }
		
		public System.Nullable<System.Int32> TestPointId { get; set; }
	}
	
	/// <summary>
	/// Represents a test result.
	/// </summary>
	public class TestCaseResult
	{
		
		/// <summary>
		/// Test attachment ID of action recording.
		/// </summary>
		public System.Nullable<System.Int32> AfnStripId { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Area { get; set; }
		
		/// <summary>
		/// Reference to bugs linked to test result.
		/// </summary>
		public ShallowReference[] AssociatedBugs { get; set; }
		
		/// <summary>
		/// ID representing test method in a dll.
		/// </summary>
		public string AutomatedTestId { get; set; }
		
		/// <summary>
		/// Fully qualified name of test executed.
		/// </summary>
		public string AutomatedTestName { get; set; }
		
		/// <summary>
		/// Container to which test belongs.
		/// </summary>
		public string AutomatedTestStorage { get; set; }
		
		/// <summary>
		/// Type of automated test.
		/// </summary>
		public string AutomatedTestType { get; set; }
		
		/// <summary>
		/// TypeId of automated test.
		/// </summary>
		public string AutomatedTestTypeId { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Build { get; set; }
		
		/// <summary>
		/// Reference to a build.
		/// </summary>
		public BuildReference BuildReference { get; set; }
		
		/// <summary>
		/// Comment in a test result with maxSize= 1000 chars.
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Time when test execution completed. Completed date should be greater than StartedDate.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CompletedDate { get; set; }
		
		/// <summary>
		/// Machine name where test executed.
		/// </summary>
		public string ComputerName { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Configuration { get; set; }
		
		/// <summary>
		/// Timestamp when test result created.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Additional properties of test result.
		/// </summary>
		public CustomTestField[] CustomFields { get; set; }
		
		/// <summary>
		/// Duration of test execution in milliseconds. If not provided value will be set as CompletedDate - StartedDate
		/// </summary>
		public System.Nullable<System.Double> DurationInMs { get; set; }
		
		/// <summary>
		/// Error message in test execution.
		/// </summary>
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Failing since information of a test result.
		/// </summary>
		public FailingSince FailingSince { get; set; }
		
		/// <summary>
		/// Failure type of test result. Valid Value= (Known Issue, New Issue, Regression, Unknown, None)
		/// </summary>
		public string FailureType { get; set; }
		
		/// <summary>
		/// ID of a test result.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Test result details of test iterations used only for Manual Testing.
		/// </summary>
		public TestIterationDetailsModel[] IterationDetails { get; set; }
		
		public IdentityRef LastUpdatedBy { get; set; }
		
		/// <summary>
		/// Last updated datetime of test result.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastUpdatedDate { get; set; }
		
		/// <summary>
		/// Test outcome of test result. Valid values = (Unspecified, None, Passed, Failed, Inconclusive, Timeout, Aborted, Blocked, NotExecuted, Warning, Error, NotApplicable, Paused, InProgress, NotImpacted)
		/// </summary>
		public string Outcome { get; set; }
		
		public IdentityRef Owner { get; set; }
		
		/// <summary>
		/// Priority of test executed.
		/// </summary>
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Project { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Release { get; set; }
		
		/// <summary>
		/// Reference to a release.
		/// </summary>
		public ReleaseReference ReleaseReference { get; set; }
		
		/// <summary>
		/// ResetCount.
		/// </summary>
		public System.Nullable<System.Int32> ResetCount { get; set; }
		
		/// <summary>
		/// Resolution state of test result.
		/// </summary>
		public string ResolutionState { get; set; }
		
		/// <summary>
		/// ID of resolution state.
		/// </summary>
		public System.Nullable<System.Int32> ResolutionStateId { get; set; }
		
		/// <summary>
		/// Hierarchy type of the result, default value of None means its leaf node.
		/// </summary>
		public System.Nullable<TestCaseResultResultGroupType> ResultGroupType { get; set; }
		
		/// <summary>
		/// Revision number of test result.
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
		
		public IdentityRef RunBy { get; set; }
		
		/// <summary>
		/// Stacktrace with maxSize= 1000 chars.
		/// </summary>
		public string StackTrace { get; set; }
		
		/// <summary>
		/// Time when test execution started.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartedDate { get; set; }
		
		/// <summary>
		/// State of test result. Type TestRunState.
		/// </summary>
		public string State { get; set; }
		
		/// <summary>
		/// List of sub results inside a test result, if ResultGroupType is not None, it holds corresponding type sub results.
		/// </summary>
		public TestSubResult[] SubResults { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestCase { get; set; }
		
		/// <summary>
		/// Reference ID of test used by test result. Type TestResultMetaData
		/// </summary>
		public System.Nullable<System.Int32> TestCaseReferenceId { get; set; }
		
		/// <summary>
		/// TestCaseRevision Number.
		/// </summary>
		public System.Nullable<System.Int32> TestCaseRevision { get; set; }
		
		/// <summary>
		/// Name of test.
		/// </summary>
		public string TestCaseTitle { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestPlan { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestPoint { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestRun { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestSuite { get; set; }
		
		/// <summary>
		/// Url of test result.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Represents a test iteration result.
	/// </summary>
	public class TestIterationDetailsModel
	{
		
		/// <summary>
		/// Test step results in an iteration.
		/// </summary>
		public TestActionResultModel[] ActionResults { get; set; }
		
		/// <summary>
		/// Reference to attachments in test iteration result.
		/// </summary>
		public TestCaseResultAttachmentModel[] Attachments { get; set; }
		
		/// <summary>
		/// Comment in test iteration result.
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Time when execution completed.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CompletedDate { get; set; }
		
		/// <summary>
		/// Duration of execution.
		/// </summary>
		public System.Nullable<System.Double> DurationInMs { get; set; }
		
		/// <summary>
		/// Error message in test iteration result execution.
		/// </summary>
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// ID of test iteration result.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Test outcome if test iteration result.
		/// </summary>
		public string Outcome { get; set; }
		
		/// <summary>
		/// Test parameters in an iteration.
		/// </summary>
		public TestResultParameterModel[] Parameters { get; set; }
		
		/// <summary>
		/// Time when execution started.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartedDate { get; set; }
		
		/// <summary>
		/// Url to test iteration result.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Test attachment information in a test iteration.
	/// </summary>
	public class TestCaseResultAttachmentModel
	{
		
		/// <summary>
		/// Path identifier test step in test case workitem.
		/// </summary>
		public string ActionPath { get; set; }
		
		/// <summary>
		/// Attachment ID.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Iteration ID.
		/// </summary>
		public System.Nullable<System.Int32> IterationId { get; set; }
		
		/// <summary>
		/// Name of attachment.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Attachment size.
		/// </summary>
		public System.Nullable<System.Int64> Size { get; set; }
		
		/// <summary>
		/// Url to attachment.
		/// </summary>
		public string Url { get; set; }
	}
	
	public enum TestCaseResultResultGroupType
	{
		
		none = 0,
		
		rerun = 1,
		
		dataDriven = 2,
		
		orderedTest = 3,
		
		generic = 4,
	}
	
	/// <summary>
	/// Represents a sub result of a test result.
	/// </summary>
	public class TestSubResult
	{
		
		/// <summary>
		/// Comment in sub result.
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Time when test execution completed.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CompletedDate { get; set; }
		
		/// <summary>
		/// Machine where test executed.
		/// </summary>
		public string ComputerName { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Configuration { get; set; }
		
		/// <summary>
		/// Additional properties of sub result.
		/// </summary>
		public CustomTestField[] CustomFields { get; set; }
		
		/// <summary>
		/// Name of sub result.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Duration of test execution.
		/// </summary>
		public System.Nullable<System.Int64> DurationInMs { get; set; }
		
		/// <summary>
		/// Error message in sub result.
		/// </summary>
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// ID of sub result.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Time when result last updated.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastUpdatedDate { get; set; }
		
		/// <summary>
		/// Outcome of sub result.
		/// </summary>
		public string Outcome { get; set; }
		
		/// <summary>
		/// Immediate parent ID of sub result.
		/// </summary>
		public System.Nullable<System.Int32> ParentId { get; set; }
		
		/// <summary>
		/// Hierarchy type of the result, default value of None means its leaf node.
		/// </summary>
		public System.Nullable<TestSubResultResultGroupType> ResultGroupType { get; set; }
		
		/// <summary>
		/// Index number of sub result.
		/// </summary>
		public System.Nullable<System.Int32> SequenceId { get; set; }
		
		/// <summary>
		/// Stacktrace.
		/// </summary>
		public string StackTrace { get; set; }
		
		/// <summary>
		/// Time when test execution started.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartedDate { get; set; }
		
		/// <summary>
		/// List of sub results inside a sub result, if ResultGroupType is not None, it holds corresponding type sub results.
		/// </summary>
		public TestSubResult[] SubResults { get; set; }
		
		/// <summary>
		/// Reference to a test result.
		/// </summary>
		public TestCaseResultIdentifier TestResult { get; set; }
		
		/// <summary>
		/// Url of sub result.
		/// </summary>
		public string Url { get; set; }
	}
	
	public enum TestSubResultResultGroupType
	{
		
		none = 0,
		
		rerun = 1,
		
		dataDriven = 2,
		
		orderedTest = 3,
		
		generic = 4,
	}
	
	/// <summary>
	/// Test configuration
	/// </summary>
	public class TestConfiguration
	{
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Area { get; set; }
		
		/// <summary>
		/// Description of the configuration
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Id of the configuration
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Is the configuration a default for the test plans
		/// </summary>
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		public IdentityRef LastUpdatedBy { get; set; }
		
		/// <summary>
		/// Last Updated Data
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastUpdatedDate { get; set; }
		
		/// <summary>
		/// Name of the configuration
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Project { get; set; }
		
		/// <summary>
		/// Revision of the the configuration
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// State of the configuration
		/// </summary>
		public System.Nullable<TestConfigurationState> State { get; set; }
		
		/// <summary>
		/// Url of Configuration Resource
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// Dictionary of Test Variable, Selected Value
		/// </summary>
		public NameValuePair[] Values { get; set; }
	}
	
	public enum TestConfigurationState
	{
		
		active = 0,
		
		inactive = 1,
	}
	
	/// <summary>
	/// Test environment Detail.
	/// </summary>
	public class TestEnvironment
	{
		
		/// <summary>
		/// Test Environment Id.
		/// </summary>
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// Test Environment Name.
		/// </summary>
		public string EnvironmentName { get; set; }
	}
	
	public class TestExecutionReportData
	{
		
		public DatedTestFieldData[] ReportData { get; set; }
	}
	
	public class TestFailuresAnalysis
	{
		
		public TestFailureDetails ExistingFailures { get; set; }
		
		public TestFailureDetails FixedTests { get; set; }
		
		public TestFailureDetails NewFailures { get; set; }
		
		public TestResultsContext PreviousContext { get; set; }
	}
	
	public class TestFailureType
	{
		
		public System.Nullable<System.Int32> Id { get; set; }
		
		public string Name { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Project { get; set; }
	}
	
	public class TestFieldsEx2
	{
		
		public System.Nullable<System.Int32> FieldId { get; set; }
		
		public string FieldName { get; set; }
		
		public string FieldType { get; set; }
		
		public System.Nullable<System.Boolean> IsResultScoped { get; set; }
		
		public System.Nullable<System.Boolean> IsRunScoped { get; set; }
		
		public System.Nullable<System.Boolean> IsSystemField { get; set; }
		
		public string ProjectId { get; set; }
	}
	
	/// <summary>
	/// Test Flaky Identifier
	/// </summary>
	public class TestFlakyIdentifier
	{
		
		/// <summary>
		/// Branch Name where Flakiness has to be Marked/Unmarked
		/// </summary>
		public string BranchName { get; set; }
		
		/// <summary>
		/// State for Flakiness
		/// </summary>
		public System.Nullable<System.Boolean> IsFlaky { get; set; }
	}
	
	/// <summary>
	/// Filter to get TestCase result history.
	/// </summary>
	public class TestHistoryQuery
	{
		
		/// <summary>
		/// Automated test name of the TestCase.
		/// </summary>
		public string AutomatedTestName { get; set; }
		
		/// <summary>
		/// Results to be get for a particular branches.
		/// </summary>
		public string Branch { get; set; }
		
		/// <summary>
		/// Get the results history only for this BuildDefinitionId. This to get used in query GroupBy should be Branch. If this is provided, Branch will have no use.
		/// </summary>
		public System.Nullable<System.Int32> BuildDefinitionId { get; set; }
		
		/// <summary>
		/// It will be filled by server. If not null means there are some results still to be get, and we need to call this REST API with this ContinuousToken. It is not supposed to be created (or altered, if received from server in last batch) by user.
		/// </summary>
		public string ContinuationToken { get; set; }
		
		/// <summary>
		/// Group the result on the basis of TestResultGroupBy. This can be Branch, Environment or null(if results are fetched by BuildDefinitionId)
		/// </summary>
		public System.Nullable<TestHistoryQueryGroupBy> GroupBy { get; set; }
		
		/// <summary>
		/// History to get between time interval MaxCompleteDate and  (MaxCompleteDate - TrendDays). Default is current date time.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> MaxCompleteDate { get; set; }
		
		/// <summary>
		/// Get the results history only for this ReleaseEnvDefinitionId. This to get used in query GroupBy should be Environment.
		/// </summary>
		public System.Nullable<System.Int32> ReleaseEnvDefinitionId { get; set; }
		
		/// <summary>
		/// List of TestResultHistoryForGroup which are grouped by GroupBy
		/// </summary>
		public TestResultHistoryForGroup[] ResultsForGroup { get; set; }
		
		/// <summary>
		/// Get the results history only for this testCaseId. This to get used in query to filter the result along with automatedtestname
		/// </summary>
		public System.Nullable<System.Int32> TestCaseId { get; set; }
		
		/// <summary>
		/// Number of days for which history to collect. Maximum supported value is 7 days. Default is 7 days.
		/// </summary>
		public System.Nullable<System.Int32> TrendDays { get; set; }
	}
	
	public enum TestHistoryQueryGroupBy
	{
		
		branch = 0,
		
		environment = 1,
	}
	
	/// <summary>
	/// List of test results filtered on the basis of GroupByValue
	/// </summary>
	public class TestResultHistoryForGroup
	{
		
		/// <summary>
		/// Display name of the group.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Name or Id of the group identifier by which results are grouped together.
		/// </summary>
		public string GroupByValue { get; set; }
		
		/// <summary>
		/// List of results for GroupByValue
		/// </summary>
		public TestCaseResult[] Results { get; set; }
	}
	
	/// <summary>
	/// Represents Test Log Result object.
	/// </summary>
	public class TestLog
	{
		
		/// <summary>
		/// Test Log Reference object
		/// </summary>
		public TestLogReference LogReference { get; set; }
		
		/// <summary>
		/// Meta data for Log file
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> MetaData { get; set; }
		
		/// <summary>
		/// LastUpdatedDate for Log file
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ModifiedOn { get; set; }
		
		/// <summary>
		/// Size in Bytes for Log file
		/// </summary>
		public System.Nullable<System.Int64> Size { get; set; }
	}
	
	/// <summary>
	/// Test Log Reference object
	/// </summary>
	public class TestLogReference
	{
		
		/// <summary>
		/// BuildId for test log, if context is build
		/// </summary>
		public System.Nullable<System.Int32> BuildId { get; set; }
		
		/// <summary>
		/// FileName for log file
		/// </summary>
		public string FilePath { get; set; }
		
		/// <summary>
		/// ReleaseEnvId for test log, if context is Release
		/// </summary>
		public System.Nullable<System.Int32> ReleaseEnvId { get; set; }
		
		/// <summary>
		/// ReleaseId for test log, if context is Release
		/// </summary>
		public System.Nullable<System.Int32> ReleaseId { get; set; }
		
		/// <summary>
		/// Resultid for test log, if context is run and log is related to result
		/// </summary>
		public System.Nullable<System.Int32> ResultId { get; set; }
		
		/// <summary>
		/// runid for test log, if context is run
		/// </summary>
		public System.Nullable<System.Int32> RunId { get; set; }
		
		/// <summary>
		/// Test Log Scope
		/// </summary>
		public System.Nullable<TestLogReferenceScope> Scope { get; set; }
		
		/// <summary>
		/// SubResultid for test log, if context is run and log is related to subresult
		/// </summary>
		public System.Nullable<System.Int32> SubResultId { get; set; }
		
		/// <summary>
		/// Log Type
		/// </summary>
		public System.Nullable<TestLogReferenceType> Type { get; set; }
	}
	
	public enum TestLogReferenceScope
	{
		
		run = 0,
	}
	
	public enum TestLogReferenceType
	{
		
		generalAttachment = 0,
	}
	
	/// <summary>
	/// Represents Test Log Status object.
	/// </summary>
	public class TestLogStatus
	{
		
		/// <summary>
		/// Exception message
		/// </summary>
		public string Exception { get; set; }
		
		/// <summary>
		/// Test Log Status code
		/// </summary>
		public System.Nullable<TestLogStatusStatus> Status { get; set; }
		
		/// <summary>
		/// Blob Transfer Error code
		/// </summary>
		public string TransferFailureType { get; set; }
	}
	
	public enum TestLogStatusStatus
	{
		
		success = 0,
		
		failed = 1,
		
		fileAlreadyExists = 2,
		
		invalidInput = 3,
		
		invalidFileName = 4,
		
		invalidContainer = 5,
		
		transferFailed = 6,
		
		featureDisabled = 7,
		
		buildDoesNotExist = 8,
		
		runDoesNotExist = 9,
		
		containerNotCreated = 10,
		
		apiNotSupported = 11,
		
		fileSizeExceeds = 12,
		
		containerNotFound = 13,
		
		fileNotFound = 14,
		
		directoryNotFound = 15,
		
		storageCapacityExceeded = 16,
	}
	
	/// <summary>
	/// Represents Test Log store endpoint details.
	/// </summary>
	public class TestLogStoreEndpointDetails
	{
		
		/// <summary>
		/// Test log store connection Uri.
		/// </summary>
		public string EndpointSASUri { get; set; }
		
		/// <summary>
		/// Test log store endpoint type.
		/// </summary>
		public System.Nullable<TestLogStoreEndpointDetailsEndpointType> EndpointType { get; set; }
		
		/// <summary>
		/// Test log store status code
		/// </summary>
		public System.Nullable<TestLogStoreEndpointDetailsStatus> Status { get; set; }
	}
	
	public enum TestLogStoreEndpointDetailsEndpointType
	{
		
		root = 0,
		
		file = 1,
	}
	
	public enum TestLogStoreEndpointDetailsStatus
	{
		
		success = 0,
		
		failed = 1,
		
		fileAlreadyExists = 2,
		
		invalidInput = 3,
		
		invalidFileName = 4,
		
		invalidContainer = 5,
		
		transferFailed = 6,
		
		featureDisabled = 7,
		
		buildDoesNotExist = 8,
		
		runDoesNotExist = 9,
		
		containerNotCreated = 10,
		
		apiNotSupported = 11,
		
		fileSizeExceeds = 12,
		
		containerNotFound = 13,
		
		fileNotFound = 14,
		
		directoryNotFound = 15,
		
		storageCapacityExceeded = 16,
	}
	
	public class TestMessageLog2
	{
		
		public System.Nullable<System.Int32> TestMessageLogId { get; set; }
	}
	
	public class TestMessageLogEntry2
	{
		
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		public System.Nullable<System.Int32> EntryId { get; set; }
		
		public string LogLevel { get; set; }
		
		public string LogUser { get; set; }
		
		public string Message { get; set; }
		
		public System.Nullable<System.Int32> TestMessageLogId { get; set; }
	}
	
	public class TestMethod
	{
		
		public string Container { get; set; }
		
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Class representing a reference to an operation.
	/// </summary>
	public class TestOperationReference
	{
		
		public string Id { get; set; }
		
		public string Status { get; set; }
		
		public string Url { get; set; }
	}
	
	public class TestParameter2
	{
		
		public string ActionPath { get; set; }
		
		public string[] Actual { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		public string DataType { get; set; }
		
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		public string[] Expected { get; set; }
		
		public System.Nullable<System.Int32> IterationId { get; set; }
		
		public string ParameterName { get; set; }
		
		public System.Nullable<System.Int32> TestResultId { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
	}
	
	/// <summary>
	/// The test plan resource.
	/// </summary>
	public class TestPlan
	{
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Area { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Build { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference BuildDefinition { get; set; }
		
		/// <summary>
		/// Description of the test plan.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// End date for the test plan.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// ID of the test plan.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Iteration path of the test plan.
		/// </summary>
		public string Iteration { get; set; }
		
		/// <summary>
		/// Name of the test plan.
		/// </summary>
		public string Name { get; set; }
		
		public IdentityRef Owner { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference PreviousBuild { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Project { get; set; }
		
		/// <summary>
		/// Reference to release environment resource.
		/// </summary>
		public ReleaseEnvironmentDefinitionReference ReleaseEnvironmentDefinition { get; set; }
		
		/// <summary>
		/// Revision of the test plan.
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference RootSuite { get; set; }
		
		/// <summary>
		/// Start date for the test plan.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// State of the test plan.
		/// </summary>
		public string State { get; set; }
		
		/// <summary>
		/// Test outcome settings
		/// </summary>
		public TestOutcomeSettings TestOutcomeSettings { get; set; }
		
		public IdentityRef UpdatedBy { get; set; }
		
		public System.Nullable<System.DateTimeOffset> UpdatedDate { get; set; }
		
		/// <summary>
		/// URL of the test plan resource.
		/// </summary>
		public string Url { get; set; }
	}
	
	public class TestPlanCloneRequest
	{
		
		/// <summary>
		/// The test plan resource.
		/// </summary>
		public TestPlan DestinationTestPlan { get; set; }
		
		/// <summary>
		/// Clone options for cloning the test suite.
		/// </summary>
		public CloneOptions Options { get; set; }
		
		public int[] SuiteIds { get; set; }
	}
	
	public class TestPlanHubData
	{
		
		public System.Nullable<System.Int32> SelectedSuiteId { get; set; }
		
		/// <summary>
		/// The test plan resource.
		/// </summary>
		public TestPlan TestPlan { get; set; }
		
		public TestPoint[] TestPoints { get; set; }
		
		public TestSuite[] TestSuites { get; set; }
		
		public System.Nullable<System.Int32> TotalTestPoints { get; set; }
	}
	
	/// <summary>
	/// Test point.
	/// </summary>
	public class TestPoint
	{
		
		public IdentityRef AssignedTo { get; set; }
		
		/// <summary>
		/// Automated.
		/// </summary>
		public System.Nullable<System.Boolean> Automated { get; set; }
		
		/// <summary>
		/// Comment associated with test point.
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Configuration { get; set; }
		
		/// <summary>
		/// Failure type of test point.
		/// </summary>
		public string FailureType { get; set; }
		
		/// <summary>
		/// ID of the test point.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Last date when test point was reset to Active.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastResetToActive { get; set; }
		
		/// <summary>
		/// Last resolution state id of test point.
		/// </summary>
		public System.Nullable<System.Int32> LastResolutionStateId { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference LastResult { get; set; }
		
		/// <summary>
		/// Last result details of test point.
		/// </summary>
		public LastResultDetails LastResultDetails { get; set; }
		
		/// <summary>
		/// Last result state of test point.
		/// </summary>
		public string LastResultState { get; set; }
		
		/// <summary>
		/// LastRun build number of test point.
		/// </summary>
		public string LastRunBuildNumber { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference LastTestRun { get; set; }
		
		public IdentityRef LastUpdatedBy { get; set; }
		
		/// <summary>
		/// Last updated date of test point.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastUpdatedDate { get; set; }
		
		/// <summary>
		/// Outcome of test point.
		/// </summary>
		public string Outcome { get; set; }
		
		/// <summary>
		/// Revision number.
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// State of test point.
		/// </summary>
		public string State { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Suite { get; set; }
		
		/// <summary>
		/// WorkItem reference Details.
		/// </summary>
		public WorkItemReference TestCase { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestPlan { get; set; }
		
		/// <summary>
		/// Test point Url.
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// Work item properties of test point.
		/// </summary>
		public string[] WorkItemProperties { get; set; }
	}
	
	/// <summary>
	/// Test suite
	/// </summary>
	public class TestSuite
	{
		
		/// <summary>
		/// Area uri of the test suite.
		/// </summary>
		public string AreaUri { get; set; }
		
		/// <summary>
		/// Child test suites of current test suite.
		/// </summary>
		public TestSuite[] Children { get; set; }
		
		/// <summary>
		/// Test suite default configuration.
		/// </summary>
		public ShallowReference[] DefaultConfigurations { get; set; }
		
		/// <summary>
		/// Test suite default testers.
		/// </summary>
		public ShallowReference[] DefaultTesters { get; set; }
		
		/// <summary>
		/// Id of test suite.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Default configuration was inherited or not.
		/// </summary>
		public System.Nullable<System.Boolean> InheritDefaultConfigurations { get; set; }
		
		/// <summary>
		/// Last error for test suite.
		/// </summary>
		public string LastError { get; set; }
		
		/// <summary>
		/// Last populated date.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastPopulatedDate { get; set; }
		
		public IdentityRef LastUpdatedBy { get; set; }
		
		/// <summary>
		/// Last update date.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastUpdatedDate { get; set; }
		
		/// <summary>
		/// Name of test suite.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Parent { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Plan { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Project { get; set; }
		
		/// <summary>
		/// Test suite query string, for dynamic suites.
		/// </summary>
		public string QueryString { get; set; }
		
		/// <summary>
		/// Test suite requirement id.
		/// </summary>
		public System.Nullable<System.Int32> RequirementId { get; set; }
		
		/// <summary>
		/// Test suite revision.
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// State of test suite.
		/// </summary>
		public string State { get; set; }
		
		/// <summary>
		/// List of shallow reference of suites.
		/// </summary>
		public ShallowReference[] Suites { get; set; }
		
		/// <summary>
		/// Test suite type.
		/// </summary>
		public string SuiteType { get; set; }
		
		/// <summary>
		/// Test cases count.
		/// </summary>
		public System.Nullable<System.Int32> TestCaseCount { get; set; }
		
		/// <summary>
		/// Test case url.
		/// </summary>
		public string TestCasesUrl { get; set; }
		
		/// <summary>
		/// Used in tree view. If test suite is root suite then, it is name of plan otherwise title of the suite.
		/// </summary>
		public string Text { get; set; }
		
		/// <summary>
		/// Url of test suite.
		/// </summary>
		public string Url { get; set; }
	}
	
	public class TestPlansWithSelection
	{
		
		public System.Nullable<System.Int32> LastSelectedPlan { get; set; }
		
		public System.Nullable<System.Int32> LastSelectedSuite { get; set; }
		
		public TestPlan[] Plans { get; set; }
	}
	
	public class TestPointReference
	{
		
		public System.Nullable<System.Int32> Id { get; set; }
		
		public System.Nullable<TestPointReferenceState> State { get; set; }
	}
	
	public enum TestPointReferenceState
	{
		
		none = 0,
		
		ready = 1,
		
		completed = 2,
		
		notReady = 3,
		
		inProgress = 4,
		
		maxValue = 5,
	}
	
	public class TestPointsEvent
	{
		
		public string ProjectName { get; set; }
		
		public TestPointReference[] TestPoints { get; set; }
	}
	
	/// <summary>
	/// Test point query class.
	/// </summary>
	public class TestPointsQuery
	{
		
		/// <summary>
		/// Order by results.
		/// </summary>
		public string OrderBy { get; set; }
		
		/// <summary>
		/// List of test points
		/// </summary>
		public TestPoint[] Points { get; set; }
		
		/// <summary>
		/// Filter class for test point.
		/// </summary>
		public PointsFilter PointsFilter { get; set; }
		
		/// <summary>
		/// List of workitem fields to get.
		/// </summary>
		public string[] WitFields { get; set; }
	}
	
	public class TestPointsUpdatedEvent
	{
	}
	
	public class TestResult2
	{
		
		public System.Nullable<System.Int32> AfnStripId { get; set; }
		
		public string ComputerName { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		public System.Nullable<System.DateTimeOffset> DateCompleted { get; set; }
		
		public System.Nullable<System.DateTimeOffset> DateStarted { get; set; }
		
		public string EffectivePointState { get; set; }
		
		public string FailureType { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		public string LastUpdatedBy { get; set; }
		
		public string Outcome { get; set; }
		
		public string Owner { get; set; }
		
		public string ProjectId { get; set; }
		
		public System.Nullable<System.Int32> ResetCount { get; set; }
		
		public System.Nullable<System.Int32> ResolutionStateId { get; set; }
		
		public System.Nullable<System.Int32> Revision { get; set; }
		
		public string RunBy { get; set; }
		
		public string State { get; set; }
		
		public System.Nullable<System.Int32> TestCaseRefId { get; set; }
		
		public System.Nullable<System.Int32> TestResultId { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
	}
	
	public class TestResultAcrossProjectResponse
	{
		
		public string ProjectName { get; set; }
		
		public LegacyTestCaseResult TestResult { get; set; }
	}
	
	public class TestResultCreateModel
	{
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Area { get; set; }
		
		public int[] AssociatedWorkItems { get; set; }
		
		public string AutomatedTestId { get; set; }
		
		public string AutomatedTestName { get; set; }
		
		public string AutomatedTestStorage { get; set; }
		
		public string AutomatedTestType { get; set; }
		
		public string AutomatedTestTypeId { get; set; }
		
		public string Comment { get; set; }
		
		public string CompletedDate { get; set; }
		
		public string ComputerName { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Configuration { get; set; }
		
		public CustomTestField[] CustomFields { get; set; }
		
		public string DurationInMs { get; set; }
		
		public string ErrorMessage { get; set; }
		
		public string FailureType { get; set; }
		
		public string Outcome { get; set; }
		
		public IdentityRef Owner { get; set; }
		
		public string ResolutionState { get; set; }
		
		public IdentityRef RunBy { get; set; }
		
		public string StackTrace { get; set; }
		
		public string StartedDate { get; set; }
		
		public string State { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestCase { get; set; }
		
		public string TestCasePriority { get; set; }
		
		public string TestCaseTitle { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestPoint { get; set; }
	}
	
	public class TestResultDocument
	{
		
		/// <summary>
		/// Class representing a reference to an operation.
		/// </summary>
		public TestOperationReference OperationReference { get; set; }
		
		public TestResultPayload Payload { get; set; }
	}
	
	public class TestResultPayload
	{
		
		public string Comment { get; set; }
		
		public string Name { get; set; }
		
		public string Stream { get; set; }
	}
	
	public class TestResultHistory
	{
		
		public string GroupByField { get; set; }
		
		public TestResultHistoryDetailsForGroup[] ResultsForGroup { get; set; }
	}
	
	public class TestResultHistoryDetailsForGroup
	{
		
		public string GroupByValue { get; set; }
		
		/// <summary>
		/// Represents a test result.
		/// </summary>
		public TestCaseResult LatestResult { get; set; }
	}
	
	/// <summary>
	/// Represents a Meta Data of a test result.
	/// </summary>
	public class TestResultMetaData
	{
		
		/// <summary>
		/// AutomatedTestName of test result.
		/// </summary>
		public string AutomatedTestName { get; set; }
		
		/// <summary>
		/// AutomatedTestStorage of test result.
		/// </summary>
		public string AutomatedTestStorage { get; set; }
		
		/// <summary>
		/// List of Flaky Identifier for TestCaseReferenceId
		/// </summary>
		public TestFlakyIdentifier[] FlakyIdentifiers { get; set; }
		
		/// <summary>
		/// Owner of test result.
		/// </summary>
		public string Owner { get; set; }
		
		/// <summary>
		/// Priority of test result.
		/// </summary>
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// ID of TestCaseReference.
		/// </summary>
		public System.Nullable<System.Int32> TestCaseReferenceId { get; set; }
		
		/// <summary>
		/// TestCaseTitle of test result.
		/// </summary>
		public string TestCaseTitle { get; set; }
	}
	
	/// <summary>
	/// Represents a TestResultMetaData Input
	/// </summary>
	public class TestResultMetaDataUpdateInput
	{
		
		/// <summary>
		/// List of Flaky Identifiers
		/// </summary>
		public TestFlakyIdentifier[] FlakyIdentifiers { get; set; }
	}
	
	public class TestResultMetaDataUpdateResponse
	{
		
		public string Status { get; set; }
	}
	
	public class TestResultModelBase
	{
		
		/// <summary>
		/// Comment in result.
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Time when execution completed.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CompletedDate { get; set; }
		
		/// <summary>
		/// Duration of execution.
		/// </summary>
		public System.Nullable<System.Double> DurationInMs { get; set; }
		
		/// <summary>
		/// Error message in result.
		/// </summary>
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Test outcome of result.
		/// </summary>
		public string Outcome { get; set; }
		
		/// <summary>
		/// Time when execution started.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartedDate { get; set; }
	}
	
	public class TestResultReset2
	{
		
		public string AuditIdentity { get; set; }
		
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		public string ProjectId { get; set; }
		
		public System.Nullable<System.Int32> Revision { get; set; }
		
		public System.Nullable<System.Int32> TestResultId { get; set; }
		
		public string[] TestResultRV { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
	}
	
	public class TestResultsDetails
	{
		
		public string GroupByField { get; set; }
		
		public TestResultsDetailsForGroup[] ResultsForGroup { get; set; }
	}
	
	public class TestResultsDetailsForGroup
	{
		
		public string GroupByValue { get; set; }
		
		public TestCaseResult[] Results { get; set; }
		
		public System.Collections.Generic.Dictionary<string, AggregatedResultsByOutcome> ResultsCountByOutcome { get; set; }
		
		public string[] Tags { get; set; }
	}
	
	public class TestResultsEx2
	{
		
		public System.Nullable<System.Boolean> BitValue { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		public System.Nullable<System.DateTimeOffset> DateTimeValue { get; set; }
		
		public System.Nullable<System.Int32> FieldId { get; set; }
		
		public string FieldName { get; set; }
		
		public System.Nullable<System.Double> FloatValue { get; set; }
		
		public string GuidValue { get; set; }
		
		public System.Nullable<System.Int32> IntValue { get; set; }
		
		public string ProjectId { get; set; }
		
		public string StringValue { get; set; }
		
		public System.Nullable<System.Int32> TestResultId { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
	}
	
	public class TestResultsGroupsForBuild
	{
		
		/// <summary>
		/// BuildId for which groupby result is fetched.
		/// </summary>
		public System.Nullable<System.Int32> BuildId { get; set; }
		
		/// <summary>
		/// The group by results
		/// </summary>
		public FieldDetailsForTestResults[] Fields { get; set; }
	}
	
	public class TestResultsGroupsForRelease
	{
		
		/// <summary>
		/// The group by results
		/// </summary>
		public FieldDetailsForTestResults[] Fields { get; set; }
		
		/// <summary>
		/// Release Environment Id for which groupby result is fetched.
		/// </summary>
		public System.Nullable<System.Int32> ReleaseEnvId { get; set; }
		
		/// <summary>
		/// ReleaseId for which groupby result is fetched.
		/// </summary>
		public System.Nullable<System.Int32> ReleaseId { get; set; }
	}
	
	public class TestResultsQuery
	{
		
		public string[] Fields { get; set; }
		
		public TestCaseResult[] Results { get; set; }
		
		public ResultsFilter ResultsFilter { get; set; }
	}
	
	public class TestResultsSettings
	{
		
		public FlakySettings FlakySettings { get; set; }
		
		public NewTestResultLoggingSettings NewTestResultLoggingSettings { get; set; }
	}
	
	public class TestResultSummary
	{
		
		public AggregatedResultsAnalysis AggregatedResultsAnalysis { get; set; }
		
		public System.Nullable<System.Int32> NoConfigRunsCount { get; set; }
		
		/// <summary>
		/// Represents a shallow reference to a TeamProject.
		/// </summary>
		public TeamProjectReference TeamProject { get; set; }
		
		public TestFailuresAnalysis TestFailures { get; set; }
		
		public TestResultsContext TestResultsContext { get; set; }
		
		public System.Nullable<System.Int32> TotalRunsCount { get; set; }
	}
	
	public class TestResultsUpdateSettings
	{
		
		public FlakySettings FlakySettings { get; set; }
		
		public NewTestResultLoggingSettings NewTestResultLoggingSettings { get; set; }
	}
	
	public class TestResultsWithWatermark
	{
		
		public System.Nullable<System.DateTimeOffset> ChangedDate { get; set; }
		
		public PointsResults2[] PointsResults { get; set; }
		
		public System.Nullable<System.Int32> ResultId { get; set; }
		
		public System.Nullable<System.Int32> RunId { get; set; }
	}
	
	public class TestResultTrendFilter
	{
		
		public string[] BranchNames { get; set; }
		
		public System.Nullable<System.Int32> BuildCount { get; set; }
		
		public int[] DefinitionIds { get; set; }
		
		public int[] EnvDefinitionIds { get; set; }
		
		public System.Nullable<System.DateTimeOffset> MaxCompleteDate { get; set; }
		
		public string PublishContext { get; set; }
		
		public string[] TestRunTitles { get; set; }
		
		public System.Nullable<System.Int32> TrendDays { get; set; }
	}
	
	/// <summary>
	/// Test run details.
	/// </summary>
	public class TestRun
	{
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Build { get; set; }
		
		/// <summary>
		/// BuildConfiguration Details.
		/// </summary>
		public BuildConfiguration BuildConfiguration { get; set; }
		
		/// <summary>
		/// Comments entered by those analyzing the run.
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Completed date time of the run.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CompletedDate { get; set; }
		
		/// <summary>
		/// Test Run Controller.
		/// </summary>
		public string Controller { get; set; }
		
		/// <summary>
		/// Test Run CreatedDate.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// List of Custom Fields for TestRun.
		/// </summary>
		public CustomTestField[] CustomFields { get; set; }
		
		/// <summary>
		/// Drop Location for the test Run.
		/// </summary>
		public string DropLocation { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference DtlAutEnvironment { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference DtlEnvironment { get; set; }
		
		/// <summary>
		/// This is a temporary class to provide the details for the test run environment.
		/// </summary>
		public DtlEnvironmentDetails DtlEnvironmentCreationDetails { get; set; }
		
		/// <summary>
		/// Due date and time for test run.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> DueDate { get; set; }
		
		/// <summary>
		/// Error message associated with the run.
		/// </summary>
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// This class is used to provide the filters used for discovery
		/// </summary>
		public RunFilter Filter { get; set; }
		
		/// <summary>
		/// ID of the test run.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Number of Incomplete Tests.
		/// </summary>
		public System.Nullable<System.Int32> IncompleteTests { get; set; }
		
		/// <summary>
		/// true if test run is automated, false otherwise.
		/// </summary>
		public System.Nullable<System.Boolean> IsAutomated { get; set; }
		
		/// <summary>
		/// The iteration to which the run belongs.
		/// </summary>
		public string Iteration { get; set; }
		
		public IdentityRef LastUpdatedBy { get; set; }
		
		/// <summary>
		/// Last updated date and time
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastUpdatedDate { get; set; }
		
		/// <summary>
		/// Name of the test run.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Number of Not Applicable Tests.
		/// </summary>
		public System.Nullable<System.Int32> NotApplicableTests { get; set; }
		
		public IdentityRef Owner { get; set; }
		
		/// <summary>
		/// Number of passed tests in the run
		/// </summary>
		public System.Nullable<System.Int32> PassedTests { get; set; }
		
		/// <summary>
		/// Phase/State for the testRun.
		/// </summary>
		public string Phase { get; set; }
		
		/// <summary>
		/// Pipeline reference
		/// </summary>
		public PipelineReference PipelineReference { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Plan { get; set; }
		
		/// <summary>
		/// Post Process State.
		/// </summary>
		public string PostProcessState { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Project { get; set; }
		
		/// <summary>
		/// Reference to a release.
		/// </summary>
		public ReleaseReference Release { get; set; }
		
		/// <summary>
		/// Release Environment Uri for TestRun.
		/// </summary>
		public string ReleaseEnvironmentUri { get; set; }
		
		/// <summary>
		/// Release Uri for TestRun.
		/// </summary>
		public string ReleaseUri { get; set; }
		
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// RunSummary by outcome.
		/// </summary>
		public RunStatistic[] RunStatistics { get; set; }
		
		/// <summary>
		/// Start date time of the run.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartedDate { get; set; }
		
		/// <summary>
		/// The state of the run. Type TestRunState Valid states - Unspecified ,NotStarted, InProgress, Completed, Waiting, Aborted, NeedsInvestigation
		/// </summary>
		public string State { get; set; }
		
		/// <summary>
		/// TestRun Substate.
		/// </summary>
		public System.Nullable<TestRunSubstate> Substate { get; set; }
		
		/// <summary>
		/// Tags attached with this test run.
		/// </summary>
		public TestTag[] Tags { get; set; }
		
		/// <summary>
		/// Test environment Detail.
		/// </summary>
		public TestEnvironment TestEnvironment { get; set; }
		
		public System.Nullable<System.Int32> TestMessageLogId { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestSettings { get; set; }
		
		/// <summary>
		/// Total tests in the run
		/// </summary>
		public System.Nullable<System.Int32> TotalTests { get; set; }
		
		/// <summary>
		/// Number of failed tests in the run.
		/// </summary>
		public System.Nullable<System.Int32> UnanalyzedTests { get; set; }
		
		/// <summary>
		/// Url of the test run
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// Web Access Url for TestRun.
		/// </summary>
		public string WebAccessUrl { get; set; }
	}
	
	public enum TestRunSubstate
	{
		
		none = 0,
		
		creatingEnvironment = 1,
		
		runningTests = 2,
		
		canceledByUser = 3,
		
		abortedBySystem = 4,
		
		timedOut = 5,
		
		pendingAnalysis = 6,
		
		analyzed = 7,
		
		cancellationInProgress = 8,
	}
	
	public class TestRun2
	{
		
		public System.Nullable<System.Int32> BuildConfigurationId { get; set; }
		
		public string BuildNumber { get; set; }
		
		public string Comment { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CompleteDate { get; set; }
		
		public string Controller { get; set; }
		
		public System.Nullable<System.Int32> CoverageId { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		public System.Nullable<System.DateTimeOffset> DeletedOn { get; set; }
		
		public string DropLocation { get; set; }
		
		public System.Nullable<System.DateTimeOffset> DueDate { get; set; }
		
		public string ErrorMessage { get; set; }
		
		public System.Nullable<System.Int32> IncompleteTests { get; set; }
		
		public System.Nullable<System.Boolean> IsAutomated { get; set; }
		
		public System.Nullable<System.Boolean> IsBvt { get; set; }
		
		public System.Nullable<System.Boolean> IsMigrated { get; set; }
		
		public System.Nullable<System.Int32> IterationId { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		public string LastUpdatedBy { get; set; }
		
		public string LegacySharePath { get; set; }
		
		public System.Nullable<System.Int32> MaxReservedResultId { get; set; }
		
		public System.Nullable<System.Int32> NotApplicableTests { get; set; }
		
		public string Owner { get; set; }
		
		public System.Nullable<System.Int32> PassedTests { get; set; }
		
		public string PostProcessState { get; set; }
		
		public string ProjectId { get; set; }
		
		public System.Nullable<System.Int32> PublicTestSettingsId { get; set; }
		
		public string ReleaseEnvironmentUri { get; set; }
		
		public string ReleaseUri { get; set; }
		
		public System.Nullable<System.Int32> Revision { get; set; }
		
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		public string State { get; set; }
		
		public string TestEnvironmentId { get; set; }
		
		public System.Nullable<System.Int32> TestMessageLogId { get; set; }
		
		public System.Nullable<System.Int32> TestPlanId { get; set; }
		
		public System.Nullable<System.Int32> TestRunContextId { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
		
		public System.Nullable<System.Int32> TestSettingsId { get; set; }
		
		public string Title { get; set; }
		
		public System.Nullable<System.Int32> TotalTests { get; set; }
		
		public string Type { get; set; }
		
		public System.Nullable<System.Int32> UnanalyzedTests { get; set; }
		
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	public class TestRunCanceledEvent
	{
	}
	
	public class TestRunContext2
	{
		
		public System.Nullable<System.Int32> BuildRefId { get; set; }
		
		public string ProjectId { get; set; }
		
		public System.Nullable<System.Int32> ReleaseRefId { get; set; }
		
		public string SourceWorkflow { get; set; }
		
		public System.Nullable<System.Int32> TestRunContextId { get; set; }
	}
	
	/// <summary>
	/// Test Run Code Coverage Details
	/// </summary>
	public class TestRunCoverage
	{
		
		/// <summary>
		/// Last Error
		/// </summary>
		public string LastError { get; set; }
		
		/// <summary>
		/// List of Modules Coverage
		/// </summary>
		public ModuleCoverage[] Modules { get; set; }
		
		/// <summary>
		/// State
		/// </summary>
		public string State { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestRun { get; set; }
	}
	
	public class TestRunCreatedEvent
	{
	}
	
	public class TestRunEvent
	{
		
		/// <summary>
		/// Test run details.
		/// </summary>
		public TestRun TestRun { get; set; }
	}
	
	public class TestRunEx2
	{
		
		public System.Nullable<System.Boolean> BitValue { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		public System.Nullable<System.DateTimeOffset> DateTimeValue { get; set; }
		
		public System.Nullable<System.Int32> FieldId { get; set; }
		
		public string FieldName { get; set; }
		
		public System.Nullable<System.Double> FloatValue { get; set; }
		
		public string GuidValue { get; set; }
		
		public System.Nullable<System.Int32> IntValue { get; set; }
		
		public string ProjectId { get; set; }
		
		public string StringValue { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
	}
	
	public class TestRunExtended2
	{
		
		public string AutEnvironmentUrl { get; set; }
		
		public string CsmContent { get; set; }
		
		public string CsmParameters { get; set; }
		
		public string ProjectId { get; set; }
		
		public string SourceFilter { get; set; }
		
		public string SubscriptionName { get; set; }
		
		public string Substate { get; set; }
		
		public string TestCaseFilter { get; set; }
		
		public string TestEnvironmentUrl { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
	}
	
	public class TestRunStartedEvent
	{
	}
	
	/// <summary>
	/// Test run statistics.
	/// </summary>
	public class TestRunStatistic
	{
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Run { get; set; }
		
		public RunStatistic[] RunStatistics { get; set; }
	}
	
	public class TestRunSummary2
	{
		
		public System.Nullable<System.Boolean> IsRerun { get; set; }
		
		public string ProjectId { get; set; }
		
		public System.Nullable<System.Int32> ResultCount { get; set; }
		
		public System.Nullable<System.Int64> ResultDuration { get; set; }
		
		public System.Nullable<System.Int64> RunDuration { get; set; }
		
		public string TestOutcome { get; set; }
		
		public System.Nullable<System.DateTimeOffset> TestRunCompletedDate { get; set; }
		
		public System.Nullable<System.Int32> TestRunContextId { get; set; }
		
		public System.Nullable<System.Int32> TestRunId { get; set; }
		
		public System.Nullable<System.Int32> TestRunStatsId { get; set; }
	}
	
	public class TestRunWithDtlEnvEvent
	{
		
		public int[] ConfigurationIds { get; set; }
		
		public string MappedTestRunEventType { get; set; }
		
		public string RunTimeout { get; set; }
		
		public string TestConfigurationsMapping { get; set; }
	}
	
	/// <summary>
	/// Test Session
	/// </summary>
	public class TestSession
	{
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Area { get; set; }
		
		/// <summary>
		/// Comments in the test session
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Duration of the session
		/// </summary>
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// Id of the test session
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		public IdentityRef LastUpdatedBy { get; set; }
		
		/// <summary>
		/// Last updated date
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastUpdatedDate { get; set; }
		
		public IdentityRef Owner { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Project { get; set; }
		
		/// <summary>
		/// The class to represent a Generic store for test session data.
		/// </summary>
		public PropertyBag PropertyBag { get; set; }
		
		/// <summary>
		/// Revision of the test session
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// Source of the test session
		/// </summary>
		public System.Nullable<TestSessionSource> Source { get; set; }
		
		/// <summary>
		/// Start date
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// State of the test session
		/// </summary>
		public System.Nullable<TestSessionState> State { get; set; }
		
		/// <summary>
		/// Title of the test session
		/// </summary>
		public string Title { get; set; }
		
		/// <summary>
		/// Url of Test Session Resource
		/// </summary>
		public string Url { get; set; }
	}
	
	public enum TestSessionSource
	{
		
		unknown = 0,
		
		xtDesktop = 1,
		
		feedbackDesktop = 2,
		
		xtWeb = 3,
		
		feedbackWeb = 4,
		
		xtDesktop2 = 5,
		
		sessionInsightsForAll = 6,
	}
	
	public enum TestSessionState
	{
		
		unspecified = 0,
		
		notStarted = 1,
		
		inProgress = 2,
		
		paused = 3,
		
		completed = 4,
		
		declined = 5,
	}
	
	public class TestSessionExploredWorkItemReference
	{
		
		/// <summary>
		/// Workitem references of workitems filed as a part of the current workitem exploration.
		/// </summary>
		public TestSessionWorkItemReference[] AssociatedWorkItems { get; set; }
		
		/// <summary>
		/// Time when exploration of workitem ended.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Time when explore of workitem was started.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	public class TestSessionWorkItemReference
	{
		
		/// <summary>
		/// Id of the workitem
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Type of the workitem
		/// </summary>
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents the test settings of the run. Used to create test settings and fetch test settings
	/// </summary>
	public class TestSettings
	{
		
		/// <summary>
		/// Area path required to create test settings
		/// </summary>
		public string AreaPath { get; set; }
		
		/// <summary>
		/// Description of the test settings. Used in create test settings.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Indicates if the tests settings is public or private.Used in create test settings.
		/// </summary>
		public System.Nullable<System.Boolean> IsPublic { get; set; }
		
		/// <summary>
		/// Xml string of machine roles. Used in create test settings.
		/// </summary>
		public string MachineRoles { get; set; }
		
		/// <summary>
		/// Test settings content.
		/// </summary>
		public string TestSettingsContent { get; set; }
		
		/// <summary>
		/// Test settings id.
		/// </summary>
		public System.Nullable<System.Int32> TestSettingsId { get; set; }
		
		/// <summary>
		/// Test settings name.
		/// </summary>
		public string TestSettingsName { get; set; }
	}
	
	/// <summary>
	/// Represents the test settings of the run. Used to create test settings and fetch test settings
	/// </summary>
	public class TestSettings2
	{
		
		/// <summary>
		/// Area path required to create test settings
		/// </summary>
		public string AreaPath { get; set; }
		
		public IdentityRef CreatedBy { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Description of the test settings. Used in create test settings.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Indicates if the tests settings is public or private.Used in create test settings.
		/// </summary>
		public System.Nullable<System.Boolean> IsPublic { get; set; }
		
		public IdentityRef LastUpdatedBy { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastUpdatedDate { get; set; }
		
		/// <summary>
		/// Xml string of machine roles. Used in create test settings.
		/// </summary>
		public string MachineRoles { get; set; }
		
		/// <summary>
		/// Test settings content.
		/// </summary>
		public string TestSettingsContent { get; set; }
		
		/// <summary>
		/// Test settings id.
		/// </summary>
		public System.Nullable<System.Int32> TestSettingsId { get; set; }
		
		/// <summary>
		/// Test settings name.
		/// </summary>
		public string TestSettingsName { get; set; }
	}
	
	/// <summary>
	/// Test suite clone request
	/// </summary>
	public class TestSuiteCloneRequest
	{
		
		/// <summary>
		/// Clone options for cloning the test suite.
		/// </summary>
		public CloneOptions CloneOptions { get; set; }
		
		/// <summary>
		/// Suite id under which, we have to clone the suite.
		/// </summary>
		public System.Nullable<System.Int32> DestinationSuiteId { get; set; }
		
		/// <summary>
		/// Destination suite project name.
		/// </summary>
		public string DestinationSuiteProjectName { get; set; }
	}
	
	public class TestSummaryForWorkItem
	{
		
		public AggregatedDataForResultTrend Summary { get; set; }
		
		/// <summary>
		/// WorkItem reference Details.
		/// </summary>
		public WorkItemReference WorkItem { get; set; }
	}
	
	/// <summary>
	/// Test tag summary for build or release grouped by test run.
	/// </summary>
	public class TestTagSummary
	{
		
		/// <summary>
		/// Dictionary which contains tags associated with a test run.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, TestTag[]> TagsGroupByTestArtifact { get; set; }
	}
	
	/// <summary>
	/// Tags to update to a run or result.
	/// </summary>
	public class TestTagsUpdateModel
	{
		
		public string[] Tags { get; set; }
	}
	
	public class TestToWorkItemLinks
	{
		
		public TestMethod Test { get; set; }
		
		public WorkItemReference[] WorkItems { get; set; }
	}
	
	public class TestVariable
	{
		
		/// <summary>
		/// Description of the test variable
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Id of the test variable
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the test variable
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Project { get; set; }
		
		/// <summary>
		/// Revision
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// Url of the test variable
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// List of allowed values
		/// </summary>
		public string[] Values { get; set; }
	}
	
	public class UpdatedProperties
	{
		
		public System.Nullable<System.Int32> Id { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		public string LastUpdatedBy { get; set; }
		
		public string LastUpdatedByName { get; set; }
		
		public System.Nullable<System.Int32> Revision { get; set; }
	}
	
	public class UpdateTestRunRequest
	{
		
		public TestResultAttachment[] AttachmentsToAdd { get; set; }
		
		public TestResultAttachmentIdentity[] AttachmentsToDelete { get; set; }
		
		public string ProjectName { get; set; }
		
		public System.Nullable<System.Boolean> ShouldHyderate { get; set; }
		
		public LegacyTestRun TestRun { get; set; }
	}
	
	public class UpdateTestRunResponse
	{
		
		public int[] AttachmentIds { get; set; }
		
		public UpdatedProperties UpdatedProperties { get; set; }
	}
	
	public class UploadAttachmentsRequest
	{
		
		public HttpPostedTcmAttachment[] Attachments { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> RequestParams { get; set; }
	}
	
	/// <summary>
	/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
	/// </summary>
	public class VssJsonCollectionWrapper
	{
		
		public string Value { get; set; }
	}
	
	public class VssJsonCollectionWrapperBase
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	public class WorkItemToTestLinks
	{
		
		public System.Nullable<WorkItemToTestLinksExecutedIn> ExecutedIn { get; set; }
		
		public TestMethod[] Tests { get; set; }
		
		/// <summary>
		/// WorkItem reference Details.
		/// </summary>
		public WorkItemReference WorkItem { get; set; }
	}
	
	public enum WorkItemToTestLinksExecutedIn
	{
		
		any = 0,
		
		tcm = 1,
		
		tfs = 2,
	}
	
	public partial class MyClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public MyClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get code coverage data for a build.
		/// Code_Coverage_Get_Build_Code_Coverage {organization}/{project}/_apis/test/codecoverage
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="buildId">ID of the build for which code coverage data needs to be fetched.</param>
		/// <param name="flags">Value of flags determine the level of code coverage details to be fetched. Flags are additive. Expected Values are 1 for Modules, 2 for Functions, 4 for BlockData.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<BuildCoverage[]> Code_Coverage_Get_Build_Code_CoverageAsync(string organization, string project, int buildId, int flags, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/codecoverage&buildId="+buildId+"&flags="+flags+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BuildCoverage[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get code coverage data for a build.
		/// Code_Coverage_Get_Build_Code_Coverage {organization}/{project}/_apis/test/codecoverage
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="buildId">ID of the build for which code coverage data needs to be fetched.</param>
		/// <param name="flags">Value of flags determine the level of code coverage details to be fetched. Flags are additive. Expected Values are 1 for Modules, 2 for Functions, 4 for BlockData.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public BuildCoverage[] Code_Coverage_Get_Build_Code_Coverage(string organization, string project, int buildId, int flags, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/codecoverage&buildId="+buildId+"&flags="+flags+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BuildCoverage[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of test points.
		/// Points_List {organization}/{project}/_apis/test/Plans/{planId}/Suites/{suiteId}/points
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan.</param>
		/// <param name="suiteId">ID of the suite that contains the points.</param>
		/// <param name="witFields">Comma-separated list of work item field names.</param>
		/// <param name="configurationId">Get test points for specific configuration.</param>
		/// <param name="testCaseId">Get test points for a specific test case, valid when configurationId is not set.</param>
		/// <param name="testPointIds">Get test points for comma-separated list of test point IDs, valid only when configurationId and testCaseId are not set.</param>
		/// <param name="includePointDetails">Include all properties for the test point.</param>
		/// <param name="skip">Number of test points to skip..</param>
		/// <param name="top">Number of test points to return.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestPoint[]> Points_ListAsync(string organization, string project, int planId, int suiteId, string witFields, string configurationId, string testCaseId, string testPointIds, bool includePointDetails, int skip, int top, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Plans/"+planId+"/Suites/"+suiteId+"/points&witFields=" + (witFields==null? "" : Uri.EscapeDataString(witFields))+"&configurationId=" + (configurationId==null? "" : Uri.EscapeDataString(configurationId))+"&testCaseId=" + (testCaseId==null? "" : Uri.EscapeDataString(testCaseId))+"&testPointIds=" + (testPointIds==null? "" : Uri.EscapeDataString(testPointIds))+"&includePointDetails="+includePointDetails+"&$skip="+skip+"&$top="+top+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestPoint[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of test points.
		/// Points_List {organization}/{project}/_apis/test/Plans/{planId}/Suites/{suiteId}/points
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan.</param>
		/// <param name="suiteId">ID of the suite that contains the points.</param>
		/// <param name="witFields">Comma-separated list of work item field names.</param>
		/// <param name="configurationId">Get test points for specific configuration.</param>
		/// <param name="testCaseId">Get test points for a specific test case, valid when configurationId is not set.</param>
		/// <param name="testPointIds">Get test points for comma-separated list of test point IDs, valid only when configurationId and testCaseId are not set.</param>
		/// <param name="includePointDetails">Include all properties for the test point.</param>
		/// <param name="skip">Number of test points to skip..</param>
		/// <param name="top">Number of test points to return.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestPoint[] Points_List(string organization, string project, int planId, int suiteId, string witFields, string configurationId, string testCaseId, string testPointIds, bool includePointDetails, int skip, int top, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Plans/"+planId+"/Suites/"+suiteId+"/points&witFields=" + (witFields==null? "" : Uri.EscapeDataString(witFields))+"&configurationId=" + (configurationId==null? "" : Uri.EscapeDataString(configurationId))+"&testCaseId=" + (testCaseId==null? "" : Uri.EscapeDataString(testCaseId))+"&testPointIds=" + (testPointIds==null? "" : Uri.EscapeDataString(testPointIds))+"&includePointDetails="+includePointDetails+"&$skip="+skip+"&$top="+top+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestPoint[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a test point.
		/// Points_Get_Point {organization}/{project}/_apis/test/Plans/{planId}/Suites/{suiteId}/points/{pointIds}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan.</param>
		/// <param name="suiteId">ID of the suite that contains the point.</param>
		/// <param name="pointIds">ID of the test point to get.</param>
		/// <param name="witFields">Comma-separated list of work item field names.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestPoint> Points_Get_PointAsync(string organization, string project, int planId, int suiteId, int pointIds, string witFields, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Plans/"+planId+"/Suites/"+suiteId+"/points/"+pointIds+"&witFields=" + (witFields==null? "" : Uri.EscapeDataString(witFields))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestPoint>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a test point.
		/// Points_Get_Point {organization}/{project}/_apis/test/Plans/{planId}/Suites/{suiteId}/points/{pointIds}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan.</param>
		/// <param name="suiteId">ID of the suite that contains the point.</param>
		/// <param name="pointIds">ID of the test point to get.</param>
		/// <param name="witFields">Comma-separated list of work item field names.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestPoint Points_Get_Point(string organization, string project, int planId, int suiteId, int pointIds, string witFields, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Plans/"+planId+"/Suites/"+suiteId+"/points/"+pointIds+"&witFields=" + (witFields==null? "" : Uri.EscapeDataString(witFields))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestPoint>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update test points.
		/// Points_Update {organization}/{project}/_apis/test/Plans/{planId}/Suites/{suiteId}/points/{pointIds}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan.</param>
		/// <param name="suiteId">ID of the suite that contains the points.</param>
		/// <param name="pointIds">ID of the test point to get. Use a comma-separated list of IDs to update multiple test points.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Data to update.</param>
		/// <returns>successful operation</returns>
		public async Task<TestPoint[]> Points_UpdateAsync(string organization, string project, int planId, int suiteId, string pointIds, string api_version, PointUpdateModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Plans/"+planId+"/Suites/"+suiteId+"/points/"+ (pointIds==null? "" : Uri.EscapeDataString(pointIds))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestPoint[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update test points.
		/// Points_Update {organization}/{project}/_apis/test/Plans/{planId}/Suites/{suiteId}/points/{pointIds}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan.</param>
		/// <param name="suiteId">ID of the suite that contains the points.</param>
		/// <param name="pointIds">ID of the test point to get. Use a comma-separated list of IDs to update multiple test points.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Data to update.</param>
		/// <returns>successful operation</returns>
		public TestPoint[] Points_Update(string organization, string project, int planId, int suiteId, string pointIds, string api_version, PointUpdateModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Plans/"+planId+"/Suites/"+suiteId+"/points/"+ (pointIds==null? "" : Uri.EscapeDataString(pointIds))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestPoint[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all test cases in a suite.
		/// Test__Suites_List {organization}/{project}/_apis/test/Plans/{planId}/suites/{suiteId}/testcases
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan that contains the suites.</param>
		/// <param name="suiteId">ID of the suite to get.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<SuiteTestCase[]> Test__Suites_ListAsync(string organization, string project, int planId, int suiteId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Plans/"+planId+"/suites/"+suiteId+"/testcases&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SuiteTestCase[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all test cases in a suite.
		/// Test__Suites_List {organization}/{project}/_apis/test/Plans/{planId}/suites/{suiteId}/testcases
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan that contains the suites.</param>
		/// <param name="suiteId">ID of the suite to get.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public SuiteTestCase[] Test__Suites_List(string organization, string project, int planId, int suiteId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Plans/"+planId+"/suites/"+suiteId+"/testcases&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SuiteTestCase[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific test case in a test suite with test case id.
		/// Test__Suites_Get {organization}/{project}/_apis/test/Plans/{planId}/suites/{suiteId}/testcases/{testCaseIds}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan that contains the suites.</param>
		/// <param name="suiteId">ID of the suite that contains the test case.</param>
		/// <param name="testCaseIds">ID of the test case to get.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<SuiteTestCase> Test__Suites_GetAsync(string organization, string project, int planId, int suiteId, int testCaseIds, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Plans/"+planId+"/suites/"+suiteId+"/testcases/"+testCaseIds+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SuiteTestCase>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific test case in a test suite with test case id.
		/// Test__Suites_Get {organization}/{project}/_apis/test/Plans/{planId}/suites/{suiteId}/testcases/{testCaseIds}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan that contains the suites.</param>
		/// <param name="suiteId">ID of the suite that contains the test case.</param>
		/// <param name="testCaseIds">ID of the test case to get.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public SuiteTestCase Test__Suites_Get(string organization, string project, int planId, int suiteId, int testCaseIds, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Plans/"+planId+"/suites/"+suiteId+"/testcases/"+testCaseIds+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SuiteTestCase>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add test cases to suite.
		/// Test__Suites_Add {organization}/{project}/_apis/test/Plans/{planId}/suites/{suiteId}/testcases/{testCaseIds}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan that contains the suite.</param>
		/// <param name="suiteId">ID of the test suite to which the test cases must be added.</param>
		/// <param name="testCaseIds">IDs of the test cases to add to the suite. Ids are specified in comma separated format.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<SuiteTestCase[]> Test__Suites_AddAsync(string organization, string project, int planId, int suiteId, string testCaseIds, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Plans/"+planId+"/suites/"+suiteId+"/testcases/"+ (testCaseIds==null? "" : Uri.EscapeDataString(testCaseIds))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SuiteTestCase[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add test cases to suite.
		/// Test__Suites_Add {organization}/{project}/_apis/test/Plans/{planId}/suites/{suiteId}/testcases/{testCaseIds}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan that contains the suite.</param>
		/// <param name="suiteId">ID of the test suite to which the test cases must be added.</param>
		/// <param name="testCaseIds">IDs of the test cases to add to the suite. Ids are specified in comma separated format.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public SuiteTestCase[] Test__Suites_Add(string organization, string project, int planId, int suiteId, string testCaseIds, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Plans/"+planId+"/suites/"+suiteId+"/testcases/"+ (testCaseIds==null? "" : Uri.EscapeDataString(testCaseIds))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SuiteTestCase[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The test points associated with the test cases are removed from the test suite. The test case work item is not deleted from the system. See test cases resource to delete a test case permanently.
		/// Test__Suites_Remove_Test_Cases_From_Suite_Url {organization}/{project}/_apis/test/Plans/{planId}/suites/{suiteId}/testcases/{testCaseIds}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan that contains the suite.</param>
		/// <param name="suiteId">ID of the suite to get.</param>
		/// <param name="testCaseIds">IDs of the test cases to remove from the suite.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Test__Suites_Remove_Test_Cases_From_Suite_UrlAsync(string organization, string project, int planId, int suiteId, string testCaseIds, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Plans/"+planId+"/suites/"+suiteId+"/testcases/"+ (testCaseIds==null? "" : Uri.EscapeDataString(testCaseIds))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The test points associated with the test cases are removed from the test suite. The test case work item is not deleted from the system. See test cases resource to delete a test case permanently.
		/// Test__Suites_Remove_Test_Cases_From_Suite_Url {organization}/{project}/_apis/test/Plans/{planId}/suites/{suiteId}/testcases/{testCaseIds}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan that contains the suite.</param>
		/// <param name="suiteId">ID of the suite to get.</param>
		/// <param name="testCaseIds">IDs of the test cases to remove from the suite.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Test__Suites_Remove_Test_Cases_From_Suite_Url(string organization, string project, int planId, int suiteId, string testCaseIds, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Plans/"+planId+"/suites/"+suiteId+"/testcases/"+ (testCaseIds==null? "" : Uri.EscapeDataString(testCaseIds))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the properties of the test case association in a suite.
		/// Test__Suites_Update {organization}/{project}/_apis/test/Plans/{planId}/suites/{suiteId}/testcases/{testCaseIds}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan that contains the suite.</param>
		/// <param name="suiteId">ID of the test suite to which the test cases must be added.</param>
		/// <param name="testCaseIds">IDs of the test cases to add to the suite. Ids are specified in comma separated format.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <param name="requestBody">Model for updation of the properties of test case suite association.</param>
		/// <returns>successful operation</returns>
		public async Task<SuiteTestCase[]> Test__Suites_UpdateAsync(string organization, string project, int planId, int suiteId, string testCaseIds, string api_version, SuiteTestCaseUpdateModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Plans/"+planId+"/suites/"+suiteId+"/testcases/"+ (testCaseIds==null? "" : Uri.EscapeDataString(testCaseIds))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SuiteTestCase[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the properties of the test case association in a suite.
		/// Test__Suites_Update {organization}/{project}/_apis/test/Plans/{planId}/suites/{suiteId}/testcases/{testCaseIds}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan that contains the suite.</param>
		/// <param name="suiteId">ID of the test suite to which the test cases must be added.</param>
		/// <param name="testCaseIds">IDs of the test cases to add to the suite. Ids are specified in comma separated format.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <param name="requestBody">Model for updation of the properties of test case suite association.</param>
		/// <returns>successful operation</returns>
		public SuiteTestCase[] Test__Suites_Update(string organization, string project, int planId, int suiteId, string testCaseIds, string api_version, SuiteTestCaseUpdateModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Plans/"+planId+"/suites/"+suiteId+"/testcases/"+ (testCaseIds==null? "" : Uri.EscapeDataString(testCaseIds))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SuiteTestCase[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get test points using query.
		/// Points_Get_Points_By_Query {organization}/{project}/_apis/test/points
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="skip">Number of test points to skip..</param>
		/// <param name="top">Number of test points to return.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">TestPointsQuery to get test points.</param>
		/// <returns>successful operation</returns>
		public async Task<TestPointsQuery> Points_Get_Points_By_QueryAsync(string organization, string project, int skip, int top, string api_version, TestPointsQuery requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/points&$skip="+skip+"&$top="+top+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestPointsQuery>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get test points using query.
		/// Points_Get_Points_By_Query {organization}/{project}/_apis/test/points
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="skip">Number of test points to skip..</param>
		/// <param name="top">Number of test points to return.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">TestPointsQuery to get test points.</param>
		/// <returns>successful operation</returns>
		public TestPointsQuery Points_Get_Points_By_Query(string organization, string project, int skip, int top, string api_version, TestPointsQuery requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/points&$skip="+skip+"&$top="+top+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestPointsQuery>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get test result retention settings
		/// Result_Retention_Settings_Get {organization}/{project}/_apis/test/resultretentionsettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ResultRetentionSettings> Result_Retention_Settings_GetAsync(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/resultretentionsettings&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResultRetentionSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get test result retention settings
		/// Result_Retention_Settings_Get {organization}/{project}/_apis/test/resultretentionsettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ResultRetentionSettings Result_Retention_Settings_Get(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/resultretentionsettings&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResultRetentionSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update test result retention settings
		/// Result_Retention_Settings_Update {organization}/{project}/_apis/test/resultretentionsettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Test result retention settings details to be updated</param>
		/// <returns>successful operation</returns>
		public async Task<ResultRetentionSettings> Result_Retention_Settings_UpdateAsync(string organization, string project, string api_version, ResultRetentionSettings requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/resultretentionsettings&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResultRetentionSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update test result retention settings
		/// Result_Retention_Settings_Update {organization}/{project}/_apis/test/resultretentionsettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Test result retention settings details to be updated</param>
		/// <returns>successful operation</returns>
		public ResultRetentionSettings Result_Retention_Settings_Update(string organization, string project, string api_version, ResultRetentionSettings requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/resultretentionsettings&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResultRetentionSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get history of a test method using TestHistoryQuery
		/// Test_History_Query {organization}/{project}/_apis/test/Results/testhistory
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">TestHistoryQuery to get history</param>
		/// <returns>successful operation</returns>
		public async Task<TestHistoryQuery> Test_History_QueryAsync(string organization, string project, string api_version, TestHistoryQuery requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Results/testhistory&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestHistoryQuery>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get history of a test method using TestHistoryQuery
		/// Test_History_Query {organization}/{project}/_apis/test/Results/testhistory
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">TestHistoryQuery to get history</param>
		/// <returns>successful operation</returns>
		public TestHistoryQuery Test_History_Query(string organization, string project, string api_version, TestHistoryQuery requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Results/testhistory&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestHistoryQuery>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of test runs.
		/// Runs_List {organization}/{project}/_apis/test/runs
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="buildUri">URI of the build that the runs used.</param>
		/// <param name="owner">Team foundation ID of the owner of the runs.</param>
		/// <param name="planId">ID of the test plan that the runs are a part of.</param>
		/// <param name="includeRunDetails">If true, include all the properties of the runs.</param>
		/// <param name="automated">If true, only returns automated runs.</param>
		/// <param name="skip">Number of test runs to skip.</param>
		/// <param name="top">Number of test runs to return.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestRun[]> Runs_ListAsync(string organization, string project, string buildUri, string owner, string tmiRunId, int planId, bool includeRunDetails, bool automated, int skip, int top, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/runs&buildUri=" + (buildUri==null? "" : Uri.EscapeDataString(buildUri))+"&owner=" + (owner==null? "" : Uri.EscapeDataString(owner))+"&tmiRunId=" + (tmiRunId==null? "" : Uri.EscapeDataString(tmiRunId))+"&planId="+planId+"&includeRunDetails="+includeRunDetails+"&automated="+automated+"&$skip="+skip+"&$top="+top+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRun[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of test runs.
		/// Runs_List {organization}/{project}/_apis/test/runs
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="buildUri">URI of the build that the runs used.</param>
		/// <param name="owner">Team foundation ID of the owner of the runs.</param>
		/// <param name="planId">ID of the test plan that the runs are a part of.</param>
		/// <param name="includeRunDetails">If true, include all the properties of the runs.</param>
		/// <param name="automated">If true, only returns automated runs.</param>
		/// <param name="skip">Number of test runs to skip.</param>
		/// <param name="top">Number of test runs to return.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestRun[] Runs_List(string organization, string project, string buildUri, string owner, string tmiRunId, int planId, bool includeRunDetails, bool automated, int skip, int top, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/runs&buildUri=" + (buildUri==null? "" : Uri.EscapeDataString(buildUri))+"&owner=" + (owner==null? "" : Uri.EscapeDataString(owner))+"&tmiRunId=" + (tmiRunId==null? "" : Uri.EscapeDataString(tmiRunId))+"&planId="+planId+"&includeRunDetails="+includeRunDetails+"&automated="+automated+"&$skip="+skip+"&$top="+top+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRun[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new test run.
		/// Runs_Create {organization}/{project}/_apis/test/runs
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <param name="requestBody">Run details RunCreateModel</param>
		/// <returns>successful operation</returns>
		public async Task<TestRun> Runs_CreateAsync(string organization, string project, string api_version, RunCreateModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/runs&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create new test run.
		/// Runs_Create {organization}/{project}/_apis/test/runs
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <param name="requestBody">Run details RunCreateModel</param>
		/// <returns>successful operation</returns>
		public TestRun Runs_Create(string organization, string project, string api_version, RunCreateModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/runs&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a test run by its ID.
		/// Runs_Get_Test_Run_By_Id {organization}/{project}/_apis/test/runs/{runId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the run to get.</param>
		/// <param name="includeDetails">Default value is true. It includes details like run statistics, release, build, test environment, post process state, and more.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestRun> Runs_Get_Test_Run_By_IdAsync(string organization, string project, int runId, bool includeDetails, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/runs/"+runId+"&includeDetails="+includeDetails+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a test run by its ID.
		/// Runs_Get_Test_Run_By_Id {organization}/{project}/_apis/test/runs/{runId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the run to get.</param>
		/// <param name="includeDetails">Default value is true. It includes details like run statistics, release, build, test environment, post process state, and more.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestRun Runs_Get_Test_Run_By_Id(string organization, string project, int runId, bool includeDetails, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/runs/"+runId+"&includeDetails="+includeDetails+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a test run by its ID.
		/// Runs_Delete {organization}/{project}/_apis/test/runs/{runId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the run to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Runs_DeleteAsync(string organization, string project, int runId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/runs/"+runId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a test run by its ID.
		/// Runs_Delete {organization}/{project}/_apis/test/runs/{runId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the run to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Runs_Delete(string organization, string project, int runId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/runs/"+runId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update test run by its ID.
		/// Runs_Update {organization}/{project}/_apis/test/runs/{runId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the run to update.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <param name="requestBody">Run details RunUpdateModel</param>
		/// <returns>successful operation</returns>
		public async Task<TestRun> Runs_UpdateAsync(string organization, string project, int runId, string api_version, RunUpdateModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/runs/"+runId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update test run by its ID.
		/// Runs_Update {organization}/{project}/_apis/test/runs/{runId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the run to update.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <param name="requestBody">Run details RunUpdateModel</param>
		/// <returns>successful operation</returns>
		public TestRun Runs_Update(string organization, string project, int runId, string api_version, RunUpdateModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/runs/"+runId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get list of test run attachments reference.
		/// Attachments_Get_Test_Run_Attachments {organization}/{project}/_apis/test/Runs/{runId}/attachments
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestAttachment[]> Attachments_Get_Test_Run_AttachmentsAsync(string organization, string project, int runId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/attachments&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestAttachment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of test run attachments reference.
		/// Attachments_Get_Test_Run_Attachments {organization}/{project}/_apis/test/Runs/{runId}/attachments
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestAttachment[] Attachments_Get_Test_Run_Attachments(string organization, string project, int runId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/attachments&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestAttachment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attach a file to a test run.
		/// Attachments_Create_Test_Run_Attachment {organization}/{project}/_apis/test/Runs/{runId}/attachments
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run against which attachment has to be uploaded.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Attachment details TestAttachmentRequestModel</param>
		/// <returns>successful operation</returns>
		public async Task<TestAttachmentReference> Attachments_Create_Test_Run_AttachmentAsync(string organization, string project, int runId, string api_version, TestAttachmentRequestModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/attachments&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestAttachmentReference>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Attach a file to a test run.
		/// Attachments_Create_Test_Run_Attachment {organization}/{project}/_apis/test/Runs/{runId}/attachments
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run against which attachment has to be uploaded.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Attachment details TestAttachmentRequestModel</param>
		/// <returns>successful operation</returns>
		public TestAttachmentReference Attachments_Create_Test_Run_Attachment(string organization, string project, int runId, string api_version, TestAttachmentRequestModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/attachments&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestAttachmentReference>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Download a test run attachment by its ID.
		/// Attachments_Get_Test_Run_Attachment_Zip {organization}/{project}/_apis/test/Runs/{runId}/attachments/{attachmentId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run whose attachment has to be downloaded.</param>
		/// <param name="attachmentId">ID of the test run attachment to be downloaded.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Attachments_Get_Test_Run_Attachment_ZipAsync(string organization, string project, int runId, int attachmentId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/attachments/"+attachmentId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download a test run attachment by its ID.
		/// Attachments_Get_Test_Run_Attachment_Zip {organization}/{project}/_apis/test/Runs/{runId}/attachments/{attachmentId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run whose attachment has to be downloaded.</param>
		/// <param name="attachmentId">ID of the test run attachment to be downloaded.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Attachments_Get_Test_Run_Attachment_Zip(string organization, string project, int runId, int attachmentId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/attachments/"+attachmentId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get code coverage data for a test run
		/// Code_Coverage_Get_Test_Run_Code_Coverage {organization}/{project}/_apis/test/Runs/{runId}/codecoverage
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run for which code coverage data needs to be fetched.</param>
		/// <param name="flags">Value of flags determine the level of code coverage details to be fetched. Flags are additive. Expected Values are 1 for Modules, 2 for Functions, 4 for BlockData.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestRunCoverage[]> Code_Coverage_Get_Test_Run_Code_CoverageAsync(string organization, string project, int runId, int flags, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/codecoverage&flags="+flags+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRunCoverage[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get code coverage data for a test run
		/// Code_Coverage_Get_Test_Run_Code_Coverage {organization}/{project}/_apis/test/Runs/{runId}/codecoverage
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run for which code coverage data needs to be fetched.</param>
		/// <param name="flags">Value of flags determine the level of code coverage details to be fetched. Flags are additive. Expected Values are 1 for Modules, 2 for Functions, 4 for BlockData.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestRunCoverage[] Code_Coverage_Get_Test_Run_Code_Coverage(string organization, string project, int runId, int flags, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/codecoverage&flags="+flags+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRunCoverage[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get test results for a test run.
		/// Results_List {organization}/{project}/_apis/test/Runs/{runId}/results
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">Test run ID of test results to fetch.</param>
		/// <param name="detailsToInclude">Details to include with test results. Default is None. Other values are Iterations and WorkItems.</param>
		/// <param name="skip">Number of test results to skip from beginning.</param>
		/// <param name="top">Number of test results to return. Maximum is 1000 when detailsToInclude is None and 200 otherwise.</param>
		/// <param name="outcomes">Comma separated list of test outcomes to filter test results.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.6' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestCaseResult[]> Results_ListAsync(string organization, string project, int runId, Results_ListDetailsToInclude detailsToInclude, int skip, int top, string outcomes, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/results&detailsToInclude=" + detailsToInclude+"&$skip="+skip+"&$top="+top+"&outcomes=" + (outcomes==null? "" : Uri.EscapeDataString(outcomes))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestCaseResult[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get test results for a test run.
		/// Results_List {organization}/{project}/_apis/test/Runs/{runId}/results
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">Test run ID of test results to fetch.</param>
		/// <param name="detailsToInclude">Details to include with test results. Default is None. Other values are Iterations and WorkItems.</param>
		/// <param name="skip">Number of test results to skip from beginning.</param>
		/// <param name="top">Number of test results to return. Maximum is 1000 when detailsToInclude is None and 200 otherwise.</param>
		/// <param name="outcomes">Comma separated list of test outcomes to filter test results.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.6' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestCaseResult[] Results_List(string organization, string project, int runId, Results_ListDetailsToInclude detailsToInclude, int skip, int top, string outcomes, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/results&detailsToInclude=" + detailsToInclude+"&$skip="+skip+"&$top="+top+"&outcomes=" + (outcomes==null? "" : Uri.EscapeDataString(outcomes))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestCaseResult[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add test results to a test run.
		/// Results_Add {organization}/{project}/_apis/test/Runs/{runId}/results
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">Test run ID into which test results to add.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.6' to use this version of the api.</param>
		/// <param name="requestBody">List of test results to add.</param>
		/// <returns>successful operation</returns>
		public async Task<TestCaseResult[]> Results_AddAsync(string organization, string project, int runId, string api_version, TestCaseResult[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/results&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestCaseResult[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add test results to a test run.
		/// Results_Add {organization}/{project}/_apis/test/Runs/{runId}/results
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">Test run ID into which test results to add.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.6' to use this version of the api.</param>
		/// <param name="requestBody">List of test results to add.</param>
		/// <returns>successful operation</returns>
		public TestCaseResult[] Results_Add(string organization, string project, int runId, string api_version, TestCaseResult[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/results&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestCaseResult[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update test results in a test run.
		/// Results_Update {organization}/{project}/_apis/test/Runs/{runId}/results
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">Test run ID whose test results to update.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.6' to use this version of the api.</param>
		/// <param name="requestBody">List of test results to update.</param>
		/// <returns>successful operation</returns>
		public async Task<TestCaseResult[]> Results_UpdateAsync(string organization, string project, int runId, string api_version, TestCaseResult[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/results&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestCaseResult[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update test results in a test run.
		/// Results_Update {organization}/{project}/_apis/test/Runs/{runId}/results
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">Test run ID whose test results to update.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.6' to use this version of the api.</param>
		/// <param name="requestBody">List of test results to update.</param>
		/// <returns>successful operation</returns>
		public TestCaseResult[] Results_Update(string organization, string project, int runId, string api_version, TestCaseResult[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/results&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestCaseResult[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a test result for a test run.
		/// Results_Get {organization}/{project}/_apis/test/Runs/{runId}/results/{testCaseResultId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">Test run ID of a test result to fetch.</param>
		/// <param name="testCaseResultId">Test result ID.</param>
		/// <param name="detailsToInclude">Details to include with test results. Default is None. Other values are Iterations, WorkItems and SubResults.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.6' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestCaseResult> Results_GetAsync(string organization, string project, int runId, int testCaseResultId, Results_ListDetailsToInclude detailsToInclude, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/results/"+testCaseResultId+"&detailsToInclude=" + detailsToInclude+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestCaseResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a test result for a test run.
		/// Results_Get {organization}/{project}/_apis/test/Runs/{runId}/results/{testCaseResultId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">Test run ID of a test result to fetch.</param>
		/// <param name="testCaseResultId">Test result ID.</param>
		/// <param name="detailsToInclude">Details to include with test results. Default is None. Other values are Iterations, WorkItems and SubResults.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.6' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestCaseResult Results_Get(string organization, string project, int runId, int testCaseResultId, Results_ListDetailsToInclude detailsToInclude, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/results/"+testCaseResultId+"&detailsToInclude=" + detailsToInclude+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestCaseResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of test result attachments reference.
		/// Attachments_Get_Test_Result_Attachments {organization}/{project}/_apis/test/Runs/{runId}/Results/{testCaseResultId}/attachments
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run that contains the result.</param>
		/// <param name="testCaseResultId">ID of the test result.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestAttachment[]> Attachments_Get_Test_Result_AttachmentsAsync(string organization, string project, int runId, int testCaseResultId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/Results/"+testCaseResultId+"/attachments&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestAttachment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of test result attachments reference.
		/// Attachments_Get_Test_Result_Attachments {organization}/{project}/_apis/test/Runs/{runId}/Results/{testCaseResultId}/attachments
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run that contains the result.</param>
		/// <param name="testCaseResultId">ID of the test result.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestAttachment[] Attachments_Get_Test_Result_Attachments(string organization, string project, int runId, int testCaseResultId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/Results/"+testCaseResultId+"/attachments&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestAttachment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attach a file to a test result.
		/// Attachments_Create_Test_Result_Attachment {organization}/{project}/_apis/test/Runs/{runId}/Results/{testCaseResultId}/attachments
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run that contains the result.</param>
		/// <param name="testCaseResultId">ID of the test result against which attachment has to be uploaded.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Attachment details TestAttachmentRequestModel</param>
		/// <returns>successful operation</returns>
		public async Task<TestAttachmentReference> Attachments_Create_Test_Result_AttachmentAsync(string organization, string project, int runId, int testCaseResultId, string api_version, TestAttachmentRequestModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/Results/"+testCaseResultId+"/attachments&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestAttachmentReference>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Attach a file to a test result.
		/// Attachments_Create_Test_Result_Attachment {organization}/{project}/_apis/test/Runs/{runId}/Results/{testCaseResultId}/attachments
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run that contains the result.</param>
		/// <param name="testCaseResultId">ID of the test result against which attachment has to be uploaded.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Attachment details TestAttachmentRequestModel</param>
		/// <returns>successful operation</returns>
		public TestAttachmentReference Attachments_Create_Test_Result_Attachment(string organization, string project, int runId, int testCaseResultId, string api_version, TestAttachmentRequestModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/Results/"+testCaseResultId+"/attachments&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestAttachmentReference>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Download a test result attachment by its ID.
		/// Attachments_Get_Test_Result_Attachment_Zip {organization}/{project}/_apis/test/Runs/{runId}/Results/{testCaseResultId}/attachments/{attachmentId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run that contains the testCaseResultId.</param>
		/// <param name="testCaseResultId">ID of the test result whose attachment has to be downloaded.</param>
		/// <param name="attachmentId">ID of the test result attachment to be downloaded.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Attachments_Get_Test_Result_Attachment_ZipAsync(string organization, string project, int runId, int testCaseResultId, int attachmentId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/Results/"+testCaseResultId+"/attachments/"+attachmentId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download a test result attachment by its ID.
		/// Attachments_Get_Test_Result_Attachment_Zip {organization}/{project}/_apis/test/Runs/{runId}/Results/{testCaseResultId}/attachments/{attachmentId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run that contains the testCaseResultId.</param>
		/// <param name="testCaseResultId">ID of the test result whose attachment has to be downloaded.</param>
		/// <param name="attachmentId">ID of the test result attachment to be downloaded.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Attachments_Get_Test_Result_Attachment_Zip(string organization, string project, int runId, int testCaseResultId, int attachmentId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/Results/"+testCaseResultId+"/attachments/"+attachmentId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get iterations for a result
		/// Iterations_List {organization}/{project}/_apis/test/Runs/{runId}/Results/{testCaseResultId}/iterations
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run that contains the result.</param>
		/// <param name="testCaseResultId">ID of the test result that contains the iterations.</param>
		/// <param name="includeActionResults">Include result details for each action performed in the test iteration. ActionResults refer to outcome (pass/fail) of test steps that are executed as part of a running a manual test. Including the ActionResults flag gets the outcome of test steps in the actionResults section and test parameters in the parameters section for each test iteration.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestIterationDetailsModel[]> Iterations_ListAsync(string organization, string project, int runId, int testCaseResultId, bool includeActionResults, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/Results/"+testCaseResultId+"/iterations&includeActionResults="+includeActionResults+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestIterationDetailsModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get iterations for a result
		/// Iterations_List {organization}/{project}/_apis/test/Runs/{runId}/Results/{testCaseResultId}/iterations
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run that contains the result.</param>
		/// <param name="testCaseResultId">ID of the test result that contains the iterations.</param>
		/// <param name="includeActionResults">Include result details for each action performed in the test iteration. ActionResults refer to outcome (pass/fail) of test steps that are executed as part of a running a manual test. Including the ActionResults flag gets the outcome of test steps in the actionResults section and test parameters in the parameters section for each test iteration.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestIterationDetailsModel[] Iterations_List(string organization, string project, int runId, int testCaseResultId, bool includeActionResults, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/Results/"+testCaseResultId+"/iterations&includeActionResults="+includeActionResults+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestIterationDetailsModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get iteration for a result
		/// Iterations_Get {organization}/{project}/_apis/test/Runs/{runId}/Results/{testCaseResultId}/iterations/{iterationId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run that contains the result.</param>
		/// <param name="testCaseResultId">ID of the test result that contains the iterations.</param>
		/// <param name="iterationId">Id of the test results Iteration.</param>
		/// <param name="includeActionResults">Include result details for each action performed in the test iteration. ActionResults refer to outcome (pass/fail) of test steps that are executed as part of a running a manual test. Including the ActionResults flag gets the outcome of test steps in the actionResults section and test parameters in the parameters section for each test iteration.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestIterationDetailsModel> Iterations_GetAsync(string organization, string project, int runId, int testCaseResultId, int iterationId, bool includeActionResults, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/Results/"+testCaseResultId+"/iterations/"+iterationId+"&includeActionResults="+includeActionResults+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestIterationDetailsModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get iteration for a result
		/// Iterations_Get {organization}/{project}/_apis/test/Runs/{runId}/Results/{testCaseResultId}/iterations/{iterationId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run that contains the result.</param>
		/// <param name="testCaseResultId">ID of the test result that contains the iterations.</param>
		/// <param name="iterationId">Id of the test results Iteration.</param>
		/// <param name="includeActionResults">Include result details for each action performed in the test iteration. ActionResults refer to outcome (pass/fail) of test steps that are executed as part of a running a manual test. Including the ActionResults flag gets the outcome of test steps in the actionResults section and test parameters in the parameters section for each test iteration.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestIterationDetailsModel Iterations_Get(string organization, string project, int runId, int testCaseResultId, int iterationId, bool includeActionResults, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/Results/"+testCaseResultId+"/iterations/"+iterationId+"&includeActionResults="+includeActionResults+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestIterationDetailsModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the action results for an iteration in a test result.
		/// Action_Results_List {organization}/{project}/_apis/test/Runs/{runId}/Results/{testCaseResultId}/Iterations/{iterationId}/actionresults/{actionPath}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run that contains the result.</param>
		/// <param name="testCaseResultId">ID of the test result that contains the iterations.</param>
		/// <param name="iterationId">ID of the iteration that contains the actions.</param>
		/// <param name="actionPath">Path of a specific action, used to get just that action.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestActionResultModel[]> Action_Results_ListAsync(string organization, string project, int runId, int testCaseResultId, int iterationId, string actionPath, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/Results/"+testCaseResultId+"/Iterations/"+iterationId+"/actionresults/"+ (actionPath==null? "" : Uri.EscapeDataString(actionPath))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestActionResultModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the action results for an iteration in a test result.
		/// Action_Results_List {organization}/{project}/_apis/test/Runs/{runId}/Results/{testCaseResultId}/Iterations/{iterationId}/actionresults/{actionPath}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run that contains the result.</param>
		/// <param name="testCaseResultId">ID of the test result that contains the iterations.</param>
		/// <param name="iterationId">ID of the iteration that contains the actions.</param>
		/// <param name="actionPath">Path of a specific action, used to get just that action.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestActionResultModel[] Action_Results_List(string organization, string project, int runId, int testCaseResultId, int iterationId, string actionPath, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/Results/"+testCaseResultId+"/Iterations/"+iterationId+"/actionresults/"+ (actionPath==null? "" : Uri.EscapeDataString(actionPath))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestActionResultModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of parameterized results
		/// Parameter_Results_List {organization}/{project}/_apis/test/Runs/{runId}/Results/{testCaseResultId}/Iterations/{iterationId}/parameterresults
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run that contains the result.</param>
		/// <param name="testCaseResultId">ID of the test result that contains the iterations.</param>
		/// <param name="iterationId">ID of the iteration that contains the parameterized results.</param>
		/// <param name="paramName">Name of the parameter.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestResultParameterModel[]> Parameter_Results_ListAsync(string organization, string project, int runId, int testCaseResultId, int iterationId, string paramName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/Results/"+testCaseResultId+"/Iterations/"+iterationId+"/parameterresults&paramName=" + (paramName==null? "" : Uri.EscapeDataString(paramName))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestResultParameterModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of parameterized results
		/// Parameter_Results_List {organization}/{project}/_apis/test/Runs/{runId}/Results/{testCaseResultId}/Iterations/{iterationId}/parameterresults
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the test run that contains the result.</param>
		/// <param name="testCaseResultId">ID of the test result that contains the iterations.</param>
		/// <param name="iterationId">ID of the iteration that contains the parameterized results.</param>
		/// <param name="paramName">Name of the parameter.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestResultParameterModel[] Parameter_Results_List(string organization, string project, int runId, int testCaseResultId, int iterationId, string paramName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/Runs/"+runId+"/Results/"+testCaseResultId+"/Iterations/"+iterationId+"/parameterresults&paramName=" + (paramName==null? "" : Uri.EscapeDataString(paramName))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestResultParameterModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get test run statistics , used when we want to get summary of a run by outcome.
		/// Runs_Get_Test_Run_Statistics {organization}/{project}/_apis/test/runs/{runId}/Statistics
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the run to get.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestRunStatistic> Runs_Get_Test_Run_StatisticsAsync(string organization, string project, int runId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/runs/"+runId+"/Statistics&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRunStatistic>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get test run statistics , used when we want to get summary of a run by outcome.
		/// Runs_Get_Test_Run_Statistics {organization}/{project}/_apis/test/runs/{runId}/Statistics
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">ID of the run to get.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestRunStatistic Runs_Get_Test_Run_Statistics(string organization, string project, int runId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/runs/"+runId+"/Statistics&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRunStatistic>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a test case.
		/// Test_Cases_Delete {organization}/{project}/_apis/test/testcases/{testCaseId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="testCaseId">Id of test case to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Test_Cases_DeleteAsync(string organization, string project, int testCaseId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/testcases/"+testCaseId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a test case.
		/// Test_Cases_Delete {organization}/{project}/_apis/test/testcases/{testCaseId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="testCaseId">Id of test case to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Test_Cases_Delete(string organization, string project, int testCaseId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/test/testcases/"+testCaseId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of test sessions
		/// Session_List {organization}/{project}/{team}/_apis/test/session
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="period">Period in days from now, for which test sessions are fetched.</param>
		/// <param name="allSessions">If false, returns test sessions for current user. Otherwise, it returns test sessions for all users</param>
		/// <param name="includeAllProperties">If true, it returns all properties of the test sessions. Otherwise, it returns the skinny version.</param>
		/// <param name="source">Source of the test session.</param>
		/// <param name="includeOnlyCompletedSessions">If true, it returns test sessions in completed state. Otherwise, it returns test sessions for all states</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestSession[]> Session_ListAsync(string organization, string project, string team, int period, bool allSessions, bool includeAllProperties, TestSessionSource source, bool includeOnlyCompletedSessions, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/test/session&period="+period+"&allSessions="+allSessions+"&includeAllProperties="+includeAllProperties+"&source=" + source+"&includeOnlyCompletedSessions="+includeOnlyCompletedSessions+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestSession[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of test sessions
		/// Session_List {organization}/{project}/{team}/_apis/test/session
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="period">Period in days from now, for which test sessions are fetched.</param>
		/// <param name="allSessions">If false, returns test sessions for current user. Otherwise, it returns test sessions for all users</param>
		/// <param name="includeAllProperties">If true, it returns all properties of the test sessions. Otherwise, it returns the skinny version.</param>
		/// <param name="source">Source of the test session.</param>
		/// <param name="includeOnlyCompletedSessions">If true, it returns test sessions in completed state. Otherwise, it returns test sessions for all states</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestSession[] Session_List(string organization, string project, string team, int period, bool allSessions, bool includeAllProperties, TestSessionSource source, bool includeOnlyCompletedSessions, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/test/session&period="+period+"&allSessions="+allSessions+"&includeAllProperties="+includeAllProperties+"&source=" + source+"&includeOnlyCompletedSessions="+includeOnlyCompletedSessions+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestSession[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a test session
		/// Session_Create {organization}/{project}/{team}/_apis/test/session
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Test session details for creation</param>
		/// <returns>successful operation</returns>
		public async Task<TestSession> Session_CreateAsync(string organization, string project, string team, string api_version, TestSession requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/test/session&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestSession>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a test session
		/// Session_Create {organization}/{project}/{team}/_apis/test/session
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Test session details for creation</param>
		/// <returns>successful operation</returns>
		public TestSession Session_Create(string organization, string project, string team, string api_version, TestSession requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/test/session&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestSession>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a test session
		/// Session_Update {organization}/{project}/{team}/_apis/test/session
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Test session details for update</param>
		/// <returns>successful operation</returns>
		public async Task<TestSession> Session_UpdateAsync(string organization, string project, string team, string api_version, TestSession requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/test/session&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestSession>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a test session
		/// Session_Update {organization}/{project}/{team}/_apis/test/session
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Test session details for update</param>
		/// <returns>successful operation</returns>
		public TestSession Session_Update(string organization, string project, string team, string api_version, TestSession requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/test/session&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestSession>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Results_ListDetailsToInclude
	{
		
		none = 0,
		
		iterations = 1,
		
		workItems = 2,
		
		subResults = 3,
		
		point = 4,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
