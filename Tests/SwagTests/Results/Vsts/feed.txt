//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public class BuildPackage
	{
		
		/// <summary>
		/// Display name of the feed.
		/// </summary>
		public string FeedName { get; set; }
		
		/// <summary>
		/// Package version description.
		/// </summary>
		public string PackageDescription { get; set; }
		
		/// <summary>
		/// Display name of the package.
		/// </summary>
		public string PackageName { get; set; }
		
		/// <summary>
		/// Version of the package.
		/// </summary>
		public string PackageVersion { get; set; }
		
		/// <summary>
		/// TFS project id.
		/// </summary>
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Type of the package.
		/// </summary>
		public string ProtocolType { get; set; }
	}
	
	/// <summary>
	/// A container for artifacts.
	/// </summary>
	public class Feed
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// If set, this feed supports generation of package badges.
		/// </summary>
		public System.Nullable<System.Boolean> BadgesEnabled { get; set; }
		
		/// <summary>
		/// The view that the feed administrator has indicated is the default experience for readers.
		/// </summary>
		public string DefaultViewId { get; set; }
		
		/// <summary>
		/// The date that this feed was deleted.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> DeletedDate { get; set; }
		
		/// <summary>
		/// A description for the feed.  Descriptions must not exceed 255 characters.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// If set, the feed will hide all deleted/unpublished versions
		/// </summary>
		public System.Nullable<System.Boolean> HideDeletedPackageVersions { get; set; }
		
		/// <summary>
		/// The date that this feed was permanently deleted.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> PermanentDeletedDate { get; set; }
		
		/// <summary>
		/// Explicit permissions for the feed.
		/// </summary>
		public FeedPermission[] Permissions { get; set; }
		
		/// <summary>
		/// The date that this feed is scheduled to be permanently deleted.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ScheduledPermanentDeleteDate { get; set; }
		
		/// <summary>
		/// If set, time that the UpstreamEnabled property was changed. Will be null if UpstreamEnabled was never changed after Feed creation.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpstreamEnabledChangedDate { get; set; }
		
		/// <summary>
		/// The URL of the base feed in GUID form.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// The class to represent a collection of REST reference links.
	/// </summary>
	public class ReferenceLinks
	{
		
		/// <summary>
		/// The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Links { get; set; }
	}
	
	/// <summary>
	/// Permissions for a feed.
	/// </summary>
	public class FeedPermission
	{
		
		/// <summary>
		/// Display name for the identity.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// An Identity descriptor is a wrapper for the identity type (Windows SID, Passport) along with a unique identifier such as the SID or PUID.
		/// </summary>
		public IdentityDescriptor IdentityDescriptor { get; set; }
		
		/// <summary>
		/// Id of the identity associated with this role.
		/// </summary>
		public string IdentityId { get; set; }
		
		/// <summary>
		/// Boolean indicating whether the role is inherited or set directly.
		/// </summary>
		public System.Nullable<System.Boolean> IsInheritedRole { get; set; }
		
		/// <summary>
		/// The role for this identity on a feed.
		/// </summary>
		public System.Nullable<FeedPermissionRole> Role { get; set; }
	}
	
	/// <summary>
	/// An Identity descriptor is a wrapper for the identity type (Windows SID, Passport) along with a unique identifier such as the SID or PUID.
	/// </summary>
	public class IdentityDescriptor
	{
		
		/// <summary>
		/// The unique identifier for this identity, not exceeding 256 chars, which will be persisted.
		/// </summary>
		public string Identifier { get; set; }
		
		/// <summary>
		/// Type of descriptor (for example, Windows, Passport, etc.).
		/// </summary>
		public string IdentityType { get; set; }
	}
	
	public enum FeedPermissionRole
	{
		
		custom = 0,
		
		none = 1,
		
		reader = 2,
		
		contributor = 3,
		
		administrator = 4,
		
		collaborator = 5,
	}
	
	public class FeedBatchData
	{
		
		public FeedBatchOperationData Data { get; set; }
		
		public System.Nullable<FeedBatchDataOperation> Operation { get; set; }
	}
	
	public class FeedBatchOperationData
	{
	}
	
	public enum FeedBatchDataOperation
	{
		
		saveCachedPackages = 0,
	}
	
	/// <summary>
	/// A container that encapsulates the state of the feed after a create, update, or delete.
	/// </summary>
	public class FeedChange
	{
		
		/// <summary>
		/// The type of operation.
		/// </summary>
		public System.Nullable<FeedChangeChangeType> ChangeType { get; set; }
		
		/// <summary>
		/// A container for artifacts.
		/// </summary>
		public Feed Feed { get; set; }
		
		/// <summary>
		/// A token that identifies the next change in the log of changes.
		/// </summary>
		public System.Nullable<System.Int64> FeedContinuationToken { get; set; }
		
		/// <summary>
		/// A token that identifies the latest package change for this feed.  This can be used to quickly determine if there have been any changes to packages in a specific feed.
		/// </summary>
		public System.Nullable<System.Int64> LatestPackageContinuationToken { get; set; }
	}
	
	public enum FeedChangeChangeType
	{
		
		addOrUpdate = 0,
		
		delete = 1,
		
		permanentDelete = 2,
	}
	
	/// <summary>
	/// A result set containing the feed changes for the range that was requested.
	/// </summary>
	public class FeedChangesResponse
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// The number of changes in this set.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// A container that encapsulates the state of the feed after a create, update, or delete.
		/// </summary>
		public FeedChange[] FeedChanges { get; set; }
		
		/// <summary>
		/// When iterating through the log of changes this value indicates the value that should be used for the next continuation token.
		/// </summary>
		public System.Nullable<System.Int64> NextFeedContinuationToken { get; set; }
	}
	
	/// <summary>
	/// An object that contains all of the settings for a specific feed.
	/// </summary>
	public class FeedCore
	{
		
		/// <summary>
		/// Supported capabilities of a feed.
		/// </summary>
		public System.Nullable<FeedCoreCapabilities> Capabilities { get; set; }
		
		/// <summary>
		/// This will either be the feed GUID or the feed GUID and view GUID depending on how the feed was accessed.
		/// </summary>
		public string FullyQualifiedId { get; set; }
		
		/// <summary>
		/// Full name of the view, in feed@view format.
		/// </summary>
		public string FullyQualifiedName { get; set; }
		
		/// <summary>
		/// A GUID that uniquely identifies this feed.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// If set, all packages in the feed are immutable.  It is important to note that feed views are immutable; therefore, this flag will always be set for views.
		/// </summary>
		public System.Nullable<System.Boolean> IsReadOnly { get; set; }
		
		/// <summary>
		/// A name for the feed. feed names must follow these rules: <list type="bullet"><item><description> Must not exceed 64 characters </description></item><item><description> Must not contain whitespaces </description></item><item><description> Must not start with an underscore or a period </description></item><item><description> Must not end with a period </description></item><item><description> Must not contain any of the following illegal characters: <![CDATA[ @, ~, ;, {, }, \, +, =, <, >, |, /, \\, ?, :, &, $, *, \", #, [, ] ]]></description></item></list>
		/// </summary>
		public string Name { get; set; }
		
		public ProjectReference Project { get; set; }
		
		/// <summary>
		/// OBSOLETE: This should always be true.  Setting to false will override all sources in UpstreamSources.
		/// </summary>
		public System.Nullable<System.Boolean> UpstreamEnabled { get; set; }
		
		/// <summary>
		/// A list of sources that this feed will fetch packages from.  An empty list indicates that this feed will not search any additional sources for packages.
		/// </summary>
		public UpstreamSource[] UpstreamSources { get; set; }
		
		/// <summary>
		/// A view on top of a feed.
		/// </summary>
		public FeedView View { get; set; }
		
		/// <summary>
		/// View Id.
		/// </summary>
		public string ViewId { get; set; }
		
		/// <summary>
		/// View name.
		/// </summary>
		public string ViewName { get; set; }
	}
	
	public enum FeedCoreCapabilities
	{
		
		none = 0,
		
		upstreamV2 = 1,
		
		underMaintenance = 2,
		
		defaultCapabilities = 3,
	}
	
	public class ProjectReference
	{
		
		/// <summary>
		/// Gets or sets id of the project.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Gets or sets name of the project.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Gets or sets visibility of the project.
		/// </summary>
		public string Visibility { get; set; }
	}
	
	/// <summary>
	/// Upstream source definition, including its Identity, package type, and other associated information.
	/// </summary>
	public class UpstreamSource
	{
		
		/// <summary>
		/// UTC date that this upstream was deleted.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> DeletedDate { get; set; }
		
		/// <summary>
		/// Locator for connecting to the upstream source in a user friendly format, that may potentially change over time
		/// </summary>
		public string DisplayLocation { get; set; }
		
		/// <summary>
		/// Identity of the upstream source.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// For an internal upstream type, track the Azure DevOps organization that contains it.
		/// </summary>
		public string InternalUpstreamCollectionId { get; set; }
		
		/// <summary>
		/// For an internal upstream type, track the feed id being referenced.
		/// </summary>
		public string InternalUpstreamFeedId { get; set; }
		
		/// <summary>
		/// For an internal upstream type, track the project of the feed being referenced.
		/// </summary>
		public string InternalUpstreamProjectId { get; set; }
		
		/// <summary>
		/// For an internal upstream type, track the view of the feed being referenced.
		/// </summary>
		public string InternalUpstreamViewId { get; set; }
		
		/// <summary>
		/// Consistent locator for connecting to the upstream source.
		/// </summary>
		public string Location { get; set; }
		
		/// <summary>
		/// Display name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Package type associated with the upstream source.
		/// </summary>
		public string Protocol { get; set; }
		
		/// <summary>
		/// Specifies the status of the upstream.
		/// </summary>
		public System.Nullable<UpstreamSourceStatus> Status { get; set; }
		
		/// <summary>
		/// Provides a human-readable reason for the status of the upstream.
		/// </summary>
		public UpstreamStatusDetail[] StatusDetails { get; set; }
		
		/// <summary>
		/// Source type, such as Public or Internal.
		/// </summary>
		public System.Nullable<UpstreamSourceUpstreamSourceType> UpstreamSourceType { get; set; }
	}
	
	public enum UpstreamSourceStatus
	{
		
		ok = 0,
		
		disabled = 1,
	}
	
	public class UpstreamStatusDetail
	{
		
		/// <summary>
		/// Provides a human-readable reason for the status of the upstream.
		/// </summary>
		public string Reason { get; set; }
	}
	
	public enum UpstreamSourceUpstreamSourceType
	{
		
		_public = 0,
		
		_internal = 1,
	}
	
	/// <summary>
	/// A view on top of a feed.
	/// </summary>
	public class FeedView
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// Id of the view.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the view.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Type of view.
		/// </summary>
		public System.Nullable<FeedViewType> Type { get; set; }
		
		/// <summary>
		/// Url of the view.
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// Visibility status of the view.
		/// </summary>
		public System.Nullable<FeedViewVisibility> Visibility { get; set; }
	}
	
	public enum FeedViewType
	{
		
		none = 0,
		
		release = 1,
		
		_implicit = 2,
	}
	
	public enum FeedViewVisibility
	{
		
		_private = 0,
		
		collection = 1,
		
		organization = 2,
		
		aadTenant = 3,
	}
	
	/// <summary>
	/// Retention policy settings.
	/// </summary>
	public class FeedRetentionPolicy
	{
		
		/// <summary>
		/// This attribute is deprecated and is not honoured by retention
		/// </summary>
		public System.Nullable<System.Int32> AgeLimitInDays { get; set; }
		
		/// <summary>
		/// Maximum versions to preserve per package and package type.
		/// </summary>
		public System.Nullable<System.Int32> CountLimit { get; set; }
		
		/// <summary>
		/// Number of days to preserve a package version after its latest download.
		/// </summary>
		public System.Nullable<System.Int32> DaysToKeepRecentlyDownloadedPackages { get; set; }
	}
	
	/// <summary>
	/// Update a feed definition with these new values.
	/// </summary>
	public class FeedUpdate
	{
		
		/// <summary>
		/// If set, the feed will allow upload of packages that exist on the upstream
		/// </summary>
		public System.Nullable<System.Boolean> AllowUpstreamNameConflict { get; set; }
		
		/// <summary>
		/// If set, this feed supports generation of package badges.
		/// </summary>
		public System.Nullable<System.Boolean> BadgesEnabled { get; set; }
		
		/// <summary>
		/// The view that the feed administrator has indicated is the default experience for readers.
		/// </summary>
		public string DefaultViewId { get; set; }
		
		/// <summary>
		/// A description for the feed.  Descriptions must not exceed 255 characters.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// If set, feed will hide all deleted/unpublished versions
		/// </summary>
		public System.Nullable<System.Boolean> HideDeletedPackageVersions { get; set; }
		
		/// <summary>
		/// A GUID that uniquely identifies this feed.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// A name for the feed. feed names must follow these rules: <list type="bullet"><item><description> Must not exceed 64 characters </description></item><item><description> Must not contain whitespaces </description></item><item><description> Must not start with an underscore or a period </description></item><item><description> Must not end with a period </description></item><item><description> Must not contain any of the following illegal characters: <![CDATA[ @, ~, ;, {, }, \, +, =, <, >, |, /, \\, ?, :, &, $, *, \", #, [, ] ]]></description></item></list>
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// OBSOLETE: If set, the feed can proxy packages from an upstream feed
		/// </summary>
		public System.Nullable<System.Boolean> UpstreamEnabled { get; set; }
		
		/// <summary>
		/// A list of sources that this feed will fetch packages from.  An empty list indicates that this feed will not search any additional sources for packages.
		/// </summary>
		public UpstreamSource[] UpstreamSources { get; set; }
	}
	
	/// <summary>
	/// Permissions for feed service-wide operations such as the creation of new feeds.
	/// </summary>
	public class GlobalPermission
	{
		
		/// <summary>
		/// An Identity descriptor is a wrapper for the identity type (Windows SID, Passport) along with a unique identifier such as the SID or PUID.
		/// </summary>
		public IdentityDescriptor IdentityDescriptor { get; set; }
		
		/// <summary>
		/// IdentityId corresponding to the IdentityDescriptor
		/// </summary>
		public string IdentityId { get; set; }
		
		/// <summary>
		/// Role associated with the Identity.
		/// </summary>
		public System.Nullable<GlobalPermissionRole> Role { get; set; }
	}
	
	public enum GlobalPermissionRole
	{
		
		custom = 0,
		
		none = 1,
		
		feedCreator = 2,
		
		administrator = 3,
	}
	
	/// <summary>
	/// The JSON model for JSON Patch Operations
	/// </summary>
	public class JsonPatchDocument
	{
	}
	
	/// <summary>
	/// The JSON model for a JSON Patch operation
	/// </summary>
	public class JsonPatchOperation
	{
		
		/// <summary>
		/// The path to copy from for the Move/Copy operation.
		/// </summary>
		public string From { get; set; }
		
		/// <summary>
		/// The patch operation
		/// </summary>
		public System.Nullable<JsonPatchOperationOp> Op { get; set; }
		
		/// <summary>
		/// The path for the operation. In the case of an array, a zero based index can be used to specify the position in the array (e.g. /biscuits/0/name). The "-" character can be used instead of an index to insert at the end of the array (e.g. /biscuits/-).
		/// </summary>
		public string Path { get; set; }
		
		/// <summary>
		/// The value for the operation. This is either a primitive or a JToken.
		/// </summary>
		public string Value { get; set; }
	}
	
	public enum JsonPatchOperationOp
	{
		
		add = 0,
		
		remove = 1,
		
		replace = 2,
		
		move = 3,
		
		copy = 4,
		
		test = 5,
	}
	
	/// <summary>
	/// Core data about any package, including its id and version information and basic state.
	/// </summary>
	public class MinimalPackageVersion
	{
		
		/// <summary>
		/// Upstream source this package was ingested from.
		/// </summary>
		public string DirectUpstreamSourceId { get; set; }
		
		/// <summary>
		/// Id for the package.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// [Obsolete] Used for legacy scenarios and may be removed in future versions.
		/// </summary>
		public System.Nullable<System.Boolean> IsCachedVersion { get; set; }
		
		/// <summary>
		/// True if this package has been deleted.
		/// </summary>
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		/// <summary>
		/// True if this is the latest version of the package by package type sort order.
		/// </summary>
		public System.Nullable<System.Boolean> IsLatest { get; set; }
		
		/// <summary>
		/// (NuGet Only) True if this package is listed.
		/// </summary>
		public System.Nullable<System.Boolean> IsListed { get; set; }
		
		/// <summary>
		/// Normalized version using normalization rules specific to a package type.
		/// </summary>
		public string NormalizedVersion { get; set; }
		
		/// <summary>
		/// Package description.
		/// </summary>
		public string PackageDescription { get; set; }
		
		/// <summary>
		/// UTC Date the package was published to the service.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> PublishDate { get; set; }
		
		/// <summary>
		/// Internal storage id.
		/// </summary>
		public string StorageId { get; set; }
		
		/// <summary>
		/// Display version.
		/// </summary>
		public string Version { get; set; }
		
		/// <summary>
		/// List of views containing this package version.
		/// </summary>
		public FeedView[] Views { get; set; }
	}
	
	/// <summary>
	/// A package, which is a container for one or more package versions.
	/// </summary>
	public class Package
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// Id of the package.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Used for legacy scenarios and may be removed in future versions.
		/// </summary>
		public System.Nullable<System.Boolean> IsCached { get; set; }
		
		/// <summary>
		/// The display name of the package.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The normalized name representing the identity of this package within its package type.
		/// </summary>
		public string NormalizedName { get; set; }
		
		/// <summary>
		/// Type of the package.
		/// </summary>
		public string ProtocolType { get; set; }
		
		/// <summary>
		/// [Obsolete] - this field is unused and will be removed in a future release.
		/// </summary>
		public System.Nullable<System.Int32> StarCount { get; set; }
		
		/// <summary>
		/// Url for this package.
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// All versions for this package within its feed.
		/// </summary>
		public MinimalPackageVersion[] Versions { get; set; }
	}
	
	/// <summary>
	/// A single change to a feed's packages.
	/// </summary>
	public class PackageChange
	{
		
		/// <summary>
		/// A package, which is a container for one or more package versions.
		/// </summary>
		public Package Package { get; set; }
		
		/// <summary>
		/// A change to a single package version.
		/// </summary>
		public PackageVersionChange PackageVersionChange { get; set; }
	}
	
	/// <summary>
	/// A change to a single package version.
	/// </summary>
	public class PackageVersionChange
	{
		
		/// <summary>
		/// The type of change that was performed.
		/// </summary>
		public System.Nullable<PackageVersionChangeChangeType> ChangeType { get; set; }
		
		/// <summary>
		/// Token marker for this change, allowing the caller to send this value back to the service and receive changes beyond this one.
		/// </summary>
		public System.Nullable<System.Int64> ContinuationToken { get; set; }
		
		/// <summary>
		/// A specific version of a package.
		/// </summary>
		public PackageVersion PackageVersion { get; set; }
	}
	
	public enum PackageVersionChangeChangeType
	{
		
		addOrUpdate = 0,
		
		delete = 1,
		
		permanentDelete = 2,
	}
	
	/// <summary>
	/// A specific version of a package.
	/// </summary>
	public class PackageVersion
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// Package version author.
		/// </summary>
		public string Author { get; set; }
		
		/// <summary>
		/// UTC date that this package version was deleted.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> DeletedDate { get; set; }
		
		/// <summary>
		/// List of dependencies for this package version.
		/// </summary>
		public PackageDependency[] Dependencies { get; set; }
		
		/// <summary>
		/// Package version description.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Files associated with this package version, only relevant for multi-file package types.
		/// </summary>
		public PackageFile[] Files { get; set; }
		
		/// <summary>
		/// Other versions of this package.
		/// </summary>
		public MinimalPackageVersion[] OtherVersions { get; set; }
		
		/// <summary>
		/// Extended metadata for a specific package type.
		/// </summary>
		public ProtocolMetadata ProtocolMetadata { get; set; }
		
		/// <summary>
		/// List of upstream sources through which a package version moved to land in this feed.
		/// </summary>
		public UpstreamSource[] SourceChain { get; set; }
		
		/// <summary>
		/// Package version summary.
		/// </summary>
		public string Summary { get; set; }
		
		/// <summary>
		/// Package version tags.
		/// </summary>
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Package version url.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A dependency on another package version.
	/// </summary>
	public class PackageDependency
	{
		
		/// <summary>
		/// Dependency package group (an optional classification within some package types).
		/// </summary>
		public string Group { get; set; }
		
		/// <summary>
		/// Dependency package name.
		/// </summary>
		public string PackageName { get; set; }
		
		/// <summary>
		/// Dependency package version range.
		/// </summary>
		public string VersionRange { get; set; }
	}
	
	/// <summary>
	/// A package file for a specific package version, only relevant to package types that contain multiple files per version.
	/// </summary>
	public class PackageFile
	{
		
		/// <summary>
		/// Hierarchical representation of files.
		/// </summary>
		public PackageFile[] Children { get; set; }
		
		/// <summary>
		/// File name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Extended metadata for a specific package type.
		/// </summary>
		public ProtocolMetadata ProtocolMetadata { get; set; }
	}
	
	/// <summary>
	/// Extended metadata for a specific package type.
	/// </summary>
	public class ProtocolMetadata
	{
		
		/// <summary>
		/// Extended metadata for a specific package type, formatted to the associated schema version definition.
		/// </summary>
		public string Data { get; set; }
		
		/// <summary>
		/// Schema version.
		/// </summary>
		public System.Nullable<System.Int32> SchemaVersion { get; set; }
	}
	
	/// <summary>
	/// A set of change operations to a feed's packages.
	/// </summary>
	public class PackageChangesResponse
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// Number of changes in this batch.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Token that should be used in future calls for this feed to retrieve new changes.
		/// </summary>
		public System.Nullable<System.Int64> NextPackageContinuationToken { get; set; }
		
		/// <summary>
		/// List of changes.
		/// </summary>
		public PackageChange[] PackageChanges { get; set; }
	}
	
	/// <summary>
	/// All metrics for a certain package id
	/// </summary>
	public class PackageMetrics
	{
		
		/// <summary>
		/// Total count of downloads per package id.
		/// </summary>
		public System.Nullable<System.Double> DownloadCount { get; set; }
		
		/// <summary>
		/// Number of downloads per unique user per package id.
		/// </summary>
		public System.Nullable<System.Double> DownloadUniqueUsers { get; set; }
		
		/// <summary>
		/// UTC date and time when package was last downloaded.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastDownloaded { get; set; }
		
		/// <summary>
		/// Package id.
		/// </summary>
		public string PackageId { get; set; }
	}
	
	/// <summary>
	/// Query to get package metrics
	/// </summary>
	public class PackageMetricsQuery
	{
		
		/// <summary>
		/// List of package ids
		/// </summary>
		public string[] PackageIds { get; set; }
	}
	
	/// <summary>
	/// All metrics for a certain package version id
	/// </summary>
	public class PackageVersionMetrics
	{
		
		/// <summary>
		/// Total count of downloads per package version id.
		/// </summary>
		public System.Nullable<System.Double> DownloadCount { get; set; }
		
		/// <summary>
		/// Number of downloads per unique user per package version id.
		/// </summary>
		public System.Nullable<System.Double> DownloadUniqueUsers { get; set; }
		
		/// <summary>
		/// UTC date and time when package version was last downloaded.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastDownloaded { get; set; }
		
		/// <summary>
		/// Package id.
		/// </summary>
		public string PackageId { get; set; }
		
		/// <summary>
		/// Package version id.
		/// </summary>
		public string PackageVersionId { get; set; }
	}
	
	/// <summary>
	/// Query to get package version metrics
	/// </summary>
	public class PackageVersionMetricsQuery
	{
		
		/// <summary>
		/// List of package version ids
		/// </summary>
		public string[] PackageVersionIds { get; set; }
	}
	
	/// <summary>
	/// Provenance for a published package version
	/// </summary>
	public class PackageVersionProvenance
	{
		
		/// <summary>
		/// Name or Id of the feed.
		/// </summary>
		public string FeedId { get; set; }
		
		/// <summary>
		/// Id of the package (GUID Id, not name).
		/// </summary>
		public string PackageId { get; set; }
		
		/// <summary>
		/// Id of the package version (GUID Id, not name).
		/// </summary>
		public string PackageVersionId { get; set; }
		
		/// <summary>
		/// Data about the origin of a published package
		/// </summary>
		public Provenance Provenance { get; set; }
	}
	
	/// <summary>
	/// Data about the origin of a published package
	/// </summary>
	public class Provenance
	{
		
		/// <summary>
		/// Other provenance data.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> Data { get; set; }
		
		/// <summary>
		/// Type of provenance source, for example "InternalBuild", "InternalRelease"
		/// </summary>
		public string ProvenanceSource { get; set; }
		
		/// <summary>
		/// Identity of user that published the package
		/// </summary>
		public string PublisherUserIdentity { get; set; }
		
		/// <summary>
		/// HTTP User-Agent used when pushing the package.
		/// </summary>
		public string UserAgent { get; set; }
	}
	
	/// <summary>
	/// A single package version within the recycle bin.
	/// </summary>
	public class RecycleBinPackageVersion
	{
		
		/// <summary>
		/// UTC date on which the package will automatically be removed from the recycle bin and permanently deleted.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ScheduledPermanentDeleteDate { get; set; }
	}
	
	public class SaveCachedPackagesData
	{
		
		public string[] NormalizedPackageNames { get; set; }
		
		public string[] ViewsForPromotion { get; set; }
	}
	
	/// <summary>
	/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
	/// </summary>
	public class VssJsonCollectionWrapper
	{
		
		public string Value { get; set; }
	}
	
	public class VssJsonCollectionWrapperBase
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	public partial class MyClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public MyClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get all service-wide feed creation and administration permissions.
		/// Service__Settings_GetGlobalPermissions {organization}/_apis/packaging/globalpermissions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="includeIds">Set to true to add IdentityIds to the permission objects.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<GlobalPermission[]> Service__Settings_GetGlobalPermissionsAsync(string organization, bool includeIds, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/packaging/globalpermissions&includeIds="+includeIds+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GlobalPermission[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all service-wide feed creation and administration permissions.
		/// Service__Settings_GetGlobalPermissions {organization}/_apis/packaging/globalpermissions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="includeIds">Set to true to add IdentityIds to the permission objects.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public GlobalPermission[] Service__Settings_GetGlobalPermissions(string organization, bool includeIds, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/packaging/globalpermissions&includeIds="+includeIds+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GlobalPermission[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set service-wide permissions that govern feed creation and administration.
		/// Service__Settings_SetGlobalPermissions {organization}/_apis/packaging/globalpermissions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">New permissions for the organization.</param>
		/// <returns>successful operation</returns>
		public async Task<GlobalPermission[]> Service__Settings_SetGlobalPermissionsAsync(string organization, string api_version, GlobalPermission[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/packaging/globalpermissions&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GlobalPermission[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Set service-wide permissions that govern feed creation and administration.
		/// Service__Settings_SetGlobalPermissions {organization}/_apis/packaging/globalpermissions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">New permissions for the organization.</param>
		/// <returns>successful operation</returns>
		public GlobalPermission[] Service__Settings_SetGlobalPermissions(string organization, string api_version, GlobalPermission[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/packaging/globalpermissions&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GlobalPermission[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Query to determine which feeds have changed since the last call, tracked through the provided continuationToken. Only changes to a feed itself are returned and impact the continuationToken, not additions or alterations to packages within the feeds.
		/// 
		/// If the project parameter is present, gets all feed changes in the given project.
		/// If omitted, gets all feed changes in the organization.
		/// Change__Tracking_Get_Feed_Changes {organization}/{project}/_apis/packaging/feedchanges
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="includeDeleted">If true, get changes for all feeds including deleted feeds. The default value is false.</param>
		/// <param name="continuationToken">A continuation token which acts as a bookmark to a previously retrieved change. This token allows the user to continue retrieving changes in batches, picking up where the previous batch left off. If specified, all the changes that occur strictly after the token will be returned. If not specified or 0, iteration will start with the first change.</param>
		/// <param name="batchSize">Number of package changes to fetch. The default value is 1000. The maximum value is 2000.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<FeedChangesResponse> Change__Tracking_Get_Feed_ChangesAsync(string organization, string project, bool includeDeleted, long continuationToken, int batchSize, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/feedchanges&includeDeleted="+includeDeleted+"&continuationToken="+continuationToken+"&batchSize="+batchSize+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedChangesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Query to determine which feeds have changed since the last call, tracked through the provided continuationToken. Only changes to a feed itself are returned and impact the continuationToken, not additions or alterations to packages within the feeds.
		/// 
		/// If the project parameter is present, gets all feed changes in the given project.
		/// If omitted, gets all feed changes in the organization.
		/// Change__Tracking_Get_Feed_Changes {organization}/{project}/_apis/packaging/feedchanges
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="includeDeleted">If true, get changes for all feeds including deleted feeds. The default value is false.</param>
		/// <param name="continuationToken">A continuation token which acts as a bookmark to a previously retrieved change. This token allows the user to continue retrieving changes in batches, picking up where the previous batch left off. If specified, all the changes that occur strictly after the token will be returned. If not specified or 0, iteration will start with the first change.</param>
		/// <param name="batchSize">Number of package changes to fetch. The default value is 1000. The maximum value is 2000.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public FeedChangesResponse Change__Tracking_Get_Feed_Changes(string organization, string project, bool includeDeleted, long continuationToken, int batchSize, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/feedchanges&includeDeleted="+includeDeleted+"&continuationToken="+continuationToken+"&batchSize="+batchSize+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedChangesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Query a feed to determine its current state.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Change__Tracking_Get_Feed_Change {organization}/{project}/_apis/packaging/feedchanges/{feedId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or ID of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<FeedChange> Change__Tracking_Get_Feed_ChangeAsync(string organization, string feedId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/feedchanges/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedChange>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Query a feed to determine its current state.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Change__Tracking_Get_Feed_Change {organization}/{project}/_apis/packaging/feedchanges/{feedId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or ID of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public FeedChange Change__Tracking_Get_Feed_Change(string organization, string feedId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/feedchanges/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedChange>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Query for feeds within the recycle bin.
		/// 
		/// If the project parameter is present, gets all feeds in recycle bin in the given project.
		/// If omitted, gets all feeds in recycle bin in the organization.
		/// Feed_Recycle_Bin_List {organization}/{project}/_apis/packaging/feedrecyclebin
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Feed[]> Feed_Recycle_Bin_ListAsync(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/feedrecyclebin&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Feed[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Query for feeds within the recycle bin.
		/// 
		/// If the project parameter is present, gets all feeds in recycle bin in the given project.
		/// If omitted, gets all feeds in recycle bin in the organization.
		/// Feed_Recycle_Bin_List {organization}/{project}/_apis/packaging/feedrecyclebin
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Feed[] Feed_Recycle_Bin_List(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/feedrecyclebin&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Feed[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Feed_Recycle_Bin_Permanent_Delete_Feed {organization}/{project}/_apis/packaging/feedrecyclebin/{feedId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Feed_Recycle_Bin_Permanent_Delete_FeedAsync(string organization, string feedId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/feedrecyclebin/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Feed_Recycle_Bin_Permanent_Delete_Feed {organization}/{project}/_apis/packaging/feedrecyclebin/{feedId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Feed_Recycle_Bin_Permanent_Delete_Feed(string organization, string feedId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/feedrecyclebin/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all feeds in an account where you have the provided role access.
		/// 
		/// If the project parameter is present, gets all feeds in the given project.
		/// If omitted, gets all feeds in the organization.
		/// Feed__Management_Get_Feeds {organization}/{project}/_apis/packaging/feeds
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="feedRole">Filter by this role, either Administrator(4), Contributor(3), or Reader(2) level permissions.</param>
		/// <param name="includeDeletedUpstreams">Include upstreams that have been deleted in the response.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Feed[]> Feed__Management_Get_FeedsAsync(string organization, string project, FeedPermissionRole feedRole, bool includeDeletedUpstreams, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/feeds&feedRole=" + feedRole+"&includeDeletedUpstreams="+includeDeletedUpstreams+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Feed[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all feeds in an account where you have the provided role access.
		/// 
		/// If the project parameter is present, gets all feeds in the given project.
		/// If omitted, gets all feeds in the organization.
		/// Feed__Management_Get_Feeds {organization}/{project}/_apis/packaging/feeds
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="feedRole">Filter by this role, either Administrator(4), Contributor(3), or Reader(2) level permissions.</param>
		/// <param name="includeDeletedUpstreams">Include upstreams that have been deleted in the response.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Feed[] Feed__Management_Get_Feeds(string organization, string project, FeedPermissionRole feedRole, bool includeDeletedUpstreams, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/feeds&feedRole=" + feedRole+"&includeDeletedUpstreams="+includeDeletedUpstreams+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Feed[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a feed, a container for various package types.
		/// 
		/// Feeds can be created in a project if the project parameter is included in the request url.
		/// If the project parameter is omitted, the feed will not be associated with a project and will be created at the organization level.
		/// Feed__Management_Create_Feed {organization}/{project}/_apis/packaging/feeds
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">A JSON object containing both required and optional attributes for the feed. Name is the only required value.</param>
		/// <returns>successful operation</returns>
		public async Task<Feed> Feed__Management_Create_FeedAsync(string organization, string project, string api_version, Feed requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/feeds&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Feed>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a feed, a container for various package types.
		/// 
		/// Feeds can be created in a project if the project parameter is included in the request url.
		/// If the project parameter is omitted, the feed will not be associated with a project and will be created at the organization level.
		/// Feed__Management_Create_Feed {organization}/{project}/_apis/packaging/feeds
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">A JSON object containing both required and optional attributes for the feed. Name is the only required value.</param>
		/// <returns>successful operation</returns>
		public Feed Feed__Management_Create_Feed(string organization, string project, string api_version, Feed requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/feeds&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Feed>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the settings for a specific feed.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Feed__Management_Get_Feed {organization}/{project}/_apis/packaging/feeds/{feedId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="includeDeletedUpstreams">Include upstreams that have been deleted in the response.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Feed> Feed__Management_Get_FeedAsync(string organization, string feedId, string project, bool includeDeletedUpstreams, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"&includeDeletedUpstreams="+includeDeletedUpstreams+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Feed>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the settings for a specific feed.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Feed__Management_Get_Feed {organization}/{project}/_apis/packaging/feeds/{feedId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="includeDeletedUpstreams">Include upstreams that have been deleted in the response.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Feed Feed__Management_Get_Feed(string organization, string feedId, string project, bool includeDeletedUpstreams, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"&includeDeletedUpstreams="+includeDeletedUpstreams+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Feed>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a feed and all its packages. The feed moves to the recycle bin and is reversible.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Feed__Management_Delete_Feed {organization}/{project}/_apis/packaging/feeds/{feedId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Feed__Management_Delete_FeedAsync(string organization, string feedId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a feed and all its packages. The feed moves to the recycle bin and is reversible.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Feed__Management_Delete_Feed {organization}/{project}/_apis/packaging/feeds/{feedId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Feed__Management_Delete_Feed(string organization, string feedId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change the attributes of a feed.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Feed__Management_Update_Feed {organization}/{project}/_apis/packaging/feeds/{feedId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">A JSON object containing the feed settings to be updated.</param>
		/// <returns>successful operation</returns>
		public async Task<Feed> Feed__Management_Update_FeedAsync(string organization, string feedId, string project, string api_version, FeedUpdate requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Feed>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Change the attributes of a feed.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Feed__Management_Update_Feed {organization}/{project}/_apis/packaging/feeds/{feedId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">A JSON object containing the feed settings to be updated.</param>
		/// <returns>successful operation</returns>
		public Feed Feed__Management_Update_Feed(string organization, string feedId, string project, string api_version, FeedUpdate requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Feed>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a batch of package changes made to a feed.  The changes returned are 'most recent change' so if an Add is followed by an Update before you begin enumerating, you'll only see one change in the batch.  While consuming batches using the continuation token, you may see changes to the same package version multiple times if they are happening as you enumerate.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Change__Tracking_Get_Package_Changes {organization}/{project}/_apis/packaging/Feeds/{feedId}/packagechanges
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="continuationToken">A continuation token which acts as a bookmark to a previously retrieved change. This token allows the user to continue retrieving changes in batches, picking up where the previous batch left off. If specified, all the changes that occur strictly after the token will be returned. If not specified or 0, iteration will start with the first change.</param>
		/// <param name="batchSize">Number of package changes to fetch. The default value is 1000. The maximum value is 2000.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<PackageChangesResponse> Change__Tracking_Get_Package_ChangesAsync(string organization, string feedId, string project, long continuationToken, int batchSize, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/packagechanges&continuationToken="+continuationToken+"&batchSize="+batchSize+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PackageChangesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a batch of package changes made to a feed.  The changes returned are 'most recent change' so if an Add is followed by an Update before you begin enumerating, you'll only see one change in the batch.  While consuming batches using the continuation token, you may see changes to the same package version multiple times if they are happening as you enumerate.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Change__Tracking_Get_Package_Changes {organization}/{project}/_apis/packaging/Feeds/{feedId}/packagechanges
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="continuationToken">A continuation token which acts as a bookmark to a previously retrieved change. This token allows the user to continue retrieving changes in batches, picking up where the previous batch left off. If specified, all the changes that occur strictly after the token will be returned. If not specified or 0, iteration will start with the first change.</param>
		/// <param name="batchSize">Number of package changes to fetch. The default value is 1000. The maximum value is 2000.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public PackageChangesResponse Change__Tracking_Get_Package_Changes(string organization, string feedId, string project, long continuationToken, int batchSize, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/packagechanges&continuationToken="+continuationToken+"&batchSize="+batchSize+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PackageChangesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Artifact__Details_Query_Package_Metrics {organization}/{project}/_apis/packaging/Feeds/{feedId}/packagemetricsbatch
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<PackageMetrics[]> Artifact__Details_Query_Package_MetricsAsync(string organization, string feedId, string project, string api_version, PackageMetricsQuery requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/packagemetricsbatch&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PackageMetrics[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Artifact__Details_Query_Package_Metrics {organization}/{project}/_apis/packaging/Feeds/{feedId}/packagemetricsbatch
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public PackageMetrics[] Artifact__Details_Query_Package_Metrics(string organization, string feedId, string project, string api_version, PackageMetricsQuery requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/packagemetricsbatch&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PackageMetrics[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get details about all of the packages in the feed. Use the various filters to include or exclude information from the result set.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Artifact__Details_Get_Packages {organization}/{project}/_apis/packaging/Feeds/{feedId}/packages
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="protocolType">One of the supported artifact package types.</param>
		/// <param name="packageNameQuery">Filter to packages that contain the provided string. Characters in the string must conform to the package name constraints.</param>
		/// <param name="normalizedPackageName">[Obsolete] Used for legacy scenarios and may be removed in future versions.</param>
		/// <param name="includeUrls">True to return REST Urls with the response. Default is True.</param>
		/// <param name="includeAllVersions">True to return all versions of the package in the response. Default is false (latest version only).</param>
		/// <param name="isListed">Only applicable for NuGet packages, setting it for other package types will result in a 404. If false, delisted package versions will be returned. Use this to filter the response when includeAllVersions is set to true. Default is unset (do not return delisted packages).</param>
		/// <param name="getTopPackageVersions">Changes the behavior of $top and $skip to return all versions of each package up to $top. Must be used in conjunction with includeAllVersions=true</param>
		/// <param name="isRelease">Only applicable for Nuget packages. Use this to filter the response when includeAllVersions is set to true. Default is True (only return packages without prerelease versioning).</param>
		/// <param name="includeDescription">Return the description for every version of each package in the response. Default is False.</param>
		/// <param name="top">Get the top N packages (or package versions where getTopPackageVersions=true)</param>
		/// <param name="skip">Skip the first N packages (or package versions where getTopPackageVersions=true)</param>
		/// <param name="includeDeleted">Return deleted or unpublished versions of packages in the response. Default is False.</param>
		/// <param name="isCached">[Obsolete] Used for legacy scenarios and may be removed in future versions.</param>
		/// <param name="directUpstreamId">Filter results to return packages from a specific upstream.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Package[]> Artifact__Details_Get_PackagesAsync(
					string organization, 
					string feedId, 
					string project, 
					string protocolType, 
					string packageNameQuery, 
					string normalizedPackageName, 
					bool includeUrls, 
					bool includeAllVersions, 
					bool isListed, 
					bool getTopPackageVersions, 
					bool isRelease, 
					bool includeDescription, 
					int top, 
					int skip, 
					bool includeDeleted, 
					bool isCached, 
					string directUpstreamId, 
					string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/packages&protocolType=" + (protocolType==null? "" : Uri.EscapeDataString(protocolType))+"&packageNameQuery=" + (packageNameQuery==null? "" : Uri.EscapeDataString(packageNameQuery))+"&normalizedPackageName=" + (normalizedPackageName==null? "" : Uri.EscapeDataString(normalizedPackageName))+"&includeUrls="+includeUrls+"&includeAllVersions="+includeAllVersions+"&isListed="+isListed+"&getTopPackageVersions="+getTopPackageVersions+"&isRelease="+isRelease+"&includeDescription="+includeDescription+"&$top="+top+"&$skip="+skip+"&includeDeleted="+includeDeleted+"&isCached="+isCached+"&directUpstreamId=" + (directUpstreamId==null? "" : Uri.EscapeDataString(directUpstreamId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Package[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details about all of the packages in the feed. Use the various filters to include or exclude information from the result set.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Artifact__Details_Get_Packages {organization}/{project}/_apis/packaging/Feeds/{feedId}/packages
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="protocolType">One of the supported artifact package types.</param>
		/// <param name="packageNameQuery">Filter to packages that contain the provided string. Characters in the string must conform to the package name constraints.</param>
		/// <param name="normalizedPackageName">[Obsolete] Used for legacy scenarios and may be removed in future versions.</param>
		/// <param name="includeUrls">True to return REST Urls with the response. Default is True.</param>
		/// <param name="includeAllVersions">True to return all versions of the package in the response. Default is false (latest version only).</param>
		/// <param name="isListed">Only applicable for NuGet packages, setting it for other package types will result in a 404. If false, delisted package versions will be returned. Use this to filter the response when includeAllVersions is set to true. Default is unset (do not return delisted packages).</param>
		/// <param name="getTopPackageVersions">Changes the behavior of $top and $skip to return all versions of each package up to $top. Must be used in conjunction with includeAllVersions=true</param>
		/// <param name="isRelease">Only applicable for Nuget packages. Use this to filter the response when includeAllVersions is set to true. Default is True (only return packages without prerelease versioning).</param>
		/// <param name="includeDescription">Return the description for every version of each package in the response. Default is False.</param>
		/// <param name="top">Get the top N packages (or package versions where getTopPackageVersions=true)</param>
		/// <param name="skip">Skip the first N packages (or package versions where getTopPackageVersions=true)</param>
		/// <param name="includeDeleted">Return deleted or unpublished versions of packages in the response. Default is False.</param>
		/// <param name="isCached">[Obsolete] Used for legacy scenarios and may be removed in future versions.</param>
		/// <param name="directUpstreamId">Filter results to return packages from a specific upstream.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Package[] Artifact__Details_Get_Packages(
					string organization, 
					string feedId, 
					string project, 
					string protocolType, 
					string packageNameQuery, 
					string normalizedPackageName, 
					bool includeUrls, 
					bool includeAllVersions, 
					bool isListed, 
					bool getTopPackageVersions, 
					bool isRelease, 
					bool includeDescription, 
					int top, 
					int skip, 
					bool includeDeleted, 
					bool isCached, 
					string directUpstreamId, 
					string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/packages&protocolType=" + (protocolType==null? "" : Uri.EscapeDataString(protocolType))+"&packageNameQuery=" + (packageNameQuery==null? "" : Uri.EscapeDataString(packageNameQuery))+"&normalizedPackageName=" + (normalizedPackageName==null? "" : Uri.EscapeDataString(normalizedPackageName))+"&includeUrls="+includeUrls+"&includeAllVersions="+includeAllVersions+"&isListed="+isListed+"&getTopPackageVersions="+getTopPackageVersions+"&isRelease="+isRelease+"&includeDescription="+includeDescription+"&$top="+top+"&$skip="+skip+"&includeDeleted="+includeDeleted+"&isCached="+isCached+"&directUpstreamId=" + (directUpstreamId==null? "" : Uri.EscapeDataString(directUpstreamId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Package[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details about a specific package.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Artifact__Details_Get_Package {organization}/{project}/_apis/packaging/Feeds/{feedId}/packages/{packageId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="packageId">The package Id (GUID Id, not the package name).</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="includeAllVersions">True to return all versions of the package in the response. Default is false (latest version only).</param>
		/// <param name="includeUrls">True to return REST Urls with the response. Default is True.</param>
		/// <param name="isListed">Only applicable for NuGet packages, setting it for other package types will result in a 404. If false, delisted package versions will be returned. Use this to filter the response when includeAllVersions is set to true. Default is unset (do not return delisted packages).</param>
		/// <param name="isRelease">Only applicable for Nuget packages. Use this to filter the response when includeAllVersions is set to true.  Default is True (only return packages without prerelease versioning).</param>
		/// <param name="includeDeleted">Return deleted or unpublished versions of packages in the response. Default is False.</param>
		/// <param name="includeDescription">Return the description for every version of each package in the response. Default is False.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Package> Artifact__Details_Get_PackageAsync(string organization, string feedId, string packageId, string project, bool includeAllVersions, bool includeUrls, bool isListed, bool isRelease, bool includeDeleted, bool includeDescription, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/packages/"+ (packageId==null? "" : Uri.EscapeDataString(packageId))+"&includeAllVersions="+includeAllVersions+"&includeUrls="+includeUrls+"&isListed="+isListed+"&isRelease="+isRelease+"&includeDeleted="+includeDeleted+"&includeDescription="+includeDescription+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Package>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details about a specific package.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Artifact__Details_Get_Package {organization}/{project}/_apis/packaging/Feeds/{feedId}/packages/{packageId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="packageId">The package Id (GUID Id, not the package name).</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="includeAllVersions">True to return all versions of the package in the response. Default is false (latest version only).</param>
		/// <param name="includeUrls">True to return REST Urls with the response. Default is True.</param>
		/// <param name="isListed">Only applicable for NuGet packages, setting it for other package types will result in a 404. If false, delisted package versions will be returned. Use this to filter the response when includeAllVersions is set to true. Default is unset (do not return delisted packages).</param>
		/// <param name="isRelease">Only applicable for Nuget packages. Use this to filter the response when includeAllVersions is set to true.  Default is True (only return packages without prerelease versioning).</param>
		/// <param name="includeDeleted">Return deleted or unpublished versions of packages in the response. Default is False.</param>
		/// <param name="includeDescription">Return the description for every version of each package in the response. Default is False.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Package Artifact__Details_Get_Package(string organization, string feedId, string packageId, string project, bool includeAllVersions, bool includeUrls, bool isListed, bool isRelease, bool includeDeleted, bool includeDescription, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/packages/"+ (packageId==null? "" : Uri.EscapeDataString(packageId))+"&includeAllVersions="+includeAllVersions+"&includeUrls="+includeUrls+"&isListed="+isListed+"&isRelease="+isRelease+"&includeDeleted="+includeDeleted+"&includeDescription="+includeDescription+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Package>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Artifact__Details_Query_Package_Version_Metrics {organization}/{project}/_apis/packaging/Feeds/{feedId}/Packages/{packageId}/versionmetricsbatch
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<PackageVersionMetrics[]> Artifact__Details_Query_Package_Version_MetricsAsync(string organization, string feedId, string packageId, string project, string api_version, PackageVersionMetricsQuery requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/Packages/"+ (packageId==null? "" : Uri.EscapeDataString(packageId))+"/versionmetricsbatch&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PackageVersionMetrics[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Artifact__Details_Query_Package_Version_Metrics {organization}/{project}/_apis/packaging/Feeds/{feedId}/Packages/{packageId}/versionmetricsbatch
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public PackageVersionMetrics[] Artifact__Details_Query_Package_Version_Metrics(string organization, string feedId, string packageId, string project, string api_version, PackageVersionMetricsQuery requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/Packages/"+ (packageId==null? "" : Uri.EscapeDataString(packageId))+"/versionmetricsbatch&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PackageVersionMetrics[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of package versions, optionally filtering by state.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Artifact__Details_Get_Package_Versions {organization}/{project}/_apis/packaging/Feeds/{feedId}/Packages/{packageId}/versions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="packageId">Id of the package (GUID Id, not name).</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="includeUrls">True to include urls for each version. Default is true.</param>
		/// <param name="isListed">Only applicable for NuGet packages. If false, delisted package versions will be returned.</param>
		/// <param name="isDeleted">If set specifies whether to return only deleted or non-deleted versions of packages in the response. Default is unset (return all versions).</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<PackageVersion[]> Artifact__Details_Get_Package_VersionsAsync(string organization, string feedId, string packageId, string project, bool includeUrls, bool isListed, bool isDeleted, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/Packages/"+ (packageId==null? "" : Uri.EscapeDataString(packageId))+"/versions&includeUrls="+includeUrls+"&isListed="+isListed+"&isDeleted="+isDeleted+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PackageVersion[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of package versions, optionally filtering by state.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Artifact__Details_Get_Package_Versions {organization}/{project}/_apis/packaging/Feeds/{feedId}/Packages/{packageId}/versions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="packageId">Id of the package (GUID Id, not name).</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="includeUrls">True to include urls for each version. Default is true.</param>
		/// <param name="isListed">Only applicable for NuGet packages. If false, delisted package versions will be returned.</param>
		/// <param name="isDeleted">If set specifies whether to return only deleted or non-deleted versions of packages in the response. Default is unset (return all versions).</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public PackageVersion[] Artifact__Details_Get_Package_Versions(string organization, string feedId, string packageId, string project, bool includeUrls, bool isListed, bool isDeleted, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/Packages/"+ (packageId==null? "" : Uri.EscapeDataString(packageId))+"/versions&includeUrls="+includeUrls+"&isListed="+isListed+"&isDeleted="+isDeleted+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PackageVersion[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details about a specific package version.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Artifact__Details_Get_Package_Version {organization}/{project}/_apis/packaging/Feeds/{feedId}/Packages/{packageId}/versions/{packageVersionId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="packageId">Id of the package (GUID Id, not name).</param>
		/// <param name="packageVersionId">Id of the package version (GUID Id, not name).</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="includeUrls">True to include urls for each version. Default is true.</param>
		/// <param name="isListed">Only applicable for NuGet packages. If false, delisted package versions will be returned.</param>
		/// <param name="isDeleted">This does not have any effect on the requested package version, for other versions returned specifies whether to return only deleted or non-deleted versions of packages in the response. Default is unset (return all versions).</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<PackageVersion> Artifact__Details_Get_Package_VersionAsync(string organization, string feedId, string packageId, string packageVersionId, string project, bool includeUrls, bool isListed, bool isDeleted, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/Packages/"+ (packageId==null? "" : Uri.EscapeDataString(packageId))+"/versions/"+ (packageVersionId==null? "" : Uri.EscapeDataString(packageVersionId))+"&includeUrls="+includeUrls+"&isListed="+isListed+"&isDeleted="+isDeleted+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PackageVersion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details about a specific package version.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Artifact__Details_Get_Package_Version {organization}/{project}/_apis/packaging/Feeds/{feedId}/Packages/{packageId}/versions/{packageVersionId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="packageId">Id of the package (GUID Id, not name).</param>
		/// <param name="packageVersionId">Id of the package version (GUID Id, not name).</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="includeUrls">True to include urls for each version. Default is true.</param>
		/// <param name="isListed">Only applicable for NuGet packages. If false, delisted package versions will be returned.</param>
		/// <param name="isDeleted">This does not have any effect on the requested package version, for other versions returned specifies whether to return only deleted or non-deleted versions of packages in the response. Default is unset (return all versions).</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public PackageVersion Artifact__Details_Get_Package_Version(string organization, string feedId, string packageId, string packageVersionId, string project, bool includeUrls, bool isListed, bool isDeleted, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/Packages/"+ (packageId==null? "" : Uri.EscapeDataString(packageId))+"/versions/"+ (packageVersionId==null? "" : Uri.EscapeDataString(packageVersionId))+"&includeUrls="+includeUrls+"&isListed="+isListed+"&isDeleted="+isDeleted+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PackageVersion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets provenance for a package version.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Artifact__Details_GetPackageVersionProvenance {organization}/{project}/_apis/packaging/Feeds/{feedId}/Packages/{packageId}/Versions/{packageVersionId}/provenance
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="packageId">Id of the package (GUID Id, not name).</param>
		/// <param name="packageVersionId">Id of the package version (GUID Id, not name).</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<PackageVersionProvenance> Artifact__Details_GetPackageVersionProvenanceAsync(string organization, string feedId, string packageId, string packageVersionId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/Packages/"+ (packageId==null? "" : Uri.EscapeDataString(packageId))+"/Versions/"+ (packageVersionId==null? "" : Uri.EscapeDataString(packageVersionId))+"/provenance&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PackageVersionProvenance>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets provenance for a package version.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Artifact__Details_GetPackageVersionProvenance {organization}/{project}/_apis/packaging/Feeds/{feedId}/Packages/{packageId}/Versions/{packageVersionId}/provenance
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="packageId">Id of the package (GUID Id, not name).</param>
		/// <param name="packageVersionId">Id of the package version (GUID Id, not name).</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public PackageVersionProvenance Artifact__Details_GetPackageVersionProvenance(string organization, string feedId, string packageId, string packageVersionId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/Packages/"+ (packageId==null? "" : Uri.EscapeDataString(packageId))+"/Versions/"+ (packageVersionId==null? "" : Uri.EscapeDataString(packageVersionId))+"/provenance&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PackageVersionProvenance>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the permissions for a feed.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Feed__Management_Get_Feed_Permissions {organization}/{project}/_apis/packaging/Feeds/{feedId}/permissions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="includeIds">True to include user Ids in the response.  Default is false.</param>
		/// <param name="excludeInheritedPermissions">True to only return explicitly set permissions on the feed.  Default is false.</param>
		/// <param name="identityDescriptor">Filter permissions to the provided identity.</param>
		/// <param name="includeDeletedFeeds">If includeDeletedFeeds is true, then feedId must be specified by name and not by Guid.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<FeedPermission[]> Feed__Management_Get_Feed_PermissionsAsync(string organization, string feedId, string project, bool includeIds, bool excludeInheritedPermissions, string identityDescriptor, bool includeDeletedFeeds, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/permissions&includeIds="+includeIds+"&excludeInheritedPermissions="+excludeInheritedPermissions+"&identityDescriptor=" + (identityDescriptor==null? "" : Uri.EscapeDataString(identityDescriptor))+"&includeDeletedFeeds="+includeDeletedFeeds+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedPermission[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the permissions for a feed.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Feed__Management_Get_Feed_Permissions {organization}/{project}/_apis/packaging/Feeds/{feedId}/permissions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="includeIds">True to include user Ids in the response.  Default is false.</param>
		/// <param name="excludeInheritedPermissions">True to only return explicitly set permissions on the feed.  Default is false.</param>
		/// <param name="identityDescriptor">Filter permissions to the provided identity.</param>
		/// <param name="includeDeletedFeeds">If includeDeletedFeeds is true, then feedId must be specified by name and not by Guid.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public FeedPermission[] Feed__Management_Get_Feed_Permissions(string organization, string feedId, string project, bool includeIds, bool excludeInheritedPermissions, string identityDescriptor, bool includeDeletedFeeds, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/permissions&includeIds="+includeIds+"&excludeInheritedPermissions="+excludeInheritedPermissions+"&identityDescriptor=" + (identityDescriptor==null? "" : Uri.EscapeDataString(identityDescriptor))+"&includeDeletedFeeds="+includeDeletedFeeds+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedPermission[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the permissions on a feed.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Feed__Management_Set_Feed_Permissions {organization}/{project}/_apis/packaging/Feeds/{feedId}/permissions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Permissions to set.</param>
		/// <returns>successful operation</returns>
		public async Task<FeedPermission[]> Feed__Management_Set_Feed_PermissionsAsync(string organization, string feedId, string project, string api_version, FeedPermission[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/permissions&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedPermission[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update the permissions on a feed.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Feed__Management_Set_Feed_Permissions {organization}/{project}/_apis/packaging/Feeds/{feedId}/permissions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Permissions to set.</param>
		/// <returns>successful operation</returns>
		public FeedPermission[] Feed__Management_Set_Feed_Permissions(string organization, string feedId, string project, string api_version, FeedPermission[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/permissions&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedPermission[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Query for packages within the recycle bin.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Recycle__Bin_Get_Recycle_Bin_Packages {organization}/{project}/_apis/packaging/Feeds/{feedId}/RecycleBin/Packages
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="protocolType">Type of package (e.g. NuGet, npm, ...).</param>
		/// <param name="packageNameQuery">Filter to packages matching this name.</param>
		/// <param name="includeUrls">True to return REST Urls with the response.  Default is True.</param>
		/// <param name="top">Get the top N packages.</param>
		/// <param name="skip">Skip the first N packages.</param>
		/// <param name="includeAllVersions">True to return all versions of the package in the response.  Default is false (latest version only).</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Package[]> Recycle__Bin_Get_Recycle_Bin_PackagesAsync(string organization, string feedId, string project, string protocolType, string packageNameQuery, bool includeUrls, int top, int skip, bool includeAllVersions, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/RecycleBin/Packages&protocolType=" + (protocolType==null? "" : Uri.EscapeDataString(protocolType))+"&packageNameQuery=" + (packageNameQuery==null? "" : Uri.EscapeDataString(packageNameQuery))+"&includeUrls="+includeUrls+"&$top="+top+"&$skip="+skip+"&includeAllVersions="+includeAllVersions+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Package[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Query for packages within the recycle bin.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Recycle__Bin_Get_Recycle_Bin_Packages {organization}/{project}/_apis/packaging/Feeds/{feedId}/RecycleBin/Packages
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="protocolType">Type of package (e.g. NuGet, npm, ...).</param>
		/// <param name="packageNameQuery">Filter to packages matching this name.</param>
		/// <param name="includeUrls">True to return REST Urls with the response.  Default is True.</param>
		/// <param name="top">Get the top N packages.</param>
		/// <param name="skip">Skip the first N packages.</param>
		/// <param name="includeAllVersions">True to return all versions of the package in the response.  Default is false (latest version only).</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Package[] Recycle__Bin_Get_Recycle_Bin_Packages(string organization, string feedId, string project, string protocolType, string packageNameQuery, bool includeUrls, int top, int skip, bool includeAllVersions, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/RecycleBin/Packages&protocolType=" + (protocolType==null? "" : Uri.EscapeDataString(protocolType))+"&packageNameQuery=" + (packageNameQuery==null? "" : Uri.EscapeDataString(packageNameQuery))+"&includeUrls="+includeUrls+"&$top="+top+"&$skip="+skip+"&includeAllVersions="+includeAllVersions+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Package[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about a package and all its versions within the recycle bin.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Recycle__Bin_Get_Recycle_Bin_Package {organization}/{project}/_apis/packaging/Feeds/{feedId}/RecycleBin/Packages/{packageId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="packageId">The package Id (GUID Id, not the package name).</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="includeUrls">True to return REST Urls with the response.  Default is True.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Package> Recycle__Bin_Get_Recycle_Bin_PackageAsync(string organization, string feedId, string packageId, string project, bool includeUrls, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/RecycleBin/Packages/"+ (packageId==null? "" : Uri.EscapeDataString(packageId))+"&includeUrls="+includeUrls+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Package>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about a package and all its versions within the recycle bin.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Recycle__Bin_Get_Recycle_Bin_Package {organization}/{project}/_apis/packaging/Feeds/{feedId}/RecycleBin/Packages/{packageId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="packageId">The package Id (GUID Id, not the package name).</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="includeUrls">True to return REST Urls with the response.  Default is True.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Package Recycle__Bin_Get_Recycle_Bin_Package(string organization, string feedId, string packageId, string project, bool includeUrls, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/RecycleBin/Packages/"+ (packageId==null? "" : Uri.EscapeDataString(packageId))+"&includeUrls="+includeUrls+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Package>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of package versions within the recycle bin.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Recycle__Bin_Get_Recycle_Bin_Package_Versions {organization}/{project}/_apis/packaging/Feeds/{feedId}/RecycleBin/Packages/{packageId}/Versions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="packageId">The package Id (GUID Id, not the package name).</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="includeUrls">True to return REST Urls with the response.  Default is True.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<RecycleBinPackageVersion[]> Recycle__Bin_Get_Recycle_Bin_Package_VersionsAsync(string organization, string feedId, string packageId, string project, bool includeUrls, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/RecycleBin/Packages/"+ (packageId==null? "" : Uri.EscapeDataString(packageId))+"/Versions&includeUrls="+includeUrls+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RecycleBinPackageVersion[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of package versions within the recycle bin.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Recycle__Bin_Get_Recycle_Bin_Package_Versions {organization}/{project}/_apis/packaging/Feeds/{feedId}/RecycleBin/Packages/{packageId}/Versions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="packageId">The package Id (GUID Id, not the package name).</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="includeUrls">True to return REST Urls with the response.  Default is True.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public RecycleBinPackageVersion[] Recycle__Bin_Get_Recycle_Bin_Package_Versions(string organization, string feedId, string packageId, string project, bool includeUrls, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/RecycleBin/Packages/"+ (packageId==null? "" : Uri.EscapeDataString(packageId))+"/Versions&includeUrls="+includeUrls+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RecycleBinPackageVersion[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about a package version within the recycle bin.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Recycle__Bin_Get_Recycle_Bin_Package_Version {organization}/{project}/_apis/packaging/Feeds/{feedId}/RecycleBin/Packages/{packageId}/Versions/{packageVersionId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="packageId">The package Id (GUID Id, not the package name).</param>
		/// <param name="packageVersionId">The package version Id 9guid Id, not the version string).</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="includeUrls">True to return REST Urls with the response.  Default is True.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<RecycleBinPackageVersion> Recycle__Bin_Get_Recycle_Bin_Package_VersionAsync(string organization, string feedId, string packageId, string packageVersionId, string project, bool includeUrls, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/RecycleBin/Packages/"+ (packageId==null? "" : Uri.EscapeDataString(packageId))+"/Versions/"+ (packageVersionId==null? "" : Uri.EscapeDataString(packageVersionId))+"&includeUrls="+includeUrls+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RecycleBinPackageVersion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about a package version within the recycle bin.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Recycle__Bin_Get_Recycle_Bin_Package_Version {organization}/{project}/_apis/packaging/Feeds/{feedId}/RecycleBin/Packages/{packageId}/Versions/{packageVersionId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="packageId">The package Id (GUID Id, not the package name).</param>
		/// <param name="packageVersionId">The package version Id 9guid Id, not the version string).</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="includeUrls">True to return REST Urls with the response.  Default is True.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public RecycleBinPackageVersion Recycle__Bin_Get_Recycle_Bin_Package_Version(string organization, string feedId, string packageId, string packageVersionId, string project, bool includeUrls, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/RecycleBin/Packages/"+ (packageId==null? "" : Uri.EscapeDataString(packageId))+"/Versions/"+ (packageVersionId==null? "" : Uri.EscapeDataString(packageVersionId))+"&includeUrls="+includeUrls+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RecycleBinPackageVersion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the retention policy for a feed.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Retention__Policies_Get_Retention_Policy {organization}/{project}/_apis/packaging/Feeds/{feedId}/retentionpolicies
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or ID of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<FeedRetentionPolicy> Retention__Policies_Get_Retention_PolicyAsync(string organization, string feedId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/retentionpolicies&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedRetentionPolicy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the retention policy for a feed.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Retention__Policies_Get_Retention_Policy {organization}/{project}/_apis/packaging/Feeds/{feedId}/retentionpolicies
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or ID of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public FeedRetentionPolicy Retention__Policies_Get_Retention_Policy(string organization, string feedId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/retentionpolicies&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedRetentionPolicy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the retention policy for a feed.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Retention__Policies_Set_Retention_Policy {organization}/{project}/_apis/packaging/Feeds/{feedId}/retentionpolicies
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or ID of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Feed retention policy.</param>
		/// <returns>successful operation</returns>
		public async Task<FeedRetentionPolicy> Retention__Policies_Set_Retention_PolicyAsync(string organization, string feedId, string project, string api_version, FeedRetentionPolicy requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/retentionpolicies&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedRetentionPolicy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Set the retention policy for a feed.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Retention__Policies_Set_Retention_Policy {organization}/{project}/_apis/packaging/Feeds/{feedId}/retentionpolicies
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or ID of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Feed retention policy.</param>
		/// <returns>successful operation</returns>
		public FeedRetentionPolicy Retention__Policies_Set_Retention_Policy(string organization, string feedId, string project, string api_version, FeedRetentionPolicy requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/retentionpolicies&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedRetentionPolicy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete the retention policy for a feed.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Retention__Policies_Delete_Retention_Policy {organization}/{project}/_apis/packaging/Feeds/{feedId}/retentionpolicies
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or ID of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Retention__Policies_Delete_Retention_PolicyAsync(string organization, string feedId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/retentionpolicies&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the retention policy for a feed.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Retention__Policies_Delete_Retention_Policy {organization}/{project}/_apis/packaging/Feeds/{feedId}/retentionpolicies
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or ID of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Retention__Policies_Delete_Retention_Policy(string organization, string feedId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/retentionpolicies&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all views for a feed.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// Feed__Management_Get_Feed_Views {organization}/{project}/_apis/packaging/Feeds/{feedId}/views
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<FeedView[]> Feed__Management_Get_Feed_ViewsAsync(string organization, string feedId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/views&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedView[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all views for a feed.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// Feed__Management_Get_Feed_Views {organization}/{project}/_apis/packaging/Feeds/{feedId}/views
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public FeedView[] Feed__Management_Get_Feed_Views(string organization, string feedId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/views&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedView[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new view on the referenced feed.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// Feed__Management_Create_Feed_View {organization}/{project}/_apis/packaging/Feeds/{feedId}/views
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">View to be created.</param>
		/// <returns>successful operation</returns>
		public async Task<FeedView> Feed__Management_Create_Feed_ViewAsync(string organization, string feedId, string project, string api_version, FeedView requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/views&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedView>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a new view on the referenced feed.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// Feed__Management_Create_Feed_View {organization}/{project}/_apis/packaging/Feeds/{feedId}/views
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">View to be created.</param>
		/// <returns>successful operation</returns>
		public FeedView Feed__Management_Create_Feed_View(string organization, string feedId, string project, string api_version, FeedView requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/views&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedView>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a view by Id.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// Feed__Management_Get_Feed_View {organization}/{project}/_apis/packaging/Feeds/{feedId}/views/{viewId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="viewId">Name or Id of the view.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<FeedView> Feed__Management_Get_Feed_ViewAsync(string organization, string feedId, string viewId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/views/"+ (viewId==null? "" : Uri.EscapeDataString(viewId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedView>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a view by Id.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// Feed__Management_Get_Feed_View {organization}/{project}/_apis/packaging/Feeds/{feedId}/views/{viewId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="viewId">Name or Id of the view.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public FeedView Feed__Management_Get_Feed_View(string organization, string feedId, string viewId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/views/"+ (viewId==null? "" : Uri.EscapeDataString(viewId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedView>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a feed view.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// Feed__Management_Delete_Feed_View {organization}/{project}/_apis/packaging/Feeds/{feedId}/views/{viewId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="viewId">Name or Id of the view.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Feed__Management_Delete_Feed_ViewAsync(string organization, string feedId, string viewId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/views/"+ (viewId==null? "" : Uri.EscapeDataString(viewId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a feed view.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// Feed__Management_Delete_Feed_View {organization}/{project}/_apis/packaging/Feeds/{feedId}/views/{viewId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="viewId">Name or Id of the view.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Feed__Management_Delete_Feed_View(string organization, string feedId, string viewId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/views/"+ (viewId==null? "" : Uri.EscapeDataString(viewId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a view.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// Feed__Management_Update_Feed_View {organization}/{project}/_apis/packaging/Feeds/{feedId}/views/{viewId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="viewId">Name or Id of the view.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">New settings to apply to the specified view.</param>
		/// <returns>successful operation</returns>
		public async Task<FeedView> Feed__Management_Update_Feed_ViewAsync(string organization, string feedId, string viewId, string project, string api_version, FeedView requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/views/"+ (viewId==null? "" : Uri.EscapeDataString(viewId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedView>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a view.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// Feed__Management_Update_Feed_View {organization}/{project}/_apis/packaging/Feeds/{feedId}/views/{viewId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="viewId">Name or Id of the view.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">New settings to apply to the specified view.</param>
		/// <returns>successful operation</returns>
		public FeedView Feed__Management_Update_Feed_View(string organization, string feedId, string viewId, string project, string api_version, FeedView requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/views/"+ (viewId==null? "" : Uri.EscapeDataString(viewId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedView>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate a SVG badge for the latest version of a package.  The generated SVG is typically used as the image in an HTML link which takes users to the feed containing the package to accelerate discovery and consumption.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Artifact__Details_Get_Badge {organization}/{project}/_apis/public/packaging/Feeds/{feedId}/Packages/{packageId}/badge
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="packageId">Id of the package (GUID Id, not name).</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Artifact__Details_Get_BadgeAsync(string organization, string feedId, string packageId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/public/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/Packages/"+ (packageId==null? "" : Uri.EscapeDataString(packageId))+"/badge&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate a SVG badge for the latest version of a package.  The generated SVG is typically used as the image in an HTML link which takes users to the feed containing the package to accelerate discovery and consumption.
		/// 
		/// The project parameter must be supplied if the feed was created in a project.
		/// If the feed is not associated with any project, omit the project parameter from the request.
		/// Artifact__Details_Get_Badge {organization}/{project}/_apis/public/packaging/Feeds/{feedId}/Packages/{packageId}/badge
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="feedId">Name or Id of the feed.</param>
		/// <param name="packageId">Id of the package (GUID Id, not name).</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Artifact__Details_Get_Badge(string organization, string feedId, string packageId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/public/packaging/Feeds/"+ (feedId==null? "" : Uri.EscapeDataString(feedId))+"/Packages/"+ (packageId==null? "" : Uri.EscapeDataString(packageId))+"/badge&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
