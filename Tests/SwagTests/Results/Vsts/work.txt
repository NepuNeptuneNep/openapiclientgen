//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public class Activity
	{
		
		public System.Nullable<System.Single> CapacityPerDay { get; set; }
		
		public string Name { get; set; }
	}
	
	public class Attribute
	{
	}
	
	public class BacklogColumn
	{
		
		/// <summary>
		/// Reference to a field in a work item
		/// </summary>
		public WorkItemFieldReference ColumnFieldReference { get; set; }
		
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// Reference to a field in a work item
	/// </summary>
	public class WorkItemFieldReference
	{
		
		/// <summary>
		/// The friendly name of the field.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The reference name of the field.
		/// </summary>
		public string ReferenceName { get; set; }
		
		/// <summary>
		/// The REST URL of the resource.
		/// </summary>
		public string Url { get; set; }
	}
	
	public class BacklogConfiguration
	{
		
		public BacklogFields BacklogFields { get; set; }
		
		/// <summary>
		/// Bugs behavior
		/// </summary>
		public System.Nullable<BacklogConfigurationBugsBehavior> BugsBehavior { get; set; }
		
		/// <summary>
		/// Hidden Backlog
		/// </summary>
		public string[] HiddenBacklogs { get; set; }
		
		/// <summary>
		/// Is BugsBehavior Configured in the process
		/// </summary>
		public System.Nullable<System.Boolean> IsBugsBehaviorConfigured { get; set; }
		
		/// <summary>
		/// Portfolio backlog descriptors
		/// </summary>
		public BacklogLevelConfiguration[] PortfolioBacklogs { get; set; }
		
		public BacklogLevelConfiguration RequirementBacklog { get; set; }
		
		public BacklogLevelConfiguration TaskBacklog { get; set; }
		
		public string Url { get; set; }
		
		/// <summary>
		/// Mapped states for work item types
		/// </summary>
		public WorkItemTypeStateInfo[] WorkItemTypeMappedStates { get; set; }
	}
	
	public class BacklogFields
	{
		
		/// <summary>
		/// Field Type (e.g. Order, Activity) to Field Reference Name map
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> TypeFields { get; set; }
	}
	
	public enum BacklogConfigurationBugsBehavior
	{
		
		off = 0,
		
		asRequirements = 1,
		
		asTasks = 2,
	}
	
	public class BacklogLevelConfiguration
	{
		
		/// <summary>
		/// List of fields to include in Add Panel
		/// </summary>
		public WorkItemFieldReference[] AddPanelFields { get; set; }
		
		/// <summary>
		/// Color for the backlog level
		/// </summary>
		public string Color { get; set; }
		
		/// <summary>
		/// Default list of columns for the backlog
		/// </summary>
		public BacklogColumn[] ColumnFields { get; set; }
		
		/// <summary>
		/// Reference to a work item type.
		/// </summary>
		public WorkItemTypeReference DefaultWorkItemType { get; set; }
		
		/// <summary>
		/// Backlog Id (for Legacy Backlog Level from process config it can be categoryref name)
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates whether the backlog level is hidden
		/// </summary>
		public System.Nullable<System.Boolean> IsHidden { get; set; }
		
		/// <summary>
		/// Backlog Name
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Backlog Rank (Taskbacklog is 0)
		/// </summary>
		public System.Nullable<System.Int32> Rank { get; set; }
		
		/// <summary>
		/// The type of this backlog level
		/// </summary>
		public System.Nullable<BacklogLevelConfigurationType> Type { get; set; }
		
		/// <summary>
		/// Max number of work items to show in the given backlog
		/// </summary>
		public System.Nullable<System.Int32> WorkItemCountLimit { get; set; }
		
		/// <summary>
		/// Work Item types participating in this backlog as known by the project/Process, can be overridden by team settings for bugs
		/// </summary>
		public WorkItemTypeReference[] WorkItemTypes { get; set; }
	}
	
	/// <summary>
	/// Reference to a work item type.
	/// </summary>
	public class WorkItemTypeReference
	{
		
		/// <summary>
		/// Name of the work item type.
		/// </summary>
		public string Name { get; set; }
	}
	
	public enum BacklogLevelConfigurationType
	{
		
		portfolio = 0,
		
		requirement = 1,
		
		task = 2,
	}
	
	public class WorkItemTypeStateInfo
	{
		
		/// <summary>
		/// State name to state category map
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> States { get; set; }
		
		/// <summary>
		/// Work Item type name
		/// </summary>
		public string WorkItemTypeName { get; set; }
	}
	
	/// <summary>
	/// Contract representing a backlog level
	/// </summary>
	public class BacklogLevel
	{
		
		/// <summary>
		/// Reference name of the corresponding WIT category
		/// </summary>
		public string CategoryReferenceName { get; set; }
		
		/// <summary>
		/// Plural name for the backlog level
		/// </summary>
		public string PluralName { get; set; }
		
		/// <summary>
		/// Collection of work item states that are included in the plan. The server will filter to only these work item types.
		/// </summary>
		public string[] WorkItemStates { get; set; }
		
		/// <summary>
		/// Collection of valid workitem type names for the given backlog level
		/// </summary>
		public string[] WorkItemTypes { get; set; }
	}
	
	/// <summary>
	/// Represents work items in a backlog level
	/// </summary>
	public class BacklogLevelWorkItems
	{
		
		/// <summary>
		/// A list of work items within a backlog level
		/// </summary>
		public WorkItemLink[] WorkItems { get; set; }
	}
	
	/// <summary>
	/// A link between two work items.
	/// </summary>
	public class WorkItemLink
	{
		
		/// <summary>
		/// The type of link.
		/// </summary>
		public string Rel { get; set; }
		
		/// <summary>
		/// Contains reference to a work item.
		/// </summary>
		public WorkItemReference Source { get; set; }
		
		/// <summary>
		/// Contains reference to a work item.
		/// </summary>
		public WorkItemReference Target { get; set; }
	}
	
	/// <summary>
	/// Contains reference to a work item.
	/// </summary>
	public class WorkItemReference
	{
		
		/// <summary>
		/// Work item ID.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// REST API URL of the resource
		/// </summary>
		public string Url { get; set; }
	}
	
	public class Board
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		public System.Collections.Generic.Dictionary<string, object> AllowedMappings { get; set; }
		
		public System.Nullable<System.Boolean> CanEdit { get; set; }
		
		public BoardColumn[] Columns { get; set; }
		
		public BoardFields Fields { get; set; }
		
		public System.Nullable<System.Boolean> IsValid { get; set; }
		
		public System.Nullable<System.Int32> Revision { get; set; }
		
		public BoardRow[] Rows { get; set; }
	}
	
	/// <summary>
	/// The class to represent a collection of REST reference links.
	/// </summary>
	public class ReferenceLinks
	{
		
		/// <summary>
		/// The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Links { get; set; }
	}
	
	public class BoardColumn
	{
		
		public System.Nullable<BoardColumnColumnType> ColumnType { get; set; }
		
		public string Description { get; set; }
		
		public string Id { get; set; }
		
		public System.Nullable<System.Boolean> IsSplit { get; set; }
		
		public System.Nullable<System.Int32> ItemLimit { get; set; }
		
		public string Name { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> StateMappings { get; set; }
	}
	
	public enum BoardColumnColumnType
	{
		
		incoming = 0,
		
		inProgress = 1,
		
		outgoing = 2,
	}
	
	public class BoardFields
	{
		
		/// <summary>
		/// An abstracted reference to a field
		/// </summary>
		public FieldReference ColumnField { get; set; }
		
		/// <summary>
		/// An abstracted reference to a field
		/// </summary>
		public FieldReference DoneField { get; set; }
		
		/// <summary>
		/// An abstracted reference to a field
		/// </summary>
		public FieldReference RowField { get; set; }
	}
	
	/// <summary>
	/// An abstracted reference to a field
	/// </summary>
	public class FieldReference
	{
		
		/// <summary>
		/// fieldRefName for the field
		/// </summary>
		public string ReferenceName { get; set; }
		
		/// <summary>
		/// Full http link to more information about the field
		/// </summary>
		public string Url { get; set; }
	}
	
	public class BoardRow
	{
		
		public string Id { get; set; }
		
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents a board badge.
	/// </summary>
	public class BoardBadge
	{
		
		/// <summary>
		/// The ID of the board represented by this badge.
		/// </summary>
		public string BoardId { get; set; }
		
		/// <summary>
		/// A link to the SVG resource.
		/// </summary>
		public string ImageUrl { get; set; }
	}
	
	public class BoardCardRuleSettings
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		public System.Collections.Generic.Dictionary<string, Rule[]> Rules { get; set; }
		
		public string Url { get; set; }
	}
	
	public class Rule
	{
		
		public FilterClause[] Clauses { get; set; }
		
		public string Filter { get; set; }
		
		public string IsEnabled { get; set; }
		
		public string Name { get; set; }
		
		public Attribute Settings { get; set; }
	}
	
	public class FilterClause
	{
		
		public string FieldName { get; set; }
		
		public System.Nullable<System.Int32> Index { get; set; }
		
		public string LogicalOperator { get; set; }
		
		public string Operator { get; set; }
		
		public string Value { get; set; }
	}
	
	public class BoardCardSettings
	{
		
		public System.Collections.Generic.Dictionary<string, FieldSetting[]> Cards { get; set; }
	}
	
	public class FieldSetting
	{
	}
	
	public class BoardChart
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// The settings for the resource
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Settings { get; set; }
	}
	
	public class BoardChartReference
	{
		
		/// <summary>
		/// Name of the resource
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Full http link to the resource
		/// </summary>
		public string Url { get; set; }
	}
	
	public class BoardReference
	{
		
		/// <summary>
		/// Id of the resource
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the resource
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Full http link to the resource
		/// </summary>
		public string Url { get; set; }
	}
	
	public class BoardSuggestedValue
	{
		
		public string Name { get; set; }
	}
	
	public class BoardUserSettings
	{
		
		public System.Nullable<System.Boolean> AutoRefreshState { get; set; }
	}
	
	public class CapacityContractBase
	{
		
		/// <summary>
		/// Collection of capacities associated with the team member
		/// </summary>
		public Activity[] Activities { get; set; }
		
		/// <summary>
		/// The days off associated with the team member
		/// </summary>
		public DateRange[] DaysOff { get; set; }
	}
	
	public class DateRange
	{
		
		/// <summary>
		/// End of the date range.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		/// <summary>
		/// Start of the date range.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
	}
	
	/// <summary>
	/// Expected data from PATCH
	/// </summary>
	public class CapacityPatch
	{
		
		public Activity[] Activities { get; set; }
		
		public DateRange[] DaysOff { get; set; }
	}
	
	/// <summary>
	/// Card settings, such as fields and rules
	/// </summary>
	public class CardFieldSettings
	{
		
		/// <summary>
		/// A collection of field information of additional fields on cards. The index in the collection signifies the order of the field among the additional fields. Currently unused. Should be used with User Story 691539: Card setting: additional fields
		/// </summary>
		public FieldInfo[] AdditionalFields { get; set; }
		
		/// <summary>
		/// Display format for the assigned to field
		/// </summary>
		public System.Nullable<CardFieldSettingsAssignedToDisplayFormat> AssignedToDisplayFormat { get; set; }
		
		/// <summary>
		/// A collection of field information of rendered core fields on cards.
		/// </summary>
		public FieldInfo[] CoreFields { get; set; }
		
		/// <summary>
		/// Flag indicating whether to show assigned to field on cards. When true, AssignedToDisplayFormat will determine how the field will be displayed
		/// </summary>
		public System.Nullable<System.Boolean> ShowAssignedTo { get; set; }
		
		/// <summary>
		/// Flag indicating whether to show empty fields on cards
		/// </summary>
		public System.Nullable<System.Boolean> ShowEmptyFields { get; set; }
		
		/// <summary>
		/// Flag indicating whether to show ID on cards
		/// </summary>
		public System.Nullable<System.Boolean> ShowId { get; set; }
		
		/// <summary>
		/// Flag indicating whether to show state field on cards
		/// </summary>
		public System.Nullable<System.Boolean> ShowState { get; set; }
		
		/// <summary>
		/// Flag indicating whether to show tags on cards
		/// </summary>
		public System.Nullable<System.Boolean> ShowTags { get; set; }
	}
	
	/// <summary>
	/// Object bag storing the set of permissions relevant to this plan
	/// </summary>
	public class FieldInfo
	{
		
		/// <summary>
		/// The additional field display name
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The additional field type
		/// </summary>
		public System.Nullable<FieldInfoFieldType> FieldType { get; set; }
		
		/// <summary>
		/// Indicates if the field definition is for an identity field.
		/// </summary>
		public System.Nullable<System.Boolean> IsIdentity { get; set; }
		
		/// <summary>
		/// The additional field reference name
		/// </summary>
		public string ReferenceName { get; set; }
	}
	
	public enum FieldInfoFieldType
	{
		
		_string = 0,
		
		plainText = 1,
		
		integer = 2,
		
		dateTime = 3,
		
		treePath = 4,
		
		boolean = 5,
		
		_double = 6,
	}
	
	public enum CardFieldSettingsAssignedToDisplayFormat
	{
		
		avatarOnly = 0,
		
		fullName = 1,
		
		avatarAndFullName = 2,
	}
	
	/// <summary>
	/// Card settings, such as fields and rules
	/// </summary>
	public class CardSettings
	{
		
		/// <summary>
		/// Card settings, such as fields and rules
		/// </summary>
		public CardFieldSettings Fields { get; set; }
	}
	
	/// <summary>
	/// Details about a given backlog category
	/// </summary>
	public class CategoryConfiguration
	{
		
		/// <summary>
		/// Name
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Category Reference Name
		/// </summary>
		public string ReferenceName { get; set; }
		
		/// <summary>
		/// Work item types for the backlog category
		/// </summary>
		public WorkItemTypeReference[] WorkItemTypes { get; set; }
	}
	
	public class CreatePlan
	{
		
		/// <summary>
		/// Description of the plan
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Name of the plan to create.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Plan properties.
		/// </summary>
		public string Properties { get; set; }
		
		/// <summary>
		/// Type of plan to create.
		/// </summary>
		public System.Nullable<CreatePlanType> Type { get; set; }
	}
	
	public enum CreatePlanType
	{
		
		deliveryTimelineView = 0,
	}
	
	/// <summary>
	/// Data contract for Data of Delivery View
	/// </summary>
	public class DeliveryViewData
	{
		
		/// <summary>
		/// Work item child id to parent id map
		/// </summary>
		public System.Collections.Generic.Dictionary<string, int> ChildIdToParentIdMap { get; set; }
		
		public TimelineCriteriaStatus CriteriaStatus { get; set; }
		
		/// <summary>
		/// The end date of the delivery view data
		/// </summary>
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// Max number of teams can be configured for a delivery plan.
		/// </summary>
		public System.Nullable<System.Int32> MaxExpandedTeams { get; set; }
		
		/// <summary>
		/// The start date for the delivery view data
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// All the team data
		/// </summary>
		public TimelineTeamData[] Teams { get; set; }
	}
	
	public class TimelineCriteriaStatus
	{
		
		public string Message { get; set; }
		
		public System.Nullable<TimelineCriteriaStatusType> Type { get; set; }
	}
	
	public enum TimelineCriteriaStatusType
	{
		
		ok = 0,
		
		invalidFilterClause = 1,
		
		unknown = 2,
	}
	
	public class TimelineTeamData
	{
		
		/// <summary>
		/// Contract representing a backlog level
		/// </summary>
		public BacklogLevel Backlog { get; set; }
		
		/// <summary>
		/// The field reference names of the work item data
		/// </summary>
		public string[] FieldReferenceNames { get; set; }
		
		/// <summary>
		/// The id of the team
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Was iteration and work item data retrieved for this team. <remarks> Teams with IsExpanded false have not had their iteration, work item, and field related data queried and will never contain this data. If true then these items are queried and, if there are items in the queried range, there will be data. </remarks>
		/// </summary>
		public System.Nullable<System.Boolean> IsExpanded { get; set; }
		
		/// <summary>
		/// The iteration data, including the work items, in the queried date range.
		/// </summary>
		public TimelineTeamIteration[] Iterations { get; set; }
		
		/// <summary>
		/// The name of the team
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The order by field name of this team
		/// </summary>
		public string OrderByField { get; set; }
		
		/// <summary>
		/// The field reference names of the partially paged work items, such as ID, WorkItemType
		/// </summary>
		public string[] PartiallyPagedFieldReferenceNames { get; set; }
		
		/// <summary>
		/// The project id the team belongs team
		/// </summary>
		public string ProjectId { get; set; }
		
		public TimelineTeamStatus Status { get; set; }
		
		/// <summary>
		/// The team field default value
		/// </summary>
		public string TeamFieldDefaultValue { get; set; }
		
		/// <summary>
		/// The team field name of this team
		/// </summary>
		public string TeamFieldName { get; set; }
		
		/// <summary>
		/// The team field values
		/// </summary>
		public TeamFieldValue[] TeamFieldValues { get; set; }
		
		/// <summary>
		/// Colors for the work item types.
		/// </summary>
		public WorkItemColor[] WorkItemTypeColors { get; set; }
	}
	
	public class TimelineTeamIteration
	{
		
		/// <summary>
		/// The iteration CSS Node Id
		/// </summary>
		public string CssNodeId { get; set; }
		
		/// <summary>
		/// The end date of the iteration
		/// </summary>
		public System.Nullable<System.DateTimeOffset> FinishDate { get; set; }
		
		/// <summary>
		/// The iteration name
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// All the partially paged workitems in this iteration.
		/// </summary>
		public string[] PartiallyPagedWorkItems { get; set; }
		
		/// <summary>
		/// The iteration path
		/// </summary>
		public string Path { get; set; }
		
		/// <summary>
		/// The start date of the iteration
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		public TimelineIterationStatus Status { get; set; }
		
		/// <summary>
		/// The work items that have been paged in this iteration
		/// </summary>
		public string[] WorkItems { get; set; }
	}
	
	public class TimelineIterationStatus
	{
		
		public string Message { get; set; }
		
		public System.Nullable<TimelineIterationStatusType> Type { get; set; }
	}
	
	public enum TimelineIterationStatusType
	{
		
		ok = 0,
		
		isOverlapping = 1,
	}
	
	public class TimelineTeamStatus
	{
		
		public string Message { get; set; }
		
		public System.Nullable<TimelineTeamStatusType> Type { get; set; }
	}
	
	public enum TimelineTeamStatusType
	{
		
		ok = 0,
		
		doesntExistOrAccessDenied = 1,
		
		maxTeamsExceeded = 2,
		
		maxTeamFieldsExceeded = 3,
		
		backlogInError = 4,
		
		missingTeamFieldValue = 5,
		
		noIterationsExist = 6,
	}
	
	/// <summary>
	/// Represents a single TeamFieldValue
	/// </summary>
	public class TeamFieldValue
	{
		
		public System.Nullable<System.Boolean> IncludeChildren { get; set; }
		
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Work item color and icon.
	/// </summary>
	public class WorkItemColor
	{
		
		public string Icon { get; set; }
		
		public string PrimaryColor { get; set; }
		
		public string WorkItemTypeName { get; set; }
	}
	
	/// <summary>
	/// Collection of properties, specific to the DeliveryTimelineView
	/// </summary>
	public class DeliveryViewPropertyCollection
	{
		
		/// <summary>
		/// Card settings, such as fields and rules
		/// </summary>
		public CardSettings CardSettings { get; set; }
		
		/// <summary>
		/// Field criteria
		/// </summary>
		public FilterClause[] Criteria { get; set; }
		
		/// <summary>
		/// Markers. Will be missing/null if there are no markers.
		/// </summary>
		public Marker[] Markers { get; set; }
		
		/// <summary>
		/// Team backlog mappings
		/// </summary>
		public TeamBacklogMapping[] TeamBacklogMappings { get; set; }
	}
	
	/// <summary>
	/// Client serialization contract for Delivery Timeline Markers.
	/// </summary>
	public class Marker
	{
		
		/// <summary>
		/// Color associated with the marker.
		/// </summary>
		public string Color { get; set; }
		
		/// <summary>
		/// Where the marker should be displayed on the timeline.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Label/title for the marker.
		/// </summary>
		public string Label { get; set; }
	}
	
	/// <summary>
	/// Mapping of teams to the corresponding work item category
	/// </summary>
	public class TeamBacklogMapping
	{
		
		public string CategoryReferenceName { get; set; }
		
		public string TeamId { get; set; }
	}
	
	public class FilterGroup
	{
		
		public System.Nullable<System.Int32> End { get; set; }
		
		public System.Nullable<System.Int32> Level { get; set; }
		
		public System.Nullable<System.Int32> Start { get; set; }
	}
	
	public class GraphSubjectBase
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
		/// </summary>
		public string Descriptor { get; set; }
		
		/// <summary>
		/// This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// This url is the full route to the source resource of this graph subject.
		/// </summary>
		public string Url { get; set; }
	}
	
	public class IdentityRef
	{
		
		/// <summary>
		/// Deprecated - Can be retrieved by querying the Graph user referenced in the "self" entry of the IdentityRef "_links" dictionary
		/// </summary>
		public string DirectoryAlias { get; set; }
		
		public string Id { get; set; }
		
		/// <summary>
		/// Deprecated - Available in the "avatar" entry of the IdentityRef "_links" dictionary
		/// </summary>
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Deprecated - Can be retrieved by querying the Graph membership state referenced in the "membershipState" entry of the GraphUser "_links" dictionary
		/// </summary>
		public System.Nullable<System.Boolean> Inactive { get; set; }
		
		/// <summary>
		/// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsAadUserType/Descriptor.IsAadGroupType)
		/// </summary>
		public System.Nullable<System.Boolean> IsAadIdentity { get; set; }
		
		/// <summary>
		/// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsGroupType)
		/// </summary>
		public System.Nullable<System.Boolean> IsContainer { get; set; }
		
		public System.Nullable<System.Boolean> IsDeletedInOrigin { get; set; }
		
		/// <summary>
		/// Deprecated - not in use in most preexisting implementations of ToIdentityRef
		/// </summary>
		public string ProfileUrl { get; set; }
		
		/// <summary>
		/// Deprecated - use Domain+PrincipalName instead
		/// </summary>
		public string UniqueName { get; set; }
	}
	
	public class ITaskboardColumnMapping
	{
		
		public string State { get; set; }
		
		public string WorkItemType { get; set; }
	}
	
	/// <summary>
	/// Represents work items in an iteration backlog
	/// </summary>
	public class IterationWorkItems
	{
		
		/// <summary>
		/// Work item relations
		/// </summary>
		public WorkItemLink[] WorkItemRelations { get; set; }
	}
	
	/// <summary>
	/// Link description.
	/// </summary>
	public class Link
	{
		
		/// <summary>
		/// Collection of link attributes.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Attributes { get; set; }
		
		/// <summary>
		/// Relation type.
		/// </summary>
		public string Rel { get; set; }
		
		/// <summary>
		/// Link url.
		/// </summary>
		public string Url { get; set; }
	}
	
	public class Member
	{
		
		public string DisplayName { get; set; }
		
		public string Id { get; set; }
		
		public string ImageUrl { get; set; }
		
		public string UniqueName { get; set; }
		
		public string Url { get; set; }
	}
	
	public class ParentChildWIMap
	{
		
		public int[] ChildWorkItemIds { get; set; }
		
		public System.Nullable<System.Int32> Id { get; set; }
		
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Data contract for the plan definition
	/// </summary>
	public class Plan
	{
		
		public IdentityRef CreatedByIdentity { get; set; }
		
		/// <summary>
		/// Date when the plan was created
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Description of the plan
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Id of the plan
		/// </summary>
		public string Id { get; set; }
		
		public IdentityRef ModifiedByIdentity { get; set; }
		
		/// <summary>
		/// Date when the plan was last modified. Default to CreatedDate when the plan is first created.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ModifiedDate { get; set; }
		
		/// <summary>
		/// Name of the plan
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The PlanPropertyCollection instance associated with the plan. These are dependent on the type of the plan. For example, DeliveryTimelineView, it would be of type DeliveryViewPropertyCollection.
		/// </summary>
		public string Properties { get; set; }
		
		/// <summary>
		/// Revision of the plan. Used to safeguard users from overwriting each other's changes.
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// Type of the plan
		/// </summary>
		public System.Nullable<PlanType> Type { get; set; }
		
		/// <summary>
		/// The resource url to locate the plan via rest api
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// Bit flag indicating set of permissions a user has to the plan.
		/// </summary>
		public System.Nullable<PlanUserPermissions> UserPermissions { get; set; }
	}
	
	public enum PlanType
	{
		
		deliveryTimelineView = 0,
	}
	
	public enum PlanUserPermissions
	{
		
		none = 0,
		
		view = 1,
		
		edit = 2,
		
		delete = 3,
		
		manage = 4,
		
		allPermissions = 5,
	}
	
	/// <summary>
	/// Metadata about a plan definition that is stored in favorites service
	/// </summary>
	public class PlanMetadata
	{
		
		public IdentityRef CreatedByIdentity { get; set; }
		
		/// <summary>
		/// Description of plan
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Last modified date of the plan
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ModifiedDate { get; set; }
		
		/// <summary>
		/// Bit flag indicating set of permissions a user has to the plan.
		/// </summary>
		public System.Nullable<PlanMetadataUserPermissions> UserPermissions { get; set; }
	}
	
	public enum PlanMetadataUserPermissions
	{
		
		none = 0,
		
		view = 1,
		
		edit = 2,
		
		delete = 3,
		
		manage = 4,
		
		allPermissions = 5,
	}
	
	/// <summary>
	/// Base class for plan view data contracts. Anything common goes here.
	/// </summary>
	public class PlanViewData
	{
		
		public string Id { get; set; }
		
		public System.Nullable<System.Int32> Revision { get; set; }
	}
	
	/// <summary>
	/// Represents a single pre-defined query.
	/// </summary>
	public class PredefinedQuery
	{
		
		/// <summary>
		/// Whether or not the query returned the complete set of data or if the data was truncated.
		/// </summary>
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		/// <summary>
		/// Id of the query
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Localized name of the query
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The results of the query.  This will be a set of WorkItem objects with only the 'id' set.  The client is responsible for paging in the data as needed.
		/// </summary>
		public WorkItem[] Results { get; set; }
		
		/// <summary>
		/// REST API Url to use to retrieve results for this query
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// Url to use to display a page in the browser with the results of this query
		/// </summary>
		public string WebUrl { get; set; }
	}
	
	/// <summary>
	/// Describes a work item.
	/// </summary>
	public class WorkItem
	{
		
		/// <summary>
		/// Represents the reference to a specific version of a comment on a Work Item.
		/// </summary>
		public WorkItemCommentVersionRef CommentVersionRef { get; set; }
		
		/// <summary>
		/// Map of field and values for the work item.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Fields { get; set; }
		
		/// <summary>
		/// The work item ID.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Relations of the work item.
		/// </summary>
		public WorkItemRelation[] Relations { get; set; }
		
		/// <summary>
		/// Revision number of the work item.
		/// </summary>
		public System.Nullable<System.Int32> Rev { get; set; }
	}
	
	/// <summary>
	/// Represents the reference to a specific version of a comment on a Work Item.
	/// </summary>
	public class WorkItemCommentVersionRef
	{
		
		/// <summary>
		/// The id assigned to the comment.
		/// </summary>
		public System.Nullable<System.Int32> CommentId { get; set; }
		
		/// <summary>
		/// [Internal] The work item revision where this comment was originally added.
		/// </summary>
		public System.Nullable<System.Int32> CreatedInRevision { get; set; }
		
		/// <summary>
		/// [Internal] Specifies whether comment was deleted.
		/// </summary>
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		/// <summary>
		/// [Internal] The text of the comment.
		/// </summary>
		public string Text { get; set; }
		
		/// <summary>
		/// The version number.
		/// </summary>
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	public class WorkItemRelation
	{
	}
	
	/// <summary>
	/// Process Configurations for the project
	/// </summary>
	public class ProcessConfiguration
	{
		
		/// <summary>
		/// Details about a given backlog category
		/// </summary>
		public CategoryConfiguration BugWorkItems { get; set; }
		
		/// <summary>
		/// Details about portfolio backlogs
		/// </summary>
		public CategoryConfiguration[] PortfolioBacklogs { get; set; }
		
		/// <summary>
		/// Details about a given backlog category
		/// </summary>
		public CategoryConfiguration RequirementBacklog { get; set; }
		
		/// <summary>
		/// Details about a given backlog category
		/// </summary>
		public CategoryConfiguration TaskBacklog { get; set; }
		
		/// <summary>
		/// Type fields for the process configuration
		/// </summary>
		public System.Collections.Generic.Dictionary<string, WorkItemFieldReference> TypeFields { get; set; }
		
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Represents a reorder request for one or more work items.
	/// </summary>
	public class ReorderOperation
	{
		
		/// <summary>
		/// IDs of the work items to be reordered.  Must be valid WorkItem Ids.
		/// </summary>
		public int[] Ids { get; set; }
		
		/// <summary>
		/// IterationPath for reorder operation. This is only used when we reorder from the Iteration Backlog
		/// </summary>
		public string IterationPath { get; set; }
		
		/// <summary>
		/// ID of the work item that should be after the reordered items. Can use 0 to specify the end of the list.
		/// </summary>
		public System.Nullable<System.Int32> NextId { get; set; }
		
		/// <summary>
		/// Parent ID for all of the work items involved in this operation. Can use 0 to indicate the items don't have a parent.
		/// </summary>
		public System.Nullable<System.Int32> ParentId { get; set; }
		
		/// <summary>
		/// ID of the work item that should be before the reordered items. Can use 0 to specify the beginning of the list.
		/// </summary>
		public System.Nullable<System.Int32> PreviousId { get; set; }
	}
	
	/// <summary>
	/// Represents a reorder result for a work item.
	/// </summary>
	public class ReorderResult
	{
		
		/// <summary>
		/// The ID of the work item that was reordered.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The updated order value of the work item that was reordered.
		/// </summary>
		public System.Nullable<System.Double> Order { get; set; }
	}
	
	/// <summary>
	/// Represents the taskbord column
	/// </summary>
	public class TaskboardColumn
	{
		
		/// <summary>
		/// Column ID
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Work item type states mapped to this column to support auto state update when column is updated.
		/// </summary>
		public ITaskboardColumnMapping[] Mappings { get; set; }
		
		/// <summary>
		/// Column name
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Column position relative to other columns in the same board
		/// </summary>
		public System.Nullable<System.Int32> Order { get; set; }
	}
	
	/// <summary>
	/// Represents the state to column mapping per work item type This allows auto state update when the column changes
	/// </summary>
	public class TaskboardColumnMapping
	{
		
		/// <summary>
		/// State of the work item type mapped to the column
		/// </summary>
		public string State { get; set; }
		
		/// <summary>
		/// Work Item Type name who's state is mapped to the column
		/// </summary>
		public string WorkItemType { get; set; }
	}
	
	public class TaskboardColumns
	{
		
		public TaskboardColumn[] Columns { get; set; }
		
		/// <summary>
		/// Are the columns cutomized for this team
		/// </summary>
		public System.Nullable<System.Boolean> IsCustomized { get; set; }
		
		/// <summary>
		/// Specifies if the referenced WIT and State is valid
		/// </summary>
		public System.Nullable<System.Boolean> IsValid { get; set; }
		
		/// <summary>
		/// Details of validation failure if the state to column mapping is invalid
		/// </summary>
		public string ValidationMesssage { get; set; }
	}
	
	/// <summary>
	/// Column value of a work item in the taskboard
	/// </summary>
	public class TaskboardWorkItemColumn
	{
		
		/// <summary>
		/// Work item column value in the taskboard
		/// </summary>
		public string Column { get; set; }
		
		/// <summary>
		/// Work item column id in the taskboard
		/// </summary>
		public string ColumnId { get; set; }
		
		/// <summary>
		/// Work Item state value
		/// </summary>
		public string State { get; set; }
		
		/// <summary>
		/// Work item id
		/// </summary>
		public System.Nullable<System.Int32> WorkItemId { get; set; }
	}
	
	/// <summary>
	/// The Team Context for an operation.
	/// </summary>
	public class TeamContext
	{
		
		/// <summary>
		/// The team project Id or name.  Ignored if ProjectId is set.
		/// </summary>
		public string Project { get; set; }
		
		/// <summary>
		/// The Team Project ID.  Required if Project is not set.
		/// </summary>
		public string ProjectId { get; set; }
		
		/// <summary>
		/// The Team Id or name.  Ignored if TeamId is set.
		/// </summary>
		public string Team { get; set; }
		
		/// <summary>
		/// The Team Id
		/// </summary>
		public string TeamId { get; set; }
	}
	
	/// <summary>
	/// Essentially a collection of team field values
	/// </summary>
	public class TeamFieldValues
	{
		
		/// <summary>
		/// The default team field value
		/// </summary>
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// An abstracted reference to a field
		/// </summary>
		public FieldReference Field { get; set; }
		
		/// <summary>
		/// Collection of all valid team field values
		/// </summary>
		public TeamFieldValue[] Values { get; set; }
	}
	
	/// <summary>
	/// Expected data from PATCH
	/// </summary>
	public class TeamFieldValuesPatch
	{
		
		public string DefaultValue { get; set; }
		
		public TeamFieldValue[] Values { get; set; }
	}
	
	public class TeamIterationAttributes
	{
		
		/// <summary>
		/// Finish date of the iteration. Date-only, correct unadjusted at midnight in UTC.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> FinishDate { get; set; }
		
		/// <summary>
		/// Start date of the iteration. Date-only, correct unadjusted at midnight in UTC.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// Time frame of the iteration, such as past, current or future.
		/// </summary>
		public System.Nullable<TeamIterationAttributesTimeFrame> TimeFrame { get; set; }
	}
	
	public enum TeamIterationAttributesTimeFrame
	{
		
		past = 0,
		
		current = 1,
		
		future = 2,
	}
	
	/// <summary>
	/// Represents capacity for a specific team member
	/// </summary>
	public class TeamMemberCapacity
	{
		
		public Member TeamMember { get; set; }
	}
	
	/// <summary>
	/// Represents capacity for a specific team member
	/// </summary>
	public class TeamMemberCapacityIdentityRef
	{
		
		public IdentityRef TeamMember { get; set; }
	}
	
	/// <summary>
	/// Data contract for TeamSettings
	/// </summary>
	public class TeamSetting
	{
		
		/// <summary>
		/// Represents a shallow ref for a single iteration.
		/// </summary>
		public TeamSettingsIteration BacklogIteration { get; set; }
		
		/// <summary>
		/// Information about categories that are visible on the backlog.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, bool> BacklogVisibilities { get; set; }
		
		/// <summary>
		/// BugsBehavior (Off, AsTasks, AsRequirements, ...)
		/// </summary>
		public System.Nullable<TeamSettingBugsBehavior> BugsBehavior { get; set; }
		
		/// <summary>
		/// Represents a shallow ref for a single iteration.
		/// </summary>
		public TeamSettingsIteration DefaultIteration { get; set; }
		
		/// <summary>
		/// Default Iteration macro (if any)
		/// </summary>
		public string DefaultIterationMacro { get; set; }
		
		/// <summary>
		/// Days that the team is working
		/// </summary>
		public string[] WorkingDays { get; set; }
	}
	
	/// <summary>
	/// Represents a shallow ref for a single iteration.
	/// </summary>
	public class TeamSettingsIteration
	{
		
		public TeamIterationAttributes Attributes { get; set; }
		
		/// <summary>
		/// Id of the iteration.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the iteration.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Relative path of the iteration.
		/// </summary>
		public string Path { get; set; }
	}
	
	public enum TeamSettingBugsBehavior
	{
		
		off = 0,
		
		asRequirements = 1,
		
		asTasks = 2,
	}
	
	/// <summary>
	/// Base class for TeamSettings data contracts. Anything common goes here.
	/// </summary>
	public class TeamSettingsDataContractBase
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// Full http link to the resource
		/// </summary>
		public string Url { get; set; }
	}
	
	public class TeamSettingsDaysOff
	{
		
		public DateRange[] DaysOff { get; set; }
	}
	
	public class TeamSettingsDaysOffPatch
	{
		
		public DateRange[] DaysOff { get; set; }
	}
	
	/// <summary>
	/// Data contract for what we expect to receive when PATCH
	/// </summary>
	public class TeamSettingsPatch
	{
		
		public string BacklogIteration { get; set; }
		
		public System.Collections.Generic.Dictionary<string, bool> BacklogVisibilities { get; set; }
		
		public System.Nullable<TeamSettingsPatchBugsBehavior> BugsBehavior { get; set; }
		
		public string DefaultIteration { get; set; }
		
		public string DefaultIterationMacro { get; set; }
		
		public string[] WorkingDays { get; set; }
	}
	
	public enum TeamSettingsPatchBugsBehavior
	{
		
		off = 0,
		
		asRequirements = 1,
		
		asTasks = 2,
	}
	
	public class UpdatePlan
	{
		
		/// <summary>
		/// Description of the plan
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Name of the plan to create.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Plan properties.
		/// </summary>
		public string Properties { get; set; }
		
		/// <summary>
		/// Revision of the plan that was updated - the value used here should match the one the server gave the client in the Plan.
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// Type of the plan
		/// </summary>
		public System.Nullable<UpdatePlanType> Type { get; set; }
	}
	
	public enum UpdatePlanType
	{
		
		deliveryTimelineView = 0,
	}
	
	public class UpdateTaskboardColumn
	{
		
		/// <summary>
		/// Column ID, keep it null for new column
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Work item type states mapped to this column to support auto state update when column is updated.
		/// </summary>
		public TaskboardColumnMapping[] Mappings { get; set; }
		
		/// <summary>
		/// Column name is required
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Column position relative to other columns in the same board
		/// </summary>
		public System.Nullable<System.Int32> Order { get; set; }
	}
	
	public class UpdateTaskboardWorkItemColumn
	{
		
		public string NewColumn { get; set; }
	}
	
	/// <summary>
	/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
	/// </summary>
	public class VssJsonCollectionWrapper
	{
		
		public string Value { get; set; }
	}
	
	public class VssJsonCollectionWrapperBase
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	/// <summary>
	/// Base class for WIT REST resources.
	/// </summary>
	public class WorkItemTrackingResource
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
	}
	
	/// <summary>
	/// Base class for work item tracking resource references.
	/// </summary>
	public class WorkItemTrackingResourceReference
	{
		
		public string Url { get; set; }
	}
	
	public partial class MyClient
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public MyClient(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get available board columns in a project
		/// Boardcolumns_List {organization}/{project}/_apis/work/boardcolumns
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<BoardSuggestedValue[]> Boardcolumns_ListAsync(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/work/boardcolumns&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardSuggestedValue[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get available board columns in a project
		/// Boardcolumns_List {organization}/{project}/_apis/work/boardcolumns
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public BoardSuggestedValue[] Boardcolumns_List(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/work/boardcolumns&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardSuggestedValue[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get available board rows in a project
		/// Boardrows_List {organization}/{project}/_apis/work/boardrows
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<BoardSuggestedValue[]> Boardrows_ListAsync(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/work/boardrows&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardSuggestedValue[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get available board rows in a project
		/// Boardrows_List {organization}/{project}/_apis/work/boardrows
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public BoardSuggestedValue[] Boardrows_List(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/work/boardrows&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardSuggestedValue[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the information for all the plans configured for the given team
		/// Plans_List {organization}/{project}/_apis/work/plans
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Plan[]> Plans_ListAsync(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/work/plans&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Plan[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the information for all the plans configured for the given team
		/// Plans_List {organization}/{project}/_apis/work/plans
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Plan[] Plans_List(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/work/plans&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Plan[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new plan for the team
		/// Plans_Create {organization}/{project}/_apis/work/plans
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Plan definition</param>
		/// <returns>successful operation</returns>
		public async Task<Plan> Plans_CreateAsync(string organization, string project, string api_version, CreatePlan requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/work/plans&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Plan>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a new plan for the team
		/// Plans_Create {organization}/{project}/_apis/work/plans
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Plan definition</param>
		/// <returns>successful operation</returns>
		public Plan Plans_Create(string organization, string project, string api_version, CreatePlan requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/work/plans&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Plan>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the information for the specified plan
		/// Plans_Get {organization}/{project}/_apis/work/plans/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="id">Identifier of the plan</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Plan> Plans_GetAsync(string organization, string project, string id, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/work/plans/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Plan>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the information for the specified plan
		/// Plans_Get {organization}/{project}/_apis/work/plans/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="id">Identifier of the plan</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Plan Plans_Get(string organization, string project, string id, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/work/plans/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Plan>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the information for the specified plan
		/// Plans_Update {organization}/{project}/_apis/work/plans/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="id">Identifier of the plan</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Plan definition to be updated</param>
		/// <returns>successful operation</returns>
		public async Task<Plan> Plans_UpdateAsync(string organization, string project, string id, string api_version, UpdatePlan requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/work/plans/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Plan>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update the information for the specified plan
		/// Plans_Update {organization}/{project}/_apis/work/plans/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="id">Identifier of the plan</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Plan definition to be updated</param>
		/// <returns>successful operation</returns>
		public Plan Plans_Update(string organization, string project, string id, string api_version, UpdatePlan requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/work/plans/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Plan>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete the specified plan
		/// Plans_Delete {organization}/{project}/_apis/work/plans/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="id">Identifier of the plan</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Plans_DeleteAsync(string organization, string project, string id, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/work/plans/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the specified plan
		/// Plans_Delete {organization}/{project}/_apis/work/plans/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="id">Identifier of the plan</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Plans_Delete(string organization, string project, string id, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/work/plans/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Delivery View Data
		/// Deliverytimeline_Get {organization}/{project}/_apis/work/plans/{id}/deliverytimeline
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="id">Identifier for delivery view</param>
		/// <param name="revision">Revision of the plan for which you want data. If the current plan is a different revision you will get an ViewRevisionMismatchException exception. If you do not supply a revision you will get data for the latest revision.</param>
		/// <param name="startDate">The start date of timeline</param>
		/// <param name="endDate">The end date of timeline</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<DeliveryViewData> Deliverytimeline_GetAsync(string organization, string project, string id, int revision, System.DateTimeOffset startDate, System.DateTimeOffset endDate, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/work/plans/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/deliverytimeline&revision="+revision+"&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeliveryViewData>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Delivery View Data
		/// Deliverytimeline_Get {organization}/{project}/_apis/work/plans/{id}/deliverytimeline
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="id">Identifier for delivery view</param>
		/// <param name="revision">Revision of the plan for which you want data. If the current plan is a different revision you will get an ViewRevisionMismatchException exception. If you do not supply a revision you will get data for the latest revision.</param>
		/// <param name="startDate">The start date of timeline</param>
		/// <param name="endDate">The end date of timeline</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public DeliveryViewData Deliverytimeline_Get(string organization, string project, string id, int revision, System.DateTimeOffset startDate, System.DateTimeOffset endDate, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/work/plans/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/deliverytimeline&revision="+revision+"&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeliveryViewData>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get process configuration
		/// Processconfiguration_Get {organization}/{project}/_apis/work/processconfiguration
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessConfiguration> Processconfiguration_GetAsync(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/work/processconfiguration&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProcessConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get process configuration
		/// Processconfiguration_Get {organization}/{project}/_apis/work/processconfiguration
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessConfiguration Processconfiguration_Get(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/work/processconfiguration&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProcessConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets backlog configuration for a team
		/// Backlogconfiguration_Get {organization}/{project}/{team}/_apis/work/backlogconfiguration
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<BacklogConfiguration> Backlogconfiguration_GetAsync(string organization, string project, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/backlogconfiguration&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BacklogConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets backlog configuration for a team
		/// Backlogconfiguration_Get {organization}/{project}/{team}/_apis/work/backlogconfiguration
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public BacklogConfiguration Backlogconfiguration_Get(string organization, string project, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/backlogconfiguration&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BacklogConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all backlog levels
		/// Backlogs_List {organization}/{project}/{team}/_apis/work/backlogs
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<BacklogLevelConfiguration[]> Backlogs_ListAsync(string organization, string project, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/backlogs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BacklogLevelConfiguration[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all backlog levels
		/// Backlogs_List {organization}/{project}/{team}/_apis/work/backlogs
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public BacklogLevelConfiguration[] Backlogs_List(string organization, string project, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/backlogs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BacklogLevelConfiguration[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of work items within a backlog level
		/// Backlogs_Get_Backlog_Level_Work_Items {organization}/{project}/{team}/_apis/work/backlogs/{backlogId}/workItems
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<BacklogLevelWorkItems> Backlogs_Get_Backlog_Level_Work_ItemsAsync(string organization, string project, string team, string backlogId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/backlogs/"+ (backlogId==null? "" : System.Uri.EscapeDataString(backlogId))+"/workItems&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BacklogLevelWorkItems>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of work items within a backlog level
		/// Backlogs_Get_Backlog_Level_Work_Items {organization}/{project}/{team}/_apis/work/backlogs/{backlogId}/workItems
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public BacklogLevelWorkItems Backlogs_Get_Backlog_Level_Work_Items(string organization, string project, string team, string backlogId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/backlogs/"+ (backlogId==null? "" : System.Uri.EscapeDataString(backlogId))+"/workItems&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BacklogLevelWorkItems>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a backlog level
		/// Backlogs_Get_Backlog {organization}/{project}/{team}/_apis/work/backlogs/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="id">The id of the backlog level</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<BacklogLevelConfiguration> Backlogs_Get_BacklogAsync(string organization, string project, string team, string id, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/backlogs/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BacklogLevelConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a backlog level
		/// Backlogs_Get_Backlog {organization}/{project}/{team}/_apis/work/backlogs/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="id">The id of the backlog level</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public BacklogLevelConfiguration Backlogs_Get_Backlog(string organization, string project, string team, string id, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/backlogs/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BacklogLevelConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get boards
		/// Boards_List {organization}/{project}/{team}/_apis/work/boards
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<BoardReference[]> Boards_ListAsync(string organization, string project, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardReference[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get boards
		/// Boards_List {organization}/{project}/{team}/_apis/work/boards
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public BoardReference[] Boards_List(string organization, string project, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardReference[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get board user settings for a board id
		/// Boardusersettings_Get {organization}/{project}/{team}/_apis/work/boards/{board}/boardusersettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="board">Board ID or Name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<BoardUserSettings> Boardusersettings_GetAsync(string organization, string project, string board, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/boardusersettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardUserSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get board user settings for a board id
		/// Boardusersettings_Get {organization}/{project}/{team}/_apis/work/boards/{board}/boardusersettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="board">Board ID or Name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public BoardUserSettings Boardusersettings_Get(string organization, string project, string board, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/boardusersettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardUserSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update board user settings for the board id
		/// 
		/// We don't want stakeholders to update board settings (currently just autorefresh). The BacklogManagement feature check validates this.
		/// Boardusersettings_Update {organization}/{project}/{team}/_apis/work/boards/{board}/boardusersettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<BoardUserSettings> Boardusersettings_UpdateAsync(string organization, string project, string board, string team, string api_version, System.Collections.Generic.Dictionary<string, string> requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/boardusersettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardUserSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update board user settings for the board id
		/// 
		/// We don't want stakeholders to update board settings (currently just autorefresh). The BacklogManagement feature check validates this.
		/// Boardusersettings_Update {organization}/{project}/{team}/_apis/work/boards/{board}/boardusersettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public BoardUserSettings Boardusersettings_Update(string organization, string project, string board, string team, string api_version, System.Collections.Generic.Dictionary<string, string> requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/boardusersettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardUserSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get board card Rule settings for the board id or board by name
		/// Cardrulesettings_Get {organization}/{project}/{team}/_apis/work/boards/{board}/cardrulesettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<BoardCardRuleSettings> Cardrulesettings_GetAsync(string organization, string project, string board, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/cardrulesettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardCardRuleSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get board card Rule settings for the board id or board by name
		/// Cardrulesettings_Get {organization}/{project}/{team}/_apis/work/boards/{board}/cardrulesettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public BoardCardRuleSettings Cardrulesettings_Get(string organization, string project, string board, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/cardrulesettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardCardRuleSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update board card Rule settings for the board id or board by name
		/// Cardrulesettings_Update_Board_Card_Rule_Settings {organization}/{project}/{team}/_apis/work/boards/{board}/cardrulesettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<BoardCardRuleSettings> Cardrulesettings_Update_Board_Card_Rule_SettingsAsync(string organization, string project, string board, string team, string api_version, BoardCardRuleSettings requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/cardrulesettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardCardRuleSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update board card Rule settings for the board id or board by name
		/// Cardrulesettings_Update_Board_Card_Rule_Settings {organization}/{project}/{team}/_apis/work/boards/{board}/cardrulesettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public BoardCardRuleSettings Cardrulesettings_Update_Board_Card_Rule_Settings(string organization, string project, string board, string team, string api_version, BoardCardRuleSettings requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/cardrulesettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardCardRuleSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get board card settings for the board id or board by name
		/// Cardsettings_Get {organization}/{project}/{team}/_apis/work/boards/{board}/cardsettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<BoardCardSettings> Cardsettings_GetAsync(string organization, string project, string board, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/cardsettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardCardSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get board card settings for the board id or board by name
		/// Cardsettings_Get {organization}/{project}/{team}/_apis/work/boards/{board}/cardsettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public BoardCardSettings Cardsettings_Get(string organization, string project, string board, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/cardsettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardCardSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update board card settings for the board id or board by name
		/// Cardsettings_Update_Board_Card_Settings {organization}/{project}/{team}/_apis/work/boards/{board}/cardsettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<BoardCardSettings> Cardsettings_Update_Board_Card_SettingsAsync(string organization, string project, string board, string team, string api_version, BoardCardSettings requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/cardsettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardCardSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update board card settings for the board id or board by name
		/// Cardsettings_Update_Board_Card_Settings {organization}/{project}/{team}/_apis/work/boards/{board}/cardsettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public BoardCardSettings Cardsettings_Update_Board_Card_Settings(string organization, string project, string board, string team, string api_version, BoardCardSettings requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/cardsettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardCardSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a board chart image.
		/// Chartimages_Get_Board_Chart_Image {organization}/{project}/{team}/_apis/work/boards/{board}/chartimages/{name}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="board">Identifier for board, either board's backlog level name (e.g. "Issues") or Id.</param>
		/// <param name="name">The chart name. e.g. CumulativeFlow.</param>
		/// <param name="width">The width of the chart in pixels. Must be greater than 0.</param>
		/// <param name="height">The height of the chart in pixels. Must be greater than 0.</param>
		/// <param name="showDetails">Whether or not the chart should include detailed information (e.g. axis labels, titles, trend lines, etc.).</param>
		/// <param name="title">The title of the chart. Can only be dislayed if ShowLabels is true.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<string> Chartimages_Get_Board_Chart_ImageAsync(string organization, string project, string team, string board, string name, int width, int height, bool showDetails, string title, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/chartimages/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&width="+width+"&height="+height+"&showDetails="+showDetails+"&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a board chart image.
		/// Chartimages_Get_Board_Chart_Image {organization}/{project}/{team}/_apis/work/boards/{board}/chartimages/{name}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="board">Identifier for board, either board's backlog level name (e.g. "Issues") or Id.</param>
		/// <param name="name">The chart name. e.g. CumulativeFlow.</param>
		/// <param name="width">The width of the chart in pixels. Must be greater than 0.</param>
		/// <param name="height">The height of the chart in pixels. Must be greater than 0.</param>
		/// <param name="showDetails">Whether or not the chart should include detailed information (e.g. axis labels, titles, trend lines, etc.).</param>
		/// <param name="title">The title of the chart. Can only be dislayed if ShowLabels is true.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public string Chartimages_Get_Board_Chart_Image(string organization, string project, string team, string board, string name, int width, int height, bool showDetails, string title, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/chartimages/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&width="+width+"&height="+height+"&showDetails="+showDetails+"&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get board charts
		/// Charts_List {organization}/{project}/{team}/_apis/work/boards/{board}/charts
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="board">Identifier for board, either board's backlog level name (Eg:"Stories") or Id</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<BoardChartReference[]> Charts_ListAsync(string organization, string project, string board, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/charts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardChartReference[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get board charts
		/// Charts_List {organization}/{project}/{team}/_apis/work/boards/{board}/charts
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="board">Identifier for board, either board's backlog level name (Eg:"Stories") or Id</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public BoardChartReference[] Charts_List(string organization, string project, string board, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/charts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardChartReference[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a board chart
		/// Charts_Get {organization}/{project}/{team}/_apis/work/boards/{board}/charts/{name}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="board">Identifier for board, either board's backlog level name (Eg:"Stories") or Id</param>
		/// <param name="name">The chart name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<BoardChart> Charts_GetAsync(string organization, string project, string board, string name, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/charts/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardChart>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a board chart
		/// Charts_Get {organization}/{project}/{team}/_apis/work/boards/{board}/charts/{name}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="board">Identifier for board, either board's backlog level name (Eg:"Stories") or Id</param>
		/// <param name="name">The chart name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public BoardChart Charts_Get(string organization, string project, string board, string name, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/charts/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardChart>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a board chart
		/// Charts_Update {organization}/{project}/{team}/_apis/work/boards/{board}/charts/{name}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="board">Identifier for board, either board's backlog level name (Eg:"Stories") or Id</param>
		/// <param name="name">The chart name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<BoardChart> Charts_UpdateAsync(string organization, string project, string board, string name, string team, string api_version, BoardChart requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/charts/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardChart>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a board chart
		/// Charts_Update {organization}/{project}/{team}/_apis/work/boards/{board}/charts/{name}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="board">Identifier for board, either board's backlog level name (Eg:"Stories") or Id</param>
		/// <param name="name">The chart name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public BoardChart Charts_Update(string organization, string project, string board, string name, string team, string api_version, BoardChart requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/charts/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardChart>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get columns on a board
		/// Columns_List {organization}/{project}/{team}/_apis/work/boards/{board}/columns
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="board">Name or ID of the specific board</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<BoardColumn[]> Columns_ListAsync(string organization, string project, string board, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/columns&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardColumn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get columns on a board
		/// Columns_List {organization}/{project}/{team}/_apis/work/boards/{board}/columns
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="board">Name or ID of the specific board</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public BoardColumn[] Columns_List(string organization, string project, string board, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/columns&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardColumn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update columns on a board
		/// Columns_Update {organization}/{project}/{team}/_apis/work/boards/{board}/columns
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="board">Name or ID of the specific board</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">List of board columns to update</param>
		/// <returns>successful operation</returns>
		public async Task<BoardColumn[]> Columns_UpdateAsync(string organization, string project, string board, string team, string api_version, BoardColumn[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/columns&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardColumn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update columns on a board
		/// Columns_Update {organization}/{project}/{team}/_apis/work/boards/{board}/columns
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="board">Name or ID of the specific board</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">List of board columns to update</param>
		/// <returns>successful operation</returns>
		public BoardColumn[] Columns_Update(string organization, string project, string board, string team, string api_version, BoardColumn[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/columns&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardColumn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get rows on a board
		/// Rows_List {organization}/{project}/{team}/_apis/work/boards/{board}/rows
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="board">Name or ID of the specific board</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<BoardRow[]> Rows_ListAsync(string organization, string project, string board, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/rows&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardRow[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get rows on a board
		/// Rows_List {organization}/{project}/{team}/_apis/work/boards/{board}/rows
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="board">Name or ID of the specific board</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public BoardRow[] Rows_List(string organization, string project, string board, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/rows&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardRow[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update rows on a board
		/// Rows_Update {organization}/{project}/{team}/_apis/work/boards/{board}/rows
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="board">Name or ID of the specific board</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">List of board rows to update</param>
		/// <returns>successful operation</returns>
		public async Task<BoardRow[]> Rows_UpdateAsync(string organization, string project, string board, string team, string api_version, BoardRow[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/rows&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardRow[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update rows on a board
		/// Rows_Update {organization}/{project}/{team}/_apis/work/boards/{board}/rows
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="board">Name or ID of the specific board</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">List of board rows to update</param>
		/// <returns>successful operation</returns>
		public BoardRow[] Rows_Update(string organization, string project, string board, string team, string api_version, BoardRow[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (board==null? "" : System.Uri.EscapeDataString(board))+"/rows&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardRow[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get board
		/// Boards_Get {organization}/{project}/{team}/_apis/work/boards/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="id">identifier for board, either board's backlog level name (Eg:"Stories") or Id</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Board> Boards_GetAsync(string organization, string project, string id, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Board>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get board
		/// Boards_Get {organization}/{project}/{team}/_apis/work/boards/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="id">identifier for board, either board's backlog level name (Eg:"Stories") or Id</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Board Boards_Get(string organization, string project, string id, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Board>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update board options
		/// Boards_Set_Board_Options {organization}/{project}/{team}/_apis/work/boards/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="id">identifier for board, either category plural name (Eg:"Stories") or guid</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">options to updated</param>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, string>> Boards_Set_Board_OptionsAsync(string organization, string project, string id, string team, string api_version, System.Collections.Generic.Dictionary<string, string> requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update board options
		/// Boards_Set_Board_Options {organization}/{project}/{team}/_apis/work/boards/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="id">identifier for board, either category plural name (Eg:"Stories") or guid</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">options to updated</param>
		/// <returns>successful operation</returns>
		public System.Collections.Generic.Dictionary<string, string> Boards_Set_Board_Options(string organization, string project, string id, string team, string api_version, System.Collections.Generic.Dictionary<string, string> requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the list of parent field filter model for the given list of workitem ids
		/// Boardparents_List {organization}/{project}/{team}/_apis/work/boards/boardparents
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ParentChildWIMap[]> Boardparents_ListAsync(string organization, string project, string childBacklogContextCategoryRefName, string workitemIds, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/boardparents&childBacklogContextCategoryRefName=" + (childBacklogContextCategoryRefName==null? "" : System.Uri.EscapeDataString(childBacklogContextCategoryRefName))+"&workitemIds=" + (workitemIds==null? "" : System.Uri.EscapeDataString(workitemIds))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ParentChildWIMap[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the list of parent field filter model for the given list of workitem ids
		/// Boardparents_List {organization}/{project}/{team}/_apis/work/boards/boardparents
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ParentChildWIMap[] Boardparents_List(string organization, string project, string childBacklogContextCategoryRefName, string workitemIds, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/boards/boardparents&childBacklogContextCategoryRefName=" + (childBacklogContextCategoryRefName==null? "" : System.Uri.EscapeDataString(childBacklogContextCategoryRefName))+"&workitemIds=" + (workitemIds==null? "" : System.Uri.EscapeDataString(workitemIds))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ParentChildWIMap[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an iteration chart image.
		/// Chartimages_Get_Iteration_Chart_Image {organization}/{project}/{team}/_apis/work/iterations/{iterationId}/chartimages/{name}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="iterationId">ID of the iteration.</param>
		/// <param name="name">The chart name. e.g. Burndown.</param>
		/// <param name="width">The width of the chart in pixels. Must be greater than 0.</param>
		/// <param name="height">The height of the chart in pixels. Must be greater than 0.</param>
		/// <param name="showDetails">Whether or not the chart should include detailed information (e.g. axis labels, titles, trend lines, etc.)</param>
		/// <param name="title">The title of the chart. Can only be dislayed if ShowLabels is true.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<string> Chartimages_Get_Iteration_Chart_ImageAsync(string organization, string project, string team, string iterationId, string name, int width, int height, bool showDetails, string title, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/iterations/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"/chartimages/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&width="+width+"&height="+height+"&showDetails="+showDetails+"&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an iteration chart image.
		/// Chartimages_Get_Iteration_Chart_Image {organization}/{project}/{team}/_apis/work/iterations/{iterationId}/chartimages/{name}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="iterationId">ID of the iteration.</param>
		/// <param name="name">The chart name. e.g. Burndown.</param>
		/// <param name="width">The width of the chart in pixels. Must be greater than 0.</param>
		/// <param name="height">The height of the chart in pixels. Must be greater than 0.</param>
		/// <param name="showDetails">Whether or not the chart should include detailed information (e.g. axis labels, titles, trend lines, etc.)</param>
		/// <param name="title">The title of the chart. Can only be dislayed if ShowLabels is true.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public string Chartimages_Get_Iteration_Chart_Image(string organization, string project, string team, string iterationId, string name, int width, int height, bool showDetails, string title, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/iterations/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"/chartimages/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&width="+width+"&height="+height+"&showDetails="+showDetails+"&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reorder Sprint Backlog/Taskboard Work Items
		/// Workitemsorder_Reorder_Iteration_Work_Items {organization}/{project}/{team}/_apis/work/iterations/{iterationId}/workitemsorder
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="iterationId">The id of the iteration</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ReorderResult[]> Workitemsorder_Reorder_Iteration_Work_ItemsAsync(string organization, string project, string team, string iterationId, string api_version, ReorderOperation requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/iterations/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"/workitemsorder&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReorderResult[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reorder Sprint Backlog/Taskboard Work Items
		/// Workitemsorder_Reorder_Iteration_Work_Items {organization}/{project}/{team}/_apis/work/iterations/{iterationId}/workitemsorder
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="iterationId">The id of the iteration</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ReorderResult[] Workitemsorder_Reorder_Iteration_Work_Items(string organization, string project, string team, string iterationId, string api_version, ReorderOperation requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/iterations/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"/workitemsorder&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReorderResult[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get an iterations chart image.
		/// Chartimages_Get_Iterations_Chart_Image {organization}/{project}/{team}/_apis/work/iterations/chartimages/{name}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="name">The chart name. e.g. Velocity.</param>
		/// <param name="iterationsNumber">Number of iterations the chart is for.</param>
		/// <param name="width">The width of the chart in pixels. Must be greater than 0.</param>
		/// <param name="height">The height of the chart in pixels. Must be greater than 0.</param>
		/// <param name="showDetails">Whether or not the chart should include detailed information (e.g. axis labels, titles, trend lines, etc.)</param>
		/// <param name="title">The title of the chart. Can only be dislayed if ShowLabels is true.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<string> Chartimages_Get_Iterations_Chart_ImageAsync(string organization, string project, string team, string name, int iterationsNumber, int width, int height, bool showDetails, string title, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/iterations/chartimages/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&iterationsNumber="+iterationsNumber+"&width="+width+"&height="+height+"&showDetails="+showDetails+"&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an iterations chart image.
		/// Chartimages_Get_Iterations_Chart_Image {organization}/{project}/{team}/_apis/work/iterations/chartimages/{name}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="name">The chart name. e.g. Velocity.</param>
		/// <param name="iterationsNumber">Number of iterations the chart is for.</param>
		/// <param name="width">The width of the chart in pixels. Must be greater than 0.</param>
		/// <param name="height">The height of the chart in pixels. Must be greater than 0.</param>
		/// <param name="showDetails">Whether or not the chart should include detailed information (e.g. axis labels, titles, trend lines, etc.)</param>
		/// <param name="title">The title of the chart. Can only be dislayed if ShowLabels is true.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public string Chartimages_Get_Iterations_Chart_Image(string organization, string project, string team, string name, int iterationsNumber, int width, int height, bool showDetails, string title, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/iterations/chartimages/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&iterationsNumber="+iterationsNumber+"&width="+width+"&height="+height+"&showDetails="+showDetails+"&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update taskboard card Rule settings
		/// Cardrulesettings_Update_Taskboard_Card_Rule_Settings {organization}/{project}/{team}/_apis/work/taskboard/cardrulesettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Cardrulesettings_Update_Taskboard_Card_Rule_SettingsAsync(string organization, string project, string team, string api_version, BoardCardRuleSettings requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/taskboard/cardrulesettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update taskboard card Rule settings
		/// Cardrulesettings_Update_Taskboard_Card_Rule_Settings {organization}/{project}/{team}/_apis/work/taskboard/cardrulesettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Cardrulesettings_Update_Taskboard_Card_Rule_Settings(string organization, string project, string team, string api_version, BoardCardRuleSettings requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/taskboard/cardrulesettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update taskboard card settings
		/// Cardsettings_Update_Taskboard_Card_Settings {organization}/{project}/{team}/_apis/work/taskboard/cardsettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Cardsettings_Update_Taskboard_Card_SettingsAsync(string organization, string project, string team, string api_version, BoardCardSettings requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/taskboard/cardsettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update taskboard card settings
		/// Cardsettings_Update_Taskboard_Card_Settings {organization}/{project}/{team}/_apis/work/taskboard/cardsettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Cardsettings_Update_Taskboard_Card_Settings(string organization, string project, string team, string api_version, BoardCardSettings requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/taskboard/cardsettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Taskboard_Columns_Get {organization}/{project}/{team}/_apis/work/taskboardcolumns
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TaskboardColumns> Taskboard_Columns_GetAsync(string organization, string project, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/taskboardcolumns&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskboardColumns>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Taskboard_Columns_Get {organization}/{project}/{team}/_apis/work/taskboardcolumns
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TaskboardColumns Taskboard_Columns_Get(string organization, string project, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/taskboardcolumns&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskboardColumns>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Taskboard_Columns_Update {organization}/{project}/{team}/_apis/work/taskboardcolumns
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TaskboardColumns> Taskboard_Columns_UpdateAsync(string organization, string project, string team, string api_version, UpdateTaskboardColumn[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/taskboardcolumns&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskboardColumns>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Taskboard_Columns_Update {organization}/{project}/{team}/_apis/work/taskboardcolumns
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TaskboardColumns Taskboard_Columns_Update(string organization, string project, string team, string api_version, UpdateTaskboardColumn[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/taskboardcolumns&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskboardColumns>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Taskboard_Work_Items_List {organization}/{project}/{team}/_apis/work/taskboardworkitems/{iterationId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TaskboardWorkItemColumn[]> Taskboard_Work_Items_ListAsync(string organization, string project, string team, string iterationId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/taskboardworkitems/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskboardWorkItemColumn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Taskboard_Work_Items_List {organization}/{project}/{team}/_apis/work/taskboardworkitems/{iterationId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TaskboardWorkItemColumn[] Taskboard_Work_Items_List(string organization, string project, string team, string iterationId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/taskboardworkitems/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskboardWorkItemColumn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Taskboard_Work_Items_Update {organization}/{project}/{team}/_apis/work/taskboardworkitems/{iterationId}/{workItemId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Taskboard_Work_Items_UpdateAsync(string organization, string project, string team, string iterationId, int workItemId, string api_version, UpdateTaskboardWorkItemColumn requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/taskboardworkitems/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"/"+workItemId+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Taskboard_Work_Items_Update {organization}/{project}/{team}/_apis/work/taskboardworkitems/{iterationId}/{workItemId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Taskboard_Work_Items_Update(string organization, string project, string team, string iterationId, int workItemId, string api_version, UpdateTaskboardWorkItemColumn requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/taskboardworkitems/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"/"+workItemId+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a team's settings
		/// Teamsettings_Get {organization}/{project}/{team}/_apis/work/teamsettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TeamSetting> Teamsettings_GetAsync(string organization, string project, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamSetting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a team's settings
		/// Teamsettings_Get {organization}/{project}/{team}/_apis/work/teamsettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TeamSetting Teamsettings_Get(string organization, string project, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamSetting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a team's settings
		/// Teamsettings_Update {organization}/{project}/{team}/_apis/work/teamsettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">TeamSettings changes</param>
		/// <returns>successful operation</returns>
		public async Task<TeamSetting> Teamsettings_UpdateAsync(string organization, string project, string team, string api_version, TeamSettingsPatch requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamSetting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a team's settings
		/// Teamsettings_Update {organization}/{project}/{team}/_apis/work/teamsettings
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">TeamSettings changes</param>
		/// <returns>successful operation</returns>
		public TeamSetting Teamsettings_Update(string organization, string project, string team, string api_version, TeamSettingsPatch requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamSetting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a team's iterations using timeframe filter
		/// Iterations_List {organization}/{project}/{team}/_apis/work/teamsettings/iterations
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="timeframe">A filter for which iterations are returned based on relative time. Only Current is supported currently.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TeamSettingsIteration[]> Iterations_ListAsync(string organization, string project, string team, string timeframe, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations&$timeframe=" + (timeframe==null? "" : System.Uri.EscapeDataString(timeframe))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamSettingsIteration[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a team's iterations using timeframe filter
		/// Iterations_List {organization}/{project}/{team}/_apis/work/teamsettings/iterations
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="timeframe">A filter for which iterations are returned based on relative time. Only Current is supported currently.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TeamSettingsIteration[] Iterations_List(string organization, string project, string team, string timeframe, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations&$timeframe=" + (timeframe==null? "" : System.Uri.EscapeDataString(timeframe))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamSettingsIteration[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add an iteration to the team
		/// Iterations_Post_Team_Iteration {organization}/{project}/{team}/_apis/work/teamsettings/iterations
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Iteration to add</param>
		/// <returns>successful operation</returns>
		public async Task<TeamSettingsIteration> Iterations_Post_Team_IterationAsync(string organization, string project, string team, string api_version, TeamSettingsIteration requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamSettingsIteration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add an iteration to the team
		/// Iterations_Post_Team_Iteration {organization}/{project}/{team}/_apis/work/teamsettings/iterations
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Iteration to add</param>
		/// <returns>successful operation</returns>
		public TeamSettingsIteration Iterations_Post_Team_Iteration(string organization, string project, string team, string api_version, TeamSettingsIteration requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamSettingsIteration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get team's iteration by iterationId
		/// Iterations_Get {organization}/{project}/{team}/_apis/work/teamsettings/iterations/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="id">ID of the iteration</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TeamSettingsIteration> Iterations_GetAsync(string organization, string project, string id, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamSettingsIteration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get team's iteration by iterationId
		/// Iterations_Get {organization}/{project}/{team}/_apis/work/teamsettings/iterations/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="id">ID of the iteration</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TeamSettingsIteration Iterations_Get(string organization, string project, string id, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamSettingsIteration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a team's iteration by iterationId
		/// Iterations_Delete {organization}/{project}/{team}/_apis/work/teamsettings/iterations/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="id">ID of the iteration</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Iterations_DeleteAsync(string organization, string project, string id, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a team's iteration by iterationId
		/// Iterations_Delete {organization}/{project}/{team}/_apis/work/teamsettings/iterations/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="id">ID of the iteration</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Iterations_Delete(string organization, string project, string id, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a team's capacity
		/// Capacities_List {organization}/{project}/{team}/_apis/work/teamsettings/iterations/{iterationId}/capacities
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="iterationId">ID of the iteration</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TeamMemberCapacityIdentityRef[]> Capacities_ListAsync(string organization, string project, string iterationId, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"/capacities&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamMemberCapacityIdentityRef[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a team's capacity
		/// Capacities_List {organization}/{project}/{team}/_apis/work/teamsettings/iterations/{iterationId}/capacities
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="iterationId">ID of the iteration</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TeamMemberCapacityIdentityRef[] Capacities_List(string organization, string project, string iterationId, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"/capacities&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamMemberCapacityIdentityRef[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replace a team's capacity
		/// Capacities_Replace_Capacities_With_Identity_Ref {organization}/{project}/{team}/_apis/work/teamsettings/iterations/{iterationId}/capacities
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="iterationId">ID of the iteration</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Team capacity to replace</param>
		/// <returns>successful operation</returns>
		public async Task<TeamMemberCapacityIdentityRef[]> Capacities_Replace_Capacities_With_Identity_RefAsync(string organization, string project, string iterationId, string team, string api_version, TeamMemberCapacityIdentityRef[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"/capacities&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamMemberCapacityIdentityRef[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replace a team's capacity
		/// Capacities_Replace_Capacities_With_Identity_Ref {organization}/{project}/{team}/_apis/work/teamsettings/iterations/{iterationId}/capacities
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="iterationId">ID of the iteration</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Team capacity to replace</param>
		/// <returns>successful operation</returns>
		public TeamMemberCapacityIdentityRef[] Capacities_Replace_Capacities_With_Identity_Ref(string organization, string project, string iterationId, string team, string api_version, TeamMemberCapacityIdentityRef[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"/capacities&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamMemberCapacityIdentityRef[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a team member's capacity
		/// Capacities_Get {organization}/{project}/{team}/_apis/work/teamsettings/iterations/{iterationId}/capacities/{teamMemberId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="iterationId">ID of the iteration</param>
		/// <param name="teamMemberId">ID of the team member</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TeamMemberCapacityIdentityRef> Capacities_GetAsync(string organization, string project, string iterationId, string teamMemberId, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"/capacities/"+ (teamMemberId==null? "" : System.Uri.EscapeDataString(teamMemberId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamMemberCapacityIdentityRef>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a team member's capacity
		/// Capacities_Get {organization}/{project}/{team}/_apis/work/teamsettings/iterations/{iterationId}/capacities/{teamMemberId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="iterationId">ID of the iteration</param>
		/// <param name="teamMemberId">ID of the team member</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TeamMemberCapacityIdentityRef Capacities_Get(string organization, string project, string iterationId, string teamMemberId, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"/capacities/"+ (teamMemberId==null? "" : System.Uri.EscapeDataString(teamMemberId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamMemberCapacityIdentityRef>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a team member's capacity
		/// Capacities_Update {organization}/{project}/{team}/_apis/work/teamsettings/iterations/{iterationId}/capacities/{teamMemberId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="iterationId">ID of the iteration</param>
		/// <param name="teamMemberId">ID of the team member</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Updated capacity</param>
		/// <returns>successful operation</returns>
		public async Task<TeamMemberCapacityIdentityRef> Capacities_UpdateAsync(string organization, string project, string iterationId, string teamMemberId, string team, string api_version, CapacityPatch requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"/capacities/"+ (teamMemberId==null? "" : System.Uri.EscapeDataString(teamMemberId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamMemberCapacityIdentityRef>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a team member's capacity
		/// Capacities_Update {organization}/{project}/{team}/_apis/work/teamsettings/iterations/{iterationId}/capacities/{teamMemberId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="iterationId">ID of the iteration</param>
		/// <param name="teamMemberId">ID of the team member</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Updated capacity</param>
		/// <returns>successful operation</returns>
		public TeamMemberCapacityIdentityRef Capacities_Update(string organization, string project, string iterationId, string teamMemberId, string team, string api_version, CapacityPatch requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"/capacities/"+ (teamMemberId==null? "" : System.Uri.EscapeDataString(teamMemberId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamMemberCapacityIdentityRef>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get team's days off for an iteration
		/// Teamdaysoff_Get {organization}/{project}/{team}/_apis/work/teamsettings/iterations/{iterationId}/teamdaysoff
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="iterationId">ID of the iteration</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TeamSettingsDaysOff> Teamdaysoff_GetAsync(string organization, string project, string iterationId, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"/teamdaysoff&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamSettingsDaysOff>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get team's days off for an iteration
		/// Teamdaysoff_Get {organization}/{project}/{team}/_apis/work/teamsettings/iterations/{iterationId}/teamdaysoff
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="iterationId">ID of the iteration</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TeamSettingsDaysOff Teamdaysoff_Get(string organization, string project, string iterationId, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"/teamdaysoff&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamSettingsDaysOff>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set a team's days off for an iteration
		/// Teamdaysoff_Update {organization}/{project}/{team}/_apis/work/teamsettings/iterations/{iterationId}/teamdaysoff
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="iterationId">ID of the iteration</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Team's days off patch containing a list of start and end dates</param>
		/// <returns>successful operation</returns>
		public async Task<TeamSettingsDaysOff> Teamdaysoff_UpdateAsync(string organization, string project, string iterationId, string team, string api_version, TeamSettingsDaysOffPatch requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"/teamdaysoff&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamSettingsDaysOff>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Set a team's days off for an iteration
		/// Teamdaysoff_Update {organization}/{project}/{team}/_apis/work/teamsettings/iterations/{iterationId}/teamdaysoff
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="iterationId">ID of the iteration</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Team's days off patch containing a list of start and end dates</param>
		/// <returns>successful operation</returns>
		public TeamSettingsDaysOff Teamdaysoff_Update(string organization, string project, string iterationId, string team, string api_version, TeamSettingsDaysOffPatch requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"/teamdaysoff&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamSettingsDaysOff>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get work items for iteration
		/// Iterations_Get_Iteration_Work_Items {organization}/{project}/{team}/_apis/work/teamsettings/iterations/{iterationId}/workitems
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="iterationId">ID of the iteration</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<IterationWorkItems> Iterations_Get_Iteration_Work_ItemsAsync(string organization, string project, string iterationId, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"/workitems&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IterationWorkItems>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get work items for iteration
		/// Iterations_Get_Iteration_Work_Items {organization}/{project}/{team}/_apis/work/teamsettings/iterations/{iterationId}/workitems
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="iterationId">ID of the iteration</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public IterationWorkItems Iterations_Get_Iteration_Work_Items(string organization, string project, string iterationId, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/iterations/"+ (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"/workitems&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IterationWorkItems>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a collection of team field values
		/// Teamfieldvalues_Get {organization}/{project}/{team}/_apis/work/teamsettings/teamfieldvalues
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TeamFieldValues> Teamfieldvalues_GetAsync(string organization, string project, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/teamfieldvalues&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamFieldValues>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a collection of team field values
		/// Teamfieldvalues_Get {organization}/{project}/{team}/_apis/work/teamsettings/teamfieldvalues
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TeamFieldValues Teamfieldvalues_Get(string organization, string project, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/teamfieldvalues&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamFieldValues>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update team field values
		/// Teamfieldvalues_Update {organization}/{project}/{team}/_apis/work/teamsettings/teamfieldvalues
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TeamFieldValues> Teamfieldvalues_UpdateAsync(string organization, string project, string team, string api_version, TeamFieldValuesPatch requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/teamfieldvalues&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamFieldValues>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update team field values
		/// Teamfieldvalues_Update {organization}/{project}/{team}/_apis/work/teamsettings/teamfieldvalues
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TeamFieldValues Teamfieldvalues_Update(string organization, string project, string team, string api_version, TeamFieldValuesPatch requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/teamsettings/teamfieldvalues&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamFieldValues>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reorder Product Backlog/Boards Work Items
		/// Workitemsorder_Reorder_Backlog_Work_Items {organization}/{project}/{team}/_apis/work/workitemsorder
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ReorderResult[]> Workitemsorder_Reorder_Backlog_Work_ItemsAsync(string organization, string project, string team, string api_version, ReorderOperation requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/workitemsorder&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReorderResult[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reorder Product Backlog/Boards Work Items
		/// Workitemsorder_Reorder_Backlog_Work_Items {organization}/{project}/{team}/_apis/work/workitemsorder
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ReorderResult[] Workitemsorder_Reorder_Backlog_Work_Items(string organization, string project, string team, string api_version, ReorderOperation requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/work/workitemsorder&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReorderResult[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
