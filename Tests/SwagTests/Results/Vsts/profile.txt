//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Identifies an attribute with a name and a container.
	/// </summary>
	public class AttributeDescriptor
	{
		
		/// <summary>
		/// The name of the attribute.
		/// </summary>
		public string AttributeName { get; set; }
		
		/// <summary>
		/// The container the attribute resides in.
		/// </summary>
		public string ContainerName { get; set; }
	}
	
	/// <summary>
	/// Stores a set of named profile attributes.
	/// </summary>
	public class AttributesContainer
	{
		
		/// <summary>
		/// The attributes stored by the container.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, ProfileAttribute> Attributes { get; set; }
		
		/// <summary>
		/// The name of the container.
		/// </summary>
		public string ContainerName { get; set; }
		
		/// <summary>
		/// The maximum revision number of any attribute within the container.
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
	}
	
	/// <summary>
	/// A named object associated with a profile.
	/// </summary>
	public class ProfileAttribute
	{
	}
	
	public class Avatar
	{
		
		public System.Nullable<System.Boolean> IsAutoGenerated { get; set; }
		
		public System.Nullable<AvatarSize> Size { get; set; }
		
		public System.Nullable<System.DateTimeOffset> TimeStamp { get; set; }
		
		public string[] Value { get; set; }
	}
	
	public enum AvatarSize
	{
		
		small = 0,
		
		medium = 1,
		
		large = 2,
	}
	
	/// <summary>
	/// A profile attribute which always has a value for each profile.
	/// </summary>
	public class CoreProfileAttribute
	{
	}
	
	public class CreateProfileContext
	{
		
		public System.Collections.Generic.Dictionary<string, object> CiData { get; set; }
		
		public System.Nullable<System.Boolean> ContactWithOffers { get; set; }
		
		public string CountryName { get; set; }
		
		public string DisplayName { get; set; }
		
		public string EmailAddress { get; set; }
		
		public System.Nullable<System.Boolean> HasAccount { get; set; }
		
		public string Language { get; set; }
		
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// The current state of the profile.
		/// </summary>
		public System.Nullable<CreateProfileContextProfileState> ProfileState { get; set; }
	}
	
	public enum CreateProfileContextProfileState
	{
		
		custom = 0,
		
		customReadOnly = 1,
		
		readOnly = 2,
	}
	
	public class GeoRegion
	{
		
		public string RegionCode { get; set; }
	}
	
	/// <summary>
	/// Represents a JSON object.
	/// </summary>
	public class JObject
	{
		
		public string Item { get; set; }
		
		/// <summary>
		/// Gets the node type for this JToken.
		/// </summary>
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A user profile.
	/// </summary>
	public class Profile
	{
		
		/// <summary>
		/// Stores a set of named profile attributes.
		/// </summary>
		public AttributesContainer ApplicationContainer { get; set; }
		
		/// <summary>
		/// The core attributes of this profile.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, CoreProfileAttribute> CoreAttributes { get; set; }
		
		/// <summary>
		/// The maximum revision number of any attribute.
		/// </summary>
		public System.Nullable<System.Int32> CoreRevision { get; set; }
		
		/// <summary>
		/// The unique identifier of the profile.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// The current state of the profile.
		/// </summary>
		public System.Nullable<ProfileProfileState> ProfileState { get; set; }
		
		/// <summary>
		/// The maximum revision number of any attribute.
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// The time at which this profile was last changed.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> TimeStamp { get; set; }
	}
	
	public enum ProfileProfileState
	{
		
		custom = 0,
		
		customReadOnly = 1,
		
		readOnly = 2,
	}
	
	public class ProfileAttributeBase
	{
		
		/// <summary>
		/// Identifies an attribute with a name and a container.
		/// </summary>
		public AttributeDescriptor Descriptor { get; set; }
		
		/// <summary>
		/// The revision number of the attribute.
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// The time the attribute was last changed.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> TimeStamp { get; set; }
		
		/// <summary>
		/// The value of the attribute.
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Country/region information
	/// </summary>
	public class ProfileRegion
	{
		
		/// <summary>
		/// The two-letter code defined in ISO 3166 for the country/region.
		/// </summary>
		public string Code { get; set; }
		
		/// <summary>
		/// Localized country/region name
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Container of country/region information
	/// </summary>
	public class ProfileRegions
	{
		
		/// <summary>
		/// List of country/region code with contact consent requirement type of notice
		/// </summary>
		public string[] NoticeContactConsentRequirementRegions { get; set; }
		
		/// <summary>
		/// List of country/region code with contact consent requirement type of opt-out
		/// </summary>
		public string[] OptOutContactConsentRequirementRegions { get; set; }
		
		/// <summary>
		/// List of country/regions
		/// </summary>
		public ProfileRegion[] Regions { get; set; }
	}
	
	/// <summary>
	/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
	/// </summary>
	public class VssJsonCollectionWrapper
	{
		
		public string Value { get; set; }
	}
	
	public class VssJsonCollectionWrapperBase
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a user profile.
		/// Profiles_Get _apis/profile/profiles/{id}
		/// </summary>
		/// <param name="id">The ID of the target user profile within the same organization, or 'me' to get the profile of the current authenticated user.</param>
		/// <param name="details">Return public profile information such as display name, email address, country, etc. If false, the withAttributes parameter is ignored.</param>
		/// <param name="withAttributes">If true, gets the attributes (named key-value pairs of arbitrary data) associated with the profile. The partition parameter must also have a value.</param>
		/// <param name="partition">The partition (named group) of attributes to return.</param>
		/// <param name="coreAttributes">A comma-delimited list of core profile attributes to return. Valid values are Email, Avatar, DisplayName, and ContactWithOffers.</param>
		/// <param name="forceRefresh">Not used in this version of the API.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Profile> Profiles_GetAsync(string id, bool details, bool withAttributes, string partition, string coreAttributes, bool forceRefresh, string api_version)
		{
			var requestUri = "_apis/profile/profiles/"+ (id==null? "" : Uri.EscapeDataString(id))+"&details="+details+"&withAttributes="+withAttributes+"&partition=" + (partition==null? "" : Uri.EscapeDataString(partition))+"&coreAttributes=" + (coreAttributes==null? "" : Uri.EscapeDataString(coreAttributes))+"&forceRefresh="+forceRefresh+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Profile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a user profile.
		/// Profiles_Get _apis/profile/profiles/{id}
		/// </summary>
		/// <param name="id">The ID of the target user profile within the same organization, or 'me' to get the profile of the current authenticated user.</param>
		/// <param name="details">Return public profile information such as display name, email address, country, etc. If false, the withAttributes parameter is ignored.</param>
		/// <param name="withAttributes">If true, gets the attributes (named key-value pairs of arbitrary data) associated with the profile. The partition parameter must also have a value.</param>
		/// <param name="partition">The partition (named group) of attributes to return.</param>
		/// <param name="coreAttributes">A comma-delimited list of core profile attributes to return. Valid values are Email, Avatar, DisplayName, and ContactWithOffers.</param>
		/// <param name="forceRefresh">Not used in this version of the API.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Profile Profiles_Get(string id, bool details, bool withAttributes, string partition, string coreAttributes, bool forceRefresh, string api_version)
		{
			var requestUri = "_apis/profile/profiles/"+ (id==null? "" : Uri.EscapeDataString(id))+"&details="+details+"&withAttributes="+withAttributes+"&partition=" + (partition==null? "" : Uri.EscapeDataString(partition))+"&coreAttributes=" + (coreAttributes==null? "" : Uri.EscapeDataString(coreAttributes))+"&forceRefresh="+forceRefresh+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Profile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
