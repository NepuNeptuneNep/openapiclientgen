//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Model of a Dashboard.
	/// </summary>
	public class Dashboard
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// Entity to which the dashboard is scoped.
		/// </summary>
		public DashboardDashboardScope DashboardScope { get; set; }
		
		/// <summary>
		/// Description of the dashboard.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Server defined version tracking value, used for edit collision detection.
		/// </summary>
		public string ETag { get; set; }
		
		/// <summary>
		/// ID of the group for a dashboard. For team-scoped dashboards, this is the unique identifier for the team associated with the dashboard. For project-scoped dashboards this property is empty.
		/// </summary>
		public string GroupId { get; set; }
		
		/// <summary>
		/// ID of the Dashboard. Provided by service at creation time.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the Dashboard.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// ID of the owner for a dashboard. For team-scoped dashboards, this is the unique identifier for the team associated with the dashboard. For project-scoped dashboards, this is the unique identifier for the user identity associated with the dashboard.
		/// </summary>
		public string OwnerId { get; set; }
		
		/// <summary>
		/// Position of the dashboard, within a dashboard group. If unset at creation time, position is decided by the service.
		/// </summary>
		public System.Nullable<System.Int32> Position { get; set; }
		
		/// <summary>
		/// Interval for client to automatically refresh the dashboard. Expressed in minutes.
		/// </summary>
		public System.Nullable<System.Int32> RefreshInterval { get; set; }
		
		public string Url { get; set; }
		
		/// <summary>
		/// The set of Widgets on the dashboard.
		/// </summary>
		public Widget[] Widgets { get; set; }
	}
	
	/// <summary>
	/// The class to represent a collection of REST reference links.
	/// </summary>
	public class ReferenceLinks
	{
		
		/// <summary>
		/// The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Links { get; set; }
	}
	
	public enum DashboardDashboardScope
	{
		
		collection_User = 0,
		
		project_Team = 1,
		
		project = 2,
	}
	
	/// <summary>
	/// Widget data
	/// </summary>
	public class Widget
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// Refers to the allowed sizes for the widget. This gets populated when user wants to configure the widget
		/// </summary>
		public WidgetSize[] AllowedSizes { get; set; }
		
		/// <summary>
		/// Read-Only Property from Dashboard Service. Indicates if settings are blocked for the current user.
		/// </summary>
		public System.Nullable<System.Boolean> AreSettingsBlockedForUser { get; set; }
		
		/// <summary>
		/// Refers to unique identifier of a feature artifact. Used for pinning+unpinning a specific artifact.
		/// </summary>
		public string ArtifactId { get; set; }
		
		public string ConfigurationContributionId { get; set; }
		
		public string ConfigurationContributionRelativeId { get; set; }
		
		public string ContentUri { get; set; }
		
		/// <summary>
		/// The id of the underlying contribution defining the supplied Widget Configuration.
		/// </summary>
		public string ContributionId { get; set; }
		
		/// <summary>
		/// Model of a Dashboard.
		/// </summary>
		public Dashboard Dashboard { get; set; }
		
		public string ETag { get; set; }
		
		public string Id { get; set; }
		
		public System.Nullable<System.Boolean> IsEnabled { get; set; }
		
		public System.Nullable<System.Boolean> IsNameConfigurable { get; set; }
		
		/// <summary>
		/// Lightbox configuration
		/// </summary>
		public LightboxOptions LightboxOptions { get; set; }
		
		public string LoadingImageUrl { get; set; }
		
		public string Name { get; set; }
		
		public WidgetPosition Position { get; set; }
		
		public string Settings { get; set; }
		
		/// <summary>
		/// versioning for an artifact as described at: http://semver.org/, of the form major.minor.patch.
		/// </summary>
		public SemanticVersion SettingsVersion { get; set; }
		
		public WidgetSize Size { get; set; }
		
		public string TypeId { get; set; }
		
		public string Url { get; set; }
	}
	
	public class WidgetSize
	{
		
		/// <summary>
		/// The Width of the widget, expressed in dashboard grid columns.
		/// </summary>
		public System.Nullable<System.Int32> ColumnSpan { get; set; }
		
		/// <summary>
		/// The height of the widget, expressed in dashboard grid rows.
		/// </summary>
		public System.Nullable<System.Int32> RowSpan { get; set; }
	}
	
	/// <summary>
	/// Lightbox configuration
	/// </summary>
	public class LightboxOptions
	{
		
		/// <summary>
		/// Height of desired lightbox, in pixels
		/// </summary>
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// True to allow lightbox resizing, false to disallow lightbox resizing, defaults to false.
		/// </summary>
		public System.Nullable<System.Boolean> Resizable { get; set; }
		
		/// <summary>
		/// Width of desired lightbox, in pixels
		/// </summary>
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	public class WidgetPosition
	{
		
		public System.Nullable<System.Int32> Column { get; set; }
		
		public System.Nullable<System.Int32> Row { get; set; }
	}
	
	/// <summary>
	/// versioning for an artifact as described at: http://semver.org/, of the form major.minor.patch.
	/// </summary>
	public class SemanticVersion
	{
		
		/// <summary>
		/// Major version when you make incompatible API changes
		/// </summary>
		public System.Nullable<System.Int32> Major { get; set; }
		
		/// <summary>
		/// Minor version when you add functionality in a backwards-compatible manner
		/// </summary>
		public System.Nullable<System.Int32> Minor { get; set; }
		
		/// <summary>
		/// Patch version when you make backwards-compatible bug fixes
		/// </summary>
		public System.Nullable<System.Int32> Patch { get; set; }
	}
	
	/// <summary>
	/// Describes a list of dashboards associated to an owner. Currently, teams own dashboard groups.
	/// </summary>
	public class DashboardGroup
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// A list of Dashboards held by the Dashboard Group
		/// </summary>
		public DashboardGroupEntry[] DashboardEntries { get; set; }
		
		/// <summary>
		/// Deprecated: The old permission model describing the level of permissions for the current team. Pre-M125.
		/// </summary>
		public DashboardGroupPermission Permission { get; set; }
		
		/// <summary>
		/// A permissions bit mask describing the security permissions of the current team for dashboards. When this permission is the value None, use GroupMemberPermission. Permissions are evaluated based on the presence of a value other than None, else the GroupMemberPermission will be saved.
		/// </summary>
		public DashboardGroupTeamDashboardPermission TeamDashboardPermission { get; set; }
		
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Dashboard group entry, wrapping around Dashboard (needed?)
	/// </summary>
	public class DashboardGroupEntry
	{
	}
	
	public enum DashboardGroupPermission
	{
		
		none = 0,
		
		edit = 1,
		
		manage = 2,
		
		managePermissions = 3,
	}
	
	public enum DashboardGroupTeamDashboardPermission
	{
		
		none = 0,
		
		read = 1,
		
		create = 2,
		
		edit = 3,
		
		delete = 4,
		
		managePermissions = 5,
	}
	
	/// <summary>
	/// Response from RestAPI when saving and editing DashboardGroupEntry
	/// </summary>
	public class DashboardGroupEntryResponse
	{
	}
	
	public class DashboardResponse
	{
	}
	
	/// <summary>
	/// The Team Context for an operation.
	/// </summary>
	public class TeamContext
	{
		
		/// <summary>
		/// The team project Id or name.  Ignored if ProjectId is set.
		/// </summary>
		public string Project { get; set; }
		
		/// <summary>
		/// The Team Project ID.  Required if Project is not set.
		/// </summary>
		public string ProjectId { get; set; }
		
		/// <summary>
		/// The Team Id or name.  Ignored if TeamId is set.
		/// </summary>
		public string Team { get; set; }
		
		/// <summary>
		/// The Team Id
		/// </summary>
		public string TeamId { get; set; }
	}
	
	/// <summary>
	/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
	/// </summary>
	public class VssJsonCollectionWrapper
	{
		
		public string Value { get; set; }
	}
	
	public class VssJsonCollectionWrapperBase
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	/// <summary>
	/// Contribution based information describing Dashboard Widgets.
	/// </summary>
	public class WidgetMetadata
	{
		
		/// <summary>
		/// Sizes supported by the Widget.
		/// </summary>
		public WidgetSize[] AllowedSizes { get; set; }
		
		/// <summary>
		/// Opt-in boolean that indicates if the widget requires the Analytics Service to function. Widgets requiring the analytics service are hidden from the catalog if the Analytics Service is not available.
		/// </summary>
		public System.Nullable<System.Boolean> AnalyticsServiceRequired { get; set; }
		
		/// <summary>
		/// Resource for an icon in the widget catalog.
		/// </summary>
		public string CatalogIconUrl { get; set; }
		
		/// <summary>
		/// Opt-in URL string pointing at widget information. Defaults to extension marketplace URL if omitted
		/// </summary>
		public string CatalogInfoUrl { get; set; }
		
		/// <summary>
		/// The id of the underlying contribution defining the supplied Widget custom configuration UI. Null if custom configuration UI is not available.
		/// </summary>
		public string ConfigurationContributionId { get; set; }
		
		/// <summary>
		/// The relative id of the underlying contribution defining the supplied Widget custom configuration UI. Null if custom configuration UI is not available.
		/// </summary>
		public string ConfigurationContributionRelativeId { get; set; }
		
		/// <summary>
		/// Indicates if the widget requires configuration before being added to dashboard.
		/// </summary>
		public System.Nullable<System.Boolean> ConfigurationRequired { get; set; }
		
		/// <summary>
		/// Uri for the widget content to be loaded from .
		/// </summary>
		public string ContentUri { get; set; }
		
		/// <summary>
		/// The id of the underlying contribution defining the supplied Widget.
		/// </summary>
		public string ContributionId { get; set; }
		
		/// <summary>
		/// Optional default settings to be copied into widget settings.
		/// </summary>
		public string DefaultSettings { get; set; }
		
		/// <summary>
		/// Summary information describing the widget.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Widgets can be disabled by the app store.  We'll need to gracefully handle for: - persistence (Allow) - Requests (Tag as disabled, and provide context)
		/// </summary>
		public System.Nullable<System.Boolean> IsEnabled { get; set; }
		
		/// <summary>
		/// Opt-out boolean that indicates if the widget supports widget name/title configuration. Widgets ignoring the name should set it to false in the manifest.
		/// </summary>
		public System.Nullable<System.Boolean> IsNameConfigurable { get; set; }
		
		/// <summary>
		/// Opt-out boolean indicating if the widget is hidden from the catalog. Commonly, this is used to allow developers to disable creation of a deprecated widget. A widget must have a functional default state, or have a configuration experience, in order to be visible from the catalog.
		/// </summary>
		public System.Nullable<System.Boolean> IsVisibleFromCatalog { get; set; }
		
		/// <summary>
		/// Keywords associated with this widget, non-filterable and invisible
		/// </summary>
		public string[] Keywords { get; set; }
		
		/// <summary>
		/// Lightbox configuration
		/// </summary>
		public LightboxOptions LightboxOptions { get; set; }
		
		/// <summary>
		/// Resource for a loading placeholder image on dashboard
		/// </summary>
		public string LoadingImageUrl { get; set; }
		
		/// <summary>
		/// User facing name of the widget type. Each widget must use a unique value here.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Publisher Name of this kind of widget.
		/// </summary>
		public string PublisherName { get; set; }
		
		/// <summary>
		/// Data contract required for the widget to function and to work in its container.
		/// </summary>
		public string[] SupportedScopes { get; set; }
		
		/// <summary>
		/// Tags associated with this widget, visible on each widget and filterable.
		/// </summary>
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Contribution target IDs
		/// </summary>
		public string[] Targets { get; set; }
		
		/// <summary>
		/// Deprecated: locally unique developer-facing id of this kind of widget. ContributionId provides a globally unique identifier for widget types.
		/// </summary>
		public string TypeId { get; set; }
	}
	
	public class WidgetMetadataResponse
	{
		
		public string Uri { get; set; }
		
		/// <summary>
		/// Contribution based information describing Dashboard Widgets.
		/// </summary>
		public WidgetMetadata WidgetMetadata { get; set; }
	}
	
	/// <summary>
	/// Response from RestAPI when saving and editing Widget
	/// </summary>
	public class WidgetResponse
	{
	}
	
	/// <summary>
	/// Wrapper class to support HTTP header generation using CreateResponse, ClientHeaderParameter and ClientResponseType in WidgetV2Controller
	/// </summary>
	public class WidgetsVersionedList
	{
		
		public string[] ETag { get; set; }
		
		public Widget[] Widgets { get; set; }
	}
	
	public class WidgetTypesResponse
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		public string Uri { get; set; }
		
		public WidgetMetadata[] WidgetTypes { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get all available widget metadata in alphabetical order, including widgets marked with isVisibleFromCatalog == false.
		/// Widget_Types_Get_Widget_Types {organization}/{project}/_apis/dashboard/widgettypes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WidgetTypesResponse> Widget_Types_Get_Widget_TypesAsync(string organization, Widget_Types_Get_Widget_TypesScope scope, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/dashboard/widgettypes&$scope=" + scope+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WidgetTypesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all available widget metadata in alphabetical order, including widgets marked with isVisibleFromCatalog == false.
		/// Widget_Types_Get_Widget_Types {organization}/{project}/_apis/dashboard/widgettypes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WidgetTypesResponse Widget_Types_Get_Widget_Types(string organization, Widget_Types_Get_Widget_TypesScope scope, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/dashboard/widgettypes&$scope=" + scope+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WidgetTypesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the widget metadata satisfying the specified contribution ID.
		/// Widget_Types_Get_Widget_Metadata {organization}/{project}/_apis/dashboard/widgettypes/{contributionId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="contributionId">The ID of Contribution for the Widget</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WidgetMetadataResponse> Widget_Types_Get_Widget_MetadataAsync(string organization, string contributionId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/dashboard/widgettypes/"+ (contributionId==null? "" : Uri.EscapeDataString(contributionId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WidgetMetadataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the widget metadata satisfying the specified contribution ID.
		/// Widget_Types_Get_Widget_Metadata {organization}/{project}/_apis/dashboard/widgettypes/{contributionId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="contributionId">The ID of Contribution for the Widget</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WidgetMetadataResponse Widget_Types_Get_Widget_Metadata(string organization, string contributionId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/dashboard/widgettypes/"+ (contributionId==null? "" : Uri.EscapeDataString(contributionId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WidgetMetadataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create the supplied dashboard.
		/// Dashboards_Create {organization}/{project}/{team}/_apis/dashboard/dashboards
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <param name="requestBody">The initial state of the dashboard</param>
		/// <returns>successful operation</returns>
		public async Task<Dashboard> Dashboards_CreateAsync(string organization, string project, string team, string api_version, Dashboard requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Dashboard>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create the supplied dashboard.
		/// Dashboards_Create {organization}/{project}/{team}/_apis/dashboard/dashboards
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <param name="requestBody">The initial state of the dashboard</param>
		/// <returns>successful operation</returns>
		public Dashboard Dashboards_Create(string organization, string project, string team, string api_version, Dashboard requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Dashboard>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of dashboards under a project.
		/// Dashboards_List {organization}/{project}/{team}/_apis/dashboard/dashboards
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Dashboard[]> Dashboards_ListAsync(string organization, string project, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Dashboard[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of dashboards under a project.
		/// Dashboards_List {organization}/{project}/{team}/_apis/dashboard/dashboards
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Dashboard[] Dashboards_List(string organization, string project, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Dashboard[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the name and position of dashboards in the supplied group, and remove omitted dashboards. Does not modify dashboard content.
		/// Dashboards_Replace_Dashboards {organization}/{project}/{team}/_apis/dashboard/dashboards
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<DashboardGroup> Dashboards_Replace_DashboardsAsync(string organization, string project, string team, string api_version, DashboardGroup requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DashboardGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update the name and position of dashboards in the supplied group, and remove omitted dashboards. Does not modify dashboard content.
		/// Dashboards_Replace_Dashboards {organization}/{project}/{team}/_apis/dashboard/dashboards
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public DashboardGroup Dashboards_Replace_Dashboards(string organization, string project, string team, string api_version, DashboardGroup requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DashboardGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a dashboard given its ID. This also deletes the widgets associated with this dashboard.
		/// Dashboards_Delete {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="dashboardId">ID of the dashboard to delete.</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Dashboards_DeleteAsync(string organization, string project, string dashboardId, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a dashboard given its ID. This also deletes the widgets associated with this dashboard.
		/// Dashboards_Delete {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="dashboardId">ID of the dashboard to delete.</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Dashboards_Delete(string organization, string project, string dashboardId, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a dashboard by its ID.
		/// Dashboards_Get {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Dashboard> Dashboards_GetAsync(string organization, string project, string dashboardId, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Dashboard>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a dashboard by its ID.
		/// Dashboards_Get {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Dashboard Dashboards_Get(string organization, string project, string dashboardId, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Dashboard>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replace configuration for the specified dashboard. Replaces Widget list on Dashboard, only if property is supplied.
		/// Dashboards_Replace_Dashboard {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="dashboardId">ID of the dashboard to replace.</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <param name="requestBody">The Configuration of the dashboard to replace.</param>
		/// <returns>successful operation</returns>
		public async Task<Dashboard> Dashboards_Replace_DashboardAsync(string organization, string project, string dashboardId, string team, string api_version, Dashboard requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Dashboard>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replace configuration for the specified dashboard. Replaces Widget list on Dashboard, only if property is supplied.
		/// Dashboards_Replace_Dashboard {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="dashboardId">ID of the dashboard to replace.</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <param name="requestBody">The Configuration of the dashboard to replace.</param>
		/// <returns>successful operation</returns>
		public Dashboard Dashboards_Replace_Dashboard(string organization, string project, string dashboardId, string team, string api_version, Dashboard requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Dashboard>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a widget on the specified dashboard.
		/// Widgets_Create {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="dashboardId">ID of dashboard the widget will be added to.</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">State of the widget to add</param>
		/// <returns>successful operation</returns>
		public async Task<Widget> Widgets_CreateAsync(string organization, string project, string dashboardId, string team, string api_version, Widget requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"/widgets&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Widget>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a widget on the specified dashboard.
		/// Widgets_Create {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="dashboardId">ID of dashboard the widget will be added to.</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">State of the widget to add</param>
		/// <returns>successful operation</returns>
		public Widget Widgets_Create(string organization, string project, string dashboardId, string team, string api_version, Widget requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"/widgets&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Widget>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get widgets contained on the specified dashboard.
		/// Widgets_Get_Widgets {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="dashboardId">ID of the dashboard to read.</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Widget[]> Widgets_Get_WidgetsAsync(string organization, string project, string dashboardId, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"/widgets&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Widget[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get widgets contained on the specified dashboard.
		/// Widgets_Get_Widgets {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="dashboardId">ID of the dashboard to read.</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Widget[] Widgets_Get_Widgets(string organization, string project, string dashboardId, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"/widgets&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Widget[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replace the widgets on specified dashboard with the supplied widgets.
		/// Widgets_Replace_Widgets {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="dashboardId">ID of the Dashboard to modify.</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Revised state of widgets to store for the dashboard.</param>
		/// <returns>successful operation</returns>
		public async Task<Widget[]> Widgets_Replace_WidgetsAsync(string organization, string project, string dashboardId, string team, string api_version, Widget[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"/widgets&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Widget[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replace the widgets on specified dashboard with the supplied widgets.
		/// Widgets_Replace_Widgets {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="dashboardId">ID of the Dashboard to modify.</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Revised state of widgets to store for the dashboard.</param>
		/// <returns>successful operation</returns>
		public Widget[] Widgets_Replace_Widgets(string organization, string project, string dashboardId, string team, string api_version, Widget[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"/widgets&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Widget[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update the supplied widgets on the dashboard using supplied state. State of existing Widgets not passed in the widget list is preserved.
		/// Widgets_Update_Widgets {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="dashboardId">ID of the Dashboard to modify.</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">The set of widget states to update on the dashboard.</param>
		/// <returns>successful operation</returns>
		public async Task<Widget[]> Widgets_Update_WidgetsAsync(string organization, string project, string dashboardId, string team, string api_version, Widget[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"/widgets&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Widget[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update the supplied widgets on the dashboard using supplied state. State of existing Widgets not passed in the widget list is preserved.
		/// Widgets_Update_Widgets {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="dashboardId">ID of the Dashboard to modify.</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">The set of widget states to update on the dashboard.</param>
		/// <returns>successful operation</returns>
		public Widget[] Widgets_Update_Widgets(string organization, string project, string dashboardId, string team, string api_version, Widget[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"/widgets&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Widget[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete the specified widget.
		/// Widgets_Delete {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets/{widgetId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="dashboardId">ID of the dashboard containing the widget.</param>
		/// <param name="widgetId">ID of the widget to update.</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Dashboard> Widgets_DeleteAsync(string organization, string project, string dashboardId, string widgetId, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"/widgets/"+ (widgetId==null? "" : Uri.EscapeDataString(widgetId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Dashboard>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the specified widget.
		/// Widgets_Delete {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets/{widgetId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="dashboardId">ID of the dashboard containing the widget.</param>
		/// <param name="widgetId">ID of the widget to update.</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Dashboard Widgets_Delete(string organization, string project, string dashboardId, string widgetId, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"/widgets/"+ (widgetId==null? "" : Uri.EscapeDataString(widgetId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Dashboard>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the current state of the specified widget.
		/// Widgets_Get_Widget {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets/{widgetId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="dashboardId">ID of the dashboard containing the widget.</param>
		/// <param name="widgetId">ID of the widget to read.</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Widget> Widgets_Get_WidgetAsync(string organization, string project, string dashboardId, string widgetId, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"/widgets/"+ (widgetId==null? "" : Uri.EscapeDataString(widgetId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Widget>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the current state of the specified widget.
		/// Widgets_Get_Widget {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets/{widgetId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="dashboardId">ID of the dashboard containing the widget.</param>
		/// <param name="widgetId">ID of the widget to read.</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Widget Widgets_Get_Widget(string organization, string project, string dashboardId, string widgetId, string team, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"/widgets/"+ (widgetId==null? "" : Uri.EscapeDataString(widgetId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Widget>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Override the  state of the specified widget.
		/// Widgets_Replace_Widget {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets/{widgetId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="dashboardId">ID of the dashboard containing the widget.</param>
		/// <param name="widgetId">ID of the widget to update.</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">State to be written for the widget.</param>
		/// <returns>successful operation</returns>
		public async Task<Widget> Widgets_Replace_WidgetAsync(string organization, string project, string dashboardId, string widgetId, string team, string api_version, Widget requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"/widgets/"+ (widgetId==null? "" : Uri.EscapeDataString(widgetId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Widget>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Override the  state of the specified widget.
		/// Widgets_Replace_Widget {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets/{widgetId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="dashboardId">ID of the dashboard containing the widget.</param>
		/// <param name="widgetId">ID of the widget to update.</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">State to be written for the widget.</param>
		/// <returns>successful operation</returns>
		public Widget Widgets_Replace_Widget(string organization, string project, string dashboardId, string widgetId, string team, string api_version, Widget requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"/widgets/"+ (widgetId==null? "" : Uri.EscapeDataString(widgetId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Widget>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Perform a partial update of the specified widget.
		/// Widgets_Update_Widget {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets/{widgetId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="dashboardId">ID of the dashboard containing the widget.</param>
		/// <param name="widgetId">ID of the widget to update.</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Description of the widget changes to apply. All non-null fields will be replaced.</param>
		/// <returns>successful operation</returns>
		public async Task<Widget> Widgets_Update_WidgetAsync(string organization, string project, string dashboardId, string widgetId, string team, string api_version, Widget requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"/widgets/"+ (widgetId==null? "" : Uri.EscapeDataString(widgetId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Widget>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Perform a partial update of the specified widget.
		/// Widgets_Update_Widget {organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets/{widgetId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="dashboardId">ID of the dashboard containing the widget.</param>
		/// <param name="widgetId">ID of the widget to update.</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Description of the widget changes to apply. All non-null fields will be replaced.</param>
		/// <returns>successful operation</returns>
		public Widget Widgets_Update_Widget(string organization, string project, string dashboardId, string widgetId, string team, string api_version, Widget requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/"+ (team==null? "" : Uri.EscapeDataString(team))+"/_apis/dashboard/dashboards/"+ (dashboardId==null? "" : Uri.EscapeDataString(dashboardId))+"/widgets/"+ (widgetId==null? "" : Uri.EscapeDataString(widgetId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Widget>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Widget_Types_Get_Widget_TypesScope
	{
		
		collection_User = 0,
		
		project_Team = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
