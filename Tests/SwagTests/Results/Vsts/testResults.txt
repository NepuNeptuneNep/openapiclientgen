//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public class AggregatedDataForResultTrend
	{
		
		/// <summary>
		/// This is tests execution duration.
		/// </summary>
		public string Duration { get; set; }
		
		public System.Collections.Generic.Dictionary<string, AggregatedResultsByOutcome> ResultsByOutcome { get; set; }
		
		public System.Collections.Generic.Dictionary<string, AggregatedRunsByState> RunSummaryByState { get; set; }
		
		public TestResultsContext TestResultsContext { get; set; }
		
		public System.Nullable<System.Int32> TotalTests { get; set; }
	}
	
	public class AggregatedResultsByOutcome
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
		
		public string Duration { get; set; }
		
		public string GroupByField { get; set; }
		
		public string GroupByValue { get; set; }
		
		public System.Nullable<AggregatedResultsByOutcomeOutcome> Outcome { get; set; }
		
		public System.Nullable<System.Int32> RerunResultCount { get; set; }
	}
	
	public enum AggregatedResultsByOutcomeOutcome
	{
		
		unspecified = 0,
		
		none = 1,
		
		passed = 2,
		
		failed = 3,
		
		inconclusive = 4,
		
		timeout = 5,
		
		aborted = 6,
		
		blocked = 7,
		
		notExecuted = 8,
		
		warning = 9,
		
		error = 10,
		
		notApplicable = 11,
		
		paused = 12,
		
		inProgress = 13,
		
		notImpacted = 14,
	}
	
	public class AggregatedRunsByState
	{
		
		public System.Collections.Generic.Dictionary<string, AggregatedResultsByOutcome> ResultsByOutcome { get; set; }
		
		public System.Nullable<System.Int32> RunsCount { get; set; }
		
		public System.Nullable<AggregatedRunsByStateState> State { get; set; }
	}
	
	public enum AggregatedRunsByStateState
	{
		
		unspecified = 0,
		
		notStarted = 1,
		
		inProgress = 2,
		
		completed = 3,
		
		aborted = 4,
		
		waiting = 5,
		
		needsInvestigation = 6,
	}
	
	public class TestResultsContext
	{
		
		/// <summary>
		/// Reference to a build.
		/// </summary>
		public BuildReference Build { get; set; }
		
		public System.Nullable<TestResultsContextContextType> ContextType { get; set; }
		
		/// <summary>
		/// Pipeline reference
		/// </summary>
		public PipelineReference PipelineReference { get; set; }
		
		/// <summary>
		/// Reference to a release.
		/// </summary>
		public ReleaseReference Release { get; set; }
	}
	
	/// <summary>
	/// Reference to a build.
	/// </summary>
	public class BuildReference
	{
		
		/// <summary>
		/// Branch name.
		/// </summary>
		public string BranchName { get; set; }
		
		/// <summary>
		/// Build system.
		/// </summary>
		public string BuildSystem { get; set; }
		
		/// <summary>
		/// Build Definition ID.
		/// </summary>
		public System.Nullable<System.Int32> DefinitionId { get; set; }
		
		/// <summary>
		/// Build ID.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Build Number.
		/// </summary>
		public string Number { get; set; }
		
		/// <summary>
		/// Repository ID.
		/// </summary>
		public string RepositoryId { get; set; }
		
		/// <summary>
		/// Build URI.
		/// </summary>
		public string Uri { get; set; }
	}
	
	public enum TestResultsContextContextType
	{
		
		build = 0,
		
		release = 1,
		
		pipeline = 2,
	}
	
	/// <summary>
	/// Pipeline reference
	/// </summary>
	public class PipelineReference
	{
		
		/// <summary>
		/// Job in pipeline. This is related to matrixing in YAML.
		/// </summary>
		public JobReference JobReference { get; set; }
		
		/// <summary>
		/// Phase in pipeline
		/// </summary>
		public PhaseReference PhaseReference { get; set; }
		
		/// <summary>
		/// Reference of the pipeline with which this pipeline instance is related.
		/// </summary>
		public System.Nullable<System.Int32> PipelineId { get; set; }
		
		/// <summary>
		/// Stage in pipeline
		/// </summary>
		public StageReference StageReference { get; set; }
	}
	
	/// <summary>
	/// Job in pipeline. This is related to matrixing in YAML.
	/// </summary>
	public class JobReference
	{
		
		/// <summary>
		/// Attempt number of the job
		/// </summary>
		public System.Nullable<System.Int32> Attempt { get; set; }
		
		/// <summary>
		/// Matrixing in YAML generates copies of a job with different inputs in matrix. JobName is the name of those input. Maximum supported length for name is 256 character.
		/// </summary>
		public string JobName { get; set; }
	}
	
	/// <summary>
	/// Phase in pipeline
	/// </summary>
	public class PhaseReference
	{
		
		/// <summary>
		/// Attempt number of the phase
		/// </summary>
		public System.Nullable<System.Int32> Attempt { get; set; }
		
		/// <summary>
		/// Name of the phase. Maximum supported length for name is 256 character.
		/// </summary>
		public string PhaseName { get; set; }
	}
	
	/// <summary>
	/// Stage in pipeline
	/// </summary>
	public class StageReference
	{
		
		/// <summary>
		/// Attempt number of stage
		/// </summary>
		public System.Nullable<System.Int32> Attempt { get; set; }
		
		/// <summary>
		/// Name of the stage. Maximum supported length for name is 256 character.
		/// </summary>
		public string StageName { get; set; }
	}
	
	/// <summary>
	/// Reference to a release.
	/// </summary>
	public class ReleaseReference
	{
		
		/// <summary>
		/// Number of Release Attempt.
		/// </summary>
		public System.Nullable<System.Int32> Attempt { get; set; }
		
		/// <summary>
		/// Release Creation Date.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// Release definition ID.
		/// </summary>
		public System.Nullable<System.Int32> DefinitionId { get; set; }
		
		/// <summary>
		/// Environment creation Date.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> EnvironmentCreationDate { get; set; }
		
		/// <summary>
		/// Release environment definition ID.
		/// </summary>
		public System.Nullable<System.Int32> EnvironmentDefinitionId { get; set; }
		
		/// <summary>
		/// Release environment definition name.
		/// </summary>
		public string EnvironmentDefinitionName { get; set; }
		
		/// <summary>
		/// Release environment ID.
		/// </summary>
		public System.Nullable<System.Int32> EnvironmentId { get; set; }
		
		/// <summary>
		/// Release environment name.
		/// </summary>
		public string EnvironmentName { get; set; }
		
		/// <summary>
		/// Release ID.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Release name.
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Result deatils for a particular test result outcome.
	/// </summary>
	public class AggregatedResultDetailsByOutcome
	{
		
		/// <summary>
		/// Number of results for current outcome.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Time taken by results.
		/// </summary>
		public string Duration { get; set; }
		
		/// <summary>
		/// Test result outcome
		/// </summary>
		public System.Nullable<AggregatedResultDetailsByOutcomeOutcome> Outcome { get; set; }
		
		/// <summary>
		/// Number of results on rerun
		/// </summary>
		public System.Nullable<System.Int32> RerunResultCount { get; set; }
	}
	
	public enum AggregatedResultDetailsByOutcomeOutcome
	{
		
		unspecified = 0,
		
		none = 1,
		
		passed = 2,
		
		failed = 3,
		
		inconclusive = 4,
		
		timeout = 5,
		
		aborted = 6,
		
		blocked = 7,
		
		notExecuted = 8,
		
		warning = 9,
		
		error = 10,
		
		notApplicable = 11,
		
		paused = 12,
		
		inProgress = 13,
		
		notImpacted = 14,
	}
	
	public class AggregatedResultsAnalysis
	{
		
		public string Duration { get; set; }
		
		public System.Collections.Generic.Dictionary<string, AggregatedResultsByOutcome> NotReportedResultsByOutcome { get; set; }
		
		public TestResultsContext PreviousContext { get; set; }
		
		public System.Collections.Generic.Dictionary<string, AggregatedResultsByOutcome> ResultsByOutcome { get; set; }
		
		public AggregatedResultsDifference ResultsDifference { get; set; }
		
		public System.Collections.Generic.Dictionary<string, AggregatedRunsByOutcome> RunSummaryByOutcome { get; set; }
		
		public System.Collections.Generic.Dictionary<string, AggregatedRunsByState> RunSummaryByState { get; set; }
		
		public System.Nullable<System.Int32> TotalTests { get; set; }
	}
	
	public class AggregatedResultsDifference
	{
		
		public string IncreaseInDuration { get; set; }
		
		public System.Nullable<System.Int32> IncreaseInFailures { get; set; }
		
		public System.Nullable<System.Int32> IncreaseInNonImpactedTests { get; set; }
		
		public System.Nullable<System.Int32> IncreaseInOtherTests { get; set; }
		
		public System.Nullable<System.Int32> IncreaseInPassedTests { get; set; }
		
		public System.Nullable<System.Int32> IncreaseInTotalTests { get; set; }
	}
	
	public class AggregatedRunsByOutcome
	{
		
		public System.Nullable<AggregatedRunsByOutcomeOutcome> Outcome { get; set; }
		
		public System.Nullable<System.Int32> RunsCount { get; set; }
	}
	
	public enum AggregatedRunsByOutcomeOutcome
	{
		
		passed = 0,
		
		failed = 1,
		
		notImpacted = 2,
		
		others = 3,
	}
	
	public class Attachment
	{
		
		public string CompressionType { get; set; }
		
		public string FileName { get; set; }
		
		public string Stream { get; set; }
	}
	
	/// <summary>
	/// BuildConfiguration Details.
	/// </summary>
	public class BuildConfiguration
	{
		
		/// <summary>
		/// Branch name for which build is generated.
		/// </summary>
		public string BranchName { get; set; }
		
		/// <summary>
		/// BuildDefinitionId for build.
		/// </summary>
		public System.Nullable<System.Int32> BuildDefinitionId { get; set; }
		
		/// <summary>
		/// Build system.
		/// </summary>
		public string BuildSystem { get; set; }
		
		/// <summary>
		/// Build Creation Date.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// Build flavor (eg Build/Release).
		/// </summary>
		public string Flavor { get; set; }
		
		/// <summary>
		/// BuildConfiguration Id.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Build Number.
		/// </summary>
		public string Number { get; set; }
		
		/// <summary>
		/// BuildConfiguration Platform.
		/// </summary>
		public string Platform { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Project { get; set; }
		
		/// <summary>
		/// Repository Guid for the Build.
		/// </summary>
		public string RepositoryGuid { get; set; }
		
		/// <summary>
		/// Repository Type (eg. TFSGit).
		/// </summary>
		public string RepositoryType { get; set; }
		
		/// <summary>
		/// Source Version(/first commit) for the build was triggered.
		/// </summary>
		public string SourceVersion { get; set; }
		
		/// <summary>
		/// Target BranchName.
		/// </summary>
		public string TargetBranchName { get; set; }
		
		/// <summary>
		/// Build Uri.
		/// </summary>
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
	/// </summary>
	public class ShallowReference
	{
		
		/// <summary>
		/// ID of the resource
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the linked resource (definition name, controller name, etc.)
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Full http link to the resource
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Build Coverage Detail
	/// </summary>
	public class BuildCoverage
	{
		
		/// <summary>
		/// Code Coverage File Url
		/// </summary>
		public string CodeCoverageFileUrl { get; set; }
		
		/// <summary>
		/// BuildConfiguration Details.
		/// </summary>
		public BuildConfiguration Configuration { get; set; }
		
		/// <summary>
		/// Last Error
		/// </summary>
		public string LastError { get; set; }
		
		/// <summary>
		/// List of Modules
		/// </summary>
		public ModuleCoverage[] Modules { get; set; }
		
		/// <summary>
		/// State
		/// </summary>
		public string State { get; set; }
	}
	
	public class ModuleCoverage
	{
		
		public System.Nullable<System.Int32> BlockCount { get; set; }
		
		public string[] BlockData { get; set; }
		
		/// <summary>
		/// Code Coverage File Url
		/// </summary>
		public string FileUrl { get; set; }
		
		public FunctionCoverage[] Functions { get; set; }
		
		public string Name { get; set; }
		
		public string Signature { get; set; }
		
		public System.Nullable<System.Int32> SignatureAge { get; set; }
		
		public CoverageStatistics Statistics { get; set; }
	}
	
	public class FunctionCoverage
	{
		
		public string Class { get; set; }
		
		public string Name { get; set; }
		
		public string Namespace { get; set; }
		
		public string SourceFile { get; set; }
		
		public CoverageStatistics Statistics { get; set; }
	}
	
	public class CoverageStatistics
	{
		
		public System.Nullable<System.Int32> BlocksCovered { get; set; }
		
		public System.Nullable<System.Int32> BlocksNotCovered { get; set; }
		
		public System.Nullable<System.Int32> LinesCovered { get; set; }
		
		public System.Nullable<System.Int32> LinesNotCovered { get; set; }
		
		public System.Nullable<System.Int32> LinesPartiallyCovered { get; set; }
	}
	
	/// <summary>
	/// Represents the build configuration (platform, flavor) and coverage data for the build
	/// </summary>
	public class CodeCoverageData
	{
		
		/// <summary>
		/// Flavor of build for which data is retrieved/published
		/// </summary>
		public string BuildFlavor { get; set; }
		
		/// <summary>
		/// Platform of build for which data is retrieved/published
		/// </summary>
		public string BuildPlatform { get; set; }
		
		/// <summary>
		/// List of coverage data for the build
		/// </summary>
		public CodeCoverageStatistics[] CoverageStats { get; set; }
	}
	
	/// <summary>
	/// Represents the code coverage statistics for a particular coverage label (modules, statements, blocks, etc.)
	/// </summary>
	public class CodeCoverageStatistics
	{
		
		/// <summary>
		/// Covered units
		/// </summary>
		public System.Nullable<System.Int32> Covered { get; set; }
		
		/// <summary>
		/// Delta of coverage
		/// </summary>
		public System.Nullable<System.Double> Delta { get; set; }
		
		/// <summary>
		/// Is delta valid
		/// </summary>
		public System.Nullable<System.Boolean> IsDeltaAvailable { get; set; }
		
		/// <summary>
		/// Label of coverage data ("Blocks", "Statements", "Modules", etc.)
		/// </summary>
		public string Label { get; set; }
		
		/// <summary>
		/// Position of label
		/// </summary>
		public System.Nullable<System.Int32> Position { get; set; }
		
		/// <summary>
		/// Total units
		/// </summary>
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	/// <summary>
	/// Represents the code coverage summary results Used to publish or retrieve code coverage summary against a build
	/// </summary>
	public class CodeCoverageSummary
	{
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Build { get; set; }
		
		/// <summary>
		/// List of coverage data and details for the build
		/// </summary>
		public CodeCoverageData[] CoverageData { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference DeltaBuild { get; set; }
		
		/// <summary>
		/// Uri of build against which difference in coverage is computed
		/// </summary>
		public System.Nullable<CodeCoverageSummaryStatus> Status { get; set; }
	}
	
	public enum CodeCoverageSummaryStatus
	{
		
		none = 0,
		
		inProgress = 1,
		
		completed = 2,
		
		finalized = 3,
		
		pending = 4,
		
		updateRequestQueued = 5,
	}
	
	/// <summary>
	/// A custom field information. Allowed Key : Value pairs - ( AttemptId: int value, IsTestResultFlaky: bool)
	/// </summary>
	public class CustomTestField
	{
		
		/// <summary>
		/// Field Name.
		/// </summary>
		public string FieldName { get; set; }
		
		/// <summary>
		/// Field value.
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// This is a temporary class to provide the details for the test run environment.
	/// </summary>
	public class DtlEnvironmentDetails
	{
		
		public string CsmContent { get; set; }
		
		public string CsmParameters { get; set; }
		
		public string SubscriptionName { get; set; }
	}
	
	/// <summary>
	/// Failing since information of a test result.
	/// </summary>
	public class FailingSince
	{
		
		/// <summary>
		/// Reference to a build.
		/// </summary>
		public BuildReference Build { get; set; }
		
		/// <summary>
		/// Time since failing.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Reference to a release.
		/// </summary>
		public ReleaseReference Release { get; set; }
	}
	
	public class FieldDetailsForTestResults
	{
		
		/// <summary>
		/// Group by field name
		/// </summary>
		public string FieldName { get; set; }
		
		/// <summary>
		/// Group by field values
		/// </summary>
		public string[] GroupsForField { get; set; }
	}
	
	public class FileCoverageRequest
	{
		
		public string FilePath { get; set; }
		
		public System.Nullable<System.Int32> PullRequestBaseIterationId { get; set; }
		
		public System.Nullable<System.Int32> PullRequestId { get; set; }
		
		public System.Nullable<System.Int32> PullRequestIterationId { get; set; }
		
		public string RepoId { get; set; }
	}
	
	public class FlakyDetection
	{
		
		public FlakyDetectionPipelines FlakyDetectionPipelines { get; set; }
		
		/// <summary>
		/// FlakyDetectionType defines Detection type i.e. 1. System or 2. Manual.
		/// </summary>
		public System.Nullable<FlakyDetectionFlakyDetectionType> FlakyDetectionType { get; set; }
	}
	
	public class FlakyDetectionPipelines
	{
		
		/// <summary>
		/// AllowedPipelines - List All Pipelines allowed for detection.
		/// </summary>
		public int[] AllowedPipelines { get; set; }
		
		/// <summary>
		/// IsAllPipelinesAllowed if users configure all system's pipelines.
		/// </summary>
		public System.Nullable<System.Boolean> IsAllPipelinesAllowed { get; set; }
	}
	
	public enum FlakyDetectionFlakyDetectionType
	{
		
		custom = 0,
		
		system = 1,
	}
	
	public class FlakySettings
	{
		
		public FlakyDetection FlakyDetection { get; set; }
		
		/// <summary>
		/// FlakyInSummaryReport defines flaky data should show in summary report or not.
		/// </summary>
		public System.Nullable<System.Boolean> FlakyInSummaryReport { get; set; }
		
		/// <summary>
		/// IsFlakyBugCreated defines if there is any bug that has been created with flaky testresult.
		/// </summary>
		public System.Nullable<System.Boolean> IsFlakyBugCreated { get; set; }
		
		/// <summary>
		/// ManualMarkUnmarkFlaky defines manual marking unmarking of flaky testcase.
		/// </summary>
		public System.Nullable<System.Boolean> ManualMarkUnmarkFlaky { get; set; }
	}
	
	public class GraphSubjectBase
	{
		
		public ReferenceLinks _links { get; set; }
		
		public string Descriptor { get; set; }
		
		public string DisplayName { get; set; }
		
		public string Url { get; set; }
	}
	
	public class ReferenceLinks
	{
		
		public System.Collections.Generic.Dictionary<string, object> Links { get; set; }
	}
	
	public class IdentityRef
	{
		
		public string DirectoryAlias { get; set; }
		
		public string Id { get; set; }
		
		public string ImageUrl { get; set; }
		
		public System.Nullable<System.Boolean> Inactive { get; set; }
		
		public System.Nullable<System.Boolean> IsAadIdentity { get; set; }
		
		public System.Nullable<System.Boolean> IsContainer { get; set; }
		
		public System.Nullable<System.Boolean> IsDeletedInOrigin { get; set; }
		
		public string ProfileUrl { get; set; }
		
		public string UniqueName { get; set; }
	}
	
	public class NewTestResultLoggingSettings
	{
		
		/// <summary>
		/// LogNewTests defines whether or not we will record new test cases coming into the system
		/// </summary>
		public System.Nullable<System.Boolean> LogNewTests { get; set; }
	}
	
	/// <summary>
	/// Test summary of a pipeline instance.
	/// </summary>
	public class PipelineTestMetrics
	{
		
		/// <summary>
		/// Pipeline reference
		/// </summary>
		public PipelineReference CurrentContext { get; set; }
		
		/// <summary>
		/// Results insights for runs with state completed and NeedInvestigation.
		/// </summary>
		public ResultsAnalysis ResultsAnalysis { get; set; }
		
		/// <summary>
		/// Summary of results for a pipeline instance.
		/// </summary>
		public ResultSummary ResultSummary { get; set; }
		
		/// <summary>
		/// Summary of runs for a pipeline instance.
		/// </summary>
		public RunSummary RunSummary { get; set; }
		
		/// <summary>
		/// Summary at child node.
		/// </summary>
		public PipelineTestMetrics[] SummaryAtChild { get; set; }
	}
	
	/// <summary>
	/// Results insights for runs with state completed and NeedInvestigation.
	/// </summary>
	public class ResultsAnalysis
	{
		
		/// <summary>
		/// Pipeline reference
		/// </summary>
		public PipelineReference PreviousContext { get; set; }
		
		public AggregatedResultsDifference ResultsDifference { get; set; }
		
		public TestResultFailuresAnalysis TestFailuresAnalysis { get; set; }
	}
	
	public class TestResultFailuresAnalysis
	{
		
		public TestFailureDetails ExistingFailures { get; set; }
		
		public TestFailureDetails FixedTests { get; set; }
		
		public TestFailureDetails NewFailures { get; set; }
	}
	
	public class TestFailureDetails
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
		
		public TestCaseResultIdentifier[] TestResults { get; set; }
	}
	
	/// <summary>
	/// Reference to a test result.
	/// </summary>
	public class TestCaseResultIdentifier
	{
		
		/// <summary>
		/// Test result ID.
		/// </summary>
		public System.Nullable<System.Int32> TestResultId { get; set; }
		
		/// <summary>
		/// Test run ID.
		/// </summary>
		public System.Nullable<System.Int32> TestRunId { get; set; }
	}
	
	/// <summary>
	/// Summary of results for a pipeline instance.
	/// </summary>
	public class ResultSummary
	{
		
		/// <summary>
		/// Result summary of pipeline, group by TestRun state.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, ResultsSummaryByOutcome> ResultSummaryByRunState { get; set; }
	}
	
	/// <summary>
	/// Result summary by the outcome of test results.
	/// </summary>
	public class ResultsSummaryByOutcome
	{
		
		/// <summary>
		/// Aggregated result details for each test result outcome.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, AggregatedResultDetailsByOutcome> AggregatedResultDetailsByOutcome { get; set; }
		
		/// <summary>
		/// Time taken by results.
		/// </summary>
		public string Duration { get; set; }
		
		/// <summary>
		/// Total number of not reported test results.
		/// </summary>
		public System.Nullable<System.Int32> NotReportedTestCount { get; set; }
		
		/// <summary>
		/// Total number of test results. (It includes NotImpacted test results as well which need to exclude while calculating pass/fail test result percentage).
		/// </summary>
		public System.Nullable<System.Int32> TotalTestCount { get; set; }
	}
	
	/// <summary>
	/// Summary of runs for a pipeline instance.
	/// </summary>
	public class RunSummary
	{
		
		/// <summary>
		/// Total time taken by runs with state completed and NeedInvestigation.
		/// </summary>
		public string Duration { get; set; }
		
		/// <summary>
		/// NoConfig runs count.
		/// </summary>
		public System.Nullable<System.Int32> NoConfigRunsCount { get; set; }
		
		/// <summary>
		/// Runs count by outcome for runs with state completed and NeedInvestigation runs.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, int> RunSummaryByOutcome { get; set; }
		
		/// <summary>
		/// Runs count by state.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, int> RunSummaryByState { get; set; }
		
		/// <summary>
		/// Total runs count.
		/// </summary>
		public System.Nullable<System.Int32> TotalRunsCount { get; set; }
	}
	
	public class QueryModel
	{
		
		public string Query { get; set; }
	}
	
	public class ResultsFilter
	{
		
		public string AutomatedTestName { get; set; }
		
		public string Branch { get; set; }
		
		public System.Nullable<ResultsFilterExecutedIn> ExecutedIn { get; set; }
		
		public string GroupBy { get; set; }
		
		public System.Nullable<System.DateTimeOffset> MaxCompleteDate { get; set; }
		
		public System.Nullable<System.Int32> ResultsCount { get; set; }
		
		public System.Nullable<System.Int32> TestCaseId { get; set; }
		
		public int[] TestCaseReferenceIds { get; set; }
		
		public System.Nullable<System.Int32> TestPlanId { get; set; }
		
		public int[] TestPointIds { get; set; }
		
		public TestResultsContext TestResultsContext { get; set; }
		
		public System.Nullable<System.Int32> TrendDays { get; set; }
	}
	
	public enum ResultsFilterExecutedIn
	{
		
		any = 0,
		
		tcm = 1,
		
		tfs = 2,
	}
	
	/// <summary>
	/// Test run create details.
	/// </summary>
	public class RunCreateModel
	{
		
		/// <summary>
		/// true if test run is automated, false otherwise. By default it will be false.
		/// </summary>
		public System.Nullable<System.Boolean> Automated { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Build { get; set; }
		
		/// <summary>
		/// Drop location of the build used for test run.
		/// </summary>
		public string BuildDropLocation { get; set; }
		
		/// <summary>
		/// Flavor of the build used for test run. (E.g: Release, Debug)
		/// </summary>
		public string BuildFlavor { get; set; }
		
		/// <summary>
		/// Platform of the build used for test run. (E.g.: x86, amd64)
		/// </summary>
		public string BuildPlatform { get; set; }
		
		/// <summary>
		/// BuildConfiguration Details.
		/// </summary>
		public BuildConfiguration BuildReference { get; set; }
		
		/// <summary>
		/// Comments entered by those analyzing the run.
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Completed date time of the run.
		/// </summary>
		public string CompleteDate { get; set; }
		
		/// <summary>
		/// IDs of the test configurations associated with the run.
		/// </summary>
		public int[] ConfigurationIds { get; set; }
		
		/// <summary>
		/// Name of the test controller used for automated run.
		/// </summary>
		public string Controller { get; set; }
		
		/// <summary>
		/// Additional properties of test Run.
		/// </summary>
		public CustomTestField[] CustomTestFields { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference DtlAutEnvironment { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference DtlTestEnvironment { get; set; }
		
		/// <summary>
		/// Due date and time for test run.
		/// </summary>
		public string DueDate { get; set; }
		
		/// <summary>
		/// This is a temporary class to provide the details for the test run environment.
		/// </summary>
		public DtlEnvironmentDetails EnvironmentDetails { get; set; }
		
		/// <summary>
		/// Error message associated with the run.
		/// </summary>
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// This class is used to provide the filters used for discovery
		/// </summary>
		public RunFilter Filter { get; set; }
		
		/// <summary>
		/// The iteration in which to create the run. Root iteration of the team project will be default
		/// </summary>
		public string Iteration { get; set; }
		
		/// <summary>
		/// Name of the test run.
		/// </summary>
		public string Name { get; set; }
		
		public IdentityRef Owner { get; set; }
		
		/// <summary>
		/// Pipeline reference
		/// </summary>
		public PipelineReference PipelineReference { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Plan { get; set; }
		
		/// <summary>
		/// IDs of the test points to use in the run.
		/// </summary>
		public int[] PointIds { get; set; }
		
		/// <summary>
		/// URI of release environment associated with the run.
		/// </summary>
		public string ReleaseEnvironmentUri { get; set; }
		
		/// <summary>
		/// Reference to a release.
		/// </summary>
		public ReleaseReference ReleaseReference { get; set; }
		
		/// <summary>
		/// URI of release associated with the run.
		/// </summary>
		public string ReleaseUri { get; set; }
		
		/// <summary>
		/// Run summary for run Type = NoConfigRun.
		/// </summary>
		public RunSummaryModel[] RunSummary { get; set; }
		
		/// <summary>
		/// Timespan till the run times out.
		/// </summary>
		public string RunTimeout { get; set; }
		
		/// <summary>
		/// SourceWorkFlow(CI/CD) of the test run.
		/// </summary>
		public string SourceWorkflow { get; set; }
		
		/// <summary>
		/// Start date time of the run.
		/// </summary>
		public string StartDate { get; set; }
		
		/// <summary>
		/// The state of the run. Type TestRunState Valid states - Unspecified ,NotStarted, InProgress, Completed, Waiting, Aborted, NeedsInvestigation
		/// </summary>
		public string State { get; set; }
		
		/// <summary>
		/// Tags to attach with the test run, maximum of 5 tags can be added to run.
		/// </summary>
		public TestTag[] Tags { get; set; }
		
		/// <summary>
		/// TestConfigurationMapping of the test run.
		/// </summary>
		public string TestConfigurationsMapping { get; set; }
		
		/// <summary>
		/// ID of the test environment associated with the run.
		/// </summary>
		public string TestEnvironmentId { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestSettings { get; set; }
		
		/// <summary>
		/// Type of the run(RunType) Valid Values : (Unspecified, Normal, Blocking, Web, MtrRunInitiatedFromWeb, RunWithDtlEnv, NoConfigRun)
		/// </summary>
		public string Type { get; set; }
	}
	
	/// <summary>
	/// This class is used to provide the filters used for discovery
	/// </summary>
	public class RunFilter
	{
		
		/// <summary>
		/// filter for the test case sources (test containers)
		/// </summary>
		public string SourceFilter { get; set; }
		
		/// <summary>
		/// filter for the test cases
		/// </summary>
		public string TestCaseFilter { get; set; }
	}
	
	/// <summary>
	/// Run summary for each output type of test.
	/// </summary>
	public class RunSummaryModel
	{
		
		/// <summary>
		/// Total time taken in milliseconds.
		/// </summary>
		public System.Nullable<System.Int64> Duration { get; set; }
		
		/// <summary>
		/// Number of results for Outcome TestOutcome
		/// </summary>
		public System.Nullable<System.Int32> ResultCount { get; set; }
		
		/// <summary>
		/// Summary is based on outcome
		/// </summary>
		public System.Nullable<RunSummaryModelTestOutcome> TestOutcome { get; set; }
	}
	
	public enum RunSummaryModelTestOutcome
	{
		
		unspecified = 0,
		
		none = 1,
		
		passed = 2,
		
		failed = 3,
		
		inconclusive = 4,
		
		timeout = 5,
		
		aborted = 6,
		
		blocked = 7,
		
		notExecuted = 8,
		
		warning = 9,
		
		error = 10,
		
		notApplicable = 11,
		
		paused = 12,
		
		inProgress = 13,
		
		notImpacted = 14,
	}
	
	/// <summary>
	/// Tag attached to a run or result.
	/// </summary>
	public class TestTag
	{
		
		/// <summary>
		/// Name of the tag, alphanumeric value less than 30 chars
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Test run statistics per outcome.
	/// </summary>
	public class RunStatistic
	{
		
		/// <summary>
		/// Test result count fo the given outcome.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Test result outcome
		/// </summary>
		public string Outcome { get; set; }
		
		/// <summary>
		/// Test Resolution State Details.
		/// </summary>
		public TestResolutionState ResolutionState { get; set; }
		
		/// <summary>
		/// ResultMetadata for the given outcome/count.
		/// </summary>
		public System.Nullable<RunStatisticResultMetadata> ResultMetadata { get; set; }
		
		/// <summary>
		/// State of the test run
		/// </summary>
		public string State { get; set; }
	}
	
	/// <summary>
	/// Test Resolution State Details.
	/// </summary>
	public class TestResolutionState
	{
		
		/// <summary>
		/// Test Resolution state Id.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Test Resolution State Name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Project { get; set; }
	}
	
	public enum RunStatisticResultMetadata
	{
		
		rerun = 0,
		
		flaky = 1,
	}
	
	public class RunUpdateModel
	{
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Build { get; set; }
		
		/// <summary>
		/// Drop location of the build used for test run.
		/// </summary>
		public string BuildDropLocation { get; set; }
		
		/// <summary>
		/// Flavor of the build used for test run. (E.g: Release, Debug)
		/// </summary>
		public string BuildFlavor { get; set; }
		
		/// <summary>
		/// Platform of the build used for test run. (E.g.: x86, amd64)
		/// </summary>
		public string BuildPlatform { get; set; }
		
		/// <summary>
		/// Comments entered by those analyzing the run.
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Completed date time of the run.
		/// </summary>
		public string CompletedDate { get; set; }
		
		/// <summary>
		/// Name of the test controller used for automated run.
		/// </summary>
		public string Controller { get; set; }
		
		/// <summary>
		/// true to delete inProgess Results , false otherwise.
		/// </summary>
		public System.Nullable<System.Boolean> DeleteInProgressResults { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference DtlAutEnvironment { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference DtlEnvironment { get; set; }
		
		/// <summary>
		/// This is a temporary class to provide the details for the test run environment.
		/// </summary>
		public DtlEnvironmentDetails DtlEnvironmentDetails { get; set; }
		
		/// <summary>
		/// Due date and time for test run.
		/// </summary>
		public string DueDate { get; set; }
		
		/// <summary>
		/// Error message associated with the run.
		/// </summary>
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// The iteration in which to create the run.
		/// </summary>
		public string Iteration { get; set; }
		
		/// <summary>
		/// Log entries associated with the run. Use a comma-separated list of multiple log entry objects. { logEntry }, { logEntry }, ...
		/// </summary>
		public TestMessageLogDetails[] LogEntries { get; set; }
		
		/// <summary>
		/// Name of the test run.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// URI of release environment associated with the run.
		/// </summary>
		public string ReleaseEnvironmentUri { get; set; }
		
		/// <summary>
		/// URI of release associated with the run.
		/// </summary>
		public string ReleaseUri { get; set; }
		
		/// <summary>
		/// Run summary for run Type = NoConfigRun.
		/// </summary>
		public RunSummaryModel[] RunSummary { get; set; }
		
		/// <summary>
		/// SourceWorkFlow(CI/CD) of the test run.
		/// </summary>
		public string SourceWorkflow { get; set; }
		
		/// <summary>
		/// Start date time of the run.
		/// </summary>
		public string StartedDate { get; set; }
		
		/// <summary>
		/// The state of the test run Below are the valid values - NotStarted, InProgress, Completed, Aborted, Waiting
		/// </summary>
		public string State { get; set; }
		
		/// <summary>
		/// The types of sub states for test run.
		/// </summary>
		public System.Nullable<RunUpdateModelSubstate> Substate { get; set; }
		
		/// <summary>
		/// Tags to attach with the test run.
		/// </summary>
		public TestTag[] Tags { get; set; }
		
		/// <summary>
		/// ID of the test environment associated with the run.
		/// </summary>
		public string TestEnvironmentId { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestSettings { get; set; }
	}
	
	/// <summary>
	/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
	/// </summary>
	public class TestMessageLogDetails
	{
		
		/// <summary>
		/// Date when the resource is created
		/// </summary>
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		/// <summary>
		/// Id of the resource
		/// </summary>
		public System.Nullable<System.Int32> EntryId { get; set; }
		
		/// <summary>
		/// Message of the resource
		/// </summary>
		public string Message { get; set; }
	}
	
	public enum RunUpdateModelSubstate
	{
		
		none = 0,
		
		creatingEnvironment = 1,
		
		runningTests = 2,
		
		canceledByUser = 3,
		
		abortedBySystem = 4,
		
		timedOut = 5,
		
		pendingAnalysis = 6,
		
		analyzed = 7,
		
		cancellationInProgress = 8,
	}
	
	public class ShallowTestCaseResult
	{
		
		public string AutomatedTestName { get; set; }
		
		public string AutomatedTestStorage { get; set; }
		
		public System.Nullable<System.Double> DurationInMs { get; set; }
		
		public System.Nullable<System.Int32> Id { get; set; }
		
		public System.Nullable<System.Boolean> IsReRun { get; set; }
		
		public string Outcome { get; set; }
		
		public string Owner { get; set; }
		
		public System.Nullable<System.Int32> Priority { get; set; }
		
		public System.Nullable<System.Int32> RefId { get; set; }
		
		public System.Nullable<System.Int32> RunId { get; set; }
		
		public string[] Tags { get; set; }
		
		public string TestCaseTitle { get; set; }
	}
	
	/// <summary>
	/// Reference to shared step workitem.
	/// </summary>
	public class SharedStepModel
	{
		
		/// <summary>
		/// WorkItem shared step ID.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Shared step workitem revision.
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
	}
	
	public class TeamProjectReference
	{
		
		public string Abbreviation { get; set; }
		
		public string DefaultTeamImageUrl { get; set; }
		
		public string Description { get; set; }
		
		public string Id { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
		
		public string Name { get; set; }
		
		public System.Nullable<System.Int64> Revision { get; set; }
		
		public System.Nullable<TeamProjectReferenceState> State { get; set; }
		
		public string Url { get; set; }
		
		public System.Nullable<TeamProjectReferenceVisibility> Visibility { get; set; }
	}
	
	public enum TeamProjectReferenceState
	{
		
		deleting = 0,
		
		_new = 1,
		
		wellFormed = 2,
		
		createPending = 3,
		
		all = 4,
		
		unchanged = 5,
		
		deleted = 6,
	}
	
	public enum TeamProjectReferenceVisibility
	{
		
		_private = 0,
		
		_public = 1,
	}
	
	/// <summary>
	/// Represents a test step result.
	/// </summary>
	public class TestActionResultModel
	{
		
		/// <summary>
		/// Path identifier test step in test case workitem.
		/// </summary>
		public string ActionPath { get; set; }
		
		/// <summary>
		/// Iteration ID of test action result.
		/// </summary>
		public System.Nullable<System.Int32> IterationId { get; set; }
		
		/// <summary>
		/// Reference to shared step workitem.
		/// </summary>
		public SharedStepModel SharedStepModel { get; set; }
		
		/// <summary>
		/// This is step Id of test case. For shared step, it is step Id of shared step in test case workitem; step Id in shared step. Example: TestCase workitem has two steps: 1) Normal step with Id = 1 2) Shared Step with Id = 2. Inside shared step: a) Normal Step with Id = 1 Value for StepIdentifier for First step: "1" Second step: "2;1"
		/// </summary>
		public string StepIdentifier { get; set; }
		
		/// <summary>
		/// Url of test action result.
		/// </summary>
		public string Url { get; set; }
	}
	
	public class TestAttachment
	{
		
		/// <summary>
		/// Attachment type.
		/// </summary>
		public System.Nullable<TestAttachmentAttachmentType> AttachmentType { get; set; }
		
		/// <summary>
		/// Comment associated with attachment.
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Attachment created date.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Attachment file name
		/// </summary>
		public string FileName { get; set; }
		
		/// <summary>
		/// ID of the attachment.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Attachment size.
		/// </summary>
		public System.Nullable<System.Int64> Size { get; set; }
		
		/// <summary>
		/// Attachment Url.
		/// </summary>
		public string Url { get; set; }
	}
	
	public enum TestAttachmentAttachmentType
	{
		
		generalAttachment = 0,
		
		codeCoverage = 1,
		
		consoleLog = 2,
	}
	
	/// <summary>
	/// Reference to test attachment.
	/// </summary>
	public class TestAttachmentReference
	{
		
		/// <summary>
		/// ID of the attachment.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Url to download the attachment.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Test attachment request model
	/// </summary>
	public class TestAttachmentRequestModel
	{
		
		/// <summary>
		/// Attachment type By Default it will be GeneralAttachment. It can be one of the following type. { GeneralAttachment, AfnStrip, BugFilingData, CodeCoverage, IntermediateCollectorData, RunConfig, TestImpactDetails, TmiTestRunDeploymentFiles, TmiTestRunReverseDeploymentFiles, TmiTestResultDetail, TmiTestRunSummary }
		/// </summary>
		public string AttachmentType { get; set; }
		
		/// <summary>
		/// Comment associated with attachment
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Attachment filename
		/// </summary>
		public string FileName { get; set; }
		
		/// <summary>
		/// Base64 encoded file stream
		/// </summary>
		public string Stream { get; set; }
	}
	
	/// <summary>
	/// Represents a test result.
	/// </summary>
	public class TestCaseResult
	{
		
		/// <summary>
		/// Test attachment ID of action recording.
		/// </summary>
		public System.Nullable<System.Int32> AfnStripId { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Area { get; set; }
		
		/// <summary>
		/// Reference to bugs linked to test result.
		/// </summary>
		public ShallowReference[] AssociatedBugs { get; set; }
		
		/// <summary>
		/// ID representing test method in a dll.
		/// </summary>
		public string AutomatedTestId { get; set; }
		
		/// <summary>
		/// Fully qualified name of test executed.
		/// </summary>
		public string AutomatedTestName { get; set; }
		
		/// <summary>
		/// Container to which test belongs.
		/// </summary>
		public string AutomatedTestStorage { get; set; }
		
		/// <summary>
		/// Type of automated test.
		/// </summary>
		public string AutomatedTestType { get; set; }
		
		/// <summary>
		/// TypeId of automated test.
		/// </summary>
		public string AutomatedTestTypeId { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Build { get; set; }
		
		/// <summary>
		/// Reference to a build.
		/// </summary>
		public BuildReference BuildReference { get; set; }
		
		/// <summary>
		/// Comment in a test result with maxSize= 1000 chars.
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Time when test execution completed. Completed date should be greater than StartedDate.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CompletedDate { get; set; }
		
		/// <summary>
		/// Machine name where test executed.
		/// </summary>
		public string ComputerName { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Configuration { get; set; }
		
		/// <summary>
		/// Timestamp when test result created.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Additional properties of test result.
		/// </summary>
		public CustomTestField[] CustomFields { get; set; }
		
		/// <summary>
		/// Duration of test execution in milliseconds. If not provided value will be set as CompletedDate - StartedDate
		/// </summary>
		public System.Nullable<System.Double> DurationInMs { get; set; }
		
		/// <summary>
		/// Error message in test execution.
		/// </summary>
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Failing since information of a test result.
		/// </summary>
		public FailingSince FailingSince { get; set; }
		
		/// <summary>
		/// Failure type of test result. Valid Value= (Known Issue, New Issue, Regression, Unknown, None)
		/// </summary>
		public string FailureType { get; set; }
		
		/// <summary>
		/// ID of a test result.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Test result details of test iterations used only for Manual Testing.
		/// </summary>
		public TestIterationDetailsModel[] IterationDetails { get; set; }
		
		public IdentityRef LastUpdatedBy { get; set; }
		
		/// <summary>
		/// Last updated datetime of test result.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastUpdatedDate { get; set; }
		
		/// <summary>
		/// Test outcome of test result. Valid values = (Unspecified, None, Passed, Failed, Inconclusive, Timeout, Aborted, Blocked, NotExecuted, Warning, Error, NotApplicable, Paused, InProgress, NotImpacted)
		/// </summary>
		public string Outcome { get; set; }
		
		public IdentityRef Owner { get; set; }
		
		/// <summary>
		/// Priority of test executed.
		/// </summary>
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Project { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Release { get; set; }
		
		/// <summary>
		/// Reference to a release.
		/// </summary>
		public ReleaseReference ReleaseReference { get; set; }
		
		/// <summary>
		/// ResetCount.
		/// </summary>
		public System.Nullable<System.Int32> ResetCount { get; set; }
		
		/// <summary>
		/// Resolution state of test result.
		/// </summary>
		public string ResolutionState { get; set; }
		
		/// <summary>
		/// ID of resolution state.
		/// </summary>
		public System.Nullable<System.Int32> ResolutionStateId { get; set; }
		
		/// <summary>
		/// Hierarchy type of the result, default value of None means its leaf node.
		/// </summary>
		public System.Nullable<TestCaseResultResultGroupType> ResultGroupType { get; set; }
		
		/// <summary>
		/// Revision number of test result.
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
		
		public IdentityRef RunBy { get; set; }
		
		/// <summary>
		/// Stacktrace with maxSize= 1000 chars.
		/// </summary>
		public string StackTrace { get; set; }
		
		/// <summary>
		/// Time when test execution started.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartedDate { get; set; }
		
		/// <summary>
		/// State of test result. Type TestRunState.
		/// </summary>
		public string State { get; set; }
		
		/// <summary>
		/// List of sub results inside a test result, if ResultGroupType is not None, it holds corresponding type sub results.
		/// </summary>
		public TestSubResult[] SubResults { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestCase { get; set; }
		
		/// <summary>
		/// Reference ID of test used by test result. Type TestResultMetaData
		/// </summary>
		public System.Nullable<System.Int32> TestCaseReferenceId { get; set; }
		
		/// <summary>
		/// TestCaseRevision Number.
		/// </summary>
		public System.Nullable<System.Int32> TestCaseRevision { get; set; }
		
		/// <summary>
		/// Name of test.
		/// </summary>
		public string TestCaseTitle { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestPlan { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestPoint { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestRun { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestSuite { get; set; }
		
		/// <summary>
		/// Url of test result.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Represents a test iteration result.
	/// </summary>
	public class TestIterationDetailsModel
	{
		
		/// <summary>
		/// Test step results in an iteration.
		/// </summary>
		public TestActionResultModel[] ActionResults { get; set; }
		
		/// <summary>
		/// Reference to attachments in test iteration result.
		/// </summary>
		public TestCaseResultAttachmentModel[] Attachments { get; set; }
		
		/// <summary>
		/// Comment in test iteration result.
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Time when execution completed.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CompletedDate { get; set; }
		
		/// <summary>
		/// Duration of execution.
		/// </summary>
		public System.Nullable<System.Double> DurationInMs { get; set; }
		
		/// <summary>
		/// Error message in test iteration result execution.
		/// </summary>
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// ID of test iteration result.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Test outcome if test iteration result.
		/// </summary>
		public string Outcome { get; set; }
		
		/// <summary>
		/// Test parameters in an iteration.
		/// </summary>
		public TestResultParameterModel[] Parameters { get; set; }
		
		/// <summary>
		/// Time when execution started.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartedDate { get; set; }
		
		/// <summary>
		/// Url to test iteration result.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Test attachment information in a test iteration.
	/// </summary>
	public class TestCaseResultAttachmentModel
	{
		
		/// <summary>
		/// Path identifier test step in test case workitem.
		/// </summary>
		public string ActionPath { get; set; }
		
		/// <summary>
		/// Attachment ID.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Iteration ID.
		/// </summary>
		public System.Nullable<System.Int32> IterationId { get; set; }
		
		/// <summary>
		/// Name of attachment.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Attachment size.
		/// </summary>
		public System.Nullable<System.Int64> Size { get; set; }
		
		/// <summary>
		/// Url to attachment.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Test parameter information in a test iteration.
	/// </summary>
	public class TestResultParameterModel
	{
		
		/// <summary>
		/// Test step path where parameter is referenced.
		/// </summary>
		public string ActionPath { get; set; }
		
		/// <summary>
		/// Iteration ID.
		/// </summary>
		public System.Nullable<System.Int32> IterationId { get; set; }
		
		/// <summary>
		/// Name of parameter.
		/// </summary>
		public string ParameterName { get; set; }
		
		/// <summary>
		/// This is step Id of test case. For shared step, it is step Id of shared step in test case workitem; step Id in shared step. Example: TestCase workitem has two steps: 1) Normal step with Id = 1 2) Shared Step with Id = 2. Inside shared step: a) Normal Step with Id = 1 Value for StepIdentifier for First step: "1" Second step: "2;1"
		/// </summary>
		public string StepIdentifier { get; set; }
		
		/// <summary>
		/// Url of test parameter.
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// Value of parameter.
		/// </summary>
		public string Value { get; set; }
	}
	
	public enum TestCaseResultResultGroupType
	{
		
		none = 0,
		
		rerun = 1,
		
		dataDriven = 2,
		
		orderedTest = 3,
		
		generic = 4,
	}
	
	/// <summary>
	/// Represents a sub result of a test result.
	/// </summary>
	public class TestSubResult
	{
		
		/// <summary>
		/// Comment in sub result.
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Time when test execution completed.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CompletedDate { get; set; }
		
		/// <summary>
		/// Machine where test executed.
		/// </summary>
		public string ComputerName { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Configuration { get; set; }
		
		/// <summary>
		/// Additional properties of sub result.
		/// </summary>
		public CustomTestField[] CustomFields { get; set; }
		
		/// <summary>
		/// Name of sub result.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Duration of test execution.
		/// </summary>
		public System.Nullable<System.Int64> DurationInMs { get; set; }
		
		/// <summary>
		/// Error message in sub result.
		/// </summary>
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// ID of sub result.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Time when result last updated.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastUpdatedDate { get; set; }
		
		/// <summary>
		/// Outcome of sub result.
		/// </summary>
		public string Outcome { get; set; }
		
		/// <summary>
		/// Immediate parent ID of sub result.
		/// </summary>
		public System.Nullable<System.Int32> ParentId { get; set; }
		
		/// <summary>
		/// Hierarchy type of the result, default value of None means its leaf node.
		/// </summary>
		public System.Nullable<TestSubResultResultGroupType> ResultGroupType { get; set; }
		
		/// <summary>
		/// Index number of sub result.
		/// </summary>
		public System.Nullable<System.Int32> SequenceId { get; set; }
		
		/// <summary>
		/// Stacktrace.
		/// </summary>
		public string StackTrace { get; set; }
		
		/// <summary>
		/// Time when test execution started.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartedDate { get; set; }
		
		/// <summary>
		/// List of sub results inside a sub result, if ResultGroupType is not None, it holds corresponding type sub results.
		/// </summary>
		public TestSubResult[] SubResults { get; set; }
		
		/// <summary>
		/// Reference to a test result.
		/// </summary>
		public TestCaseResultIdentifier TestResult { get; set; }
		
		/// <summary>
		/// Url of sub result.
		/// </summary>
		public string Url { get; set; }
	}
	
	public enum TestSubResultResultGroupType
	{
		
		none = 0,
		
		rerun = 1,
		
		dataDriven = 2,
		
		orderedTest = 3,
		
		generic = 4,
	}
	
	/// <summary>
	/// Test environment Detail.
	/// </summary>
	public class TestEnvironment
	{
		
		/// <summary>
		/// Test Environment Id.
		/// </summary>
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// Test Environment Name.
		/// </summary>
		public string EnvironmentName { get; set; }
	}
	
	public class TestFailuresAnalysis
	{
		
		public TestFailureDetails ExistingFailures { get; set; }
		
		public TestFailureDetails FixedTests { get; set; }
		
		public TestFailureDetails NewFailures { get; set; }
		
		public TestResultsContext PreviousContext { get; set; }
	}
	
	/// <summary>
	/// Test Flaky Identifier
	/// </summary>
	public class TestFlakyIdentifier
	{
		
		/// <summary>
		/// Branch Name where Flakiness has to be Marked/Unmarked
		/// </summary>
		public string BranchName { get; set; }
		
		/// <summary>
		/// State for Flakiness
		/// </summary>
		public System.Nullable<System.Boolean> IsFlaky { get; set; }
	}
	
	/// <summary>
	/// Filter to get TestCase result history.
	/// </summary>
	public class TestHistoryQuery
	{
		
		/// <summary>
		/// Automated test name of the TestCase.
		/// </summary>
		public string AutomatedTestName { get; set; }
		
		/// <summary>
		/// Results to be get for a particular branches.
		/// </summary>
		public string Branch { get; set; }
		
		/// <summary>
		/// Get the results history only for this BuildDefinitionId. This to get used in query GroupBy should be Branch. If this is provided, Branch will have no use.
		/// </summary>
		public System.Nullable<System.Int32> BuildDefinitionId { get; set; }
		
		/// <summary>
		/// It will be filled by server. If not null means there are some results still to be get, and we need to call this REST API with this ContinuousToken. It is not supposed to be created (or altered, if received from server in last batch) by user.
		/// </summary>
		public string ContinuationToken { get; set; }
		
		/// <summary>
		/// Group the result on the basis of TestResultGroupBy. This can be Branch, Environment or null(if results are fetched by BuildDefinitionId)
		/// </summary>
		public System.Nullable<TestHistoryQueryGroupBy> GroupBy { get; set; }
		
		/// <summary>
		/// History to get between time interval MaxCompleteDate and  (MaxCompleteDate - TrendDays). Default is current date time.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> MaxCompleteDate { get; set; }
		
		/// <summary>
		/// Get the results history only for this ReleaseEnvDefinitionId. This to get used in query GroupBy should be Environment.
		/// </summary>
		public System.Nullable<System.Int32> ReleaseEnvDefinitionId { get; set; }
		
		/// <summary>
		/// List of TestResultHistoryForGroup which are grouped by GroupBy
		/// </summary>
		public TestResultHistoryForGroup[] ResultsForGroup { get; set; }
		
		/// <summary>
		/// Get the results history only for this testCaseId. This to get used in query to filter the result along with automatedtestname
		/// </summary>
		public System.Nullable<System.Int32> TestCaseId { get; set; }
		
		/// <summary>
		/// Number of days for which history to collect. Maximum supported value is 7 days. Default is 7 days.
		/// </summary>
		public System.Nullable<System.Int32> TrendDays { get; set; }
	}
	
	public enum TestHistoryQueryGroupBy
	{
		
		branch = 0,
		
		environment = 1,
	}
	
	/// <summary>
	/// List of test results filtered on the basis of GroupByValue
	/// </summary>
	public class TestResultHistoryForGroup
	{
		
		/// <summary>
		/// Display name of the group.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Name or Id of the group identifier by which results are grouped together.
		/// </summary>
		public string GroupByValue { get; set; }
		
		/// <summary>
		/// List of results for GroupByValue
		/// </summary>
		public TestCaseResult[] Results { get; set; }
	}
	
	/// <summary>
	/// Represents Test Log Result object.
	/// </summary>
	public class TestLog
	{
		
		/// <summary>
		/// Test Log Reference object
		/// </summary>
		public TestLogReference LogReference { get; set; }
		
		/// <summary>
		/// Meta data for Log file
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> MetaData { get; set; }
		
		/// <summary>
		/// LastUpdatedDate for Log file
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ModifiedOn { get; set; }
		
		/// <summary>
		/// Size in Bytes for Log file
		/// </summary>
		public System.Nullable<System.Int64> Size { get; set; }
	}
	
	/// <summary>
	/// Test Log Reference object
	/// </summary>
	public class TestLogReference
	{
		
		/// <summary>
		/// BuildId for test log, if context is build
		/// </summary>
		public System.Nullable<System.Int32> BuildId { get; set; }
		
		/// <summary>
		/// FileName for log file
		/// </summary>
		public string FilePath { get; set; }
		
		/// <summary>
		/// ReleaseEnvId for test log, if context is Release
		/// </summary>
		public System.Nullable<System.Int32> ReleaseEnvId { get; set; }
		
		/// <summary>
		/// ReleaseId for test log, if context is Release
		/// </summary>
		public System.Nullable<System.Int32> ReleaseId { get; set; }
		
		/// <summary>
		/// Resultid for test log, if context is run and log is related to result
		/// </summary>
		public System.Nullable<System.Int32> ResultId { get; set; }
		
		/// <summary>
		/// runid for test log, if context is run
		/// </summary>
		public System.Nullable<System.Int32> RunId { get; set; }
		
		/// <summary>
		/// Test Log Scope
		/// </summary>
		public System.Nullable<TestLogReferenceScope> Scope { get; set; }
		
		/// <summary>
		/// SubResultid for test log, if context is run and log is related to subresult
		/// </summary>
		public System.Nullable<System.Int32> SubResultId { get; set; }
		
		/// <summary>
		/// Log Type
		/// </summary>
		public System.Nullable<TestLogReferenceType> Type { get; set; }
	}
	
	public enum TestLogReferenceScope
	{
		
		run = 0,
	}
	
	public enum TestLogReferenceType
	{
		
		generalAttachment = 0,
	}
	
	/// <summary>
	/// Represents Test Log store endpoint details.
	/// </summary>
	public class TestLogStoreEndpointDetails
	{
		
		/// <summary>
		/// Test log store connection Uri.
		/// </summary>
		public string EndpointSASUri { get; set; }
		
		/// <summary>
		/// Test log store endpoint type.
		/// </summary>
		public System.Nullable<TestLogStoreEndpointDetailsEndpointType> EndpointType { get; set; }
		
		/// <summary>
		/// Test log store status code
		/// </summary>
		public System.Nullable<TestLogStoreEndpointDetailsStatus> Status { get; set; }
	}
	
	public enum TestLogStoreEndpointDetailsEndpointType
	{
		
		root = 0,
		
		file = 1,
	}
	
	public enum TestLogStoreEndpointDetailsStatus
	{
		
		success = 0,
		
		failed = 1,
		
		fileAlreadyExists = 2,
		
		invalidInput = 3,
		
		invalidFileName = 4,
		
		invalidContainer = 5,
		
		transferFailed = 6,
		
		featureDisabled = 7,
		
		buildDoesNotExist = 8,
		
		runDoesNotExist = 9,
		
		containerNotCreated = 10,
		
		apiNotSupported = 11,
		
		fileSizeExceeds = 12,
		
		containerNotFound = 13,
		
		fileNotFound = 14,
		
		directoryNotFound = 15,
		
		storageCapacityExceeded = 16,
	}
	
	public class TestMethod
	{
		
		public string Container { get; set; }
		
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Class representing a reference to an operation.
	/// </summary>
	public class TestOperationReference
	{
		
		public string Id { get; set; }
		
		public string Status { get; set; }
		
		public string Url { get; set; }
	}
	
	public class TestResultDocument
	{
		
		/// <summary>
		/// Class representing a reference to an operation.
		/// </summary>
		public TestOperationReference OperationReference { get; set; }
		
		public TestResultPayload Payload { get; set; }
	}
	
	public class TestResultPayload
	{
		
		public string Comment { get; set; }
		
		public string Name { get; set; }
		
		public string Stream { get; set; }
	}
	
	public class TestResultHistory
	{
		
		public string GroupByField { get; set; }
		
		public TestResultHistoryDetailsForGroup[] ResultsForGroup { get; set; }
	}
	
	public class TestResultHistoryDetailsForGroup
	{
		
		public string GroupByValue { get; set; }
		
		/// <summary>
		/// Represents a test result.
		/// </summary>
		public TestCaseResult LatestResult { get; set; }
	}
	
	/// <summary>
	/// Represents a Meta Data of a test result.
	/// </summary>
	public class TestResultMetaData
	{
		
		/// <summary>
		/// AutomatedTestName of test result.
		/// </summary>
		public string AutomatedTestName { get; set; }
		
		/// <summary>
		/// AutomatedTestStorage of test result.
		/// </summary>
		public string AutomatedTestStorage { get; set; }
		
		/// <summary>
		/// List of Flaky Identifier for TestCaseReferenceId
		/// </summary>
		public TestFlakyIdentifier[] FlakyIdentifiers { get; set; }
		
		/// <summary>
		/// Owner of test result.
		/// </summary>
		public string Owner { get; set; }
		
		/// <summary>
		/// Priority of test result.
		/// </summary>
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// ID of TestCaseReference.
		/// </summary>
		public System.Nullable<System.Int32> TestCaseReferenceId { get; set; }
		
		/// <summary>
		/// TestCaseTitle of test result.
		/// </summary>
		public string TestCaseTitle { get; set; }
	}
	
	/// <summary>
	/// Represents a TestResultMetaData Input
	/// </summary>
	public class TestResultMetaDataUpdateInput
	{
		
		/// <summary>
		/// List of Flaky Identifiers
		/// </summary>
		public TestFlakyIdentifier[] FlakyIdentifiers { get; set; }
	}
	
	public class TestResultModelBase
	{
		
		/// <summary>
		/// Comment in result.
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Time when execution completed.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CompletedDate { get; set; }
		
		/// <summary>
		/// Duration of execution.
		/// </summary>
		public System.Nullable<System.Double> DurationInMs { get; set; }
		
		/// <summary>
		/// Error message in result.
		/// </summary>
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Test outcome of result.
		/// </summary>
		public string Outcome { get; set; }
		
		/// <summary>
		/// Time when execution started.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartedDate { get; set; }
	}
	
	public class TestResultsDetails
	{
		
		public string GroupByField { get; set; }
		
		public TestResultsDetailsForGroup[] ResultsForGroup { get; set; }
	}
	
	public class TestResultsDetailsForGroup
	{
		
		public string GroupByValue { get; set; }
		
		public TestCaseResult[] Results { get; set; }
		
		public System.Collections.Generic.Dictionary<string, AggregatedResultsByOutcome> ResultsCountByOutcome { get; set; }
		
		public string[] Tags { get; set; }
	}
	
	public class TestResultsQuery
	{
		
		public string[] Fields { get; set; }
		
		public TestCaseResult[] Results { get; set; }
		
		public ResultsFilter ResultsFilter { get; set; }
	}
	
	public class TestResultsSettings
	{
		
		public FlakySettings FlakySettings { get; set; }
		
		public NewTestResultLoggingSettings NewTestResultLoggingSettings { get; set; }
	}
	
	public class TestResultSummary
	{
		
		public AggregatedResultsAnalysis AggregatedResultsAnalysis { get; set; }
		
		public System.Nullable<System.Int32> NoConfigRunsCount { get; set; }
		
		public TeamProjectReference TeamProject { get; set; }
		
		public TestFailuresAnalysis TestFailures { get; set; }
		
		public TestResultsContext TestResultsContext { get; set; }
		
		public System.Nullable<System.Int32> TotalRunsCount { get; set; }
	}
	
	public class TestResultsUpdateSettings
	{
		
		public FlakySettings FlakySettings { get; set; }
		
		public NewTestResultLoggingSettings NewTestResultLoggingSettings { get; set; }
	}
	
	public class TestResultTrendFilter
	{
		
		public string[] BranchNames { get; set; }
		
		public System.Nullable<System.Int32> BuildCount { get; set; }
		
		public int[] DefinitionIds { get; set; }
		
		public int[] EnvDefinitionIds { get; set; }
		
		public System.Nullable<System.DateTimeOffset> MaxCompleteDate { get; set; }
		
		public string PublishContext { get; set; }
		
		public string[] TestRunTitles { get; set; }
		
		public System.Nullable<System.Int32> TrendDays { get; set; }
	}
	
	/// <summary>
	/// Test run details.
	/// </summary>
	public class TestRun
	{
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Build { get; set; }
		
		/// <summary>
		/// BuildConfiguration Details.
		/// </summary>
		public BuildConfiguration BuildConfiguration { get; set; }
		
		/// <summary>
		/// Comments entered by those analyzing the run.
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Completed date time of the run.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CompletedDate { get; set; }
		
		/// <summary>
		/// Test Run Controller.
		/// </summary>
		public string Controller { get; set; }
		
		/// <summary>
		/// Test Run CreatedDate.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// List of Custom Fields for TestRun.
		/// </summary>
		public CustomTestField[] CustomFields { get; set; }
		
		/// <summary>
		/// Drop Location for the test Run.
		/// </summary>
		public string DropLocation { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference DtlAutEnvironment { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference DtlEnvironment { get; set; }
		
		/// <summary>
		/// This is a temporary class to provide the details for the test run environment.
		/// </summary>
		public DtlEnvironmentDetails DtlEnvironmentCreationDetails { get; set; }
		
		/// <summary>
		/// Due date and time for test run.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> DueDate { get; set; }
		
		/// <summary>
		/// Error message associated with the run.
		/// </summary>
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// This class is used to provide the filters used for discovery
		/// </summary>
		public RunFilter Filter { get; set; }
		
		/// <summary>
		/// ID of the test run.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Number of Incomplete Tests.
		/// </summary>
		public System.Nullable<System.Int32> IncompleteTests { get; set; }
		
		/// <summary>
		/// true if test run is automated, false otherwise.
		/// </summary>
		public System.Nullable<System.Boolean> IsAutomated { get; set; }
		
		/// <summary>
		/// The iteration to which the run belongs.
		/// </summary>
		public string Iteration { get; set; }
		
		public IdentityRef LastUpdatedBy { get; set; }
		
		/// <summary>
		/// Last updated date and time
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastUpdatedDate { get; set; }
		
		/// <summary>
		/// Name of the test run.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Number of Not Applicable Tests.
		/// </summary>
		public System.Nullable<System.Int32> NotApplicableTests { get; set; }
		
		public IdentityRef Owner { get; set; }
		
		/// <summary>
		/// Number of passed tests in the run
		/// </summary>
		public System.Nullable<System.Int32> PassedTests { get; set; }
		
		/// <summary>
		/// Phase/State for the testRun.
		/// </summary>
		public string Phase { get; set; }
		
		/// <summary>
		/// Pipeline reference
		/// </summary>
		public PipelineReference PipelineReference { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Plan { get; set; }
		
		/// <summary>
		/// Post Process State.
		/// </summary>
		public string PostProcessState { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Project { get; set; }
		
		/// <summary>
		/// Reference to a release.
		/// </summary>
		public ReleaseReference Release { get; set; }
		
		/// <summary>
		/// Release Environment Uri for TestRun.
		/// </summary>
		public string ReleaseEnvironmentUri { get; set; }
		
		/// <summary>
		/// Release Uri for TestRun.
		/// </summary>
		public string ReleaseUri { get; set; }
		
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// RunSummary by outcome.
		/// </summary>
		public RunStatistic[] RunStatistics { get; set; }
		
		/// <summary>
		/// Start date time of the run.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartedDate { get; set; }
		
		/// <summary>
		/// The state of the run. Type TestRunState Valid states - Unspecified ,NotStarted, InProgress, Completed, Waiting, Aborted, NeedsInvestigation
		/// </summary>
		public string State { get; set; }
		
		/// <summary>
		/// TestRun Substate.
		/// </summary>
		public System.Nullable<TestRunSubstate> Substate { get; set; }
		
		/// <summary>
		/// Tags attached with this test run.
		/// </summary>
		public TestTag[] Tags { get; set; }
		
		/// <summary>
		/// Test environment Detail.
		/// </summary>
		public TestEnvironment TestEnvironment { get; set; }
		
		public System.Nullable<System.Int32> TestMessageLogId { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestSettings { get; set; }
		
		/// <summary>
		/// Total tests in the run
		/// </summary>
		public System.Nullable<System.Int32> TotalTests { get; set; }
		
		/// <summary>
		/// Number of failed tests in the run.
		/// </summary>
		public System.Nullable<System.Int32> UnanalyzedTests { get; set; }
		
		/// <summary>
		/// Url of the test run
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// Web Access Url for TestRun.
		/// </summary>
		public string WebAccessUrl { get; set; }
	}
	
	public enum TestRunSubstate
	{
		
		none = 0,
		
		creatingEnvironment = 1,
		
		runningTests = 2,
		
		canceledByUser = 3,
		
		abortedBySystem = 4,
		
		timedOut = 5,
		
		pendingAnalysis = 6,
		
		analyzed = 7,
		
		cancellationInProgress = 8,
	}
	
	/// <summary>
	/// Test Run Code Coverage Details
	/// </summary>
	public class TestRunCoverage
	{
		
		/// <summary>
		/// Last Error
		/// </summary>
		public string LastError { get; set; }
		
		/// <summary>
		/// List of Modules Coverage
		/// </summary>
		public ModuleCoverage[] Modules { get; set; }
		
		/// <summary>
		/// State
		/// </summary>
		public string State { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference TestRun { get; set; }
	}
	
	/// <summary>
	/// Test run statistics.
	/// </summary>
	public class TestRunStatistic
	{
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the build data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public ShallowReference Run { get; set; }
		
		public RunStatistic[] RunStatistics { get; set; }
	}
	
	/// <summary>
	/// Represents the test settings of the run. Used to create test settings and fetch test settings
	/// </summary>
	public class TestSettings
	{
		
		/// <summary>
		/// Area path required to create test settings
		/// </summary>
		public string AreaPath { get; set; }
		
		/// <summary>
		/// Description of the test settings. Used in create test settings.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Indicates if the tests settings is public or private.Used in create test settings.
		/// </summary>
		public System.Nullable<System.Boolean> IsPublic { get; set; }
		
		/// <summary>
		/// Xml string of machine roles. Used in create test settings.
		/// </summary>
		public string MachineRoles { get; set; }
		
		/// <summary>
		/// Test settings content.
		/// </summary>
		public string TestSettingsContent { get; set; }
		
		/// <summary>
		/// Test settings id.
		/// </summary>
		public System.Nullable<System.Int32> TestSettingsId { get; set; }
		
		/// <summary>
		/// Test settings name.
		/// </summary>
		public string TestSettingsName { get; set; }
	}
	
	public class TestSummaryForWorkItem
	{
		
		public AggregatedDataForResultTrend Summary { get; set; }
		
		/// <summary>
		/// WorkItem reference Details.
		/// </summary>
		public WorkItemReference WorkItem { get; set; }
	}
	
	/// <summary>
	/// WorkItem reference Details.
	/// </summary>
	public class WorkItemReference
	{
		
		/// <summary>
		/// WorkItem Id.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// WorkItem Name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// WorkItem Type.
		/// </summary>
		public string Type { get; set; }
		
		/// <summary>
		/// WorkItem Url. Valid Values : (Bug, Task, User Story, Test Case)
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// WorkItem WebUrl.
		/// </summary>
		public string WebUrl { get; set; }
	}
	
	/// <summary>
	/// Test tag summary for build or release grouped by test run.
	/// </summary>
	public class TestTagSummary
	{
		
		/// <summary>
		/// Dictionary which contains tags associated with a test run.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, TestTag[]> TagsGroupByTestArtifact { get; set; }
	}
	
	/// <summary>
	/// Tags to update to a run or result.
	/// </summary>
	public class TestTagsUpdateModel
	{
		
		public string[] Tags { get; set; }
	}
	
	public class TestToWorkItemLinks
	{
		
		public TestMethod Test { get; set; }
		
		public WorkItemReference[] WorkItems { get; set; }
	}
	
	/// <summary>
	/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
	/// </summary>
	public class VssJsonCollectionWrapper
	{
		
		public string Value { get; set; }
	}
	
	public class VssJsonCollectionWrapperBase
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	public class WorkItemToTestLinks
	{
		
		public System.Nullable<WorkItemToTestLinksExecutedIn> ExecutedIn { get; set; }
		
		public TestMethod[] Tests { get; set; }
		
		/// <summary>
		/// WorkItem reference Details.
		/// </summary>
		public WorkItemReference WorkItem { get; set; }
	}
	
	public enum WorkItemToTestLinksExecutedIn
	{
		
		any = 0,
		
		tcm = 1,
		
		tfs = 2,
	}
	
	public partial class MyClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public MyClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get list of test result attachments reference
		/// Testlog_Get_Test_Result_Logs {organization}/{project}/_apis/testresults/runs/{runId}/results/{resultId}/testlog
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">Id of the test run that contains the result</param>
		/// <param name="resultId">Id of the test result</param>
		/// <param name="type">type of attachments to get</param>
		/// <param name="directoryPath">directory path of attachments to get</param>
		/// <param name="fileNamePrefix">file name prefix to filter the list of attachment</param>
		/// <param name="fetchMetaData">Default is false, set if metadata is needed</param>
		/// <param name="top">Numbe of attachments reference to return</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestLog[]> Testlog_Get_Test_Result_LogsAsync(string organization, string project, int runId, int resultId, TestLogReferenceType type, string directoryPath, string fileNamePrefix, bool fetchMetaData, int top, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/testresults/runs/"+runId+"/results/"+resultId+"/testlog&type=" + type+"&directoryPath=" + (directoryPath==null? "" : System.Uri.EscapeDataString(directoryPath))+"&fileNamePrefix=" + (fileNamePrefix==null? "" : System.Uri.EscapeDataString(fileNamePrefix))+"&fetchMetaData="+fetchMetaData+"&top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestLog[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of test result attachments reference
		/// Testlog_Get_Test_Result_Logs {organization}/{project}/_apis/testresults/runs/{runId}/results/{resultId}/testlog
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">Id of the test run that contains the result</param>
		/// <param name="resultId">Id of the test result</param>
		/// <param name="type">type of attachments to get</param>
		/// <param name="directoryPath">directory path of attachments to get</param>
		/// <param name="fileNamePrefix">file name prefix to filter the list of attachment</param>
		/// <param name="fetchMetaData">Default is false, set if metadata is needed</param>
		/// <param name="top">Numbe of attachments reference to return</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestLog[] Testlog_Get_Test_Result_Logs(string organization, string project, int runId, int resultId, TestLogReferenceType type, string directoryPath, string fileNamePrefix, bool fetchMetaData, int top, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/testresults/runs/"+runId+"/results/"+resultId+"/testlog&type=" + type+"&directoryPath=" + (directoryPath==null? "" : System.Uri.EscapeDataString(directoryPath))+"&fileNamePrefix=" + (fileNamePrefix==null? "" : System.Uri.EscapeDataString(fileNamePrefix))+"&fetchMetaData="+fetchMetaData+"&top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestLog[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get SAS Uri of a test results attachment
		/// Testlogstoreendpoint_Get_Test_Log_Store_Endpoint_Details_For_Result_Log {organization}/{project}/_apis/testresults/runs/{runId}/results/{resultId}/testlogstoreendpoint
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">Id of the test run that contains result</param>
		/// <param name="resultId">Id of the test result whose files need to be downloaded</param>
		/// <param name="type">type of the file</param>
		/// <param name="filePath">filePath for which sas uri is needed</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestLogStoreEndpointDetails> Testlogstoreendpoint_Get_Test_Log_Store_Endpoint_Details_For_Result_LogAsync(string organization, string project, int runId, int resultId, TestLogReferenceType type, string filePath, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/testresults/runs/"+runId+"/results/"+resultId+"/testlogstoreendpoint&type=" + type+"&filePath=" + (filePath==null? "" : System.Uri.EscapeDataString(filePath))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestLogStoreEndpointDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get SAS Uri of a test results attachment
		/// Testlogstoreendpoint_Get_Test_Log_Store_Endpoint_Details_For_Result_Log {organization}/{project}/_apis/testresults/runs/{runId}/results/{resultId}/testlogstoreendpoint
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">Id of the test run that contains result</param>
		/// <param name="resultId">Id of the test result whose files need to be downloaded</param>
		/// <param name="type">type of the file</param>
		/// <param name="filePath">filePath for which sas uri is needed</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestLogStoreEndpointDetails Testlogstoreendpoint_Get_Test_Log_Store_Endpoint_Details_For_Result_Log(string organization, string project, int runId, int resultId, TestLogReferenceType type, string filePath, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/testresults/runs/"+runId+"/results/"+resultId+"/testlogstoreendpoint&type=" + type+"&filePath=" + (filePath==null? "" : System.Uri.EscapeDataString(filePath))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestLogStoreEndpointDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create empty file for a result and Get Sas uri for the file
		/// Testlogstoreendpoint_Test_Log_Store_Endpoint_Details_For_Result {organization}/{project}/_apis/testresults/runs/{runId}/results/{resultId}/testlogstoreendpoint
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">Id of the test run that contains the result</param>
		/// <param name="resultId">Id of the test results that contains sub result</param>
		/// <param name="subResultId">Id of the test sub result whose file sas uri is needed</param>
		/// <param name="filePath">file path inside the sub result for which sas uri is needed</param>
		/// <param name="type">Type of the file for download</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestLogStoreEndpointDetails> Testlogstoreendpoint_Test_Log_Store_Endpoint_Details_For_ResultAsync(string organization, string project, int runId, int resultId, int subResultId, string filePath, TestLogReferenceType type, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/testresults/runs/"+runId+"/results/"+resultId+"/testlogstoreendpoint&subResultId="+subResultId+"&filePath=" + (filePath==null? "" : System.Uri.EscapeDataString(filePath))+"&type=" + type+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestLogStoreEndpointDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create empty file for a result and Get Sas uri for the file
		/// Testlogstoreendpoint_Test_Log_Store_Endpoint_Details_For_Result {organization}/{project}/_apis/testresults/runs/{runId}/results/{resultId}/testlogstoreendpoint
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">Id of the test run that contains the result</param>
		/// <param name="resultId">Id of the test results that contains sub result</param>
		/// <param name="subResultId">Id of the test sub result whose file sas uri is needed</param>
		/// <param name="filePath">file path inside the sub result for which sas uri is needed</param>
		/// <param name="type">Type of the file for download</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestLogStoreEndpointDetails Testlogstoreendpoint_Test_Log_Store_Endpoint_Details_For_Result(string organization, string project, int runId, int resultId, int subResultId, string filePath, TestLogReferenceType type, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/testresults/runs/"+runId+"/results/"+resultId+"/testlogstoreendpoint&subResultId="+subResultId+"&filePath=" + (filePath==null? "" : System.Uri.EscapeDataString(filePath))+"&type=" + type+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestLogStoreEndpointDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of test run attachments reference
		/// Testlog_Get_Test_Run_Logs {organization}/{project}/_apis/testresults/runs/{runId}/testlog
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">Id of the test run</param>
		/// <param name="type">type of the attachments to get</param>
		/// <param name="directoryPath">directory path for which attachments are needed</param>
		/// <param name="fileNamePrefix">file name prefix to filter the list of attachment</param>
		/// <param name="fetchMetaData">Default is false, set if metadata is needed</param>
		/// <param name="top">Number of attachments reference to return</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestLog[]> Testlog_Get_Test_Run_LogsAsync(string organization, string project, int runId, TestLogReferenceType type, string directoryPath, string fileNamePrefix, bool fetchMetaData, int top, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/testresults/runs/"+runId+"/testlog&type=" + type+"&directoryPath=" + (directoryPath==null? "" : System.Uri.EscapeDataString(directoryPath))+"&fileNamePrefix=" + (fileNamePrefix==null? "" : System.Uri.EscapeDataString(fileNamePrefix))+"&fetchMetaData="+fetchMetaData+"&top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestLog[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of test run attachments reference
		/// Testlog_Get_Test_Run_Logs {organization}/{project}/_apis/testresults/runs/{runId}/testlog
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">Id of the test run</param>
		/// <param name="type">type of the attachments to get</param>
		/// <param name="directoryPath">directory path for which attachments are needed</param>
		/// <param name="fileNamePrefix">file name prefix to filter the list of attachment</param>
		/// <param name="fetchMetaData">Default is false, set if metadata is needed</param>
		/// <param name="top">Number of attachments reference to return</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestLog[] Testlog_Get_Test_Run_Logs(string organization, string project, int runId, TestLogReferenceType type, string directoryPath, string fileNamePrefix, bool fetchMetaData, int top, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/testresults/runs/"+runId+"/testlog&type=" + type+"&directoryPath=" + (directoryPath==null? "" : System.Uri.EscapeDataString(directoryPath))+"&fileNamePrefix=" + (fileNamePrefix==null? "" : System.Uri.EscapeDataString(fileNamePrefix))+"&fetchMetaData="+fetchMetaData+"&top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestLog[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get SAS Uri of a test run attachment
		/// Testlogstoreendpoint_Get_Test_Log_Store_Endpoint_Details_For_Run_Log {organization}/{project}/_apis/testresults/runs/{runId}/testlogstoreendpoint
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">Id of the test run whose file has to be downloaded</param>
		/// <param name="type">type of the file</param>
		/// <param name="filePath">filePath for which sas uri is needed</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestLogStoreEndpointDetails> Testlogstoreendpoint_Get_Test_Log_Store_Endpoint_Details_For_Run_LogAsync(string organization, string project, int runId, TestLogReferenceType type, string filePath, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/testresults/runs/"+runId+"/testlogstoreendpoint&type=" + type+"&filePath=" + (filePath==null? "" : System.Uri.EscapeDataString(filePath))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestLogStoreEndpointDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get SAS Uri of a test run attachment
		/// Testlogstoreendpoint_Get_Test_Log_Store_Endpoint_Details_For_Run_Log {organization}/{project}/_apis/testresults/runs/{runId}/testlogstoreendpoint
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">Id of the test run whose file has to be downloaded</param>
		/// <param name="type">type of the file</param>
		/// <param name="filePath">filePath for which sas uri is needed</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestLogStoreEndpointDetails Testlogstoreendpoint_Get_Test_Log_Store_Endpoint_Details_For_Run_Log(string organization, string project, int runId, TestLogReferenceType type, string filePath, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/testresults/runs/"+runId+"/testlogstoreendpoint&type=" + type+"&filePath=" + (filePath==null? "" : System.Uri.EscapeDataString(filePath))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestLogStoreEndpointDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create empty file for a run and Get Sas uri for the file
		/// Testlogstoreendpoint_Test_Log_Store_Endpoint_Details_For_Run {organization}/{project}/_apis/testresults/runs/{runId}/testlogstoreendpoint
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">Id of the run to get endpoint details</param>
		/// <param name="testLogStoreOperationType">Type of operation to perform using sas uri</param>
		/// <param name="filePath">file path to create an empty file</param>
		/// <param name="type">Default is GeneralAttachment, type of empty file to be created</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestLogStoreEndpointDetails> Testlogstoreendpoint_Test_Log_Store_Endpoint_Details_For_RunAsync(string organization, string project, int runId, Testlogstoreendpoint_Test_Log_Store_Endpoint_Details_For_RunTestLogStoreOperationType testLogStoreOperationType, string filePath, TestLogReferenceType type, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/testresults/runs/"+runId+"/testlogstoreendpoint&testLogStoreOperationType=" + testLogStoreOperationType+"&filePath=" + (filePath==null? "" : System.Uri.EscapeDataString(filePath))+"&type=" + type+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestLogStoreEndpointDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create empty file for a run and Get Sas uri for the file
		/// Testlogstoreendpoint_Test_Log_Store_Endpoint_Details_For_Run {organization}/{project}/_apis/testresults/runs/{runId}/testlogstoreendpoint
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="runId">Id of the run to get endpoint details</param>
		/// <param name="testLogStoreOperationType">Type of operation to perform using sas uri</param>
		/// <param name="filePath">file path to create an empty file</param>
		/// <param name="type">Default is GeneralAttachment, type of empty file to be created</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestLogStoreEndpointDetails Testlogstoreendpoint_Test_Log_Store_Endpoint_Details_For_Run(string organization, string project, int runId, Testlogstoreendpoint_Test_Log_Store_Endpoint_Details_For_RunTestLogStoreOperationType testLogStoreOperationType, string filePath, TestLogReferenceType type, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/testresults/runs/"+runId+"/testlogstoreendpoint&testLogStoreOperationType=" + testLogStoreOperationType+"&filePath=" + (filePath==null? "" : System.Uri.EscapeDataString(filePath))+"&type=" + type+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestLogStoreEndpointDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Testlogstoreendpoint_Test_Log_Store_Endpoint_Details_For_RunTestLogStoreOperationType
	{
		
		read = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
