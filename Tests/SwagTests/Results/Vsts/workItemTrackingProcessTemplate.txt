//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Describes an admin behavior for a process.
	/// </summary>
	public class AdminBehavior
	{
		
		/// <summary>
		/// Is the behavior abstract (i.e. can not be associated with any work item type).
		/// </summary>
		public System.Nullable<System.Boolean> Abstract { get; set; }
		
		/// <summary>
		/// The color associated with the behavior.
		/// </summary>
		public string Color { get; set; }
		
		/// <summary>
		/// Indicates if the behavior is custom.
		/// </summary>
		public System.Nullable<System.Boolean> Custom { get; set; }
		
		/// <summary>
		/// The description of the behavior.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// List of behavior fields.
		/// </summary>
		public AdminBehaviorField[] Fields { get; set; }
		
		/// <summary>
		/// Behavior ID.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Parent behavior reference.
		/// </summary>
		public string Inherits { get; set; }
		
		/// <summary>
		/// The behavior name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Is the behavior overrides a behavior from system process.
		/// </summary>
		public System.Nullable<System.Boolean> Overriden { get; set; }
		
		/// <summary>
		/// The rank.
		/// </summary>
		public System.Nullable<System.Int32> Rank { get; set; }
	}
	
	/// <summary>
	/// Describes an admin behavior field.
	/// </summary>
	public class AdminBehaviorField
	{
		
		/// <summary>
		/// The behavior field identifier.
		/// </summary>
		public string BehaviorFieldId { get; set; }
		
		/// <summary>
		/// The behavior ID.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// The behavior name.
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Describes result of a check template existence request.
	/// </summary>
	public class CheckTemplateExistenceResult
	{
		
		/// <summary>
		/// Indicates whether a template exists.
		/// </summary>
		public System.Nullable<System.Boolean> DoesTemplateExist { get; set; }
		
		/// <summary>
		/// The name of the existing template.
		/// </summary>
		public string ExistingTemplateName { get; set; }
		
		/// <summary>
		/// The existing template type identifier.
		/// </summary>
		public string ExistingTemplateTypeId { get; set; }
		
		/// <summary>
		/// The name of the requested template.
		/// </summary>
		public string RequestedTemplateName { get; set; }
	}
	
	/// <summary>
	/// Describes the result of a Process Import request.
	/// </summary>
	public class ProcessImportResult
	{
		
		/// <summary>
		/// Describes result of a check template existence request.
		/// </summary>
		public CheckTemplateExistenceResult CheckExistenceResult { get; set; }
		
		/// <summary>
		/// Help URL.
		/// </summary>
		public string HelpUrl { get; set; }
		
		/// <summary>
		/// ID of the import operation.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Whether this imported process is new.
		/// </summary>
		public System.Nullable<System.Boolean> IsNew { get; set; }
		
		/// <summary>
		/// The promote job identifier.
		/// </summary>
		public string PromoteJobId { get; set; }
		
		/// <summary>
		/// The list of validation results.
		/// </summary>
		public ValidationIssue[] ValidationResults { get; set; }
	}
	
	public class ValidationIssue
	{
		
		public string Description { get; set; }
		
		public string File { get; set; }
		
		public string HelpLink { get; set; }
		
		public ValidationIssueIssueType IssueType { get; set; }
		
		public System.Nullable<System.Int32> Line { get; set; }
	}
	
	public enum ValidationIssueIssueType
	{
		
		warning = 0,
		
		error = 1,
	}
	
	/// <summary>
	/// Describes result of process operation promote.
	/// </summary>
	public class ProcessPromoteStatus
	{
		
		/// <summary>
		/// Number of projects for which promote is complete.
		/// </summary>
		public System.Nullable<System.Int32> Complete { get; set; }
		
		/// <summary>
		/// ID of the promote operation.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// The error message associated with the promote operation. The string will be empty if there are no errors.
		/// </summary>
		public string Message { get; set; }
		
		/// <summary>
		/// Number of projects for which promote is pending.
		/// </summary>
		public System.Nullable<System.Int32> Pending { get; set; }
		
		/// <summary>
		/// The remaining retries.
		/// </summary>
		public System.Nullable<System.Int32> RemainingRetries { get; set; }
		
		/// <summary>
		/// True if promote finished all the projects successfully. False if still in progress or any project promote failed.
		/// </summary>
		public System.Nullable<System.Boolean> Successful { get; set; }
	}
	
	/// <summary>
	/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
	/// </summary>
	public class VssJsonCollectionWrapper
	{
		
		public string Value { get; set; }
	}
	
	public class VssJsonCollectionWrapperBase
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns a list of behaviors for the process.
		/// Behaviors_List {organization}/_apis/work/processadmin/{processId}/behaviors
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<AdminBehavior[]> Behaviors_ListAsync(string organization, string processId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processadmin/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/behaviors&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminBehavior[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of behaviors for the process.
		/// Behaviors_List {organization}/_apis/work/processadmin/{processId}/behaviors
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public AdminBehavior[] Behaviors_List(string organization, string processId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processadmin/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/behaviors&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminBehavior[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns requested process template.
		/// Processes_Export_Process_Template {organization}/_apis/work/processadmin/processes/export/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">The ID of the process</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Processes_Export_Process_TemplateAsync(string organization, string id, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processadmin/processes/export/"+ (id==null? "" : Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns requested process template.
		/// Processes_Export_Process_Template {organization}/_apis/work/processadmin/processes/export/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">The ID of the process</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Processes_Export_Process_Template(string organization, string id, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processadmin/processes/export/"+ (id==null? "" : Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tells whether promote has completed for the specified promote job ID.
		/// Processes_Import_Process_Template_Status {organization}/_apis/work/processadmin/processes/status/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">The ID of the promote job operation</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessPromoteStatus> Processes_Import_Process_Template_StatusAsync(string organization, string id, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processadmin/processes/status/"+ (id==null? "" : Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessPromoteStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tells whether promote has completed for the specified promote job ID.
		/// Processes_Import_Process_Template_Status {organization}/_apis/work/processadmin/processes/status/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">The ID of the promote job operation</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessPromoteStatus Processes_Import_Process_Template_Status(string organization, string id, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processadmin/processes/status/"+ (id==null? "" : Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessPromoteStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
