//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The build definition reference resource
	/// </summary>
	public class BuildDefinitionReference
	{
		
		/// <summary>
		/// ID of the build definition
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the build definition
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Common Response for clone operation
	/// </summary>
	public class CloneOperationCommonResponse
	{
		
		/// <summary>
		/// Clone Statistics Details.
		/// </summary>
		public CloneStatistics CloneStatistics { get; set; }
		
		/// <summary>
		/// Completion data of the operation
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CompletionDate { get; set; }
		
		/// <summary>
		/// Creation data of the operation
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks Links { get; set; }
		
		/// <summary>
		/// Message related to the job
		/// </summary>
		public string Message { get; set; }
		
		/// <summary>
		/// Clone operation Id
		/// </summary>
		public System.Nullable<System.Int32> OpId { get; set; }
		
		/// <summary>
		/// Clone operation state
		/// </summary>
		public CloneOperationCommonResponseState State { get; set; }
	}
	
	/// <summary>
	/// Clone Statistics Details.
	/// </summary>
	public class CloneStatistics
	{
		
		/// <summary>
		/// Number of requirements cloned so far.
		/// </summary>
		public System.Nullable<System.Int32> ClonedRequirementsCount { get; set; }
		
		/// <summary>
		/// Number of shared steps cloned so far.
		/// </summary>
		public System.Nullable<System.Int32> ClonedSharedStepsCount { get; set; }
		
		/// <summary>
		/// Number of test cases cloned so far
		/// </summary>
		public System.Nullable<System.Int32> ClonedTestCasesCount { get; set; }
		
		/// <summary>
		/// Total number of requirements to be cloned
		/// </summary>
		public System.Nullable<System.Int32> TotalRequirementsCount { get; set; }
		
		/// <summary>
		/// Total number of test cases to be cloned
		/// </summary>
		public System.Nullable<System.Int32> TotalTestCasesCount { get; set; }
	}
	
	/// <summary>
	/// The class to represent a collection of REST reference links.
	/// </summary>
	public class ReferenceLinks
	{
		
		/// <summary>
		/// The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Links { get; set; }
	}
	
	public enum CloneOperationCommonResponseState
	{
		
		failed = 0,
		
		inProgress = 1,
		
		queued = 2,
		
		succeeded = 3,
	}
	
	/// <summary>
	/// Clone options for cloning the test suite.
	/// </summary>
	public class CloneOptions
	{
		
		/// <summary>
		/// If set to true requirements will be cloned
		/// </summary>
		public System.Nullable<System.Boolean> CloneRequirements { get; set; }
		
		/// <summary>
		/// copy all suites from a source plan
		/// </summary>
		public System.Nullable<System.Boolean> CopyAllSuites { get; set; }
		
		/// <summary>
		/// copy ancestor hierarchy
		/// </summary>
		public System.Nullable<System.Boolean> CopyAncestorHierarchy { get; set; }
		
		/// <summary>
		/// Name of the workitem type of the clone
		/// </summary>
		public string DestinationWorkItemType { get; set; }
		
		/// <summary>
		/// Key value pairs where the key value is overridden by the value.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> OverrideParameters { get; set; }
		
		/// <summary>
		/// Comment on the link that will link the new clone  test case to the original Set null for no comment
		/// </summary>
		public string RelatedLinkComment { get; set; }
	}
	
	/// <summary>
	/// Response for Test Plan clone operation
	/// </summary>
	public class CloneTestPlanOperationInformation
	{
		
		/// <summary>
		/// Common Response for clone operation
		/// </summary>
		public CloneOperationCommonResponse CloneOperationResponse { get; set; }
		
		/// <summary>
		/// Clone options for cloning the test suite.
		/// </summary>
		public CloneOptions CloneOptions { get; set; }
		
		/// <summary>
		/// The test plan resource.
		/// </summary>
		public TestPlan DestinationTestPlan { get; set; }
		
		/// <summary>
		/// Source Test Plan Response for Test Plan clone operation
		/// </summary>
		public SourceTestplanResponse SourceTestPlan { get; set; }
	}
	
	/// <summary>
	/// The test plan resource.
	/// </summary>
	public class TestPlan
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// ID of the test plan.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Previous build Id associated with the test plan
		/// </summary>
		public System.Nullable<System.Int32> PreviousBuildId { get; set; }
		
		/// <summary>
		/// Represents a shallow reference to a TeamProject.
		/// </summary>
		public TeamProjectReference Project { get; set; }
		
		/// <summary>
		/// The test suite reference resource.
		/// </summary>
		public TestSuiteReference RootSuite { get; set; }
		
		public IdentityRef UpdatedBy { get; set; }
		
		/// <summary>
		/// Updated date of the test plan
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDate { get; set; }
	}
	
	/// <summary>
	/// Represents a shallow reference to a TeamProject.
	/// </summary>
	public class TeamProjectReference
	{
		
		/// <summary>
		/// Project abbreviation.
		/// </summary>
		public string Abbreviation { get; set; }
		
		/// <summary>
		/// Url to default team identity image.
		/// </summary>
		public string DefaultTeamImageUrl { get; set; }
		
		/// <summary>
		/// The project's description (if any).
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Project identifier.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Project last update time.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
		
		/// <summary>
		/// Project name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Project revision.
		/// </summary>
		public System.Nullable<System.Int64> Revision { get; set; }
		
		/// <summary>
		/// Project state.
		/// </summary>
		public TeamProjectReferenceState State { get; set; }
		
		/// <summary>
		/// Url to the full version of the object.
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// Project visibility.
		/// </summary>
		public TeamProjectReferenceVisibility Visibility { get; set; }
	}
	
	public enum TeamProjectReferenceState
	{
		
		deleting = 0,
		
		_new = 1,
		
		wellFormed = 2,
		
		createPending = 3,
		
		all = 4,
		
		unchanged = 5,
		
		deleted = 6,
	}
	
	public enum TeamProjectReferenceVisibility
	{
		
		_private = 0,
		
		_public = 1,
	}
	
	/// <summary>
	/// The test suite reference resource.
	/// </summary>
	public class TestSuiteReference
	{
		
		/// <summary>
		/// ID of the test suite.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the test suite.
		/// </summary>
		public string Name { get; set; }
	}
	
	public class IdentityRef
	{
		
		/// <summary>
		/// Deprecated - Can be retrieved by querying the Graph user referenced in the "self" entry of the IdentityRef "_links" dictionary
		/// </summary>
		public string DirectoryAlias { get; set; }
		
		public string Id { get; set; }
		
		/// <summary>
		/// Deprecated - Available in the "avatar" entry of the IdentityRef "_links" dictionary
		/// </summary>
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Deprecated - Can be retrieved by querying the Graph membership state referenced in the "membershipState" entry of the GraphUser "_links" dictionary
		/// </summary>
		public System.Nullable<System.Boolean> Inactive { get; set; }
		
		/// <summary>
		/// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsAadUserType/Descriptor.IsAadGroupType)
		/// </summary>
		public System.Nullable<System.Boolean> IsAadIdentity { get; set; }
		
		/// <summary>
		/// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsGroupType)
		/// </summary>
		public System.Nullable<System.Boolean> IsContainer { get; set; }
		
		public System.Nullable<System.Boolean> IsDeletedInOrigin { get; set; }
		
		/// <summary>
		/// Deprecated - not in use in most preexisting implementations of ToIdentityRef
		/// </summary>
		public string ProfileUrl { get; set; }
		
		/// <summary>
		/// Deprecated - use Domain+PrincipalName instead
		/// </summary>
		public string UniqueName { get; set; }
	}
	
	/// <summary>
	/// Source Test Plan Response for Test Plan clone operation
	/// </summary>
	public class SourceTestplanResponse
	{
		
		/// <summary>
		/// Represents a shallow reference to a TeamProject.
		/// </summary>
		public TeamProjectReference Project { get; set; }
		
		/// <summary>
		/// Id of suites to be cloned inside source Test Plan
		/// </summary>
		public int[] SuiteIds { get; set; }
	}
	
	/// <summary>
	/// Parameters for Test Plan clone operation
	/// </summary>
	public class CloneTestPlanParams
	{
		
		/// <summary>
		/// Clone options for cloning the test suite.
		/// </summary>
		public CloneOptions CloneOptions { get; set; }
		
		/// <summary>
		/// Destination Test Plan create parameters
		/// </summary>
		public DestinationTestPlanCloneParams DestinationTestPlan { get; set; }
		
		/// <summary>
		/// Source Test Plan information for Test Plan clone operation
		/// </summary>
		public SourceTestPlanInfo SourceTestPlan { get; set; }
	}
	
	/// <summary>
	/// Destination Test Plan create parameters
	/// </summary>
	public class DestinationTestPlanCloneParams
	{
		
		/// <summary>
		/// Destination Project Name
		/// </summary>
		public string Project { get; set; }
	}
	
	/// <summary>
	/// Source Test Plan information for Test Plan clone operation
	/// </summary>
	public class SourceTestPlanInfo
	{
		
		/// <summary>
		/// ID of the source Test Plan
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Id of suites to be cloned inside source Test Plan
		/// </summary>
		public int[] SuiteIds { get; set; }
	}
	
	/// <summary>
	/// Response for Test Suite clone operation
	/// </summary>
	public class CloneTestSuiteOperationInformation
	{
		
		/// <summary>
		/// Test Suite Reference with Project
		/// </summary>
		public TestSuiteReferenceWithProject ClonedTestSuite { get; set; }
		
		/// <summary>
		/// Common Response for clone operation
		/// </summary>
		public CloneOperationCommonResponse CloneOperationResponse { get; set; }
		
		/// <summary>
		/// Clone options for cloning the test suite.
		/// </summary>
		public CloneOptions CloneOptions { get; set; }
		
		/// <summary>
		/// Test Suite Reference with Project
		/// </summary>
		public TestSuiteReferenceWithProject DestinationTestSuite { get; set; }
		
		/// <summary>
		/// Test Suite Reference with Project
		/// </summary>
		public TestSuiteReferenceWithProject SourceTestSuite { get; set; }
	}
	
	/// <summary>
	/// Test Suite Reference with Project
	/// </summary>
	public class TestSuiteReferenceWithProject
	{
		
		/// <summary>
		/// Represents a shallow reference to a TeamProject.
		/// </summary>
		public TeamProjectReference Project { get; set; }
	}
	
	/// <summary>
	/// Parameters for Test Suite clone operation
	/// </summary>
	public class CloneTestSuiteParams
	{
		
		/// <summary>
		/// Clone options for cloning the test suite.
		/// </summary>
		public CloneOptions CloneOptions { get; set; }
		
		/// <summary>
		/// Destination Test Suite information for Test Suite clone operation
		/// </summary>
		public DestinationTestSuiteInfo DestinationTestSuite { get; set; }
		
		/// <summary>
		/// Source Test Suite information for Test Suite clone operation
		/// </summary>
		public SourceTestSuiteInfo SourceTestSuite { get; set; }
	}
	
	/// <summary>
	/// Destination Test Suite information for Test Suite clone operation
	/// </summary>
	public class DestinationTestSuiteInfo
	{
		
		/// <summary>
		/// Destination Suite Id
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Destination Project Name
		/// </summary>
		public string Project { get; set; }
	}
	
	/// <summary>
	/// Source Test Suite information for Test Suite clone operation
	/// </summary>
	public class SourceTestSuiteInfo
	{
		
		/// <summary>
		/// Id of the Source Test Suite
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
	}
	
	/// <summary>
	/// Configuration of the Test Point
	/// </summary>
	public class Configuration
	{
		
		/// <summary>
		/// Id of the Configuration Assigned to the Test Point
		/// </summary>
		public System.Nullable<System.Int32> ConfigurationId { get; set; }
	}
	
	public class GraphSubjectBase
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
		/// </summary>
		public string Descriptor { get; set; }
		
		/// <summary>
		/// This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// This url is the full route to the source resource of this graph subject.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Last result details of test point.
	/// </summary>
	public class LastResultDetails
	{
		
		/// <summary>
		/// CompletedDate of LastResult.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> DateCompleted { get; set; }
		
		/// <summary>
		/// Duration of LastResult.
		/// </summary>
		public System.Nullable<System.Int64> Duration { get; set; }
		
		public IdentityRef RunBy { get; set; }
	}
	
	/// <summary>
	/// This data model is used in Work item-based tabs of Test Plans Library.
	/// </summary>
	public class LibraryWorkItemsData
	{
		
		/// <summary>
		/// Continuation token to fetch next set of elements. Present only when HasMoreElements is true.
		/// </summary>
		public string ContinuationToken { get; set; }
		
		/// <summary>
		/// Boolean indicating if the WIQL query has exceeded the limit of items returned.
		/// </summary>
		public System.Nullable<System.Boolean> ExceededWorkItemQueryLimit { get; set; }
		
		/// <summary>
		/// Boolean indicating if there are more elements present than what are being sent.
		/// </summary>
		public System.Nullable<System.Boolean> HasMoreElements { get; set; }
		
		/// <summary>
		/// Specifies if there was an error while execution of data provider.
		/// </summary>
		public LibraryWorkItemsDataReturnCode ReturnCode { get; set; }
		
		/// <summary>
		/// List of work items returned when OrderByField is sent something other than Id.
		/// </summary>
		public int[] WorkItemIds { get; set; }
		
		/// <summary>
		/// List of work items to be returned.
		/// </summary>
		public WorkItemDetails[] WorkItems { get; set; }
	}
	
	public enum LibraryWorkItemsDataReturnCode
	{
		
		success = 0,
		
		error = 1,
	}
	
	/// <summary>
	/// Work Item Class
	/// </summary>
	public class WorkItemDetails
	{
		
		/// <summary>
		/// Work Item Id
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Work Item Name
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Work Item Fields
		/// </summary>
		public string[] WorkItemFields { get; set; }
	}
	
	/// <summary>
	/// This is the request data contract for LibraryTestCaseDataProvider.
	/// </summary>
	public class LibraryWorkItemsDataProviderRequest
	{
		
		/// <summary>
		/// The continuation token required for paging of work items. This is required when getting subsequent sets of work items when OrderByField is Id.
		/// </summary>
		public string ContinuationToken { get; set; }
		
		/// <summary>
		/// List of filter values to be supplied. Currently supported filters are Title, State, AssignedTo, Priority, AreaPath.
		/// </summary>
		public TestPlansLibraryWorkItemFilter[] FilterValues { get; set; }
		
		/// <summary>
		/// Whether the data is to be sorted in ascending or descending order. When not supplied, defaults to descending.
		/// </summary>
		public System.Nullable<System.Boolean> IsAscending { get; set; }
		
		/// <summary>
		/// The type of query to run.
		/// </summary>
		public LibraryWorkItemsDataProviderRequestLibraryQueryType LibraryQueryType { get; set; }
		
		/// <summary>
		/// Work item field on which to order the results. When not supplied, defaults to work item IDs.
		/// </summary>
		public string OrderByField { get; set; }
		
		/// <summary>
		/// List of work items to query for field details. This is required when getting subsequent sets of work item fields when OrderByField is other than Id.
		/// </summary>
		public int[] WorkItemIds { get; set; }
	}
	
	/// <summary>
	/// Container to hold information about a filter being applied in Test Plans Library.
	/// </summary>
	public class TestPlansLibraryWorkItemFilter
	{
		
		/// <summary>
		/// Work item field name on which the items are to be filtered.
		/// </summary>
		public string FieldName { get; set; }
		
		/// <summary>
		/// Work item field values corresponding to the field name.
		/// </summary>
		public string[] FieldValues { get; set; }
		
		/// <summary>
		/// Mode of the filter.
		/// </summary>
		public TestPlansLibraryWorkItemFilterFilterMode FilterMode { get; set; }
	}
	
	public enum TestPlansLibraryWorkItemFilterFilterMode
	{
		
		or = 0,
		
		and = 1,
	}
	
	public enum LibraryWorkItemsDataProviderRequestLibraryQueryType
	{
		
		none = 0,
		
		allTestCases = 1,
		
		testCasesWithActiveBugs = 2,
		
		testCasesNotLinkedToRequirements = 3,
		
		testCasesLinkedToRequirements = 4,
		
		allSharedSteps = 5,
		
		sharedStepsNotLinkedToRequirement = 6,
	}
	
	/// <summary>
	/// Name value pair
	/// </summary>
	public class NameValuePair
	{
		
		/// <summary>
		/// Name
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Value
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Assignments for the Test Point
	/// </summary>
	public class PointAssignment
	{
		
		/// <summary>
		/// Name of the Configuration Assigned to the Test Point
		/// </summary>
		public string ConfigurationName { get; set; }
		
		/// <summary>
		/// Id of the Test Point
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		public IdentityRef Tester { get; set; }
	}
	
	/// <summary>
	/// Reference to release environment resource.
	/// </summary>
	public class ReleaseEnvironmentDefinitionReference
	{
		
		/// <summary>
		/// ID of the release definition that contains the release environment definition.
		/// </summary>
		public System.Nullable<System.Int32> DefinitionId { get; set; }
		
		/// <summary>
		/// ID of the release environment definition.
		/// </summary>
		public System.Nullable<System.Int32> EnvironmentDefinitionId { get; set; }
	}
	
	/// <summary>
	/// Results class for Test Point
	/// </summary>
	public class Results
	{
		
		/// <summary>
		/// Outcome of the Test Point
		/// </summary>
		public ResultsOutcome Outcome { get; set; }
	}
	
	public enum ResultsOutcome
	{
		
		unspecified = 0,
		
		none = 1,
		
		passed = 2,
		
		failed = 3,
		
		inconclusive = 4,
		
		timeout = 5,
		
		aborted = 6,
		
		blocked = 7,
		
		notExecuted = 8,
		
		warning = 9,
		
		error = 10,
		
		notApplicable = 11,
		
		paused = 12,
		
		inProgress = 13,
		
		notImpacted = 14,
		
		maxValue = 15,
	}
	
	/// <summary>
	/// A suite entry defines properties for a test suite.
	/// </summary>
	public class SuiteEntry
	{
		
		/// <summary>
		/// Id for the test suite.
		/// </summary>
		public System.Nullable<System.Int32> SuiteId { get; set; }
	}
	
	/// <summary>
	/// A suite entry defines properties for a test suite.
	/// </summary>
	public class SuiteEntryUpdateParams
	{
		
		/// <summary>
		/// Id of the suite entry in the test suite: either a test case id or child suite id.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Sequence number for the suite entry object in the test suite.
		/// </summary>
		public System.Nullable<System.Int32> SequenceNumber { get; set; }
		
		/// <summary>
		/// Defines whether the entry is of type test case or suite.
		/// </summary>
		public SuiteEntryUpdateParamsSuiteEntryType SuiteEntryType { get; set; }
	}
	
	public enum SuiteEntryUpdateParamsSuiteEntryType
	{
		
		testCase = 0,
		
		suite = 1,
	}
	
	/// <summary>
	/// Create and Update Suite Test Case Parameters
	/// </summary>
	public class SuiteTestCaseCreateUpdateParameters
	{
		
		/// <summary>
		/// Configurations Ids
		/// </summary>
		public Configuration[] PointAssignments { get; set; }
		
		/// <summary>
		/// Work Item
		/// </summary>
		public WorkItem WorkItem { get; set; }
	}
	
	/// <summary>
	/// Work Item
	/// </summary>
	public class WorkItem
	{
		
		/// <summary>
		/// Id of the Work Item
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
	}
	
	/// <summary>
	/// Test Case Class
	/// </summary>
	public class TestCase
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks Links { get; set; }
		
		/// <summary>
		/// Order of the TestCase in the Suite
		/// </summary>
		public System.Nullable<System.Int32> Order { get; set; }
		
		/// <summary>
		/// List of Points associated with the Test Case
		/// </summary>
		public PointAssignment[] PointAssignments { get; set; }
		
		/// <summary>
		/// Represents a shallow reference to a TeamProject.
		/// </summary>
		public TeamProjectReference Project { get; set; }
		
		/// <summary>
		/// The test plan reference resource.
		/// </summary>
		public TestPlanReference TestPlan { get; set; }
		
		/// <summary>
		/// The test suite reference resource.
		/// </summary>
		public TestSuiteReference TestSuite { get; set; }
		
		/// <summary>
		/// Work Item Class
		/// </summary>
		public WorkItemDetails WorkItem { get; set; }
	}
	
	/// <summary>
	/// The test plan reference resource.
	/// </summary>
	public class TestPlanReference
	{
		
		/// <summary>
		/// ID of the test plan.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the test plan.
		/// </summary>
		public string Name { get; set; }
	}
	
	public class TestCaseAssociatedResult
	{
		
		public System.Nullable<System.DateTimeOffset> CompletedDate { get; set; }
		
		/// <summary>
		/// Test Configuration Reference
		/// </summary>
		public TestConfigurationReference Configuration { get; set; }
		
		public TestCaseAssociatedResultOutcome Outcome { get; set; }
		
		/// <summary>
		/// The test plan reference resource.
		/// </summary>
		public TestPlanReference Plan { get; set; }
		
		public System.Nullable<System.Int32> PointId { get; set; }
		
		public System.Nullable<System.Int32> ResultId { get; set; }
		
		public IdentityRef RunBy { get; set; }
		
		public System.Nullable<System.Int32> RunId { get; set; }
		
		/// <summary>
		/// The test suite reference resource.
		/// </summary>
		public TestSuiteReference Suite { get; set; }
		
		public IdentityRef Tester { get; set; }
	}
	
	/// <summary>
	/// Test Configuration Reference
	/// </summary>
	public class TestConfigurationReference
	{
		
		/// <summary>
		/// Id of the configuration
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the configuration
		/// </summary>
		public string Name { get; set; }
	}
	
	public enum TestCaseAssociatedResultOutcome
	{
		
		inProgress = 0,
		
		blocked = 1,
		
		failed = 2,
		
		passed = 3,
		
		ready = 4,
		
		notApplicable = 5,
		
		paused = 6,
		
		timeout = 7,
		
		warning = 8,
		
		error = 9,
		
		notExecuted = 10,
		
		inconclusive = 11,
		
		aborted = 12,
		
		none = 13,
		
		notImpacted = 14,
		
		unspecified = 15,
		
		maxValue = 16,
	}
	
	/// <summary>
	/// Test Case Reference
	/// </summary>
	public class TestCaseReference
	{
		
		public IdentityRef AssignedTo { get; set; }
		
		/// <summary>
		/// Test Case Id
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Test Case Name
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// State of the test case work item
		/// </summary>
		public string State { get; set; }
	}
	
	/// <summary>
	/// This data model is used in TestCaseResultsDataProvider and populates the data required for initial page load
	/// </summary>
	public class TestCaseResultsData
	{
		
		public TestPointDetailedReference ContextPoint { get; set; }
		
		/// <summary>
		/// Use to store the results displayed in the table
		/// </summary>
		public TestCaseAssociatedResult[] Results { get; set; }
		
		/// <summary>
		/// Test Case Name to be displayed in the table header
		/// </summary>
		public string TestCaseName { get; set; }
	}
	
	public class TestPointDetailedReference
	{
		
		/// <summary>
		/// Test Configuration Reference
		/// </summary>
		public TestConfigurationReference Configuration { get; set; }
		
		/// <summary>
		/// The test plan reference resource.
		/// </summary>
		public TestPlanReference Plan { get; set; }
		
		public System.Nullable<System.Int32> PointId { get; set; }
		
		/// <summary>
		/// The test suite reference resource.
		/// </summary>
		public TestSuiteReference Suite { get; set; }
		
		public IdentityRef Tester { get; set; }
	}
	
	/// <summary>
	/// Test configuration
	/// </summary>
	public class TestConfiguration
	{
		
		/// <summary>
		/// Id of the configuration
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Represents a shallow reference to a TeamProject.
		/// </summary>
		public TeamProjectReference Project { get; set; }
	}
	
	/// <summary>
	/// Test Configuration Create or Update Parameters
	/// </summary>
	public class TestConfigurationCreateUpdateParameters
	{
		
		/// <summary>
		/// Description of the configuration
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Is the configuration a default for the test plans
		/// </summary>
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		/// <summary>
		/// Name of the configuration
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// State of the configuration
		/// </summary>
		public TestConfigurationCreateUpdateParametersState State { get; set; }
		
		/// <summary>
		/// Dictionary of Test Variable, Selected Value
		/// </summary>
		public NameValuePair[] Values { get; set; }
	}
	
	public enum TestConfigurationCreateUpdateParametersState
	{
		
		active = 0,
		
		inactive = 1,
	}
	
	/// <summary>
	/// Test environment Detail.
	/// </summary>
	public class TestEnvironment
	{
		
		/// <summary>
		/// Test Environment Id.
		/// </summary>
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// Test Environment Name.
		/// </summary>
		public string EnvironmentName { get; set; }
	}
	
	/// <summary>
	/// Test outcome settings
	/// </summary>
	public class TestOutcomeSettings
	{
		
		/// <summary>
		/// Value to configure how test outcomes for the same tests across suites are shown
		/// </summary>
		public System.Nullable<System.Boolean> SyncOutcomeAcrossSuites { get; set; }
	}
	
	/// <summary>
	/// The test plan create parameters.
	/// </summary>
	public class TestPlanCreateParams
	{
		
		/// <summary>
		/// Area of the test plan.
		/// </summary>
		public string AreaPath { get; set; }
		
		/// <summary>
		/// The build definition reference resource
		/// </summary>
		public BuildDefinitionReference BuildDefinition { get; set; }
		
		/// <summary>
		/// Build to be tested.
		/// </summary>
		public System.Nullable<System.Int32> BuildId { get; set; }
		
		/// <summary>
		/// Description of the test plan.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// End date for the test plan.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// Iteration path of the test plan.
		/// </summary>
		public string Iteration { get; set; }
		
		/// <summary>
		/// Name of the test plan.
		/// </summary>
		public string Name { get; set; }
		
		public IdentityRef Owner { get; set; }
		
		/// <summary>
		/// Reference to release environment resource.
		/// </summary>
		public ReleaseEnvironmentDefinitionReference ReleaseEnvironmentDefinition { get; set; }
		
		/// <summary>
		/// Start date for the test plan.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// State of the test plan.
		/// </summary>
		public string State { get; set; }
		
		/// <summary>
		/// Test outcome settings
		/// </summary>
		public TestOutcomeSettings TestOutcomeSettings { get; set; }
	}
	
	/// <summary>
	/// The test plan detailed reference resource. Contains additional workitem realted information
	/// </summary>
	public class TestPlanDetailedReference
	{
		
		/// <summary>
		/// Area of the test plan.
		/// </summary>
		public string AreaPath { get; set; }
		
		/// <summary>
		/// End date for the test plan.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// Iteration path of the test plan.
		/// </summary>
		public string Iteration { get; set; }
		
		/// <summary>
		/// Root Suite Id
		/// </summary>
		public System.Nullable<System.Int32> RootSuiteId { get; set; }
		
		/// <summary>
		/// Start date for the test plan.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
	}
	
	/// <summary>
	/// This data model is used in TestPlansHubRefreshDataProvider and populates the data required for initial page load
	/// </summary>
	public class TestPlansHubRefreshData
	{
		
		public string[] DefineColumnOptionFields { get; set; }
		
		public string ErrorMessage { get; set; }
		
		public string[] ExecuteColumnOptionFields { get; set; }
		
		public System.Nullable<System.Boolean> IsAdvancedExtensionEnabled { get; set; }
		
		public string SelectedPivotId { get; set; }
		
		public System.Nullable<System.Int32> SelectedSuiteId { get; set; }
		
		public System.Nullable<System.Int32> TestCasePageSize { get; set; }
		
		public TestCase[] TestCases { get; set; }
		
		public string TestCasesContinuationToken { get; set; }
		
		/// <summary>
		/// The test plan detailed reference resource. Contains additional workitem realted information
		/// </summary>
		public TestPlanDetailedReference TestPlan { get; set; }
		
		public System.Nullable<System.Int32> TestPointPageSize { get; set; }
		
		public TestPoint[] TestPoints { get; set; }
		
		public string TestPointsContinuationToken { get; set; }
		
		public TestSuite[] TestSuites { get; set; }
		
		public string TestSuitesContinuationToken { get; set; }
	}
	
	/// <summary>
	/// Test Point Class
	/// </summary>
	public class TestPoint
	{
		
		/// <summary>
		/// Comment associated to the Test Point
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Test Configuration Reference
		/// </summary>
		public TestConfigurationReference Configuration { get; set; }
		
		/// <summary>
		/// Id of the Test Point
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Variable to decide whether the test case is Active or not
		/// </summary>
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Is the Test Point for Automated Test Case or Manual
		/// </summary>
		public System.Nullable<System.Boolean> IsAutomated { get; set; }
		
		/// <summary>
		/// Last Reset to Active Time Stamp for the Test Point
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastResetToActive { get; set; }
		
		public IdentityRef LastUpdatedBy { get; set; }
		
		/// <summary>
		/// Last Update Time Stamp for the Test Point
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastUpdatedDate { get; set; }
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks Links { get; set; }
		
		/// <summary>
		/// Represents a shallow reference to a TeamProject.
		/// </summary>
		public TeamProjectReference Project { get; set; }
		
		/// <summary>
		/// Test Point Results
		/// </summary>
		public TestPointResults Results { get; set; }
		
		/// <summary>
		/// Test Case Reference
		/// </summary>
		public TestCaseReference TestCaseReference { get; set; }
		
		public IdentityRef Tester { get; set; }
		
		/// <summary>
		/// The test plan reference resource.
		/// </summary>
		public TestPlanReference TestPlan { get; set; }
		
		/// <summary>
		/// The test suite reference resource.
		/// </summary>
		public TestSuiteReference TestSuite { get; set; }
	}
	
	/// <summary>
	/// Test Point Results
	/// </summary>
	public class TestPointResults
	{
		
		/// <summary>
		/// Failure Type for the Test Point
		/// </summary>
		public TestPointResultsFailureType FailureType { get; set; }
		
		/// <summary>
		/// Last Resolution State Id for the Test Point
		/// </summary>
		public TestPointResultsLastResolutionState LastResolutionState { get; set; }
		
		/// <summary>
		/// Last result details of test point.
		/// </summary>
		public LastResultDetails LastResultDetails { get; set; }
		
		/// <summary>
		/// Last Result Id
		/// </summary>
		public System.Nullable<System.Int32> LastResultId { get; set; }
		
		/// <summary>
		/// Last Result State of the Test Point
		/// </summary>
		public TestPointResultsLastResultState LastResultState { get; set; }
		
		/// <summary>
		/// Last RUn Build Number for the Test Point
		/// </summary>
		public string LastRunBuildNumber { get; set; }
		
		/// <summary>
		/// Last Test Run Id for the Test Point
		/// </summary>
		public System.Nullable<System.Int32> LastTestRunId { get; set; }
		
		/// <summary>
		/// Outcome of the Test Point
		/// </summary>
		public TestPointResultsOutcome Outcome { get; set; }
		
		/// <summary>
		/// State of the Test Point
		/// </summary>
		public TestPointResultsState State { get; set; }
	}
	
	public enum TestPointResultsFailureType
	{
		
		none = 0,
		
		regression = 1,
		
		new_Issue = 2,
		
		known_Issue = 3,
		
		unknown = 4,
		
		null_Value = 5,
		
		maxValue = 6,
	}
	
	public enum TestPointResultsLastResolutionState
	{
		
		none = 0,
		
		needsInvestigation = 1,
		
		testIssue = 2,
		
		productIssue = 3,
		
		configurationIssue = 4,
		
		nullValue = 5,
		
		maxValue = 6,
	}
	
	public enum TestPointResultsLastResultState
	{
		
		unspecified = 0,
		
		pending = 1,
		
		queued = 2,
		
		inProgress = 3,
		
		paused = 4,
		
		completed = 5,
		
		maxValue = 6,
	}
	
	public enum TestPointResultsOutcome
	{
		
		unspecified = 0,
		
		none = 1,
		
		passed = 2,
		
		failed = 3,
		
		inconclusive = 4,
		
		timeout = 5,
		
		aborted = 6,
		
		blocked = 7,
		
		notExecuted = 8,
		
		warning = 9,
		
		error = 10,
		
		notApplicable = 11,
		
		paused = 12,
		
		inProgress = 13,
		
		notImpacted = 14,
		
		maxValue = 15,
	}
	
	public enum TestPointResultsState
	{
		
		none = 0,
		
		ready = 1,
		
		completed = 2,
		
		notReady = 3,
		
		inProgress = 4,
		
		maxValue = 5,
	}
	
	/// <summary>
	/// Test suite
	/// </summary>
	public class TestSuite
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// Child test suites of current test suite.
		/// </summary>
		public TestSuite[] Children { get; set; }
		
		/// <summary>
		/// Boolean value dictating if Child test suites are present
		/// </summary>
		public System.Nullable<System.Boolean> HasChildren { get; set; }
		
		/// <summary>
		/// Id of test suite.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Last error for test suite.
		/// </summary>
		public string LastError { get; set; }
		
		/// <summary>
		/// Last populated date.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastPopulatedDate { get; set; }
		
		public IdentityRef LastUpdatedBy { get; set; }
		
		/// <summary>
		/// Last update date.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastUpdatedDate { get; set; }
		
		/// <summary>
		/// The test plan reference resource.
		/// </summary>
		public TestPlanReference Plan { get; set; }
		
		/// <summary>
		/// Represents a shallow reference to a TeamProject.
		/// </summary>
		public TeamProjectReference Project { get; set; }
		
		/// <summary>
		/// Test suite revision.
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
	}
	
	/// <summary>
	/// The test plan update parameters.
	/// </summary>
	public class TestPlanUpdateParams
	{
		
		/// <summary>
		/// Revision of the test plan.
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
	}
	
	/// <summary>
	/// Test Point Count
	/// </summary>
	public class TestPointCount
	{
		
		/// <summary>
		/// Test Point Count
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Test Plan under which the Test Points are
		/// </summary>
		public System.Nullable<System.Int32> TestPlanId { get; set; }
		
		/// <summary>
		/// Test Suite under which the Test Points are
		/// </summary>
		public System.Nullable<System.Int32> TestSuiteId { get; set; }
		
		/// <summary>
		/// Total test points in the suite without the applied filters
		/// </summary>
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	/// <summary>
	/// Test Point Update Parameters
	/// </summary>
	public class TestPointUpdateParams
	{
		
		/// <summary>
		/// Id of Test Point to be updated
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Reset the Test Point to Active
		/// </summary>
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Results class for Test Point
		/// </summary>
		public Results Results { get; set; }
		
		public IdentityRef Tester { get; set; }
	}
	
	/// <summary>
	/// Represents the test settings of the run. Used to create test settings and fetch test settings
	/// </summary>
	public class TestSettings
	{
		
		/// <summary>
		/// Area path required to create test settings
		/// </summary>
		public string AreaPath { get; set; }
		
		/// <summary>
		/// Description of the test settings. Used in create test settings.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Indicates if the tests settings is public or private.Used in create test settings.
		/// </summary>
		public System.Nullable<System.Boolean> IsPublic { get; set; }
		
		/// <summary>
		/// Xml string of machine roles. Used in create test settings.
		/// </summary>
		public string MachineRoles { get; set; }
		
		/// <summary>
		/// Test settings content.
		/// </summary>
		public string TestSettingsContent { get; set; }
		
		/// <summary>
		/// Test settings id.
		/// </summary>
		public System.Nullable<System.Int32> TestSettingsId { get; set; }
		
		/// <summary>
		/// Test settings name.
		/// </summary>
		public string TestSettingsName { get; set; }
	}
	
	/// <summary>
	/// Test suite Create Parameters
	/// </summary>
	public class TestSuiteCreateParams
	{
		
		/// <summary>
		/// Test suite requirement id.
		/// </summary>
		public System.Nullable<System.Int32> RequirementId { get; set; }
		
		/// <summary>
		/// Test suite type.
		/// </summary>
		public TestSuiteCreateParamsSuiteType SuiteType { get; set; }
	}
	
	public enum TestSuiteCreateParamsSuiteType
	{
		
		none = 0,
		
		dynamicTestSuite = 1,
		
		staticTestSuite = 2,
		
		requirementTestSuite = 3,
	}
	
	/// <summary>
	/// Test Suite Create/Update Common Parameters
	/// </summary>
	public class TestSuiteCreateUpdateCommonParams
	{
		
		/// <summary>
		/// Test suite default configurations.
		/// </summary>
		public TestConfigurationReference[] DefaultConfigurations { get; set; }
		
		/// <summary>
		/// Test suite default testers.
		/// </summary>
		public IdentityRef[] DefaultTesters { get; set; }
		
		/// <summary>
		/// Default configuration was inherited or not.
		/// </summary>
		public System.Nullable<System.Boolean> InheritDefaultConfigurations { get; set; }
		
		/// <summary>
		/// Name of test suite.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The test suite reference resource.
		/// </summary>
		public TestSuiteReference ParentSuite { get; set; }
		
		/// <summary>
		/// Test suite query string, for dynamic suites.
		/// </summary>
		public string QueryString { get; set; }
	}
	
	/// <summary>
	/// Test Suite Update Parameters
	/// </summary>
	public class TestSuiteUpdateParams
	{
		
		/// <summary>
		/// Test suite revision.
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
	}
	
	/// <summary>
	/// Test Variable
	/// </summary>
	public class TestVariable
	{
		
		/// <summary>
		/// Id of the test variable
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Represents a shallow reference to a TeamProject.
		/// </summary>
		public TeamProjectReference Project { get; set; }
	}
	
	/// <summary>
	/// Test Variable Create or Update Parameters
	/// </summary>
	public class TestVariableCreateUpdateParameters
	{
		
		/// <summary>
		/// Description of the test variable
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Name of the test variable
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// List of allowed values
		/// </summary>
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
	/// </summary>
	public class VssJsonCollectionWrapper
	{
		
		public string Value { get; set; }
	}
	
	public class VssJsonCollectionWrapperBase
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Find the list of all test suites in which a given test case is present. This is helpful if you need to find out which test suites are using a test case, when you need to make changes to a test case.
		/// Test__Suites_Get_Suites_By_Test_Case_Id {organization}/_apis/testplan/suites
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="testCaseId">ID of the test case for which suites need to be fetched.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestSuite[]> Test__Suites_Get_Suites_By_Test_Case_IdAsync(string organization, int testCaseId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/testplan/suites&testCaseId="+testCaseId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestSuite[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find the list of all test suites in which a given test case is present. This is helpful if you need to find out which test suites are using a test case, when you need to make changes to a test case.
		/// Test__Suites_Get_Suites_By_Test_Case_Id {organization}/_apis/testplan/suites
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="testCaseId">ID of the test case for which suites need to be fetched.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestSuite[] Test__Suites_Get_Suites_By_Test_Case_Id(string organization, int testCaseId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/testplan/suites&testCaseId="+testCaseId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestSuite[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a test configuration.
		/// Configurations_Create {organization}/{project}/_apis/testplan/configurations
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">TestConfigurationCreateUpdateParameters</param>
		/// <returns>successful operation</returns>
		public async Task<TestConfiguration> Configurations_CreateAsync(string organization, string project, string api_version, TestConfigurationCreateUpdateParameters requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/configurations&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a test configuration.
		/// Configurations_Create {organization}/{project}/_apis/testplan/configurations
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">TestConfigurationCreateUpdateParameters</param>
		/// <returns>successful operation</returns>
		public TestConfiguration Configurations_Create(string organization, string project, string api_version, TestConfigurationCreateUpdateParameters requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/configurations&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a test configuration by its ID.
		/// Configurations_Delete {organization}/{project}/_apis/testplan/configurations
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="testConfiguartionId">ID of the test configuration to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Configurations_DeleteAsync(string organization, string project, int testConfiguartionId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/configurations&testConfiguartionId="+testConfiguartionId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a test configuration by its ID.
		/// Configurations_Delete {organization}/{project}/_apis/testplan/configurations
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="testConfiguartionId">ID of the test configuration to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Configurations_Delete(string organization, string project, int testConfiguartionId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/configurations&testConfiguartionId="+testConfiguartionId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of test configurations.
		/// Configurations_List {organization}/{project}/_apis/testplan/configurations
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="continuationToken">If the list of configurations returned is not complete, a continuation token to query next batch of configurations is included in the response header as "x-ms-continuationtoken". Omit this parameter to get the first batch of test configurations.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestConfiguration[]> Configurations_ListAsync(string organization, string project, string continuationToken, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/configurations&continuationToken=" + (continuationToken==null? "" : Uri.EscapeDataString(continuationToken))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestConfiguration[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of test configurations.
		/// Configurations_List {organization}/{project}/_apis/testplan/configurations
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="continuationToken">If the list of configurations returned is not complete, a continuation token to query next batch of configurations is included in the response header as "x-ms-continuationtoken". Omit this parameter to get the first batch of test configurations.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestConfiguration[] Configurations_List(string organization, string project, string continuationToken, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/configurations&continuationToken=" + (continuationToken==null? "" : Uri.EscapeDataString(continuationToken))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestConfiguration[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a test configuration
		/// Configurations_Get {organization}/{project}/_apis/testplan/configurations/{testConfigurationId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="testConfigurationId">ID of the test configuration to get.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestConfiguration> Configurations_GetAsync(string organization, string project, int testConfigurationId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/configurations/"+testConfigurationId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a test configuration
		/// Configurations_Get {organization}/{project}/_apis/testplan/configurations/{testConfigurationId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="testConfigurationId">ID of the test configuration to get.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestConfiguration Configurations_Get(string organization, string project, int testConfigurationId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/configurations/"+testConfigurationId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a test plan.
		/// Test__Plans_Create {organization}/{project}/_apis/testplan/plans
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">A testPlanCreateParams object.TestPlanCreateParams</param>
		/// <returns>successful operation</returns>
		public async Task<TestPlan> Test__Plans_CreateAsync(string organization, string project, string api_version, TestPlanCreateParams requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/plans&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestPlan>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a test plan.
		/// Test__Plans_Create {organization}/{project}/_apis/testplan/plans
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">A testPlanCreateParams object.TestPlanCreateParams</param>
		/// <returns>successful operation</returns>
		public TestPlan Test__Plans_Create(string organization, string project, string api_version, TestPlanCreateParams requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/plans&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestPlan>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of test plans
		/// Test__Plans_List {organization}/{project}/_apis/testplan/plans
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="owner">Filter for test plan by owner ID or name</param>
		/// <param name="continuationToken">If the list of plans returned is not complete, a continuation token to query next batch of plans is included in the response header as "x-ms-continuationtoken". Omit this parameter to get the first batch of test plans.</param>
		/// <param name="includePlanDetails">Get all properties of the test plan</param>
		/// <param name="filterActivePlans">Get just the active plans</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestPlan[]> Test__Plans_ListAsync(string organization, string project, string owner, string continuationToken, bool includePlanDetails, bool filterActivePlans, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/plans&owner=" + (owner==null? "" : Uri.EscapeDataString(owner))+"&continuationToken=" + (continuationToken==null? "" : Uri.EscapeDataString(continuationToken))+"&includePlanDetails="+includePlanDetails+"&filterActivePlans="+filterActivePlans+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestPlan[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of test plans
		/// Test__Plans_List {organization}/{project}/_apis/testplan/plans
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="owner">Filter for test plan by owner ID or name</param>
		/// <param name="continuationToken">If the list of plans returned is not complete, a continuation token to query next batch of plans is included in the response header as "x-ms-continuationtoken". Omit this parameter to get the first batch of test plans.</param>
		/// <param name="includePlanDetails">Get all properties of the test plan</param>
		/// <param name="filterActivePlans">Get just the active plans</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestPlan[] Test__Plans_List(string organization, string project, string owner, string continuationToken, bool includePlanDetails, bool filterActivePlans, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/plans&owner=" + (owner==null? "" : Uri.EscapeDataString(owner))+"&continuationToken=" + (continuationToken==null? "" : Uri.EscapeDataString(continuationToken))+"&includePlanDetails="+includePlanDetails+"&filterActivePlans="+filterActivePlans+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestPlan[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a test plan.
		/// Test__Plans_Delete {organization}/{project}/_apis/testplan/plans/{planId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan to be deleted.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Test__Plans_DeleteAsync(string organization, string project, int planId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/plans/"+planId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a test plan.
		/// Test__Plans_Delete {organization}/{project}/_apis/testplan/plans/{planId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan to be deleted.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Test__Plans_Delete(string organization, string project, int planId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/plans/"+planId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a test plan by Id.
		/// Test__Plans_Get {organization}/{project}/_apis/testplan/plans/{planId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan to get.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestPlan> Test__Plans_GetAsync(string organization, string project, int planId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/plans/"+planId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestPlan>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a test plan by Id.
		/// Test__Plans_Get {organization}/{project}/_apis/testplan/plans/{planId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan to get.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestPlan Test__Plans_Get(string organization, string project, int planId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/plans/"+planId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestPlan>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create test suite.
		/// Test__Suites_Create {organization}/{project}/_apis/testplan/Plans/{planId}/suites
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan that contains the suites.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Parameters for suite creation</param>
		/// <returns>successful operation</returns>
		public async Task<TestSuite> Test__Suites_CreateAsync(string organization, string project, int planId, string api_version, TestSuiteCreateParams requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/"+planId+"/suites&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestSuite>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create test suite.
		/// Test__Suites_Create {organization}/{project}/_apis/testplan/Plans/{planId}/suites
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan that contains the suites.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Parameters for suite creation</param>
		/// <returns>successful operation</returns>
		public TestSuite Test__Suites_Create(string organization, string project, int planId, string api_version, TestSuiteCreateParams requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/"+planId+"/suites&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestSuite>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get test suites for plan.
		/// Test__Suites_Get_Test_Suites_For_Plan {organization}/{project}/_apis/testplan/Plans/{planId}/suites
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan for which suites are requested.</param>
		/// <param name="expand">Include the children suites and testers details.</param>
		/// <param name="continuationToken">If the list of suites returned is not complete, a continuation token to query next batch of suites is included in the response header as "x-ms-continuationtoken". Omit this parameter to get the first batch of test suites.</param>
		/// <param name="asTreeView">If the suites returned should be in a tree structure.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestSuite[]> Test__Suites_Get_Test_Suites_For_PlanAsync(string organization, string project, int planId, Test__Suites_Get_Test_Suites_For_PlanExpand expand, string continuationToken, bool asTreeView, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/"+planId+"/suites&expand=" + expand+"&continuationToken=" + (continuationToken==null? "" : Uri.EscapeDataString(continuationToken))+"&asTreeView="+asTreeView+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestSuite[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get test suites for plan.
		/// Test__Suites_Get_Test_Suites_For_Plan {organization}/{project}/_apis/testplan/Plans/{planId}/suites
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan for which suites are requested.</param>
		/// <param name="expand">Include the children suites and testers details.</param>
		/// <param name="continuationToken">If the list of suites returned is not complete, a continuation token to query next batch of suites is included in the response header as "x-ms-continuationtoken". Omit this parameter to get the first batch of test suites.</param>
		/// <param name="asTreeView">If the suites returned should be in a tree structure.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestSuite[] Test__Suites_Get_Test_Suites_For_Plan(string organization, string project, int planId, Test__Suites_Get_Test_Suites_For_PlanExpand expand, string continuationToken, bool asTreeView, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/"+planId+"/suites&expand=" + expand+"&continuationToken=" + (continuationToken==null? "" : Uri.EscapeDataString(continuationToken))+"&asTreeView="+asTreeView+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestSuite[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete test suite.
		/// Test__Suites_Delete {organization}/{project}/_apis/testplan/Plans/{planId}/suites/{suiteId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan that contains the suite.</param>
		/// <param name="suiteId">ID of the test suite to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Test__Suites_DeleteAsync(string organization, string project, int planId, int suiteId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/"+planId+"/suites/"+suiteId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete test suite.
		/// Test__Suites_Delete {organization}/{project}/_apis/testplan/Plans/{planId}/suites/{suiteId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan that contains the suite.</param>
		/// <param name="suiteId">ID of the test suite to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Test__Suites_Delete(string organization, string project, int planId, int suiteId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/"+planId+"/suites/"+suiteId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get test suite by suite id.
		/// Test__Suites_Get {organization}/{project}/_apis/testplan/Plans/{planId}/suites/{suiteId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan that contains the suites.</param>
		/// <param name="suiteId">ID of the suite to get.</param>
		/// <param name="expand">Include the children suites and testers details</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestSuite> Test__Suites_GetAsync(string organization, string project, int planId, int suiteId, Test__Suites_Get_Test_Suites_For_PlanExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/"+planId+"/suites/"+suiteId+"&expand=" + expand+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestSuite>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get test suite by suite id.
		/// Test__Suites_Get {organization}/{project}/_apis/testplan/Plans/{planId}/suites/{suiteId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan that contains the suites.</param>
		/// <param name="suiteId">ID of the suite to get.</param>
		/// <param name="expand">Include the children suites and testers details</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestSuite Test__Suites_Get(string organization, string project, int planId, int suiteId, Test__Suites_Get_Test_Suites_For_PlanExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/"+planId+"/suites/"+suiteId+"&expand=" + expand+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestSuite>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add test cases to a suite with specified configurations
		/// Suite_Test_Case_Add {organization}/{project}/_apis/testplan/Plans/{planId}/Suites/{suiteId}/TestCase
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan to which test cases are to be added.</param>
		/// <param name="suiteId">ID of the test suite to which test cases are to be added.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">SuiteTestCaseCreateUpdateParameters object.</param>
		/// <returns>successful operation</returns>
		public async Task<TestCase[]> Suite_Test_Case_AddAsync(string organization, string project, int planId, int suiteId, string api_version, SuiteTestCaseCreateUpdateParameters[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/"+planId+"/Suites/"+suiteId+"/TestCase&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestCase[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add test cases to a suite with specified configurations
		/// Suite_Test_Case_Add {organization}/{project}/_apis/testplan/Plans/{planId}/Suites/{suiteId}/TestCase
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan to which test cases are to be added.</param>
		/// <param name="suiteId">ID of the test suite to which test cases are to be added.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">SuiteTestCaseCreateUpdateParameters object.</param>
		/// <returns>successful operation</returns>
		public TestCase[] Suite_Test_Case_Add(string organization, string project, int planId, int suiteId, string api_version, SuiteTestCaseCreateUpdateParameters[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/"+planId+"/Suites/"+suiteId+"/TestCase&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestCase[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Test Case List return those test cases which have all the configuration Ids as mentioned in the optional parameter. If configuration Ids is null, it return all the test cases
		/// Suite_Test_Case_Get_Test_Case_List {organization}/{project}/_apis/testplan/Plans/{planId}/Suites/{suiteId}/TestCase
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan for which test cases are requested.</param>
		/// <param name="suiteId">ID of the test suite for which test cases are requested.</param>
		/// <param name="testIds">Test Case Ids to be fetched.</param>
		/// <param name="configurationIds">Fetch Test Cases which contains all the configuration Ids specified.</param>
		/// <param name="witFields">Get the list of witFields.</param>
		/// <param name="continuationToken">If the list of test cases returned is not complete, a continuation token to query next batch of test cases is included in the response header as "x-ms-continuationtoken". Omit this parameter to get the first batch of test cases.</param>
		/// <param name="returnIdentityRef">If set to true, returns all identity fields, like AssignedTo, ActivatedBy etc., as IdentityRef objects. If set to false, these fields are returned as unique names in string format. This is false by default.</param>
		/// <param name="expand">If set to false, will get a smaller payload containing only basic details about the suite test case object</param>
		/// <param name="excludeFlags">Flag to exclude various values from payload. For example to remove point assignments pass exclude = 1. To remove extra information (links, test plan , test suite) pass exclude = 2. To remove both extra information and point assignments pass exclude = 3 (1 + 2).</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestCase[]> Suite_Test_Case_Get_Test_Case_ListAsync(string organization, string project, int planId, int suiteId, string testIds, string configurationIds, string witFields, string continuationToken, bool returnIdentityRef, bool expand, Suite_Test_Case_Get_Test_Case_ListExcludeFlags excludeFlags, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/"+planId+"/Suites/"+suiteId+"/TestCase&testIds=" + (testIds==null? "" : Uri.EscapeDataString(testIds))+"&configurationIds=" + (configurationIds==null? "" : Uri.EscapeDataString(configurationIds))+"&witFields=" + (witFields==null? "" : Uri.EscapeDataString(witFields))+"&continuationToken=" + (continuationToken==null? "" : Uri.EscapeDataString(continuationToken))+"&returnIdentityRef="+returnIdentityRef+"&expand="+expand+"&excludeFlags=" + excludeFlags+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestCase[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Test Case List return those test cases which have all the configuration Ids as mentioned in the optional parameter. If configuration Ids is null, it return all the test cases
		/// Suite_Test_Case_Get_Test_Case_List {organization}/{project}/_apis/testplan/Plans/{planId}/Suites/{suiteId}/TestCase
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan for which test cases are requested.</param>
		/// <param name="suiteId">ID of the test suite for which test cases are requested.</param>
		/// <param name="testIds">Test Case Ids to be fetched.</param>
		/// <param name="configurationIds">Fetch Test Cases which contains all the configuration Ids specified.</param>
		/// <param name="witFields">Get the list of witFields.</param>
		/// <param name="continuationToken">If the list of test cases returned is not complete, a continuation token to query next batch of test cases is included in the response header as "x-ms-continuationtoken". Omit this parameter to get the first batch of test cases.</param>
		/// <param name="returnIdentityRef">If set to true, returns all identity fields, like AssignedTo, ActivatedBy etc., as IdentityRef objects. If set to false, these fields are returned as unique names in string format. This is false by default.</param>
		/// <param name="expand">If set to false, will get a smaller payload containing only basic details about the suite test case object</param>
		/// <param name="excludeFlags">Flag to exclude various values from payload. For example to remove point assignments pass exclude = 1. To remove extra information (links, test plan , test suite) pass exclude = 2. To remove both extra information and point assignments pass exclude = 3 (1 + 2).</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestCase[] Suite_Test_Case_Get_Test_Case_List(string organization, string project, int planId, int suiteId, string testIds, string configurationIds, string witFields, string continuationToken, bool returnIdentityRef, bool expand, Suite_Test_Case_Get_Test_Case_ListExcludeFlags excludeFlags, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/"+planId+"/Suites/"+suiteId+"/TestCase&testIds=" + (testIds==null? "" : Uri.EscapeDataString(testIds))+"&configurationIds=" + (configurationIds==null? "" : Uri.EscapeDataString(configurationIds))+"&witFields=" + (witFields==null? "" : Uri.EscapeDataString(witFields))+"&continuationToken=" + (continuationToken==null? "" : Uri.EscapeDataString(continuationToken))+"&returnIdentityRef="+returnIdentityRef+"&expand="+expand+"&excludeFlags=" + excludeFlags+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestCase[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Test Cases For a Suite.
		/// Suite_Test_Case_Get_Test_Case {organization}/{project}/_apis/testplan/Plans/{planId}/Suites/{suiteId}/TestCase/{testCaseIds}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan for which test cases are requested.</param>
		/// <param name="suiteId">ID of the test suite for which test cases are requested.</param>
		/// <param name="testCaseIds">Test Case Ids to be fetched.</param>
		/// <param name="witFields">Get the list of witFields.</param>
		/// <param name="returnIdentityRef">If set to true, returns all identity fields, like AssignedTo, ActivatedBy etc., as IdentityRef objects. If set to false, these fields are returned as unique names in string format. This is false by default.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestCase[]> Suite_Test_Case_Get_Test_CaseAsync(string organization, string project, int planId, int suiteId, string testCaseIds, string witFields, bool returnIdentityRef, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/"+planId+"/Suites/"+suiteId+"/TestCase/"+ (testCaseIds==null? "" : Uri.EscapeDataString(testCaseIds))+"&witFields=" + (witFields==null? "" : Uri.EscapeDataString(witFields))+"&returnIdentityRef="+returnIdentityRef+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestCase[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Test Cases For a Suite.
		/// Suite_Test_Case_Get_Test_Case {organization}/{project}/_apis/testplan/Plans/{planId}/Suites/{suiteId}/TestCase/{testCaseIds}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan for which test cases are requested.</param>
		/// <param name="suiteId">ID of the test suite for which test cases are requested.</param>
		/// <param name="testCaseIds">Test Case Ids to be fetched.</param>
		/// <param name="witFields">Get the list of witFields.</param>
		/// <param name="returnIdentityRef">If set to true, returns all identity fields, like AssignedTo, ActivatedBy etc., as IdentityRef objects. If set to false, these fields are returned as unique names in string format. This is false by default.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestCase[] Suite_Test_Case_Get_Test_Case(string organization, string project, int planId, int suiteId, string testCaseIds, string witFields, bool returnIdentityRef, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/"+planId+"/Suites/"+suiteId+"/TestCase/"+ (testCaseIds==null? "" : Uri.EscapeDataString(testCaseIds))+"&witFields=" + (witFields==null? "" : Uri.EscapeDataString(witFields))+"&returnIdentityRef="+returnIdentityRef+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestCase[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes test cases from a suite based on the list of test case Ids provided.
		/// Suite_Test_Case_Remove_Test_Cases_From_Suite {organization}/{project}/_apis/testplan/Plans/{planId}/Suites/{suiteId}/TestCase/{testCaseIds}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan from which test cases are to be removed.</param>
		/// <param name="suiteId">ID of the test suite from which test cases are to be removed.</param>
		/// <param name="testCaseIds">Test Case Ids to be removed.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Suite_Test_Case_Remove_Test_Cases_From_SuiteAsync(string organization, string project, int planId, int suiteId, string testCaseIds, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/"+planId+"/Suites/"+suiteId+"/TestCase/"+ (testCaseIds==null? "" : Uri.EscapeDataString(testCaseIds))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes test cases from a suite based on the list of test case Ids provided.
		/// Suite_Test_Case_Remove_Test_Cases_From_Suite {organization}/{project}/_apis/testplan/Plans/{planId}/Suites/{suiteId}/TestCase/{testCaseIds}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan from which test cases are to be removed.</param>
		/// <param name="suiteId">ID of the test suite from which test cases are to be removed.</param>
		/// <param name="testCaseIds">Test Case Ids to be removed.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Suite_Test_Case_Remove_Test_Cases_From_Suite(string organization, string project, int planId, int suiteId, string testCaseIds, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/"+planId+"/Suites/"+suiteId+"/TestCase/"+ (testCaseIds==null? "" : Uri.EscapeDataString(testCaseIds))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the points inside a suite based on some filters
		/// Test_Point_Get_Points_List {organization}/{project}/_apis/testplan/Plans/{planId}/Suites/{suiteId}/TestPoint
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan for which test points are requested.</param>
		/// <param name="suiteId">ID of the test suite for which test points are requested</param>
		/// <param name="testPointIds">ID of test points to fetch.</param>
		/// <param name="testCaseId">Get Test Points for specific test case Ids.</param>
		/// <param name="continuationToken">If the list of test point returned is not complete, a continuation token to query next batch of test points is included in the response header as "x-ms-continuationtoken". Omit this parameter to get the first batch of test points.</param>
		/// <param name="returnIdentityRef">If set to true, returns the AssignedTo field in TestCaseReference as IdentityRef object.</param>
		/// <param name="includePointDetails">If set to false, will get a smaller payload containing only basic details about the test point object</param>
		/// <param name="isRecursive">If set to true, will also fetch test points belonging to child suites recursively.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestPoint[]> Test_Point_Get_Points_ListAsync(string organization, string project, int planId, int suiteId, string testPointIds, string testCaseId, string continuationToken, bool returnIdentityRef, bool includePointDetails, bool isRecursive, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/"+planId+"/Suites/"+suiteId+"/TestPoint&testPointIds=" + (testPointIds==null? "" : Uri.EscapeDataString(testPointIds))+"&testCaseId=" + (testCaseId==null? "" : Uri.EscapeDataString(testCaseId))+"&continuationToken=" + (continuationToken==null? "" : Uri.EscapeDataString(continuationToken))+"&returnIdentityRef="+returnIdentityRef+"&includePointDetails="+includePointDetails+"&isRecursive="+isRecursive+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestPoint[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the points inside a suite based on some filters
		/// Test_Point_Get_Points_List {organization}/{project}/_apis/testplan/Plans/{planId}/Suites/{suiteId}/TestPoint
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan for which test points are requested.</param>
		/// <param name="suiteId">ID of the test suite for which test points are requested</param>
		/// <param name="testPointIds">ID of test points to fetch.</param>
		/// <param name="testCaseId">Get Test Points for specific test case Ids.</param>
		/// <param name="continuationToken">If the list of test point returned is not complete, a continuation token to query next batch of test points is included in the response header as "x-ms-continuationtoken". Omit this parameter to get the first batch of test points.</param>
		/// <param name="returnIdentityRef">If set to true, returns the AssignedTo field in TestCaseReference as IdentityRef object.</param>
		/// <param name="includePointDetails">If set to false, will get a smaller payload containing only basic details about the test point object</param>
		/// <param name="isRecursive">If set to true, will also fetch test points belonging to child suites recursively.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestPoint[] Test_Point_Get_Points_List(string organization, string project, int planId, int suiteId, string testPointIds, string testCaseId, string continuationToken, bool returnIdentityRef, bool includePointDetails, bool isRecursive, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/"+planId+"/Suites/"+suiteId+"/TestPoint&testPointIds=" + (testPointIds==null? "" : Uri.EscapeDataString(testPointIds))+"&testCaseId=" + (testCaseId==null? "" : Uri.EscapeDataString(testCaseId))+"&continuationToken=" + (continuationToken==null? "" : Uri.EscapeDataString(continuationToken))+"&returnIdentityRef="+returnIdentityRef+"&includePointDetails="+includePointDetails+"&isRecursive="+isRecursive+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestPoint[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of points based on point Ids provided.
		/// Test_Point_Get_Points {organization}/{project}/_apis/testplan/Plans/{planId}/Suites/{suiteId}/TestPoint/{pointIds}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan for which test points are requested.</param>
		/// <param name="suiteId">ID of the test suite for which test points are requested.</param>
		/// <param name="pointIds">ID of test points to be fetched.</param>
		/// <param name="returnIdentityRef">If set to true, returns the AssignedTo field in TestCaseReference as IdentityRef object.</param>
		/// <param name="includePointDetails">If set to false, will get a smaller payload containing only basic details about the test point object</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestPoint[]> Test_Point_Get_PointsAsync(string organization, string project, int planId, int suiteId, string pointIds, bool returnIdentityRef, bool includePointDetails, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/"+planId+"/Suites/"+suiteId+"/TestPoint/"+ (pointIds==null? "" : Uri.EscapeDataString(pointIds))+"&returnIdentityRef="+returnIdentityRef+"&includePointDetails="+includePointDetails+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestPoint[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of points based on point Ids provided.
		/// Test_Point_Get_Points {organization}/{project}/_apis/testplan/Plans/{planId}/Suites/{suiteId}/TestPoint/{pointIds}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="planId">ID of the test plan for which test points are requested.</param>
		/// <param name="suiteId">ID of the test suite for which test points are requested.</param>
		/// <param name="pointIds">ID of test points to be fetched.</param>
		/// <param name="returnIdentityRef">If set to true, returns the AssignedTo field in TestCaseReference as IdentityRef object.</param>
		/// <param name="includePointDetails">If set to false, will get a smaller payload containing only basic details about the test point object</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestPoint[] Test_Point_Get_Points(string organization, string project, int planId, int suiteId, string pointIds, bool returnIdentityRef, bool includePointDetails, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/"+planId+"/Suites/"+suiteId+"/TestPoint/"+ (pointIds==null? "" : Uri.EscapeDataString(pointIds))+"&returnIdentityRef="+returnIdentityRef+"&includePointDetails="+includePointDetails+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestPoint[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clone test plan
		/// Test_Plan_Clone_Clone_Test_Plan {organization}/{project}/_apis/testplan/Plans/CloneOperation
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="deepClone">Clones all the associated test cases as well</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Plan Clone Request Body detail TestPlanCloneRequest</param>
		/// <returns>successful operation</returns>
		public async Task<CloneTestPlanOperationInformation> Test_Plan_Clone_Clone_Test_PlanAsync(string organization, string project, bool deepClone, string api_version, CloneTestPlanParams requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/CloneOperation&deepClone="+deepClone+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CloneTestPlanOperationInformation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Clone test plan
		/// Test_Plan_Clone_Clone_Test_Plan {organization}/{project}/_apis/testplan/Plans/CloneOperation
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="deepClone">Clones all the associated test cases as well</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Plan Clone Request Body detail TestPlanCloneRequest</param>
		/// <returns>successful operation</returns>
		public CloneTestPlanOperationInformation Test_Plan_Clone_Clone_Test_Plan(string organization, string project, bool deepClone, string api_version, CloneTestPlanParams requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/CloneOperation&deepClone="+deepClone+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CloneTestPlanOperationInformation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get clone information.
		/// Test_Plan_Clone_Get {organization}/{project}/_apis/testplan/Plans/CloneOperation/{cloneOperationId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="cloneOperationId">Operation ID returned when we queue a clone operation</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<CloneTestPlanOperationInformation> Test_Plan_Clone_GetAsync(string organization, string project, int cloneOperationId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/CloneOperation/"+cloneOperationId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CloneTestPlanOperationInformation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get clone information.
		/// Test_Plan_Clone_Get {organization}/{project}/_apis/testplan/Plans/CloneOperation/{cloneOperationId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="cloneOperationId">Operation ID returned when we queue a clone operation</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public CloneTestPlanOperationInformation Test_Plan_Clone_Get(string organization, string project, int cloneOperationId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Plans/CloneOperation/"+cloneOperationId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CloneTestPlanOperationInformation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of test suite entries in the test suite.
		/// Test__Suite__Entry_List {organization}/{project}/_apis/testplan/suiteentry/{suiteId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="suiteId">Id of the parent suite.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<SuiteEntry[]> Test__Suite__Entry_ListAsync(string organization, string project, int suiteId, SuiteEntryUpdateParamsSuiteEntryType suiteEntryType, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/suiteentry/"+suiteId+"&suiteEntryType=" + suiteEntryType+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SuiteEntry[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of test suite entries in the test suite.
		/// Test__Suite__Entry_List {organization}/{project}/_apis/testplan/suiteentry/{suiteId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="suiteId">Id of the parent suite.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public SuiteEntry[] Test__Suite__Entry_List(string organization, string project, int suiteId, SuiteEntryUpdateParamsSuiteEntryType suiteEntryType, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/suiteentry/"+suiteId+"&suiteEntryType=" + suiteEntryType+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SuiteEntry[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clone test suite
		/// Test_Suite_Clone_Clone_Test_Suite {organization}/{project}/_apis/testplan/Suites/CloneOperation
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="deepClone">Clones all the associated test cases as well</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Suite Clone Request Body detail TestSuiteCloneRequest</param>
		/// <returns>successful operation</returns>
		public async Task<CloneTestSuiteOperationInformation> Test_Suite_Clone_Clone_Test_SuiteAsync(string organization, string project, bool deepClone, string api_version, CloneTestSuiteParams requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Suites/CloneOperation&deepClone="+deepClone+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CloneTestSuiteOperationInformation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Clone test suite
		/// Test_Suite_Clone_Clone_Test_Suite {organization}/{project}/_apis/testplan/Suites/CloneOperation
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="deepClone">Clones all the associated test cases as well</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Suite Clone Request Body detail TestSuiteCloneRequest</param>
		/// <returns>successful operation</returns>
		public CloneTestSuiteOperationInformation Test_Suite_Clone_Clone_Test_Suite(string organization, string project, bool deepClone, string api_version, CloneTestSuiteParams requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Suites/CloneOperation&deepClone="+deepClone+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CloneTestSuiteOperationInformation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get clone information.
		/// Test_Suite_Clone_Get {organization}/{project}/_apis/testplan/Suites/CloneOperation/{cloneOperationId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="cloneOperationId">Operation ID returned when we queue a clone operation</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<CloneTestSuiteOperationInformation> Test_Suite_Clone_GetAsync(string organization, string project, int cloneOperationId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Suites/CloneOperation/"+cloneOperationId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CloneTestSuiteOperationInformation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get clone information.
		/// Test_Suite_Clone_Get {organization}/{project}/_apis/testplan/Suites/CloneOperation/{cloneOperationId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="cloneOperationId">Operation ID returned when we queue a clone operation</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public CloneTestSuiteOperationInformation Test_Suite_Clone_Get(string organization, string project, int cloneOperationId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/Suites/CloneOperation/"+cloneOperationId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CloneTestSuiteOperationInformation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a test case.
		/// Test_Cases_Delete {organization}/{project}/_apis/testplan/testcases/{testCaseId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="testCaseId">Id of test case to be deleted.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Test_Cases_DeleteAsync(string organization, string project, int testCaseId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/testcases/"+testCaseId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a test case.
		/// Test_Cases_Delete {organization}/{project}/_apis/testplan/testcases/{testCaseId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="testCaseId">Id of test case to be deleted.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Test_Cases_Delete(string organization, string project, int testCaseId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/testcases/"+testCaseId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a test variable.
		/// Variables_Create {organization}/{project}/_apis/testplan/variables
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">TestVariableCreateUpdateParameters</param>
		/// <returns>successful operation</returns>
		public async Task<TestVariable> Variables_CreateAsync(string organization, string project, string api_version, TestVariableCreateUpdateParameters requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/variables&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestVariable>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a test variable.
		/// Variables_Create {organization}/{project}/_apis/testplan/variables
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">TestVariableCreateUpdateParameters</param>
		/// <returns>successful operation</returns>
		public TestVariable Variables_Create(string organization, string project, string api_version, TestVariableCreateUpdateParameters requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/variables&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestVariable>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of test variables.
		/// Variables_List {organization}/{project}/_apis/testplan/variables
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="continuationToken">If the list of variables returned is not complete, a continuation token to query next batch of variables is included in the response header as "x-ms-continuationtoken". Omit this parameter to get the first batch of test variables.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestVariable[]> Variables_ListAsync(string organization, string project, string continuationToken, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/variables&continuationToken=" + (continuationToken==null? "" : Uri.EscapeDataString(continuationToken))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestVariable[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of test variables.
		/// Variables_List {organization}/{project}/_apis/testplan/variables
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="continuationToken">If the list of variables returned is not complete, a continuation token to query next batch of variables is included in the response header as "x-ms-continuationtoken". Omit this parameter to get the first batch of test variables.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestVariable[] Variables_List(string organization, string project, string continuationToken, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/variables&continuationToken=" + (continuationToken==null? "" : Uri.EscapeDataString(continuationToken))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestVariable[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a test variable by its ID.
		/// Variables_Delete {organization}/{project}/_apis/testplan/variables/{testVariableId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="testVariableId">ID of the test variable to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Variables_DeleteAsync(string organization, string project, int testVariableId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/variables/"+testVariableId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a test variable by its ID.
		/// Variables_Delete {organization}/{project}/_apis/testplan/variables/{testVariableId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="testVariableId">ID of the test variable to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Variables_Delete(string organization, string project, int testVariableId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/variables/"+testVariableId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a test variable by its ID.
		/// Variables_Get {organization}/{project}/_apis/testplan/variables/{testVariableId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="testVariableId">ID of the test variable to get.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestVariable> Variables_GetAsync(string organization, string project, int testVariableId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/variables/"+testVariableId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestVariable>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a test variable by its ID.
		/// Variables_Get {organization}/{project}/_apis/testplan/variables/{testVariableId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="testVariableId">ID of the test variable to get.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestVariable Variables_Get(string organization, string project, int testVariableId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/testplan/variables/"+testVariableId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestVariable>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Test__Suites_Get_Test_Suites_For_PlanExpand
	{
		
		none = 0,
		
		children = 1,
		
		defaultTesters = 2,
	}
	
	public enum Suite_Test_Case_Get_Test_Case_ListExcludeFlags
	{
		
		none = 0,
		
		pointAssignments = 1,
		
		extraInformation = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
