//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public class AgentGroup
	{
		
		public IdentityRef CreatedBy { get; set; }
		
		/// <summary>
		/// Time agent group was created
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// Id of the agent group
		/// </summary>
		public string GroupId { get; set; }
		
		/// <summary>
		/// The name of the agent group
		/// </summary>
		public string GroupName { get; set; }
		
		public AgentGroupAccessData[] MachineAccessData { get; set; }
		
		/// <summary>
		/// This can eventually evolve as the ultimate JSON file that user can use to configure their machine(s) against CLT
		/// </summary>
		public WebApiUserLoadTestMachineInput MachineConfiguration { get; set; }
		
		/// <summary>
		/// Tenant Id
		/// </summary>
		public string TenantId { get; set; }
	}
	
	public class IdentityRef
	{
		
		public string DirectoryAlias { get; set; }
		
		public string Id { get; set; }
		
		public string ImageUrl { get; set; }
		
		public System.Nullable<System.Boolean> Inactive { get; set; }
		
		public System.Nullable<System.Boolean> IsAadIdentity { get; set; }
		
		public System.Nullable<System.Boolean> IsContainer { get; set; }
		
		public System.Nullable<System.Boolean> IsDeletedInOrigin { get; set; }
		
		public string ProfileUrl { get; set; }
		
		public string UniqueName { get; set; }
	}
	
	public class AgentGroupAccessData
	{
		
		/// <summary>
		/// Type Specific details
		/// </summary>
		public string Details { get; set; }
		
		/// <summary>
		/// Access string
		/// </summary>
		public string StorageConnectionString { get; set; }
		
		/// <summary>
		/// Endpoint for the service
		/// </summary>
		public string StorageEndPoint { get; set; }
		
		/// <summary>
		/// Identifier for the storage (eg. table name)
		/// </summary>
		public string StorageName { get; set; }
		
		/// <summary>
		/// Type of the store (table, queue, blob)
		/// </summary>
		public string StorageType { get; set; }
	}
	
	/// <summary>
	/// This can eventually evolve as the ultimate JSON file that user can use to configure their machine(s) against CLT
	/// </summary>
	public class WebApiUserLoadTestMachineInput
	{
		
		public string AgentGroupName { get; set; }
		
		public string TenantId { get; set; }
		
		public string UserLoadAgentResourcesUri { get; set; }
		
		public string VstsAccountUri { get; set; }
	}
	
	public class Application
	{
		
		/// <summary>
		/// Unique Id of the Application Component
		/// </summary>
		public string ApplicationId { get; set; }
		
		/// <summary>
		/// Description of the Application component
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// The Name of the Application component
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Path identifier of the Application component
		/// </summary>
		public string Path { get; set; }
		
		/// <summary>
		/// Character used to separate paths for counters
		/// </summary>
		public string PathSeperator { get; set; }
		
		/// <summary>
		/// Type identifier of the Application component under test
		/// </summary>
		public string Type { get; set; }
		
		/// <summary>
		/// Version of the Application Component
		/// </summary>
		public string Version { get; set; }
	}
	
	public class ApplicationCounters
	{
		
		/// <summary>
		/// The unique Id of the Application that the counter belongs
		/// </summary>
		public string ApplicationId { get; set; }
		
		/// <summary>
		/// Description of autCounter
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// The unique Id for the AutCounter
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Whether the autCounter is a default counter or not
		/// </summary>
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		/// <summary>
		/// Name of the AutCounter
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The Path of the the autcounter wrt to hierarchy
		/// </summary>
		public string Path { get; set; }
	}
	
	public class ApplicationType
	{
		
		/// <summary>
		/// Helper link url
		/// </summary>
		public string ActionUriLink { get; set; }
		
		/// <summary>
		/// The link that points to aut results site
		/// </summary>
		public string AutPortalLink { get; set; }
		
		/// <summary>
		/// true if application results collection is enabled for this tenant
		/// </summary>
		public System.Nullable<System.Boolean> IsEnabled { get; set; }
		
		/// <summary>
		/// the max no. of application components allowed for collection per run
		/// </summary>
		public System.Nullable<System.Int32> MaxComponentsAllowedForCollection { get; set; }
		
		/// <summary>
		/// The max no. of counters that can be collected per aut
		/// </summary>
		public System.Nullable<System.Int32> MaxCountersAllowed { get; set; }
		
		/// <summary>
		/// Application Type
		/// </summary>
		public string Type { get; set; }
	}
	
	public class BrowserMix
	{
		
		public string BrowserName { get; set; }
		
		public System.Nullable<System.Single> BrowserPercentage { get; set; }
	}
	
	public class CltCustomerIntelligenceData
	{
		
		public string Area { get; set; }
		
		public string Feature { get; set; }
		
		public System.Collections.Generic.Dictionary<string, object> Properties { get; set; }
	}
	
	public class CounterGroup
	{
		
		public string GroupName { get; set; }
		
		public string Url { get; set; }
	}
	
	public class CounterInstanceSamples
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
		
		public string CounterInstanceId { get; set; }
		
		/// <summary>
		/// The time of next refresh
		/// </summary>
		public System.Nullable<System.DateTimeOffset> NextRefreshTime { get; set; }
		
		public CounterSample[] Values { get; set; }
	}
	
	public class CounterSample
	{
		
		public System.Nullable<System.Int64> BaseValue { get; set; }
		
		public System.Nullable<System.Single> ComputedValue { get; set; }
		
		public System.Nullable<System.Int64> CounterFrequency { get; set; }
		
		public string CounterInstanceId { get; set; }
		
		public string CounterType { get; set; }
		
		public System.Nullable<System.DateTimeOffset> IntervalEndDate { get; set; }
		
		public System.Nullable<System.Int32> IntervalNumber { get; set; }
		
		public System.Nullable<System.Int64> RawValue { get; set; }
		
		public System.Nullable<System.Int64> SystemFrequency { get; set; }
		
		public System.Nullable<System.Int64> TimeStamp { get; set; }
	}
	
	public class CounterSampleQueryDetails
	{
		
		/// <summary>
		/// The instanceId for which samples are required
		/// </summary>
		public string CounterInstanceId { get; set; }
		
		public System.Nullable<System.Int32> FromInterval { get; set; }
		
		public System.Nullable<System.Int32> ToInterval { get; set; }
	}
	
	public class CounterSamplesResult
	{
		
		/// <summary>
		/// Count of the samples
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Maximum number of samples returned in this object
		/// </summary>
		public System.Nullable<System.Int32> MaxBatchSize { get; set; }
		
		/// <summary>
		/// Count of the samples
		/// </summary>
		public System.Nullable<System.Int32> TotalSamplesCount { get; set; }
		
		/// <summary>
		/// The result samples
		/// </summary>
		public CounterInstanceSamples[] Values { get; set; }
	}
	
	public class Diagnostics
	{
		
		public string DiagnosticStoreConnectionString { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		public string RelativePathToDiagnosticFiles { get; set; }
	}
	
	public class DropAccessData
	{
		
		public string DropContainerUrl { get; set; }
		
		/// <summary>
		/// The SaSkey to use for the drop.
		/// </summary>
		public string SasKey { get; set; }
	}
	
	public class ErrorDetails
	{
		
		public System.Nullable<System.DateTimeOffset> LastErrorDate { get; set; }
		
		public string MessageText { get; set; }
		
		public System.Nullable<System.Int32> Occurrences { get; set; }
		
		public string Request { get; set; }
		
		public string ScenarioName { get; set; }
		
		public string StackTrace { get; set; }
		
		public string TestCaseName { get; set; }
	}
	
	public class GraphSubjectBase
	{
		
		public ReferenceLinks _links { get; set; }
		
		public string Descriptor { get; set; }
		
		public string DisplayName { get; set; }
		
		public string Url { get; set; }
	}
	
	public class ReferenceLinks
	{
		
		public System.Collections.Generic.Dictionary<string, object> Links { get; set; }
	}
	
	public class LoadGenerationGeoLocation
	{
		
		public string Location { get; set; }
		
		public System.Nullable<System.Int32> Percentage { get; set; }
	}
	
	public class LoadTest
	{
	}
	
	public class LoadTestDefinition
	{
		
		public System.Nullable<System.Int32> AgentCount { get; set; }
		
		public BrowserMix[] BrowserMixs { get; set; }
		
		public System.Nullable<System.Int32> CoreCount { get; set; }
		
		public System.Nullable<System.Int32> CoresPerAgent { get; set; }
		
		public LoadGenerationGeoLocation[] LoadGenerationGeoLocations { get; set; }
		
		public string LoadPatternName { get; set; }
		
		public string LoadTestName { get; set; }
		
		public System.Nullable<System.Int32> MaxVusers { get; set; }
		
		public System.Nullable<System.Int32> RunDuration { get; set; }
		
		public System.Nullable<System.Int32> SamplingRate { get; set; }
		
		public System.Nullable<System.Int32> ThinkTime { get; set; }
		
		public string[] Urls { get; set; }
	}
	
	public class LoadTestErrors
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
		
		public System.Nullable<System.Int32> Occurrences { get; set; }
		
		public Type[] Types { get; set; }
		
		public string Url { get; set; }
	}
	
	public class Type
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
		
		public System.Nullable<System.Int32> Occurrences { get; set; }
		
		public SubType[] SubTypes { get; set; }
		
		public string TypeName { get; set; }
		
		public string Url { get; set; }
	}
	
	public class SubType
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
		
		public ErrorDetails[] ErrorDetailList { get; set; }
		
		public System.Nullable<System.Int32> Occurrences { get; set; }
		
		public string SubTypeName { get; set; }
		
		public string Url { get; set; }
	}
	
	public class LoadTestRunDetails
	{
		
		public System.Nullable<System.Int32> VirtualUserCount { get; set; }
	}
	
	public class LoadTestRunSettings
	{
		
		public System.Nullable<System.Int32> AgentCount { get; set; }
		
		public System.Nullable<System.Int32> CoreCount { get; set; }
		
		public System.Nullable<System.Int32> CoresPerAgent { get; set; }
		
		public System.Nullable<System.Int32> Duration { get; set; }
		
		public System.Nullable<LoadTestRunSettingsLoadGeneratorMachinesType> LoadGeneratorMachinesType { get; set; }
		
		public System.Nullable<System.Int32> SamplingInterval { get; set; }
		
		public System.Nullable<System.Int32> WarmUpDuration { get; set; }
	}
	
	public enum LoadTestRunSettingsLoadGeneratorMachinesType
	{
		
		_default = 0,
		
		cltLoadAgent = 1,
		
		userLoadAgent = 2,
	}
	
	public class OverridableRunSettings
	{
		
		public System.Nullable<OverridableRunSettingsLoadGeneratorMachinesType> LoadGeneratorMachinesType { get; set; }
		
		public StaticAgentRunSetting StaticAgentRunSettings { get; set; }
	}
	
	public enum OverridableRunSettingsLoadGeneratorMachinesType
	{
		
		_default = 0,
		
		cltLoadAgent = 1,
		
		userLoadAgent = 2,
	}
	
	public class StaticAgentRunSetting
	{
		
		public System.Nullable<StaticAgentRunSettingLoadGeneratorMachinesType> LoadGeneratorMachinesType { get; set; }
		
		public string StaticAgentGroupName { get; set; }
	}
	
	public enum StaticAgentRunSettingLoadGeneratorMachinesType
	{
		
		_default = 0,
		
		cltLoadAgent = 1,
		
		userLoadAgent = 2,
	}
	
	public class PageSummary
	{
		
		public System.Nullable<System.Double> AveragePageTime { get; set; }
		
		public string PageUrl { get; set; }
		
		public System.Nullable<System.Int32> PercentagePagesMeetingGoal { get; set; }
		
		public SummaryPercentileData[] PercentileData { get; set; }
		
		public string ScenarioName { get; set; }
		
		public string TestName { get; set; }
		
		public System.Nullable<System.Int32> TotalPages { get; set; }
	}
	
	public class SummaryPercentileData
	{
		
		public System.Nullable<System.Int32> Percentile { get; set; }
		
		public System.Nullable<System.Double> PercentileValue { get; set; }
	}
	
	public class RequestSummary
	{
		
		public System.Nullable<System.Double> AverageResponseTime { get; set; }
		
		public System.Nullable<System.Int32> FailedRequests { get; set; }
		
		public System.Nullable<System.Int32> PassedRequests { get; set; }
		
		public SummaryPercentileData[] PercentileData { get; set; }
		
		public System.Nullable<System.Double> RequestsPerSec { get; set; }
		
		public string RequestUrl { get; set; }
		
		public string ScenarioName { get; set; }
		
		public string TestName { get; set; }
		
		public System.Nullable<System.Int32> TotalRequests { get; set; }
	}
	
	public class ScenarioSummary
	{
		
		public System.Nullable<System.Int32> MaxUserLoad { get; set; }
		
		public System.Nullable<System.Int32> MinUserLoad { get; set; }
		
		public string ScenarioName { get; set; }
	}
	
	public class TenantDetails
	{
		
		/// <summary>
		/// Access details
		/// </summary>
		public AgentGroupAccessData[] AccessDetails { get; set; }
		
		/// <summary>
		/// Tenant Id
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Static machines configured for local runs
		/// </summary>
		public WebApiTestMachine[] StaticMachines { get; set; }
		
		/// <summary>
		/// This can eventually evolve as the ultimate JSON file that user can use to configure their machine(s) against CLT
		/// </summary>
		public WebApiUserLoadTestMachineInput UserLoadAgentInput { get; set; }
		
		public string UserLoadAgentResourcesUri { get; set; }
		
		/// <summary>
		/// The list of valid geo-lcations for tenant
		/// </summary>
		public string[] ValidGeoLocations { get; set; }
	}
	
	public class WebApiTestMachine
	{
		
		public System.Nullable<System.DateTimeOffset> LastHeartBeat { get; set; }
		
		public string MachineName { get; set; }
		
		public string Status { get; set; }
	}
	
	public class TestDefinition
	{
		
		public string Description { get; set; }
		
		/// <summary>
		/// Geo location from where load is generated
		/// </summary>
		public LoadGenerationGeoLocation[] LoadGenerationGeoLocations { get; set; }
		
		public string LoadTestDefinitionSource { get; set; }
		
		public LoadTestRunSettings RunSettings { get; set; }
		
		public StaticAgentRunSetting StaticAgentRunSettings { get; set; }
		
		public LoadTest TestDetails { get; set; }
	}
	
	public class TestDefinitionBasic
	{
		
		public DropAccessData AccessData { get; set; }
		
		public IdentityRef CreatedBy { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		public string Id { get; set; }
		
		public IdentityRef LastModifiedBy { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		public System.Nullable<TestDefinitionBasicLoadTestType> LoadTestType { get; set; }
		
		public string Name { get; set; }
	}
	
	public enum TestDefinitionBasicLoadTestType
	{
		
		visualStudioLoadTest = 0,
		
		jMeter = 1,
		
		oldLoadTestFile = 2,
	}
	
	public class TestDrop
	{
		
		public DropAccessData AccessData { get; set; }
		
		/// <summary>
		/// Time at which the drop is created
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Identifies the type of drop
		/// </summary>
		public string DropType { get; set; }
		
		/// <summary>
		/// Drop Id
		/// </summary>
		public string Id { get; set; }
		
		public LoadTestDefinition LoadTestDefinition { get; set; }
		
		/// <summary>
		/// Test Run Id
		/// </summary>
		public string TestRunId { get; set; }
	}
	
	/// <summary>
	/// An abstracted reference to some other resource. This class is used to provide the load test data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
	/// </summary>
	public class TestDropRef
	{
		
		/// <summary>
		/// Id of the resource
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Full http link to the resource
		/// </summary>
		public string Url { get; set; }
	}
	
	public class TestResults
	{
		
		/// <summary>
		/// The uri to the test run results file.
		/// </summary>
		public string CloudLoadTestSolutionUrl { get; set; }
		
		public CounterGroup[] CounterGroups { get; set; }
		
		public Diagnostics Diagnostics { get; set; }
		
		/// <summary>
		/// The uri to the test run results file.
		/// </summary>
		public string ResultsUrl { get; set; }
	}
	
	public class TestResultsSummary
	{
		
		public PageSummary OverallPageSummary { get; set; }
		
		public RequestSummary OverallRequestSummary { get; set; }
		
		public ScenarioSummary OverallScenarioSummary { get; set; }
		
		public TestSummary OverallTestSummary { get; set; }
		
		public TransactionSummary OverallTransactionSummary { get; set; }
		
		public PageSummary[] TopSlowPages { get; set; }
		
		public RequestSummary[] TopSlowRequests { get; set; }
		
		public TestSummary[] TopSlowTests { get; set; }
		
		public TransactionSummary[] TopSlowTransactions { get; set; }
	}
	
	public class TestSummary
	{
		
		public System.Nullable<System.Double> AverageTestTime { get; set; }
		
		public System.Nullable<System.Int32> FailedTests { get; set; }
		
		public System.Nullable<System.Int32> PassedTests { get; set; }
		
		public SummaryPercentileData[] PercentileData { get; set; }
		
		public string ScenarioName { get; set; }
		
		public string TestName { get; set; }
		
		public System.Nullable<System.Int32> TotalTests { get; set; }
	}
	
	public class TransactionSummary
	{
		
		public System.Nullable<System.Double> AverageResponseTime { get; set; }
		
		public System.Nullable<System.Double> AverageTransactionTime { get; set; }
		
		public SummaryPercentileData[] PercentileData { get; set; }
		
		public string ScenarioName { get; set; }
		
		public string TestName { get; set; }
		
		public System.Nullable<System.Int32> TotalTransactions { get; set; }
		
		public string TransactionName { get; set; }
	}
	
	public class TestRun
	{
		
		public TestRunAbortMessage AbortMessage { get; set; }
		
		/// <summary>
		/// true if aut counter collection could not start due to some critical error for this run.
		/// </summary>
		public System.Nullable<System.Boolean> AutInitializationError { get; set; }
		
		/// <summary>
		/// Whether run is chargeable or not Its chargeable once we configured agent and sent start signal
		/// </summary>
		public System.Nullable<System.Boolean> Chargeable { get; set; }
		
		/// <summary>
		/// Whether run is chargeable or not The Charged VUser Minutes for the RUN
		/// </summary>
		public System.Nullable<System.Int32> ChargedVUserminutes { get; set; }
		
		/// <summary>
		/// Test run description.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Gets the time when the test run execution finished
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ExecutionFinishedDate { get; set; }
		
		/// <summary>
		/// Gets the time when the test run warmup finished(if warmup was specified) and load test started
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ExecutionStartedDate { get; set; }
		
		/// <summary>
		/// Gets the time when the test run was queued
		/// </summary>
		public System.Nullable<System.DateTimeOffset> QueuedDate { get; set; }
		
		/// <summary>
		/// Retention state of the run
		/// </summary>
		public System.Nullable<TestRunRetentionState> RetentionState { get; set; }
		
		public string RunSourceIdentifier { get; set; }
		
		/// <summary>
		/// The uri to the run source.
		/// </summary>
		public string RunSourceUrl { get; set; }
		
		public IdentityRef StartedBy { get; set; }
		
		/// <summary>
		/// When the test run started execution.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartedDate { get; set; }
		
		public IdentityRef StoppedBy { get; set; }
		
		/// <summary>
		/// SubState is more granular description of the state
		/// </summary>
		public System.Nullable<TestRunSubState> SubState { get; set; }
		
		public OverridableRunSettings SupersedeRunSettings { get; set; }
		
		/// <summary>
		/// An abstracted reference to some other resource. This class is used to provide the load test data contracts with a uniform way to reference other resources in a way that provides easy traversal through links.
		/// </summary>
		public TestDropRef TestDrop { get; set; }
		
		public TestSettings TestSettings { get; set; }
		
		/// <summary>
		/// Gets the time when the test run warmup started
		/// </summary>
		public System.Nullable<System.DateTimeOffset> WarmUpStartedDate { get; set; }
		
		/// <summary>
		/// The uri to the vso detailed result.
		/// </summary>
		public string WebResultUrl { get; set; }
	}
	
	public class TestRunAbortMessage
	{
		
		public string Action { get; set; }
		
		public string Cause { get; set; }
		
		public string[] Details { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LoggedDate { get; set; }
		
		public string Source { get; set; }
	}
	
	public enum TestRunRetentionState
	{
		
		none = 0,
		
		markedForDeletion = 1,
		
		deleted = 2,
		
		retain = 3,
	}
	
	public enum TestRunSubState
	{
		
		none = 0,
		
		validatingTestRun = 1,
		
		acquiringResources = 2,
		
		configuringAgents = 3,
		
		executingSetupScript = 4,
		
		warmingUp = 5,
		
		runningTest = 6,
		
		executingCleanupScript = 7,
		
		collectingResults = 8,
		
		success = 9,
		
		partialSuccess = 10,
	}
	
	public class TestSettings
	{
		
		/// <summary>
		/// Cleanup command
		/// </summary>
		public string CleanupCommand { get; set; }
		
		/// <summary>
		/// Processor Architecture chosen
		/// </summary>
		public System.Nullable<TestSettingsHostProcessPlatform> HostProcessPlatform { get; set; }
		
		/// <summary>
		/// Setup command
		/// </summary>
		public string SetupCommand { get; set; }
	}
	
	public enum TestSettingsHostProcessPlatform
	{
		
		none = 0,
		
		msil = 1,
		
		x86 = 2,
		
		ia64 = 3,
		
		amd64 = 4,
		
		arm = 5,
	}
	
	public class TestRunBasic
	{
		
		public IdentityRef CreatedBy { get; set; }
		
		/// <summary>
		/// Gets the creation time of the test run
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		public IdentityRef DeletedBy { get; set; }
		
		/// <summary>
		/// Gets the deleted time of the test run
		/// </summary>
		public System.Nullable<System.DateTimeOffset> DeletedDate { get; set; }
		
		/// <summary>
		/// Gets the finish time of the test run
		/// </summary>
		public System.Nullable<System.DateTimeOffset> FinishedDate { get; set; }
		
		/// <summary>
		/// Gets the unique identifier for the test run definition.
		/// </summary>
		public string Id { get; set; }
		
		public LoadGenerationGeoLocation[] LoadGenerationGeoLocations { get; set; }
		
		/// <summary>
		/// Gets the load test file of the test run definition.
		/// </summary>
		public string LoadTestFileName { get; set; }
		
		/// <summary>
		/// Gets the name of the test run definition.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Gets the number of the test run (unique within a tenant)
		/// </summary>
		public System.Nullable<System.Int32> RunNumber { get; set; }
		
		/// <summary>
		/// Test run source like Ibiza,VSO,BuildVNext, etc.
		/// </summary>
		public string RunSource { get; set; }
		
		public LoadTestRunDetails RunSpecificDetails { get; set; }
		
		/// <summary>
		/// Run type like VisualStudioLoadTest or JMeterLoadTest
		/// </summary>
		public System.Nullable<TestRunBasicRunType> RunType { get; set; }
		
		/// <summary>
		/// State of the test run.
		/// </summary>
		public System.Nullable<TestRunBasicState> State { get; set; }
		
		public string Url { get; set; }
	}
	
	public enum TestRunBasicRunType
	{
		
		visualStudioLoadTest = 0,
		
		jMeterLoadTest = 1,
	}
	
	public enum TestRunBasicState
	{
		
		pending = 0,
		
		queued = 1,
		
		inProgress = 2,
		
		stopping = 3,
		
		completed = 4,
		
		aborted = 5,
		
		error = 6,
	}
	
	public class TestRunCounterInstance
	{
		
		/// <summary>
		/// CategoryName for this counter
		/// </summary>
		public string CategoryName { get; set; }
		
		/// <summary>
		/// Combination of source and SourceInstanceId
		/// </summary>
		public string CounterInstanceId { get; set; }
		
		/// <summary>
		/// Name of the counter Eg: Errors/Sec
		/// </summary>
		public string CounterName { get; set; }
		
		/// <summary>
		/// Units for this counter. Empty string for mere numbers
		/// </summary>
		public string CounterUnits { get; set; }
		
		/// <summary>
		/// Instance Name Eg: _Avg,_Total etc
		/// </summary>
		public string InstanceName { get; set; }
		
		/// <summary>
		/// true if this counter instance is a default counter
		/// </summary>
		public System.Nullable<System.Boolean> IsPreselectedCounter { get; set; }
		
		/// <summary>
		/// Machine from where this counter was collected Used in case of machine specific counters like - Agent CPU and memory etc.
		/// </summary>
		public string MachineName { get; set; }
		
		/// <summary>
		/// Counter Groups to which this counter instance is part of
		/// </summary>
		public string[] PartOfCounterGroups { get; set; }
		
		public WebInstanceSummaryData SummaryData { get; set; }
		
		/// <summary>
		/// A unique name for this counter instance
		/// </summary>
		public string UniqueName { get; set; }
	}
	
	public class WebInstanceSummaryData
	{
		
		public System.Nullable<System.Double> Average { get; set; }
		
		public System.Nullable<System.Double> Max { get; set; }
		
		public System.Nullable<System.Double> Min { get; set; }
	}
	
	public class TestRunMessage
	{
		
		/// <summary>
		/// Agent Id
		/// </summary>
		public string AgentId { get; set; }
		
		public string ErrorCode { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LoggedDate { get; set; }
		
		public string Message { get; set; }
		
		/// <summary>
		/// Message Id
		/// </summary>
		public string MessageId { get; set; }
		
		public System.Nullable<TestRunMessageMessageSource> MessageSource { get; set; }
		
		public System.Nullable<TestRunMessageMessageType> MessageType { get; set; }
		
		/// <summary>
		/// Id of the test run
		/// </summary>
		public string TestRunId { get; set; }
		
		public string Url { get; set; }
	}
	
	public enum TestRunMessageMessageSource
	{
		
		setupScript = 0,
		
		cleanupScript = 1,
		
		validation = 2,
		
		other = 3,
		
		autCounterCollection = 4,
	}
	
	public enum TestRunMessageMessageType
	{
		
		info = 0,
		
		output = 1,
		
		error = 2,
		
		warning = 3,
		
		critical = 4,
	}
	
	/// <summary>
	/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
	/// </summary>
	public class VssJsonCollectionWrapper
	{
		
		public string Value { get; set; }
	}
	
	public class VssJsonCollectionWrapperBase
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	public class WebApiLoadTestMachineInput
	{
		
		public string MachineGroupId { get; set; }
		
		public System.Nullable<WebApiLoadTestMachineInputMachineType> MachineType { get; set; }
		
		public WebApiSetupParamaters SetupConfiguration { get; set; }
		
		public TestRunBasicRunType[] SupportedRunTypes { get; set; }
	}
	
	public enum WebApiLoadTestMachineInputMachineType
	{
		
		_default = 0,
		
		cltLoadAgent = 1,
		
		userLoadAgent = 2,
	}
	
	public class WebApiSetupParamaters
	{
		
		public System.Collections.Generic.Dictionary<string, string> Configurations { get; set; }
	}
	
	public partial class MyClient
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public MyClient(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Agent_Groups_Create {organization}/_apis/clt/agentgroups
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Agent group to be created</param>
		/// <returns>successful operation</returns>
		public async Task<AgentGroup> Agent_Groups_CreateAsync(string organization, string api_version, AgentGroup requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/agentgroups&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AgentGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Agent_Groups_Create {organization}/_apis/clt/agentgroups
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Agent group to be created</param>
		/// <returns>successful operation</returns>
		public AgentGroup Agent_Groups_Create(string organization, string api_version, AgentGroup requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/agentgroups&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AgentGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Agent_Groups_Get {organization}/_apis/clt/agentgroups/{agentGroupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="agentGroupId">The agent group identifier</param>
		/// <param name="agentGroupName">Name of the agent group</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<string> Agent_Groups_GetAsync(string organization, string agentGroupId, bool machineSetupInput, bool machineAccessData, bool outgoingRequestUrls, string agentGroupName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/agentgroups/"+ (agentGroupId==null? "" : System.Uri.EscapeDataString(agentGroupId))+"&machineSetupInput="+machineSetupInput+"&machineAccessData="+machineAccessData+"&outgoingRequestUrls="+outgoingRequestUrls+"&agentGroupName=" + (agentGroupName==null? "" : System.Uri.EscapeDataString(agentGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Agent_Groups_Get {organization}/_apis/clt/agentgroups/{agentGroupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="agentGroupId">The agent group identifier</param>
		/// <param name="agentGroupName">Name of the agent group</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public string Agent_Groups_Get(string organization, string agentGroupId, bool machineSetupInput, bool machineAccessData, bool outgoingRequestUrls, string agentGroupName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/agentgroups/"+ (agentGroupId==null? "" : System.Uri.EscapeDataString(agentGroupId))+"&machineSetupInput="+machineSetupInput+"&machineAccessData="+machineAccessData+"&outgoingRequestUrls="+outgoingRequestUrls+"&agentGroupName=" + (agentGroupName==null? "" : System.Uri.EscapeDataString(agentGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Agents_Get {organization}/_apis/clt/agentGroups/{agentGroupId}/agents
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="agentGroupId">The agent group identifier</param>
		/// <param name="agentName">Name of the static agent</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<string> Agents_GetAsync(string organization, string agentGroupId, string agentName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/agentGroups/"+ (agentGroupId==null? "" : System.Uri.EscapeDataString(agentGroupId))+"/agents&agentName=" + (agentName==null? "" : System.Uri.EscapeDataString(agentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Agents_Get {organization}/_apis/clt/agentGroups/{agentGroupId}/agents
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="agentGroupId">The agent group identifier</param>
		/// <param name="agentName">Name of the static agent</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public string Agents_Get(string organization, string agentGroupId, string agentName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/agentGroups/"+ (agentGroupId==null? "" : System.Uri.EscapeDataString(agentGroupId))+"/agents&agentName=" + (agentName==null? "" : System.Uri.EscapeDataString(agentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Agents_Delete {organization}/_apis/clt/agentGroups/{agentGroupId}/agents
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="agentGroupId">The agent group identifier</param>
		/// <param name="agentName">Name of the static agent</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<string> Agents_DeleteAsync(string organization, string agentGroupId, string agentName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/agentGroups/"+ (agentGroupId==null? "" : System.Uri.EscapeDataString(agentGroupId))+"/agents&agentName=" + (agentName==null? "" : System.Uri.EscapeDataString(agentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Agents_Delete {organization}/_apis/clt/agentGroups/{agentGroupId}/agents
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="agentGroupId">The agent group identifier</param>
		/// <param name="agentName">Name of the static agent</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public string Agents_Delete(string organization, string agentGroupId, string agentName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/agentGroups/"+ (agentGroupId==null? "" : System.Uri.EscapeDataString(agentGroupId))+"/agents&agentName=" + (agentName==null? "" : System.Uri.EscapeDataString(agentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applications_List {organization}/_apis/clt/apm/applications
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="type">Filters the results based on the plugin type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Application[]> Applications_ListAsync(string organization, string type, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/apm/applications&type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Application[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applications_List {organization}/_apis/clt/apm/applications
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="type">Filters the results based on the plugin type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Application[] Applications_List(string organization, string type, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/apm/applications&type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Application[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applications_Get {organization}/_apis/clt/apm/applications/{applicationId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="applicationId">Filter by APM application identifier.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Application> Applications_GetAsync(string organization, string applicationId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/apm/applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Application>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applications_Get {organization}/_apis/clt/apm/applications/{applicationId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="applicationId">Filter by APM application identifier.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Application Applications_Get(string organization, string applicationId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/apm/applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Application>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Counters_List {organization}/_apis/clt/apm/counters
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="applicationId">Filter by APM application identifier.</param>
		/// <param name="plugintype">Currently ApplicationInsights is the only available plugin type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ApplicationCounters[]> Counters_ListAsync(string organization, string applicationId, string plugintype, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/apm/counters&applicationId=" + (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"&plugintype=" + (plugintype==null? "" : System.Uri.EscapeDataString(plugintype))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApplicationCounters[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Counters_List {organization}/_apis/clt/apm/counters
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="applicationId">Filter by APM application identifier.</param>
		/// <param name="plugintype">Currently ApplicationInsights is the only available plugin type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ApplicationCounters[] Counters_List(string organization, string applicationId, string plugintype, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/apm/counters&applicationId=" + (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"&plugintype=" + (plugintype==null? "" : System.Uri.EscapeDataString(plugintype))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApplicationCounters[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Plugins_List {organization}/_apis/clt/apm/plugins
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ApplicationType[]> Plugins_ListAsync(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/apm/plugins&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApplicationType[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Plugins_List {organization}/_apis/clt/apm/plugins
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ApplicationType[] Plugins_List(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/apm/plugins&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApplicationType[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Plugins_Get {organization}/_apis/clt/apm/plugins/{type}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="type">Currently ApplicationInsights is the only available plugin type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ApplicationType> Plugins_GetAsync(string organization, string type, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/apm/plugins/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApplicationType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Plugins_Get {organization}/_apis/clt/apm/plugins/{type}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="type">Currently ApplicationInsights is the only available plugin type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ApplicationType Plugins_Get(string organization, string type, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/apm/plugins/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApplicationType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Test_Definitions_List {organization}/_apis/clt/testdefinitions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="fromDate">Date after which test definitions were created</param>
		/// <param name="toDate">Date before which test definitions were crated</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestDefinitionBasic[]> Test_Definitions_ListAsync(string organization, string fromDate, string toDate, int top, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testdefinitions&fromDate=" + (fromDate==null? "" : System.Uri.EscapeDataString(fromDate))+"&toDate=" + (toDate==null? "" : System.Uri.EscapeDataString(toDate))+"&top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestDefinitionBasic[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Test_Definitions_List {organization}/_apis/clt/testdefinitions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="fromDate">Date after which test definitions were created</param>
		/// <param name="toDate">Date before which test definitions were crated</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestDefinitionBasic[] Test_Definitions_List(string organization, string fromDate, string toDate, int top, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testdefinitions&fromDate=" + (fromDate==null? "" : System.Uri.EscapeDataString(fromDate))+"&toDate=" + (toDate==null? "" : System.Uri.EscapeDataString(toDate))+"&top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestDefinitionBasic[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Test_Definitions_Update {organization}/_apis/clt/testdefinitions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestDefinition> Test_Definitions_UpdateAsync(string organization, string api_version, TestDefinition requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testdefinitions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test_Definitions_Update {organization}/_apis/clt/testdefinitions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestDefinition Test_Definitions_Update(string organization, string api_version, TestDefinition requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testdefinitions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test_Definitions_Create {organization}/_apis/clt/testdefinitions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Test definition to be created</param>
		/// <returns>successful operation</returns>
		public async Task<TestDefinition> Test_Definitions_CreateAsync(string organization, string api_version, TestDefinition requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testdefinitions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test_Definitions_Create {organization}/_apis/clt/testdefinitions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Test definition to be created</param>
		/// <returns>successful operation</returns>
		public TestDefinition Test_Definitions_Create(string organization, string api_version, TestDefinition requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testdefinitions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test_Definitions_Get {organization}/_apis/clt/testdefinitions/{testDefinitionId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="testDefinitionId">The test definition identifier</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestDefinition> Test_Definitions_GetAsync(string organization, string testDefinitionId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testdefinitions/"+ (testDefinitionId==null? "" : System.Uri.EscapeDataString(testDefinitionId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Test_Definitions_Get {organization}/_apis/clt/testdefinitions/{testDefinitionId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="testDefinitionId">The test definition identifier</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestDefinition Test_Definitions_Get(string organization, string testDefinitionId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testdefinitions/"+ (testDefinitionId==null? "" : System.Uri.EscapeDataString(testDefinitionId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Test_Drops_Create {organization}/_apis/clt/testdrops
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Test drop to be created</param>
		/// <returns>successful operation</returns>
		public async Task<TestDrop> Test_Drops_CreateAsync(string organization, string api_version, TestDrop requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testdrops&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestDrop>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test_Drops_Create {organization}/_apis/clt/testdrops
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Test drop to be created</param>
		/// <returns>successful operation</returns>
		public TestDrop Test_Drops_Create(string organization, string api_version, TestDrop requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testdrops&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestDrop>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test_Drops_Get {organization}/_apis/clt/testdrops/{testDropId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="testDropId">The test drop identifier</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestDrop> Test_Drops_GetAsync(string organization, string testDropId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testdrops/"+ (testDropId==null? "" : System.Uri.EscapeDataString(testDropId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestDrop>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Test_Drops_Get {organization}/_apis/clt/testdrops/{testDropId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="testDropId">The test drop identifier</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestDrop Test_Drops_Get(string organization, string testDropId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testdrops/"+ (testDropId==null? "" : System.Uri.EscapeDataString(testDropId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestDrop>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns test runs based on the filter specified. Returns all runs of the tenant if there is no filter.
		/// Test_Runs_Get_Test_Runs {organization}/_apis/clt/testruns
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="name">Name for the test run. Names are not unique. Test runs with same name are assigned sequential rolling numbers.</param>
		/// <param name="requestedBy">Filter by the user who requested the test run. Here requestedBy should be the display name of the user.</param>
		/// <param name="status">Filter by the test run status.</param>
		/// <param name="runType">Valid values include: null, one of TestRunType, or "*"</param>
		/// <param name="fromDate">Filter by the test runs that have been modified after the fromDate timestamp.</param>
		/// <param name="toDate">Filter by the test runs that have been modified before the toDate timestamp.</param>
		/// <param name="detailed">Include the detailed test run attributes.</param>
		/// <param name="top">The maximum number of test runs to return.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<string> Test_Runs_Get_Test_RunsAsync(string organization, string name, string requestedBy, string status, string runType, string fromDate, string toDate, bool detailed, int top, string runsourceidentifier, string retentionState, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testruns&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&requestedBy=" + (requestedBy==null? "" : System.Uri.EscapeDataString(requestedBy))+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&runType=" + (runType==null? "" : System.Uri.EscapeDataString(runType))+"&fromDate=" + (fromDate==null? "" : System.Uri.EscapeDataString(fromDate))+"&toDate=" + (toDate==null? "" : System.Uri.EscapeDataString(toDate))+"&detailed="+detailed+"&top="+top+"&runsourceidentifier=" + (runsourceidentifier==null? "" : System.Uri.EscapeDataString(runsourceidentifier))+"&retentionState=" + (retentionState==null? "" : System.Uri.EscapeDataString(retentionState))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns test runs based on the filter specified. Returns all runs of the tenant if there is no filter.
		/// Test_Runs_Get_Test_Runs {organization}/_apis/clt/testruns
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="name">Name for the test run. Names are not unique. Test runs with same name are assigned sequential rolling numbers.</param>
		/// <param name="requestedBy">Filter by the user who requested the test run. Here requestedBy should be the display name of the user.</param>
		/// <param name="status">Filter by the test run status.</param>
		/// <param name="runType">Valid values include: null, one of TestRunType, or "*"</param>
		/// <param name="fromDate">Filter by the test runs that have been modified after the fromDate timestamp.</param>
		/// <param name="toDate">Filter by the test runs that have been modified before the toDate timestamp.</param>
		/// <param name="detailed">Include the detailed test run attributes.</param>
		/// <param name="top">The maximum number of test runs to return.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public string Test_Runs_Get_Test_Runs(string organization, string name, string requestedBy, string status, string runType, string fromDate, string toDate, bool detailed, int top, string runsourceidentifier, string retentionState, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testruns&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&requestedBy=" + (requestedBy==null? "" : System.Uri.EscapeDataString(requestedBy))+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&runType=" + (runType==null? "" : System.Uri.EscapeDataString(runType))+"&fromDate=" + (fromDate==null? "" : System.Uri.EscapeDataString(fromDate))+"&toDate=" + (toDate==null? "" : System.Uri.EscapeDataString(toDate))+"&detailed="+detailed+"&top="+top+"&runsourceidentifier=" + (runsourceidentifier==null? "" : System.Uri.EscapeDataString(runsourceidentifier))+"&retentionState=" + (retentionState==null? "" : System.Uri.EscapeDataString(retentionState))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Test_Runs_Create {organization}/_apis/clt/testruns
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestRun> Test_Runs_CreateAsync(string organization, string api_version, TestRun requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testruns&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test_Runs_Create {organization}/_apis/clt/testruns
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestRun Test_Runs_Create(string organization, string api_version, TestRun requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testruns&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test_Runs_Get_Test_Run {organization}/_apis/clt/testruns/{testRunId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="testRunId">Unique ID of the test run</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestRun> Test_Runs_Get_Test_RunAsync(string organization, string testRunId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testruns/"+ (testRunId==null? "" : System.Uri.EscapeDataString(testRunId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Test_Runs_Get_Test_Run {organization}/_apis/clt/testruns/{testRunId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="testRunId">Unique ID of the test run</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestRun Test_Runs_Get_Test_Run(string organization, string testRunId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testruns/"+ (testRunId==null? "" : System.Uri.EscapeDataString(testRunId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Test_Runs_Update {organization}/_apis/clt/testruns/{testRunId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Test_Runs_UpdateAsync(string organization, string testRunId, string api_version, TestRun requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testruns/"+ (testRunId==null? "" : System.Uri.EscapeDataString(testRunId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test_Runs_Update {organization}/_apis/clt/testruns/{testRunId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Test_Runs_Update(string organization, string testRunId, string api_version, TestRun requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testruns/"+ (testRunId==null? "" : System.Uri.EscapeDataString(testRunId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Counter_Instances_List {organization}/_apis/clt/testRuns/{testRunId}/counterinstances
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="testRunId">The test run identifier</param>
		/// <param name="groupNames">Comma separated names of counter groups, such as 'Application', 'Performance' and 'Throughput'</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestRunCounterInstance[]> Counter_Instances_ListAsync(string organization, string testRunId, string groupNames, bool includeSummary, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testRuns/"+ (testRunId==null? "" : System.Uri.EscapeDataString(testRunId))+"/counterinstances&groupNames=" + (groupNames==null? "" : System.Uri.EscapeDataString(groupNames))+"&includeSummary="+includeSummary+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRunCounterInstance[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Counter_Instances_List {organization}/_apis/clt/testRuns/{testRunId}/counterinstances
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="testRunId">The test run identifier</param>
		/// <param name="groupNames">Comma separated names of counter groups, such as 'Application', 'Performance' and 'Throughput'</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestRunCounterInstance[] Counter_Instances_List(string organization, string testRunId, string groupNames, bool includeSummary, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testRuns/"+ (testRunId==null? "" : System.Uri.EscapeDataString(testRunId))+"/counterinstances&groupNames=" + (groupNames==null? "" : System.Uri.EscapeDataString(groupNames))+"&includeSummary="+includeSummary+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRunCounterInstance[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Counter_Samples_Get {organization}/_apis/clt/testRuns/{testRunId}/countersamples
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="testRunId">The test run identifier</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<CounterSamplesResult> Counter_Samples_GetAsync(string organization, string testRunId, string api_version, VssJsonCollectionWrapper requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testRuns/"+ (testRunId==null? "" : System.Uri.EscapeDataString(testRunId))+"/countersamples&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CounterSamplesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Counter_Samples_Get {organization}/_apis/clt/testRuns/{testRunId}/countersamples
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="testRunId">The test run identifier</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public CounterSamplesResult Counter_Samples_Get(string organization, string testRunId, string api_version, VssJsonCollectionWrapper requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testRuns/"+ (testRunId==null? "" : System.Uri.EscapeDataString(testRunId))+"/countersamples&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CounterSamplesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Errors_Get {organization}/_apis/clt/testRuns/{testRunId}/errors
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="testRunId">The test run identifier</param>
		/// <param name="type">Filter for the particular type of errors.</param>
		/// <param name="subType">Filter for a particular subtype of errors. You should not provide error subtype without error type.</param>
		/// <param name="detailed">To include the details of test errors such as messagetext, request, stacktrace, testcasename, scenarioname, and lasterrordate.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<LoadTestErrors> Errors_GetAsync(string organization, string testRunId, string type, string subType, bool detailed, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testRuns/"+ (testRunId==null? "" : System.Uri.EscapeDataString(testRunId))+"/errors&type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&subType=" + (subType==null? "" : System.Uri.EscapeDataString(subType))+"&detailed="+detailed+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LoadTestErrors>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Errors_Get {organization}/_apis/clt/testRuns/{testRunId}/errors
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="testRunId">The test run identifier</param>
		/// <param name="type">Filter for the particular type of errors.</param>
		/// <param name="subType">Filter for a particular subtype of errors. You should not provide error subtype without error type.</param>
		/// <param name="detailed">To include the details of test errors such as messagetext, request, stacktrace, testcasename, scenarioname, and lasterrordate.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public LoadTestErrors Errors_Get(string organization, string testRunId, string type, string subType, bool detailed, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testRuns/"+ (testRunId==null? "" : System.Uri.EscapeDataString(testRunId))+"/errors&type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&subType=" + (subType==null? "" : System.Uri.EscapeDataString(subType))+"&detailed="+detailed+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LoadTestErrors>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Messages_List {organization}/_apis/clt/testRuns/{testRunId}/messages
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="testRunId">Id of the test run</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestRunMessage[]> Messages_ListAsync(string organization, string testRunId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testRuns/"+ (testRunId==null? "" : System.Uri.EscapeDataString(testRunId))+"/messages&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRunMessage[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Messages_List {organization}/_apis/clt/testRuns/{testRunId}/messages
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="testRunId">Id of the test run</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestRunMessage[] Messages_List(string organization, string testRunId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testRuns/"+ (testRunId==null? "" : System.Uri.EscapeDataString(testRunId))+"/messages&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRunMessage[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Results_Get {organization}/_apis/clt/testRuns/{testRunId}/results
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="testRunId">The test run identifier</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TestResults> Results_GetAsync(string organization, string testRunId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testRuns/"+ (testRunId==null? "" : System.Uri.EscapeDataString(testRunId))+"/results&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Results_Get {organization}/_apis/clt/testRuns/{testRunId}/results
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="testRunId">The test run identifier</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TestResults Results_Get(string organization, string testRunId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/clt/testRuns/"+ (testRunId==null? "" : System.Uri.EscapeDataString(testRunId))+"/results&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
