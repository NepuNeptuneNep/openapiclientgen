//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Defines the data contract of a consumer.
	/// </summary>
	public class Consumer
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// Gets this consumer's actions.
		/// </summary>
		public ConsumerAction[] Actions { get; set; }
		
		/// <summary>
		/// Gets or sets this consumer's authentication type.
		/// </summary>
		public ConsumerAuthenticationType AuthenticationType { get; set; }
		
		/// <summary>
		/// Gets or sets this consumer's localized description.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Describes how to configure a subscription that is managed externally.
		/// </summary>
		public ExternalConfigurationDescriptor ExternalConfiguration { get; set; }
		
		/// <summary>
		/// Gets or sets this consumer's identifier.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Gets or sets this consumer's image URL, if any.
		/// </summary>
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Gets or sets this consumer's information URL, if any.
		/// </summary>
		public string InformationUrl { get; set; }
		
		/// <summary>
		/// Gets or sets this consumer's input descriptors.
		/// </summary>
		public InputDescriptor[] InputDescriptors { get; set; }
		
		/// <summary>
		/// Gets or sets this consumer's localized name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The url for this resource
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// The class to represent a collection of REST reference links.
	/// </summary>
	public class ReferenceLinks
	{
		
		/// <summary>
		/// The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Links { get; set; }
	}
	
	/// <summary>
	/// Defines the data contract of a consumer action.
	/// </summary>
	public class ConsumerAction
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// Gets or sets the flag indicating if resource version can be overridden when creating or editing a subscription.
		/// </summary>
		public System.Nullable<System.Boolean> AllowResourceVersionOverride { get; set; }
		
		/// <summary>
		/// Gets or sets the identifier of the consumer to which this action belongs.
		/// </summary>
		public string ConsumerId { get; set; }
		
		/// <summary>
		/// Gets or sets this action's localized description.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Gets or sets this action's identifier.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Gets or sets this action's input descriptors.
		/// </summary>
		public InputDescriptor[] InputDescriptors { get; set; }
		
		/// <summary>
		/// Gets or sets this action's localized name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Gets or sets this action's supported event identifiers.
		/// </summary>
		public string[] SupportedEventTypes { get; set; }
		
		/// <summary>
		/// Gets or sets this action's supported resource versions.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string[]> SupportedResourceVersions { get; set; }
		
		/// <summary>
		/// The url for this resource
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Describes an input for subscriptions.
	/// </summary>
	public class InputDescriptor
	{
		
		/// <summary>
		/// The ids of all inputs that the value of this input is dependent on.
		/// </summary>
		public string[] DependencyInputIds { get; set; }
		
		/// <summary>
		/// Description of what this input is used for
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// The group localized name to which this input belongs and can be shown as a header for the container that will include all the inputs in the group.
		/// </summary>
		public string GroupName { get; set; }
		
		/// <summary>
		/// If true, the value information for this input is dynamic and should be fetched when the value of dependency inputs change.
		/// </summary>
		public System.Nullable<System.Boolean> HasDynamicValueInformation { get; set; }
		
		/// <summary>
		/// Identifier for the subscription input
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Mode in which the value of this input should be entered
		/// </summary>
		public InputDescriptorInputMode InputMode { get; set; }
		
		/// <summary>
		/// Gets whether this input is confidential, such as for a password or application key
		/// </summary>
		public System.Nullable<System.Boolean> IsConfidential { get; set; }
		
		/// <summary>
		/// Localized name which can be shown as a label for the subscription input
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Custom properties for the input which can be used by the service provider
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Properties { get; set; }
		
		/// <summary>
		/// Underlying data type for the input value. When this value is specified, InputMode, Validation and Values are optional.
		/// </summary>
		public string Type { get; set; }
		
		/// <summary>
		/// Gets whether this input is included in the default generated action description.
		/// </summary>
		public System.Nullable<System.Boolean> UseInDefaultDescription { get; set; }
		
		/// <summary>
		/// Describes what values are valid for a subscription input
		/// </summary>
		public InputValidation Validation { get; set; }
		
		/// <summary>
		/// A hint for input value. It can be used in the UI as the input placeholder.
		/// </summary>
		public string ValueHint { get; set; }
		
		/// <summary>
		/// Information about the possible/allowed values for a given subscription input
		/// </summary>
		public InputValues Values { get; set; }
	}
	
	public enum InputDescriptorInputMode
	{
		
		none = 0,
		
		textBox = 1,
		
		passwordBox = 2,
		
		combo = 3,
		
		radioButtons = 4,
		
		checkBox = 5,
		
		textArea = 6,
	}
	
	/// <summary>
	/// Describes what values are valid for a subscription input
	/// </summary>
	public class InputValidation
	{
		
		/// <summary>
		/// Gets or sets the data data type to validate.
		/// </summary>
		public InputValidationDataType DataType { get; set; }
		
		/// <summary>
		/// Gets or sets if this is a required field.
		/// </summary>
		public System.Nullable<System.Boolean> IsRequired { get; set; }
		
		/// <summary>
		/// Gets or sets the maximum length of this descriptor.
		/// </summary>
		public System.Nullable<System.Int32> MaxLength { get; set; }
		
		/// <summary>
		/// Gets or sets the minimum value for this descriptor.
		/// </summary>
		public string MaxValue { get; set; }
		
		/// <summary>
		/// Gets or sets the minimum length of this descriptor.
		/// </summary>
		public System.Nullable<System.Int32> MinLength { get; set; }
		
		/// <summary>
		/// Gets or sets the minimum value for this descriptor.
		/// </summary>
		public string MinValue { get; set; }
		
		/// <summary>
		/// Gets or sets the pattern to validate.
		/// </summary>
		public string Pattern { get; set; }
		
		/// <summary>
		/// Gets or sets the error on pattern mismatch.
		/// </summary>
		public string PatternMismatchErrorMessage { get; set; }
	}
	
	public enum InputValidationDataType
	{
		
		none = 0,
		
		_string = 1,
		
		number = 2,
		
		boolean = 3,
		
		guid = 4,
		
		uri = 5,
	}
	
	/// <summary>
	/// Information about the possible/allowed values for a given subscription input
	/// </summary>
	public class InputValues
	{
		
		/// <summary>
		/// The default value to use for this input
		/// </summary>
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Error information related to a subscription input value.
		/// </summary>
		public InputValuesError Error { get; set; }
		
		/// <summary>
		/// The id of the input
		/// </summary>
		public string InputId { get; set; }
		
		/// <summary>
		/// Should this input be disabled
		/// </summary>
		public System.Nullable<System.Boolean> IsDisabled { get; set; }
		
		/// <summary>
		/// Should the value be restricted to one of the values in the PossibleValues (True) or are the values in PossibleValues just a suggestion (False)
		/// </summary>
		public System.Nullable<System.Boolean> IsLimitedToPossibleValues { get; set; }
		
		/// <summary>
		/// Should this input be made read-only
		/// </summary>
		public System.Nullable<System.Boolean> IsReadOnly { get; set; }
		
		/// <summary>
		/// Possible values that this input can take
		/// </summary>
		public InputValue[] PossibleValues { get; set; }
	}
	
	/// <summary>
	/// Error information related to a subscription input value.
	/// </summary>
	public class InputValuesError
	{
		
		/// <summary>
		/// The error message.
		/// </summary>
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Information about a single value for an input
	/// </summary>
	public class InputValue
	{
		
		/// <summary>
		/// Any other data about this input
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Data { get; set; }
		
		/// <summary>
		/// The text to show for the display of this value
		/// </summary>
		public string DisplayValue { get; set; }
		
		/// <summary>
		/// The value to store for this input
		/// </summary>
		public string Value { get; set; }
	}
	
	public enum ConsumerAuthenticationType
	{
		
		none = 0,
		
		oAuth = 1,
		
		external = 2,
	}
	
	/// <summary>
	/// Describes how to configure a subscription that is managed externally.
	/// </summary>
	public class ExternalConfigurationDescriptor
	{
		
		/// <summary>
		/// Url of the site to create this type of subscription.
		/// </summary>
		public string CreateSubscriptionUrl { get; set; }
		
		/// <summary>
		/// The name of an input property that contains the URL to edit a subscription.
		/// </summary>
		public string EditSubscriptionPropertyName { get; set; }
		
		/// <summary>
		/// True if the external configuration applies only to hosted.
		/// </summary>
		public System.Nullable<System.Boolean> HostedOnly { get; set; }
	}
	
	/// <summary>
	/// Encapsulates the properties of an event.
	/// </summary>
	public class Event
	{
		
		/// <summary>
		/// Gets or sets the UTC-based date and time that this event was created.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Provides different formats of an event message
		/// </summary>
		public FormattedEventMessage DetailedMessage { get; set; }
		
		/// <summary>
		/// Gets or sets the type of this event.
		/// </summary>
		public string EventType { get; set; }
		
		/// <summary>
		/// Gets or sets the unique identifier of this event.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Provides different formats of an event message
		/// </summary>
		public FormattedEventMessage Message { get; set; }
		
		/// <summary>
		/// Gets or sets the identifier of the publisher that raised this event.
		/// </summary>
		public string PublisherId { get; set; }
		
		/// <summary>
		/// Gets or sets the data associated with this event.
		/// </summary>
		public string Resource { get; set; }
		
		/// <summary>
		/// Gets or sets the resource containers.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, ResourceContainer> ResourceContainers { get; set; }
		
		/// <summary>
		/// Gets or sets the version of the data associated with this event.
		/// </summary>
		public string ResourceVersion { get; set; }
		
		/// <summary>
		/// Represents a session token to be attached in Events for Consumer actions that need it.
		/// </summary>
		public SessionToken SessionToken { get; set; }
	}
	
	/// <summary>
	/// Provides different formats of an event message
	/// </summary>
	public class FormattedEventMessage
	{
		
		/// <summary>
		/// Gets or sets the html format of the message
		/// </summary>
		public string Html { get; set; }
		
		/// <summary>
		/// Gets or sets the markdown format of the message
		/// </summary>
		public string Markdown { get; set; }
		
		/// <summary>
		/// Gets or sets the raw text of the message
		/// </summary>
		public string Text { get; set; }
	}
	
	/// <summary>
	/// The base class for all resource containers, i.e. Account, Collection, Project
	/// </summary>
	public class ResourceContainer
	{
		
		/// <summary>
		/// Gets or sets the container's base URL, i.e. the URL of the host (collection, application, or deployment) containing the container resource.
		/// </summary>
		public string BaseUrl { get; set; }
		
		/// <summary>
		/// Gets or sets the container's specific Id.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Gets or sets the container's name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Gets or sets the container's REST API URL.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Represents a session token to be attached in Events for Consumer actions that need it.
	/// </summary>
	public class SessionToken
	{
		
		/// <summary>
		/// The error message in case of error
		/// </summary>
		public string Error { get; set; }
		
		/// <summary>
		/// The access token
		/// </summary>
		public string Token { get; set; }
		
		/// <summary>
		/// The expiration date in UTC
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ValidTo { get; set; }
	}
	
	/// <summary>
	/// Describes a type of event
	/// </summary>
	public class EventTypeDescriptor
	{
		
		/// <summary>
		/// A localized description of the event type
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// A unique id for the event type
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Event-specific inputs
		/// </summary>
		public InputDescriptor[] InputDescriptors { get; set; }
		
		/// <summary>
		/// A localized friendly name for the event type
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// A unique id for the publisher of this event type
		/// </summary>
		public string PublisherId { get; set; }
		
		/// <summary>
		/// Supported versions for the event's resource payloads.
		/// </summary>
		public string[] SupportedResourceVersions { get; set; }
		
		/// <summary>
		/// The url for this resource
		/// </summary>
		public string Url { get; set; }
	}
	
	public class GraphSubjectBase
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
		/// </summary>
		public string Descriptor { get; set; }
		
		/// <summary>
		/// This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// This url is the full route to the source resource of this graph subject.
		/// </summary>
		public string Url { get; set; }
	}
	
	public class IdentityRef
	{
		
		/// <summary>
		/// Deprecated - Can be retrieved by querying the Graph user referenced in the "self" entry of the IdentityRef "_links" dictionary
		/// </summary>
		public string DirectoryAlias { get; set; }
		
		public string Id { get; set; }
		
		/// <summary>
		/// Deprecated - Available in the "avatar" entry of the IdentityRef "_links" dictionary
		/// </summary>
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Deprecated - Can be retrieved by querying the Graph membership state referenced in the "membershipState" entry of the GraphUser "_links" dictionary
		/// </summary>
		public System.Nullable<System.Boolean> Inactive { get; set; }
		
		/// <summary>
		/// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsAadUserType/Descriptor.IsAadGroupType)
		/// </summary>
		public System.Nullable<System.Boolean> IsAadIdentity { get; set; }
		
		/// <summary>
		/// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsGroupType)
		/// </summary>
		public System.Nullable<System.Boolean> IsContainer { get; set; }
		
		public System.Nullable<System.Boolean> IsDeletedInOrigin { get; set; }
		
		/// <summary>
		/// Deprecated - not in use in most preexisting implementations of ToIdentityRef
		/// </summary>
		public string ProfileUrl { get; set; }
		
		/// <summary>
		/// Deprecated - use Domain+PrincipalName instead
		/// </summary>
		public string UniqueName { get; set; }
	}
	
	/// <summary>
	/// Defines a filter for subscription inputs. The filter matches a set of inputs if any (one or more) of the groups evaluates to true.
	/// </summary>
	public class InputFilter
	{
		
		/// <summary>
		/// Groups of input filter expressions. This filter matches a set of inputs if any (one or more) of the groups evaluates to true.
		/// </summary>
		public InputFilterCondition[] Conditions { get; set; }
	}
	
	/// <summary>
	/// An expression which can be applied to filter a list of subscription inputs
	/// </summary>
	public class InputFilterCondition
	{
		
		/// <summary>
		/// Whether or not to do a case sensitive match
		/// </summary>
		public System.Nullable<System.Boolean> CaseSensitive { get; set; }
		
		/// <summary>
		/// The Id of the input to filter on
		/// </summary>
		public string InputId { get; set; }
		
		/// <summary>
		/// The "expected" input value to compare with the actual input value
		/// </summary>
		public string InputValue { get; set; }
		
		/// <summary>
		/// The operator applied between the expected and actual input value
		/// </summary>
		public InputFilterConditionOperator Operator { get; set; }
	}
	
	public enum InputFilterConditionOperator
	{
		
		equals = 0,
		
		notEquals = 1,
	}
	
	public class InputValuesQuery
	{
		
		public System.Collections.Generic.Dictionary<string, object> CurrentValues { get; set; }
		
		/// <summary>
		/// The input values to return on input, and the result from the consumer on output.
		/// </summary>
		public InputValues[] InputValues { get; set; }
		
		/// <summary>
		/// Subscription containing information about the publisher/consumer and the current input values
		/// </summary>
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// Defines the data contract of the result of processing an event for a subscription.
	/// </summary>
	public class Notification
	{
		
		/// <summary>
		/// Gets or sets date and time that this result was created.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Defines the data contract of notification details.
		/// </summary>
		public NotificationDetails Details { get; set; }
		
		/// <summary>
		/// The event id associated with this notification
		/// </summary>
		public string EventId { get; set; }
		
		/// <summary>
		/// The notification id
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Gets or sets date and time that this result was last modified.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ModifiedDate { get; set; }
		
		/// <summary>
		/// Result of the notification
		/// </summary>
		public NotificationResult Result { get; set; }
		
		/// <summary>
		/// Status of the notification
		/// </summary>
		public NotificationStatus Status { get; set; }
		
		/// <summary>
		/// The subscriber Id  associated with this notification. This is the last identity who touched in the subscription. In case of test notifications it can be the tester if the subscription is not created yet.
		/// </summary>
		public string SubscriberId { get; set; }
		
		/// <summary>
		/// The subscription id associated with this notification
		/// </summary>
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// Defines the data contract of notification details.
	/// </summary>
	public class NotificationDetails
	{
		
		/// <summary>
		/// Gets or sets the time that this notification was completed (response received from the consumer)
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CompletedDate { get; set; }
		
		/// <summary>
		/// Gets or sets this notification detail's consumer action identifier.
		/// </summary>
		public string ConsumerActionId { get; set; }
		
		/// <summary>
		/// Gets or sets this notification detail's consumer identifier.
		/// </summary>
		public string ConsumerId { get; set; }
		
		/// <summary>
		/// Gets or sets this notification detail's consumer inputs.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> ConsumerInputs { get; set; }
		
		/// <summary>
		/// Gets or sets the time that this notification was dequeued for processing
		/// </summary>
		public System.Nullable<System.DateTimeOffset> DequeuedDate { get; set; }
		
		/// <summary>
		/// Gets or sets this notification detail's error detail.
		/// </summary>
		public string ErrorDetail { get; set; }
		
		/// <summary>
		/// Gets or sets this notification detail's error message.
		/// </summary>
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Encapsulates the properties of an event.
		/// </summary>
		public Event Event { get; set; }
		
		/// <summary>
		/// Gets or sets this notification detail's event type.
		/// </summary>
		public string EventType { get; set; }
		
		/// <summary>
		/// Gets or sets the time that this notification was finished processing (just before the request is sent to the consumer)
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ProcessedDate { get; set; }
		
		/// <summary>
		/// Gets or sets this notification detail's publisher identifier.
		/// </summary>
		public string PublisherId { get; set; }
		
		/// <summary>
		/// Gets or sets this notification detail's publisher inputs.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> PublisherInputs { get; set; }
		
		/// <summary>
		/// Gets or sets the time that this notification was queued (created)
		/// </summary>
		public System.Nullable<System.DateTimeOffset> QueuedDate { get; set; }
		
		/// <summary>
		/// Gets or sets this notification detail's request.
		/// </summary>
		public string Request { get; set; }
		
		/// <summary>
		/// Number of requests attempted to be sent to the consumer
		/// </summary>
		public System.Nullable<System.Int32> RequestAttempts { get; set; }
		
		/// <summary>
		/// Duration of the request to the consumer in seconds
		/// </summary>
		public System.Nullable<System.Double> RequestDuration { get; set; }
		
		/// <summary>
		/// Gets or sets this notification detail's response.
		/// </summary>
		public string Response { get; set; }
	}
	
	public enum NotificationResult
	{
		
		pending = 0,
		
		succeeded = 1,
		
		failed = 2,
		
		filtered = 3,
	}
	
	public enum NotificationStatus
	{
		
		queued = 0,
		
		processing = 1,
		
		requestInProgress = 2,
		
		completed = 3,
	}
	
	/// <summary>
	/// Summary of a particular result and count.
	/// </summary>
	public class NotificationResultsSummaryDetail
	{
		
		/// <summary>
		/// Count of notification sent out with a matching result.
		/// </summary>
		public System.Nullable<System.Int32> NotificationCount { get; set; }
		
		/// <summary>
		/// Result of the notification
		/// </summary>
		public NotificationResultsSummaryDetailResult Result { get; set; }
	}
	
	public enum NotificationResultsSummaryDetailResult
	{
		
		pending = 0,
		
		succeeded = 1,
		
		failed = 2,
		
		filtered = 3,
	}
	
	/// <summary>
	/// Defines a query for service hook notifications.
	/// </summary>
	public class NotificationsQuery
	{
		
		/// <summary>
		/// The subscriptions associated with the notifications returned from the query
		/// </summary>
		public Subscription[] AssociatedSubscriptions { get; set; }
		
		/// <summary>
		/// If true, we will return all notification history for the query provided; otherwise, the summary is returned.
		/// </summary>
		public System.Nullable<System.Boolean> IncludeDetails { get; set; }
		
		/// <summary>
		/// Optional maximum date at which the notification was created
		/// </summary>
		public System.Nullable<System.DateTimeOffset> MaxCreatedDate { get; set; }
		
		/// <summary>
		/// Optional maximum number of overall results to include
		/// </summary>
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Optional maximum number of results for each subscription. Only takes effect when a list of subscription ids is supplied in the query.
		/// </summary>
		public System.Nullable<System.Int32> MaxResultsPerSubscription { get; set; }
		
		/// <summary>
		/// Optional minimum date at which the notification was created
		/// </summary>
		public System.Nullable<System.DateTimeOffset> MinCreatedDate { get; set; }
		
		/// <summary>
		/// Optional publisher id to restrict the results to
		/// </summary>
		public string PublisherId { get; set; }
		
		/// <summary>
		/// Results from the query
		/// </summary>
		public Notification[] Results { get; set; }
		
		/// <summary>
		/// Optional notification result type to filter results to
		/// </summary>
		public NotificationsQueryResultType ResultType { get; set; }
		
		/// <summary>
		/// Optional notification status to filter results to
		/// </summary>
		public NotificationsQueryStatus Status { get; set; }
		
		/// <summary>
		/// Optional list of subscription ids to restrict the results to
		/// </summary>
		public string[] SubscriptionIds { get; set; }
		
		/// <summary>
		/// Summary of notifications - the count of each result type (success, fail, ..).
		/// </summary>
		public NotificationSummary[] Summary { get; set; }
	}
	
	/// <summary>
	/// Encapsulates an event subscription.
	/// </summary>
	public class Subscription
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		public string ActionDescription { get; set; }
		
		public string ConsumerActionId { get; set; }
		
		public string ConsumerId { get; set; }
		
		/// <summary>
		/// Consumer input values
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> ConsumerInputs { get; set; }
		
		public IdentityRef CreatedBy { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		public string EventDescription { get; set; }
		
		public string EventType { get; set; }
		
		public string Id { get; set; }
		
		public IdentityRef ModifiedBy { get; set; }
		
		public System.Nullable<System.DateTimeOffset> ModifiedDate { get; set; }
		
		public string ProbationRetries { get; set; }
		
		public string PublisherId { get; set; }
		
		/// <summary>
		/// Publisher input values
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> PublisherInputs { get; set; }
		
		public string ResourceVersion { get; set; }
		
		public SubscriptionStatus Status { get; set; }
		
		public IdentityRef Subscriber { get; set; }
		
		public string Url { get; set; }
	}
	
	public enum SubscriptionStatus
	{
		
		enabled = 0,
		
		onProbation = 1,
		
		disabledByUser = 2,
		
		disabledBySystem = 3,
		
		disabledByInactiveIdentity = 4,
	}
	
	public enum NotificationsQueryResultType
	{
		
		pending = 0,
		
		succeeded = 1,
		
		failed = 2,
		
		filtered = 3,
	}
	
	public enum NotificationsQueryStatus
	{
		
		queued = 0,
		
		processing = 1,
		
		requestInProgress = 2,
		
		completed = 3,
	}
	
	/// <summary>
	/// Summary of the notifications for a subscription.
	/// </summary>
	public class NotificationSummary
	{
		
		/// <summary>
		/// The notification results for this particular subscription.
		/// </summary>
		public NotificationResultsSummaryDetail[] Results { get; set; }
		
		/// <summary>
		/// The subscription id associated with this notification
		/// </summary>
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// Defines the data contract of an event publisher.
	/// </summary>
	public class Publisher
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// Gets this publisher's localized description.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Gets this publisher's identifier.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Publisher-specific inputs
		/// </summary>
		public InputDescriptor[] InputDescriptors { get; set; }
		
		/// <summary>
		/// Gets this publisher's localized name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The service instance type of the first party publisher.
		/// </summary>
		public string ServiceInstanceType { get; set; }
		
		/// <summary>
		/// Gets this publisher's supported event types.
		/// </summary>
		public EventTypeDescriptor[] SupportedEvents { get; set; }
		
		/// <summary>
		/// The url for this resource
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Wrapper around an event which is being published
	/// </summary>
	public class PublisherEvent
	{
		
		/// <summary>
		/// Add key/value pairs which will be stored with a published notification in the SH service DB.  This key/value pairs are for diagnostic purposes only and will have not effect on the delivery of a notification.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Diagnostics { get; set; }
		
		/// <summary>
		/// Encapsulates the properties of an event.
		/// </summary>
		public Event Event { get; set; }
		
		/// <summary>
		/// Gets or sets flag for filtered events
		/// </summary>
		public System.Nullable<System.Boolean> IsFilteredEvent { get; set; }
		
		/// <summary>
		/// Additional data that needs to be sent as part of notification to complement the Resource data in the Event
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> NotificationData { get; set; }
		
		/// <summary>
		/// Gets or sets the array of older supported resource versions.
		/// </summary>
		public VersionedResource[] OtherResourceVersions { get; set; }
		
		/// <summary>
		/// Optional publisher-input filters which restricts the set of subscriptions which are triggered by the event
		/// </summary>
		public InputFilter[] PublisherInputFilters { get; set; }
		
		/// <summary>
		/// Encapsulates an event subscription.
		/// </summary>
		public Subscription Subscription { get; set; }
	}
	
	/// <summary>
	/// Encapsulates the resource version and its data or reference to the compatible version. Only one of the two last fields should be not null.
	/// </summary>
	public class VersionedResource
	{
		
		/// <summary>
		/// Gets or sets the reference to the compatible version.
		/// </summary>
		public string CompatibleWith { get; set; }
		
		/// <summary>
		/// Gets or sets the resource data.
		/// </summary>
		public string Resource { get; set; }
		
		/// <summary>
		/// Gets or sets the version of the resource data.
		/// </summary>
		public string ResourceVersion { get; set; }
	}
	
	/// <summary>
	/// Defines a query for service hook publishers.
	/// </summary>
	public class PublishersQuery
	{
		
		/// <summary>
		/// Optional list of publisher ids to restrict the results to
		/// </summary>
		public string[] PublisherIds { get; set; }
		
		/// <summary>
		/// Filter for publisher inputs
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> PublisherInputs { get; set; }
		
		/// <summary>
		/// Results from the query
		/// </summary>
		public Publisher[] Results { get; set; }
	}
	
	/// <summary>
	/// Contains all the diagnostics settings for a subscription.
	/// </summary>
	public class SubscriptionDiagnostics
	{
		
		/// <summary>
		/// Data controlling a single diagnostic setting for a subscription.
		/// </summary>
		public SubscriptionTracing DeliveryResults { get; set; }
		
		/// <summary>
		/// Data controlling a single diagnostic setting for a subscription.
		/// </summary>
		public SubscriptionTracing DeliveryTracing { get; set; }
		
		/// <summary>
		/// Data controlling a single diagnostic setting for a subscription.
		/// </summary>
		public SubscriptionTracing EvaluationTracing { get; set; }
	}
	
	/// <summary>
	/// Data controlling a single diagnostic setting for a subscription.
	/// </summary>
	public class SubscriptionTracing
	{
		
		/// <summary>
		/// Indicates whether the diagnostic tracing is enabled or not.
		/// </summary>
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Trace until the specified end date.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// The maximum number of result details to trace.
		/// </summary>
		public System.Nullable<System.Int32> MaxTracedEntries { get; set; }
		
		/// <summary>
		/// The date and time tracing started.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// Trace until remaining count reaches 0.
		/// </summary>
		public System.Nullable<System.Int32> TracedEntries { get; set; }
	}
	
	/// <summary>
	/// Query for obtaining information about the possible/allowed values for one or more subscription inputs
	/// </summary>
	public class SubscriptionInputValuesQuery
	{
		
		/// <summary>
		/// The input values to return on input, and the result from the consumer on output.
		/// </summary>
		public InputValues[] InputValues { get; set; }
		
		/// <summary>
		/// The scope at which the properties to query belong
		/// </summary>
		public SubscriptionInputValuesQueryScope Scope { get; set; }
		
		/// <summary>
		/// Encapsulates an event subscription.
		/// </summary>
		public Subscription Subscription { get; set; }
	}
	
	public enum SubscriptionInputValuesQueryScope
	{
		
		publisher = 0,
		
		consumer = 1,
	}
	
	/// <summary>
	/// Defines a query for service hook subscriptions.
	/// </summary>
	public class SubscriptionsQuery
	{
		
		/// <summary>
		/// Optional consumer action id to restrict the results to (null for any)
		/// </summary>
		public string ConsumerActionId { get; set; }
		
		/// <summary>
		/// Optional consumer id to restrict the results to (null for any)
		/// </summary>
		public string ConsumerId { get; set; }
		
		/// <summary>
		/// Filter for subscription consumer inputs
		/// </summary>
		public InputFilter[] ConsumerInputFilters { get; set; }
		
		/// <summary>
		/// Optional event type id to restrict the results to (null for any)
		/// </summary>
		public string EventType { get; set; }
		
		/// <summary>
		/// Optional publisher id to restrict the results to (null for any)
		/// </summary>
		public string PublisherId { get; set; }
		
		/// <summary>
		/// Filter for subscription publisher inputs
		/// </summary>
		public InputFilter[] PublisherInputFilters { get; set; }
		
		/// <summary>
		/// Results from the query
		/// </summary>
		public Subscription[] Results { get; set; }
		
		/// <summary>
		/// Optional subscriber filter.
		/// </summary>
		public string SubscriberId { get; set; }
	}
	
	/// <summary>
	/// Parameters to update diagnostics settings for a subscription.
	/// </summary>
	public class UpdateSubscripitonDiagnosticsParameters
	{
		
		/// <summary>
		/// Parameters to update a specific diagnostic setting.
		/// </summary>
		public UpdateSubscripitonTracingParameters DeliveryResults { get; set; }
		
		/// <summary>
		/// Parameters to update a specific diagnostic setting.
		/// </summary>
		public UpdateSubscripitonTracingParameters DeliveryTracing { get; set; }
		
		/// <summary>
		/// Parameters to update a specific diagnostic setting.
		/// </summary>
		public UpdateSubscripitonTracingParameters EvaluationTracing { get; set; }
	}
	
	/// <summary>
	/// Parameters to update a specific diagnostic setting.
	/// </summary>
	public class UpdateSubscripitonTracingParameters
	{
		
		/// <summary>
		/// Indicates whether to enable to disable the diagnostic tracing.
		/// </summary>
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
	/// </summary>
	public class VssJsonCollectionWrapper
	{
		
		public string Value { get; set; }
	}
	
	public class VssJsonCollectionWrapperBase
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get a list of available service hook consumer services. Optionally filter by consumers that support at least one event type from the specific publisher.
		/// Consumers_List {organization}/_apis/hooks/consumers
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Consumer[]> Consumers_ListAsync(string organization, string publisherId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/consumers&publisherId=" + (publisherId==null? "" : Uri.EscapeDataString(publisherId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Consumer[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of available service hook consumer services. Optionally filter by consumers that support at least one event type from the specific publisher.
		/// Consumers_List {organization}/_apis/hooks/consumers
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Consumer[] Consumers_List(string organization, string publisherId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/consumers&publisherId=" + (publisherId==null? "" : Uri.EscapeDataString(publisherId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Consumer[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific consumer service. Optionally filter out consumer actions that do not support any event types for the specified publisher.
		/// Consumers_Get {organization}/_apis/hooks/consumers/{consumerId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="consumerId">ID for a consumer.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Consumer> Consumers_GetAsync(string organization, string consumerId, string publisherId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/consumers/"+ (consumerId==null? "" : Uri.EscapeDataString(consumerId))+"&publisherId=" + (publisherId==null? "" : Uri.EscapeDataString(publisherId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Consumer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific consumer service. Optionally filter out consumer actions that do not support any event types for the specified publisher.
		/// Consumers_Get {organization}/_apis/hooks/consumers/{consumerId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="consumerId">ID for a consumer.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Consumer Consumers_Get(string organization, string consumerId, string publisherId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/consumers/"+ (consumerId==null? "" : Uri.EscapeDataString(consumerId))+"&publisherId=" + (publisherId==null? "" : Uri.EscapeDataString(publisherId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Consumer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of consumer actions for a specific consumer.
		/// Consumers_List_Consumer_Actions {organization}/_apis/hooks/consumers/{consumerId}/actions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="consumerId">ID for a consumer.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ConsumerAction[]> Consumers_List_Consumer_ActionsAsync(string organization, string consumerId, string publisherId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/consumers/"+ (consumerId==null? "" : Uri.EscapeDataString(consumerId))+"/actions&publisherId=" + (publisherId==null? "" : Uri.EscapeDataString(publisherId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ConsumerAction[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of consumer actions for a specific consumer.
		/// Consumers_List_Consumer_Actions {organization}/_apis/hooks/consumers/{consumerId}/actions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="consumerId">ID for a consumer.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ConsumerAction[] Consumers_List_Consumer_Actions(string organization, string consumerId, string publisherId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/consumers/"+ (consumerId==null? "" : Uri.EscapeDataString(consumerId))+"/actions&publisherId=" + (publisherId==null? "" : Uri.EscapeDataString(publisherId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ConsumerAction[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details about a specific consumer action.
		/// Consumers_Get_Consumer_Action {organization}/_apis/hooks/consumers/{consumerId}/actions/{consumerActionId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="consumerId">ID for a consumer.</param>
		/// <param name="consumerActionId">ID for a consumerActionId.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ConsumerAction> Consumers_Get_Consumer_ActionAsync(string organization, string consumerId, string consumerActionId, string publisherId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/consumers/"+ (consumerId==null? "" : Uri.EscapeDataString(consumerId))+"/actions/"+ (consumerActionId==null? "" : Uri.EscapeDataString(consumerActionId))+"&publisherId=" + (publisherId==null? "" : Uri.EscapeDataString(publisherId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ConsumerAction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details about a specific consumer action.
		/// Consumers_Get_Consumer_Action {organization}/_apis/hooks/consumers/{consumerId}/actions/{consumerActionId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="consumerId">ID for a consumer.</param>
		/// <param name="consumerActionId">ID for a consumerActionId.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ConsumerAction Consumers_Get_Consumer_Action(string organization, string consumerId, string consumerActionId, string publisherId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/consumers/"+ (consumerId==null? "" : Uri.EscapeDataString(consumerId))+"/actions/"+ (consumerActionId==null? "" : Uri.EscapeDataString(consumerActionId))+"&publisherId=" + (publisherId==null? "" : Uri.EscapeDataString(publisherId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ConsumerAction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Query for notifications. A notification includes details about the event, the request to and the response from the consumer service.
		/// Notifications_Query {organization}/_apis/hooks/notificationsquery
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<NotificationsQuery> Notifications_QueryAsync(string organization, string api_version, NotificationsQuery requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/notificationsquery&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<NotificationsQuery>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Query for notifications. A notification includes details about the event, the request to and the response from the consumer service.
		/// Notifications_Query {organization}/_apis/hooks/notificationsquery
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public NotificationsQuery Notifications_Query(string organization, string api_version, NotificationsQuery requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/notificationsquery&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<NotificationsQuery>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of publishers.
		/// Publishers_List {organization}/_apis/hooks/publishers
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Publisher[]> Publishers_ListAsync(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/publishers&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Publisher[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of publishers.
		/// Publishers_List {organization}/_apis/hooks/publishers
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Publisher[] Publishers_List(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/publishers&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Publisher[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific service hooks publisher.
		/// Publishers_Get {organization}/_apis/hooks/publishers/{publisherId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="publisherId">ID for a publisher.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Publisher> Publishers_GetAsync(string organization, string publisherId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/publishers/"+ (publisherId==null? "" : Uri.EscapeDataString(publisherId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Publisher>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific service hooks publisher.
		/// Publishers_Get {organization}/_apis/hooks/publishers/{publisherId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="publisherId">ID for a publisher.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Publisher Publishers_Get(string organization, string publisherId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/publishers/"+ (publisherId==null? "" : Uri.EscapeDataString(publisherId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Publisher>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the event types for a specific publisher.
		/// Publishers_List_Event_Types {organization}/_apis/hooks/publishers/{publisherId}/eventtypes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="publisherId">ID for a publisher.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<EventTypeDescriptor[]> Publishers_List_Event_TypesAsync(string organization, string publisherId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/publishers/"+ (publisherId==null? "" : Uri.EscapeDataString(publisherId))+"/eventtypes&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EventTypeDescriptor[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the event types for a specific publisher.
		/// Publishers_List_Event_Types {organization}/_apis/hooks/publishers/{publisherId}/eventtypes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="publisherId">ID for a publisher.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public EventTypeDescriptor[] Publishers_List_Event_Types(string organization, string publisherId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/publishers/"+ (publisherId==null? "" : Uri.EscapeDataString(publisherId))+"/eventtypes&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EventTypeDescriptor[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific event type.
		/// Publishers_Get_Event_Type {organization}/_apis/hooks/publishers/{publisherId}/eventtypes/{eventTypeId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="publisherId">ID for a publisher.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<EventTypeDescriptor> Publishers_Get_Event_TypeAsync(string organization, string publisherId, string eventTypeId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/publishers/"+ (publisherId==null? "" : Uri.EscapeDataString(publisherId))+"/eventtypes/"+ (eventTypeId==null? "" : Uri.EscapeDataString(eventTypeId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EventTypeDescriptor>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific event type.
		/// Publishers_Get_Event_Type {organization}/_apis/hooks/publishers/{publisherId}/eventtypes/{eventTypeId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="publisherId">ID for a publisher.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public EventTypeDescriptor Publishers_Get_Event_Type(string organization, string publisherId, string eventTypeId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/publishers/"+ (publisherId==null? "" : Uri.EscapeDataString(publisherId))+"/eventtypes/"+ (eventTypeId==null? "" : Uri.EscapeDataString(eventTypeId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EventTypeDescriptor>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Publishers_Query_Input_Values {organization}/_apis/hooks/publishers/{publisherId}/inputValuesQuery
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<InputValuesQuery> Publishers_Query_Input_ValuesAsync(string organization, string publisherId, string api_version, InputValuesQuery requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/publishers/"+ (publisherId==null? "" : Uri.EscapeDataString(publisherId))+"/inputValuesQuery&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InputValuesQuery>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Publishers_Query_Input_Values {organization}/_apis/hooks/publishers/{publisherId}/inputValuesQuery
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public InputValuesQuery Publishers_Query_Input_Values(string organization, string publisherId, string api_version, InputValuesQuery requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/publishers/"+ (publisherId==null? "" : Uri.EscapeDataString(publisherId))+"/inputValuesQuery&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InputValuesQuery>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Query for service hook publishers.
		/// Publishers_Query_Publishers {organization}/_apis/hooks/publishersquery
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<PublishersQuery> Publishers_Query_PublishersAsync(string organization, string api_version, PublishersQuery requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/publishersquery&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PublishersQuery>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Query for service hook publishers.
		/// Publishers_Query_Publishers {organization}/_apis/hooks/publishersquery
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public PublishersQuery Publishers_Query_Publishers(string organization, string api_version, PublishersQuery requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/publishersquery&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PublishersQuery>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a subscription.
		/// Subscriptions_Create {organization}/_apis/hooks/subscriptions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Subscription to be created.</param>
		/// <returns>successful operation</returns>
		public async Task<Subscription> Subscriptions_CreateAsync(string organization, string api_version, Subscription requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/subscriptions&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Subscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a subscription.
		/// Subscriptions_Create {organization}/_apis/hooks/subscriptions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Subscription to be created.</param>
		/// <returns>successful operation</returns>
		public Subscription Subscriptions_Create(string organization, string api_version, Subscription requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/subscriptions&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Subscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of subscriptions.
		/// Subscriptions_List {organization}/_apis/hooks/subscriptions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="publisherId">ID for a subscription.</param>
		/// <param name="eventType">The event type to filter on (if any).</param>
		/// <param name="consumerId">ID for a consumer.</param>
		/// <param name="consumerActionId">ID for a consumerActionId.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Subscription[]> Subscriptions_ListAsync(string organization, string publisherId, string eventType, string consumerId, string consumerActionId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/subscriptions&publisherId=" + (publisherId==null? "" : Uri.EscapeDataString(publisherId))+"&eventType=" + (eventType==null? "" : Uri.EscapeDataString(eventType))+"&consumerId=" + (consumerId==null? "" : Uri.EscapeDataString(consumerId))+"&consumerActionId=" + (consumerActionId==null? "" : Uri.EscapeDataString(consumerActionId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Subscription[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of subscriptions.
		/// Subscriptions_List {organization}/_apis/hooks/subscriptions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="publisherId">ID for a subscription.</param>
		/// <param name="eventType">The event type to filter on (if any).</param>
		/// <param name="consumerId">ID for a consumer.</param>
		/// <param name="consumerActionId">ID for a consumerActionId.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Subscription[] Subscriptions_List(string organization, string publisherId, string eventType, string consumerId, string consumerActionId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/subscriptions&publisherId=" + (publisherId==null? "" : Uri.EscapeDataString(publisherId))+"&eventType=" + (eventType==null? "" : Uri.EscapeDataString(eventType))+"&consumerId=" + (consumerId==null? "" : Uri.EscapeDataString(consumerId))+"&consumerActionId=" + (consumerActionId==null? "" : Uri.EscapeDataString(consumerActionId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Subscription[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a specific service hooks subscription.
		/// Subscriptions_Delete {organization}/_apis/hooks/subscriptions/{subscriptionId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="subscriptionId">ID for a subscription.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Subscriptions_DeleteAsync(string organization, string subscriptionId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a specific service hooks subscription.
		/// Subscriptions_Delete {organization}/_apis/hooks/subscriptions/{subscriptionId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="subscriptionId">ID for a subscription.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Subscriptions_Delete(string organization, string subscriptionId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific service hooks subscription.
		/// Subscriptions_Get {organization}/_apis/hooks/subscriptions/{subscriptionId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="subscriptionId">ID for a subscription.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Subscription> Subscriptions_GetAsync(string organization, string subscriptionId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Subscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific service hooks subscription.
		/// Subscriptions_Get {organization}/_apis/hooks/subscriptions/{subscriptionId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="subscriptionId">ID for a subscription.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Subscription Subscriptions_Get(string organization, string subscriptionId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Subscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a subscription. <param name="subscriptionId">ID for a subscription that you wish to update.</param>
		/// Subscriptions_Replace_Subscription {organization}/_apis/hooks/subscriptions/{subscriptionId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Subscription> Subscriptions_Replace_SubscriptionAsync(string organization, string subscriptionId, string api_version, Subscription requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Subscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a subscription. <param name="subscriptionId">ID for a subscription that you wish to update.</param>
		/// Subscriptions_Replace_Subscription {organization}/_apis/hooks/subscriptions/{subscriptionId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Subscription Subscriptions_Replace_Subscription(string organization, string subscriptionId, string api_version, Subscription requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Subscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Diagnostics_Get {organization}/_apis/hooks/subscriptions/{subscriptionId}/diagnostics
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<SubscriptionDiagnostics> Diagnostics_GetAsync(string organization, string subscriptionId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/diagnostics&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SubscriptionDiagnostics>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Diagnostics_Get {organization}/_apis/hooks/subscriptions/{subscriptionId}/diagnostics
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public SubscriptionDiagnostics Diagnostics_Get(string organization, string subscriptionId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/diagnostics&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SubscriptionDiagnostics>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Diagnostics_Update {organization}/_apis/hooks/subscriptions/{subscriptionId}/diagnostics
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<SubscriptionDiagnostics> Diagnostics_UpdateAsync(string organization, string subscriptionId, string api_version, UpdateSubscripitonDiagnosticsParameters requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/diagnostics&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SubscriptionDiagnostics>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Diagnostics_Update {organization}/_apis/hooks/subscriptions/{subscriptionId}/diagnostics
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public SubscriptionDiagnostics Diagnostics_Update(string organization, string subscriptionId, string api_version, UpdateSubscripitonDiagnosticsParameters requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/diagnostics&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SubscriptionDiagnostics>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of notifications for a specific subscription. A notification includes details about the event, the request to and the response from the consumer service.
		/// Notifications_List {organization}/_apis/hooks/subscriptions/{subscriptionId}/notifications
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="subscriptionId">ID for a subscription.</param>
		/// <param name="maxResults">Maximum number of notifications to return. Default is **100**.</param>
		/// <param name="status">Get only notifications with this status.</param>
		/// <param name="result">Get only notifications with this result type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Notification[]> Notifications_ListAsync(string organization, string subscriptionId, int maxResults, NotificationStatus status, NotificationResult result, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/notifications&maxResults="+maxResults+"&status=" + status+"&result=" + result+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Notification[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of notifications for a specific subscription. A notification includes details about the event, the request to and the response from the consumer service.
		/// Notifications_List {organization}/_apis/hooks/subscriptions/{subscriptionId}/notifications
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="subscriptionId">ID for a subscription.</param>
		/// <param name="maxResults">Maximum number of notifications to return. Default is **100**.</param>
		/// <param name="status">Get only notifications with this status.</param>
		/// <param name="result">Get only notifications with this result type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Notification[] Notifications_List(string organization, string subscriptionId, int maxResults, NotificationStatus status, NotificationResult result, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/notifications&maxResults="+maxResults+"&status=" + status+"&result=" + result+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Notification[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific notification for a subscription.
		/// Notifications_Get {organization}/_apis/hooks/subscriptions/{subscriptionId}/notifications/{notificationId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="subscriptionId">ID for a subscription.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Notification> Notifications_GetAsync(string organization, string subscriptionId, int notificationId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/notifications/"+notificationId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Notification>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific notification for a subscription.
		/// Notifications_Get {organization}/_apis/hooks/subscriptions/{subscriptionId}/notifications/{notificationId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="subscriptionId">ID for a subscription.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Notification Notifications_Get(string organization, string subscriptionId, int notificationId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/notifications/"+notificationId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Notification>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Query for service hook subscriptions.
		/// Subscriptions_Create_Subscriptions_Query {organization}/_apis/hooks/subscriptionsquery
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<SubscriptionsQuery> Subscriptions_Create_Subscriptions_QueryAsync(string organization, string api_version, SubscriptionsQuery requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/subscriptionsquery&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SubscriptionsQuery>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Query for service hook subscriptions.
		/// Subscriptions_Create_Subscriptions_Query {organization}/_apis/hooks/subscriptionsquery
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public SubscriptionsQuery Subscriptions_Create_Subscriptions_Query(string organization, string api_version, SubscriptionsQuery requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/subscriptionsquery&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SubscriptionsQuery>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sends a test notification. This is useful for verifying the configuration of an updated or new service hooks subscription.
		/// Notifications_Create {organization}/_apis/hooks/testnotifications
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="useRealData">Only allow testing with real data in existing subscriptions.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Notification> Notifications_CreateAsync(string organization, bool useRealData, string api_version, Notification requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/testnotifications&useRealData="+useRealData+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Notification>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sends a test notification. This is useful for verifying the configuration of an updated or new service hooks subscription.
		/// Notifications_Create {organization}/_apis/hooks/testnotifications
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="useRealData">Only allow testing with real data in existing subscriptions.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Notification Notifications_Create(string organization, bool useRealData, string api_version, Notification requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/hooks/testnotifications&useRealData="+useRealData+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Notification>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
