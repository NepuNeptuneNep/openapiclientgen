//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Defines the Board result that matched a Board search request.
	/// </summary>
	public class BoardResult
	{
		
		/// <summary>
		/// Board Type of the board document.
		/// </summary>
		public string Boardtype { get; set; }
		
		/// <summary>
		/// Defines the details of the collection.
		/// </summary>
		public Collection Collection { get; set; }
		
		/// <summary>
		/// Defines the details of the project.
		/// </summary>
		public Project Project { get; set; }
		
		/// <summary>
		/// Defines the details of the team.
		/// </summary>
		public Team Team { get; set; }
	}
	
	/// <summary>
	/// Defines the details of the collection.
	/// </summary>
	public class Collection
	{
		
		/// <summary>
		/// Name of the collection.
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Defines the details of the project.
	/// </summary>
	public class Project
	{
		
		/// <summary>
		/// Id of the project.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the project.
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Defines the details of the team.
	/// </summary>
	public class Team
	{
		
		/// <summary>
		/// Id of the team.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the Team.
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Defines a Board search request.
	/// </summary>
	public class BoardSearchRequest
	{
	}
	
	/// <summary>
	/// Defines a Board search response item.
	/// </summary>
	public class BoardSearchResponse
	{
		
		/// <summary>
		/// Total number of matched Board documents.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// List of top matched Board documents.
		/// </summary>
		public BoardResult[] Results { get; set; }
	}
	
	/// <summary>
	/// Information about the configured branch.
	/// </summary>
	public class BranchInfo
	{
		
		/// <summary>
		/// Name of the indexed branch
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Defines the code result containing information of the searched files and its metadata.
	/// </summary>
	public class CodeResult
	{
		
		/// <summary>
		/// Defines the details of the collection.
		/// </summary>
		public Collection Collection { get; set; }
		
		/// <summary>
		/// ContentId of the result file.
		/// </summary>
		public string ContentId { get; set; }
		
		/// <summary>
		/// Name of the result file.
		/// </summary>
		public string FileName { get; set; }
		
		/// <summary>
		/// Dictionary of field to hit offsets in the result file. Key identifies the area in which hits were found, for ex: file content/file name etc.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, Hit[]> Matches { get; set; }
		
		/// <summary>
		/// Path at which result file is present.
		/// </summary>
		public string Path { get; set; }
		
		/// <summary>
		/// Defines the details of the project.
		/// </summary>
		public Project Project { get; set; }
		
		/// <summary>
		/// Defines the details of the repository.
		/// </summary>
		public Repository Repository { get; set; }
		
		/// <summary>
		/// Versions of the result file.
		/// </summary>
		public Version[] Versions { get; set; }
	}
	
	/// <summary>
	/// Describes the position of a piece of text in a document.
	/// </summary>
	public class Hit
	{
		
		/// <summary>
		/// Gets or sets the start character offset of a piece of text.
		/// </summary>
		public System.Nullable<System.Int32> CharOffset { get; set; }
		
		/// <summary>
		/// Gets or sets an extract of code where the match appears. Usually it is the line where there is the match.
		/// </summary>
		public string CodeSnippet { get; set; }
		
		/// <summary>
		/// Gets or sets the column number where the match appears in the line.
		/// </summary>
		public System.Nullable<System.Int32> Column { get; set; }
		
		/// <summary>
		/// Gets or sets the length of a piece of text.
		/// </summary>
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Gets or sets the line number where the match appears in the file.
		/// </summary>
		public System.Nullable<System.Int32> Line { get; set; }
		
		/// <summary>
		/// Gets or sets the name of type of a piece of text.
		/// </summary>
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Defines the details of the repository.
	/// </summary>
	public class Repository
	{
		
		/// <summary>
		/// Id of the repository.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the repository.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Version control type of the result file.
		/// </summary>
		public System.Nullable<RepositoryType> Type { get; set; }
	}
	
	public enum RepositoryType
	{
		
		git = 0,
		
		tfvc = 1,
		
		custom = 2,
	}
	
	/// <summary>
	/// Describes the details pertaining to a version of the result file.
	/// </summary>
	public class Version
	{
		
		/// <summary>
		/// Name of the branch.
		/// </summary>
		public string BranchName { get; set; }
		
		/// <summary>
		/// ChangeId in the given branch associated with this match.
		/// </summary>
		public string ChangeId { get; set; }
	}
	
	/// <summary>
	/// Defines a code search request.
	/// </summary>
	public class CodeSearchRequest
	{
		
		/// <summary>
		/// Flag to opt for including matched code snippet in the result. Default behavior is false.
		/// </summary>
		public System.Nullable<System.Boolean> IncludeSnippet { get; set; }
	}
	
	/// <summary>
	/// Defines a code search response item.
	/// </summary>
	public class CodeSearchResponse
	{
		
		/// <summary>
		/// Total number of matched files.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// List of matched files.
		/// </summary>
		public CodeResult[] Results { get; set; }
	}
	
	/// <summary>
	/// Defines the custom repository status.
	/// </summary>
	public class CustomRepositoryStatusResponse
	{
		
		/// <summary>
		/// Repository Id.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// List of indexed top level folders info.
		/// </summary>
		public DepotInfo[] IndexedTopLevelFolders { get; set; }
		
		/// <summary>
		/// Repository Name.
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Information about the custom repository indexing freshness for configured branches and depots.
	/// </summary>
	public class DepotInfo
	{
		
		/// <summary>
		/// Name of the indexed top level folder (depot).
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Base contract for search request types without scroll support.
	/// </summary>
	public class EntitySearchRequest
	{
		
		/// <summary>
		/// Options for sorting search results. If set to null, the results will be returned sorted by relevance. If more than one sort option is provided, the results are sorted in the order specified in the OrderBy.
		/// </summary>
		public SortOption[] OrderBy { get; set; }
		
		/// <summary>
		/// Number of results to be skipped.
		/// </summary>
		public System.Nullable<System.Int32> Skip { get; set; }
		
		/// <summary>
		/// Number of results to be returned.
		/// </summary>
		public System.Nullable<System.Int32> Top { get; set; }
		
		/// <summary>
		/// Flag to opt for faceting in the result. Default behavior is false.
		/// </summary>
		public System.Nullable<System.Boolean> IncludeFacets { get; set; }
	}
	
	/// <summary>
	/// Defines how to sort the result.
	/// </summary>
	public class SortOption
	{
		
		/// <summary>
		/// Field name on which sorting should be done.
		/// </summary>
		public string Field { get; set; }
		
		/// <summary>
		/// Order (ASC/DESC) in which the results should be sorted.
		/// </summary>
		public string SortOrder { get; set; }
	}
	
	/// <summary>
	/// Base class for search request types.
	/// </summary>
	public class EntitySearchRequestBase
	{
		
		/// <summary>
		/// Filters to be applied. Set it to null if there are no filters to be applied.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string[]> Filters { get; set; }
		
		/// <summary>
		/// The search text.
		/// </summary>
		public string SearchText { get; set; }
	}
	
	/// <summary>
	/// Defines the base contract for search response.
	/// </summary>
	public class EntitySearchResponse
	{
		
		/// <summary>
		/// A dictionary storing an array of <code>Filter</code> object against each facet.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, Filter[]> Facets { get; set; }
		
		/// <summary>
		/// Numeric code indicating any additional information: 0 - Ok, 1 - Account is being reindexed, 2 - Account indexing has not started, 3 - Invalid Request, 4 - Prefix wildcard query not supported, 5 - MultiWords with code facet not supported, 6 - Account is being onboarded, 7 - Account is being onboarded or reindexed, 8 - Top value trimmed to maxresult allowed 9 - Branches are being indexed, 10 - Faceting not enabled, 11 - Work items not accessible, 19 - Phrase queries with code type filters not supported, 20 - Wildcard queries with code type filters not supported. Any other info code is used for internal purpose.
		/// </summary>
		public System.Nullable<System.Int32> InfoCode { get; set; }
	}
	
	/// <summary>
	/// Describes a filter bucket item representing the total matches of search result, name and id.
	/// </summary>
	public class Filter
	{
		
		/// <summary>
		/// Id of the filter bucket.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the filter bucket.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Count of matches in the filter bucket.
		/// </summary>
		public System.Nullable<System.Int32> ResultCount { get; set; }
	}
	
	/// <summary>
	/// Defines the details of a feed.
	/// </summary>
	public class FeedInfo
	{
		
		/// <summary>
		/// Id of the collection.
		/// </summary>
		public string CollectionId { get; set; }
		
		/// <summary>
		/// Name of the collection.
		/// </summary>
		public string CollectionName { get; set; }
		
		/// <summary>
		/// Id of the feed.
		/// </summary>
		public string FeedId { get; set; }
		
		/// <summary>
		/// Name of the feed.
		/// </summary>
		public string FeedName { get; set; }
		
		/// <summary>
		/// Latest matched version of package in this Feed.
		/// </summary>
		public string LatestMatchedVersion { get; set; }
		
		/// <summary>
		/// Latest version of package in this Feed.
		/// </summary>
		public string LatestVersion { get; set; }
		
		/// <summary>
		/// Url of package in this Feed.
		/// </summary>
		public string PackageUrl { get; set; }
		
		/// <summary>
		/// List of views which contain the matched package.
		/// </summary>
		public string[] Views { get; set; }
	}
	
	/// <summary>
	/// Defines the matched terms in the field of the package result.
	/// </summary>
	public class PackageHit
	{
		
		/// <summary>
		/// Reference name of the highlighted field.
		/// </summary>
		public string FieldReferenceName { get; set; }
		
		/// <summary>
		/// Matched/highlighted snippets of the field.
		/// </summary>
		public string[] Highlights { get; set; }
	}
	
	/// <summary>
	/// Defines the package result that matched a package search request.
	/// </summary>
	public class PackageResult
	{
		
		/// <summary>
		/// Description of the package.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// List of feeds which contain the matching package.
		/// </summary>
		public FeedInfo[] Feeds { get; set; }
		
		/// <summary>
		/// List of highlighted fields for the match.
		/// </summary>
		public PackageHit[] Hits { get; set; }
		
		/// <summary>
		/// Id of the package.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the package.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Type of the package.
		/// </summary>
		public string ProtocolType { get; set; }
	}
	
	/// <summary>
	/// Defines a package search request.
	/// </summary>
	public class PackageSearchRequest
	{
	}
	
	public class PackageSearchResponse
	{
		
		public string[] ActivityId { get; set; }
		
		/// <summary>
		/// Defines a response item that is returned for a package search request.
		/// </summary>
		public PackageSearchResponseContent Content { get; set; }
	}
	
	/// <summary>
	/// Defines a response item that is returned for a package search request.
	/// </summary>
	public class PackageSearchResponseContent
	{
		
		/// <summary>
		/// Total number of matched packages.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// List of matched packages.
		/// </summary>
		public PackageResult[] Results { get; set; }
	}
	
	/// <summary>
	/// Defines the details of the project.
	/// </summary>
	public class ProjectReference
	{
		
		/// <summary>
		/// ID of the project.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the project.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Visibility of the project.
		/// </summary>
		public string Visibility { get; set; }
	}
	
	/// <summary>
	/// Defines the repository status.
	/// </summary>
	public class RepositoryStatusResponse
	{
		
		/// <summary>
		/// Repository Id.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// List of Indexed branches info.
		/// </summary>
		public BranchInfo[] IndexedBranches { get; set; }
		
		/// <summary>
		/// Repository Name.
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Defines a scroll code search request.
	/// </summary>
	public class ScrollSearchRequest
	{
		
		/// <summary>
		/// Scroll Id for scroll search query.
		/// </summary>
		public string ScrollId { get; set; }
		
		/// <summary>
		/// Size of data to return for scroll search query. Min value is 201.
		/// </summary>
		public System.Nullable<System.Int32> ScrollSize { get; set; }
	}
	
	/// <summary>
	/// Defines the setting result that matched a setting search request
	/// </summary>
	public class SettingResult
	{
		
		/// <summary>
		/// Description of the settings page
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Icon name of the settings page
		/// </summary>
		public string Icon { get; set; }
		
		/// <summary>
		/// Contribution url route id of the corresponding settings page
		/// </summary>
		public string RouteId { get; set; }
		
		/// <summary>
		/// Contribution url route parameter of the corresponding settings page
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> RouteParameterMapping { get; set; }
		
		/// <summary>
		/// Scope of the settings page, either organization, project or user
		/// </summary>
		public System.Nullable<SettingResultScope> Scope { get; set; }
		
		/// <summary>
		/// Title of the settings page
		/// </summary>
		public string Title { get; set; }
	}
	
	public enum SettingResultScope
	{
		
		none = 0,
		
		organization = 1,
		
		project = 2,
		
		user = 3,
	}
	
	/// <summary>
	/// Defines a setting search request
	/// </summary>
	public class SettingSearchRequest
	{
	}
	
	/// <summary>
	/// Defines a setting search response item
	/// </summary>
	public class SettingSearchResponse
	{
		
		/// <summary>
		/// Total number of matched setting documents.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// List of top matched setting documents.
		/// </summary>
		public SettingResult[] Results { get; set; }
	}
	
	/// <summary>
	/// Defines the TFVC repository status.
	/// </summary>
	public class TfvcRepositoryStatusResponse
	{
		
		/// <summary>
		/// Repository Id.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// List of Indexing Information for TFVC repository
		/// </summary>
		public BranchInfo[] IndexingInformation { get; set; }
		
		/// <summary>
		/// Repository Name.
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Defines the details of wiki.
	/// </summary>
	public class Wiki
	{
		
		/// <summary>
		/// Id of the wiki.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Mapped path for the wiki.
		/// </summary>
		public string MappedPath { get; set; }
		
		/// <summary>
		/// Name of the wiki.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Version for wiki.
		/// </summary>
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Defines the matched terms in the field of the wiki result.
	/// </summary>
	public class WikiHit
	{
		
		/// <summary>
		/// Reference name of the highlighted field.
		/// </summary>
		public string FieldReferenceName { get; set; }
		
		/// <summary>
		/// Matched/highlighted snippets of the field.
		/// </summary>
		public string[] Highlights { get; set; }
	}
	
	/// <summary>
	/// Defines the wiki result that matched a wiki search request.
	/// </summary>
	public class WikiResult
	{
		
		/// <summary>
		/// Defines the details of the collection.
		/// </summary>
		public Collection Collection { get; set; }
		
		/// <summary>
		/// ContentId of the result file.
		/// </summary>
		public string ContentId { get; set; }
		
		/// <summary>
		/// Name of the result file.
		/// </summary>
		public string FileName { get; set; }
		
		/// <summary>
		/// Highlighted snippets of fields that match the search request. The list is sorted by relevance of the snippets.
		/// </summary>
		public WikiHit[] Hits { get; set; }
		
		/// <summary>
		/// Path at which result file is present.
		/// </summary>
		public string Path { get; set; }
		
		/// <summary>
		/// Defines the details of the project.
		/// </summary>
		public ProjectReference Project { get; set; }
		
		/// <summary>
		/// Defines the details of wiki.
		/// </summary>
		public Wiki Wiki { get; set; }
	}
	
	/// <summary>
	/// Defines a wiki search request.
	/// </summary>
	public class WikiSearchRequest
	{
	}
	
	/// <summary>
	/// Defines a wiki search response item.
	/// </summary>
	public class WikiSearchResponse
	{
		
		/// <summary>
		/// Total number of matched wiki documents.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// List of top matched wiki documents.
		/// </summary>
		public WikiResult[] Results { get; set; }
	}
	
	/// <summary>
	/// Defines the matched terms in the field of the work item result.
	/// </summary>
	public class WorkItemHit
	{
		
		/// <summary>
		/// Reference name of the highlighted field.
		/// </summary>
		public string FieldReferenceName { get; set; }
		
		/// <summary>
		/// Matched/highlighted snippets of the field.
		/// </summary>
		public string[] Highlights { get; set; }
	}
	
	/// <summary>
	/// Defines the work item result that matched a work item search request.
	/// </summary>
	public class WorkItemResult
	{
		
		/// <summary>
		/// A standard set of work item fields and their values.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> Fields { get; set; }
		
		/// <summary>
		/// Highlighted snippets of fields that match the search request. The list is sorted by relevance of the snippets.
		/// </summary>
		public WorkItemHit[] Hits { get; set; }
		
		/// <summary>
		/// Defines the details of the project.
		/// </summary>
		public Project Project { get; set; }
		
		/// <summary>
		/// Reference to the work item.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Defines a work item search request.
	/// </summary>
	public class WorkItemSearchRequest
	{
	}
	
	/// <summary>
	/// Defines a response item that is returned for a work item search request.
	/// </summary>
	public class WorkItemSearchResponse
	{
		
		/// <summary>
		/// Total number of matched work items.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// List of top matched work items.
		/// </summary>
		public WorkItemResult[] Results { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Provides a set of results for the search text.
		/// Package_Search_Results_Fetch_Package_Search_Results {organization}/_apis/search/packagesearchresults
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The Package Search Request.</param>
		/// <returns>successful operation</returns>
		public async Task<PackageSearchResponseContent> Package_Search_Results_Fetch_Package_Search_ResultsAsync(string organization, string api_version, PackageSearchRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/search/packagesearchresults&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PackageSearchResponseContent>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides a set of results for the search text.
		/// Package_Search_Results_Fetch_Package_Search_Results {organization}/_apis/search/packagesearchresults
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The Package Search Request.</param>
		/// <returns>successful operation</returns>
		public PackageSearchResponseContent Package_Search_Results_Fetch_Package_Search_Results(string organization, string api_version, PackageSearchRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/search/packagesearchresults&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PackageSearchResponseContent>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides a set of results for the search text.
		/// Code_Search_Results_Fetch_Code_Search_Results {organization}/{project}/_apis/search/codesearchresults
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The Code Search Request.</param>
		/// <returns>successful operation</returns>
		public async Task<CodeSearchResponse> Code_Search_Results_Fetch_Code_Search_ResultsAsync(string organization, string project, string api_version, CodeSearchRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/search/codesearchresults&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CodeSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides a set of results for the search text.
		/// Code_Search_Results_Fetch_Code_Search_Results {organization}/{project}/_apis/search/codesearchresults
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The Code Search Request.</param>
		/// <returns>successful operation</returns>
		public CodeSearchResponse Code_Search_Results_Fetch_Code_Search_Results(string organization, string project, string api_version, CodeSearchRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/search/codesearchresults&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CodeSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides status of Repository.
		/// Repositories_Get {organization}/{project}/_apis/search/status/repositories/{repository}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="repository">Repository ID or repository name.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<RepositoryStatusResponse> Repositories_GetAsync(string organization, string project, string repository, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/search/status/repositories/"+ (repository==null? "" : Uri.EscapeDataString(repository))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RepositoryStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides status of Repository.
		/// Repositories_Get {organization}/{project}/_apis/search/status/repositories/{repository}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="repository">Repository ID or repository name.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public RepositoryStatusResponse Repositories_Get(string organization, string project, string repository, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/search/status/repositories/"+ (repository==null? "" : Uri.EscapeDataString(repository))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RepositoryStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides status of TFVC Repository.
		/// Tfvc_Get {organization}/{project}/_apis/search/status/tfvc
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TfvcRepositoryStatusResponse> Tfvc_GetAsync(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/search/status/tfvc&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcRepositoryStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides status of TFVC Repository.
		/// Tfvc_Get {organization}/{project}/_apis/search/status/tfvc
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TfvcRepositoryStatusResponse Tfvc_Get(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/search/status/tfvc&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TfvcRepositoryStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides a set of results for the search request.
		/// Wiki_Search_Results_Fetch_Wiki_Search_Results {organization}/{project}/_apis/search/wikisearchresults
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The Wiki Search Request.</param>
		/// <returns>successful operation</returns>
		public async Task<WikiSearchResponse> Wiki_Search_Results_Fetch_Wiki_Search_ResultsAsync(string organization, string project, string api_version, WikiSearchRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/search/wikisearchresults&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides a set of results for the search request.
		/// Wiki_Search_Results_Fetch_Wiki_Search_Results {organization}/{project}/_apis/search/wikisearchresults
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The Wiki Search Request.</param>
		/// <returns>successful operation</returns>
		public WikiSearchResponse Wiki_Search_Results_Fetch_Wiki_Search_Results(string organization, string project, string api_version, WikiSearchRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/search/wikisearchresults&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WikiSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides a set of results for the search text.
		/// Work_Item_Search_Results_Fetch_Work_Item_Search_Results {organization}/{project}/_apis/search/workitemsearchresults
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The Work Item Search Request.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemSearchResponse> Work_Item_Search_Results_Fetch_Work_Item_Search_ResultsAsync(string organization, string project, string api_version, WorkItemSearchRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/search/workitemsearchresults&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides a set of results for the search text.
		/// Work_Item_Search_Results_Fetch_Work_Item_Search_Results {organization}/{project}/_apis/search/workitemsearchresults
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The Work Item Search Request.</param>
		/// <returns>successful operation</returns>
		public WorkItemSearchResponse Work_Item_Search_Results_Fetch_Work_Item_Search_Results(string organization, string project, string api_version, WorkItemSearchRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/search/workitemsearchresults&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
