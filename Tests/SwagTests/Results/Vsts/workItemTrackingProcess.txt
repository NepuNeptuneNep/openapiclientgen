//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Class that describes a request to add a field in a work item type.
	/// </summary>
	public class AddProcessWorkItemTypeFieldRequest
	{
		
		/// <summary>
		/// The list of field allowed values.
		/// </summary>
		public string[] AllowedValues { get; set; }
		
		/// <summary>
		/// Allow setting field value to a group identity. Only applies to identity fields.
		/// </summary>
		public System.Nullable<System.Boolean> AllowGroups { get; set; }
		
		/// <summary>
		/// The default value of the field.
		/// </summary>
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// If true the field cannot be edited.
		/// </summary>
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// Reference name of the field.
		/// </summary>
		public string ReferenceName { get; set; }
		
		/// <summary>
		/// If true the field cannot be empty.
		/// </summary>
		public System.Nullable<System.Boolean> Required { get; set; }
	}
	
	/// <summary>
	/// Represent a control in the form.
	/// </summary>
	public class Control
	{
		
		/// <summary>
		/// Properties of a work item form contribution
		/// </summary>
		public WitContribution Contribution { get; set; }
		
		/// <summary>
		/// Type of the control.
		/// </summary>
		public string ControlType { get; set; }
		
		/// <summary>
		/// Height of the control, for html controls.
		/// </summary>
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// The id for the layout node.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// A value indicating whether this layout node has been inherited. from a parent layout.  This is expected to only be only set by the combiner.
		/// </summary>
		public System.Nullable<System.Boolean> Inherited { get; set; }
		
		/// <summary>
		/// A value indicating if the layout node is contribution or not.
		/// </summary>
		public System.Nullable<System.Boolean> IsContribution { get; set; }
		
		/// <summary>
		/// Label for the field.
		/// </summary>
		public string Label { get; set; }
		
		/// <summary>
		/// Inner text of the control.
		/// </summary>
		public string Metadata { get; set; }
		
		/// <summary>
		/// Order in which the control should appear in its group.
		/// </summary>
		public System.Nullable<System.Int32> Order { get; set; }
		
		/// <summary>
		/// A value indicating whether this layout node has been overridden . by a child layout.
		/// </summary>
		public System.Nullable<System.Boolean> Overridden { get; set; }
		
		/// <summary>
		/// A value indicating if the control is readonly.
		/// </summary>
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// A value indicating if the control should be hidden or not.
		/// </summary>
		public System.Nullable<System.Boolean> Visible { get; set; }
		
		/// <summary>
		/// Watermark text for the textbox.
		/// </summary>
		public string Watermark { get; set; }
	}
	
	/// <summary>
	/// Properties of a work item form contribution
	/// </summary>
	public class WitContribution
	{
		
		/// <summary>
		/// The id for the contribution.
		/// </summary>
		public string ContributionId { get; set; }
		
		/// <summary>
		/// The height for the contribution.
		/// </summary>
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// A dictionary holding key value pairs for contribution inputs.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Inputs { get; set; }
		
		/// <summary>
		/// A value indicating if the contribution should be show on deleted workItem.
		/// </summary>
		public System.Nullable<System.Boolean> ShowOnDeletedWorkItem { get; set; }
	}
	
	/// <summary>
	/// Describes a process being created.
	/// </summary>
	public class CreateProcessModel
	{
		
		/// <summary>
		/// Description of the process
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Name of the process
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The ID of the parent process
		/// </summary>
		public string ParentProcessTypeId { get; set; }
		
		/// <summary>
		/// Reference name of process being created. If not specified, server will assign a unique reference name
		/// </summary>
		public string ReferenceName { get; set; }
	}
	
	/// <summary>
	/// Request object/class for creating a rule on a work item type.
	/// </summary>
	public class CreateProcessRuleRequest
	{
		
		/// <summary>
		/// List of actions to take when the rule is triggered.
		/// </summary>
		public RuleAction[] Actions { get; set; }
		
		/// <summary>
		/// List of conditions when the rule should be triggered.
		/// </summary>
		public RuleCondition[] Conditions { get; set; }
		
		/// <summary>
		/// Indicates if the rule is disabled.
		/// </summary>
		public System.Nullable<System.Boolean> IsDisabled { get; set; }
		
		/// <summary>
		/// Name for the rule.
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Action to take when the rule is triggered.
	/// </summary>
	public class RuleAction
	{
		
		/// <summary>
		/// Type of action to take when the rule is triggered.
		/// </summary>
		public RuleActionActionType ActionType { get; set; }
		
		/// <summary>
		/// Field on which the action should be taken.
		/// </summary>
		public string TargetField { get; set; }
		
		/// <summary>
		/// Value to apply on target field, once the action is taken.
		/// </summary>
		public string Value { get; set; }
	}
	
	public enum RuleActionActionType
	{
		
		makeRequired = 0,
		
		makeReadOnly = 1,
		
		setDefaultValue = 2,
		
		setDefaultFromClock = 3,
		
		setDefaultFromCurrentUser = 4,
		
		setDefaultFromField = 5,
		
		copyValue = 6,
		
		copyFromClock = 7,
		
		copyFromCurrentUser = 8,
		
		copyFromField = 9,
		
		setValueToEmpty = 10,
		
		copyFromServerClock = 11,
		
		copyFromServerCurrentUser = 12,
		
		hideTargetField = 13,
	}
	
	/// <summary>
	/// Defines a condition on a field when the rule should be triggered.
	/// </summary>
	public class RuleCondition
	{
		
		/// <summary>
		/// Type of condition. $When. This condition limits the execution of its children to cases when another field has a particular value, i.e. when the Is value of the referenced field is equal to the given literal value. $WhenNot.This condition limits the execution of its children to cases when another field does not have a particular value, i.e.when the Is value of the referenced field is not equal to the given literal value. $WhenChanged.This condition limits the execution of its children to cases when another field has changed, i.e.when the Is value of the referenced field is not equal to the Was value of that field. $WhenNotChanged.This condition limits the execution of its children to cases when another field has not changed, i.e.when the Is value of the referenced field is equal to the Was value of that field.
		/// </summary>
		public RuleConditionConditionType ConditionType { get; set; }
		
		/// <summary>
		/// Field that defines condition.
		/// </summary>
		public string Field { get; set; }
		
		/// <summary>
		/// Value of field to define the condition for rule.
		/// </summary>
		public string Value { get; set; }
	}
	
	public enum RuleConditionConditionType
	{
		
		when = 0,
		
		whenNot = 1,
		
		whenChanged = 2,
		
		whenNotChanged = 3,
		
		whenWas = 4,
		
		whenStateChangedTo = 5,
		
		whenStateChangedFromAndTo = 6,
		
		whenWorkItemIsCreated = 7,
		
		whenValueIsDefined = 8,
		
		whenValueIsNotDefined = 9,
		
		whenCurrentUserIsMemberOfGroup = 10,
		
		whenCurrentUserIsNotMemberOfGroup = 11,
	}
	
	/// <summary>
	/// Class for create work item type request
	/// </summary>
	public class CreateProcessWorkItemTypeRequest
	{
		
		/// <summary>
		/// Color hexadecimal code to represent the work item type
		/// </summary>
		public string Color { get; set; }
		
		/// <summary>
		/// Description of the work item type
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Icon to represent the work item type
		/// </summary>
		public string Icon { get; set; }
		
		/// <summary>
		/// Parent work item type for work item type
		/// </summary>
		public string InheritsFrom { get; set; }
		
		/// <summary>
		/// True if the work item type need to be disabled
		/// </summary>
		public System.Nullable<System.Boolean> IsDisabled { get; set; }
		
		/// <summary>
		/// Name of work item type
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents the extensions part of the layout
	/// </summary>
	public class Extension
	{
		
		/// <summary>
		/// Id of the extension
		/// </summary>
		public string Id { get; set; }
	}
	
	public class FieldModel
	{
		
		public string Description { get; set; }
		
		public string Id { get; set; }
		
		public System.Nullable<System.Boolean> IsIdentity { get; set; }
		
		public string Name { get; set; }
		
		public FieldModelType Type { get; set; }
		
		public string Url { get; set; }
	}
	
	public enum FieldModelType
	{
		
		_string = 0,
		
		integer = 1,
		
		dateTime = 2,
		
		plainText = 3,
		
		html = 4,
		
		treePath = 5,
		
		history = 6,
		
		_double = 7,
		
		guid = 8,
		
		boolean = 9,
		
		identity = 10,
		
		picklistInteger = 11,
		
		picklistString = 12,
		
		picklistDouble = 13,
	}
	
	public class FieldRuleModel
	{
		
		public RuleActionModel[] Actions { get; set; }
		
		public RuleConditionModel[] Conditions { get; set; }
		
		public string FriendlyName { get; set; }
		
		public string Id { get; set; }
		
		public System.Nullable<System.Boolean> IsDisabled { get; set; }
		
		public System.Nullable<System.Boolean> IsSystem { get; set; }
	}
	
	/// <summary>
	/// Action to take when the rule is triggered.
	/// </summary>
	public class RuleActionModel
	{
		
		public string ActionType { get; set; }
		
		public string TargetField { get; set; }
		
		public string Value { get; set; }
	}
	
	public class RuleConditionModel
	{
		
		public string ConditionType { get; set; }
		
		public string Field { get; set; }
		
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Describes the layout of a work item type
	/// </summary>
	public class FormLayout
	{
		
		/// <summary>
		/// Gets and sets extensions list.
		/// </summary>
		public Extension[] Extensions { get; set; }
		
		/// <summary>
		/// Top level tabs of the layout.
		/// </summary>
		public Page[] Pages { get; set; }
		
		/// <summary>
		/// Headers controls of the layout.
		/// </summary>
		public Control[] SystemControls { get; set; }
	}
	
	/// <summary>
	/// Describes a page in the work item form layout
	/// </summary>
	public class Page
	{
		
		/// <summary>
		/// Properties of a work item form contribution
		/// </summary>
		public WitContribution Contribution { get; set; }
		
		/// <summary>
		/// The id for the layout node.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// A value indicating whether this layout node has been inherited from a parent layout.  This is expected to only be only set by the combiner.
		/// </summary>
		public System.Nullable<System.Boolean> Inherited { get; set; }
		
		/// <summary>
		/// A value indicating if the layout node is contribution are not.
		/// </summary>
		public System.Nullable<System.Boolean> IsContribution { get; set; }
		
		/// <summary>
		/// The label for the page.
		/// </summary>
		public string Label { get; set; }
		
		/// <summary>
		/// A value indicating whether any user operations are permitted on this page and the contents of this page
		/// </summary>
		public System.Nullable<System.Boolean> Locked { get; set; }
		
		/// <summary>
		/// Order in which the page should appear in the layout.
		/// </summary>
		public System.Nullable<System.Int32> Order { get; set; }
		
		/// <summary>
		/// A value indicating whether this layout node has been overridden by a child layout.
		/// </summary>
		public System.Nullable<System.Boolean> Overridden { get; set; }
		
		/// <summary>
		/// The icon for the page.
		/// </summary>
		public PagePageType PageType { get; set; }
		
		/// <summary>
		/// The sections of the page.
		/// </summary>
		public Section[] Sections { get; set; }
		
		/// <summary>
		/// A value indicating if the page should be hidden or not.
		/// </summary>
		public System.Nullable<System.Boolean> Visible { get; set; }
	}
	
	public enum PagePageType
	{
		
		custom = 0,
		
		history = 1,
		
		links = 2,
		
		attachments = 3,
	}
	
	/// <summary>
	/// Defines a section of the work item form layout
	/// </summary>
	public class Section
	{
		
		/// <summary>
		/// List of child groups in this section
		/// </summary>
		public Group[] Groups { get; set; }
		
		/// <summary>
		/// The id for the layout node.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// A value indicating whether this layout node has been overridden by a child layout.
		/// </summary>
		public System.Nullable<System.Boolean> Overridden { get; set; }
	}
	
	/// <summary>
	/// Represent a group in the form that holds controls in it.
	/// </summary>
	public class Group
	{
		
		/// <summary>
		/// Properties of a work item form contribution
		/// </summary>
		public WitContribution Contribution { get; set; }
		
		/// <summary>
		/// Controls to be put in the group.
		/// </summary>
		public Control[] Controls { get; set; }
		
		/// <summary>
		/// The height for the contribution.
		/// </summary>
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// The id for the layout node.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// A value indicating whether this layout node has been inherited from a parent layout.  This is expected to only be only set by the combiner.
		/// </summary>
		public System.Nullable<System.Boolean> Inherited { get; set; }
		
		/// <summary>
		/// A value indicating if the layout node is contribution are not.
		/// </summary>
		public System.Nullable<System.Boolean> IsContribution { get; set; }
		
		/// <summary>
		/// Label for the group.
		/// </summary>
		public string Label { get; set; }
		
		/// <summary>
		/// Order in which the group should appear in the section.
		/// </summary>
		public System.Nullable<System.Int32> Order { get; set; }
		
		/// <summary>
		/// A value indicating whether this layout node has been overridden by a child layout.
		/// </summary>
		public System.Nullable<System.Boolean> Overridden { get; set; }
		
		/// <summary>
		/// A value indicating if the group should be hidden or not.
		/// </summary>
		public System.Nullable<System.Boolean> Visible { get; set; }
	}
	
	/// <summary>
	/// Class that describes the work item state is hidden.
	/// </summary>
	public class HideStateModel
	{
		
		/// <summary>
		/// Returns 'true', if workitem state is hidden, 'false' otherwise.
		/// </summary>
		public System.Nullable<System.Boolean> Hidden { get; set; }
	}
	
	/// <summary>
	/// Picklist.
	/// </summary>
	public class PickList
	{
		
		/// <summary>
		/// A list of PicklistItemModel.
		/// </summary>
		public string[] Items { get; set; }
	}
	
	/// <summary>
	/// Metadata for picklist.
	/// </summary>
	public class PickListMetadata
	{
		
		/// <summary>
		/// ID of the picklist
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates whether items outside of suggested list are allowed
		/// </summary>
		public System.Nullable<System.Boolean> IsSuggested { get; set; }
		
		/// <summary>
		/// Name of the picklist
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// DataType of picklist
		/// </summary>
		public string Type { get; set; }
		
		/// <summary>
		/// Url of the picklist
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Process Behavior Model.
	/// </summary>
	public class ProcessBehavior
	{
		
		/// <summary>
		/// Color.
		/// </summary>
		public string Color { get; set; }
		
		/// <summary>
		/// Indicates the type of customization on this work item. System behaviors are inherited from parent process but not modified. Inherited behaviors are modified modified behaviors that were inherited from parent process. Custom behaviors are behaviors created by user in current process.
		/// </summary>
		public ProcessBehaviorCustomization Customization { get; set; }
		
		/// <summary>
		/// . Description
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Process Behavior Fields.
		/// </summary>
		public ProcessBehaviorField[] Fields { get; set; }
		
		/// <summary>
		/// Process behavior Reference.
		/// </summary>
		public ProcessBehaviorReference Inherits { get; set; }
		
		/// <summary>
		/// Behavior Name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Rank of the behavior
		/// </summary>
		public System.Nullable<System.Int32> Rank { get; set; }
		
		/// <summary>
		/// Behavior Id
		/// </summary>
		public string ReferenceName { get; set; }
		
		/// <summary>
		/// Url of the behavior.
		/// </summary>
		public string Url { get; set; }
	}
	
	public enum ProcessBehaviorCustomization
	{
		
		system = 0,
		
		inherited = 1,
		
		custom = 2,
	}
	
	/// <summary>
	/// Process Behavior Field.
	/// </summary>
	public class ProcessBehaviorField
	{
		
		/// <summary>
		/// Name of the field.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Reference name of the field.
		/// </summary>
		public string ReferenceName { get; set; }
		
		/// <summary>
		/// Url to field.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Process behavior Reference.
	/// </summary>
	public class ProcessBehaviorReference
	{
		
		/// <summary>
		/// Id of a Behavior.
		/// </summary>
		public string BehaviorRefName { get; set; }
		
		/// <summary>
		/// Url to behavior.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Process Behavior Create Payload.
	/// </summary>
	public class ProcessBehaviorCreateRequest
	{
		
		/// <summary>
		/// Color.
		/// </summary>
		public string Color { get; set; }
		
		/// <summary>
		/// Parent behavior id.
		/// </summary>
		public string Inherits { get; set; }
		
		/// <summary>
		/// Name of the behavior.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// ReferenceName is optional, if not specified will be auto-generated.
		/// </summary>
		public string ReferenceName { get; set; }
	}
	
	/// <summary>
	/// Process Behavior Replace Payload.
	/// </summary>
	public class ProcessBehaviorUpdateRequest
	{
		
		/// <summary>
		/// Color.
		/// </summary>
		public string Color { get; set; }
		
		/// <summary>
		/// Behavior Name.
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Process.
	/// </summary>
	public class ProcessInfo
	{
		
		/// <summary>
		/// Indicates the type of customization on this process. System Process is default process. Inherited Process is modified process that was System process before.
		/// </summary>
		public ProcessInfoCustomizationType CustomizationType { get; set; }
		
		/// <summary>
		/// Description of the process.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Is the process default.
		/// </summary>
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		/// <summary>
		/// Is the process enabled.
		/// </summary>
		public System.Nullable<System.Boolean> IsEnabled { get; set; }
		
		/// <summary>
		/// Name of the process.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// ID of the parent process.
		/// </summary>
		public string ParentProcessTypeId { get; set; }
		
		/// <summary>
		/// Projects in this process to which the user is subscribed to.
		/// </summary>
		public ProjectReference[] Projects { get; set; }
		
		/// <summary>
		/// Reference name of the process.
		/// </summary>
		public string ReferenceName { get; set; }
		
		/// <summary>
		/// The ID of the process.
		/// </summary>
		public string TypeId { get; set; }
	}
	
	public enum ProcessInfoCustomizationType
	{
		
		system = 0,
		
		inherited = 1,
		
		custom = 2,
	}
	
	/// <summary>
	/// Defines the project reference class.
	/// </summary>
	public class ProjectReference
	{
		
		/// <summary>
		/// Description of the project
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// The ID of the project
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the project
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Url of the project
		/// </summary>
		public string Url { get; set; }
	}
	
	public class ProcessModel
	{
		
		/// <summary>
		/// Description of the process
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Name of the process
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Projects in this process
		/// </summary>
		public ProjectReference[] Projects { get; set; }
		
		/// <summary>
		/// Properties of the process.
		/// </summary>
		public ProcessProperties Properties { get; set; }
		
		/// <summary>
		/// Reference name of the process
		/// </summary>
		public string ReferenceName { get; set; }
		
		/// <summary>
		/// The ID of the process
		/// </summary>
		public string TypeId { get; set; }
	}
	
	/// <summary>
	/// Properties of the process.
	/// </summary>
	public class ProcessProperties
	{
		
		/// <summary>
		/// Class of the process.
		/// </summary>
		public ProcessPropertiesClass Class { get; set; }
		
		/// <summary>
		/// Is the process default process.
		/// </summary>
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		/// <summary>
		/// Is the process enabled.
		/// </summary>
		public System.Nullable<System.Boolean> IsEnabled { get; set; }
		
		/// <summary>
		/// ID of the parent process.
		/// </summary>
		public string ParentProcessTypeId { get; set; }
		
		/// <summary>
		/// Version of the process.
		/// </summary>
		public string Version { get; set; }
	}
	
	public enum ProcessPropertiesClass
	{
		
		system = 0,
		
		derived = 1,
		
		custom = 2,
	}
	
	/// <summary>
	/// Process Rule Response.
	/// </summary>
	public class ProcessRule
	{
		
		/// <summary>
		/// Indicates if the rule is system generated or created by user.
		/// </summary>
		public ProcessRuleCustomizationType CustomizationType { get; set; }
		
		/// <summary>
		/// Id to uniquely identify the rule.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Resource Url.
		/// </summary>
		public string Url { get; set; }
	}
	
	public enum ProcessRuleCustomizationType
	{
		
		system = 0,
		
		inherited = 1,
		
		custom = 2,
	}
	
	/// <summary>
	/// Class that describes a work item type object
	/// </summary>
	public class ProcessWorkItemType
	{
		
		public WorkItemTypeBehavior[] Behaviors { get; set; }
		
		/// <summary>
		/// Color hexadecimal code to represent the work item type
		/// </summary>
		public string Color { get; set; }
		
		/// <summary>
		/// Indicates the type of customization on this work item System work item types are inherited from parent process but not modified Inherited work item types are modified work item that were inherited from parent process Custom work item types are work item types that were created in the current process
		/// </summary>
		public ProcessWorkItemTypeCustomization Customization { get; set; }
		
		/// <summary>
		/// Description of the work item type
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Icon to represent the work item typ
		/// </summary>
		public string Icon { get; set; }
		
		/// <summary>
		/// Reference name of the parent work item type
		/// </summary>
		public string Inherits { get; set; }
		
		/// <summary>
		/// Indicates if a work item type is disabled
		/// </summary>
		public System.Nullable<System.Boolean> IsDisabled { get; set; }
		
		/// <summary>
		/// Describes the layout of a work item type
		/// </summary>
		public FormLayout Layout { get; set; }
		
		/// <summary>
		/// Name of the work item type
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Reference name of work item type
		/// </summary>
		public string ReferenceName { get; set; }
		
		public WorkItemStateResultModel[] States { get; set; }
		
		/// <summary>
		/// Url of the work item type
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Association between a work item type and it's behavior
	/// </summary>
	public class WorkItemTypeBehavior
	{
		
		/// <summary>
		/// Reference to the behavior of a work item type.
		/// </summary>
		public WorkItemBehaviorReference Behavior { get; set; }
		
		/// <summary>
		/// If true the work item type is the default work item type in the behavior
		/// </summary>
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		/// <summary>
		/// URL of the work item type behavior
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Reference to the behavior of a work item type.
	/// </summary>
	public class WorkItemBehaviorReference
	{
		
		/// <summary>
		/// The ID of the reference behavior.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// The url of the reference behavior.
		/// </summary>
		public string Url { get; set; }
	}
	
	public enum ProcessWorkItemTypeCustomization
	{
		
		system = 0,
		
		inherited = 1,
		
		custom = 2,
	}
	
	/// <summary>
	/// Class that represents a work item state result.
	/// </summary>
	public class WorkItemStateResultModel
	{
		
		/// <summary>
		/// Work item state color.
		/// </summary>
		public string Color { get; set; }
		
		/// <summary>
		/// Work item state customization type.
		/// </summary>
		public WorkItemStateResultModelCustomizationType CustomizationType { get; set; }
		
		/// <summary>
		/// If the Work item state is hidden.
		/// </summary>
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		/// <summary>
		/// Id of the Workitemstate.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Work item state name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Work item state order.
		/// </summary>
		public System.Nullable<System.Int32> Order { get; set; }
		
		/// <summary>
		/// Work item state statecategory.
		/// </summary>
		public string StateCategory { get; set; }
		
		/// <summary>
		/// Work item state url.
		/// </summary>
		public string Url { get; set; }
	}
	
	public enum WorkItemStateResultModelCustomizationType
	{
		
		system = 0,
		
		inherited = 1,
		
		custom = 2,
	}
	
	/// <summary>
	/// Class that describes a field in a work item type and its properties.
	/// </summary>
	public class ProcessWorkItemTypeField
	{
		
		/// <summary>
		/// The list of field allowed values.
		/// </summary>
		public string[] AllowedValues { get; set; }
		
		/// <summary>
		/// Allow setting field value to a group identity. Only applies to identity fields.
		/// </summary>
		public System.Nullable<System.Boolean> AllowGroups { get; set; }
		
		/// <summary>
		/// Indicates the type of customization on this work item.
		/// </summary>
		public ProcessWorkItemTypeFieldCustomization Customization { get; set; }
		
		/// <summary>
		/// The default value of the field.
		/// </summary>
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Description of the field.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Name of the field.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// If true the field cannot be edited.
		/// </summary>
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// Reference name of the field.
		/// </summary>
		public string ReferenceName { get; set; }
		
		/// <summary>
		/// If true the field cannot be empty.
		/// </summary>
		public System.Nullable<System.Boolean> Required { get; set; }
		
		/// <summary>
		/// Type of the field.
		/// </summary>
		public ProcessWorkItemTypeFieldType Type { get; set; }
		
		/// <summary>
		/// Resource URL of the field.
		/// </summary>
		public string Url { get; set; }
	}
	
	public enum ProcessWorkItemTypeFieldCustomization
	{
		
		system = 0,
		
		inherited = 1,
		
		custom = 2,
	}
	
	public enum ProcessWorkItemTypeFieldType
	{
		
		_string = 0,
		
		integer = 1,
		
		dateTime = 2,
		
		plainText = 3,
		
		html = 4,
		
		treePath = 5,
		
		history = 6,
		
		_double = 7,
		
		guid = 8,
		
		boolean = 9,
		
		identity = 10,
		
		picklistInteger = 11,
		
		picklistString = 12,
		
		picklistDouble = 13,
	}
	
	/// <summary>
	/// Describes a request to update a process
	/// </summary>
	public class UpdateProcessModel
	{
		
		/// <summary>
		/// New description of the process
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// If true new projects will use this process by default
		/// </summary>
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		/// <summary>
		/// If false the process will be disabled and cannot be used to create projects
		/// </summary>
		public System.Nullable<System.Boolean> IsEnabled { get; set; }
		
		/// <summary>
		/// New name of the process
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Request class/object to update the rule.
	/// </summary>
	public class UpdateProcessRuleRequest
	{
		
		/// <summary>
		/// Id to uniquely identify the rule.
		/// </summary>
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Class to describe a request that updates a field's properties in a work item type.
	/// </summary>
	public class UpdateProcessWorkItemTypeFieldRequest
	{
		
		/// <summary>
		/// The list of field allowed values.
		/// </summary>
		public string[] AllowedValues { get; set; }
		
		/// <summary>
		/// Allow setting field value to a group identity. Only applies to identity fields.
		/// </summary>
		public System.Nullable<System.Boolean> AllowGroups { get; set; }
		
		/// <summary>
		/// The default value of the field.
		/// </summary>
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// If true the field cannot be edited.
		/// </summary>
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// The default value of the field.
		/// </summary>
		public System.Nullable<System.Boolean> Required { get; set; }
	}
	
	/// <summary>
	/// Class for update request on a work item type
	/// </summary>
	public class UpdateProcessWorkItemTypeRequest
	{
		
		/// <summary>
		/// Color of the work item type
		/// </summary>
		public string Color { get; set; }
		
		/// <summary>
		/// Description of the work item type
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Icon of the work item type
		/// </summary>
		public string Icon { get; set; }
		
		/// <summary>
		/// If set will disable the work item type
		/// </summary>
		public System.Nullable<System.Boolean> IsDisabled { get; set; }
	}
	
	/// <summary>
	/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
	/// </summary>
	public class VssJsonCollectionWrapper
	{
		
		public string Value { get; set; }
	}
	
	public class VssJsonCollectionWrapperBase
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	public class WorkItemBehavior
	{
		
		public System.Nullable<System.Boolean> Abstract { get; set; }
		
		public string Color { get; set; }
		
		public string Description { get; set; }
		
		public WorkItemBehaviorField[] Fields { get; set; }
		
		public string Id { get; set; }
		
		/// <summary>
		/// Reference to the behavior of a work item type.
		/// </summary>
		public WorkItemBehaviorReference Inherits { get; set; }
		
		public string Name { get; set; }
		
		public System.Nullable<System.Boolean> Overriden { get; set; }
		
		public System.Nullable<System.Int32> Rank { get; set; }
		
		public string Url { get; set; }
	}
	
	public class WorkItemBehaviorField
	{
		
		public string BehaviorFieldId { get; set; }
		
		public string Id { get; set; }
		
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Class That represents a work item state input.
	/// </summary>
	public class WorkItemStateInputModel
	{
		
		/// <summary>
		/// Color of the state
		/// </summary>
		public string Color { get; set; }
		
		/// <summary>
		/// Name of the state
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Order in which state should appear
		/// </summary>
		public System.Nullable<System.Int32> Order { get; set; }
		
		/// <summary>
		/// Category of the state
		/// </summary>
		public string StateCategory { get; set; }
	}
	
	public class WorkItemTypeModel
	{
		
		public WorkItemTypeBehavior[] Behaviors { get; set; }
		
		public WorkItemTypeModelClass Class { get; set; }
		
		public string Color { get; set; }
		
		public string Description { get; set; }
		
		public string Icon { get; set; }
		
		public string Id { get; set; }
		
		/// <summary>
		/// Parent WIT Id/Internal ReferenceName that it inherits from
		/// </summary>
		public string Inherits { get; set; }
		
		public System.Nullable<System.Boolean> IsDisabled { get; set; }
		
		/// <summary>
		/// Describes the layout of a work item type
		/// </summary>
		public FormLayout Layout { get; set; }
		
		public string Name { get; set; }
		
		public WorkItemStateResultModel[] States { get; set; }
		
		public string Url { get; set; }
	}
	
	public enum WorkItemTypeModelClass
	{
		
		system = 0,
		
		derived = 1,
		
		custom = 2,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a process.
		/// Processes_Create {organization}/_apis/work/processes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">CreateProcessModel.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessInfo> Processes_CreateAsync(string organization, string api_version, CreateProcessModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a process.
		/// Processes_Create {organization}/_apis/work/processes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">CreateProcessModel.</param>
		/// <returns>successful operation</returns>
		public ProcessInfo Processes_Create(string organization, string api_version, CreateProcessModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get list of all processes including system and inherited.
		/// Processes_List {organization}/_apis/work/processes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessInfo[]> Processes_ListAsync(string organization, Processes_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes&$expand=" + expand+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of all processes including system and inherited.
		/// Processes_List {organization}/_apis/work/processes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessInfo[] Processes_List(string organization, Processes_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes&$expand=" + expand+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a single behavior in the given process.
		/// Behaviors_Create {organization}/_apis/work/processes/{processId}/behaviors
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessBehavior> Behaviors_CreateAsync(string organization, string processId, string api_version, ProcessBehaviorCreateRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/behaviors&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessBehavior>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a single behavior in the given process.
		/// Behaviors_Create {organization}/_apis/work/processes/{processId}/behaviors
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessBehavior Behaviors_Create(string organization, string processId, string api_version, ProcessBehaviorCreateRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/behaviors&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessBehavior>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all behaviors in the process.
		/// Behaviors_List {organization}/_apis/work/processes/{processId}/behaviors
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessBehavior[]> Behaviors_ListAsync(string organization, string processId, Behaviors_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/behaviors&$expand=" + expand+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessBehavior[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all behaviors in the process.
		/// Behaviors_List {organization}/_apis/work/processes/{processId}/behaviors
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessBehavior[] Behaviors_List(string organization, string processId, Behaviors_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/behaviors&$expand=" + expand+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessBehavior[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a behavior in the process.
		/// Behaviors_Delete {organization}/_apis/work/processes/{processId}/behaviors/{behaviorRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="behaviorRefName">The reference name of the behavior</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Behaviors_DeleteAsync(string organization, string processId, string behaviorRefName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/behaviors/"+ (behaviorRefName==null? "" : Uri.EscapeDataString(behaviorRefName))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a behavior in the process.
		/// Behaviors_Delete {organization}/_apis/work/processes/{processId}/behaviors/{behaviorRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="behaviorRefName">The reference name of the behavior</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Behaviors_Delete(string organization, string processId, string behaviorRefName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/behaviors/"+ (behaviorRefName==null? "" : Uri.EscapeDataString(behaviorRefName))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a behavior of the process.
		/// Behaviors_Get {organization}/_apis/work/processes/{processId}/behaviors/{behaviorRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="behaviorRefName">The reference name of the behavior</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessBehavior> Behaviors_GetAsync(string organization, string processId, string behaviorRefName, Behaviors_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/behaviors/"+ (behaviorRefName==null? "" : Uri.EscapeDataString(behaviorRefName))+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessBehavior>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a behavior of the process.
		/// Behaviors_Get {organization}/_apis/work/processes/{processId}/behaviors/{behaviorRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="behaviorRefName">The reference name of the behavior</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessBehavior Behaviors_Get(string organization, string processId, string behaviorRefName, Behaviors_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/behaviors/"+ (behaviorRefName==null? "" : Uri.EscapeDataString(behaviorRefName))+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessBehavior>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replaces a behavior in the process.
		/// Behaviors_Update {organization}/_apis/work/processes/{processId}/behaviors/{behaviorRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="behaviorRefName">The reference name of the behavior</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessBehavior> Behaviors_UpdateAsync(string organization, string processId, string behaviorRefName, string api_version, ProcessBehaviorUpdateRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/behaviors/"+ (behaviorRefName==null? "" : Uri.EscapeDataString(behaviorRefName))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessBehavior>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replaces a behavior in the process.
		/// Behaviors_Update {organization}/_apis/work/processes/{processId}/behaviors/{behaviorRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="behaviorRefName">The reference name of the behavior</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessBehavior Behaviors_Update(string organization, string processId, string behaviorRefName, string api_version, ProcessBehaviorUpdateRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/behaviors/"+ (behaviorRefName==null? "" : Uri.EscapeDataString(behaviorRefName))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessBehavior>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a work item type in the process.
		/// Work_Item_Types_Create {organization}/_apis/work/processes/{processId}/workitemtypes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process on which to create work item type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessWorkItemType> Work_Item_Types_CreateAsync(string organization, string processId, string api_version, CreateProcessWorkItemTypeRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workitemtypes&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessWorkItemType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a work item type in the process.
		/// Work_Item_Types_Create {organization}/_apis/work/processes/{processId}/workitemtypes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process on which to create work item type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessWorkItemType Work_Item_Types_Create(string organization, string processId, string api_version, CreateProcessWorkItemTypeRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workitemtypes&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessWorkItemType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all work item types in a process.
		/// Work_Item_Types_List {organization}/_apis/work/processes/{processId}/workitemtypes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="expand">Flag to determine what properties of work item type to return</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessWorkItemType[]> Work_Item_Types_ListAsync(string organization, string processId, Work_Item_Types_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workitemtypes&$expand=" + expand+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessWorkItemType[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all work item types in a process.
		/// Work_Item_Types_List {organization}/_apis/work/processes/{processId}/workitemtypes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="expand">Flag to determine what properties of work item type to return</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessWorkItemType[] Work_Item_Types_List(string organization, string processId, Work_Item_Types_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workitemtypes&$expand=" + expand+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessWorkItemType[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a work itewm type in the process.
		/// Work_Item_Types_Delete {organization}/_apis/work/processes/{processId}/workitemtypes/{witRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Work_Item_Types_DeleteAsync(string organization, string processId, string witRefName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workitemtypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a work itewm type in the process.
		/// Work_Item_Types_Delete {organization}/_apis/work/processes/{processId}/workitemtypes/{witRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Work_Item_Types_Delete(string organization, string processId, string witRefName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workitemtypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single work item type in a process.
		/// Work_Item_Types_Get {organization}/_apis/work/processes/{processId}/workitemtypes/{witRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="expand">Flag to determine what properties of work item type to return</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessWorkItemType> Work_Item_Types_GetAsync(string organization, string processId, string witRefName, Work_Item_Types_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workitemtypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessWorkItemType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single work item type in a process.
		/// Work_Item_Types_Get {organization}/_apis/work/processes/{processId}/workitemtypes/{witRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="expand">Flag to determine what properties of work item type to return</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessWorkItemType Work_Item_Types_Get(string organization, string processId, string witRefName, Work_Item_Types_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workitemtypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessWorkItemType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a work item type of the process.
		/// Work_Item_Types_Update {organization}/_apis/work/processes/{processId}/workitemtypes/{witRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessWorkItemType> Work_Item_Types_UpdateAsync(string organization, string processId, string witRefName, string api_version, UpdateProcessWorkItemTypeRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workitemtypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessWorkItemType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a work item type of the process.
		/// Work_Item_Types_Update {organization}/_apis/work/processes/{processId}/workitemtypes/{witRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessWorkItemType Work_Item_Types_Update(string organization, string processId, string witRefName, string api_version, UpdateProcessWorkItemTypeRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workitemtypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessWorkItemType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a field to a work item type.
		/// Fields_Add {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/fields
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessWorkItemTypeField> Fields_AddAsync(string organization, string processId, string witRefName, string api_version, AddProcessWorkItemTypeFieldRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/fields&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessWorkItemTypeField>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a field to a work item type.
		/// Fields_Add {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/fields
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessWorkItemTypeField Fields_Add(string organization, string processId, string witRefName, string api_version, AddProcessWorkItemTypeFieldRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/fields&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessWorkItemTypeField>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all fields in a work item type.
		/// Fields_List {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/fields
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessWorkItemTypeField[]> Fields_ListAsync(string organization, string processId, string witRefName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/fields&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessWorkItemTypeField[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all fields in a work item type.
		/// Fields_List {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/fields
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessWorkItemTypeField[] Fields_List(string organization, string processId, string witRefName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/fields&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessWorkItemTypeField[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a field in a work item type.
		/// Fields_Get {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/fields/{fieldRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="fieldRefName">The reference name of the field.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessWorkItemTypeField> Fields_GetAsync(string organization, string processId, string witRefName, string fieldRefName, Fields_GetExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/fields/"+ (fieldRefName==null? "" : Uri.EscapeDataString(fieldRefName))+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessWorkItemTypeField>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a field in a work item type.
		/// Fields_Get {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/fields/{fieldRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="fieldRefName">The reference name of the field.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessWorkItemTypeField Fields_Get(string organization, string processId, string witRefName, string fieldRefName, Fields_GetExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/fields/"+ (fieldRefName==null? "" : Uri.EscapeDataString(fieldRefName))+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessWorkItemTypeField>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a field from a work item type. Does not permanently delete the field.
		/// Fields_Remove_Work_Item_Type_Field {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/fields/{fieldRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="fieldRefName">The reference name of the field.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Fields_Remove_Work_Item_Type_FieldAsync(string organization, string processId, string witRefName, string fieldRefName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/fields/"+ (fieldRefName==null? "" : Uri.EscapeDataString(fieldRefName))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a field from a work item type. Does not permanently delete the field.
		/// Fields_Remove_Work_Item_Type_Field {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/fields/{fieldRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="fieldRefName">The reference name of the field.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Fields_Remove_Work_Item_Type_Field(string organization, string processId, string witRefName, string fieldRefName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/fields/"+ (fieldRefName==null? "" : Uri.EscapeDataString(fieldRefName))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a field in a work item type.
		/// Fields_Update {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/fields/{fieldRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="fieldRefName">The reference name of the field.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessWorkItemTypeField> Fields_UpdateAsync(string organization, string processId, string witRefName, string fieldRefName, string api_version, UpdateProcessWorkItemTypeFieldRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/fields/"+ (fieldRefName==null? "" : Uri.EscapeDataString(fieldRefName))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessWorkItemTypeField>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a field in a work item type.
		/// Fields_Update {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/fields/{fieldRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="fieldRefName">The reference name of the field.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessWorkItemTypeField Fields_Update(string organization, string processId, string witRefName, string fieldRefName, string api_version, UpdateProcessWorkItemTypeFieldRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/fields/"+ (fieldRefName==null? "" : Uri.EscapeDataString(fieldRefName))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessWorkItemTypeField>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the form layout.
		/// Layout_Get {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<FormLayout> Layout_GetAsync(string organization, string processId, string witRefName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<FormLayout>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the form layout.
		/// Layout_Get {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public FormLayout Layout_Get(string organization, string processId, string witRefName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<FormLayout>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a control in a group.
		/// Controls_Create {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/groups/{groupId}/controls
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="groupId">The ID of the group to add the control to.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The control.</param>
		/// <returns>successful operation</returns>
		public async Task<Control> Controls_CreateAsync(string organization, string processId, string witRefName, string groupId, string api_version, Control requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/groups/"+ (groupId==null? "" : Uri.EscapeDataString(groupId))+"/controls&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Control>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a control in a group.
		/// Controls_Create {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/groups/{groupId}/controls
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="groupId">The ID of the group to add the control to.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The control.</param>
		/// <returns>successful operation</returns>
		public Control Controls_Create(string organization, string processId, string witRefName, string groupId, string api_version, Control requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/groups/"+ (groupId==null? "" : Uri.EscapeDataString(groupId))+"/controls&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Control>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Moves a control to a specified group.
		/// Controls_Move_Control_To_Group {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/groups/{groupId}/controls/{controlId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="groupId">The ID of the group to move the control to.</param>
		/// <param name="controlId">The ID of the control.</param>
		/// <param name="removeFromGroupId">The group ID to remove the control from.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The control.</param>
		/// <returns>successful operation</returns>
		public async Task<Control> Controls_Move_Control_To_GroupAsync(string organization, string processId, string witRefName, string groupId, string controlId, string removeFromGroupId, string api_version, Control requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/groups/"+ (groupId==null? "" : Uri.EscapeDataString(groupId))+"/controls/"+ (controlId==null? "" : Uri.EscapeDataString(controlId))+"&removeFromGroupId=" + (removeFromGroupId==null? "" : Uri.EscapeDataString(removeFromGroupId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Control>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Moves a control to a specified group.
		/// Controls_Move_Control_To_Group {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/groups/{groupId}/controls/{controlId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="groupId">The ID of the group to move the control to.</param>
		/// <param name="controlId">The ID of the control.</param>
		/// <param name="removeFromGroupId">The group ID to remove the control from.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The control.</param>
		/// <returns>successful operation</returns>
		public Control Controls_Move_Control_To_Group(string organization, string processId, string witRefName, string groupId, string controlId, string removeFromGroupId, string api_version, Control requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/groups/"+ (groupId==null? "" : Uri.EscapeDataString(groupId))+"/controls/"+ (controlId==null? "" : Uri.EscapeDataString(controlId))+"&removeFromGroupId=" + (removeFromGroupId==null? "" : Uri.EscapeDataString(removeFromGroupId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Control>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a control from the work item form.
		/// Controls_Remove_Control_From_Group {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/groups/{groupId}/controls/{controlId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="groupId">The ID of the group.</param>
		/// <param name="controlId">The ID of the control to remove.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Controls_Remove_Control_From_GroupAsync(string organization, string processId, string witRefName, string groupId, string controlId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/groups/"+ (groupId==null? "" : Uri.EscapeDataString(groupId))+"/controls/"+ (controlId==null? "" : Uri.EscapeDataString(controlId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a control from the work item form.
		/// Controls_Remove_Control_From_Group {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/groups/{groupId}/controls/{controlId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="groupId">The ID of the group.</param>
		/// <param name="controlId">The ID of the control to remove.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Controls_Remove_Control_From_Group(string organization, string processId, string witRefName, string groupId, string controlId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/groups/"+ (groupId==null? "" : Uri.EscapeDataString(groupId))+"/controls/"+ (controlId==null? "" : Uri.EscapeDataString(controlId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a control on the work item form.
		/// Controls_Update {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/groups/{groupId}/controls/{controlId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="groupId">The ID of the group.</param>
		/// <param name="controlId">The ID of the control.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The updated control.</param>
		/// <returns>successful operation</returns>
		public async Task<Control> Controls_UpdateAsync(string organization, string processId, string witRefName, string groupId, string controlId, string api_version, Control requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/groups/"+ (groupId==null? "" : Uri.EscapeDataString(groupId))+"/controls/"+ (controlId==null? "" : Uri.EscapeDataString(controlId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Control>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a control on the work item form.
		/// Controls_Update {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/groups/{groupId}/controls/{controlId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="groupId">The ID of the group.</param>
		/// <param name="controlId">The ID of the control.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The updated control.</param>
		/// <returns>successful operation</returns>
		public Control Controls_Update(string organization, string processId, string witRefName, string groupId, string controlId, string api_version, Control requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/groups/"+ (groupId==null? "" : Uri.EscapeDataString(groupId))+"/controls/"+ (controlId==null? "" : Uri.EscapeDataString(controlId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Control>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a page to the work item form.
		/// Pages_Add {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/pages
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The page.</param>
		/// <returns>successful operation</returns>
		public async Task<Page> Pages_AddAsync(string organization, string processId, string witRefName, string api_version, Page requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/pages&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Page>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a page to the work item form.
		/// Pages_Add {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/pages
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The page.</param>
		/// <returns>successful operation</returns>
		public Page Pages_Add(string organization, string processId, string witRefName, string api_version, Page requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/pages&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Page>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a page on the work item form
		/// Pages_Update {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/pages
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The page</param>
		/// <returns>successful operation</returns>
		public async Task<Page> Pages_UpdateAsync(string organization, string processId, string witRefName, string api_version, Page requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/pages&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Page>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a page on the work item form
		/// Pages_Update {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/pages
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The page</param>
		/// <returns>successful operation</returns>
		public Page Pages_Update(string organization, string processId, string witRefName, string api_version, Page requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/pages&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Page>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a page from the work item form
		/// Pages_Remove_Page {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/pages/{pageId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="pageId">The ID of the page</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Pages_Remove_PageAsync(string organization, string processId, string witRefName, string pageId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/pages/"+ (pageId==null? "" : Uri.EscapeDataString(pageId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a page from the work item form
		/// Pages_Remove_Page {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/pages/{pageId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="pageId">The ID of the page</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Pages_Remove_Page(string organization, string processId, string witRefName, string pageId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/pages/"+ (pageId==null? "" : Uri.EscapeDataString(pageId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a group to the work item form.
		/// Groups_Add {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/pages/{pageId}/sections/{sectionId}/groups
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="pageId">The ID of the page to add the group to.</param>
		/// <param name="sectionId">The ID of the section to add the group to.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The group.</param>
		/// <returns>successful operation</returns>
		public async Task<Group> Groups_AddAsync(string organization, string processId, string witRefName, string pageId, string sectionId, string api_version, Group requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/pages/"+ (pageId==null? "" : Uri.EscapeDataString(pageId))+"/sections/"+ (sectionId==null? "" : Uri.EscapeDataString(sectionId))+"/groups&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Group>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a group to the work item form.
		/// Groups_Add {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/pages/{pageId}/sections/{sectionId}/groups
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="pageId">The ID of the page to add the group to.</param>
		/// <param name="sectionId">The ID of the section to add the group to.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The group.</param>
		/// <returns>successful operation</returns>
		public Group Groups_Add(string organization, string processId, string witRefName, string pageId, string sectionId, string api_version, Group requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/pages/"+ (pageId==null? "" : Uri.EscapeDataString(pageId))+"/sections/"+ (sectionId==null? "" : Uri.EscapeDataString(sectionId))+"/groups&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Group>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Moves a group to a different section.
		/// Groups_Move_Group_To_Section {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/pages/{pageId}/sections/{sectionId}/groups/{groupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="pageId">The ID of the page the group is in.</param>
		/// <param name="sectionId">The ID of the section the group is in.</param>
		/// <param name="groupId">The ID of the group.</param>
		/// <param name="removeFromSectionId">ID of the section to remove the group from.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The updated group.</param>
		/// <returns>successful operation</returns>
		public async Task<Group> Groups_Move_Group_To_SectionAsync(string organization, string processId, string witRefName, string pageId, string sectionId, string groupId, string removeFromSectionId, string api_version, Group requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/pages/"+ (pageId==null? "" : Uri.EscapeDataString(pageId))+"/sections/"+ (sectionId==null? "" : Uri.EscapeDataString(sectionId))+"/groups/"+ (groupId==null? "" : Uri.EscapeDataString(groupId))+"&removeFromSectionId=" + (removeFromSectionId==null? "" : Uri.EscapeDataString(removeFromSectionId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Group>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Moves a group to a different section.
		/// Groups_Move_Group_To_Section {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/pages/{pageId}/sections/{sectionId}/groups/{groupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="pageId">The ID of the page the group is in.</param>
		/// <param name="sectionId">The ID of the section the group is in.</param>
		/// <param name="groupId">The ID of the group.</param>
		/// <param name="removeFromSectionId">ID of the section to remove the group from.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The updated group.</param>
		/// <returns>successful operation</returns>
		public Group Groups_Move_Group_To_Section(string organization, string processId, string witRefName, string pageId, string sectionId, string groupId, string removeFromSectionId, string api_version, Group requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/pages/"+ (pageId==null? "" : Uri.EscapeDataString(pageId))+"/sections/"+ (sectionId==null? "" : Uri.EscapeDataString(sectionId))+"/groups/"+ (groupId==null? "" : Uri.EscapeDataString(groupId))+"&removeFromSectionId=" + (removeFromSectionId==null? "" : Uri.EscapeDataString(removeFromSectionId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Group>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a group from the work item form.
		/// Groups_Remove_Group {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/pages/{pageId}/sections/{sectionId}/groups/{groupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="pageId">The ID of the page the group is in</param>
		/// <param name="sectionId">The ID of the section to the group is in</param>
		/// <param name="groupId">The ID of the group</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Groups_Remove_GroupAsync(string organization, string processId, string witRefName, string pageId, string sectionId, string groupId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/pages/"+ (pageId==null? "" : Uri.EscapeDataString(pageId))+"/sections/"+ (sectionId==null? "" : Uri.EscapeDataString(sectionId))+"/groups/"+ (groupId==null? "" : Uri.EscapeDataString(groupId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a group from the work item form.
		/// Groups_Remove_Group {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/pages/{pageId}/sections/{sectionId}/groups/{groupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="pageId">The ID of the page the group is in</param>
		/// <param name="sectionId">The ID of the section to the group is in</param>
		/// <param name="groupId">The ID of the group</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Groups_Remove_Group(string organization, string processId, string witRefName, string pageId, string sectionId, string groupId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/pages/"+ (pageId==null? "" : Uri.EscapeDataString(pageId))+"/sections/"+ (sectionId==null? "" : Uri.EscapeDataString(sectionId))+"/groups/"+ (groupId==null? "" : Uri.EscapeDataString(groupId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a group in the work item form.
		/// Groups_Update {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/pages/{pageId}/sections/{sectionId}/groups/{groupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="pageId">The ID of the page the group is in.</param>
		/// <param name="sectionId">The ID of the section the group is in.</param>
		/// <param name="groupId">The ID of the group.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The updated group.</param>
		/// <returns>successful operation</returns>
		public async Task<Group> Groups_UpdateAsync(string organization, string processId, string witRefName, string pageId, string sectionId, string groupId, string api_version, Group requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/pages/"+ (pageId==null? "" : Uri.EscapeDataString(pageId))+"/sections/"+ (sectionId==null? "" : Uri.EscapeDataString(sectionId))+"/groups/"+ (groupId==null? "" : Uri.EscapeDataString(groupId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Group>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a group in the work item form.
		/// Groups_Update {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/pages/{pageId}/sections/{sectionId}/groups/{groupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="pageId">The ID of the page the group is in.</param>
		/// <param name="sectionId">The ID of the section the group is in.</param>
		/// <param name="groupId">The ID of the group.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The updated group.</param>
		/// <returns>successful operation</returns>
		public Group Groups_Update(string organization, string processId, string witRefName, string pageId, string sectionId, string groupId, string api_version, Group requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/pages/"+ (pageId==null? "" : Uri.EscapeDataString(pageId))+"/sections/"+ (sectionId==null? "" : Uri.EscapeDataString(sectionId))+"/groups/"+ (groupId==null? "" : Uri.EscapeDataString(groupId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Group>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets edited system controls for a work item type in a process. To get all system controls (base + edited) use layout API(s)
		/// System_Controls_List {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/systemcontrols
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Control[]> System_Controls_ListAsync(string organization, string processId, string witRefName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/systemcontrols&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Control[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets edited system controls for a work item type in a process. To get all system controls (base + edited) use layout API(s)
		/// System_Controls_List {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/systemcontrols
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Control[] System_Controls_List(string organization, string processId, string witRefName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/systemcontrols&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Control[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a system control modification on the work item form.
		/// System_Controls_Delete {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/systemcontrols/{controlId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="controlId">The ID of the control.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Control[]> System_Controls_DeleteAsync(string organization, string processId, string witRefName, string controlId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/systemcontrols/"+ (controlId==null? "" : Uri.EscapeDataString(controlId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Control[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a system control modification on the work item form.
		/// System_Controls_Delete {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/systemcontrols/{controlId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="controlId">The ID of the control.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Control[] System_Controls_Delete(string organization, string processId, string witRefName, string controlId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/systemcontrols/"+ (controlId==null? "" : Uri.EscapeDataString(controlId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Control[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates/adds a system control on the work item form.
		/// System_Controls_Update {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/systemcontrols/{controlId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="controlId">The ID of the control.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Control> System_Controls_UpdateAsync(string organization, string processId, string witRefName, string controlId, string api_version, Control requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/systemcontrols/"+ (controlId==null? "" : Uri.EscapeDataString(controlId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Control>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates/adds a system control on the work item form.
		/// System_Controls_Update {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/systemcontrols/{controlId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process.</param>
		/// <param name="witRefName">The reference name of the work item type.</param>
		/// <param name="controlId">The ID of the control.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Control System_Controls_Update(string organization, string processId, string witRefName, string controlId, string api_version, Control requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/layout/systemcontrols/"+ (controlId==null? "" : Uri.EscapeDataString(controlId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Control>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a rule to work item type in the process.
		/// Rules_Add {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/rules
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessRule> Rules_AddAsync(string organization, string processId, string witRefName, string api_version, CreateProcessRuleRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/rules&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a rule to work item type in the process.
		/// Rules_Add {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/rules
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessRule Rules_Add(string organization, string processId, string witRefName, string api_version, CreateProcessRuleRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/rules&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all rules in the work item type of the process.
		/// Rules_List {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/rules
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessRule[]> Rules_ListAsync(string organization, string processId, string witRefName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/rules&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessRule[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all rules in the work item type of the process.
		/// Rules_List {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/rules
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessRule[] Rules_List(string organization, string processId, string witRefName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/rules&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessRule[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a rule from the work item type in the process.
		/// Rules_Delete {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/rules/{ruleId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="ruleId">The ID of the rule</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Rules_DeleteAsync(string organization, string processId, string witRefName, string ruleId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/rules/"+ (ruleId==null? "" : Uri.EscapeDataString(ruleId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a rule from the work item type in the process.
		/// Rules_Delete {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/rules/{ruleId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="ruleId">The ID of the rule</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Rules_Delete(string organization, string processId, string witRefName, string ruleId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/rules/"+ (ruleId==null? "" : Uri.EscapeDataString(ruleId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single rule in the work item type of the process.
		/// Rules_Get {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/rules/{ruleId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="ruleId">The ID of the rule</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessRule> Rules_GetAsync(string organization, string processId, string witRefName, string ruleId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/rules/"+ (ruleId==null? "" : Uri.EscapeDataString(ruleId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single rule in the work item type of the process.
		/// Rules_Get {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/rules/{ruleId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="ruleId">The ID of the rule</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessRule Rules_Get(string organization, string processId, string witRefName, string ruleId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/rules/"+ (ruleId==null? "" : Uri.EscapeDataString(ruleId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a rule in the work item type of the process.
		/// Rules_Update {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/rules/{ruleId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="ruleId">The ID of the rule</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessRule> Rules_UpdateAsync(string organization, string processId, string witRefName, string ruleId, string api_version, UpdateProcessRuleRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/rules/"+ (ruleId==null? "" : Uri.EscapeDataString(ruleId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a rule in the work item type of the process.
		/// Rules_Update {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/rules/{ruleId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="ruleId">The ID of the rule</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessRule Rules_Update(string organization, string processId, string witRefName, string ruleId, string api_version, UpdateProcessRuleRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/rules/"+ (ruleId==null? "" : Uri.EscapeDataString(ruleId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a state definition in the work item type of the process.
		/// States_Create {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/states
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemStateResultModel> States_CreateAsync(string organization, string processId, string witRefName, string api_version, WorkItemStateInputModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/states&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkItemStateResultModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a state definition in the work item type of the process.
		/// States_Create {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/states
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemStateResultModel States_Create(string organization, string processId, string witRefName, string api_version, WorkItemStateInputModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/states&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkItemStateResultModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all state definitions in a work item type of the process.
		/// States_List {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/states
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemStateResultModel[]> States_ListAsync(string organization, string processId, string witRefName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/states&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkItemStateResultModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all state definitions in a work item type of the process.
		/// States_List {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/states
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemStateResultModel[] States_List(string organization, string processId, string witRefName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/states&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkItemStateResultModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a state definition in the work item type of the process.
		/// States_Delete {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/states/{stateId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="stateId">ID of the state</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task States_DeleteAsync(string organization, string processId, string witRefName, string stateId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/states/"+ (stateId==null? "" : Uri.EscapeDataString(stateId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a state definition in the work item type of the process.
		/// States_Delete {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/states/{stateId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="stateId">ID of the state</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void States_Delete(string organization, string processId, string witRefName, string stateId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/states/"+ (stateId==null? "" : Uri.EscapeDataString(stateId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single state definition in a work item type of the process.
		/// States_Get {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/states/{stateId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="stateId">The ID of the state</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemStateResultModel> States_GetAsync(string organization, string processId, string witRefName, string stateId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/states/"+ (stateId==null? "" : Uri.EscapeDataString(stateId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkItemStateResultModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single state definition in a work item type of the process.
		/// States_Get {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/states/{stateId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="stateId">The ID of the state</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemStateResultModel States_Get(string organization, string processId, string witRefName, string stateId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/states/"+ (stateId==null? "" : Uri.EscapeDataString(stateId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkItemStateResultModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Hides a state definition in the work item type of the process.Only states with customizationType:System can be hidden.
		/// States_Hide_State_Definition {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/states/{stateId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="stateId">The ID of the state</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemStateResultModel> States_Hide_State_DefinitionAsync(string organization, string processId, string witRefName, string stateId, string api_version, HideStateModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/states/"+ (stateId==null? "" : Uri.EscapeDataString(stateId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkItemStateResultModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Hides a state definition in the work item type of the process.Only states with customizationType:System can be hidden.
		/// States_Hide_State_Definition {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/states/{stateId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="stateId">The ID of the state</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemStateResultModel States_Hide_State_Definition(string organization, string processId, string witRefName, string stateId, string api_version, HideStateModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/states/"+ (stateId==null? "" : Uri.EscapeDataString(stateId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkItemStateResultModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a given state definition in the work item type of the process.
		/// States_Update {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/states/{stateId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="stateId">ID of the state</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemStateResultModel> States_UpdateAsync(string organization, string processId, string witRefName, string stateId, string api_version, WorkItemStateInputModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/states/"+ (stateId==null? "" : Uri.EscapeDataString(stateId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkItemStateResultModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a given state definition in the work item type of the process.
		/// States_Update {organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/states/{stateId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">ID of the process</param>
		/// <param name="witRefName">The reference name of the work item type</param>
		/// <param name="stateId">ID of the state</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemStateResultModel States_Update(string organization, string processId, string witRefName, string stateId, string api_version, WorkItemStateInputModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workItemTypes/"+ (witRefName==null? "" : Uri.EscapeDataString(witRefName))+"/states/"+ (stateId==null? "" : Uri.EscapeDataString(stateId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkItemStateResultModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a behavior to the work item type of the process.
		/// Work_Item_Types_Behaviors_Add {organization}/_apis/work/processes/{processId}/workitemtypesbehaviors/{witRefNameForBehaviors}/behaviors
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefNameForBehaviors">Work item type reference name for the behavior</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemTypeBehavior> Work_Item_Types_Behaviors_AddAsync(string organization, string processId, string witRefNameForBehaviors, string api_version, WorkItemTypeBehavior requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workitemtypesbehaviors/"+ (witRefNameForBehaviors==null? "" : Uri.EscapeDataString(witRefNameForBehaviors))+"/behaviors&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkItemTypeBehavior>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a behavior to the work item type of the process.
		/// Work_Item_Types_Behaviors_Add {organization}/_apis/work/processes/{processId}/workitemtypesbehaviors/{witRefNameForBehaviors}/behaviors
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefNameForBehaviors">Work item type reference name for the behavior</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemTypeBehavior Work_Item_Types_Behaviors_Add(string organization, string processId, string witRefNameForBehaviors, string api_version, WorkItemTypeBehavior requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workitemtypesbehaviors/"+ (witRefNameForBehaviors==null? "" : Uri.EscapeDataString(witRefNameForBehaviors))+"/behaviors&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkItemTypeBehavior>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all behaviors for the work item type of the process.
		/// Work_Item_Types_Behaviors_List {organization}/_apis/work/processes/{processId}/workitemtypesbehaviors/{witRefNameForBehaviors}/behaviors
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefNameForBehaviors">Work item type reference name for the behavior</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemTypeBehavior[]> Work_Item_Types_Behaviors_ListAsync(string organization, string processId, string witRefNameForBehaviors, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workitemtypesbehaviors/"+ (witRefNameForBehaviors==null? "" : Uri.EscapeDataString(witRefNameForBehaviors))+"/behaviors&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkItemTypeBehavior[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all behaviors for the work item type of the process.
		/// Work_Item_Types_Behaviors_List {organization}/_apis/work/processes/{processId}/workitemtypesbehaviors/{witRefNameForBehaviors}/behaviors
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefNameForBehaviors">Work item type reference name for the behavior</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemTypeBehavior[] Work_Item_Types_Behaviors_List(string organization, string processId, string witRefNameForBehaviors, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workitemtypesbehaviors/"+ (witRefNameForBehaviors==null? "" : Uri.EscapeDataString(witRefNameForBehaviors))+"/behaviors&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkItemTypeBehavior[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a behavior for the work item type of the process.
		/// Work_Item_Types_Behaviors_Update {organization}/_apis/work/processes/{processId}/workitemtypesbehaviors/{witRefNameForBehaviors}/behaviors
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefNameForBehaviors">Work item type reference name for the behavior</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemTypeBehavior> Work_Item_Types_Behaviors_UpdateAsync(string organization, string processId, string witRefNameForBehaviors, string api_version, WorkItemTypeBehavior requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workitemtypesbehaviors/"+ (witRefNameForBehaviors==null? "" : Uri.EscapeDataString(witRefNameForBehaviors))+"/behaviors&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkItemTypeBehavior>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a behavior for the work item type of the process.
		/// Work_Item_Types_Behaviors_Update {organization}/_apis/work/processes/{processId}/workitemtypesbehaviors/{witRefNameForBehaviors}/behaviors
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefNameForBehaviors">Work item type reference name for the behavior</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemTypeBehavior Work_Item_Types_Behaviors_Update(string organization, string processId, string witRefNameForBehaviors, string api_version, WorkItemTypeBehavior requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workitemtypesbehaviors/"+ (witRefNameForBehaviors==null? "" : Uri.EscapeDataString(witRefNameForBehaviors))+"/behaviors&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkItemTypeBehavior>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a behavior for the work item type of the process.
		/// Work_Item_Types_Behaviors_Get {organization}/_apis/work/processes/{processId}/workitemtypesbehaviors/{witRefNameForBehaviors}/behaviors/{behaviorRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefNameForBehaviors">Work item type reference name for the behavior</param>
		/// <param name="behaviorRefName">The reference name of the behavior</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemTypeBehavior> Work_Item_Types_Behaviors_GetAsync(string organization, string processId, string witRefNameForBehaviors, string behaviorRefName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workitemtypesbehaviors/"+ (witRefNameForBehaviors==null? "" : Uri.EscapeDataString(witRefNameForBehaviors))+"/behaviors/"+ (behaviorRefName==null? "" : Uri.EscapeDataString(behaviorRefName))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkItemTypeBehavior>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a behavior for the work item type of the process.
		/// Work_Item_Types_Behaviors_Get {organization}/_apis/work/processes/{processId}/workitemtypesbehaviors/{witRefNameForBehaviors}/behaviors/{behaviorRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefNameForBehaviors">Work item type reference name for the behavior</param>
		/// <param name="behaviorRefName">The reference name of the behavior</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemTypeBehavior Work_Item_Types_Behaviors_Get(string organization, string processId, string witRefNameForBehaviors, string behaviorRefName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workitemtypesbehaviors/"+ (witRefNameForBehaviors==null? "" : Uri.EscapeDataString(witRefNameForBehaviors))+"/behaviors/"+ (behaviorRefName==null? "" : Uri.EscapeDataString(behaviorRefName))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkItemTypeBehavior>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a behavior for the work item type of the process.
		/// Work_Item_Types_Behaviors_Remove_Behavior_From_Work_Item_Type {organization}/_apis/work/processes/{processId}/workitemtypesbehaviors/{witRefNameForBehaviors}/behaviors/{behaviorRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefNameForBehaviors">Work item type reference name for the behavior</param>
		/// <param name="behaviorRefName">The reference name of the behavior</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Work_Item_Types_Behaviors_Remove_Behavior_From_Work_Item_TypeAsync(string organization, string processId, string witRefNameForBehaviors, string behaviorRefName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workitemtypesbehaviors/"+ (witRefNameForBehaviors==null? "" : Uri.EscapeDataString(witRefNameForBehaviors))+"/behaviors/"+ (behaviorRefName==null? "" : Uri.EscapeDataString(behaviorRefName))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a behavior for the work item type of the process.
		/// Work_Item_Types_Behaviors_Remove_Behavior_From_Work_Item_Type {organization}/_apis/work/processes/{processId}/workitemtypesbehaviors/{witRefNameForBehaviors}/behaviors/{behaviorRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">The ID of the process</param>
		/// <param name="witRefNameForBehaviors">Work item type reference name for the behavior</param>
		/// <param name="behaviorRefName">The reference name of the behavior</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Work_Item_Types_Behaviors_Remove_Behavior_From_Work_Item_Type(string organization, string processId, string witRefNameForBehaviors, string behaviorRefName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processId==null? "" : Uri.EscapeDataString(processId))+"/workitemtypesbehaviors/"+ (witRefNameForBehaviors==null? "" : Uri.EscapeDataString(witRefNameForBehaviors))+"/behaviors/"+ (behaviorRefName==null? "" : Uri.EscapeDataString(behaviorRefName))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a process of a specific ID.
		/// Processes_Delete {organization}/_apis/work/processes/{processTypeId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Processes_DeleteAsync(string organization, string processTypeId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processTypeId==null? "" : Uri.EscapeDataString(processTypeId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a process of a specific ID.
		/// Processes_Delete {organization}/_apis/work/processes/{processTypeId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Processes_Delete(string organization, string processTypeId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processTypeId==null? "" : Uri.EscapeDataString(processTypeId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit a process of a specific ID.
		/// Processes_Edit_Process {organization}/_apis/work/processes/{processTypeId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessInfo> Processes_Edit_ProcessAsync(string organization, string processTypeId, string api_version, UpdateProcessModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processTypeId==null? "" : Uri.EscapeDataString(processTypeId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Edit a process of a specific ID.
		/// Processes_Edit_Process {organization}/_apis/work/processes/{processTypeId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessInfo Processes_Edit_Process(string organization, string processTypeId, string api_version, UpdateProcessModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processTypeId==null? "" : Uri.EscapeDataString(processTypeId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a single process of a specified ID.
		/// Processes_Get {organization}/_apis/work/processes/{processTypeId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessInfo> Processes_GetAsync(string organization, string processTypeId, Processes_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processTypeId==null? "" : Uri.EscapeDataString(processTypeId))+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a single process of a specified ID.
		/// Processes_Get {organization}/_apis/work/processes/{processTypeId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessInfo Processes_Get(string organization, string processTypeId, Processes_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/"+ (processTypeId==null? "" : Uri.EscapeDataString(processTypeId))+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProcessInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a picklist.
		/// Lists_Create {organization}/_apis/work/processes/lists
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Picklist</param>
		/// <returns>successful operation</returns>
		public async Task<PickList> Lists_CreateAsync(string organization, string api_version, PickList requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/lists&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PickList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a picklist.
		/// Lists_Create {organization}/_apis/work/processes/lists
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Picklist</param>
		/// <returns>successful operation</returns>
		public PickList Lists_Create(string organization, string api_version, PickList requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/lists&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PickList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns meta data of the picklist.
		/// Lists_List {organization}/_apis/work/processes/lists
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<PickListMetadata[]> Lists_ListAsync(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/lists&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PickListMetadata[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns meta data of the picklist.
		/// Lists_List {organization}/_apis/work/processes/lists
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public PickListMetadata[] Lists_List(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/lists&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PickListMetadata[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a picklist.
		/// Lists_Delete {organization}/_apis/work/processes/lists/{listId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="listId">The ID of the list</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Lists_DeleteAsync(string organization, string listId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/lists/"+ (listId==null? "" : Uri.EscapeDataString(listId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a picklist.
		/// Lists_Delete {organization}/_apis/work/processes/lists/{listId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="listId">The ID of the list</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Lists_Delete(string organization, string listId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/lists/"+ (listId==null? "" : Uri.EscapeDataString(listId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a picklist.
		/// Lists_Get {organization}/_apis/work/processes/lists/{listId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="listId">The ID of the list</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<PickList> Lists_GetAsync(string organization, string listId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/lists/"+ (listId==null? "" : Uri.EscapeDataString(listId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PickList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a picklist.
		/// Lists_Get {organization}/_apis/work/processes/lists/{listId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="listId">The ID of the list</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public PickList Lists_Get(string organization, string listId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/lists/"+ (listId==null? "" : Uri.EscapeDataString(listId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PickList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a list.
		/// Lists_Update {organization}/_apis/work/processes/lists/{listId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="listId">The ID of the list</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<PickList> Lists_UpdateAsync(string organization, string listId, string api_version, PickList requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/lists/"+ (listId==null? "" : Uri.EscapeDataString(listId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PickList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a list.
		/// Lists_Update {organization}/_apis/work/processes/lists/{listId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="listId">The ID of the list</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public PickList Lists_Update(string organization, string listId, string api_version, PickList requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/work/processes/lists/"+ (listId==null? "" : Uri.EscapeDataString(listId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PickList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Processes_ListExpand
	{
		
		none = 0,
		
		projects = 1,
	}
	
	public enum Behaviors_ListExpand
	{
		
		none = 0,
		
		fields = 1,
		
		combinedFields = 2,
	}
	
	public enum Work_Item_Types_ListExpand
	{
		
		none = 0,
		
		states = 1,
		
		behaviors = 2,
		
		layout = 3,
	}
	
	public enum Fields_GetExpand
	{
		
		none = 0,
		
		allowedValues = 1,
		
		all = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
