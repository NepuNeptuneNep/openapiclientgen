//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public class Account
	{
		
		/// <summary>
		/// Identifier for an Account
		/// </summary>
		public string AccountId { get; set; }
		
		/// <summary>
		/// Name for an account
		/// </summary>
		public string AccountName { get; set; }
		
		/// <summary>
		/// Owner of account
		/// </summary>
		public string AccountOwner { get; set; }
		
		/// <summary>
		/// Current account status
		/// </summary>
		public System.Nullable<AccountAccountStatus> AccountStatus { get; set; }
		
		/// <summary>
		/// Type of account: Personal, Organization
		/// </summary>
		public System.Nullable<AccountAccountType> AccountType { get; set; }
		
		/// <summary>
		/// Uri for an account
		/// </summary>
		public string AccountUri { get; set; }
		
		/// <summary>
		/// Who created the account
		/// </summary>
		public string CreatedBy { get; set; }
		
		/// <summary>
		/// Date account was created
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		public System.Nullable<System.Boolean> HasMoved { get; set; }
		
		/// <summary>
		/// Identity of last person to update the account
		/// </summary>
		public string LastUpdatedBy { get; set; }
		
		/// <summary>
		/// Date account was last updated
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastUpdatedDate { get; set; }
		
		/// <summary>
		/// Namespace for an account
		/// </summary>
		public string NamespaceId { get; set; }
		
		public string NewCollectionId { get; set; }
		
		/// <summary>
		/// Organization that created the account
		/// </summary>
		public string OrganizationName { get; set; }
		
		/// <summary>
		/// The class represents a property bag as a collection of key-value pairs. Values of all primitive types (any type with a `TypeCode != TypeCode.Object`) except for `DBNull` are accepted. Values of type Byte[], Int32, Double, DateType and String preserve their type, other primitives are retuned as a String. Byte[] expected as base64 encoded string.
		/// </summary>
		public PropertiesCollection Properties { get; set; }
		
		/// <summary>
		/// Reason for current status
		/// </summary>
		public string StatusReason { get; set; }
	}
	
	public enum AccountAccountStatus
	{
		
		none = 0,
		
		enabled = 1,
		
		disabled = 2,
		
		deleted = 3,
		
		moved = 4,
	}
	
	public enum AccountAccountType
	{
		
		personal = 0,
		
		organization = 1,
	}
	
	/// <summary>
	/// The class represents a property bag as a collection of key-value pairs. Values of all primitive types (any type with a `TypeCode != TypeCode.Object`) except for `DBNull` are accepted. Values of type Byte[], Int32, Double, DateType and String preserve their type, other primitives are retuned as a String. Byte[] expected as base64 encoded string.
	/// </summary>
	public class PropertiesCollection
	{
		
		/// <summary>
		/// The count of properties in the collection.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		public string Item { get; set; }
		
		/// <summary>
		/// The set of keys in the collection.
		/// </summary>
		public string[] Keys { get; set; }
		
		/// <summary>
		/// The set of values in the collection.
		/// </summary>
		public string[] Values { get; set; }
	}
	
	public class AccountCreateInfoInternal
	{
		
		public string AccountName { get; set; }
		
		public string Creator { get; set; }
		
		public string Organization { get; set; }
		
		public AccountPreferencesInternal Preferences { get; set; }
		
		/// <summary>
		/// The class represents a property bag as a collection of key-value pairs. Values of all primitive types (any type with a `TypeCode != TypeCode.Object`) except for `DBNull` are accepted. Values of type Byte[], Int32, Double, DateType and String preserve their type, other primitives are retuned as a String. Byte[] expected as base64 encoded string.
		/// </summary>
		public PropertiesCollection Properties { get; set; }
		
		public string[] ServiceDefinitions { get; set; }
	}
	
	public class AccountPreferencesInternal
	{
		
		public string Culture { get; set; }
		
		public string Language { get; set; }
		
		public string TimeZone { get; set; }
	}
	
	/// <summary>
	/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
	/// </summary>
	public class VssJsonCollectionWrapper
	{
		
		public string Value { get; set; }
	}
	
	public class VssJsonCollectionWrapperBase
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	public partial class MyClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public MyClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get a list of accounts for a specific owner or a specific member.
		/// Accounts_List _apis/accounts
		/// </summary>
		/// <param name="ownerId">ID for the owner of the accounts.</param>
		/// <param name="memberId">ID for a member of the accounts.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Account[]> Accounts_ListAsync(string ownerId, string memberId, string properties, string api_version)
		{
			var requestUri = "_apis/accounts?ownerId=" + (ownerId==null? "" : Uri.EscapeDataString(ownerId))+"&memberId=" + (memberId==null? "" : Uri.EscapeDataString(memberId))+"&properties=" + (properties==null? "" : Uri.EscapeDataString(properties))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of accounts for a specific owner or a specific member.
		/// Accounts_List _apis/accounts
		/// </summary>
		/// <param name="ownerId">ID for the owner of the accounts.</param>
		/// <param name="memberId">ID for a member of the accounts.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Account[] Accounts_List(string ownerId, string memberId, string properties, string api_version)
		{
			var requestUri = "_apis/accounts?ownerId=" + (ownerId==null? "" : Uri.EscapeDataString(ownerId))+"&memberId=" + (memberId==null? "" : Uri.EscapeDataString(memberId))+"&properties=" + (properties==null? "" : Uri.EscapeDataString(properties))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
