//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public class GraphSubjectBase
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
		/// </summary>
		public string Descriptor { get; set; }
		
		/// <summary>
		/// This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// This url is the full route to the source resource of this graph subject.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// The class to represent a collection of REST reference links.
	/// </summary>
	public class ReferenceLinks
	{
		
		/// <summary>
		/// The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Links { get; set; }
	}
	
	public class Identity
	{
	}
	
	/// <summary>
	/// Base Identity class to allow "trimmed" identity class in the GetConnectionData API Makes sure that on-the-wire representations of the derived classes are compatible with each other (e.g. Server responds with PublicIdentity object while client deserializes it as Identity object) Derived classes should not have additional [DataMember] properties
	/// </summary>
	public class IdentityBase
	{
		
		/// <summary>
		/// The custom display name for the identity (if any). Setting this property to an empty string will clear the existing custom display name. Setting this property to null will not affect the existing persisted value (since null values do not get sent over the wire or to the database)
		/// </summary>
		public string CustomDisplayName { get; set; }
		
		/// <summary>
		/// An Identity descriptor is a wrapper for the identity type (Windows SID, Passport) along with a unique identifier such as the SID or PUID.
		/// </summary>
		public IdentityDescriptor Descriptor { get; set; }
		
		public string Id { get; set; }
		
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		public System.Nullable<System.Boolean> IsContainer { get; set; }
		
		public string MasterId { get; set; }
		
		public string[] MemberIds { get; set; }
		
		public IdentityDescriptor[] MemberOf { get; set; }
		
		public IdentityDescriptor[] Members { get; set; }
		
		public System.Nullable<System.Int32> MetaTypeId { get; set; }
		
		/// <summary>
		/// The class represents a property bag as a collection of key-value pairs. Values of all primitive types (any type with a `TypeCode != TypeCode.Object`) except for `DBNull` are accepted. Values of type Byte[], Int32, Double, DateType and String preserve their type, other primitives are retuned as a String. Byte[] expected as base64 encoded string.
		/// </summary>
		public PropertiesCollection Properties { get; set; }
		
		/// <summary>
		/// The display name for the identity as specified by the source identity provider.
		/// </summary>
		public string ProviderDisplayName { get; set; }
		
		public System.Nullable<System.Int32> ResourceVersion { get; set; }
		
		public string SocialDescriptor { get; set; }
		
		public string SubjectDescriptor { get; set; }
		
		public System.Nullable<System.Int32> UniqueUserId { get; set; }
	}
	
	/// <summary>
	/// An Identity descriptor is a wrapper for the identity type (Windows SID, Passport) along with a unique identifier such as the SID or PUID.
	/// </summary>
	public class IdentityDescriptor
	{
		
		/// <summary>
		/// The unique identifier for this identity, not exceeding 256 chars, which will be persisted.
		/// </summary>
		public string Identifier { get; set; }
		
		/// <summary>
		/// Type of descriptor (for example, Windows, Passport, etc.).
		/// </summary>
		public string IdentityType { get; set; }
	}
	
	/// <summary>
	/// The class represents a property bag as a collection of key-value pairs. Values of all primitive types (any type with a `TypeCode != TypeCode.Object`) except for `DBNull` are accepted. Values of type Byte[], Int32, Double, DateType and String preserve their type, other primitives are retuned as a String. Byte[] expected as base64 encoded string.
	/// </summary>
	public class PropertiesCollection
	{
		
		/// <summary>
		/// The count of properties in the collection.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		public string Item { get; set; }
		
		/// <summary>
		/// The set of keys in the collection.
		/// </summary>
		public string[] Keys { get; set; }
		
		/// <summary>
		/// The set of values in the collection.
		/// </summary>
		public string[] Values { get; set; }
	}
	
	public class IdentityData
	{
		
		public string[] IdentityIds { get; set; }
	}
	
	public class IdentityRef
	{
		
		/// <summary>
		/// Deprecated - Can be retrieved by querying the Graph user referenced in the "self" entry of the IdentityRef "_links" dictionary
		/// </summary>
		public string DirectoryAlias { get; set; }
		
		public string Id { get; set; }
		
		/// <summary>
		/// Deprecated - Available in the "avatar" entry of the IdentityRef "_links" dictionary
		/// </summary>
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Deprecated - Can be retrieved by querying the Graph membership state referenced in the "membershipState" entry of the GraphUser "_links" dictionary
		/// </summary>
		public System.Nullable<System.Boolean> Inactive { get; set; }
		
		/// <summary>
		/// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsAadUserType/Descriptor.IsAadGroupType)
		/// </summary>
		public System.Nullable<System.Boolean> IsAadIdentity { get; set; }
		
		/// <summary>
		/// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsGroupType)
		/// </summary>
		public System.Nullable<System.Boolean> IsContainer { get; set; }
		
		public System.Nullable<System.Boolean> IsDeletedInOrigin { get; set; }
		
		/// <summary>
		/// Deprecated - not in use in most preexisting implementations of ToIdentityRef
		/// </summary>
		public string ProfileUrl { get; set; }
		
		/// <summary>
		/// Deprecated - use Domain+PrincipalName instead
		/// </summary>
		public string UniqueName { get; set; }
	}
	
	/// <summary>
	/// The JSON model for JSON Patch Operations
	/// </summary>
	public class JsonPatchDocument
	{
	}
	
	/// <summary>
	/// The JSON model for a JSON Patch operation
	/// </summary>
	public class JsonPatchOperation
	{
		
		/// <summary>
		/// The path to copy from for the Move/Copy operation.
		/// </summary>
		public string From { get; set; }
		
		/// <summary>
		/// The patch operation
		/// </summary>
		public System.Nullable<JsonPatchOperationOp> Op { get; set; }
		
		/// <summary>
		/// The path for the operation. In the case of an array, a zero based index can be used to specify the position in the array (e.g. /biscuits/0/name). The "-" character can be used instead of an index to insert at the end of the array (e.g. /biscuits/-).
		/// </summary>
		public string Path { get; set; }
		
		/// <summary>
		/// The value for the operation. This is either a primitive or a JToken.
		/// </summary>
		public string Value { get; set; }
	}
	
	public enum JsonPatchOperationOp
	{
		
		add = 0,
		
		remove = 1,
		
		replace = 2,
		
		move = 3,
		
		copy = 4,
		
		test = 5,
	}
	
	/// <summary>
	/// Reference for an async operation.
	/// </summary>
	public class OperationReference
	{
		
		/// <summary>
		/// Unique identifier for the operation.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Unique identifier for the plugin.
		/// </summary>
		public string PluginId { get; set; }
		
		/// <summary>
		/// The current status of the operation.
		/// </summary>
		public System.Nullable<OperationReferenceStatus> Status { get; set; }
		
		/// <summary>
		/// URL to get the full operation object.
		/// </summary>
		public string Url { get; set; }
	}
	
	public enum OperationReferenceStatus
	{
		
		notSet = 0,
		
		queued = 1,
		
		inProgress = 2,
		
		cancelled = 3,
		
		succeeded = 4,
		
		failed = 5,
	}
	
	public class Process
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		public string Description { get; set; }
		
		public string Id { get; set; }
		
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		public System.Nullable<ProcessType> Type { get; set; }
	}
	
	public enum ProcessType
	{
		
		system = 0,
		
		custom = 1,
		
		inherited = 2,
	}
	
	public class ProcessReference
	{
		
		public string Name { get; set; }
		
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Contains the image data for project avatar.
	/// </summary>
	public class ProjectAvatar
	{
		
		/// <summary>
		/// The avatar image represented as a byte array.
		/// </summary>
		public string[] Image { get; set; }
	}
	
	/// <summary>
	/// Contains information describing a project.
	/// </summary>
	public class ProjectInfo
	{
		
		/// <summary>
		/// The abbreviated name of the project.
		/// </summary>
		public string Abbreviation { get; set; }
		
		/// <summary>
		/// The description of the project.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// The id of the project.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// The time that this project was last updated.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
		
		/// <summary>
		/// The name of the project.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// A set of name-value pairs storing additional property data related to the project.
		/// </summary>
		public ProjectProperty[] Properties { get; set; }
		
		/// <summary>
		/// The current revision of the project.
		/// </summary>
		public System.Nullable<System.Int64> Revision { get; set; }
		
		/// <summary>
		/// The current state of the project.
		/// </summary>
		public System.Nullable<ProjectInfoState> State { get; set; }
		
		/// <summary>
		/// A Uri that can be used to refer to this project.
		/// </summary>
		public string Uri { get; set; }
		
		/// <summary>
		/// The version number of the project.
		/// </summary>
		public System.Nullable<System.Int64> Version { get; set; }
		
		/// <summary>
		/// Indicates whom the project is visible to.
		/// </summary>
		public System.Nullable<ProjectInfoVisibility> Visibility { get; set; }
	}
	
	/// <summary>
	/// A named value associated with a project.
	/// </summary>
	public class ProjectProperty
	{
		
		/// <summary>
		/// The name of the property.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the property.
		/// </summary>
		public string Value { get; set; }
	}
	
	public enum ProjectInfoState
	{
		
		deleting = 0,
		
		_new = 1,
		
		wellFormed = 2,
		
		createPending = 3,
		
		all = 4,
		
		unchanged = 5,
		
		deleted = 6,
	}
	
	public enum ProjectInfoVisibility
	{
		
		_private = 0,
		
		_public = 1,
	}
	
	public class ProjectMessage
	{
		
		/// <summary>
		/// Contains information describing a project.
		/// </summary>
		public ProjectInfo Project { get; set; }
		
		public System.Nullable<ProjectMessageProjectChangeType> ProjectChangeType { get; set; }
		
		public System.Nullable<System.Boolean> ShouldInvalidateSystemStore { get; set; }
	}
	
	public enum ProjectMessageProjectChangeType
	{
		
		modified = 0,
		
		deleted = 1,
		
		added = 2,
	}
	
	public class ProjectProperties
	{
		
		/// <summary>
		/// The team project Id
		/// </summary>
		public string ProjectId { get; set; }
		
		/// <summary>
		/// The collection of team project properties
		/// </summary>
		public ProjectProperty[] Properties { get; set; }
	}
	
	public class Proxy
	{
		
		public ProxyAuthorization Authorization { get; set; }
		
		/// <summary>
		/// This is a description string
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// The friendly name of the server
		/// </summary>
		public string FriendlyName { get; set; }
		
		public System.Nullable<System.Boolean> GlobalDefault { get; set; }
		
		/// <summary>
		/// This is a string representation of the site that the proxy server is located in (e.g. "NA-WA-RED")
		/// </summary>
		public string Site { get; set; }
		
		public System.Nullable<System.Boolean> SiteDefault { get; set; }
		
		/// <summary>
		/// The URL of the proxy server
		/// </summary>
		public string Url { get; set; }
	}
	
	public class ProxyAuthorization
	{
		
		/// <summary>
		/// Gets or sets the endpoint used to obtain access tokens from the configured token service.
		/// </summary>
		public string AuthorizationUrl { get; set; }
		
		/// <summary>
		/// Gets or sets the client identifier for this proxy.
		/// </summary>
		public string ClientId { get; set; }
		
		/// <summary>
		/// An Identity descriptor is a wrapper for the identity type (Windows SID, Passport) along with a unique identifier such as the SID or PUID.
		/// </summary>
		public IdentityDescriptor Identity { get; set; }
		
		/// <summary>
		/// Represents the public key portion of an RSA asymmetric key.
		/// </summary>
		public PublicKey PublicKey { get; set; }
	}
	
	/// <summary>
	/// Represents the public key portion of an RSA asymmetric key.
	/// </summary>
	public class PublicKey
	{
		
		/// <summary>
		/// Gets or sets the exponent for the public key.
		/// </summary>
		public string[] Exponent { get; set; }
		
		/// <summary>
		/// Gets or sets the modulus for the public key.
		/// </summary>
		public string[] Modulus { get; set; }
	}
	
	/// <summary>
	/// The Team Context for an operation.
	/// </summary>
	public class TeamContext
	{
		
		/// <summary>
		/// The team project Id or name.  Ignored if ProjectId is set.
		/// </summary>
		public string Project { get; set; }
		
		/// <summary>
		/// The Team Project ID.  Required if Project is not set.
		/// </summary>
		public string ProjectId { get; set; }
		
		/// <summary>
		/// The Team Id or name.  Ignored if TeamId is set.
		/// </summary>
		public string Team { get; set; }
		
		/// <summary>
		/// The Team Id
		/// </summary>
		public string TeamId { get; set; }
	}
	
	public class TeamMember
	{
		
		public IdentityRef Identity { get; set; }
		
		public System.Nullable<System.Boolean> IsTeamAdmin { get; set; }
	}
	
	/// <summary>
	/// Represents a Team Project object.
	/// </summary>
	public class TeamProject
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// Set of capabilities this project has (such as process template & version control).
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Capabilities { get; set; }
		
		public WebApiTeamRef DefaultTeam { get; set; }
	}
	
	public class WebApiTeamRef
	{
		
		/// <summary>
		/// Team (Identity) Guid. A Team Foundation ID.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Team name
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Team REST API Url
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Data contract for a TeamProjectCollection.
	/// </summary>
	public class TeamProjectCollection
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// Project collection description.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Process customization type on this collection. It can be Xml or Inherited.
		/// </summary>
		public System.Nullable<TeamProjectCollectionProcessCustomizationType> ProcessCustomizationType { get; set; }
		
		/// <summary>
		/// Project collection state.
		/// </summary>
		public string State { get; set; }
	}
	
	public enum TeamProjectCollectionProcessCustomizationType
	{
		
		unknown = 0,
		
		xml = 1,
		
		inherited = 2,
	}
	
	/// <summary>
	/// Reference object for a TeamProjectCollection.
	/// </summary>
	public class TeamProjectCollectionReference
	{
		
		/// <summary>
		/// Collection Id.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Collection Name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Collection REST Url.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Represents a shallow reference to a TeamProject.
	/// </summary>
	public class TeamProjectReference
	{
		
		/// <summary>
		/// Project abbreviation.
		/// </summary>
		public string Abbreviation { get; set; }
		
		/// <summary>
		/// Url to default team identity image.
		/// </summary>
		public string DefaultTeamImageUrl { get; set; }
		
		/// <summary>
		/// The project's description (if any).
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Project identifier.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Project last update time.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
		
		/// <summary>
		/// Project name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Project revision.
		/// </summary>
		public System.Nullable<System.Int64> Revision { get; set; }
		
		/// <summary>
		/// Project state.
		/// </summary>
		public System.Nullable<TeamProjectReferenceState> State { get; set; }
		
		/// <summary>
		/// Url to the full version of the object.
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// Project visibility.
		/// </summary>
		public System.Nullable<TeamProjectReferenceVisibility> Visibility { get; set; }
	}
	
	public enum TeamProjectReferenceState
	{
		
		deleting = 0,
		
		_new = 1,
		
		wellFormed = 2,
		
		createPending = 3,
		
		all = 4,
		
		unchanged = 5,
		
		deleted = 6,
	}
	
	public enum TeamProjectReferenceVisibility
	{
		
		_private = 0,
		
		_public = 1,
	}
	
	/// <summary>
	/// A data transfer object that stores the metadata associated with the creation of temporary data.
	/// </summary>
	public class TemporaryDataCreatedDTO
	{
		
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		public string Id { get; set; }
		
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A data transfer object that stores the metadata associated with the temporary data.
	/// </summary>
	public class TemporaryDataDTO
	{
		
		public System.Nullable<System.Int32> ExpirationSeconds { get; set; }
		
		public string Origin { get; set; }
		
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Updateable properties for a WebApiTeam.
	/// </summary>
	public class UpdateTeam
	{
		
		/// <summary>
		/// New description for the team.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// New name for the team.
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
	/// </summary>
	public class VssJsonCollectionWrapper
	{
		
		public string Value { get; set; }
	}
	
	public class VssJsonCollectionWrapperBase
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	public class WebApiConnectedService
	{
		
		public IdentityRef AuthenticatedBy { get; set; }
		
		/// <summary>
		/// Extra description on the service.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Friendly Name of service connection
		/// </summary>
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// Id/Name of the connection service. For Ex: Subscription Id for Azure Connection
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of service.
		/// </summary>
		public string Kind { get; set; }
		
		/// <summary>
		/// Represents a shallow reference to a TeamProject.
		/// </summary>
		public TeamProjectReference Project { get; set; }
		
		/// <summary>
		/// Optional uri to connect directly to the service such as https://windows.azure.com
		/// </summary>
		public string ServiceUri { get; set; }
	}
	
	public class WebApiConnectedServiceDetails
	{
		
		public WebApiConnectedService ConnectedServiceMetaData { get; set; }
		
		/// <summary>
		/// Credential info
		/// </summary>
		public string CredentialsXml { get; set; }
		
		/// <summary>
		/// Optional uri to connect directly to the service such as https://windows.azure.com
		/// </summary>
		public string EndPoint { get; set; }
	}
	
	public class WebApiConnectedServiceRef
	{
		
		public string Id { get; set; }
		
		public string Url { get; set; }
	}
	
	/// <summary>
	/// The representation of data needed to create a tag definition which is sent across the wire.
	/// </summary>
	public class WebApiCreateTagRequestData
	{
		
		/// <summary>
		/// Name of the tag definition that will be created.
		/// </summary>
		public string Name { get; set; }
	}
	
	public class WebApiProject
	{
		
		/// <summary>
		/// Set of capabilities this project has
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Capabilities { get; set; }
		
		public WebApiProjectCollectionRef Collection { get; set; }
		
		public WebApiTeamRef DefaultTeam { get; set; }
	}
	
	public class WebApiProjectCollectionRef
	{
		
		/// <summary>
		/// Collection Tfs Url (Host Url)
		/// </summary>
		public string CollectionUrl { get; set; }
		
		/// <summary>
		/// Collection Guid
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Collection Name
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Collection REST Url
		/// </summary>
		public string Url { get; set; }
	}
	
	public class WebApiProjectCollection
	{
		
		/// <summary>
		/// Project collection description
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Project collection state
		/// </summary>
		public string State { get; set; }
	}
	
	/// <summary>
	/// The representation of a tag definition which is sent across the wire.
	/// </summary>
	public class WebApiTagDefinition
	{
		
		/// <summary>
		/// Whether or not the tag definition is active.
		/// </summary>
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// ID of the tag definition.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the tag definition.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Resource URL for the Tag Definition.
		/// </summary>
		public string Url { get; set; }
	}
	
	public class WebApiTeam
	{
		
		/// <summary>
		/// Team description
		/// </summary>
		public string Description { get; set; }
		
		public Identity Identity { get; set; }
		
		/// <summary>
		/// Identity REST API Url to this team
		/// </summary>
		public string IdentityUrl { get; set; }
		
		public string ProjectId { get; set; }
		
		public string ProjectName { get; set; }
	}
	
	public partial class MyClient
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public MyClient(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get a list of processes.
		/// Processes_List {organization}/_apis/process/processes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Process[]> Processes_ListAsync(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/process/processes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Process[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of processes.
		/// Processes_List {organization}/_apis/process/processes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Process[] Processes_List(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/process/processes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Process[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a process by ID.
		/// Processes_Get {organization}/_apis/process/processes/{processId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">ID for a process.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Process> Processes_GetAsync(string organization, string processId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/process/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Process>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a process by ID.
		/// Processes_Get {organization}/_apis/process/processes/{processId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="processId">ID for a process.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Process Processes_Get(string organization, string processId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/process/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Process>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all projects in the organization that the authenticated user has access to.
		/// Projects_List {organization}/_apis/projects
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="stateFilter">Filter on team projects in a specific team project state (default: WellFormed).</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TeamProjectReference[]> Projects_ListAsync(string organization, Projects_ListStateFilter stateFilter, int top, int skip, string continuationToken, bool getDefaultTeamImageUrl, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects&stateFilter=" + stateFilter+"&$top="+top+"&$skip="+skip+"&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken))+"&getDefaultTeamImageUrl="+getDefaultTeamImageUrl+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamProjectReference[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all projects in the organization that the authenticated user has access to.
		/// Projects_List {organization}/_apis/projects
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="stateFilter">Filter on team projects in a specific team project state (default: WellFormed).</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TeamProjectReference[] Projects_List(string organization, Projects_ListStateFilter stateFilter, int top, int skip, string continuationToken, bool getDefaultTeamImageUrl, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects&stateFilter=" + stateFilter+"&$top="+top+"&$skip="+skip+"&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken))+"&getDefaultTeamImageUrl="+getDefaultTeamImageUrl+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamProjectReference[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Queues a project to be created. Use the [GetOperation](../../operations/operations/get) to periodically check for create project status.
		/// Projects_Create {organization}/_apis/projects
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <param name="requestBody">The project to create.</param>
		/// <returns>successful operation</returns>
		public async Task<OperationReference> Projects_CreateAsync(string organization, string api_version, TeamProject requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationReference>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Queues a project to be created. Use the [GetOperation](../../operations/operations/get) to periodically check for create project status.
		/// Projects_Create {organization}/_apis/projects
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <param name="requestBody">The project to create.</param>
		/// <returns>successful operation</returns>
		public OperationReference Projects_Create(string organization, string api_version, TeamProject requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationReference>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get project with the specified id or name, optionally including capabilities.
		/// Projects_Get {organization}/_apis/projects/{projectId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="includeCapabilities">Include capabilities (such as source control) in the team project result (default: false).</param>
		/// <param name="includeHistory">Search within renamed projects (that had such name in the past).</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TeamProject> Projects_GetAsync(string organization, string projectId, bool includeCapabilities, bool includeHistory, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"&includeCapabilities="+includeCapabilities+"&includeHistory="+includeHistory+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamProject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project with the specified id or name, optionally including capabilities.
		/// Projects_Get {organization}/_apis/projects/{projectId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="includeCapabilities">Include capabilities (such as source control) in the team project result (default: false).</param>
		/// <param name="includeHistory">Search within renamed projects (that had such name in the past).</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TeamProject Projects_Get(string organization, string projectId, bool includeCapabilities, bool includeHistory, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"&includeCapabilities="+includeCapabilities+"&includeHistory="+includeHistory+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamProject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Queues a project to be deleted. Use the [GetOperation](../../operations/operations/get) to periodically check for delete project status.
		/// Projects_Delete {organization}/_apis/projects/{projectId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="projectId">The project id of the project to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<OperationReference> Projects_DeleteAsync(string organization, string projectId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationReference>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Queues a project to be deleted. Use the [GetOperation](../../operations/operations/get) to periodically check for delete project status.
		/// Projects_Delete {organization}/_apis/projects/{projectId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="projectId">The project id of the project to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public OperationReference Projects_Delete(string organization, string projectId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationReference>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an existing project's name, abbreviation, description, or restore a project.
		/// Projects_Update {organization}/_apis/projects/{projectId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="projectId">The project id of the project to update.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <param name="requestBody">The updates for the project. The state must be set to wellFormed to restore the project.</param>
		/// <returns>successful operation</returns>
		public async Task<OperationReference> Projects_UpdateAsync(string organization, string projectId, string api_version, TeamProject requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationReference>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update an existing project's name, abbreviation, description, or restore a project.
		/// Projects_Update {organization}/_apis/projects/{projectId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="projectId">The project id of the project to update.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <param name="requestBody">The updates for the project. The state must be set to wellFormed to restore the project.</param>
		/// <returns>successful operation</returns>
		public OperationReference Projects_Update(string organization, string projectId, string api_version, TeamProject requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationReference>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the avatar for the project.
		/// Avatar_Set_Project_Avatar {organization}/_apis/projects/{projectId}/avatar
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="projectId">The ID or name of the project.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The avatar blob data object to upload.</param>
		/// <returns>successful operation</returns>
		public async Task Avatar_Set_Project_AvatarAsync(string organization, string projectId, string api_version, ProjectAvatar requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/avatar&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the avatar for the project.
		/// Avatar_Set_Project_Avatar {organization}/_apis/projects/{projectId}/avatar
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="projectId">The ID or name of the project.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The avatar blob data object to upload.</param>
		/// <returns>successful operation</returns>
		public void Avatar_Set_Project_Avatar(string organization, string projectId, string api_version, ProjectAvatar requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/avatar&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the avatar for the project.
		/// Avatar_Remove_Project_Avatar {organization}/_apis/projects/{projectId}/avatar
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="projectId">The ID or name of the project.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Avatar_Remove_Project_AvatarAsync(string organization, string projectId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/avatar&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the avatar for the project.
		/// Avatar_Remove_Project_Avatar {organization}/_apis/projects/{projectId}/avatar
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="projectId">The ID or name of the project.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Avatar_Remove_Project_Avatar(string organization, string projectId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/avatar&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a collection of team project properties.
		/// Projects_Get_Project_Properties {organization}/_apis/projects/{projectId}/properties
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="projectId">The team project ID.</param>
		/// <param name="keys">A comma-delimited string of team project property names. Wildcard characters ("?" and "*") are supported. If no key is specified, all properties will be returned.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProjectProperty[]> Projects_Get_Project_PropertiesAsync(string organization, string projectId, string keys, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/properties&keys=" + (keys==null? "" : System.Uri.EscapeDataString(keys))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectProperty[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a collection of team project properties.
		/// Projects_Get_Project_Properties {organization}/_apis/projects/{projectId}/properties
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="projectId">The team project ID.</param>
		/// <param name="keys">A comma-delimited string of team project property names. Wildcard characters ("?" and "*") are supported. If no key is specified, all properties will be returned.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProjectProperty[] Projects_Get_Project_Properties(string organization, string projectId, string keys, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/properties&keys=" + (keys==null? "" : System.Uri.EscapeDataString(keys))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectProperty[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of teams.
		/// Teams_Get_Teams {organization}/_apis/projects/{projectId}/teams
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="mine">If true return all the teams requesting user is member, otherwise return all the teams user has read access.</param>
		/// <param name="top">Maximum number of teams to return.</param>
		/// <param name="skip">Number of teams to skip.</param>
		/// <param name="expandIdentity">A value indicating whether or not to expand Identity information in the result WebApiTeam object.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WebApiTeam[]> Teams_Get_TeamsAsync(string organization, string projectId, bool mine, int top, int skip, bool expandIdentity, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/teams&$mine="+mine+"&$top="+top+"&$skip="+skip+"&$expandIdentity="+expandIdentity+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebApiTeam[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of teams.
		/// Teams_Get_Teams {organization}/_apis/projects/{projectId}/teams
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="mine">If true return all the teams requesting user is member, otherwise return all the teams user has read access.</param>
		/// <param name="top">Maximum number of teams to return.</param>
		/// <param name="skip">Number of teams to skip.</param>
		/// <param name="expandIdentity">A value indicating whether or not to expand Identity information in the result WebApiTeam object.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WebApiTeam[] Teams_Get_Teams(string organization, string projectId, bool mine, int top, int skip, bool expandIdentity, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/teams&$mine="+mine+"&$top="+top+"&$skip="+skip+"&$expandIdentity="+expandIdentity+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebApiTeam[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a team in a team project.
		/// 
		/// Possible failure scenarios
		/// Invalid project name/ID (project doesn't exist) 404
		/// Invalid team name or description 400
		/// Team already exists 400
		/// Insufficient privileges 400
		/// Teams_Create {organization}/_apis/projects/{projectId}/teams
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="projectId">The name or ID (GUID) of the team project in which to create the team.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <param name="requestBody">The team data used to create the team.</param>
		/// <returns>successful operation</returns>
		public async Task<WebApiTeam> Teams_CreateAsync(string organization, string projectId, string api_version, WebApiTeam requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/teams&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebApiTeam>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a team in a team project.
		/// 
		/// Possible failure scenarios
		/// Invalid project name/ID (project doesn't exist) 404
		/// Invalid team name or description 400
		/// Team already exists 400
		/// Insufficient privileges 400
		/// Teams_Create {organization}/_apis/projects/{projectId}/teams
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="projectId">The name or ID (GUID) of the team project in which to create the team.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <param name="requestBody">The team data used to create the team.</param>
		/// <returns>successful operation</returns>
		public WebApiTeam Teams_Create(string organization, string projectId, string api_version, WebApiTeam requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/teams&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebApiTeam>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a specific team.
		/// Teams_Get {organization}/_apis/projects/{projectId}/teams/{teamId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="projectId">The name or ID (GUID) of the team project containing the team.</param>
		/// <param name="teamId">The name or ID (GUID) of the team.</param>
		/// <param name="expandIdentity">A value indicating whether or not to expand Identity information in the result WebApiTeam object.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WebApiTeam> Teams_GetAsync(string organization, string projectId, string teamId, bool expandIdentity, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"&$expandIdentity="+expandIdentity+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebApiTeam>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific team.
		/// Teams_Get {organization}/_apis/projects/{projectId}/teams/{teamId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="projectId">The name or ID (GUID) of the team project containing the team.</param>
		/// <param name="teamId">The name or ID (GUID) of the team.</param>
		/// <param name="expandIdentity">A value indicating whether or not to expand Identity information in the result WebApiTeam object.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WebApiTeam Teams_Get(string organization, string projectId, string teamId, bool expandIdentity, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"&$expandIdentity="+expandIdentity+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebApiTeam>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a team.
		/// Teams_Delete {organization}/_apis/projects/{projectId}/teams/{teamId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="projectId">The name or ID (GUID) of the team project containing the team to delete.</param>
		/// <param name="teamId">The name or ID of the team to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Teams_DeleteAsync(string organization, string projectId, string teamId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a team.
		/// Teams_Delete {organization}/_apis/projects/{projectId}/teams/{teamId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="projectId">The name or ID (GUID) of the team project containing the team to delete.</param>
		/// <param name="teamId">The name or ID of the team to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Teams_Delete(string organization, string projectId, string teamId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a team's name and/or description.
		/// Teams_Update {organization}/_apis/projects/{projectId}/teams/{teamId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="projectId">The name or ID (GUID) of the team project containing the team to update.</param>
		/// <param name="teamId">The name of ID of the team to update.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WebApiTeam> Teams_UpdateAsync(string organization, string projectId, string teamId, string api_version, WebApiTeam requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebApiTeam>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a team's name and/or description.
		/// Teams_Update {organization}/_apis/projects/{projectId}/teams/{teamId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="projectId">The name or ID (GUID) of the team project containing the team to update.</param>
		/// <param name="teamId">The name of ID of the team to update.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WebApiTeam Teams_Update(string organization, string projectId, string teamId, string api_version, WebApiTeam requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebApiTeam>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of members for a specific team.
		/// Teams_Get_Team_Members_With_Extended_Properties {organization}/_apis/projects/{projectId}/teams/{teamId}/members
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="projectId">The name or ID (GUID) of the team project the team belongs to.</param>
		/// <param name="teamId">The name or ID (GUID) of the team .</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TeamMember[]> Teams_Get_Team_Members_With_Extended_PropertiesAsync(string organization, string projectId, string teamId, int top, int skip, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/members&$top="+top+"&$skip="+skip+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamMember[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of members for a specific team.
		/// Teams_Get_Team_Members_With_Extended_Properties {organization}/_apis/projects/{projectId}/teams/{teamId}/members
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="projectId">The name or ID (GUID) of the team project the team belongs to.</param>
		/// <param name="teamId">The name or ID (GUID) of the team .</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TeamMember[] Teams_Get_Team_Members_With_Extended_Properties(string organization, string projectId, string teamId, int top, int skip, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/members&$top="+top+"&$skip="+skip+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamMember[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of all teams.
		/// Teams_Get_All_Teams {organization}/_apis/teams
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="mine">If true, then return all teams requesting user is member. Otherwise return all teams user has read access.</param>
		/// <param name="top">Maximum number of teams to return.</param>
		/// <param name="skip">Number of teams to skip.</param>
		/// <param name="expandIdentity">A value indicating whether or not to expand Identity information in the result WebApiTeam object.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WebApiTeam[]> Teams_Get_All_TeamsAsync(string organization, bool mine, int top, int skip, bool expandIdentity, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/teams&$mine="+mine+"&$top="+top+"&$skip="+skip+"&$expandIdentity="+expandIdentity+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebApiTeam[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of all teams.
		/// Teams_Get_All_Teams {organization}/_apis/teams
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="mine">If true, then return all teams requesting user is member. Otherwise return all teams user has read access.</param>
		/// <param name="top">Maximum number of teams to return.</param>
		/// <param name="skip">Number of teams to skip.</param>
		/// <param name="expandIdentity">A value indicating whether or not to expand Identity information in the result WebApiTeam object.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WebApiTeam[] Teams_Get_All_Teams(string organization, bool mine, int top, int skip, bool expandIdentity, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/teams&$mine="+mine+"&$top="+top+"&$skip="+skip+"&$expandIdentity="+expandIdentity+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebApiTeam[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Projects_ListStateFilter
	{
		
		deleting = 0,
		
		_new = 1,
		
		wellFormed = 2,
		
		createPending = 3,
		
		all = 4,
		
		unchanged = 5,
		
		deleted = 6,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
