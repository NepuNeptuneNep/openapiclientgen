//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public class AadOauthTokenRequest
	{
		
		public System.Nullable<System.Boolean> Refresh { get; set; }
		
		public string Resource { get; set; }
		
		public string TenantId { get; set; }
		
		public string Token { get; set; }
	}
	
	public class AadOauthTokenResult
	{
		
		public string AccessToken { get; set; }
		
		public string RefreshTokenCache { get; set; }
	}
	
	public class AgentChangeEvent
	{
		
		/// <summary>
		/// A task agent.
		/// </summary>
		public TaskAgent Agent { get; set; }
		
		public string EventType { get; set; }
		
		public TaskAgentPoolReference Pool { get; set; }
	}
	
	/// <summary>
	/// A task agent.
	/// </summary>
	public class TaskAgent
	{
		
		public TaskAgentCloudRequest AssignedAgentCloudRequest { get; set; }
		
		/// <summary>
		/// A job request for an agent.
		/// </summary>
		public TaskAgentJobRequest AssignedRequest { get; set; }
		
		/// <summary>
		/// Provides data necessary for authorizing the agent using OAuth 2.0 authentication flows.
		/// </summary>
		public TaskAgentAuthorization Authorization { get; set; }
		
		/// <summary>
		/// Date on which this agent was created.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedOn { get; set; }
		
		/// <summary>
		/// A job request for an agent.
		/// </summary>
		public TaskAgentJobRequest LastCompletedRequest { get; set; }
		
		/// <summary>
		/// Maximum job parallelism allowed for this agent.
		/// </summary>
		public System.Nullable<System.Int32> MaxParallelism { get; set; }
		
		/// <summary>
		/// Details about an agent update.
		/// </summary>
		public TaskAgentUpdate PendingUpdate { get; set; }
		
		/// <summary>
		/// The class represents a property bag as a collection of key-value pairs. Values of all primitive types (any type with a `TypeCode != TypeCode.Object`) except for `DBNull` are accepted. Values of type Byte[], Int32, Double, DateType and String preserve their type, other primitives are retuned as a String. Byte[] expected as base64 encoded string.
		/// </summary>
		public PropertiesCollection Properties { get; set; }
		
		/// <summary>
		/// Date on which the last connectivity status change occurred.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StatusChangedOn { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> SystemCapabilities { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> UserCapabilities { get; set; }
	}
	
	public class TaskAgentCloudRequest
	{
		
		/// <summary>
		/// A reference to an agent.
		/// </summary>
		public TaskAgentReference Agent { get; set; }
		
		public System.Nullable<System.Int32> AgentCloudId { get; set; }
		
		public System.Nullable<System.DateTimeOffset> AgentConnectedTime { get; set; }
		
		/// <summary>
		/// Represents a JSON object.
		/// </summary>
		public JObject AgentData { get; set; }
		
		/// <summary>
		/// Represents a JSON object.
		/// </summary>
		public JObject AgentSpecification { get; set; }
		
		public TaskAgentPoolReference Pool { get; set; }
		
		public System.Nullable<System.DateTimeOffset> ProvisionedTime { get; set; }
		
		public System.Nullable<System.DateTimeOffset> ProvisionRequestTime { get; set; }
		
		public System.Nullable<System.DateTimeOffset> ReleaseRequestTime { get; set; }
		
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// A reference to an agent.
	/// </summary>
	public class TaskAgentReference
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// This agent's access point.
		/// </summary>
		public string AccessPoint { get; set; }
		
		/// <summary>
		/// Whether or not this agent should run jobs.
		/// </summary>
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Identifier of the agent.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the agent.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Agent OS.
		/// </summary>
		public string OsDescription { get; set; }
		
		/// <summary>
		/// Provisioning state of this agent.
		/// </summary>
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// Whether or not the agent is online.
		/// </summary>
		public System.Nullable<TaskAgentReferenceStatus> Status { get; set; }
		
		/// <summary>
		/// Agent version.
		/// </summary>
		public string Version { get; set; }
	}
	
	/// <summary>
	/// The class to represent a collection of REST reference links.
	/// </summary>
	public class ReferenceLinks
	{
		
		/// <summary>
		/// The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Links { get; set; }
	}
	
	public enum TaskAgentReferenceStatus
	{
		
		offline = 0,
		
		online = 1,
	}
	
	/// <summary>
	/// Represents a JSON object.
	/// </summary>
	public class JObject
	{
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken Item { get; set; }
		
		/// <summary>
		/// Gets the node type for this JToken.
		/// </summary>
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents an abstract JSON token.
	/// </summary>
	public class JToken
	{
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken First { get; set; }
		
		/// <summary>
		/// Gets a value indicating whether this token has child tokens.
		/// </summary>
		public System.Nullable<System.Boolean> HasValues { get; set; }
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken Item { get; set; }
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken Last { get; set; }
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken Next { get; set; }
		
		/// <summary>
		/// Gets or sets the parent.
		/// </summary>
		public string Parent { get; set; }
		
		/// <summary>
		/// Gets the path of the JSON token.
		/// </summary>
		public string Path { get; set; }
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken Previous { get; set; }
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken Root { get; set; }
		
		/// <summary>
		/// Gets the node type for this JToken.
		/// </summary>
		public string Type { get; set; }
	}
	
	public class TaskAgentPoolReference
	{
		
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Gets or sets a value indicating whether or not this pool is managed by the service.
		/// </summary>
		public System.Nullable<System.Boolean> IsHosted { get; set; }
		
		/// <summary>
		/// Determines whether the pool is legacy.
		/// </summary>
		public System.Nullable<System.Boolean> IsLegacy { get; set; }
		
		public string Name { get; set; }
		
		/// <summary>
		/// Additional pool settings and details
		/// </summary>
		public System.Nullable<TaskAgentPoolReferenceOptions> Options { get; set; }
		
		/// <summary>
		/// Gets or sets the type of the pool
		/// </summary>
		public System.Nullable<TaskAgentPoolReferencePoolType> PoolType { get; set; }
		
		public string Scope { get; set; }
		
		/// <summary>
		/// Gets the current size of the pool.
		/// </summary>
		public System.Nullable<System.Int32> Size { get; set; }
	}
	
	public enum TaskAgentPoolReferenceOptions
	{
		
		none = 0,
		
		elasticPool = 1,
		
		singleUseAgents = 2,
		
		preserveAgentOnJobFailure = 3,
	}
	
	public enum TaskAgentPoolReferencePoolType
	{
		
		automation = 0,
		
		deployment = 1,
	}
	
	/// <summary>
	/// A job request for an agent.
	/// </summary>
	public class TaskAgentJobRequest
	{
		
		public TaskAgentDelaySource[] AgentDelays { get; set; }
		
		/// <summary>
		/// Represents a JSON object.
		/// </summary>
		public JObject AgentSpecification { get; set; }
		
		/// <summary>
		/// The date/time this request was assigned.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> AssignTime { get; set; }
		
		/// <summary>
		/// Additional data about the request.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> Data { get; set; }
		
		public TaskOrchestrationOwner Definition { get; set; }
		
		/// <summary>
		/// A list of demands required to fulfill this request.
		/// </summary>
		public Demand[] Demands { get; set; }
		
		public string ExpectedDuration { get; set; }
		
		/// <summary>
		/// The date/time this request was finished.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> FinishTime { get; set; }
		
		/// <summary>
		/// The host which triggered this request.
		/// </summary>
		public string HostId { get; set; }
		
		/// <summary>
		/// ID of the job resulting from this request.
		/// </summary>
		public string JobId { get; set; }
		
		/// <summary>
		/// Name of the job resulting from this request.
		/// </summary>
		public string JobName { get; set; }
		
		/// <summary>
		/// The deadline for the agent to renew the lock.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LockedUntil { get; set; }
		
		public TaskAgentReference[] MatchedAgents { get; set; }
		
		public System.Nullable<System.Boolean> MatchesAllAgentsInPool { get; set; }
		
		public string OrchestrationId { get; set; }
		
		public TaskOrchestrationOwner Owner { get; set; }
		
		public string PlanGroup { get; set; }
		
		/// <summary>
		/// Internal ID for the orchestration plan connected with this request.
		/// </summary>
		public string PlanId { get; set; }
		
		/// <summary>
		/// Internal detail representing the type of orchestration plan.
		/// </summary>
		public string PlanType { get; set; }
		
		/// <summary>
		/// The ID of the pool this request targets
		/// </summary>
		public System.Nullable<System.Int32> PoolId { get; set; }
		
		/// <summary>
		/// The ID of the queue this request targets
		/// </summary>
		public System.Nullable<System.Int32> QueueId { get; set; }
		
		/// <summary>
		/// The date/time this request was queued.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> QueueTime { get; set; }
		
		/// <summary>
		/// The date/time this request was receieved by an agent.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ReceiveTime { get; set; }
		
		/// <summary>
		/// ID of the request.
		/// </summary>
		public System.Nullable<System.Int64> RequestId { get; set; }
		
		/// <summary>
		/// A reference to an agent.
		/// </summary>
		public TaskAgentReference ReservedAgent { get; set; }
		
		/// <summary>
		/// The result of this request.
		/// </summary>
		public System.Nullable<TaskAgentJobRequestResult> Result { get; set; }
		
		/// <summary>
		/// Scope of the pipeline; matches the project ID.
		/// </summary>
		public string ScopeId { get; set; }
		
		/// <summary>
		/// The service which owns this request.
		/// </summary>
		public string ServiceOwner { get; set; }
		
		public string StatusMessage { get; set; }
		
		public System.Nullable<System.Boolean> UserDelayed { get; set; }
	}
	
	public class TaskAgentDelaySource
	{
		
		public string[] Delays { get; set; }
		
		/// <summary>
		/// A reference to an agent.
		/// </summary>
		public TaskAgentReference TaskAgent { get; set; }
	}
	
	public class TaskOrchestrationOwner
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		public System.Nullable<System.Int32> Id { get; set; }
		
		public string Name { get; set; }
	}
	
	public class Demand
	{
		
		public string Name { get; set; }
		
		public string Value { get; set; }
	}
	
	public enum TaskAgentJobRequestResult
	{
		
		succeeded = 0,
		
		succeededWithIssues = 1,
		
		failed = 2,
		
		canceled = 3,
		
		skipped = 4,
		
		abandoned = 5,
	}
	
	/// <summary>
	/// Provides data necessary for authorizing the agent using OAuth 2.0 authentication flows.
	/// </summary>
	public class TaskAgentAuthorization
	{
		
		/// <summary>
		/// Endpoint used to obtain access tokens from the configured token service.
		/// </summary>
		public string AuthorizationUrl { get; set; }
		
		/// <summary>
		/// Client identifier for this agent.
		/// </summary>
		public string ClientId { get; set; }
		
		/// <summary>
		/// Represents the public key portion of an RSA asymmetric key.
		/// </summary>
		public TaskAgentPublicKey PublicKey { get; set; }
	}
	
	/// <summary>
	/// Represents the public key portion of an RSA asymmetric key.
	/// </summary>
	public class TaskAgentPublicKey
	{
		
		/// <summary>
		/// Gets or sets the exponent for the public key.
		/// </summary>
		public string[] Exponent { get; set; }
		
		/// <summary>
		/// Gets or sets the modulus for the public key.
		/// </summary>
		public string[] Modulus { get; set; }
	}
	
	/// <summary>
	/// Details about an agent update.
	/// </summary>
	public class TaskAgentUpdate
	{
		
		/// <summary>
		/// Current state of this agent update.
		/// </summary>
		public string CurrentState { get; set; }
		
		public TaskAgentUpdateReason Reason { get; set; }
		
		public IdentityRef RequestedBy { get; set; }
		
		/// <summary>
		/// Date on which this update was requested.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> RequestTime { get; set; }
		
		public PackageVersion SourceVersion { get; set; }
		
		public PackageVersion TargetVersion { get; set; }
	}
	
	public class TaskAgentUpdateReason
	{
		
		public System.Nullable<TaskAgentUpdateReasonCode> Code { get; set; }
	}
	
	public enum TaskAgentUpdateReasonCode
	{
		
		manual = 0,
		
		minAgentVersionRequired = 1,
	}
	
	public class IdentityRef
	{
		
		/// <summary>
		/// Deprecated - Can be retrieved by querying the Graph user referenced in the "self" entry of the IdentityRef "_links" dictionary
		/// </summary>
		public string DirectoryAlias { get; set; }
		
		public string Id { get; set; }
		
		/// <summary>
		/// Deprecated - Available in the "avatar" entry of the IdentityRef "_links" dictionary
		/// </summary>
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Deprecated - Can be retrieved by querying the Graph membership state referenced in the "membershipState" entry of the GraphUser "_links" dictionary
		/// </summary>
		public System.Nullable<System.Boolean> Inactive { get; set; }
		
		/// <summary>
		/// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsAadUserType/Descriptor.IsAadGroupType)
		/// </summary>
		public System.Nullable<System.Boolean> IsAadIdentity { get; set; }
		
		/// <summary>
		/// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsGroupType)
		/// </summary>
		public System.Nullable<System.Boolean> IsContainer { get; set; }
		
		public System.Nullable<System.Boolean> IsDeletedInOrigin { get; set; }
		
		/// <summary>
		/// Deprecated - not in use in most preexisting implementations of ToIdentityRef
		/// </summary>
		public string ProfileUrl { get; set; }
		
		/// <summary>
		/// Deprecated - use Domain+PrincipalName instead
		/// </summary>
		public string UniqueName { get; set; }
	}
	
	public class PackageVersion
	{
		
		public System.Nullable<System.Int32> Major { get; set; }
		
		public System.Nullable<System.Int32> Minor { get; set; }
		
		public System.Nullable<System.Int32> Patch { get; set; }
	}
	
	/// <summary>
	/// The class represents a property bag as a collection of key-value pairs. Values of all primitive types (any type with a `TypeCode != TypeCode.Object`) except for `DBNull` are accepted. Values of type Byte[], Int32, Double, DateType and String preserve their type, other primitives are retuned as a String. Byte[] expected as base64 encoded string.
	/// </summary>
	public class PropertiesCollection
	{
		
		/// <summary>
		/// The count of properties in the collection.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		public string Item { get; set; }
		
		/// <summary>
		/// The set of keys in the collection.
		/// </summary>
		public string[] Keys { get; set; }
		
		/// <summary>
		/// The set of values in the collection.
		/// </summary>
		public string[] Values { get; set; }
	}
	
	public class AgentJobRequestMessage
	{
		
		public System.Nullable<System.DateTimeOffset> LockedUntil { get; set; }
		
		public string LockToken { get; set; }
		
		public System.Nullable<System.Int64> RequestId { get; set; }
		
		public TaskInstance[] Tasks { get; set; }
	}
	
	public class TaskInstance
	{
		
		public System.Nullable<System.Boolean> AlwaysRun { get; set; }
		
		public string Condition { get; set; }
		
		public System.Nullable<System.Boolean> ContinueOnError { get; set; }
		
		public string DisplayName { get; set; }
		
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> Environment { get; set; }
		
		public string InstanceId { get; set; }
		
		public string RefName { get; set; }
		
		public System.Nullable<System.Int32> TimeoutInMinutes { get; set; }
	}
	
	public class AgentMigrationMessage
	{
		
		public string AccessToken { get; set; }
	}
	
	public class AgentPoolEvent
	{
		
		public string EventType { get; set; }
		
		/// <summary>
		/// An organization-level grouping of agents.
		/// </summary>
		public TaskAgentPool Pool { get; set; }
	}
	
	/// <summary>
	/// An organization-level grouping of agents.
	/// </summary>
	public class TaskAgentPool
	{
		
		/// <summary>
		/// The ID of the associated agent cloud.
		/// </summary>
		public System.Nullable<System.Int32> AgentCloudId { get; set; }
		
		/// <summary>
		/// Whether or not a queue should be automatically provisioned for each project collection.
		/// </summary>
		public System.Nullable<System.Boolean> AutoProvision { get; set; }
		
		/// <summary>
		/// Whether or not the pool should autosize itself based on the Agent Cloud Provider settings.
		/// </summary>
		public System.Nullable<System.Boolean> AutoSize { get; set; }
		
		/// <summary>
		/// Whether or not agents in this pool are allowed to automatically update
		/// </summary>
		public System.Nullable<System.Boolean> AutoUpdate { get; set; }
		
		public IdentityRef CreatedBy { get; set; }
		
		/// <summary>
		/// The date/time of the pool creation.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedOn { get; set; }
		
		public IdentityRef Owner { get; set; }
		
		/// <summary>
		/// The class represents a property bag as a collection of key-value pairs. Values of all primitive types (any type with a `TypeCode != TypeCode.Object`) except for `DBNull` are accepted. Values of type Byte[], Int32, Double, DateType and String preserve their type, other primitives are retuned as a String. Byte[] expected as base64 encoded string.
		/// </summary>
		public PropertiesCollection Properties { get; set; }
		
		/// <summary>
		/// Target parallelism.
		/// </summary>
		public System.Nullable<System.Int32> TargetSize { get; set; }
	}
	
	public class AgentQueueEvent
	{
		
		public string EventType { get; set; }
		
		/// <summary>
		/// An agent queue.
		/// </summary>
		public TaskAgentQueue Queue { get; set; }
	}
	
	/// <summary>
	/// An agent queue.
	/// </summary>
	public class TaskAgentQueue
	{
		
		/// <summary>
		/// ID of the queue
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the queue
		/// </summary>
		public string Name { get; set; }
		
		public TaskAgentPoolReference Pool { get; set; }
		
		/// <summary>
		/// Project ID
		/// </summary>
		public string ProjectId { get; set; }
	}
	
	public class AgentQueuesEvent
	{
		
		public string EventType { get; set; }
		
		public TaskAgentQueue[] Queues { get; set; }
	}
	
	public class AgentRefreshMessage
	{
		
		public System.Nullable<System.Int32> AgentId { get; set; }
		
		public string TargetVersion { get; set; }
		
		public string Timeout { get; set; }
	}
	
	public class AuthenticationSchemeReference
	{
		
		public System.Collections.Generic.Dictionary<string, string> Inputs { get; set; }
		
		public string Type { get; set; }
	}
	
	public class AuthorizationHeader
	{
		
		/// <summary>
		/// Gets or sets the name of authorization header.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Gets or sets the value of authorization header.
		/// </summary>
		public string Value { get; set; }
	}
	
	public class AzureKeyVaultPermission
	{
		
		public string Vault { get; set; }
	}
	
	public class AzureKeyVaultVariableGroupProviderData
	{
		
		public System.Nullable<System.DateTimeOffset> LastRefreshedOn { get; set; }
		
		public string ServiceEndpointId { get; set; }
		
		public string Vault { get; set; }
	}
	
	public class AzureKeyVaultVariableValue
	{
		
		public string ContentType { get; set; }
		
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		public System.Nullable<System.DateTimeOffset> Expires { get; set; }
	}
	
	/// <summary>
	/// Azure Management Group
	/// </summary>
	public class AzureManagementGroup
	{
		
		/// <summary>
		/// Display name of azure management group
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Id of azure management group
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Azure management group name
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Id of tenant from which azure management group belongs
		/// </summary>
		public string TenantId { get; set; }
	}
	
	/// <summary>
	/// Azure management group query result
	/// </summary>
	public class AzureManagementGroupQueryResult
	{
		
		/// <summary>
		/// Error message in case of an exception
		/// </summary>
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// List of azure management groups
		/// </summary>
		public AzureManagementGroup[] Value { get; set; }
	}
	
	public class AzurePermission
	{
		
		public System.Nullable<System.Boolean> Provisioned { get; set; }
		
		public string ResourceProvider { get; set; }
	}
	
	public class AzureResourcePermission
	{
		
		public string ResourceGroup { get; set; }
	}
	
	public class AzureRoleAssignmentPermission
	{
		
		public string RoleAssignmentId { get; set; }
	}
	
	public class AzureSpnOperationStatus
	{
		
		public string State { get; set; }
		
		public string StatusMessage { get; set; }
	}
	
	public class AzureSubscription
	{
		
		public string DisplayName { get; set; }
		
		public string SubscriptionId { get; set; }
		
		public string SubscriptionTenantId { get; set; }
		
		public string SubscriptionTenantName { get; set; }
	}
	
	public class AzureSubscriptionQueryResult
	{
		
		public string ErrorMessage { get; set; }
		
		public AzureSubscription[] Value { get; set; }
	}
	
	public class ClientCertificate
	{
		
		/// <summary>
		/// Gets or sets the value of client certificate.
		/// </summary>
		public string Value { get; set; }
	}
	
	public class CounterVariable
	{
		
		public string Prefix { get; set; }
		
		public System.Nullable<System.Int32> Seed { get; set; }
		
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class DataSource
	{
		
		public AuthenticationSchemeReference AuthenticationScheme { get; set; }
		
		public string EndpointUrl { get; set; }
		
		public AuthorizationHeader[] Headers { get; set; }
		
		public string Name { get; set; }
		
		public string ResourceUrl { get; set; }
		
		public string ResultSelector { get; set; }
	}
	
	public class DataSourceBinding
	{
	}
	
	/// <summary>
	/// Represents binding of data source for the service endpoint request.
	/// </summary>
	public class DataSourceBindingBase
	{
		
		/// <summary>
		/// Pagination format supported by this data source(ContinuationToken/SkipTop).
		/// </summary>
		public string CallbackContextTemplate { get; set; }
		
		/// <summary>
		/// Subsequent calls needed?
		/// </summary>
		public string CallbackRequiredTemplate { get; set; }
		
		/// <summary>
		/// Gets or sets the name of the data source.
		/// </summary>
		public string DataSourceName { get; set; }
		
		/// <summary>
		/// Gets or sets the endpoint Id.
		/// </summary>
		public string EndpointId { get; set; }
		
		/// <summary>
		/// Gets or sets the url of the service endpoint.
		/// </summary>
		public string EndpointUrl { get; set; }
		
		/// <summary>
		/// Gets or sets the authorization headers.
		/// </summary>
		public AuthorizationHeader[] Headers { get; set; }
		
		/// <summary>
		/// Defines the initial value of the query params
		/// </summary>
		public string InitialContextTemplate { get; set; }
		
		/// <summary>
		/// Gets or sets the parameters for the data source.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }
		
		/// <summary>
		/// Gets or sets http request body
		/// </summary>
		public string RequestContent { get; set; }
		
		/// <summary>
		/// Gets or sets http request verb
		/// </summary>
		public string RequestVerb { get; set; }
		
		/// <summary>
		/// Gets or sets the result selector.
		/// </summary>
		public string ResultSelector { get; set; }
		
		/// <summary>
		/// Gets or sets the result template.
		/// </summary>
		public string ResultTemplate { get; set; }
		
		/// <summary>
		/// Gets or sets the target of the data source.
		/// </summary>
		public string Target { get; set; }
	}
	
	public class DataSourceDetails
	{
		
		public string DataSourceName { get; set; }
		
		public string DataSourceUrl { get; set; }
		
		public AuthorizationHeader[] Headers { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }
		
		public string ResourceUrl { get; set; }
		
		public string ResultSelector { get; set; }
	}
	
	public class DemandEquals
	{
	}
	
	public class DemandExists
	{
	}
	
	public class DemandMinimumVersion
	{
		
		public DemandSource Source { get; set; }
	}
	
	public class DemandSource
	{
		
		public string SourceName { get; set; }
		
		public System.Nullable<DemandSourceSourceType> SourceType { get; set; }
		
		public string SourceVersion { get; set; }
	}
	
	public enum DemandSourceSourceType
	{
		
		task = 0,
		
		feature = 1,
	}
	
	public class DependencyBinding
	{
		
		public string Key { get; set; }
		
		public string Value { get; set; }
	}
	
	public class DependencyData
	{
		
		public string Input { get; set; }
		
		public string[] Map { get; set; }
	}
	
	public class DependsOn
	{
		
		public string Input { get; set; }
		
		public DependencyBinding[] Map { get; set; }
	}
	
	public class DeploymentGatesChangeEvent
	{
		
		public string[] GateNames { get; set; }
	}
	
	/// <summary>
	/// Deployment group.
	/// </summary>
	public class DeploymentGroup
	{
		
		/// <summary>
		/// Description of the deployment group.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Number of deployment targets in the deployment group.
		/// </summary>
		public System.Nullable<System.Int32> MachineCount { get; set; }
		
		/// <summary>
		/// List of deployment targets in the deployment group.
		/// </summary>
		public DeploymentMachine[] Machines { get; set; }
		
		/// <summary>
		/// List of unique tags across all deployment targets in the deployment group.
		/// </summary>
		public string[] MachineTags { get; set; }
	}
	
	/// <summary>
	/// Deployment target.
	/// </summary>
	public class DeploymentMachine
	{
		
		/// <summary>
		/// A task agent.
		/// </summary>
		public TaskAgent Agent { get; set; }
		
		/// <summary>
		/// Deployment target Identifier.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The class represents a property bag as a collection of key-value pairs. Values of all primitive types (any type with a `TypeCode != TypeCode.Object`) except for `DBNull` are accepted. Values of type Byte[], Int32, Double, DateType and String preserve their type, other primitives are retuned as a String. Byte[] expected as base64 encoded string.
		/// </summary>
		public PropertiesCollection Properties { get; set; }
		
		/// <summary>
		/// Tags of the deployment target.
		/// </summary>
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// Properties to create Deployment group.
	/// </summary>
	public class DeploymentGroupCreateParameter
	{
		
		/// <summary>
		/// Description of the deployment group.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Name of the deployment group.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Identifier of the deployment pool in which deployment agents are registered.
		/// </summary>
		public System.Nullable<System.Int32> PoolId { get; set; }
	}
	
	/// <summary>
	/// Properties of Deployment pool to create Deployment group.
	/// </summary>
	public class DeploymentGroupCreateParameterPoolProperty
	{
		
		/// <summary>
		/// Deployment pool identifier.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
	}
	
	/// <summary>
	/// Deployment group metrics.
	/// </summary>
	public class DeploymentGroupMetrics
	{
		
		/// <summary>
		/// Metrics columns header
		/// </summary>
		public MetricsColumnsHeader ColumnsHeader { get; set; }
		
		/// <summary>
		/// Deployment group reference. This is useful for referring a deployment group in another object.
		/// </summary>
		public DeploymentGroupReference DeploymentGroup { get; set; }
		
		/// <summary>
		/// Values of properties and the metrics. E.g. 1: total count of deployment targets for which 'TargetState' is 'offline'. E.g. 2: Average time of deployment to the deployment targets for which 'LastJobStatus' is 'passed' and 'TargetState' is 'online'.
		/// </summary>
		public MetricsRow[] Rows { get; set; }
	}
	
	/// <summary>
	/// Metrics columns header
	/// </summary>
	public class MetricsColumnsHeader
	{
		
		/// <summary>
		/// Properties of deployment group for which metrics are provided. E.g. 1: LastJobStatus E.g. 2: TargetState
		/// </summary>
		public MetricsColumnMetaData[] Dimensions { get; set; }
		
		/// <summary>
		/// The types of metrics. E.g. 1: total count of deployment targets. E.g. 2: Average time of deployment to the deployment targets.
		/// </summary>
		public MetricsColumnMetaData[] Metrics { get; set; }
	}
	
	/// <summary>
	/// Meta data for a metrics column.
	/// </summary>
	public class MetricsColumnMetaData
	{
		
		/// <summary>
		/// Name.
		/// </summary>
		public string ColumnName { get; set; }
		
		/// <summary>
		/// Data type.
		/// </summary>
		public string ColumnValueType { get; set; }
	}
	
	/// <summary>
	/// Deployment group reference. This is useful for referring a deployment group in another object.
	/// </summary>
	public class DeploymentGroupReference
	{
		
		/// <summary>
		/// Deployment group identifier.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the deployment group.
		/// </summary>
		public string Name { get; set; }
		
		public TaskAgentPoolReference Pool { get; set; }
		
		public ProjectReference Project { get; set; }
	}
	
	public class ProjectReference
	{
		
		public string Id { get; set; }
		
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Metrics row.
	/// </summary>
	public class MetricsRow
	{
		
		/// <summary>
		/// The values of the properties mentioned as 'Dimensions' in column header. E.g. 1: For a property 'LastJobStatus' - metrics will be provided for 'passed', 'failed', etc. E.g. 2: For a property 'TargetState' - metrics will be provided for 'online', 'offline' targets.
		/// </summary>
		public string[] Dimensions { get; set; }
		
		/// <summary>
		/// Metrics in serialized format. Should be deserialized based on the data type provided in header.
		/// </summary>
		public string[] Metrics { get; set; }
	}
	
	/// <summary>
	/// Deployment group update parameter.
	/// </summary>
	public class DeploymentGroupUpdateParameter
	{
		
		/// <summary>
		/// Description of the deployment group.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Name of the deployment group.
		/// </summary>
		public string Name { get; set; }
	}
	
	public class DeploymentMachineChangedData
	{
		
		public string[] AddedTags { get; set; }
		
		public string[] DeletedTags { get; set; }
	}
	
	public class DeploymentMachineGroup
	{
		
		public DeploymentMachine[] Machines { get; set; }
		
		public System.Nullable<System.Int32> Size { get; set; }
	}
	
	public class DeploymentMachineGroupReference
	{
		
		public System.Nullable<System.Int32> Id { get; set; }
		
		public string Name { get; set; }
		
		public TaskAgentPoolReference Pool { get; set; }
		
		public ProjectReference Project { get; set; }
	}
	
	public class DeploymentMachinesChangeEvent
	{
		
		/// <summary>
		/// Deployment group reference. This is useful for referring a deployment group in another object.
		/// </summary>
		public DeploymentGroupReference MachineGroupReference { get; set; }
		
		public DeploymentMachineChangedData[] Machines { get; set; }
	}
	
	/// <summary>
	/// Deployment pool summary.
	/// </summary>
	public class DeploymentPoolSummary
	{
		
		/// <summary>
		/// List of deployment groups referring to the deployment pool.
		/// </summary>
		public DeploymentGroupReference[] DeploymentGroups { get; set; }
		
		/// <summary>
		/// Number of deployment agents that are offline.
		/// </summary>
		public System.Nullable<System.Int32> OfflineAgentsCount { get; set; }
		
		/// <summary>
		/// Number of deployment agents that are online.
		/// </summary>
		public System.Nullable<System.Int32> OnlineAgentsCount { get; set; }
		
		public TaskAgentPoolReference Pool { get; set; }
		
		/// <summary>
		/// EnvironmentResourceReference.
		/// </summary>
		public EnvironmentResourceReference Resource { get; set; }
	}
	
	/// <summary>
	/// EnvironmentResourceReference.
	/// </summary>
	public class EnvironmentResourceReference
	{
		
		/// <summary>
		/// Id of the resource.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the resource.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Tags of the Environment Resource Reference.
		/// </summary>
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Type of the resource.
		/// </summary>
		public System.Nullable<EnvironmentResourceReferenceType> Type { get; set; }
	}
	
	public enum EnvironmentResourceReferenceType
	{
		
		undefined = 0,
		
		generic = 1,
		
		virtualMachine = 2,
		
		kubernetes = 3,
	}
	
	/// <summary>
	/// Deployment target update parameter.
	/// </summary>
	public class DeploymentTargetUpdateParameter
	{
		
		/// <summary>
		/// Identifier of the deployment target.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		public string[] Tags { get; set; }
	}
	
	public class DiagnosticLogMetadata
	{
		
		public System.Nullable<System.Int32> AgentId { get; set; }
		
		public string AgentName { get; set; }
		
		public string FileName { get; set; }
		
		public string PhaseName { get; set; }
		
		public string PhaseResult { get; set; }
		
		public System.Nullable<System.Int32> PoolId { get; set; }
	}
	
	/// <summary>
	/// Data and settings for an elastic pool
	/// </summary>
	public class ElasticPool
	{
		
		/// <summary>
		/// Azure string representing to location of the resource
		/// </summary>
		public string AzureId { get; set; }
		
		/// <summary>
		/// Number of machines to have ready waiting for jobs
		/// </summary>
		public System.Nullable<System.Int32> DesiredIdle { get; set; }
		
		/// <summary>
		/// Maximum number of machines that will exist in the elastic pool
		/// </summary>
		public System.Nullable<System.Int32> MaxCapacity { get; set; }
		
		/// <summary>
		/// Operating system type of the machines in the pool
		/// </summary>
		public System.Nullable<ElasticPoolOsType> OsType { get; set; }
		
		/// <summary>
		/// Id of the associated TaskAgentPool
		/// </summary>
		public System.Nullable<System.Int32> PoolId { get; set; }
		
		/// <summary>
		/// Keep machines in the pool on failure for investigation
		/// </summary>
		public System.Nullable<System.Boolean> PreserveFailures { get; set; }
		
		/// <summary>
		/// Discard machines after each job completes
		/// </summary>
		public System.Nullable<System.Boolean> RecycleAfterEachUse { get; set; }
		
		/// <summary>
		/// Id of the Service Endpoint used to connect to Azure
		/// </summary>
		public string ServiceEndpointId { get; set; }
		
		/// <summary>
		/// Scope the Service Endpoint belongs to
		/// </summary>
		public string ServiceEndpointScope { get; set; }
	}
	
	public enum ElasticPoolOsType
	{
		
		windows = 0,
		
		linux = 1,
	}
	
	public class EndpointAuthorization
	{
		
		/// <summary>
		/// Gets or sets the parameters for the selected authorization scheme.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }
		
		/// <summary>
		/// Gets or sets the scheme used for service endpoint authentication.
		/// </summary>
		public string Scheme { get; set; }
	}
	
	/// <summary>
	/// Represents url of the service endpoint.
	/// </summary>
	public class EndpointUrl
	{
		
		public DependsOn DependsOn { get; set; }
		
		/// <summary>
		/// Gets or sets the display name of service endpoint url.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Gets or sets the help text of service endpoint url.
		/// </summary>
		public string HelpText { get; set; }
		
		/// <summary>
		/// Gets or sets the visibility of service endpoint url.
		/// </summary>
		public string IsVisible { get; set; }
		
		/// <summary>
		/// Gets or sets the value of service endpoint url.
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Properties to create Environment.
	/// </summary>
	public class EnvironmentCreateParameter
	{
		
		/// <summary>
		/// Description of the environment.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Name of the environment.
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// EnvironmentDeploymentExecutionRecord.
	/// </summary>
	public class EnvironmentDeploymentExecutionRecord
	{
		
		public TaskOrchestrationOwner Definition { get; set; }
		
		/// <summary>
		/// Id of the Environment
		/// </summary>
		public System.Nullable<System.Int32> EnvironmentId { get; set; }
		
		/// <summary>
		/// Finish time of the environment deployment execution
		/// </summary>
		public System.Nullable<System.DateTimeOffset> FinishTime { get; set; }
		
		/// <summary>
		/// Id of the Environment deployment execution history record
		/// </summary>
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Job Attempt
		/// </summary>
		public System.Nullable<System.Int32> JobAttempt { get; set; }
		
		/// <summary>
		/// Job name
		/// </summary>
		public string JobName { get; set; }
		
		public TaskOrchestrationOwner Owner { get; set; }
		
		/// <summary>
		/// Plan Id
		/// </summary>
		public string PlanId { get; set; }
		
		/// <summary>
		/// Plan type of the environment deployment execution record
		/// </summary>
		public string PlanType { get; set; }
		
		/// <summary>
		/// Queue time of the environment deployment execution
		/// </summary>
		public System.Nullable<System.DateTimeOffset> QueueTime { get; set; }
		
		/// <summary>
		/// Request identifier of the Environment deployment execution history record
		/// </summary>
		public string RequestIdentifier { get; set; }
		
		/// <summary>
		/// Resource Id
		/// </summary>
		public System.Nullable<System.Int32> ResourceId { get; set; }
		
		/// <summary>
		/// Result of the environment deployment execution
		/// </summary>
		public System.Nullable<EnvironmentDeploymentExecutionRecordResult> Result { get; set; }
		
		/// <summary>
		/// Project Id
		/// </summary>
		public string ScopeId { get; set; }
		
		/// <summary>
		/// Service owner Id
		/// </summary>
		public string ServiceOwner { get; set; }
		
		/// <summary>
		/// Stage Attempt
		/// </summary>
		public System.Nullable<System.Int32> StageAttempt { get; set; }
		
		/// <summary>
		/// Stage name
		/// </summary>
		public string StageName { get; set; }
		
		/// <summary>
		/// Start time of the environment deployment execution
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	public enum EnvironmentDeploymentExecutionRecordResult
	{
		
		succeeded = 0,
		
		succeededWithIssues = 1,
		
		failed = 2,
		
		canceled = 3,
		
		skipped = 4,
		
		abandoned = 5,
	}
	
	/// <summary>
	/// Environment.
	/// </summary>
	public class EnvironmentInstance
	{
		
		public IdentityRef CreatedBy { get; set; }
		
		/// <summary>
		/// Creation time of the Environment
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedOn { get; set; }
		
		/// <summary>
		/// Description of the Environment.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Id of the Environment
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		public IdentityRef LastModifiedBy { get; set; }
		
		/// <summary>
		/// Last modified time of the Environment
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastModifiedOn { get; set; }
		
		/// <summary>
		/// Name of the Environment.
		/// </summary>
		public string Name { get; set; }
		
		public ProjectReference Project { get; set; }
		
		public EnvironmentResourceReference[] Resources { get; set; }
	}
	
	/// <summary>
	/// EnvironmentLinkedResourceReference.
	/// </summary>
	public class EnvironmentLinkedResourceReference
	{
		
		/// <summary>
		/// Id of the resource.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Type of resource.
		/// </summary>
		public string TypeName { get; set; }
	}
	
	public class EnvironmentReference
	{
		
		public System.Nullable<System.Int32> Id { get; set; }
		
		public string Name { get; set; }
	}
	
	public class EnvironmentResource
	{
		
		public IdentityRef CreatedBy { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CreatedOn { get; set; }
		
		public EnvironmentReference EnvironmentReference { get; set; }
		
		public System.Nullable<System.Int32> Id { get; set; }
		
		public IdentityRef LastModifiedBy { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastModifiedOn { get; set; }
		
		public string Name { get; set; }
		
		/// <summary>
		/// Tags of the Environment Resource.
		/// </summary>
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Environment resource type
		/// </summary>
		public System.Nullable<EnvironmentResourceType> Type { get; set; }
	}
	
	public enum EnvironmentResourceType
	{
		
		undefined = 0,
		
		generic = 1,
		
		virtualMachine = 2,
		
		kubernetes = 3,
	}
	
	/// <summary>
	/// EnvironmentResourceDeploymentExecutionRecord.
	/// </summary>
	public class EnvironmentResourceDeploymentExecutionRecord
	{
		
		/// <summary>
		/// Id of the Environment
		/// </summary>
		public System.Nullable<System.Int32> EnvironmentId { get; set; }
		
		/// <summary>
		/// Finish time of the environment resource deployment execution
		/// </summary>
		public System.Nullable<System.DateTimeOffset> FinishTime { get; set; }
		
		/// <summary>
		/// Id of the Environment deployment execution history record
		/// </summary>
		public System.Nullable<System.Int64> RequestId { get; set; }
		
		/// <summary>
		/// Resource Id
		/// </summary>
		public System.Nullable<System.Int32> ResourceId { get; set; }
		
		/// <summary>
		/// Result of the environment deployment execution
		/// </summary>
		public System.Nullable<EnvironmentResourceDeploymentExecutionRecordResult> Result { get; set; }
		
		/// <summary>
		/// Start time of the environment resource deployment execution
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	public enum EnvironmentResourceDeploymentExecutionRecordResult
	{
		
		succeeded = 0,
		
		succeededWithIssues = 1,
		
		failed = 2,
		
		canceled = 3,
		
		skipped = 4,
		
		abandoned = 5,
	}
	
	/// <summary>
	/// Properties to update Environment.
	/// </summary>
	public class EnvironmentUpdateParameter
	{
		
		/// <summary>
		/// Description of the environment.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Name of the environment.
		/// </summary>
		public string Name { get; set; }
	}
	
	public class EventsConfig
	{
	}
	
	public class ExpressionValidationItem
	{
	}
	
	public class GraphSubjectBase
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
		/// </summary>
		public string Descriptor { get; set; }
		
		/// <summary>
		/// This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// This url is the full route to the source resource of this graph subject.
		/// </summary>
		public string Url { get; set; }
	}
	
	public class HelpLink
	{
		
		public string Text { get; set; }
		
		public string Url { get; set; }
	}
	
	public class InputBindingContext
	{
		
		/// <summary>
		/// Value of the input
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Describes an input for subscriptions.
	/// </summary>
	public class InputDescriptor
	{
		
		/// <summary>
		/// The ids of all inputs that the value of this input is dependent on.
		/// </summary>
		public string[] DependencyInputIds { get; set; }
		
		/// <summary>
		/// Description of what this input is used for
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// The group localized name to which this input belongs and can be shown as a header for the container that will include all the inputs in the group.
		/// </summary>
		public string GroupName { get; set; }
		
		/// <summary>
		/// If true, the value information for this input is dynamic and should be fetched when the value of dependency inputs change.
		/// </summary>
		public System.Nullable<System.Boolean> HasDynamicValueInformation { get; set; }
		
		/// <summary>
		/// Identifier for the subscription input
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Mode in which the value of this input should be entered
		/// </summary>
		public System.Nullable<InputDescriptorInputMode> InputMode { get; set; }
		
		/// <summary>
		/// Gets whether this input is confidential, such as for a password or application key
		/// </summary>
		public System.Nullable<System.Boolean> IsConfidential { get; set; }
		
		/// <summary>
		/// Localized name which can be shown as a label for the subscription input
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Custom properties for the input which can be used by the service provider
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Properties { get; set; }
		
		/// <summary>
		/// Underlying data type for the input value. When this value is specified, InputMode, Validation and Values are optional.
		/// </summary>
		public string Type { get; set; }
		
		/// <summary>
		/// Gets whether this input is included in the default generated action description.
		/// </summary>
		public System.Nullable<System.Boolean> UseInDefaultDescription { get; set; }
		
		/// <summary>
		/// Describes what values are valid for a subscription input
		/// </summary>
		public InputValidation Validation { get; set; }
		
		/// <summary>
		/// A hint for input value. It can be used in the UI as the input placeholder.
		/// </summary>
		public string ValueHint { get; set; }
		
		/// <summary>
		/// Information about the possible/allowed values for a given subscription input
		/// </summary>
		public InputValues Values { get; set; }
	}
	
	public enum InputDescriptorInputMode
	{
		
		none = 0,
		
		textBox = 1,
		
		passwordBox = 2,
		
		combo = 3,
		
		radioButtons = 4,
		
		checkBox = 5,
		
		textArea = 6,
	}
	
	/// <summary>
	/// Describes what values are valid for a subscription input
	/// </summary>
	public class InputValidation
	{
		
		/// <summary>
		/// Gets or sets the data data type to validate.
		/// </summary>
		public System.Nullable<InputValidationDataType> DataType { get; set; }
		
		/// <summary>
		/// Gets or sets if this is a required field.
		/// </summary>
		public System.Nullable<System.Boolean> IsRequired { get; set; }
		
		/// <summary>
		/// Gets or sets the maximum length of this descriptor.
		/// </summary>
		public System.Nullable<System.Int32> MaxLength { get; set; }
		
		/// <summary>
		/// Gets or sets the minimum value for this descriptor.
		/// </summary>
		public string MaxValue { get; set; }
		
		/// <summary>
		/// Gets or sets the minimum length of this descriptor.
		/// </summary>
		public System.Nullable<System.Int32> MinLength { get; set; }
		
		/// <summary>
		/// Gets or sets the minimum value for this descriptor.
		/// </summary>
		public string MinValue { get; set; }
		
		/// <summary>
		/// Gets or sets the pattern to validate.
		/// </summary>
		public string Pattern { get; set; }
		
		/// <summary>
		/// Gets or sets the error on pattern mismatch.
		/// </summary>
		public string PatternMismatchErrorMessage { get; set; }
	}
	
	public enum InputValidationDataType
	{
		
		none = 0,
		
		_string = 1,
		
		number = 2,
		
		boolean = 3,
		
		guid = 4,
		
		uri = 5,
	}
	
	/// <summary>
	/// Information about the possible/allowed values for a given subscription input
	/// </summary>
	public class InputValues
	{
		
		/// <summary>
		/// The default value to use for this input
		/// </summary>
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Error information related to a subscription input value.
		/// </summary>
		public InputValuesError Error { get; set; }
		
		/// <summary>
		/// The id of the input
		/// </summary>
		public string InputId { get; set; }
		
		/// <summary>
		/// Should this input be disabled
		/// </summary>
		public System.Nullable<System.Boolean> IsDisabled { get; set; }
		
		/// <summary>
		/// Should the value be restricted to one of the values in the PossibleValues (True) or are the values in PossibleValues just a suggestion (False)
		/// </summary>
		public System.Nullable<System.Boolean> IsLimitedToPossibleValues { get; set; }
		
		/// <summary>
		/// Should this input be made read-only
		/// </summary>
		public System.Nullable<System.Boolean> IsReadOnly { get; set; }
		
		/// <summary>
		/// Possible values that this input can take
		/// </summary>
		public InputValue[] PossibleValues { get; set; }
	}
	
	/// <summary>
	/// Error information related to a subscription input value.
	/// </summary>
	public class InputValuesError
	{
		
		/// <summary>
		/// The error message.
		/// </summary>
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Information about a single value for an input
	/// </summary>
	public class InputValue
	{
		
		/// <summary>
		/// Any other data about this input
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Data { get; set; }
		
		/// <summary>
		/// The text to show for the display of this value
		/// </summary>
		public string DisplayValue { get; set; }
		
		/// <summary>
		/// The value to store for this input
		/// </summary>
		public string Value { get; set; }
	}
	
	public class InputValidationItem
	{
		
		public InputBindingContext Context { get; set; }
	}
	
	public class InputValidationRequest
	{
		
		public System.Collections.Generic.Dictionary<string, ValidationItem> Inputs { get; set; }
	}
	
	public class ValidationItem
	{
		
		/// <summary>
		/// Tells whether the current input is valid or not
		/// </summary>
		public System.Nullable<System.Boolean> IsValid { get; set; }
		
		/// <summary>
		/// Reason for input validation failure
		/// </summary>
		public string Reason { get; set; }
		
		/// <summary>
		/// Type of validation item
		/// </summary>
		public string Type { get; set; }
		
		/// <summary>
		/// Value to validate. The conditional expression to validate for the input for "expression" type Eg:eq(variables['Build.SourceBranch'], 'refs/heads/master');eq(value, 'refs/heads/master')
		/// </summary>
		public string Value { get; set; }
	}
	
	public class Issue
	{
		
		public string Category { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> Data { get; set; }
		
		public string Message { get; set; }
		
		public System.Nullable<IssueType> Type { get; set; }
	}
	
	public enum IssueType
	{
		
		error = 0,
		
		warning = 1,
	}
	
	public class JobAssignedEvent
	{
		
		/// <summary>
		/// A job request for an agent.
		/// </summary>
		public TaskAgentJobRequest Request { get; set; }
	}
	
	public class JobCancelMessage
	{
		
		public string JobId { get; set; }
		
		public string Timeout { get; set; }
	}
	
	public class JobCompletedEvent
	{
		
		public System.Nullable<System.Boolean> AgentShuttingDown { get; set; }
		
		public System.Nullable<System.Int64> RequestId { get; set; }
		
		public System.Nullable<JobCompletedEventResult> Result { get; set; }
	}
	
	public enum JobCompletedEventResult
	{
		
		succeeded = 0,
		
		succeededWithIssues = 1,
		
		failed = 2,
		
		canceled = 3,
		
		skipped = 4,
		
		abandoned = 5,
	}
	
	/// <summary>
	/// Represents the context of variables and vectors for a job request.
	/// </summary>
	public class JobEnvironment
	{
		
		public ServiceEndpoint[] Endpoints { get; set; }
		
		public MaskHint[] Mask { get; set; }
		
		public System.Collections.Generic.Dictionary<string, JobOption> Options { get; set; }
		
		public SecureFile[] SecureFiles { get; set; }
		
		/// <summary>
		/// Represents an endpoint which may be used by an orchestration job.
		/// </summary>
		public ServiceEndpoint SystemConnection { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> Variables { get; set; }
	}
	
	/// <summary>
	/// Represents an endpoint which may be used by an orchestration job.
	/// </summary>
	public class ServiceEndpoint
	{
		
		public IdentityRef AdministratorsGroup { get; set; }
		
		public EndpointAuthorization Authorization { get; set; }
		
		public IdentityRef CreatedBy { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> Data { get; set; }
		
		/// <summary>
		/// Gets or sets the description of endpoint.
		/// </summary>
		public string Description { get; set; }
		
		public string GroupScopeId { get; set; }
		
		/// <summary>
		/// Gets or sets the identifier of this endpoint.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// EndPoint state indicator
		/// </summary>
		public System.Nullable<System.Boolean> IsReady { get; set; }
		
		/// <summary>
		/// Indicates whether service endpoint is shared with other projects or not.
		/// </summary>
		public System.Nullable<System.Boolean> IsShared { get; set; }
		
		/// <summary>
		/// Gets or sets the friendly name of the endpoint.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Represents a JSON object.
		/// </summary>
		public JObject OperationStatus { get; set; }
		
		/// <summary>
		/// Gets or sets the owner of the endpoint.
		/// </summary>
		public string Owner { get; set; }
		
		public IdentityRef ReadersGroup { get; set; }
		
		/// <summary>
		/// Gets or sets the type of the endpoint.
		/// </summary>
		public string Type { get; set; }
		
		/// <summary>
		/// Gets or sets the url of the endpoint.
		/// </summary>
		public string Url { get; set; }
	}
	
	public class MaskHint
	{
		
		public System.Nullable<MaskHintType> Type { get; set; }
		
		public string Value { get; set; }
	}
	
	public enum MaskHintType
	{
		
		variable = 0,
		
		regex = 1,
	}
	
	/// <summary>
	/// Represents an option that may affect the way an agent runs the job.
	/// </summary>
	public class JobOption
	{
		
		public System.Collections.Generic.Dictionary<string, string> Data { get; set; }
		
		/// <summary>
		/// Gets the id of the option.
		/// </summary>
		public string Id { get; set; }
	}
	
	public class SecureFile
	{
		
		public IdentityRef CreatedBy { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CreatedOn { get; set; }
		
		public string Id { get; set; }
		
		public IdentityRef ModifiedBy { get; set; }
		
		public System.Nullable<System.DateTimeOffset> ModifiedOn { get; set; }
		
		public string Name { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		public string Ticket { get; set; }
	}
	
	public class JobEvent
	{
		
		public string JobId { get; set; }
		
		public string Name { get; set; }
	}
	
	public class JobEventConfig
	{
		
		public string Timeout { get; set; }
	}
	
	public class JobEventsConfig
	{
		
		public JobEventConfig JobAssigned { get; set; }
		
		public JobEventConfig JobCompleted { get; set; }
		
		public JobEventConfig JobStarted { get; set; }
	}
	
	public class JobRequestMessage
	{
		
		/// <summary>
		/// Represents the context of variables and vectors for a job request.
		/// </summary>
		public JobEnvironment Environment { get; set; }
		
		public string JobId { get; set; }
		
		public string JobName { get; set; }
		
		public string JobRefName { get; set; }
		
		public string MessageType { get; set; }
		
		public TaskOrchestrationPlanReference Plan { get; set; }
		
		public TimelineReference Timeline { get; set; }
	}
	
	public class TaskOrchestrationPlanReference
	{
		
		public string ArtifactLocation { get; set; }
		
		public string ArtifactUri { get; set; }
		
		public TaskOrchestrationOwner Definition { get; set; }
		
		public TaskOrchestrationOwner Owner { get; set; }
		
		public string PlanGroup { get; set; }
		
		public string PlanId { get; set; }
		
		public string PlanType { get; set; }
		
		public string ScopeIdentifier { get; set; }
		
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	public class TimelineReference
	{
		
		public System.Nullable<System.Int32> ChangeId { get; set; }
		
		public string Id { get; set; }
		
		public string Location { get; set; }
	}
	
	public class JobStartedEvent
	{
	}
	
	public class KubernetesResource
	{
		
		public string ClusterName { get; set; }
		
		public string Namespace { get; set; }
		
		public string ServiceEndpointId { get; set; }
	}
	
	public class KubernetesResourceCreateParameters
	{
		
		public string ClusterName { get; set; }
		
		public string Name { get; set; }
		
		public string Namespace { get; set; }
		
		/// <summary>
		/// Tags of the kubernetes resource.
		/// </summary>
		public string[] Tags { get; set; }
	}
	
	public class KubernetesResourceCreateParametersExistingEndpoint
	{
		
		public string ServiceEndpointId { get; set; }
	}
	
	public class KubernetesResourceCreateParametersNewEndpoint
	{
		
		/// <summary>
		/// Represents an endpoint which may be used by an orchestration job.
		/// </summary>
		public ServiceEndpoint Endpoint { get; set; }
	}
	
	public class KubernetesResourcePatchParameters
	{
		
		public System.Collections.Generic.Dictionary<string, string> AuthorizationParameters { get; set; }
		
		/// <summary>
		/// Provider type (CustomProvider or AzureKubernetesServiceProvider) of the resource to be updated
		/// </summary>
		public string ProviderType { get; set; }
		
		public System.Nullable<System.Int32> ResourceId { get; set; }
	}
	
	/// <summary>
	/// Represents a purchase of resource units in a secondary marketplace.
	/// </summary>
	public class MarketplacePurchasedLicense
	{
		
		/// <summary>
		/// The Marketplace display name.
		/// </summary>
		public string MarketplaceName { get; set; }
		
		/// <summary>
		/// The name of the identity making the purchase as seen by the marketplace
		/// </summary>
		public string PurchaserName { get; set; }
		
		/// <summary>
		/// The quantity purchased.
		/// </summary>
		public System.Nullable<System.Int32> PurchaseUnitCount { get; set; }
	}
	
	/// <summary>
	/// Represents a downloadable package.
	/// </summary>
	public class PackageMetadata
	{
		
		/// <summary>
		/// The date the package was created
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedOn { get; set; }
		
		/// <summary>
		/// A direct link to download the package.
		/// </summary>
		public string DownloadUrl { get; set; }
		
		/// <summary>
		/// The UI uses this to display instructions, i.e. "unzip MyAgent.zip"
		/// </summary>
		public string Filename { get; set; }
		
		/// <summary>
		/// MD5 hash as a base64 string
		/// </summary>
		public string HashValue { get; set; }
		
		/// <summary>
		/// A link to documentation
		/// </summary>
		public string InfoUrl { get; set; }
		
		/// <summary>
		/// The platform (win7, linux, etc.)
		/// </summary>
		public string Platform { get; set; }
		
		/// <summary>
		/// The type of package (e.g. "agent")
		/// </summary>
		public string Type { get; set; }
		
		public PackageVersion Version { get; set; }
	}
	
	public class PlanEnvironment
	{
		
		public MaskHint[] Mask { get; set; }
		
		public System.Collections.Generic.Dictionary<string, JobOption> Options { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> Variables { get; set; }
	}
	
	public class PublishTaskGroupMetadata
	{
		
		public string Comment { get; set; }
		
		public System.Nullable<System.Int32> ParentDefinitionRevision { get; set; }
		
		public System.Nullable<System.Boolean> Preview { get; set; }
		
		public string TaskGroupId { get; set; }
		
		public System.Nullable<System.Int32> TaskGroupRevision { get; set; }
	}
	
	public class ResourceFilterOptions
	{
		
		public IdentityRef[] Identities { get; set; }
		
		public string[] ResourceTypes { get; set; }
	}
	
	public class ResourceFilters
	{
		
		public string[] CreatedBy { get; set; }
		
		public string[] ResourceType { get; set; }
		
		public string SearchText { get; set; }
	}
	
	/// <summary>
	/// Resources include Service Connections, Variable Groups and Secure Files.
	/// </summary>
	public class ResourceItem
	{
		
		public IdentityRef CreatedBy { get; set; }
		
		/// <summary>
		/// Gets or sets description of the resource.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Gets or sets icon url of the resource.
		/// </summary>
		public string IconUrl { get; set; }
		
		/// <summary>
		/// Gets or sets Id of the resource.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates whether resource is shared with other projects or not.
		/// </summary>
		public System.Nullable<System.Boolean> IsShared { get; set; }
		
		/// <summary>
		/// Gets or sets name of the resource.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Gets or sets internal properties of the resource.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// Gets or sets resource type.
		/// </summary>
		public string ResourceType { get; set; }
	}
	
	public class ResourceLimit
	{
		
		public System.Nullable<System.Boolean> FailedToReachAllProviders { get; set; }
		
		public string HostId { get; set; }
		
		public System.Nullable<System.Boolean> IsHosted { get; set; }
		
		public System.Nullable<System.Boolean> IsPremium { get; set; }
		
		public string ParallelismTag { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> ResourceLimitsData { get; set; }
		
		public System.Nullable<System.Int32> TotalCount { get; set; }
		
		public System.Nullable<System.Int32> TotalMinutes { get; set; }
	}
	
	public class ResourcesHubData
	{
		
		public string ContinuationToken { get; set; }
		
		public System.Nullable<System.Boolean> HasProjectLevelManagePermission { get; set; }
		
		public ResourceFilterOptions ResourceFilterOptions { get; set; }
		
		public ResourceFilters ResourceFilters { get; set; }
		
		public ResourceItem[] ResourceItems { get; set; }
	}
	
	public class ResourceUsage
	{
		
		public ResourceLimit ResourceLimit { get; set; }
		
		public TaskAgentJobRequest[] RunningRequests { get; set; }
		
		public System.Nullable<System.Int32> UsedCount { get; set; }
		
		public System.Nullable<System.Int32> UsedMinutes { get; set; }
	}
	
	public class ResultTransformationDetails
	{
		
		public string ResultTemplate { get; set; }
	}
	
	public class SecureFileEvent
	{
		
		public string EventType { get; set; }
		
		public string ProjectId { get; set; }
		
		public SecureFile[] SecureFiles { get; set; }
	}
	
	public class SendJobResponse
	{
		
		public JobEventsConfig Events { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> Variables { get; set; }
	}
	
	public class ServerExecutionDefinition
	{
		
		public EventsConfig Events { get; set; }
		
		public string HandlerName { get; set; }
	}
	
	public class ServerTaskRequestMessage
	{
		
		public TaskDefinition TaskDefinition { get; set; }
		
		public TaskInstance TaskInstance { get; set; }
	}
	
	public class TaskDefinition
	{
		
		public TaskExecution AgentExecution { get; set; }
		
		public string Author { get; set; }
		
		public string Category { get; set; }
		
		public System.Nullable<System.Boolean> ContentsUploaded { get; set; }
		
		public string ContributionIdentifier { get; set; }
		
		public string ContributionVersion { get; set; }
		
		public DataSourceBinding[] DataSourceBindings { get; set; }
		
		public string DefinitionType { get; set; }
		
		public Demand[] Demands { get; set; }
		
		public System.Nullable<System.Boolean> Deprecated { get; set; }
		
		public string Description { get; set; }
		
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		public System.Collections.Generic.Dictionary<string, JObject> Execution { get; set; }
		
		public string FriendlyName { get; set; }
		
		public TaskGroupDefinition[] Groups { get; set; }
		
		public string HelpMarkDown { get; set; }
		
		public string HelpUrl { get; set; }
		
		public string HostType { get; set; }
		
		public string IconUrl { get; set; }
		
		public string Id { get; set; }
		
		public TaskInputDefinition[] Inputs { get; set; }
		
		public string InstanceNameFormat { get; set; }
		
		public string MinimumAgentVersion { get; set; }
		
		public string Name { get; set; }
		
		public TaskOutputVariable[] OutputVariables { get; set; }
		
		public string PackageLocation { get; set; }
		
		public string PackageType { get; set; }
		
		public System.Collections.Generic.Dictionary<string, JObject> PostJobExecution { get; set; }
		
		public System.Collections.Generic.Dictionary<string, JObject> PreJobExecution { get; set; }
		
		public System.Nullable<System.Boolean> Preview { get; set; }
		
		public string ReleaseNotes { get; set; }
		
		public string[] RunsOn { get; set; }
		
		public string[] Satisfies { get; set; }
		
		public System.Nullable<System.Boolean> ServerOwned { get; set; }
		
		public System.Nullable<System.Boolean> ShowEnvironmentVariables { get; set; }
		
		public TaskSourceDefinition[] SourceDefinitions { get; set; }
		
		public string SourceLocation { get; set; }
		
		public TaskVersion Version { get; set; }
		
		public string[] Visibility { get; set; }
	}
	
	public class TaskExecution
	{
		
		public TaskReference ExecTask { get; set; }
		
		/// <summary>
		/// If a task is going to run code, then this provides the type/script etc... information by platform. For example, it might look like. net45: { typeName: "Microsoft.TeamFoundation.Automation.Tasks.PowerShellTask", assemblyName: "Microsoft.TeamFoundation.Automation.Tasks.PowerShell.dll" } net20: { typeName: "Microsoft.TeamFoundation.Automation.Tasks.PowerShellTask", assemblyName: "Microsoft.TeamFoundation.Automation.Tasks.PowerShell.dll" } java: { jar: "powershelltask.tasks.automation.teamfoundation.microsoft.com", } node: { script: "powershellhost.js", }
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> PlatformInstructions { get; set; }
	}
	
	public class TaskReference
	{
		
		public string Id { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> Inputs { get; set; }
		
		public string Name { get; set; }
		
		public string Version { get; set; }
	}
	
	public class TaskGroupDefinition
	{
		
		public string DisplayName { get; set; }
		
		public System.Nullable<System.Boolean> IsExpanded { get; set; }
		
		public string Name { get; set; }
		
		public string[] Tags { get; set; }
		
		public string VisibleRule { get; set; }
	}
	
	public class TaskInputDefinition
	{
	}
	
	public class TaskOutputVariable
	{
		
		public string Description { get; set; }
		
		public string Name { get; set; }
	}
	
	public class TaskSourceDefinition
	{
	}
	
	public class TaskVersion
	{
		
		public System.Nullable<System.Boolean> IsTest { get; set; }
		
		public System.Nullable<System.Int32> Major { get; set; }
		
		public System.Nullable<System.Int32> Minor { get; set; }
		
		public System.Nullable<System.Int32> Patch { get; set; }
	}
	
	public class ServiceEndpointAuthenticationScheme
	{
		
		/// <summary>
		/// Gets or sets the authorization headers of service endpoint authentication scheme.
		/// </summary>
		public AuthorizationHeader[] AuthorizationHeaders { get; set; }
		
		/// <summary>
		/// Gets or sets the certificates of service endpoint authentication scheme.
		/// </summary>
		public ClientCertificate[] ClientCertificates { get; set; }
		
		/// <summary>
		/// Gets or sets the display name for the service endpoint authentication scheme.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Gets or sets the input descriptors for the service endpoint authentication scheme.
		/// </summary>
		public InputDescriptor[] InputDescriptors { get; set; }
		
		/// <summary>
		/// Gets or sets the scheme for service endpoint authentication.
		/// </summary>
		public string Scheme { get; set; }
	}
	
	public class ServiceEndpointDetails
	{
		
		public EndpointAuthorization Authorization { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> Data { get; set; }
		
		public string Type { get; set; }
		
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Represents service endpoint execution data.
	/// </summary>
	public class ServiceEndpointExecutionData
	{
		
		public TaskOrchestrationOwner Definition { get; set; }
		
		/// <summary>
		/// Gets the finish time of service endpoint execution.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> FinishTime { get; set; }
		
		/// <summary>
		/// Gets the Id of service endpoint execution data.
		/// </summary>
		public System.Nullable<System.Int64> Id { get; set; }
		
		public TaskOrchestrationOwner Owner { get; set; }
		
		/// <summary>
		/// Gets the plan type of service endpoint execution data.
		/// </summary>
		public string PlanType { get; set; }
		
		/// <summary>
		/// Gets the result of service endpoint execution.
		/// </summary>
		public System.Nullable<ServiceEndpointExecutionDataResult> Result { get; set; }
		
		/// <summary>
		/// Gets the start time of service endpoint execution.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	public enum ServiceEndpointExecutionDataResult
	{
		
		succeeded = 0,
		
		succeededWithIssues = 1,
		
		failed = 2,
		
		canceled = 3,
		
		skipped = 4,
		
		abandoned = 5,
	}
	
	public class ServiceEndpointExecutionRecord
	{
		
		/// <summary>
		/// Represents service endpoint execution data.
		/// </summary>
		public ServiceEndpointExecutionData Data { get; set; }
		
		/// <summary>
		/// Gets the Id of service endpoint.
		/// </summary>
		public string EndpointId { get; set; }
	}
	
	public class ServiceEndpointExecutionRecordsInput
	{
		
		/// <summary>
		/// Represents service endpoint execution data.
		/// </summary>
		public ServiceEndpointExecutionData Data { get; set; }
		
		public string[] EndpointIds { get; set; }
	}
	
	public class ServiceEndpointRequest
	{
		
		public DataSourceDetails DataSourceDetails { get; set; }
		
		public ResultTransformationDetails ResultTransformationDetails { get; set; }
		
		public ServiceEndpointDetails ServiceEndpointDetails { get; set; }
	}
	
	public class ServiceEndpointRequestResult
	{
		
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken Result { get; set; }
		
		public System.Nullable<ServiceEndpointRequestResultStatusCode> StatusCode { get; set; }
	}
	
	public enum ServiceEndpointRequestResultStatusCode
	{
		
		_continue = 0,
		
		switchingProtocols = 1,
		
		ok = 2,
		
		created = 3,
		
		accepted = 4,
		
		nonAuthoritativeInformation = 5,
		
		noContent = 6,
		
		resetContent = 7,
		
		partialContent = 8,
		
		multipleChoices = 9,
		
		ambiguous = 10,
		
		movedPermanently = 11,
		
		moved = 12,
		
		found = 13,
		
		redirect = 14,
		
		seeOther = 15,
		
		redirectMethod = 16,
		
		notModified = 17,
		
		useProxy = 18,
		
		unused = 19,
		
		temporaryRedirect = 20,
		
		redirectKeepVerb = 21,
		
		badRequest = 22,
		
		unauthorized = 23,
		
		paymentRequired = 24,
		
		forbidden = 25,
		
		notFound = 26,
		
		methodNotAllowed = 27,
		
		notAcceptable = 28,
		
		proxyAuthenticationRequired = 29,
		
		requestTimeout = 30,
		
		conflict = 31,
		
		gone = 32,
		
		lengthRequired = 33,
		
		preconditionFailed = 34,
		
		requestEntityTooLarge = 35,
		
		requestUriTooLong = 36,
		
		unsupportedMediaType = 37,
		
		requestedRangeNotSatisfiable = 38,
		
		expectationFailed = 39,
		
		upgradeRequired = 40,
		
		internalServerError = 41,
		
		notImplemented = 42,
		
		badGateway = 43,
		
		serviceUnavailable = 44,
		
		gatewayTimeout = 45,
		
		httpVersionNotSupported = 46,
	}
	
	/// <summary>
	/// Represents type of the service endpoint.
	/// </summary>
	public class ServiceEndpointType
	{
		
		/// <summary>
		/// Authentication scheme of service endpoint type.
		/// </summary>
		public ServiceEndpointAuthenticationScheme[] AuthenticationSchemes { get; set; }
		
		/// <summary>
		/// Data sources of service endpoint type.
		/// </summary>
		public DataSource[] DataSources { get; set; }
		
		/// <summary>
		/// Dependency data of service endpoint type.
		/// </summary>
		public DependencyData[] DependencyData { get; set; }
		
		/// <summary>
		/// Gets or sets the description of service endpoint type.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Gets or sets the display name of service endpoint type.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Represents url of the service endpoint.
		/// </summary>
		public EndpointUrl EndpointUrl { get; set; }
		
		public HelpLink HelpLink { get; set; }
		
		public string HelpMarkDown { get; set; }
		
		/// <summary>
		/// Gets or sets the icon url of service endpoint type.
		/// </summary>
		public string IconUrl { get; set; }
		
		/// <summary>
		/// Input descriptor of service endpoint type.
		/// </summary>
		public InputDescriptor[] InputDescriptors { get; set; }
		
		/// <summary>
		/// Gets or sets the name of service endpoint type.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Trusted hosts of a service endpoint type.
		/// </summary>
		public string[] TrustedHosts { get; set; }
		
		/// <summary>
		/// Gets or sets the ui contribution id of service endpoint type.
		/// </summary>
		public string UiContributionId { get; set; }
	}
	
	public class TaskAgentCloud
	{
		
		/// <summary>
		/// Gets or sets a AcquireAgentEndpoint using which a request can be made to acquire new agent
		/// </summary>
		public string AcquireAgentEndpoint { get; set; }
		
		public System.Nullable<System.Int32> AcquisitionTimeout { get; set; }
		
		public System.Nullable<System.Int32> AgentCloudId { get; set; }
		
		public string GetAccountParallelismEndpoint { get; set; }
		
		public string GetAgentDefinitionEndpoint { get; set; }
		
		public string GetAgentRequestStatusEndpoint { get; set; }
		
		public string Id { get; set; }
		
		/// <summary>
		/// Signifies that this Agent Cloud is internal and should not be user-manageable
		/// </summary>
		public System.Nullable<System.Boolean> Internal { get; set; }
		
		public System.Nullable<System.Int32> MaxParallelism { get; set; }
		
		public string Name { get; set; }
		
		public string ReleaseAgentEndpoint { get; set; }
		
		public string SharedSecret { get; set; }
		
		/// <summary>
		/// Gets or sets the type of the endpoint.
		/// </summary>
		public string Type { get; set; }
	}
	
	public class TaskAgentCloudType
	{
		
		/// <summary>
		/// Gets or sets the display name of agent cloud type.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Gets or sets the input descriptors
		/// </summary>
		public InputDescriptor[] InputDescriptors { get; set; }
		
		/// <summary>
		/// Gets or sets the name of agent cloud type.
		/// </summary>
		public string Name { get; set; }
	}
	
	public class TaskAgentJob
	{
		
		public string Container { get; set; }
		
		public string Id { get; set; }
		
		public string Name { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> SidecarContainers { get; set; }
		
		public TaskAgentJobStep[] Steps { get; set; }
		
		public TaskAgentJobVariable[] Variables { get; set; }
	}
	
	public class TaskAgentJobStep
	{
		
		public string Condition { get; set; }
		
		public System.Nullable<System.Boolean> ContinueOnError { get; set; }
		
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> Env { get; set; }
		
		public string Id { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> Inputs { get; set; }
		
		public string Name { get; set; }
		
		public TaskAgentJobTask Task { get; set; }
		
		public System.Nullable<System.Int32> TimeoutInMinutes { get; set; }
		
		public System.Nullable<TaskAgentJobStepType> Type { get; set; }
	}
	
	public class TaskAgentJobTask
	{
		
		public string Id { get; set; }
		
		public string Name { get; set; }
		
		public string Version { get; set; }
	}
	
	public enum TaskAgentJobStepType
	{
		
		task = 0,
		
		action = 1,
	}
	
	public class TaskAgentJobVariable
	{
		
		public string Name { get; set; }
		
		public System.Nullable<System.Boolean> Secret { get; set; }
		
		public string Value { get; set; }
	}
	
	public class TaskAgentManualUpdate
	{
	}
	
	/// <summary>
	/// Provides a contract for receiving messages from the task orchestrator.
	/// </summary>
	public class TaskAgentMessage
	{
		
		/// <summary>
		/// Gets or sets the body of the message. If the <c>IV</c> property is provided the body will need to be decrypted using the <c>TaskAgentSession.EncryptionKey</c> value in addition to the <c>IV</c>.
		/// </summary>
		public string Body { get; set; }
		
		/// <summary>
		/// Gets or sets the initialization vector used to encrypt this message.
		/// </summary>
		public string[] Iv { get; set; }
		
		/// <summary>
		/// Gets or sets the message identifier.
		/// </summary>
		public System.Nullable<System.Int64> MessageId { get; set; }
		
		/// <summary>
		/// Gets or sets the message type, describing the data contract found in <c>TaskAgentMessage.Body</c>.
		/// </summary>
		public string MessageType { get; set; }
	}
	
	public class TaskAgentMinAgentVersionRequiredUpdate
	{
		
		public TaskOrchestrationOwner JobDefinition { get; set; }
		
		public TaskOrchestrationOwner JobOwner { get; set; }
		
		public Demand MinAgentVersion { get; set; }
	}
	
	public class TaskAgentPoolMaintenanceDefinition
	{
		
		/// <summary>
		/// Enable maintenance
		/// </summary>
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Id
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Maintenance job timeout per agent
		/// </summary>
		public System.Nullable<System.Int32> JobTimeoutInMinutes { get; set; }
		
		/// <summary>
		/// Max percentage of agents within a pool running maintenance job at given time
		/// </summary>
		public System.Nullable<System.Int32> MaxConcurrentAgentsPercentage { get; set; }
		
		public TaskAgentPoolMaintenanceOptions Options { get; set; }
		
		public TaskAgentPoolReference Pool { get; set; }
		
		public TaskAgentPoolMaintenanceRetentionPolicy RetentionPolicy { get; set; }
		
		public TaskAgentPoolMaintenanceSchedule ScheduleSetting { get; set; }
	}
	
	public class TaskAgentPoolMaintenanceOptions
	{
		
		/// <summary>
		/// time to consider a System.DefaultWorkingDirectory is stale
		/// </summary>
		public System.Nullable<System.Int32> WorkingDirectoryExpirationInDays { get; set; }
	}
	
	public class TaskAgentPoolMaintenanceRetentionPolicy
	{
		
		/// <summary>
		/// Number of records to keep for maintenance job executed with this definition.
		/// </summary>
		public System.Nullable<System.Int32> NumberOfHistoryRecordsToKeep { get; set; }
	}
	
	public class TaskAgentPoolMaintenanceSchedule
	{
		
		/// <summary>
		/// Days for a build (flags enum for days of the week)
		/// </summary>
		public System.Nullable<TaskAgentPoolMaintenanceScheduleDaysToBuild> DaysToBuild { get; set; }
		
		/// <summary>
		/// The Job Id of the Scheduled job that will queue the pool maintenance job.
		/// </summary>
		public string ScheduleJobId { get; set; }
		
		/// <summary>
		/// Local timezone hour to start
		/// </summary>
		public System.Nullable<System.Int32> StartHours { get; set; }
		
		/// <summary>
		/// Local timezone minute to start
		/// </summary>
		public System.Nullable<System.Int32> StartMinutes { get; set; }
		
		/// <summary>
		/// Time zone of the build schedule (string representation of the time zone id)
		/// </summary>
		public string TimeZoneId { get; set; }
	}
	
	public enum TaskAgentPoolMaintenanceScheduleDaysToBuild
	{
		
		none = 0,
		
		monday = 1,
		
		tuesday = 2,
		
		wednesday = 3,
		
		thursday = 4,
		
		friday = 5,
		
		saturday = 6,
		
		sunday = 7,
		
		all = 8,
	}
	
	public class TaskAgentPoolMaintenanceJob
	{
		
		/// <summary>
		/// The maintenance definition for the maintenance job
		/// </summary>
		public System.Nullable<System.Int32> DefinitionId { get; set; }
		
		/// <summary>
		/// The total error counts during the maintenance job
		/// </summary>
		public System.Nullable<System.Int32> ErrorCount { get; set; }
		
		/// <summary>
		/// Time that the maintenance job was completed
		/// </summary>
		public System.Nullable<System.DateTimeOffset> FinishTime { get; set; }
		
		/// <summary>
		/// Id of the maintenance job
		/// </summary>
		public System.Nullable<System.Int32> JobId { get; set; }
		
		/// <summary>
		/// The log download url for the maintenance job
		/// </summary>
		public string LogsDownloadUrl { get; set; }
		
		/// <summary>
		/// Orchestration/Plan Id for the maintenance job
		/// </summary>
		public string OrchestrationId { get; set; }
		
		public TaskAgentPoolReference Pool { get; set; }
		
		/// <summary>
		/// Time that the maintenance job was queued
		/// </summary>
		public System.Nullable<System.DateTimeOffset> QueueTime { get; set; }
		
		public IdentityRef RequestedBy { get; set; }
		
		/// <summary>
		/// The maintenance job result
		/// </summary>
		public System.Nullable<TaskAgentPoolMaintenanceJobResult> Result { get; set; }
		
		/// <summary>
		/// Time that the maintenance job was started
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Status of the maintenance job
		/// </summary>
		public System.Nullable<TaskAgentPoolMaintenanceJobStatus> Status { get; set; }
		
		public TaskAgentPoolMaintenanceJobTargetAgent[] TargetAgents { get; set; }
		
		/// <summary>
		/// The total warning counts during the maintenance job
		/// </summary>
		public System.Nullable<System.Int32> WarningCount { get; set; }
	}
	
	public enum TaskAgentPoolMaintenanceJobResult
	{
		
		succeeded = 0,
		
		failed = 1,
		
		canceled = 2,
	}
	
	public enum TaskAgentPoolMaintenanceJobStatus
	{
		
		inProgress = 0,
		
		completed = 1,
		
		cancelling = 2,
		
		queued = 3,
	}
	
	public class TaskAgentPoolMaintenanceJobTargetAgent
	{
		
		/// <summary>
		/// A reference to an agent.
		/// </summary>
		public TaskAgentReference Agent { get; set; }
		
		public System.Nullable<System.Int32> JobId { get; set; }
		
		public System.Nullable<TaskAgentPoolMaintenanceJobTargetAgentResult> Result { get; set; }
		
		public System.Nullable<TaskAgentPoolMaintenanceJobTargetAgentStatus> Status { get; set; }
	}
	
	public enum TaskAgentPoolMaintenanceJobTargetAgentResult
	{
		
		succeeded = 0,
		
		failed = 1,
		
		canceled = 2,
	}
	
	public enum TaskAgentPoolMaintenanceJobTargetAgentStatus
	{
		
		inProgress = 0,
		
		completed = 1,
		
		cancelling = 2,
		
		queued = 3,
	}
	
	public class TaskAgentPoolStatus
	{
		
		/// <summary>
		/// Number of requests queued and assigned to an agent. Not running yet.
		/// </summary>
		public System.Nullable<System.Int32> AssignedRequestCount { get; set; }
		
		/// <summary>
		/// Number of queued requests which are not assigned to any agents
		/// </summary>
		public System.Nullable<System.Int32> QueuedRequestCount { get; set; }
		
		/// <summary>
		/// Number of currently running requests
		/// </summary>
		public System.Nullable<System.Int32> RunningRequestCount { get; set; }
	}
	
	public class TaskAgentPoolSummary
	{
		
		/// <summary>
		/// Metrics columns header
		/// </summary>
		public MetricsColumnsHeader ColumnsHeader { get; set; }
		
		public DeploymentGroupReference[] DeploymentGroups { get; set; }
		
		public TaskAgentPoolReference Pool { get; set; }
		
		public TaskAgentQueue[] Queues { get; set; }
		
		public MetricsRow[] Rows { get; set; }
	}
	
	/// <summary>
	/// Represents a session for performing message exchanges from an agent.
	/// </summary>
	public class TaskAgentSession
	{
		
		/// <summary>
		/// A reference to an agent.
		/// </summary>
		public TaskAgentReference Agent { get; set; }
		
		/// <summary>
		/// Represents a symmetric key used for message-level encryption for communication sent to an agent.
		/// </summary>
		public TaskAgentSessionKey EncryptionKey { get; set; }
		
		/// <summary>
		/// Gets or sets the owner name of this session. Generally this will be the machine of origination.
		/// </summary>
		public string OwnerName { get; set; }
		
		/// <summary>
		/// Gets the unique identifier for this session.
		/// </summary>
		public string SessionId { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> SystemCapabilities { get; set; }
	}
	
	/// <summary>
	/// Represents a symmetric key used for message-level encryption for communication sent to an agent.
	/// </summary>
	public class TaskAgentSessionKey
	{
		
		/// <summary>
		/// Gets or sets a value indicating whether or not the key value is encrypted. If this value is true, the Value property should be decrypted using the <c>RSA</c> key exchanged with the server during registration.
		/// </summary>
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		/// <summary>
		/// Gets or sets the symmetric key value.
		/// </summary>
		public string[] Value { get; set; }
	}
	
	public class TaskAssignedEvent
	{
	}
	
	public class TaskAttachment
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CreatedOn { get; set; }
		
		public string LastChangedBy { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastChangedOn { get; set; }
		
		public string Name { get; set; }
		
		public string RecordId { get; set; }
		
		public string TimelineId { get; set; }
		
		public string Type { get; set; }
	}
	
	public class TaskCompletedEvent
	{
		
		public System.Nullable<TaskCompletedEventResult> Result { get; set; }
	}
	
	public enum TaskCompletedEventResult
	{
		
		succeeded = 0,
		
		succeededWithIssues = 1,
		
		failed = 2,
		
		canceled = 3,
		
		skipped = 4,
		
		abandoned = 5,
	}
	
	public class TaskDefinitionEndpoint
	{
		
		/// <summary>
		/// An ID that identifies a service connection to be used for authenticating endpoint requests.
		/// </summary>
		public string ConnectionId { get; set; }
		
		/// <summary>
		/// An Json based keyselector to filter response returned by fetching the endpoint <c>Url</c>.A Json based keyselector must be prefixed with "jsonpath:". KeySelector can be used to specify the filter to get the keys for the values specified with Selector. <example> The following keyselector defines an Json for extracting nodes named 'ServiceName'. <code> endpoint.KeySelector = "jsonpath://ServiceName"; </code></example>
		/// </summary>
		public string KeySelector { get; set; }
		
		/// <summary>
		/// The scope as understood by Connected Services. Essentially, a project-id for now.
		/// </summary>
		public string Scope { get; set; }
		
		/// <summary>
		/// An XPath/Json based selector to filter response returned by fetching the endpoint <c>Url</c>. An XPath based selector must be prefixed with the string "xpath:". A Json based selector must be prefixed with "jsonpath:". <example> The following selector defines an XPath for extracting nodes named 'ServiceName'. <code> endpoint.Selector = "xpath://ServiceName"; </code></example>
		/// </summary>
		public string Selector { get; set; }
		
		/// <summary>
		/// TaskId that this endpoint belongs to.
		/// </summary>
		public string TaskId { get; set; }
		
		/// <summary>
		/// URL to GET.
		/// </summary>
		public string Url { get; set; }
	}
	
	public class TaskDefinitionReference
	{
		
		/// <summary>
		/// Gets or sets the definition type. Values can be 'task' or 'metaTask'.
		/// </summary>
		public string DefinitionType { get; set; }
		
		/// <summary>
		/// Gets or sets the unique identifier of task.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Gets or sets the version specification of task.
		/// </summary>
		public string VersionSpec { get; set; }
	}
	
	public class TaskEvent
	{
		
		public string TaskId { get; set; }
	}
	
	public class TaskGroup
	{
		
		/// <summary>
		/// Gets or sets comment.
		/// </summary>
		public string Comment { get; set; }
		
		public IdentityRef CreatedBy { get; set; }
		
		/// <summary>
		/// Gets or sets date on which it got created.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedOn { get; set; }
		
		/// <summary>
		/// Gets or sets as 'true' to indicate as deleted, 'false' otherwise.
		/// </summary>
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		public IdentityRef ModifiedBy { get; set; }
		
		/// <summary>
		/// Gets or sets date on which it got modified.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ModifiedOn { get; set; }
		
		/// <summary>
		/// Gets or sets the owner.
		/// </summary>
		public string Owner { get; set; }
		
		/// <summary>
		/// Gets or sets parent task group Id. This is used while creating a draft task group.
		/// </summary>
		public string ParentDefinitionId { get; set; }
		
		/// <summary>
		/// Gets or sets revision.
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// Gets or sets the tasks.
		/// </summary>
		public TaskGroupStep[] Tasks { get; set; }
	}
	
	/// <summary>
	/// Represents tasks in the task group.
	/// </summary>
	public class TaskGroupStep
	{
		
		/// <summary>
		/// Gets or sets as 'true' to run the task always, 'false' otherwise.
		/// </summary>
		public System.Nullable<System.Boolean> AlwaysRun { get; set; }
		
		/// <summary>
		/// Gets or sets condition for the task.
		/// </summary>
		public string Condition { get; set; }
		
		/// <summary>
		/// Gets or sets as 'true' to continue on error, 'false' otherwise.
		/// </summary>
		public System.Nullable<System.Boolean> ContinueOnError { get; set; }
		
		/// <summary>
		/// Gets or sets the display name.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Gets or sets as task is enabled or not.
		/// </summary>
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Gets dictionary of environment variables.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> Environment { get; set; }
		
		/// <summary>
		/// Gets or sets dictionary of inputs.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> Inputs { get; set; }
		
		public TaskDefinitionReference Task { get; set; }
		
		/// <summary>
		/// Gets or sets the maximum time, in minutes, that a task is allowed to execute on agent before being cancelled by server. A zero value indicates an infinite timeout.
		/// </summary>
		public System.Nullable<System.Int32> TimeoutInMinutes { get; set; }
	}
	
	public class TaskGroupCreateParameter
	{
		
		/// <summary>
		/// Sets author name of the task group.
		/// </summary>
		public string Author { get; set; }
		
		/// <summary>
		/// Sets category of the task group.
		/// </summary>
		public string Category { get; set; }
		
		/// <summary>
		/// Sets description of the task group.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Sets friendly name of the task group.
		/// </summary>
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// Sets url icon of the task group.
		/// </summary>
		public string IconUrl { get; set; }
		
		/// <summary>
		/// Sets input for the task group.
		/// </summary>
		public TaskInputDefinition[] Inputs { get; set; }
		
		/// <summary>
		/// Sets display name of the task group.
		/// </summary>
		public string InstanceNameFormat { get; set; }
		
		/// <summary>
		/// Sets name of the task group.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Sets parent task group Id. This is used while creating a draft task group.
		/// </summary>
		public string ParentDefinitionId { get; set; }
		
		/// <summary>
		/// Sets RunsOn of the task group. Value can be 'Agent', 'Server' or 'DeploymentGroup'.
		/// </summary>
		public string[] RunsOn { get; set; }
		
		/// <summary>
		/// Sets tasks for the task group.
		/// </summary>
		public TaskGroupStep[] Tasks { get; set; }
		
		public TaskVersion Version { get; set; }
	}
	
	public class TaskGroupPublishPreviewParameter
	{
		
		/// <summary>
		/// This is to disable previous versions of task group upon publish
		/// </summary>
		public System.Nullable<System.Boolean> DisablePriorVersions { get; set; }
		
		/// <summary>
		/// Denotes if task group is in preview
		/// </summary>
		public System.Nullable<System.Boolean> Preview { get; set; }
		
		/// <summary>
		/// This is the revision of task group that is getting published
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
		
		public TaskVersion Version { get; set; }
	}
	
	public class TaskGroupRestoreParameter
	{
		
		/// <summary>
		/// This is to restore deleted Task Group
		/// </summary>
		public System.Nullable<System.Boolean> Restore { get; set; }
	}
	
	public class TaskGroupRevision
	{
		
		public IdentityRef ChangedBy { get; set; }
		
		public System.Nullable<System.DateTimeOffset> ChangedDate { get; set; }
		
		public System.Nullable<TaskGroupRevisionChangeType> ChangeType { get; set; }
		
		public string Comment { get; set; }
		
		public System.Nullable<System.Int32> FileId { get; set; }
		
		public System.Nullable<System.Int32> MajorVersion { get; set; }
		
		public System.Nullable<System.Int32> Revision { get; set; }
		
		public string TaskGroupId { get; set; }
	}
	
	public enum TaskGroupRevisionChangeType
	{
		
		add = 0,
		
		update = 1,
		
		delete = 2,
		
		undelete = 3,
	}
	
	public class TaskGroupUpdateParameter
	{
		
		/// <summary>
		/// Sets author name of the task group.
		/// </summary>
		public string Author { get; set; }
		
		/// <summary>
		/// Sets category of the task group.
		/// </summary>
		public string Category { get; set; }
		
		/// <summary>
		/// Sets comment of the task group.
		/// </summary>
		public string Comment { get; set; }
		
		/// <summary>
		/// Sets description of the task group.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Sets friendly name of the task group.
		/// </summary>
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// Sets url icon of the task group.
		/// </summary>
		public string IconUrl { get; set; }
		
		/// <summary>
		/// Sets the unique identifier of this field.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Sets input for the task group.
		/// </summary>
		public TaskInputDefinition[] Inputs { get; set; }
		
		/// <summary>
		/// Sets display name of the task group.
		/// </summary>
		public string InstanceNameFormat { get; set; }
		
		/// <summary>
		/// Sets name of the task group.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Gets or sets parent task group Id. This is used while creating a draft task group.
		/// </summary>
		public string ParentDefinitionId { get; set; }
		
		/// <summary>
		/// Sets revision of the task group.
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// Sets RunsOn of the task group. Value can be 'Agent', 'Server' or 'DeploymentGroup'.
		/// </summary>
		public string[] RunsOn { get; set; }
		
		/// <summary>
		/// Sets tasks for the task group.
		/// </summary>
		public TaskGroupStep[] Tasks { get; set; }
		
		public TaskVersion Version { get; set; }
	}
	
	public class TaskGroupUpdatePropertiesBase
	{
		
		/// <summary>
		/// Comment for this update request
		/// </summary>
		public string Comment { get; set; }
	}
	
	public class TaskHubLicenseDetails
	{
		
		public System.Nullable<System.Int32> EnterpriseUsersCount { get; set; }
		
		public System.Nullable<System.Boolean> FailedToReachAllProviders { get; set; }
		
		public System.Nullable<System.Int32> FreeHostedLicenseCount { get; set; }
		
		public System.Nullable<System.Int32> FreeLicenseCount { get; set; }
		
		public System.Nullable<System.Boolean> HasLicenseCountEverUpdated { get; set; }
		
		public System.Nullable<System.Int32> HostedAgentMinutesFreeCount { get; set; }
		
		public System.Nullable<System.Int32> HostedAgentMinutesUsedCount { get; set; }
		
		public System.Nullable<System.Boolean> HostedLicensesArePremium { get; set; }
		
		public System.Nullable<System.Int32> MsdnUsersCount { get; set; }
		
		/// <summary>
		/// Microsoft-hosted licenses purchased from VSTS directly.
		/// </summary>
		public System.Nullable<System.Int32> PurchasedHostedLicenseCount { get; set; }
		
		/// <summary>
		/// Self-hosted licenses purchased from VSTS directly.
		/// </summary>
		public System.Nullable<System.Int32> PurchasedLicenseCount { get; set; }
		
		public System.Nullable<System.Int32> TotalHostedLicenseCount { get; set; }
		
		public System.Nullable<System.Int32> TotalLicenseCount { get; set; }
		
		public System.Nullable<System.Int32> TotalPrivateLicenseCount { get; set; }
	}
	
	public class TaskInputDefinitionBase
	{
		
		public string[] Aliases { get; set; }
		
		public string DefaultValue { get; set; }
		
		public string GroupName { get; set; }
		
		public string HelpMarkDown { get; set; }
		
		public string Label { get; set; }
		
		public string Name { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> Options { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		public System.Nullable<System.Boolean> Required { get; set; }
		
		public string Type { get; set; }
		
		public TaskInputValidation Validation { get; set; }
		
		public string VisibleRule { get; set; }
	}
	
	public class TaskInputValidation
	{
		
		/// <summary>
		/// Conditional expression
		/// </summary>
		public string Expression { get; set; }
		
		/// <summary>
		/// Message explaining how user can correct if validation fails
		/// </summary>
		public string Message { get; set; }
	}
	
	public class TaskLog
	{
		
		public System.Nullable<System.DateTimeOffset> CreatedOn { get; set; }
		
		public string IndexLocation { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastChangedOn { get; set; }
		
		public System.Nullable<System.Int64> LineCount { get; set; }
		
		public string Path { get; set; }
	}
	
	public class TaskLogReference
	{
		
		public System.Nullable<System.Int32> Id { get; set; }
		
		public string Location { get; set; }
	}
	
	public class TaskOrchestrationContainer
	{
		
		public TaskOrchestrationItem[] Children { get; set; }
		
		public System.Nullable<System.Boolean> ContinueOnError { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> Data { get; set; }
		
		public System.Nullable<System.Int32> MaxConcurrency { get; set; }
		
		public System.Nullable<System.Boolean> Parallel { get; set; }
		
		public TaskOrchestrationContainer Rollback { get; set; }
	}
	
	public class TaskOrchestrationItem
	{
		
		public System.Nullable<TaskOrchestrationItemItemType> ItemType { get; set; }
	}
	
	public enum TaskOrchestrationItemItemType
	{
		
		container = 0,
		
		job = 1,
	}
	
	public class TaskOrchestrationJob
	{
		
		public Demand[] Demands { get; set; }
		
		public IdentityRef ExecuteAs { get; set; }
		
		public string ExecutionMode { get; set; }
		
		public string ExecutionTimeout { get; set; }
		
		public string InstanceId { get; set; }
		
		public string Name { get; set; }
		
		public string RefName { get; set; }
		
		public TaskInstance[] Tasks { get; set; }
		
		public System.Collections.Generic.Dictionary<string, string> Variables { get; set; }
	}
	
	public class TaskOrchestrationPlan
	{
		
		public PlanEnvironment Environment { get; set; }
		
		public TaskLogReference ExpandedYaml { get; set; }
		
		public System.Nullable<System.DateTimeOffset> FinishTime { get; set; }
		
		public TaskOrchestrationContainer Implementation { get; set; }
		
		public TaskLogReference InitializationLog { get; set; }
		
		public string RequestedById { get; set; }
		
		public string RequestedForId { get; set; }
		
		public System.Nullable<TaskOrchestrationPlanResult> Result { get; set; }
		
		public string ResultCode { get; set; }
		
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		public System.Nullable<TaskOrchestrationPlanState> State { get; set; }
		
		public TimelineReference Timeline { get; set; }
	}
	
	public enum TaskOrchestrationPlanResult
	{
		
		succeeded = 0,
		
		succeededWithIssues = 1,
		
		failed = 2,
		
		canceled = 3,
		
		skipped = 4,
		
		abandoned = 5,
	}
	
	public enum TaskOrchestrationPlanState
	{
		
		inProgress = 0,
		
		queued = 1,
		
		completed = 2,
		
		throttled = 3,
	}
	
	public class TaskOrchestrationPlanGroup
	{
		
		public string PlanGroup { get; set; }
		
		public ProjectReference Project { get; set; }
		
		public TaskAgentJobRequest[] RunningRequests { get; set; }
	}
	
	public class TaskOrchestrationPlanGroupsQueueMetrics
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
		
		public System.Nullable<TaskOrchestrationPlanGroupsQueueMetricsStatus> Status { get; set; }
	}
	
	public enum TaskOrchestrationPlanGroupsQueueMetricsStatus
	{
		
		running = 0,
		
		queued = 1,
		
		all = 2,
	}
	
	public class TaskOrchestrationQueuedPlan
	{
		
		public System.Nullable<System.DateTimeOffset> AssignTime { get; set; }
		
		public TaskOrchestrationOwner Definition { get; set; }
		
		public TaskOrchestrationOwner Owner { get; set; }
		
		public string PlanGroup { get; set; }
		
		public string PlanId { get; set; }
		
		public System.Nullable<System.Int32> PoolId { get; set; }
		
		public System.Nullable<System.Int32> QueuePosition { get; set; }
		
		public System.Nullable<System.DateTimeOffset> QueueTime { get; set; }
		
		public string ScopeIdentifier { get; set; }
	}
	
	public class TaskOrchestrationQueuedPlanGroup
	{
		
		public TaskOrchestrationOwner Definition { get; set; }
		
		public TaskOrchestrationOwner Owner { get; set; }
		
		public string PlanGroup { get; set; }
		
		public TaskOrchestrationQueuedPlan[] Plans { get; set; }
		
		public ProjectReference Project { get; set; }
		
		public System.Nullable<System.Int32> QueuePosition { get; set; }
	}
	
	public class TaskPackageMetadata
	{
		
		/// <summary>
		/// Gets the name of the package.
		/// </summary>
		public string Type { get; set; }
		
		/// <summary>
		/// Gets the url of the package.
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// Gets the version of the package.
		/// </summary>
		public string Version { get; set; }
	}
	
	public class TaskSourceDefinitionBase
	{
		
		public string AuthKey { get; set; }
		
		public string Endpoint { get; set; }
		
		public string KeySelector { get; set; }
		
		public string Selector { get; set; }
		
		public string Target { get; set; }
	}
	
	public class TaskStartedEvent
	{
	}
	
	public class Timeline
	{
		
		public string LastChangedBy { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastChangedOn { get; set; }
		
		public TimelineRecord[] Records { get; set; }
	}
	
	public class TimelineRecord
	{
		
		/// <summary>
		/// Represents a JSON object.
		/// </summary>
		public JObject AgentSpecification { get; set; }
		
		public System.Nullable<System.Int32> Attempt { get; set; }
		
		public System.Nullable<System.Int32> ChangeId { get; set; }
		
		public string CurrentOperation { get; set; }
		
		public TimelineReference Details { get; set; }
		
		public System.Nullable<System.Int32> ErrorCount { get; set; }
		
		public System.Nullable<System.DateTimeOffset> FinishTime { get; set; }
		
		public string Id { get; set; }
		
		public string Identifier { get; set; }
		
		public Issue[] Issues { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		public string Location { get; set; }
		
		public TaskLogReference Log { get; set; }
		
		public string Name { get; set; }
		
		public System.Nullable<System.Int32> Order { get; set; }
		
		public string ParentId { get; set; }
		
		public System.Nullable<System.Int32> PercentComplete { get; set; }
		
		public TimelineAttempt[] PreviousAttempts { get; set; }
		
		public System.Nullable<System.Int32> QueueId { get; set; }
		
		public string RefName { get; set; }
		
		public System.Nullable<TimelineRecordResult> Result { get; set; }
		
		public string ResultCode { get; set; }
		
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		public System.Nullable<TimelineRecordState> State { get; set; }
		
		public TaskReference Task { get; set; }
		
		public string Type { get; set; }
		
		public System.Collections.Generic.Dictionary<string, VariableValue> Variables { get; set; }
		
		public System.Nullable<System.Int32> WarningCount { get; set; }
		
		public string WorkerName { get; set; }
	}
	
	public class TimelineAttempt
	{
		
		/// <summary>
		/// Gets or sets the attempt of the record.
		/// </summary>
		public System.Nullable<System.Int32> Attempt { get; set; }
		
		/// <summary>
		/// Gets or sets the unique identifier for the record.
		/// </summary>
		public string Identifier { get; set; }
		
		/// <summary>
		/// Gets or sets the record identifier located within the specified timeline.
		/// </summary>
		public string RecordId { get; set; }
		
		/// <summary>
		/// Gets or sets the timeline identifier which owns the record representing this attempt.
		/// </summary>
		public string TimelineId { get; set; }
	}
	
	public enum TimelineRecordResult
	{
		
		succeeded = 0,
		
		succeededWithIssues = 1,
		
		failed = 2,
		
		canceled = 3,
		
		skipped = 4,
		
		abandoned = 5,
	}
	
	public enum TimelineRecordState
	{
		
		pending = 0,
		
		inProgress = 1,
		
		completed = 2,
	}
	
	public class VariableValue
	{
		
		public System.Nullable<System.Boolean> IsReadOnly { get; set; }
		
		public System.Nullable<System.Boolean> IsSecret { get; set; }
		
		public string Value { get; set; }
	}
	
	public class TimelineRecordFeedLinesWrapper
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
		
		public System.Nullable<System.Int64> EndLine { get; set; }
		
		public System.Nullable<System.Int64> StartLine { get; set; }
		
		public string StepId { get; set; }
		
		public string[] Value { get; set; }
	}
	
	/// <summary>
	/// A variable group is a collection of related variables.
	/// </summary>
	public class VariableGroup
	{
		
		public IdentityRef CreatedBy { get; set; }
		
		/// <summary>
		/// Gets or sets the time when variable group was created.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedOn { get; set; }
		
		/// <summary>
		/// Gets or sets description of the variable group.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Gets or sets id of the variable group.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Indicates whether variable group is shared with other projects or not.
		/// </summary>
		public System.Nullable<System.Boolean> IsShared { get; set; }
		
		public IdentityRef ModifiedBy { get; set; }
		
		/// <summary>
		/// Gets or sets the time when variable group was modified
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ModifiedOn { get; set; }
		
		/// <summary>
		/// Gets or sets name of the variable group.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Defines provider data of the variable group.
		/// </summary>
		public VariableGroupProviderData ProviderData { get; set; }
		
		/// <summary>
		/// Gets or sets type of the variable group.
		/// </summary>
		public string Type { get; set; }
		
		/// <summary>
		/// all project references where the variable group is shared with other projects.
		/// </summary>
		public VariableGroupProjectReference[] VariableGroupProjectReferences { get; set; }
		
		/// <summary>
		/// Gets or sets variables contained in the variable group.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, VariableValue> Variables { get; set; }
	}
	
	/// <summary>
	/// Defines provider data of the variable group.
	/// </summary>
	public class VariableGroupProviderData
	{
	}
	
	/// <summary>
	/// A variable group reference is a shallow reference to variable group.
	/// </summary>
	public class VariableGroupProjectReference
	{
		
		/// <summary>
		/// Gets or sets description of the variable group.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Gets or sets name of the variable group.
		/// </summary>
		public string Name { get; set; }
		
		public ProjectReference ProjectReference { get; set; }
	}
	
	public class VariableGroupParameters
	{
		
		/// <summary>
		/// Sets description of the variable group.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Sets name of the variable group.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Defines provider data of the variable group.
		/// </summary>
		public VariableGroupProviderData ProviderData { get; set; }
		
		/// <summary>
		/// Sets type of the variable group.
		/// </summary>
		public string Type { get; set; }
		
		public VariableGroupProjectReference[] VariableGroupProjectReferences { get; set; }
		
		/// <summary>
		/// Sets variables contained in the variable group.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, VariableValue> Variables { get; set; }
	}
	
	public class VirtualMachine
	{
		
		/// <summary>
		/// A task agent.
		/// </summary>
		public TaskAgent Agent { get; set; }
		
		public System.Nullable<System.Int32> Id { get; set; }
		
		public string[] Tags { get; set; }
	}
	
	public class VirtualMachineGroup
	{
		
		public System.Nullable<System.Int32> PoolId { get; set; }
	}
	
	public class VirtualMachineGroupCreateParameters
	{
		
		public string Name { get; set; }
	}
	
	public class VirtualMachineResource
	{
		
		/// <summary>
		/// A task agent.
		/// </summary>
		public TaskAgent Agent { get; set; }
	}
	
	public class VirtualMachineResourceCreateParameters
	{
		
		public VirtualMachineResource VirtualMachineResource { get; set; }
	}
	
	/// <summary>
	/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
	/// </summary>
	public class VssJsonCollectionWrapper
	{
		
		public string Value { get; set; }
	}
	
	public class VssJsonCollectionWrapperBase
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Agentclouds_List {organization}/_apis/distributedtask/agentclouds
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TaskAgentCloud[]> Agentclouds_ListAsync(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/agentclouds&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentCloud[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Agentclouds_List {organization}/_apis/distributedtask/agentclouds
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TaskAgentCloud[] Agentclouds_List(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/agentclouds&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentCloud[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Agentclouds_Add {organization}/_apis/distributedtask/agentclouds
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TaskAgentCloud> Agentclouds_AddAsync(string organization, string api_version, TaskAgentCloud requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/agentclouds&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentCloud>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Agentclouds_Add {organization}/_apis/distributedtask/agentclouds
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TaskAgentCloud Agentclouds_Add(string organization, string api_version, TaskAgentCloud requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/agentclouds&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentCloud>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Agentclouds_Get {organization}/_apis/distributedtask/agentclouds/{agentCloudId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TaskAgentCloud> Agentclouds_GetAsync(string organization, int agentCloudId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/agentclouds/"+agentCloudId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentCloud>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Agentclouds_Get {organization}/_apis/distributedtask/agentclouds/{agentCloudId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TaskAgentCloud Agentclouds_Get(string organization, int agentCloudId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/agentclouds/"+agentCloudId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentCloud>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Agentclouds_Delete {organization}/_apis/distributedtask/agentclouds/{agentCloudId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TaskAgentCloud> Agentclouds_DeleteAsync(string organization, int agentCloudId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/agentclouds/"+agentCloudId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentCloud>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Agentclouds_Delete {organization}/_apis/distributedtask/agentclouds/{agentCloudId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TaskAgentCloud Agentclouds_Delete(string organization, int agentCloudId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/agentclouds/"+agentCloudId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentCloud>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Requests_List {organization}/_apis/distributedtask/agentclouds/{agentCloudId}/requests
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TaskAgentCloudRequest[]> Requests_ListAsync(string organization, int agentCloudId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/agentclouds/"+agentCloudId+"/requests&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentCloudRequest[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Requests_List {organization}/_apis/distributedtask/agentclouds/{agentCloudId}/requests
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TaskAgentCloudRequest[] Requests_List(string organization, int agentCloudId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/agentclouds/"+agentCloudId+"/requests&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentCloudRequest[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get agent cloud types.
		/// Agentcloudtypes_List {organization}/_apis/distributedtask/agentcloudtypes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TaskAgentCloudType[]> Agentcloudtypes_ListAsync(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/agentcloudtypes&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentCloudType[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get agent cloud types.
		/// Agentcloudtypes_List {organization}/_apis/distributedtask/agentcloudtypes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TaskAgentCloudType[] Agentcloudtypes_List(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/agentcloudtypes&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentCloudType[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of agent pools.
		/// Pools_Get_Agent_Pools_By_Ids {organization}/_apis/distributedtask/pools
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolIds">pool Ids to fetch</param>
		/// <param name="actionFilter">Filter by whether the calling user has use or manage permissions</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TaskAgentPool[]> Pools_Get_Agent_Pools_By_IdsAsync(string organization, string poolIds, Pools_Get_Agent_Pools_By_IdsActionFilter actionFilter, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools&poolIds=" + (poolIds==null? "" : Uri.EscapeDataString(poolIds))+"&actionFilter=" + actionFilter+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentPool[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of agent pools.
		/// Pools_Get_Agent_Pools_By_Ids {organization}/_apis/distributedtask/pools
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolIds">pool Ids to fetch</param>
		/// <param name="actionFilter">Filter by whether the calling user has use or manage permissions</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TaskAgentPool[] Pools_Get_Agent_Pools_By_Ids(string organization, string poolIds, Pools_Get_Agent_Pools_By_IdsActionFilter actionFilter, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools&poolIds=" + (poolIds==null? "" : Uri.EscapeDataString(poolIds))+"&actionFilter=" + actionFilter+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentPool[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an agent pool.
		/// Pools_Add {organization}/_apis/distributedtask/pools
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Details about the new agent pool</param>
		/// <returns>successful operation</returns>
		public async Task<TaskAgentPool> Pools_AddAsync(string organization, string api_version, TaskAgentPool requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentPool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create an agent pool.
		/// Pools_Add {organization}/_apis/distributedtask/pools
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Details about the new agent pool</param>
		/// <returns>successful operation</returns>
		public TaskAgentPool Pools_Add(string organization, string api_version, TaskAgentPool requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentPool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get information about an agent pool.
		/// Pools_Get {organization}/_apis/distributedtask/pools/{poolId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolId">An agent pool ID</param>
		/// <param name="properties">Agent pool properties (comma-separated)</param>
		/// <param name="actionFilter">Filter by whether the calling user has use or manage permissions</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TaskAgentPool> Pools_GetAsync(string organization, int poolId, string properties, Pools_Get_Agent_Pools_By_IdsActionFilter actionFilter, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools/"+poolId+"&properties=" + (properties==null? "" : Uri.EscapeDataString(properties))+"&actionFilter=" + actionFilter+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentPool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about an agent pool.
		/// Pools_Get {organization}/_apis/distributedtask/pools/{poolId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolId">An agent pool ID</param>
		/// <param name="properties">Agent pool properties (comma-separated)</param>
		/// <param name="actionFilter">Filter by whether the calling user has use or manage permissions</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TaskAgentPool Pools_Get(string organization, int poolId, string properties, Pools_Get_Agent_Pools_By_IdsActionFilter actionFilter, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools/"+poolId+"&properties=" + (properties==null? "" : Uri.EscapeDataString(properties))+"&actionFilter=" + actionFilter+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentPool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an agent pool.
		/// Pools_Delete {organization}/_apis/distributedtask/pools/{poolId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolId">ID of the agent pool to delete</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Pools_DeleteAsync(string organization, int poolId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools/"+poolId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an agent pool.
		/// Pools_Delete {organization}/_apis/distributedtask/pools/{poolId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolId">ID of the agent pool to delete</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Pools_Delete(string organization, int poolId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools/"+poolId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update properties on an agent pool
		/// Pools_Update {organization}/_apis/distributedtask/pools/{poolId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolId">The agent pool to update</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Updated agent pool details</param>
		/// <returns>successful operation</returns>
		public async Task<TaskAgentPool> Pools_UpdateAsync(string organization, int poolId, string api_version, TaskAgentPool requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools/"+poolId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentPool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update properties on an agent pool
		/// Pools_Update {organization}/_apis/distributedtask/pools/{poolId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolId">The agent pool to update</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Updated agent pool details</param>
		/// <returns>successful operation</returns>
		public TaskAgentPool Pools_Update(string organization, int poolId, string api_version, TaskAgentPool requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools/"+poolId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentPool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of agents.
		/// Agents_List {organization}/_apis/distributedtask/pools/{poolId}/agents
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolId">The agent pool containing the agents</param>
		/// <param name="agentName">Filter on agent name</param>
		/// <param name="includeCapabilities">Whether to include the agents' capabilities in the response</param>
		/// <param name="includeAssignedRequest">Whether to include details about the agents' current work</param>
		/// <param name="includeLastCompletedRequest">Whether to include details about the agents' most recent completed work</param>
		/// <param name="propertyFilters">Filter which custom properties will be returned</param>
		/// <param name="demands">Filter by demands the agents can satisfy</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TaskAgent[]> Agents_ListAsync(string organization, int poolId, string agentName, bool includeCapabilities, bool includeAssignedRequest, bool includeLastCompletedRequest, string propertyFilters, string demands, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools/"+poolId+"/agents&agentName=" + (agentName==null? "" : Uri.EscapeDataString(agentName))+"&includeCapabilities="+includeCapabilities+"&includeAssignedRequest="+includeAssignedRequest+"&includeLastCompletedRequest="+includeLastCompletedRequest+"&propertyFilters=" + (propertyFilters==null? "" : Uri.EscapeDataString(propertyFilters))+"&demands=" + (demands==null? "" : Uri.EscapeDataString(demands))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgent[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of agents.
		/// Agents_List {organization}/_apis/distributedtask/pools/{poolId}/agents
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolId">The agent pool containing the agents</param>
		/// <param name="agentName">Filter on agent name</param>
		/// <param name="includeCapabilities">Whether to include the agents' capabilities in the response</param>
		/// <param name="includeAssignedRequest">Whether to include details about the agents' current work</param>
		/// <param name="includeLastCompletedRequest">Whether to include details about the agents' most recent completed work</param>
		/// <param name="propertyFilters">Filter which custom properties will be returned</param>
		/// <param name="demands">Filter by demands the agents can satisfy</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TaskAgent[] Agents_List(string organization, int poolId, string agentName, bool includeCapabilities, bool includeAssignedRequest, bool includeLastCompletedRequest, string propertyFilters, string demands, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools/"+poolId+"/agents&agentName=" + (agentName==null? "" : Uri.EscapeDataString(agentName))+"&includeCapabilities="+includeCapabilities+"&includeAssignedRequest="+includeAssignedRequest+"&includeLastCompletedRequest="+includeLastCompletedRequest+"&propertyFilters=" + (propertyFilters==null? "" : Uri.EscapeDataString(propertyFilters))+"&demands=" + (demands==null? "" : Uri.EscapeDataString(demands))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgent[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds an agent to a pool.  You probably don't want to call this endpoint directly. Instead, [configure an agent](https://docs.microsoft.com/azure/devops/pipelines/agents/agents) using the agent download package.
		/// Agents_Add {organization}/_apis/distributedtask/pools/{poolId}/agents
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolId">The agent pool in which to add the agent</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Details about the agent being added</param>
		/// <returns>successful operation</returns>
		public async Task<TaskAgent> Agents_AddAsync(string organization, int poolId, string api_version, TaskAgent requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools/"+poolId+"/agents&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgent>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds an agent to a pool.  You probably don't want to call this endpoint directly. Instead, [configure an agent](https://docs.microsoft.com/azure/devops/pipelines/agents/agents) using the agent download package.
		/// Agents_Add {organization}/_apis/distributedtask/pools/{poolId}/agents
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolId">The agent pool in which to add the agent</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Details about the agent being added</param>
		/// <returns>successful operation</returns>
		public TaskAgent Agents_Add(string organization, int poolId, string api_version, TaskAgent requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools/"+poolId+"/agents&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgent>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get information about an agent.
		/// Agents_Get {organization}/_apis/distributedtask/pools/{poolId}/agents/{agentId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolId">The agent pool containing the agent</param>
		/// <param name="agentId">The agent ID to get information about</param>
		/// <param name="includeCapabilities">Whether to include the agent's capabilities in the response</param>
		/// <param name="includeAssignedRequest">Whether to include details about the agent's current work</param>
		/// <param name="includeLastCompletedRequest">Whether to include details about the agents' most recent completed work</param>
		/// <param name="propertyFilters">Filter which custom properties will be returned</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TaskAgent> Agents_GetAsync(string organization, int poolId, int agentId, bool includeCapabilities, bool includeAssignedRequest, bool includeLastCompletedRequest, string propertyFilters, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools/"+poolId+"/agents/"+agentId+"&includeCapabilities="+includeCapabilities+"&includeAssignedRequest="+includeAssignedRequest+"&includeLastCompletedRequest="+includeLastCompletedRequest+"&propertyFilters=" + (propertyFilters==null? "" : Uri.EscapeDataString(propertyFilters))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgent>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about an agent.
		/// Agents_Get {organization}/_apis/distributedtask/pools/{poolId}/agents/{agentId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolId">The agent pool containing the agent</param>
		/// <param name="agentId">The agent ID to get information about</param>
		/// <param name="includeCapabilities">Whether to include the agent's capabilities in the response</param>
		/// <param name="includeAssignedRequest">Whether to include details about the agent's current work</param>
		/// <param name="includeLastCompletedRequest">Whether to include details about the agents' most recent completed work</param>
		/// <param name="propertyFilters">Filter which custom properties will be returned</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TaskAgent Agents_Get(string organization, int poolId, int agentId, bool includeCapabilities, bool includeAssignedRequest, bool includeLastCompletedRequest, string propertyFilters, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools/"+poolId+"/agents/"+agentId+"&includeCapabilities="+includeCapabilities+"&includeAssignedRequest="+includeAssignedRequest+"&includeLastCompletedRequest="+includeLastCompletedRequest+"&propertyFilters=" + (propertyFilters==null? "" : Uri.EscapeDataString(propertyFilters))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgent>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replace an agent.  You probably don't want to call this endpoint directly. Instead, [use the agent configuration script](https://docs.microsoft.com/azure/devops/pipelines/agents/agents) to remove and reconfigure an agent from your organization.
		/// Agents_Replace_Agent {organization}/_apis/distributedtask/pools/{poolId}/agents/{agentId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolId">The agent pool to use</param>
		/// <param name="agentId">The agent to replace</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Updated details about the replacing agent</param>
		/// <returns>successful operation</returns>
		public async Task<TaskAgent> Agents_Replace_AgentAsync(string organization, int poolId, int agentId, string api_version, TaskAgent requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools/"+poolId+"/agents/"+agentId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgent>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replace an agent.  You probably don't want to call this endpoint directly. Instead, [use the agent configuration script](https://docs.microsoft.com/azure/devops/pipelines/agents/agents) to remove and reconfigure an agent from your organization.
		/// Agents_Replace_Agent {organization}/_apis/distributedtask/pools/{poolId}/agents/{agentId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolId">The agent pool to use</param>
		/// <param name="agentId">The agent to replace</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Updated details about the replacing agent</param>
		/// <returns>successful operation</returns>
		public TaskAgent Agents_Replace_Agent(string organization, int poolId, int agentId, string api_version, TaskAgent requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools/"+poolId+"/agents/"+agentId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgent>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an agent.  You probably don't want to call this endpoint directly. Instead, [use the agent configuration script](https://docs.microsoft.com/azure/devops/pipelines/agents/agents) to remove an agent from your organization.
		/// Agents_Delete {organization}/_apis/distributedtask/pools/{poolId}/agents/{agentId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolId">The pool ID to remove the agent from</param>
		/// <param name="agentId">The agent ID to remove</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Agents_DeleteAsync(string organization, int poolId, int agentId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools/"+poolId+"/agents/"+agentId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an agent.  You probably don't want to call this endpoint directly. Instead, [use the agent configuration script](https://docs.microsoft.com/azure/devops/pipelines/agents/agents) to remove an agent from your organization.
		/// Agents_Delete {organization}/_apis/distributedtask/pools/{poolId}/agents/{agentId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolId">The pool ID to remove the agent from</param>
		/// <param name="agentId">The agent ID to remove</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Agents_Delete(string organization, int poolId, int agentId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools/"+poolId+"/agents/"+agentId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update agent details.
		/// Agents_Update {organization}/_apis/distributedtask/pools/{poolId}/agents/{agentId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolId">The agent pool to use</param>
		/// <param name="agentId">The agent to update</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Updated details about the agent</param>
		/// <returns>successful operation</returns>
		public async Task<TaskAgent> Agents_UpdateAsync(string organization, int poolId, int agentId, string api_version, TaskAgent requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools/"+poolId+"/agents/"+agentId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgent>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update agent details.
		/// Agents_Update {organization}/_apis/distributedtask/pools/{poolId}/agents/{agentId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolId">The agent pool to use</param>
		/// <param name="agentId">The agent to update</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Updated details about the agent</param>
		/// <returns>successful operation</returns>
		public TaskAgent Agents_Update(string organization, int poolId, int agentId, string api_version, TaskAgent requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/pools/"+poolId+"/agents/"+agentId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgent>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a variable group.
		/// Variablegroups_Add {organization}/_apis/distributedtask/variablegroups
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<VariableGroup> Variablegroups_AddAsync(string organization, string api_version, VariableGroupParameters requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/variablegroups&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VariableGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a variable group.
		/// Variablegroups_Add {organization}/_apis/distributedtask/variablegroups
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public VariableGroup Variablegroups_Add(string organization, string api_version, VariableGroupParameters requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/variablegroups&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VariableGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a variable group.
		/// Variablegroups_Share_Variable_Group {organization}/_apis/distributedtask/variablegroups
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Variablegroups_Share_Variable_GroupAsync(string organization, int variableGroupId, string api_version, VariableGroupProjectReference[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/variablegroups&variableGroupId="+variableGroupId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a variable group.
		/// Variablegroups_Share_Variable_Group {organization}/_apis/distributedtask/variablegroups
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Variablegroups_Share_Variable_Group(string organization, int variableGroupId, string api_version, VariableGroupProjectReference[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/variablegroups&variableGroupId="+variableGroupId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a variable group.
		/// Variablegroups_Update {organization}/_apis/distributedtask/variablegroups/{groupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="groupId">Id of the variable group to update.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<VariableGroup> Variablegroups_UpdateAsync(string organization, int groupId, string api_version, VariableGroupParameters requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/variablegroups/"+groupId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VariableGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a variable group.
		/// Variablegroups_Update {organization}/_apis/distributedtask/variablegroups/{groupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="groupId">Id of the variable group to update.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public VariableGroup Variablegroups_Update(string organization, int groupId, string api_version, VariableGroupParameters requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/variablegroups/"+groupId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VariableGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a variable group
		/// Variablegroups_Delete {organization}/_apis/distributedtask/variablegroups/{groupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="groupId">Id of the variable group.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Variablegroups_DeleteAsync(string organization, int groupId, string projectIds, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/variablegroups/"+groupId+"&projectIds=" + (projectIds==null? "" : Uri.EscapeDataString(projectIds))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a variable group
		/// Variablegroups_Delete {organization}/_apis/distributedtask/variablegroups/{groupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="groupId">Id of the variable group.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Variablegroups_Delete(string organization, int groupId, string projectIds, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/variablegroups/"+groupId+"&projectIds=" + (projectIds==null? "" : Uri.EscapeDataString(projectIds))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET the Yaml schema used for Yaml file validation.
		/// Yamlschema_Get {organization}/_apis/distributedtask/yamlschema
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="validateTaskNames">Whether the schema should validate that tasks are actually installed (useful for offline tools where you don't want validation).</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<string> Yamlschema_GetAsync(string organization, bool validateTaskNames, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/yamlschema&validateTaskNames="+validateTaskNames+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET the Yaml schema used for Yaml file validation.
		/// Yamlschema_Get {organization}/_apis/distributedtask/yamlschema
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="validateTaskNames">Whether the schema should validate that tasks are actually installed (useful for offline tools where you don't want validation).</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public string Yamlschema_Get(string organization, bool validateTaskNames, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/distributedtask/yamlschema&validateTaskNames="+validateTaskNames+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of deployment groups by name or IDs.
		/// Deploymentgroups_List {organization}/{project}/_apis/distributedtask/deploymentgroups
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="name">Name of the deployment group.</param>
		/// <param name="actionFilter">Get only deployment groups on which this action can be performed.</param>
		/// <param name="expand">Include these additional details in the returned objects.</param>
		/// <param name="continuationToken">Get deployment groups with names greater than this continuationToken lexicographically.</param>
		/// <param name="top">Maximum number of deployment groups to return. Default is **1000**.</param>
		/// <param name="ids">Comma separated list of IDs of the deployment groups.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<DeploymentGroup[]> Deploymentgroups_ListAsync(string organization, string project, string name, Pools_Get_Agent_Pools_By_IdsActionFilter actionFilter, Deploymentgroups_ListExpand expand, string continuationToken, int top, string ids, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/deploymentgroups&name=" + (name==null? "" : Uri.EscapeDataString(name))+"&actionFilter=" + actionFilter+"&$expand=" + expand+"&continuationToken=" + (continuationToken==null? "" : Uri.EscapeDataString(continuationToken))+"&$top="+top+"&ids=" + (ids==null? "" : Uri.EscapeDataString(ids))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentGroup[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of deployment groups by name or IDs.
		/// Deploymentgroups_List {organization}/{project}/_apis/distributedtask/deploymentgroups
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="name">Name of the deployment group.</param>
		/// <param name="actionFilter">Get only deployment groups on which this action can be performed.</param>
		/// <param name="expand">Include these additional details in the returned objects.</param>
		/// <param name="continuationToken">Get deployment groups with names greater than this continuationToken lexicographically.</param>
		/// <param name="top">Maximum number of deployment groups to return. Default is **1000**.</param>
		/// <param name="ids">Comma separated list of IDs of the deployment groups.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public DeploymentGroup[] Deploymentgroups_List(string organization, string project, string name, Pools_Get_Agent_Pools_By_IdsActionFilter actionFilter, Deploymentgroups_ListExpand expand, string continuationToken, int top, string ids, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/deploymentgroups&name=" + (name==null? "" : Uri.EscapeDataString(name))+"&actionFilter=" + actionFilter+"&$expand=" + expand+"&continuationToken=" + (continuationToken==null? "" : Uri.EscapeDataString(continuationToken))+"&$top="+top+"&ids=" + (ids==null? "" : Uri.EscapeDataString(ids))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentGroup[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a deployment group.
		/// Deploymentgroups_Add {organization}/{project}/_apis/distributedtask/deploymentgroups
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Deployment group to create.</param>
		/// <returns>successful operation</returns>
		public async Task<DeploymentGroup> Deploymentgroups_AddAsync(string organization, string project, string api_version, DeploymentGroupCreateParameter requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/deploymentgroups&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a deployment group.
		/// Deploymentgroups_Add {organization}/{project}/_apis/distributedtask/deploymentgroups
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Deployment group to create.</param>
		/// <returns>successful operation</returns>
		public DeploymentGroup Deploymentgroups_Add(string organization, string project, string api_version, DeploymentGroupCreateParameter requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/deploymentgroups&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a deployment group by its ID.
		/// Deploymentgroups_Get {organization}/{project}/_apis/distributedtask/deploymentgroups/{deploymentGroupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="deploymentGroupId">ID of the deployment group.</param>
		/// <param name="actionFilter">Get the deployment group only if this action can be performed on it.</param>
		/// <param name="expand">Include these additional details in the returned object.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<DeploymentGroup> Deploymentgroups_GetAsync(string organization, string project, int deploymentGroupId, Pools_Get_Agent_Pools_By_IdsActionFilter actionFilter, Deploymentgroups_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/deploymentgroups/"+deploymentGroupId+"&actionFilter=" + actionFilter+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a deployment group by its ID.
		/// Deploymentgroups_Get {organization}/{project}/_apis/distributedtask/deploymentgroups/{deploymentGroupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="deploymentGroupId">ID of the deployment group.</param>
		/// <param name="actionFilter">Get the deployment group only if this action can be performed on it.</param>
		/// <param name="expand">Include these additional details in the returned object.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public DeploymentGroup Deploymentgroups_Get(string organization, string project, int deploymentGroupId, Pools_Get_Agent_Pools_By_IdsActionFilter actionFilter, Deploymentgroups_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/deploymentgroups/"+deploymentGroupId+"&actionFilter=" + actionFilter+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a deployment group.
		/// Deploymentgroups_Delete {organization}/{project}/_apis/distributedtask/deploymentgroups/{deploymentGroupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="deploymentGroupId">ID of the deployment group to be deleted.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Deploymentgroups_DeleteAsync(string organization, string project, int deploymentGroupId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/deploymentgroups/"+deploymentGroupId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a deployment group.
		/// Deploymentgroups_Delete {organization}/{project}/_apis/distributedtask/deploymentgroups/{deploymentGroupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="deploymentGroupId">ID of the deployment group to be deleted.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Deploymentgroups_Delete(string organization, string project, int deploymentGroupId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/deploymentgroups/"+deploymentGroupId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a deployment group.
		/// Deploymentgroups_Update {organization}/{project}/_apis/distributedtask/deploymentgroups/{deploymentGroupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="deploymentGroupId">ID of the deployment group.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Deployment group to update.</param>
		/// <returns>successful operation</returns>
		public async Task<DeploymentGroup> Deploymentgroups_UpdateAsync(string organization, string project, int deploymentGroupId, string api_version, DeploymentGroupUpdateParameter requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/deploymentgroups/"+deploymentGroupId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a deployment group.
		/// Deploymentgroups_Update {organization}/{project}/_apis/distributedtask/deploymentgroups/{deploymentGroupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="deploymentGroupId">ID of the deployment group.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Deployment group to update.</param>
		/// <returns>successful operation</returns>
		public DeploymentGroup Deploymentgroups_Update(string organization, string project, int deploymentGroupId, string api_version, DeploymentGroupUpdateParameter requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/deploymentgroups/"+deploymentGroupId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of deployment targets in a deployment group.
		/// Targets_List {organization}/{project}/_apis/distributedtask/deploymentgroups/{deploymentGroupId}/targets
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="deploymentGroupId">ID of the deployment group.</param>
		/// <param name="tags">Get only the deployment targets that contain all these comma separted list of tags.</param>
		/// <param name="name">Name pattern of the deployment targets to return.</param>
		/// <param name="partialNameMatch">When set to true, treats **name** as pattern. Else treats it as absolute match. Default is **false**.</param>
		/// <param name="expand">Include these additional details in the returned objects.</param>
		/// <param name="agentStatus">Get only deployment targets that have this status.</param>
		/// <param name="agentJobResult">Get only deployment targets that have this last job result.</param>
		/// <param name="continuationToken">Get deployment targets with names greater than this continuationToken lexicographically.</param>
		/// <param name="top">Maximum number of deployment targets to return. Default is **1000**.</param>
		/// <param name="enabled">Get only deployment targets that are enabled or disabled. Default is 'null' which returns all the targets.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<DeploymentMachine[]> Targets_ListAsync(string organization, string project, int deploymentGroupId, string tags, string name, bool partialNameMatch, Targets_ListExpand expand, Targets_ListAgentStatus agentStatus, Targets_ListAgentJobResult agentJobResult, string continuationToken, int top, bool enabled, string propertyFilters, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/deploymentgroups/"+deploymentGroupId+"/targets&tags=" + (tags==null? "" : Uri.EscapeDataString(tags))+"&name=" + (name==null? "" : Uri.EscapeDataString(name))+"&partialNameMatch="+partialNameMatch+"&$expand=" + expand+"&agentStatus=" + agentStatus+"&agentJobResult=" + agentJobResult+"&continuationToken=" + (continuationToken==null? "" : Uri.EscapeDataString(continuationToken))+"&$top="+top+"&enabled="+enabled+"&propertyFilters=" + (propertyFilters==null? "" : Uri.EscapeDataString(propertyFilters))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentMachine[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of deployment targets in a deployment group.
		/// Targets_List {organization}/{project}/_apis/distributedtask/deploymentgroups/{deploymentGroupId}/targets
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="deploymentGroupId">ID of the deployment group.</param>
		/// <param name="tags">Get only the deployment targets that contain all these comma separted list of tags.</param>
		/// <param name="name">Name pattern of the deployment targets to return.</param>
		/// <param name="partialNameMatch">When set to true, treats **name** as pattern. Else treats it as absolute match. Default is **false**.</param>
		/// <param name="expand">Include these additional details in the returned objects.</param>
		/// <param name="agentStatus">Get only deployment targets that have this status.</param>
		/// <param name="agentJobResult">Get only deployment targets that have this last job result.</param>
		/// <param name="continuationToken">Get deployment targets with names greater than this continuationToken lexicographically.</param>
		/// <param name="top">Maximum number of deployment targets to return. Default is **1000**.</param>
		/// <param name="enabled">Get only deployment targets that are enabled or disabled. Default is 'null' which returns all the targets.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public DeploymentMachine[] Targets_List(string organization, string project, int deploymentGroupId, string tags, string name, bool partialNameMatch, Targets_ListExpand expand, Targets_ListAgentStatus agentStatus, Targets_ListAgentJobResult agentJobResult, string continuationToken, int top, bool enabled, string propertyFilters, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/deploymentgroups/"+deploymentGroupId+"/targets&tags=" + (tags==null? "" : Uri.EscapeDataString(tags))+"&name=" + (name==null? "" : Uri.EscapeDataString(name))+"&partialNameMatch="+partialNameMatch+"&$expand=" + expand+"&agentStatus=" + agentStatus+"&agentJobResult=" + agentJobResult+"&continuationToken=" + (continuationToken==null? "" : Uri.EscapeDataString(continuationToken))+"&$top="+top+"&enabled="+enabled+"&propertyFilters=" + (propertyFilters==null? "" : Uri.EscapeDataString(propertyFilters))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentMachine[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update tags of a list of deployment targets in a deployment group.
		/// Targets_Update {organization}/{project}/_apis/distributedtask/deploymentgroups/{deploymentGroupId}/targets
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="deploymentGroupId">ID of the deployment group in which deployment targets are updated.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Deployment targets with tags to udpdate.</param>
		/// <returns>successful operation</returns>
		public async Task<DeploymentMachine[]> Targets_UpdateAsync(string organization, string project, int deploymentGroupId, string api_version, DeploymentTargetUpdateParameter[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/deploymentgroups/"+deploymentGroupId+"/targets&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentMachine[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update tags of a list of deployment targets in a deployment group.
		/// Targets_Update {organization}/{project}/_apis/distributedtask/deploymentgroups/{deploymentGroupId}/targets
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="deploymentGroupId">ID of the deployment group in which deployment targets are updated.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Deployment targets with tags to udpdate.</param>
		/// <returns>successful operation</returns>
		public DeploymentMachine[] Targets_Update(string organization, string project, int deploymentGroupId, string api_version, DeploymentTargetUpdateParameter[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/deploymentgroups/"+deploymentGroupId+"/targets&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentMachine[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a deployment target by its ID in a deployment group
		/// Targets_Get {organization}/{project}/_apis/distributedtask/deploymentgroups/{deploymentGroupId}/targets/{targetId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="deploymentGroupId">ID of the deployment group to which deployment target belongs.</param>
		/// <param name="targetId">ID of the deployment target to return.</param>
		/// <param name="expand">Include these additional details in the returned objects.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<DeploymentMachine> Targets_GetAsync(string organization, string project, int deploymentGroupId, int targetId, Targets_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/deploymentgroups/"+deploymentGroupId+"/targets/"+targetId+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentMachine>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a deployment target by its ID in a deployment group
		/// Targets_Get {organization}/{project}/_apis/distributedtask/deploymentgroups/{deploymentGroupId}/targets/{targetId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="deploymentGroupId">ID of the deployment group to which deployment target belongs.</param>
		/// <param name="targetId">ID of the deployment target to return.</param>
		/// <param name="expand">Include these additional details in the returned objects.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public DeploymentMachine Targets_Get(string organization, string project, int deploymentGroupId, int targetId, Targets_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/deploymentgroups/"+deploymentGroupId+"/targets/"+targetId+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentMachine>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a deployment target in a deployment group. This deletes the agent from associated deployment pool too.
		/// Targets_Delete {organization}/{project}/_apis/distributedtask/deploymentgroups/{deploymentGroupId}/targets/{targetId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="deploymentGroupId">ID of the deployment group in which deployment target is deleted.</param>
		/// <param name="targetId">ID of the deployment target to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Targets_DeleteAsync(string organization, string project, int deploymentGroupId, int targetId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/deploymentgroups/"+deploymentGroupId+"/targets/"+targetId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a deployment target in a deployment group. This deletes the agent from associated deployment pool too.
		/// Targets_Delete {organization}/{project}/_apis/distributedtask/deploymentgroups/{deploymentGroupId}/targets/{targetId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="deploymentGroupId">ID of the deployment group in which deployment target is deleted.</param>
		/// <param name="targetId">ID of the deployment target to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Targets_Delete(string organization, string project, int deploymentGroupId, int targetId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/deploymentgroups/"+deploymentGroupId+"/targets/"+targetId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of agent queues by pool ids
		/// Queues_Get_Agent_Queues_For_Pools {organization}/{project}/_apis/distributedtask/queues
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolIds">A comma-separated list of pool ids to get the corresponding queues for</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="actionFilter">Filter by whether the calling user has use or manage permissions</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TaskAgentQueue[]> Queues_Get_Agent_Queues_For_PoolsAsync(string organization, string poolIds, string project, Pools_Get_Agent_Pools_By_IdsActionFilter actionFilter, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/queues&poolIds=" + (poolIds==null? "" : Uri.EscapeDataString(poolIds))+"&actionFilter=" + actionFilter+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentQueue[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of agent queues by pool ids
		/// Queues_Get_Agent_Queues_For_Pools {organization}/{project}/_apis/distributedtask/queues
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="poolIds">A comma-separated list of pool ids to get the corresponding queues for</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="actionFilter">Filter by whether the calling user has use or manage permissions</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TaskAgentQueue[] Queues_Get_Agent_Queues_For_Pools(string organization, string poolIds, string project, Pools_Get_Agent_Pools_By_IdsActionFilter actionFilter, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/queues&poolIds=" + (poolIds==null? "" : Uri.EscapeDataString(poolIds))+"&actionFilter=" + actionFilter+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentQueue[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new agent queue to connect a project to an agent pool.
		/// Queues_Add {organization}/{project}/_apis/distributedtask/queues
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="authorizePipelines">Automatically authorize this queue when using YAML</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Details about the queue to create</param>
		/// <returns>successful operation</returns>
		public async Task<TaskAgentQueue> Queues_AddAsync(string organization, string project, bool authorizePipelines, string api_version, TaskAgentQueue requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/queues&authorizePipelines="+authorizePipelines+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentQueue>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a new agent queue to connect a project to an agent pool.
		/// Queues_Add {organization}/{project}/_apis/distributedtask/queues
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="authorizePipelines">Automatically authorize this queue when using YAML</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Details about the queue to create</param>
		/// <returns>successful operation</returns>
		public TaskAgentQueue Queues_Add(string organization, string project, bool authorizePipelines, string api_version, TaskAgentQueue requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/queues&authorizePipelines="+authorizePipelines+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentQueue>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get information about an agent queue.
		/// Queues_Get {organization}/{project}/_apis/distributedtask/queues/{queueId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="queueId">The agent queue to get information about</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="actionFilter">Filter by whether the calling user has use or manage permissions</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TaskAgentQueue> Queues_GetAsync(string organization, int queueId, string project, Pools_Get_Agent_Pools_By_IdsActionFilter actionFilter, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/queues/"+queueId+"&actionFilter=" + actionFilter+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentQueue>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about an agent queue.
		/// Queues_Get {organization}/{project}/_apis/distributedtask/queues/{queueId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="queueId">The agent queue to get information about</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="actionFilter">Filter by whether the calling user has use or manage permissions</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TaskAgentQueue Queues_Get(string organization, int queueId, string project, Pools_Get_Agent_Pools_By_IdsActionFilter actionFilter, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/queues/"+queueId+"&actionFilter=" + actionFilter+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskAgentQueue>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes an agent queue from a project.
		/// Queues_Delete {organization}/{project}/_apis/distributedtask/queues/{queueId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="queueId">The agent queue to remove</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Queues_DeleteAsync(string organization, int queueId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/queues/"+queueId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes an agent queue from a project.
		/// Queues_Delete {organization}/{project}/_apis/distributedtask/queues/{queueId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="queueId">The agent queue to remove</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Queues_Delete(string organization, int queueId, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/queues/"+queueId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a task group.
		/// Taskgroups_Add {organization}/{project}/_apis/distributedtask/taskgroups
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Task group object to create.</param>
		/// <returns>successful operation</returns>
		public async Task<TaskGroup> Taskgroups_AddAsync(string organization, string project, string api_version, TaskGroupCreateParameter requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/taskgroups&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a task group.
		/// Taskgroups_Add {organization}/{project}/_apis/distributedtask/taskgroups
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Task group object to create.</param>
		/// <returns>successful operation</returns>
		public TaskGroup Taskgroups_Add(string organization, string project, string api_version, TaskGroupCreateParameter requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/taskgroups&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List task groups.
		/// Taskgroups_List {organization}/{project}/_apis/distributedtask/taskgroups/{taskGroupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="taskGroupId">Id of the task group.</param>
		/// <param name="expanded">'true' to recursively expand task groups. Default is 'false'.</param>
		/// <param name="taskIdFilter">Guid of the taskId to filter.</param>
		/// <param name="deleted">'true'to include deleted task groups. Default is 'false'.</param>
		/// <param name="top">Number of task groups to get.</param>
		/// <param name="continuationToken">Gets the task groups after the continuation token provided.</param>
		/// <param name="queryOrder">Gets the results in the defined order. Default is 'CreatedOnDescending'.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<TaskGroup[]> Taskgroups_ListAsync(string organization, string project, string taskGroupId, bool expanded, string taskIdFilter, bool deleted, int top, System.DateTimeOffset continuationToken, Taskgroups_ListQueryOrder queryOrder, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/taskgroups/"+ (taskGroupId==null? "" : Uri.EscapeDataString(taskGroupId))+"&expanded="+expanded+"&taskIdFilter=" + (taskIdFilter==null? "" : Uri.EscapeDataString(taskIdFilter))+"&deleted="+deleted+"&$top="+top+"&continuationToken=" + continuationToken.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&queryOrder=" + queryOrder+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskGroup[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List task groups.
		/// Taskgroups_List {organization}/{project}/_apis/distributedtask/taskgroups/{taskGroupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="taskGroupId">Id of the task group.</param>
		/// <param name="expanded">'true' to recursively expand task groups. Default is 'false'.</param>
		/// <param name="taskIdFilter">Guid of the taskId to filter.</param>
		/// <param name="deleted">'true'to include deleted task groups. Default is 'false'.</param>
		/// <param name="top">Number of task groups to get.</param>
		/// <param name="continuationToken">Gets the task groups after the continuation token provided.</param>
		/// <param name="queryOrder">Gets the results in the defined order. Default is 'CreatedOnDescending'.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public TaskGroup[] Taskgroups_List(string organization, string project, string taskGroupId, bool expanded, string taskIdFilter, bool deleted, int top, System.DateTimeOffset continuationToken, Taskgroups_ListQueryOrder queryOrder, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/taskgroups/"+ (taskGroupId==null? "" : Uri.EscapeDataString(taskGroupId))+"&expanded="+expanded+"&taskIdFilter=" + (taskIdFilter==null? "" : Uri.EscapeDataString(taskIdFilter))+"&deleted="+deleted+"&$top="+top+"&continuationToken=" + continuationToken.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&queryOrder=" + queryOrder+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskGroup[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a task group.
		/// Taskgroups_Update {organization}/{project}/_apis/distributedtask/taskgroups/{taskGroupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="taskGroupId">Id of the task group to update.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Task group to update.</param>
		/// <returns>successful operation</returns>
		public async Task<TaskGroup> Taskgroups_UpdateAsync(string organization, string project, string taskGroupId, string api_version, TaskGroupUpdateParameter requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/taskgroups/"+ (taskGroupId==null? "" : Uri.EscapeDataString(taskGroupId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a task group.
		/// Taskgroups_Update {organization}/{project}/_apis/distributedtask/taskgroups/{taskGroupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="taskGroupId">Id of the task group to update.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Task group to update.</param>
		/// <returns>successful operation</returns>
		public TaskGroup Taskgroups_Update(string organization, string project, string taskGroupId, string api_version, TaskGroupUpdateParameter requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/taskgroups/"+ (taskGroupId==null? "" : Uri.EscapeDataString(taskGroupId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaskGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a task group.
		/// Taskgroups_Delete {organization}/{project}/_apis/distributedtask/taskgroups/{taskGroupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="taskGroupId">Id of the task group to be deleted.</param>
		/// <param name="comment">Comments to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Taskgroups_DeleteAsync(string organization, string project, string taskGroupId, string comment, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/taskgroups/"+ (taskGroupId==null? "" : Uri.EscapeDataString(taskGroupId))+"&comment=" + (comment==null? "" : Uri.EscapeDataString(comment))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a task group.
		/// Taskgroups_Delete {organization}/{project}/_apis/distributedtask/taskgroups/{taskGroupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="taskGroupId">Id of the task group to be deleted.</param>
		/// <param name="comment">Comments to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Taskgroups_Delete(string organization, string project, string taskGroupId, string comment, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/taskgroups/"+ (taskGroupId==null? "" : Uri.EscapeDataString(taskGroupId))+"&comment=" + (comment==null? "" : Uri.EscapeDataString(comment))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get variable groups by ids.
		/// Variablegroups_Get_Variable_Groups_By_Id {organization}/{project}/_apis/distributedtask/variablegroups
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="groupIds">Comma separated list of Ids of variable groups.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<VariableGroup[]> Variablegroups_Get_Variable_Groups_By_IdAsync(string organization, string project, string groupIds, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/variablegroups&groupIds=" + (groupIds==null? "" : Uri.EscapeDataString(groupIds))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VariableGroup[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get variable groups by ids.
		/// Variablegroups_Get_Variable_Groups_By_Id {organization}/{project}/_apis/distributedtask/variablegroups
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="groupIds">Comma separated list of Ids of variable groups.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public VariableGroup[] Variablegroups_Get_Variable_Groups_By_Id(string organization, string project, string groupIds, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/variablegroups&groupIds=" + (groupIds==null? "" : Uri.EscapeDataString(groupIds))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VariableGroup[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a variable group.
		/// Variablegroups_Get {organization}/{project}/_apis/distributedtask/variablegroups/{groupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="groupId">Id of the variable group.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<VariableGroup> Variablegroups_GetAsync(string organization, string project, int groupId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/variablegroups/"+groupId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VariableGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a variable group.
		/// Variablegroups_Get {organization}/{project}/_apis/distributedtask/variablegroups/{groupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="groupId">Id of the variable group.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public VariableGroup Variablegroups_Get(string organization, string project, int groupId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/distributedtask/variablegroups/"+groupId+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VariableGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Pools_Get_Agent_Pools_By_IdsActionFilter
	{
		
		none = 0,
		
		manage = 1,
		
		use = 2,
	}
	
	public enum Deploymentgroups_ListExpand
	{
		
		none = 0,
		
		machines = 1,
		
		tags = 2,
	}
	
	public enum Targets_ListExpand
	{
		
		none = 0,
		
		capabilities = 1,
		
		assignedRequest = 2,
		
		lastCompletedRequest = 3,
	}
	
	public enum Targets_ListAgentStatus
	{
		
		offline = 0,
		
		online = 1,
		
		all = 2,
	}
	
	public enum Targets_ListAgentJobResult
	{
		
		failed = 0,
		
		passed = 1,
		
		neverDeployed = 2,
		
		all = 3,
	}
	
	public enum Taskgroups_ListQueryOrder
	{
		
		createdOnAscending = 0,
		
		createdOnDescending = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
