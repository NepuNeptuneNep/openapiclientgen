//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public class AadOauthTokenRequest
	{
		
		public System.Nullable<System.Boolean> Refresh { get; set; }
		
		public string Resource { get; set; }
		
		public string TenantId { get; set; }
		
		public string Token { get; set; }
	}
	
	public class AadOauthTokenResult
	{
		
		public string AccessToken { get; set; }
		
		public string RefreshTokenCache { get; set; }
	}
	
	public class AuthConfiguration
	{
		
		/// <summary>
		/// Gets or sets parameters contained in configuration object.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, Parameter> Parameters { get; set; }
	}
	
	public class Parameter
	{
		
		public System.Nullable<System.Boolean> IsSecret { get; set; }
		
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Specifies the authentication scheme to be used for authentication.
	/// </summary>
	public class AuthenticationSchemeReference
	{
		
		/// <summary>
		/// Gets or sets the key and value of the fields used for authentication.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Inputs { get; set; }
		
		/// <summary>
		/// Gets or sets the type of authentication scheme of an endpoint.
		/// </summary>
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents the header of the REST request.
	/// </summary>
	public class AuthorizationHeader
	{
		
		/// <summary>
		/// Gets or sets the name of authorization header.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Gets or sets the value of authorization header.
		/// </summary>
		public string Value { get; set; }
	}
	
	public class AzureAppService
	{
		
		public string Id { get; set; }
		
		public string Name { get; set; }
	}
	
	public class AzureKeyVaultPermission
	{
		
		public string Vault { get; set; }
	}
	
	/// <summary>
	/// Azure Management Group
	/// </summary>
	public class AzureManagementGroup
	{
		
		/// <summary>
		/// Display name of azure management group
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Id of azure management group
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Azure management group name
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Id of tenant from which azure management group belogs
		/// </summary>
		public string TenantId { get; set; }
	}
	
	/// <summary>
	/// Azure management group query result
	/// </summary>
	public class AzureManagementGroupQueryResult
	{
		
		/// <summary>
		/// Error message in case of an exception
		/// </summary>
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// List of azure management groups
		/// </summary>
		public AzureManagementGroup[] Value { get; set; }
	}
	
	public class AzureMLWorkspace
	{
		
		public string Id { get; set; }
		
		public string Location { get; set; }
		
		public string Name { get; set; }
	}
	
	public class AzurePermission
	{
		
		public System.Nullable<System.Boolean> Provisioned { get; set; }
		
		public string ResourceProvider { get; set; }
	}
	
	public class AzureResourcePermission
	{
		
		public string ResourceGroup { get; set; }
	}
	
	public class AzureRoleAssignmentPermission
	{
		
		public string RoleAssignmentId { get; set; }
	}
	
	public class AzureSpnOperationStatus
	{
		
		public string State { get; set; }
		
		public string StatusMessage { get; set; }
	}
	
	public class AzureSubscription
	{
		
		public string DisplayName { get; set; }
		
		public string SubscriptionId { get; set; }
		
		public string SubscriptionTenantId { get; set; }
		
		public string SubscriptionTenantName { get; set; }
	}
	
	public class AzureSubscriptionQueryResult
	{
		
		public string ErrorMessage { get; set; }
		
		public AzureSubscription[] Value { get; set; }
	}
	
	/// <summary>
	/// Specifies the client certificate to be used for the endpoint request.
	/// </summary>
	public class ClientCertificate
	{
		
		/// <summary>
		/// Gets or sets the value of client certificate.
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Specifies the data sources for this endpoint.
	/// </summary>
	public class DataSource
	{
		
		/// <summary>
		/// Specifies the authentication scheme to be used for authentication.
		/// </summary>
		public AuthenticationSchemeReference AuthenticationScheme { get; set; }
		
		/// <summary>
		/// Gets or sets the pagination format supported by this data source(ContinuationToken/SkipTop).
		/// </summary>
		public string CallbackContextTemplate { get; set; }
		
		/// <summary>
		/// Gets or sets the template to check if subsequent call is needed.
		/// </summary>
		public string CallbackRequiredTemplate { get; set; }
		
		/// <summary>
		/// Gets or sets the endpoint url of the data source.
		/// </summary>
		public string EndpointUrl { get; set; }
		
		/// <summary>
		/// Gets or sets the authorization headers of the request.
		/// </summary>
		public AuthorizationHeader[] Headers { get; set; }
		
		/// <summary>
		/// Gets or sets the initial value of the query params.
		/// </summary>
		public string InitialContextTemplate { get; set; }
		
		/// <summary>
		/// Gets or sets the name of the data source.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Gets or sets the request content of the endpoint request.
		/// </summary>
		public string RequestContent { get; set; }
		
		/// <summary>
		/// Gets or sets the request method of the endpoint request.
		/// </summary>
		public string RequestVerb { get; set; }
		
		/// <summary>
		/// Gets or sets the resource url of the endpoint request.
		/// </summary>
		public string ResourceUrl { get; set; }
		
		/// <summary>
		/// Gets or sets the result selector to filter the response of the endpoint request.
		/// </summary>
		public string ResultSelector { get; set; }
	}
	
	/// <summary>
	/// Represents the data source binding of the endpoint.
	/// </summary>
	public class DataSourceBinding
	{
	}
	
	/// <summary>
	/// Represents binding of data source for the service endpoint request.
	/// </summary>
	public class DataSourceBindingBase
	{
		
		/// <summary>
		/// Pagination format supported by this data source(ContinuationToken/SkipTop).
		/// </summary>
		public string CallbackContextTemplate { get; set; }
		
		/// <summary>
		/// Subsequent calls needed?
		/// </summary>
		public string CallbackRequiredTemplate { get; set; }
		
		/// <summary>
		/// Gets or sets the name of the data source.
		/// </summary>
		public string DataSourceName { get; set; }
		
		/// <summary>
		/// Gets or sets the endpoint Id.
		/// </summary>
		public string EndpointId { get; set; }
		
		/// <summary>
		/// Gets or sets the url of the service endpoint.
		/// </summary>
		public string EndpointUrl { get; set; }
		
		/// <summary>
		/// Gets or sets the authorization headers.
		/// </summary>
		public AuthorizationHeader[] Headers { get; set; }
		
		/// <summary>
		/// Defines the initial value of the query params
		/// </summary>
		public string InitialContextTemplate { get; set; }
		
		/// <summary>
		/// Gets or sets the parameters for the data source.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Parameters { get; set; }
		
		/// <summary>
		/// Gets or sets http request body
		/// </summary>
		public string RequestContent { get; set; }
		
		/// <summary>
		/// Gets or sets http request verb
		/// </summary>
		public string RequestVerb { get; set; }
		
		/// <summary>
		/// Gets or sets the result selector.
		/// </summary>
		public string ResultSelector { get; set; }
		
		/// <summary>
		/// Gets or sets the result template.
		/// </summary>
		public string ResultTemplate { get; set; }
		
		/// <summary>
		/// Gets or sets the target of the data source.
		/// </summary>
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Represents details of the service endpoint data source.
	/// </summary>
	public class DataSourceDetails
	{
		
		/// <summary>
		/// Gets or sets the data source name.
		/// </summary>
		public string DataSourceName { get; set; }
		
		/// <summary>
		/// Gets or sets the data source url.
		/// </summary>
		public string DataSourceUrl { get; set; }
		
		/// <summary>
		/// Gets or sets the request headers.
		/// </summary>
		public AuthorizationHeader[] Headers { get; set; }
		
		/// <summary>
		/// Gets or sets the initialization context used for the initial call to the data source
		/// </summary>
		public string InitialContextTemplate { get; set; }
		
		/// <summary>
		/// Gets the parameters of data source.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Parameters { get; set; }
		
		/// <summary>
		/// Gets or sets the data source request content.
		/// </summary>
		public string RequestContent { get; set; }
		
		/// <summary>
		/// Gets or sets the data source request verb. Get/Post are the only implemented types
		/// </summary>
		public string RequestVerb { get; set; }
		
		/// <summary>
		/// Gets or sets the resource url of data source.
		/// </summary>
		public string ResourceUrl { get; set; }
		
		/// <summary>
		/// Gets or sets the result selector.
		/// </summary>
		public string ResultSelector { get; set; }
	}
	
	/// <summary>
	/// Represents the details of the input on which a given input is dependent.
	/// </summary>
	public class DependencyBinding
	{
		
		/// <summary>
		/// Gets or sets the value of the field on which url is dependent.
		/// </summary>
		public string Key { get; set; }
		
		/// <summary>
		/// Gets or sets the corresponding value of url.
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Represents the dependency data for the endpoint inputs.
	/// </summary>
	public class DependencyData
	{
		
		/// <summary>
		/// Gets or sets the category of dependency data.
		/// </summary>
		public string Input { get; set; }
		
		/// <summary>
		/// Gets or sets the key-value pair to specify properties and their values.
		/// </summary>
		public string[] Map { get; set; }
	}
	
	/// <summary>
	/// Represents the inputs on which any given input is dependent.
	/// </summary>
	public class DependsOn
	{
		
		/// <summary>
		/// Gets or sets the ID of the field on which URL's value is dependent.
		/// </summary>
		public string Input { get; set; }
		
		/// <summary>
		/// Gets or sets key-value pair containing other's field value and corresponding url value.
		/// </summary>
		public DependencyBinding[] Map { get; set; }
	}
	
	/// <summary>
	/// Represents the authorization used for service endpoint.
	/// </summary>
	public class EndpointAuthorization
	{
		
		/// <summary>
		/// Gets or sets the parameters for the selected authorization scheme.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Parameters { get; set; }
		
		/// <summary>
		/// Gets or sets the scheme used for service endpoint authentication.
		/// </summary>
		public string Scheme { get; set; }
	}
	
	public class EndpointOperationStatus
	{
		
		public string State { get; set; }
		
		public string StatusMessage { get; set; }
	}
	
	/// <summary>
	/// Represents url of the service endpoint.
	/// </summary>
	public class EndpointUrl
	{
		
		/// <summary>
		/// Represents the inputs on which any given input is dependent.
		/// </summary>
		public DependsOn DependsOn { get; set; }
		
		/// <summary>
		/// Gets or sets the display name of service endpoint url.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Gets or sets the format of the url.
		/// </summary>
		public string Format { get; set; }
		
		/// <summary>
		/// Gets or sets the help text of service endpoint url.
		/// </summary>
		public string HelpText { get; set; }
		
		/// <summary>
		/// Gets or sets the visibility of service endpoint url.
		/// </summary>
		public string IsVisible { get; set; }
		
		/// <summary>
		/// Gets or sets the value of service endpoint url.
		/// </summary>
		public string Value { get; set; }
	}
	
	public class GraphSubjectBase
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
		/// </summary>
		public string Descriptor { get; set; }
		
		/// <summary>
		/// This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// This url is the full route to the source resource of this graph subject.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// The class to represent a collection of REST reference links.
	/// </summary>
	public class ReferenceLinks
	{
		
		/// <summary>
		/// The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Links { get; set; }
	}
	
	/// <summary>
	/// Specifies the public url of the help documentation.
	/// </summary>
	public class HelpLink
	{
		
		/// <summary>
		/// Gets or sets the help text.
		/// </summary>
		public string Text { get; set; }
		
		/// <summary>
		/// Gets or sets the public url of the help documentation.
		/// </summary>
		public string Url { get; set; }
	}
	
	public class IdentityRef
	{
		
		/// <summary>
		/// Deprecated - Can be retrieved by querying the Graph user referenced in the "self" entry of the IdentityRef "_links" dictionary
		/// </summary>
		public string DirectoryAlias { get; set; }
		
		public string Id { get; set; }
		
		/// <summary>
		/// Deprecated - Available in the "avatar" entry of the IdentityRef "_links" dictionary
		/// </summary>
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Deprecated - Can be retrieved by querying the Graph membership state referenced in the "membershipState" entry of the GraphUser "_links" dictionary
		/// </summary>
		public System.Nullable<System.Boolean> Inactive { get; set; }
		
		/// <summary>
		/// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsAadUserType/Descriptor.IsAadGroupType)
		/// </summary>
		public System.Nullable<System.Boolean> IsAadIdentity { get; set; }
		
		/// <summary>
		/// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsGroupType)
		/// </summary>
		public System.Nullable<System.Boolean> IsContainer { get; set; }
		
		public System.Nullable<System.Boolean> IsDeletedInOrigin { get; set; }
		
		/// <summary>
		/// Deprecated - not in use in most preexisting implementations of ToIdentityRef
		/// </summary>
		public string ProfileUrl { get; set; }
		
		/// <summary>
		/// Deprecated - use Domain+PrincipalName instead
		/// </summary>
		public string UniqueName { get; set; }
	}
	
	/// <summary>
	/// Describes an input for subscriptions.
	/// </summary>
	public class InputDescriptor
	{
		
		/// <summary>
		/// The ids of all inputs that the value of this input is dependent on.
		/// </summary>
		public string[] DependencyInputIds { get; set; }
		
		/// <summary>
		/// Description of what this input is used for
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// The group localized name to which this input belongs and can be shown as a header for the container that will include all the inputs in the group.
		/// </summary>
		public string GroupName { get; set; }
		
		/// <summary>
		/// If true, the value information for this input is dynamic and should be fetched when the value of dependency inputs change.
		/// </summary>
		public System.Nullable<System.Boolean> HasDynamicValueInformation { get; set; }
		
		/// <summary>
		/// Identifier for the subscription input
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Mode in which the value of this input should be entered
		/// </summary>
		public System.Nullable<InputDescriptorInputMode> InputMode { get; set; }
		
		/// <summary>
		/// Gets whether this input is confidential, such as for a password or application key
		/// </summary>
		public System.Nullable<System.Boolean> IsConfidential { get; set; }
		
		/// <summary>
		/// Localized name which can be shown as a label for the subscription input
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Custom properties for the input which can be used by the service provider
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Properties { get; set; }
		
		/// <summary>
		/// Underlying data type for the input value. When this value is specified, InputMode, Validation and Values are optional.
		/// </summary>
		public string Type { get; set; }
		
		/// <summary>
		/// Gets whether this input is included in the default generated action description.
		/// </summary>
		public System.Nullable<System.Boolean> UseInDefaultDescription { get; set; }
		
		/// <summary>
		/// Describes what values are valid for a subscription input
		/// </summary>
		public InputValidation Validation { get; set; }
		
		/// <summary>
		/// A hint for input value. It can be used in the UI as the input placeholder.
		/// </summary>
		public string ValueHint { get; set; }
		
		/// <summary>
		/// Information about the possible/allowed values for a given subscription input
		/// </summary>
		public InputValues Values { get; set; }
	}
	
	public enum InputDescriptorInputMode
	{
		
		none = 0,
		
		textBox = 1,
		
		passwordBox = 2,
		
		combo = 3,
		
		radioButtons = 4,
		
		checkBox = 5,
		
		textArea = 6,
	}
	
	/// <summary>
	/// Describes what values are valid for a subscription input
	/// </summary>
	public class InputValidation
	{
		
		/// <summary>
		/// Gets or sets the data data type to validate.
		/// </summary>
		public System.Nullable<InputValidationDataType> DataType { get; set; }
		
		/// <summary>
		/// Gets or sets if this is a required field.
		/// </summary>
		public System.Nullable<System.Boolean> IsRequired { get; set; }
		
		/// <summary>
		/// Gets or sets the maximum length of this descriptor.
		/// </summary>
		public System.Nullable<System.Int32> MaxLength { get; set; }
		
		/// <summary>
		/// Gets or sets the minimum value for this descriptor.
		/// </summary>
		public string MaxValue { get; set; }
		
		/// <summary>
		/// Gets or sets the minimum length of this descriptor.
		/// </summary>
		public System.Nullable<System.Int32> MinLength { get; set; }
		
		/// <summary>
		/// Gets or sets the minimum value for this descriptor.
		/// </summary>
		public string MinValue { get; set; }
		
		/// <summary>
		/// Gets or sets the pattern to validate.
		/// </summary>
		public string Pattern { get; set; }
		
		/// <summary>
		/// Gets or sets the error on pattern mismatch.
		/// </summary>
		public string PatternMismatchErrorMessage { get; set; }
	}
	
	public enum InputValidationDataType
	{
		
		none = 0,
		
		_string = 1,
		
		number = 2,
		
		boolean = 3,
		
		guid = 4,
		
		uri = 5,
	}
	
	/// <summary>
	/// Information about the possible/allowed values for a given subscription input
	/// </summary>
	public class InputValues
	{
		
		/// <summary>
		/// The default value to use for this input
		/// </summary>
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Error information related to a subscription input value.
		/// </summary>
		public InputValuesError Error { get; set; }
		
		/// <summary>
		/// The id of the input
		/// </summary>
		public string InputId { get; set; }
		
		/// <summary>
		/// Should this input be disabled
		/// </summary>
		public System.Nullable<System.Boolean> IsDisabled { get; set; }
		
		/// <summary>
		/// Should the value be restricted to one of the values in the PossibleValues (True) or are the values in PossibleValues just a suggestion (False)
		/// </summary>
		public System.Nullable<System.Boolean> IsLimitedToPossibleValues { get; set; }
		
		/// <summary>
		/// Should this input be made read-only
		/// </summary>
		public System.Nullable<System.Boolean> IsReadOnly { get; set; }
		
		/// <summary>
		/// Possible values that this input can take
		/// </summary>
		public InputValue[] PossibleValues { get; set; }
	}
	
	/// <summary>
	/// Error information related to a subscription input value.
	/// </summary>
	public class InputValuesError
	{
		
		/// <summary>
		/// The error message.
		/// </summary>
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Information about a single value for an input
	/// </summary>
	public class InputValue
	{
		
		/// <summary>
		/// Any other data about this input
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Data { get; set; }
		
		/// <summary>
		/// The text to show for the display of this value
		/// </summary>
		public string DisplayValue { get; set; }
		
		/// <summary>
		/// The value to store for this input
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Represents a JSON object.
	/// </summary>
	public class JObject
	{
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken Item { get; set; }
		
		/// <summary>
		/// Gets the node type for this JToken.
		/// </summary>
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents an abstract JSON token.
	/// </summary>
	public class JToken
	{
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken First { get; set; }
		
		/// <summary>
		/// Gets a value indicating whether this token has child tokens.
		/// </summary>
		public System.Nullable<System.Boolean> HasValues { get; set; }
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken Item { get; set; }
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken Last { get; set; }
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken Next { get; set; }
		
		/// <summary>
		/// Gets or sets the parent.
		/// </summary>
		public string Parent { get; set; }
		
		/// <summary>
		/// Gets the path of the JSON token.
		/// </summary>
		public string Path { get; set; }
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken Previous { get; set; }
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken Root { get; set; }
		
		/// <summary>
		/// Gets the node type for this JToken.
		/// </summary>
		public string Type { get; set; }
	}
	
	public class OAuth2TokenResult
	{
		
		public string AccessToken { get; set; }
		
		public string Error { get; set; }
		
		public string ErrorDescription { get; set; }
		
		public string ExpiresIn { get; set; }
		
		public string IssuedAt { get; set; }
		
		public string RefreshToken { get; set; }
		
		public string Scope { get; set; }
	}
	
	public class OAuthConfiguration
	{
		
		/// <summary>
		/// Gets or sets the ClientId
		/// </summary>
		public string ClientId { get; set; }
		
		/// <summary>
		/// Gets or sets the ClientSecret
		/// </summary>
		public string ClientSecret { get; set; }
		
		public IdentityRef CreatedBy { get; set; }
		
		/// <summary>
		/// Gets or sets the time when config was created.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedOn { get; set; }
		
		/// <summary>
		/// Gets or sets the type of the endpoint.
		/// </summary>
		public string EndpointType { get; set; }
		
		/// <summary>
		/// Gets or sets the unique identifier of this field
		/// </summary>
		public string Id { get; set; }
		
		public IdentityRef ModifiedBy { get; set; }
		
		/// <summary>
		/// Gets or sets the time when variable group was modified
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ModifiedOn { get; set; }
		
		/// <summary>
		/// Gets or sets the name
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Gets or sets the Url
		/// </summary>
		public string Url { get; set; }
	}
	
	public class OAuthConfigurationParams
	{
		
		/// <summary>
		/// Gets or sets the ClientId
		/// </summary>
		public string ClientId { get; set; }
		
		/// <summary>
		/// Gets or sets the ClientSecret
		/// </summary>
		public string ClientSecret { get; set; }
		
		/// <summary>
		/// Gets or sets the type of the endpoint.
		/// </summary>
		public string EndpointType { get; set; }
		
		/// <summary>
		/// Gets or sets the name
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Gets or sets the Url
		/// </summary>
		public string Url { get; set; }
	}
	
	public class OAuthEndpointStatus
	{
		
		public string State { get; set; }
		
		public string StatusMessage { get; set; }
	}
	
	public class ProjectReference
	{
		
		public string Id { get; set; }
		
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Specify the properties for refreshing the endpoint authentication object being queried
	/// </summary>
	public class RefreshAuthenticationParameters
	{
		
		/// <summary>
		/// EndpointId which needs new authentication params
		/// </summary>
		public string EndpointId { get; set; }
		
		/// <summary>
		/// Scope of the token requested. For GitHub marketplace apps, scope contains repository Ids
		/// </summary>
		public int[] Scope { get; set; }
		
		/// <summary>
		/// The requested endpoint authentication should be valid for _ minutes. Authentication params will not be refreshed if the token contained in endpoint already has active token.
		/// </summary>
		public string TokenValidityInMinutes { get; set; }
	}
	
	/// <summary>
	/// Represents template to transform the result data.
	/// </summary>
	public class ResultTransformationDetails
	{
		
		/// <summary>
		/// Gets or sets the template for callback parameters
		/// </summary>
		public string CallbackContextTemplate { get; set; }
		
		/// <summary>
		/// Gets or sets the template to decide whether to callback or not
		/// </summary>
		public string CallbackRequiredTemplate { get; set; }
		
		/// <summary>
		/// Gets or sets the template for result transformation.
		/// </summary>
		public string ResultTemplate { get; set; }
	}
	
	/// <summary>
	/// Represents an endpoint which may be used by an orchestration job.
	/// </summary>
	public class ServiceEndpoint
	{
		
		public IdentityRef AdministratorsGroup { get; set; }
		
		/// <summary>
		/// Represents the authorization used for service endpoint.
		/// </summary>
		public EndpointAuthorization Authorization { get; set; }
		
		public IdentityRef CreatedBy { get; set; }
		
		public System.Collections.Generic.Dictionary<string, object> Data { get; set; }
		
		/// <summary>
		/// Gets or sets the description of endpoint.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// This is a deprecated field.
		/// </summary>
		public string GroupScopeId { get; set; }
		
		/// <summary>
		/// Gets or sets the identifier of this endpoint.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// EndPoint state indicator
		/// </summary>
		public System.Nullable<System.Boolean> IsReady { get; set; }
		
		/// <summary>
		/// Indicates whether service endpoint is shared with other projects or not.
		/// </summary>
		public System.Nullable<System.Boolean> IsShared { get; set; }
		
		/// <summary>
		/// Gets or sets the friendly name of the endpoint.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Represents a JSON object.
		/// </summary>
		public JObject OperationStatus { get; set; }
		
		/// <summary>
		/// Owner of the endpoint Supported values are "library", "agentcloud"
		/// </summary>
		public string Owner { get; set; }
		
		public IdentityRef ReadersGroup { get; set; }
		
		/// <summary>
		/// All other project references where the service endpoint is shared.
		/// </summary>
		public ServiceEndpointProjectReference[] ServiceEndpointProjectReferences { get; set; }
		
		/// <summary>
		/// Gets or sets the type of the endpoint.
		/// </summary>
		public string Type { get; set; }
		
		/// <summary>
		/// Gets or sets the url of the endpoint.
		/// </summary>
		public string Url { get; set; }
	}
	
	public class ServiceEndpointProjectReference
	{
		
		/// <summary>
		/// Gets or sets description of the service endpoint.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Gets or sets name of the service endpoint.
		/// </summary>
		public string Name { get; set; }
		
		public ProjectReference ProjectReference { get; set; }
	}
	
	/// <summary>
	/// Represents the authentication scheme used to authenticate the endpoint.
	/// </summary>
	public class ServiceEndpointAuthenticationScheme
	{
		
		/// <summary>
		/// Gets or sets the authorization headers of service endpoint authentication scheme.
		/// </summary>
		public AuthorizationHeader[] AuthorizationHeaders { get; set; }
		
		/// <summary>
		/// Gets or sets the Authorization url required to authenticate using OAuth2
		/// </summary>
		public string AuthorizationUrl { get; set; }
		
		/// <summary>
		/// Gets or sets the certificates of service endpoint authentication scheme.
		/// </summary>
		public ClientCertificate[] ClientCertificates { get; set; }
		
		/// <summary>
		/// Gets or sets the data source bindings of the endpoint.
		/// </summary>
		public DataSourceBinding[] DataSourceBindings { get; set; }
		
		/// <summary>
		/// Gets or sets the display name for the service endpoint authentication scheme.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Gets or sets the input descriptors for the service endpoint authentication scheme.
		/// </summary>
		public InputDescriptor[] InputDescriptors { get; set; }
		
		/// <summary>
		/// Gets or sets the properties of service endpoint authentication scheme.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Properties { get; set; }
		
		/// <summary>
		/// Gets or sets whether this auth scheme requires OAuth2 configuration or not.
		/// </summary>
		public System.Nullable<System.Boolean> RequiresOAuth2Configuration { get; set; }
		
		/// <summary>
		/// Gets or sets the scheme for service endpoint authentication.
		/// </summary>
		public string Scheme { get; set; }
	}
	
	/// <summary>
	/// Represents details of the service endpoint.
	/// </summary>
	public class ServiceEndpointDetails
	{
		
		/// <summary>
		/// Represents the authorization used for service endpoint.
		/// </summary>
		public EndpointAuthorization Authorization { get; set; }
		
		/// <summary>
		/// Gets or sets the data of service endpoint.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Data { get; set; }
		
		/// <summary>
		/// Gets or sets the type of service endpoint.
		/// </summary>
		public string Type { get; set; }
		
		/// <summary>
		/// Gets or sets the connection url of service endpoint.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Represents service endpoint execution data.
	/// </summary>
	public class ServiceEndpointExecutionData
	{
		
		/// <summary>
		/// Represents execution owner of the service endpoint.
		/// </summary>
		public ServiceEndpointExecutionOwner Definition { get; set; }
		
		/// <summary>
		/// Gets the finish time of service endpoint execution.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> FinishTime { get; set; }
		
		/// <summary>
		/// Gets the Id of service endpoint execution data.
		/// </summary>
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Represents execution owner of the service endpoint.
		/// </summary>
		public ServiceEndpointExecutionOwner Owner { get; set; }
		
		/// <summary>
		/// Gets the plan type of service endpoint execution data.
		/// </summary>
		public string PlanType { get; set; }
		
		/// <summary>
		/// Gets the result of service endpoint execution.
		/// </summary>
		public System.Nullable<ServiceEndpointExecutionDataResult> Result { get; set; }
		
		/// <summary>
		/// Gets the start time of service endpoint execution.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	/// <summary>
	/// Represents execution owner of the service endpoint.
	/// </summary>
	public class ServiceEndpointExecutionOwner
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// Gets or sets the Id of service endpoint execution owner.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Gets or sets the name of service endpoint execution owner.
		/// </summary>
		public string Name { get; set; }
	}
	
	public enum ServiceEndpointExecutionDataResult
	{
		
		succeeded = 0,
		
		succeededWithIssues = 1,
		
		failed = 2,
		
		canceled = 3,
		
		skipped = 4,
		
		abandoned = 5,
	}
	
	/// <summary>
	/// Represents the details of service endpoint execution.
	/// </summary>
	public class ServiceEndpointExecutionRecord
	{
		
		/// <summary>
		/// Represents service endpoint execution data.
		/// </summary>
		public ServiceEndpointExecutionData Data { get; set; }
		
		/// <summary>
		/// Gets the Id of service endpoint.
		/// </summary>
		public string EndpointId { get; set; }
	}
	
	public class ServiceEndpointExecutionRecordsInput
	{
		
		/// <summary>
		/// Represents service endpoint execution data.
		/// </summary>
		public ServiceEndpointExecutionData Data { get; set; }
		
		public string[] EndpointIds { get; set; }
	}
	
	public class ServiceEndpointOAuthConfigurationReference
	{
		
		public string ConfigurationId { get; set; }
		
		public string ServiceEndpointId { get; set; }
		
		public string ServiceEndpointProjectId { get; set; }
	}
	
	public class ServiceEndpointRequest
	{
		
		/// <summary>
		/// Represents details of the service endpoint data source.
		/// </summary>
		public DataSourceDetails DataSourceDetails { get; set; }
		
		/// <summary>
		/// Represents template to transform the result data.
		/// </summary>
		public ResultTransformationDetails ResultTransformationDetails { get; set; }
		
		/// <summary>
		/// Represents details of the service endpoint.
		/// </summary>
		public ServiceEndpointDetails ServiceEndpointDetails { get; set; }
	}
	
	/// <summary>
	/// Represents result of the service endpoint request.
	/// </summary>
	public class ServiceEndpointRequestResult
	{
		
		/// <summary>
		/// Gets or sets the parameters used to make subsequent calls to the data source
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> CallbackContextParameters { get; set; }
		
		/// <summary>
		/// Gets or sets the flat that decides if another call to the data source is to be made
		/// </summary>
		public System.Nullable<System.Boolean> CallbackRequired { get; set; }
		
		/// <summary>
		/// Gets or sets the error message of the service endpoint request result.
		/// </summary>
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Represents an abstract JSON token.
		/// </summary>
		public JToken Result { get; set; }
		
		/// <summary>
		/// Gets or sets the status code of the service endpoint request result.
		/// </summary>
		public System.Nullable<ServiceEndpointRequestResultStatusCode> StatusCode { get; set; }
	}
	
	public enum ServiceEndpointRequestResultStatusCode
	{
		
		_continue = 0,
		
		switchingProtocols = 1,
		
		ok = 2,
		
		created = 3,
		
		accepted = 4,
		
		nonAuthoritativeInformation = 5,
		
		noContent = 6,
		
		resetContent = 7,
		
		partialContent = 8,
		
		multipleChoices = 9,
		
		ambiguous = 10,
		
		movedPermanently = 11,
		
		moved = 12,
		
		found = 13,
		
		redirect = 14,
		
		seeOther = 15,
		
		redirectMethod = 16,
		
		notModified = 17,
		
		useProxy = 18,
		
		unused = 19,
		
		temporaryRedirect = 20,
		
		redirectKeepVerb = 21,
		
		badRequest = 22,
		
		unauthorized = 23,
		
		paymentRequired = 24,
		
		forbidden = 25,
		
		notFound = 26,
		
		methodNotAllowed = 27,
		
		notAcceptable = 28,
		
		proxyAuthenticationRequired = 29,
		
		requestTimeout = 30,
		
		conflict = 31,
		
		gone = 32,
		
		lengthRequired = 33,
		
		preconditionFailed = 34,
		
		requestEntityTooLarge = 35,
		
		requestUriTooLong = 36,
		
		unsupportedMediaType = 37,
		
		requestedRangeNotSatisfiable = 38,
		
		expectationFailed = 39,
		
		upgradeRequired = 40,
		
		internalServerError = 41,
		
		notImplemented = 42,
		
		badGateway = 43,
		
		serviceUnavailable = 44,
		
		gatewayTimeout = 45,
		
		httpVersionNotSupported = 46,
	}
	
	/// <summary>
	/// Represents type of the service endpoint.
	/// </summary>
	public class ServiceEndpointType
	{
		
		/// <summary>
		/// Authentication scheme of service endpoint type.
		/// </summary>
		public ServiceEndpointAuthenticationScheme[] AuthenticationSchemes { get; set; }
		
		/// <summary>
		/// Data sources of service endpoint type.
		/// </summary>
		public DataSource[] DataSources { get; set; }
		
		/// <summary>
		/// Dependency data of service endpoint type.
		/// </summary>
		public DependencyData[] DependencyData { get; set; }
		
		/// <summary>
		/// Gets or sets the description of service endpoint type.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Gets or sets the display name of service endpoint type.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Represents url of the service endpoint.
		/// </summary>
		public EndpointUrl EndpointUrl { get; set; }
		
		/// <summary>
		/// Specifies the public url of the help documentation.
		/// </summary>
		public HelpLink HelpLink { get; set; }
		
		/// <summary>
		/// Gets or sets the help text shown at the endpoint create dialog.
		/// </summary>
		public string HelpMarkDown { get; set; }
		
		/// <summary>
		/// Gets or sets the icon url of service endpoint type.
		/// </summary>
		public string IconUrl { get; set; }
		
		/// <summary>
		/// Input descriptor of service endpoint type.
		/// </summary>
		public InputDescriptor[] InputDescriptors { get; set; }
		
		/// <summary>
		/// Gets or sets the name of service endpoint type.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Trusted hosts of a service endpoint type.
		/// </summary>
		public string[] TrustedHosts { get; set; }
		
		/// <summary>
		/// Gets or sets the ui contribution id of service endpoint type.
		/// </summary>
		public string UiContributionId { get; set; }
	}
	
	/// <summary>
	/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
	/// </summary>
	public class VssJsonCollectionWrapper
	{
		
		public string Value { get; set; }
	}
	
	public class VssJsonCollectionWrapperBase
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Endpoints_Create {organization}/_apis/serviceendpoint/endpoints
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ServiceEndpoint> Endpoints_CreateAsync(string organization, string api_version, ServiceEndpoint requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/serviceendpoint/endpoints&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ServiceEndpoint>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Endpoints_Create {organization}/_apis/serviceendpoint/endpoints
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ServiceEndpoint Endpoints_Create(string organization, string api_version, ServiceEndpoint requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/serviceendpoint/endpoints&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ServiceEndpoint>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update the service endpoints.
		/// Endpoints_Update_Service_Endpoints {organization}/_apis/serviceendpoint/endpoints
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <param name="requestBody">Names of the service endpoints to update.</param>
		/// <returns>successful operation</returns>
		public async Task<ServiceEndpoint[]> Endpoints_Update_Service_EndpointsAsync(string organization, string api_version, ServiceEndpoint[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/serviceendpoint/endpoints&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ServiceEndpoint[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update the service endpoints.
		/// Endpoints_Update_Service_Endpoints {organization}/_apis/serviceendpoint/endpoints
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <param name="requestBody">Names of the service endpoints to update.</param>
		/// <returns>successful operation</returns>
		public ServiceEndpoint[] Endpoints_Update_Service_Endpoints(string organization, string api_version, ServiceEndpoint[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/serviceendpoint/endpoints&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ServiceEndpoint[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Endpoints_Delete {organization}/_apis/serviceendpoint/endpoints/{endpointId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Endpoints_DeleteAsync(string organization, string endpointId, string projectIds, bool deep, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/serviceendpoint/endpoints/"+ (endpointId==null? "" : Uri.EscapeDataString(endpointId))+"&projectIds=" + (projectIds==null? "" : Uri.EscapeDataString(projectIds))+"&deep="+deep+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Endpoints_Delete {organization}/_apis/serviceendpoint/endpoints/{endpointId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Endpoints_Delete(string organization, string endpointId, string projectIds, bool deep, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/serviceendpoint/endpoints/"+ (endpointId==null? "" : Uri.EscapeDataString(endpointId))+"&projectIds=" + (projectIds==null? "" : Uri.EscapeDataString(projectIds))+"&deep="+deep+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Endpoints_Share_Service_Endpoint {organization}/_apis/serviceendpoint/endpoints/{endpointId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Endpoints_Share_Service_EndpointAsync(string organization, string endpointId, string api_version, ServiceEndpointProjectReference[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/serviceendpoint/endpoints/"+ (endpointId==null? "" : Uri.EscapeDataString(endpointId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Endpoints_Share_Service_Endpoint {organization}/_apis/serviceendpoint/endpoints/{endpointId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Endpoints_Share_Service_Endpoint(string organization, string endpointId, string api_version, ServiceEndpointProjectReference[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/serviceendpoint/endpoints/"+ (endpointId==null? "" : Uri.EscapeDataString(endpointId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Endpoints_Update_Service_Endpoint {organization}/_apis/serviceendpoint/endpoints/{endpointId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ServiceEndpoint> Endpoints_Update_Service_EndpointAsync(string organization, string endpointId, string operation, string api_version, ServiceEndpoint requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/serviceendpoint/endpoints/"+ (endpointId==null? "" : Uri.EscapeDataString(endpointId))+"&operation=" + (operation==null? "" : Uri.EscapeDataString(operation))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ServiceEndpoint>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Endpoints_Update_Service_Endpoint {organization}/_apis/serviceendpoint/endpoints/{endpointId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ServiceEndpoint Endpoints_Update_Service_Endpoint(string organization, string endpointId, string operation, string api_version, ServiceEndpoint requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/serviceendpoint/endpoints/"+ (endpointId==null? "" : Uri.EscapeDataString(endpointId))+"&operation=" + (operation==null? "" : Uri.EscapeDataString(operation))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ServiceEndpoint>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get service endpoint types.
		/// Types_List {organization}/_apis/serviceendpoint/types
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="type">Type of service endpoint.</param>
		/// <param name="scheme">Scheme of service endpoint.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ServiceEndpointType[]> Types_ListAsync(string organization, string type, string scheme, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/serviceendpoint/types&type=" + (type==null? "" : Uri.EscapeDataString(type))+"&scheme=" + (scheme==null? "" : Uri.EscapeDataString(scheme))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ServiceEndpointType[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get service endpoint types.
		/// Types_List {organization}/_apis/serviceendpoint/types
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="type">Type of service endpoint.</param>
		/// <param name="scheme">Scheme of service endpoint.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ServiceEndpointType[] Types_List(string organization, string type, string scheme, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/serviceendpoint/types&type=" + (type==null? "" : Uri.EscapeDataString(type))+"&scheme=" + (scheme==null? "" : Uri.EscapeDataString(scheme))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ServiceEndpointType[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get service endpoint execution records.
		/// Executionhistory_List {organization}/{project}/_apis/serviceendpoint/{endpointId}/executionhistory
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="endpointId">Id of the service endpoint.</param>
		/// <param name="top">Number of service endpoint execution records to get.</param>
		/// <param name="continuationToken">A continuation token, returned by a previous call to this method, that can be used to return the next set of records</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ServiceEndpointExecutionRecord[]> Executionhistory_ListAsync(string organization, string project, string endpointId, int top, long continuationToken, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/serviceendpoint/"+ (endpointId==null? "" : Uri.EscapeDataString(endpointId))+"/executionhistory&top="+top+"&continuationToken="+continuationToken+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ServiceEndpointExecutionRecord[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get service endpoint execution records.
		/// Executionhistory_List {organization}/{project}/_apis/serviceendpoint/{endpointId}/executionhistory
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="endpointId">Id of the service endpoint.</param>
		/// <param name="top">Number of service endpoint execution records to get.</param>
		/// <param name="continuationToken">A continuation token, returned by a previous call to this method, that can be used to return the next set of records</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ServiceEndpointExecutionRecord[] Executionhistory_List(string organization, string project, string endpointId, int top, long continuationToken, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/serviceendpoint/"+ (endpointId==null? "" : Uri.EscapeDataString(endpointId))+"/executionhistory&top="+top+"&continuationToken="+continuationToken+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ServiceEndpointExecutionRecord[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Use ExecuteServiceEndpointRequest API Instead
		/// Endpointproxy_Query {organization}/{project}/_apis/serviceendpoint/endpointproxy
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Describes the data source to fetch.</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Endpointproxy_QueryAsync(string organization, string project, string api_version, DataSourceBinding requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/serviceendpoint/endpointproxy&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Use ExecuteServiceEndpointRequest API Instead
		/// Endpointproxy_Query {organization}/{project}/_apis/serviceendpoint/endpointproxy
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Describes the data source to fetch.</param>
		/// <returns>successful operation</returns>
		public string[] Endpointproxy_Query(string organization, string project, string api_version, DataSourceBinding requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/serviceendpoint/endpointproxy&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the service endpoints by name.
		/// Endpoints_Get_Service_Endpoints_By_Names {organization}/{project}/_apis/serviceendpoint/endpoints
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="endpointNames">Names of the service endpoints.</param>
		/// <param name="type">Type of the service endpoints.</param>
		/// <param name="authSchemes">Authorization schemes used for service endpoints.</param>
		/// <param name="owner">Owner for service endpoints.</param>
		/// <param name="includeFailed">Failed flag for service endpoints.</param>
		/// <param name="includeDetails">Flag to include more details for service endpoints. This is for internal use only and the flag will be treated as false for all other requests</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ServiceEndpoint[]> Endpoints_Get_Service_Endpoints_By_NamesAsync(string organization, string project, string endpointNames, string type, string authSchemes, string owner, bool includeFailed, bool includeDetails, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/serviceendpoint/endpoints&endpointNames=" + (endpointNames==null? "" : Uri.EscapeDataString(endpointNames))+"&type=" + (type==null? "" : Uri.EscapeDataString(type))+"&authSchemes=" + (authSchemes==null? "" : Uri.EscapeDataString(authSchemes))+"&owner=" + (owner==null? "" : Uri.EscapeDataString(owner))+"&includeFailed="+includeFailed+"&includeDetails="+includeDetails+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ServiceEndpoint[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the service endpoints by name.
		/// Endpoints_Get_Service_Endpoints_By_Names {organization}/{project}/_apis/serviceendpoint/endpoints
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="endpointNames">Names of the service endpoints.</param>
		/// <param name="type">Type of the service endpoints.</param>
		/// <param name="authSchemes">Authorization schemes used for service endpoints.</param>
		/// <param name="owner">Owner for service endpoints.</param>
		/// <param name="includeFailed">Failed flag for service endpoints.</param>
		/// <param name="includeDetails">Flag to include more details for service endpoints. This is for internal use only and the flag will be treated as false for all other requests</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ServiceEndpoint[] Endpoints_Get_Service_Endpoints_By_Names(string organization, string project, string endpointNames, string type, string authSchemes, string owner, bool includeFailed, bool includeDetails, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/serviceendpoint/endpoints&endpointNames=" + (endpointNames==null? "" : Uri.EscapeDataString(endpointNames))+"&type=" + (type==null? "" : Uri.EscapeDataString(type))+"&authSchemes=" + (authSchemes==null? "" : Uri.EscapeDataString(authSchemes))+"&owner=" + (owner==null? "" : Uri.EscapeDataString(owner))+"&includeFailed="+includeFailed+"&includeDetails="+includeDetails+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ServiceEndpoint[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the service endpoints and patch new authorization parameters
		/// Endpoints_Get_Service_Endpoints_With_Refreshed_Authentication {organization}/{project}/_apis/serviceendpoint/endpoints
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="endpointIds">Ids of the service endpoints.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <param name="requestBody">Scope, Validity of Token requested.</param>
		/// <returns>successful operation</returns>
		public async Task<ServiceEndpoint[]> Endpoints_Get_Service_Endpoints_With_Refreshed_AuthenticationAsync(string organization, string project, string endpointIds, string api_version, RefreshAuthenticationParameters[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/serviceendpoint/endpoints&endpointIds=" + (endpointIds==null? "" : Uri.EscapeDataString(endpointIds))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ServiceEndpoint[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the service endpoints and patch new authorization parameters
		/// Endpoints_Get_Service_Endpoints_With_Refreshed_Authentication {organization}/{project}/_apis/serviceendpoint/endpoints
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="endpointIds">Ids of the service endpoints.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <param name="requestBody">Scope, Validity of Token requested.</param>
		/// <returns>successful operation</returns>
		public ServiceEndpoint[] Endpoints_Get_Service_Endpoints_With_Refreshed_Authentication(string organization, string project, string endpointIds, string api_version, RefreshAuthenticationParameters[] requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/serviceendpoint/endpoints&endpointIds=" + (endpointIds==null? "" : Uri.EscapeDataString(endpointIds))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ServiceEndpoint[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the service endpoint details.
		/// Endpoints_Get {organization}/{project}/_apis/serviceendpoint/endpoints/{endpointId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="endpointId">Id of the service endpoint.</param>
		/// <param name="actionFilter">Action filter for the service connection. It specifies the action which can be performed on the service connection.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ServiceEndpoint> Endpoints_GetAsync(string organization, string project, string endpointId, Endpoints_GetActionFilter actionFilter, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/serviceendpoint/endpoints/"+ (endpointId==null? "" : Uri.EscapeDataString(endpointId))+"&actionFilter=" + actionFilter+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ServiceEndpoint>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the service endpoint details.
		/// Endpoints_Get {organization}/{project}/_apis/serviceendpoint/endpoints/{endpointId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="endpointId">Id of the service endpoint.</param>
		/// <param name="actionFilter">Action filter for the service connection. It specifies the action which can be performed on the service connection.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.4' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ServiceEndpoint Endpoints_Get(string organization, string project, string endpointId, Endpoints_GetActionFilter actionFilter, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/"+ (project==null? "" : Uri.EscapeDataString(project))+"/_apis/serviceendpoint/endpoints/"+ (endpointId==null? "" : Uri.EscapeDataString(endpointId))+"&actionFilter=" + actionFilter+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ServiceEndpoint>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Endpoints_GetActionFilter
	{
		
		none = 0,
		
		manage = 1,
		
		use = 2,
		
		view = 3,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
