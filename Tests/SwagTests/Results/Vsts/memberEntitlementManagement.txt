//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// License assigned to a user
	/// </summary>
	public class AccessLevel
	{
		
		/// <summary>
		/// Type of Account License (e.g. Express, Stakeholder etc.)
		/// </summary>
		public System.Nullable<AccessLevelAccountLicenseType> AccountLicenseType { get; set; }
		
		/// <summary>
		/// Assignment Source of the License (e.g. Group, Unknown etc.
		/// </summary>
		public System.Nullable<AccessLevelAssignmentSource> AssignmentSource { get; set; }
		
		/// <summary>
		/// Display name of the License
		/// </summary>
		public string LicenseDisplayName { get; set; }
		
		/// <summary>
		/// Licensing Source (e.g. Account. MSDN etc.)
		/// </summary>
		public System.Nullable<AccessLevelLicensingSource> LicensingSource { get; set; }
		
		/// <summary>
		/// Type of MSDN License (e.g. Visual Studio Professional, Visual Studio Enterprise etc.)
		/// </summary>
		public System.Nullable<AccessLevelMsdnLicenseType> MsdnLicenseType { get; set; }
		
		/// <summary>
		/// User status in the account
		/// </summary>
		public System.Nullable<AccessLevelStatus> Status { get; set; }
		
		/// <summary>
		/// Status message.
		/// </summary>
		public string StatusMessage { get; set; }
	}
	
	public enum AccessLevelAccountLicenseType
	{
		
		none = 0,
		
		earlyAdopter = 1,
		
		express = 2,
		
		professional = 3,
		
		advanced = 4,
		
		stakeholder = 5,
	}
	
	public enum AccessLevelAssignmentSource
	{
		
		none = 0,
		
		unknown = 1,
		
		groupRule = 2,
	}
	
	public enum AccessLevelLicensingSource
	{
		
		none = 0,
		
		account = 1,
		
		msdn = 2,
		
		profile = 3,
		
		auto = 4,
		
		trial = 5,
	}
	
	public enum AccessLevelMsdnLicenseType
	{
		
		none = 0,
		
		eligible = 1,
		
		professional = 2,
		
		platforms = 3,
		
		testProfessional = 4,
		
		premium = 5,
		
		ultimate = 6,
		
		enterprise = 7,
	}
	
	public enum AccessLevelStatus
	{
		
		none = 0,
		
		active = 1,
		
		disabled = 2,
		
		deleted = 3,
		
		pending = 4,
		
		expired = 5,
		
		pendingDisabled = 6,
	}
	
	public class BaseOperationResult
	{
		
		/// <summary>
		/// List of error codes paired with their corresponding error messages
		/// </summary>
		public string[] Errors { get; set; }
		
		/// <summary>
		/// Success status of the operation
		/// </summary>
		public System.Nullable<System.Boolean> IsSuccess { get; set; }
	}
	
	/// <summary>
	/// An extension assigned to a user
	/// </summary>
	public class Extension
	{
		
		/// <summary>
		/// Assignment source for this extension. I.e. explicitly assigned or from a group rule.
		/// </summary>
		public System.Nullable<ExtensionAssignmentSource> AssignmentSource { get; set; }
		
		/// <summary>
		/// Gallery Id of the Extension.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Friendly name of this extension.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Source of this extension assignment. Ex: msdn, account, none, etc.
		/// </summary>
		public System.Nullable<ExtensionSource> Source { get; set; }
	}
	
	public enum ExtensionAssignmentSource
	{
		
		none = 0,
		
		unknown = 1,
		
		groupRule = 2,
	}
	
	public enum ExtensionSource
	{
		
		none = 0,
		
		account = 1,
		
		msdn = 2,
		
		profile = 3,
		
		auto = 4,
		
		trial = 5,
	}
	
	/// <summary>
	/// Summary of Extensions in the organization.
	/// </summary>
	public class ExtensionSummaryData
	{
		
		/// <summary>
		/// Count of Extension Licenses assigned to users through msdn.
		/// </summary>
		public System.Nullable<System.Int32> AssignedThroughSubscription { get; set; }
		
		/// <summary>
		/// Gallery Id of the Extension
		/// </summary>
		public string ExtensionId { get; set; }
		
		/// <summary>
		/// Friendly name of this extension
		/// </summary>
		public string ExtensionName { get; set; }
		
		/// <summary>
		/// Whether its a Trial Version.
		/// </summary>
		public System.Nullable<System.Boolean> IsTrialVersion { get; set; }
		
		/// <summary>
		/// Minimum License Required for the Extension.
		/// </summary>
		public System.Nullable<ExtensionSummaryDataMinimumLicenseRequired> MinimumLicenseRequired { get; set; }
		
		/// <summary>
		/// Days remaining for the Trial to expire.
		/// </summary>
		public System.Nullable<System.Int32> RemainingTrialDays { get; set; }
		
		/// <summary>
		/// Date on which the Trial expires.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> TrialExpiryDate { get; set; }
	}
	
	public enum ExtensionSummaryDataMinimumLicenseRequired
	{
		
		none = 0,
		
		express = 1,
		
		advanced = 2,
		
		advancedPlus = 3,
		
		stakeholder = 4,
	}
	
	/// <summary>
	/// Graph group entity
	/// </summary>
	public class GraphGroup
	{
		
		/// <summary>
		/// A short phrase to help human readers disambiguate groups with similar names
		/// </summary>
		public string Description { get; set; }
	}
	
	public class GraphMember
	{
		
		/// <summary>
		/// This represents the name of the container of origin for a graph member. (For MSA this is "Windows Live ID", for AD the name of the domain, for AAD the tenantID of the directory, for VSTS groups the ScopeId, etc)
		/// </summary>
		public string Domain { get; set; }
		
		/// <summary>
		/// The email address of record for a given graph member. This may be different than the principal name.
		/// </summary>
		public string MailAddress { get; set; }
		
		/// <summary>
		/// This is the PrincipalName of this graph member from the source provider. The source provider may change this field over time and it is not guaranteed to be immutable for the life of the graph member by VSTS.
		/// </summary>
		public string PrincipalName { get; set; }
	}
	
	/// <summary>
	/// Top-level graph entity
	/// </summary>
	public class GraphSubject
	{
		
		/// <summary>
		/// [Internal Use Only] The legacy descriptor is here in case you need to access old version IMS using identity descriptor.
		/// </summary>
		public string LegacyDescriptor { get; set; }
		
		/// <summary>
		/// The type of source provider for the origin identifier (ex:AD, AAD, MSA)
		/// </summary>
		public string Origin { get; set; }
		
		/// <summary>
		/// The unique identifier from the system of origin. Typically a sid, object id or Guid. Linking and unlinking operations can cause this value to change for a user because the user is not backed by a different provider and has a different unique id in the new provider.
		/// </summary>
		public string OriginId { get; set; }
		
		/// <summary>
		/// This field identifies the type of the graph subject (ex: Group, Scope, User).
		/// </summary>
		public string SubjectKind { get; set; }
	}
	
	public class GraphSubjectBase
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
		/// </summary>
		public string Descriptor { get; set; }
		
		/// <summary>
		/// This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// This url is the full route to the source resource of this graph subject.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// The class to represent a collection of REST reference links.
	/// </summary>
	public class ReferenceLinks
	{
		
		/// <summary>
		/// The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Links { get; set; }
	}
	
	/// <summary>
	/// Graph user entity
	/// </summary>
	public class GraphUser
	{
		
		/// <summary>
		/// The short, generally unique name for the user in the backing directory. For AAD users, this corresponds to the mail nickname, which is often but not necessarily similar to the part of the user's mail address before the @ sign. For GitHub users, this corresponds to the GitHub user handle.
		/// </summary>
		public string DirectoryAlias { get; set; }
		
		/// <summary>
		/// When true, the group has been deleted in the identity provider
		/// </summary>
		public System.Nullable<System.Boolean> IsDeletedInOrigin { get; set; }
		
		/// <summary>
		/// The meta type of the user in the origin, such as "member", "guest", etc. See UserMetaType for the set of possible values.
		/// </summary>
		public string MetaType { get; set; }
	}
	
	/// <summary>
	/// Project Group (e.g. Contributor, Reader etc.)
	/// </summary>
	public class Group
	{
		
		/// <summary>
		/// Display Name of the Group
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Group Type
		/// </summary>
		public System.Nullable<GroupGroupType> GroupType { get; set; }
	}
	
	public enum GroupGroupType
	{
		
		projectStakeholder = 0,
		
		projectReader = 1,
		
		projectContributor = 2,
		
		projectAdministrator = 3,
		
		custom = 4,
	}
	
	/// <summary>
	/// A group entity with additional properties including its license, extensions, and project membership
	/// </summary>
	public class GroupEntitlement
	{
		
		/// <summary>
		/// Graph group entity
		/// </summary>
		public GraphGroup Group { get; set; }
		
		/// <summary>
		/// The unique identifier which matches the Id of the GraphMember.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// [Readonly] The last time the group licensing rule was executed (regardless of whether any changes were made).
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastExecuted { get; set; }
		
		/// <summary>
		/// License assigned to a user
		/// </summary>
		public AccessLevel LicenseRule { get; set; }
		
		/// <summary>
		/// Group members. Only used when creating a new group.
		/// </summary>
		public UserEntitlement[] Members { get; set; }
		
		/// <summary>
		/// Relation between a project and the member's effective permissions in that project.
		/// </summary>
		public ProjectEntitlement[] ProjectEntitlements { get; set; }
		
		/// <summary>
		/// The status of the group rule.
		/// </summary>
		public System.Nullable<GroupEntitlementStatus> Status { get; set; }
	}
	
	/// <summary>
	/// A user entity with additional properties including their license, extensions, and project membership
	/// </summary>
	public class UserEntitlement
	{
		
		/// <summary>
		/// License assigned to a user
		/// </summary>
		public AccessLevel AccessLevel { get; set; }
		
		/// <summary>
		/// [Readonly] Date the user was added to the collection.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		/// <summary>
		/// [Readonly] GroupEntitlements that this user belongs to.
		/// </summary>
		public GroupEntitlement[] GroupAssignments { get; set; }
		
		/// <summary>
		/// The unique identifier which matches the Id of the Identity associated with the GraphMember.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// [Readonly] Date the user last accessed the collection.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastAccessedDate { get; set; }
		
		/// <summary>
		/// Relation between a project and the user's effective permissions in that project.
		/// </summary>
		public ProjectEntitlement[] ProjectEntitlements { get; set; }
		
		/// <summary>
		/// Graph user entity
		/// </summary>
		public GraphUser User { get; set; }
	}
	
	/// <summary>
	/// Relation between a project and the user's effective permissions in that project.
	/// </summary>
	public class ProjectEntitlement
	{
		
		/// <summary>
		/// Assignment Source (e.g. Group or Unknown).
		/// </summary>
		public System.Nullable<ProjectEntitlementAssignmentSource> AssignmentSource { get; set; }
		
		/// <summary>
		/// Project Group (e.g. Contributor, Reader etc.)
		/// </summary>
		public Group Group { get; set; }
		
		/// <summary>
		/// Whether the user is inheriting permissions to a project through a Azure DevOps or AAD group membership.
		/// </summary>
		public System.Nullable<ProjectEntitlementProjectPermissionInherited> ProjectPermissionInherited { get; set; }
		
		/// <summary>
		/// A reference to a project
		/// </summary>
		public ProjectRef ProjectRef { get; set; }
		
		/// <summary>
		/// Team Ref.
		/// </summary>
		public TeamRef[] TeamRefs { get; set; }
	}
	
	public enum ProjectEntitlementAssignmentSource
	{
		
		none = 0,
		
		unknown = 1,
		
		groupRule = 2,
	}
	
	public enum ProjectEntitlementProjectPermissionInherited
	{
		
		notSet = 0,
		
		notInherited = 1,
		
		inherited = 2,
	}
	
	/// <summary>
	/// A reference to a project
	/// </summary>
	public class ProjectRef
	{
		
		/// <summary>
		/// Project ID.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Project Name.
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A reference to a team
	/// </summary>
	public class TeamRef
	{
		
		/// <summary>
		/// Team ID
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Team Name
		/// </summary>
		public string Name { get; set; }
	}
	
	public enum GroupEntitlementStatus
	{
		
		applyPending = 0,
		
		applied = 1,
		
		incompatible = 2,
		
		unableToApply = 3,
	}
	
	public class GroupEntitlementOperationReference
	{
		
		/// <summary>
		/// Operation completed with success or failure.
		/// </summary>
		public System.Nullable<System.Boolean> Completed { get; set; }
		
		/// <summary>
		/// True if all operations were successful.
		/// </summary>
		public System.Nullable<System.Boolean> HaveResultsSucceeded { get; set; }
		
		/// <summary>
		/// List of results for each operation.
		/// </summary>
		public GroupOperationResult[] Results { get; set; }
	}
	
	public class GroupOperationResult
	{
		
		/// <summary>
		/// Identifier of the Group being acted upon
		/// </summary>
		public string GroupId { get; set; }
		
		/// <summary>
		/// A group entity with additional properties including its license, extensions, and project membership
		/// </summary>
		public GroupEntitlement Result { get; set; }
	}
	
	/// <summary>
	/// Group option to add a user to
	/// </summary>
	public class GroupOption
	{
		
		/// <summary>
		/// License assigned to a user
		/// </summary>
		public AccessLevel AccessLevel { get; set; }
		
		/// <summary>
		/// Project Group (e.g. Contributor, Reader etc.)
		/// </summary>
		public Group Group { get; set; }
	}
	
	/// <summary>
	/// The JSON model for JSON Patch Operations
	/// </summary>
	public class JsonPatchDocument
	{
	}
	
	/// <summary>
	/// The JSON model for a JSON Patch operation
	/// </summary>
	public class JsonPatchOperation
	{
		
		/// <summary>
		/// The path to copy from for the Move/Copy operation.
		/// </summary>
		public string From { get; set; }
		
		/// <summary>
		/// The patch operation
		/// </summary>
		public System.Nullable<JsonPatchOperationOp> Op { get; set; }
		
		/// <summary>
		/// The path for the operation. In the case of an array, a zero based index can be used to specify the position in the array (e.g. /biscuits/0/name). The "-" character can be used instead of an index to insert at the end of the array (e.g. /biscuits/-).
		/// </summary>
		public string Path { get; set; }
		
		/// <summary>
		/// The value for the operation. This is either a primitive or a JToken.
		/// </summary>
		public string Value { get; set; }
	}
	
	public enum JsonPatchOperationOp
	{
		
		add = 0,
		
		remove = 1,
		
		replace = 2,
		
		move = 3,
		
		copy = 4,
		
		test = 5,
	}
	
	/// <summary>
	/// Summary of Licenses in the organization.
	/// </summary>
	public class LicenseSummaryData
	{
		
		/// <summary>
		/// Type of Account License.
		/// </summary>
		public System.Nullable<LicenseSummaryDataAccountLicenseType> AccountLicenseType { get; set; }
		
		/// <summary>
		/// Count of Disabled Licenses.
		/// </summary>
		public System.Nullable<System.Int32> Disabled { get; set; }
		
		/// <summary>
		/// Designates if this license quantity can be changed through purchase
		/// </summary>
		public System.Nullable<System.Boolean> IsPurchasable { get; set; }
		
		/// <summary>
		/// Name of the License.
		/// </summary>
		public string LicenseName { get; set; }
		
		/// <summary>
		/// Type of MSDN License.
		/// </summary>
		public System.Nullable<LicenseSummaryDataMsdnLicenseType> MsdnLicenseType { get; set; }
		
		/// <summary>
		/// Specifies the date when billing will charge for paid licenses
		/// </summary>
		public System.Nullable<System.DateTimeOffset> NextBillingDate { get; set; }
		
		/// <summary>
		/// Source of the License.
		/// </summary>
		public System.Nullable<LicenseSummaryDataSource> Source { get; set; }
		
		/// <summary>
		/// Total license count after next billing cycle
		/// </summary>
		public System.Nullable<System.Int32> TotalAfterNextBillingDate { get; set; }
	}
	
	public enum LicenseSummaryDataAccountLicenseType
	{
		
		none = 0,
		
		earlyAdopter = 1,
		
		express = 2,
		
		professional = 3,
		
		advanced = 4,
		
		stakeholder = 5,
	}
	
	public enum LicenseSummaryDataMsdnLicenseType
	{
		
		none = 0,
		
		eligible = 1,
		
		professional = 2,
		
		platforms = 3,
		
		testProfessional = 4,
		
		premium = 5,
		
		ultimate = 6,
		
		enterprise = 7,
	}
	
	public enum LicenseSummaryDataSource
	{
		
		none = 0,
		
		account = 1,
		
		msdn = 2,
		
		profile = 3,
		
		auto = 4,
		
		trial = 5,
	}
	
	/// <summary>
	/// Deprecated: Use UserEntitlement instead
	/// </summary>
	public class MemberEntitlement
	{
		
		public GraphMember Member { get; set; }
	}
	
	public class MemberEntitlementOperationReference
	{
		
		/// <summary>
		/// Operation completed with success or failure
		/// </summary>
		public System.Nullable<System.Boolean> Completed { get; set; }
		
		/// <summary>
		/// True if all operations were successful
		/// </summary>
		public System.Nullable<System.Boolean> HaveResultsSucceeded { get; set; }
		
		/// <summary>
		/// List of results for each operation
		/// </summary>
		public OperationResult[] Results { get; set; }
	}
	
	public class OperationResult
	{
		
		/// <summary>
		/// List of error codes paired with their corresponding error messages.
		/// </summary>
		public string[] Errors { get; set; }
		
		/// <summary>
		/// Success status of the operation.
		/// </summary>
		public System.Nullable<System.Boolean> IsSuccess { get; set; }
		
		/// <summary>
		/// Identifier of the Member being acted upon.
		/// </summary>
		public string MemberId { get; set; }
		
		/// <summary>
		/// Deprecated: Use UserEntitlement instead
		/// </summary>
		public MemberEntitlement Result { get; set; }
	}
	
	public class MemberEntitlementsPatchResponse
	{
		
		/// <summary>
		/// List of results for each operation
		/// </summary>
		public OperationResult[] OperationResults { get; set; }
	}
	
	public class MemberEntitlementsPostResponse
	{
		
		public OperationResult OperationResult { get; set; }
	}
	
	public class MemberEntitlementsResponseBase
	{
		
		/// <summary>
		/// True if all operations were successful.
		/// </summary>
		public System.Nullable<System.Boolean> IsSuccess { get; set; }
		
		/// <summary>
		/// Deprecated: Use UserEntitlement instead
		/// </summary>
		public MemberEntitlement MemberEntitlement { get; set; }
	}
	
	/// <summary>
	/// Reference for an async operation.
	/// </summary>
	public class OperationReference
	{
		
		/// <summary>
		/// Unique identifier for the operation.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Unique identifier for the plugin.
		/// </summary>
		public string PluginId { get; set; }
		
		/// <summary>
		/// The current status of the operation.
		/// </summary>
		public System.Nullable<OperationReferenceStatus> Status { get; set; }
		
		/// <summary>
		/// URL to get the full operation object.
		/// </summary>
		public string Url { get; set; }
	}
	
	public enum OperationReferenceStatus
	{
		
		notSet = 0,
		
		queued = 1,
		
		inProgress = 2,
		
		cancelled = 3,
		
		succeeded = 4,
		
		failed = 5,
	}
	
	/// <summary>
	/// A page of users
	/// </summary>
	public class PagedGraphMemberList
	{
		
		public UserEntitlement[] Members { get; set; }
	}
	
	public class SummaryData
	{
		
		/// <summary>
		/// Count of Licenses already assigned.
		/// </summary>
		public System.Nullable<System.Int32> Assigned { get; set; }
		
		/// <summary>
		/// Available Count.
		/// </summary>
		public System.Nullable<System.Int32> Available { get; set; }
		
		/// <summary>
		/// Quantity
		/// </summary>
		public System.Nullable<System.Int32> IncludedQuantity { get; set; }
		
		/// <summary>
		/// Total Count.
		/// </summary>
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public class UserEntitlementOperationReference
	{
		
		/// <summary>
		/// Operation completed with success or failure.
		/// </summary>
		public System.Nullable<System.Boolean> Completed { get; set; }
		
		/// <summary>
		/// True if all operations were successful.
		/// </summary>
		public System.Nullable<System.Boolean> HaveResultsSucceeded { get; set; }
		
		/// <summary>
		/// List of results for each operation.
		/// </summary>
		public UserEntitlementOperationResult[] Results { get; set; }
	}
	
	public class UserEntitlementOperationResult
	{
		
		/// <summary>
		/// List of error codes paired with their corresponding error messages.
		/// </summary>
		public string[] Errors { get; set; }
		
		/// <summary>
		/// Success status of the operation.
		/// </summary>
		public System.Nullable<System.Boolean> IsSuccess { get; set; }
		
		/// <summary>
		/// A user entity with additional properties including their license, extensions, and project membership
		/// </summary>
		public UserEntitlement Result { get; set; }
		
		/// <summary>
		/// Identifier of the Member being acted upon.
		/// </summary>
		public string UserId { get; set; }
	}
	
	public class UserEntitlementsPatchResponse
	{
		
		/// <summary>
		/// List of results for each operation.
		/// </summary>
		public UserEntitlementOperationResult[] OperationResults { get; set; }
	}
	
	public class UserEntitlementsPostResponse
	{
		
		public UserEntitlementOperationResult OperationResult { get; set; }
	}
	
	public class UserEntitlementsResponseBase
	{
		
		/// <summary>
		/// True if all operations were successful.
		/// </summary>
		public System.Nullable<System.Boolean> IsSuccess { get; set; }
		
		/// <summary>
		/// A user entity with additional properties including their license, extensions, and project membership
		/// </summary>
		public UserEntitlement UserEntitlement { get; set; }
	}
	
	/// <summary>
	/// Summary of licenses and extensions assigned to users in the organization
	/// </summary>
	public class UsersSummary
	{
		
		/// <summary>
		/// Available Access Levels
		/// </summary>
		public AccessLevel[] AvailableAccessLevels { get; set; }
		
		/// <summary>
		/// License assigned to a user
		/// </summary>
		public AccessLevel DefaultAccessLevel { get; set; }
		
		/// <summary>
		/// Group Options
		/// </summary>
		public GroupOption[] GroupOptions { get; set; }
		
		/// <summary>
		/// Summary of Licenses in the organization
		/// </summary>
		public LicenseSummaryData[] Licenses { get; set; }
		
		/// <summary>
		/// Summary of Projects in the organization
		/// </summary>
		public ProjectRef[] ProjectRefs { get; set; }
	}
	
	/// <summary>
	/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
	/// </summary>
	public class VssJsonCollectionWrapper
	{
		
		public string Value { get; set; }
	}
	
	public class VssJsonCollectionWrapperBase
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	public partial class MyClient
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public MyClient(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get the group entitlements for an account.
		/// Group_Entitlements_List {organization}/_apis/groupentitlements
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<GroupEntitlement[]> Group_Entitlements_ListAsync(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/groupentitlements&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GroupEntitlement[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the group entitlements for an account.
		/// Group_Entitlements_List {organization}/_apis/groupentitlements
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public GroupEntitlement[] Group_Entitlements_List(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/groupentitlements&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GroupEntitlement[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a group entitlement with license rule, extension rule.
		/// Group_Entitlements_Add {organization}/_apis/groupentitlements
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="ruleOption">RuleOption [ApplyGroupRule/TestApplyGroupRule] - specifies if the rules defined in group entitlement should be created and applied to it’s members (default option) or just be tested</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">GroupEntitlement object specifying License Rule, Extensions Rule for the group. Based on the rules the members of the group will be given licenses and extensions. The Group Entitlement can be used to add the group to another project level groups</param>
		public async Task Group_Entitlements_AddAsync(string organization, Group_Entitlements_AddRuleOption ruleOption, string api_version, GroupEntitlement requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/groupentitlements&ruleOption=" + ruleOption+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a group entitlement with license rule, extension rule.
		/// Group_Entitlements_Add {organization}/_apis/groupentitlements
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="ruleOption">RuleOption [ApplyGroupRule/TestApplyGroupRule] - specifies if the rules defined in group entitlement should be created and applied to it’s members (default option) or just be tested</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">GroupEntitlement object specifying License Rule, Extensions Rule for the group. Based on the rules the members of the group will be given licenses and extensions. The Group Entitlement can be used to add the group to another project level groups</param>
		public void Group_Entitlements_Add(string organization, Group_Entitlements_AddRuleOption ruleOption, string api_version, GroupEntitlement requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/groupentitlements&ruleOption=" + ruleOption+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a group entitlement.
		/// 
		/// If the group entitlement does not exist, returns null.
		/// Group_Entitlements_Get {organization}/_apis/groupentitlements/{groupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="groupId">ID of the group.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<GroupEntitlement> Group_Entitlements_GetAsync(string organization, string groupId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/groupentitlements/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GroupEntitlement>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a group entitlement.
		/// 
		/// If the group entitlement does not exist, returns null.
		/// Group_Entitlements_Get {organization}/_apis/groupentitlements/{groupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="groupId">ID of the group.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public GroupEntitlement Group_Entitlements_Get(string organization, string groupId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/groupentitlements/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GroupEntitlement>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a group entitlement.
		/// Group_Entitlements_Delete {organization}/_apis/groupentitlements/{groupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="groupId">ID of the group to delete.</param>
		/// <param name="ruleOption">RuleOption [ApplyGroupRule/TestApplyGroupRule] - specifies if the rules defined in group entitlement should be deleted and the changes are applied to it’s members (default option) or just be tested</param>
		/// <param name="removeGroupMembership">Optional parameter that specifies whether the group with the given ID should be removed from all other groups</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<GroupEntitlementOperationReference> Group_Entitlements_DeleteAsync(string organization, string groupId, Group_Entitlements_AddRuleOption ruleOption, bool removeGroupMembership, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/groupentitlements/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"&ruleOption=" + ruleOption+"&removeGroupMembership="+removeGroupMembership+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GroupEntitlementOperationReference>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a group entitlement.
		/// Group_Entitlements_Delete {organization}/_apis/groupentitlements/{groupId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="groupId">ID of the group to delete.</param>
		/// <param name="ruleOption">RuleOption [ApplyGroupRule/TestApplyGroupRule] - specifies if the rules defined in group entitlement should be deleted and the changes are applied to it’s members (default option) or just be tested</param>
		/// <param name="removeGroupMembership">Optional parameter that specifies whether the group with the given ID should be removed from all other groups</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public GroupEntitlementOperationReference Group_Entitlements_Delete(string organization, string groupId, Group_Entitlements_AddRuleOption ruleOption, bool removeGroupMembership, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/groupentitlements/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"&ruleOption=" + ruleOption+"&removeGroupMembership="+removeGroupMembership+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GroupEntitlementOperationReference>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get direct members of a Group.
		/// Members_Get {organization}/_apis/GroupEntitlements/{groupId}/members
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="groupId">Id of the Group.</param>
		/// <param name="maxResults">Maximum number of results to retrieve.</param>
		/// <param name="pagingToken">Paging Token from the previous page fetched. If the 'pagingToken' is null, the results would be fetched from the beginning of the Members List.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<PagedGraphMemberList> Members_GetAsync(string organization, string groupId, int maxResults, string pagingToken, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/GroupEntitlements/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/members&maxResults="+maxResults+"&pagingToken=" + (pagingToken==null? "" : System.Uri.EscapeDataString(pagingToken))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PagedGraphMemberList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get direct members of a Group.
		/// Members_Get {organization}/_apis/GroupEntitlements/{groupId}/members
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="groupId">Id of the Group.</param>
		/// <param name="maxResults">Maximum number of results to retrieve.</param>
		/// <param name="pagingToken">Paging Token from the previous page fetched. If the 'pagingToken' is null, the results would be fetched from the beginning of the Members List.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public PagedGraphMemberList Members_Get(string organization, string groupId, int maxResults, string pagingToken, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/GroupEntitlements/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/members&maxResults="+maxResults+"&pagingToken=" + (pagingToken==null? "" : System.Uri.EscapeDataString(pagingToken))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PagedGraphMemberList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a member to a Group.
		/// Members_Add {organization}/_apis/GroupEntitlements/{groupId}/members/{memberId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="groupId">Id of the Group.</param>
		/// <param name="memberId">Id of the member to add.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Members_AddAsync(string organization, string groupId, string memberId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/GroupEntitlements/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/members/"+ (memberId==null? "" : System.Uri.EscapeDataString(memberId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a member to a Group.
		/// Members_Add {organization}/_apis/GroupEntitlements/{groupId}/members/{memberId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="groupId">Id of the Group.</param>
		/// <param name="memberId">Id of the member to add.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Members_Add(string organization, string groupId, string memberId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/GroupEntitlements/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/members/"+ (memberId==null? "" : System.Uri.EscapeDataString(memberId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a member from a Group.
		/// Members_Remove_Member_From_Group {organization}/_apis/GroupEntitlements/{groupId}/members/{memberId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="groupId">Id of the group.</param>
		/// <param name="memberId">Id of the member to remove.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Members_Remove_Member_From_GroupAsync(string organization, string groupId, string memberId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/GroupEntitlements/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/members/"+ (memberId==null? "" : System.Uri.EscapeDataString(memberId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a member from a Group.
		/// Members_Remove_Member_From_Group {organization}/_apis/GroupEntitlements/{groupId}/members/{memberId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="groupId">Id of the group.</param>
		/// <param name="memberId">Id of the member to remove.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Members_Remove_Member_From_Group(string organization, string groupId, string memberId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/GroupEntitlements/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/members/"+ (memberId==null? "" : System.Uri.EscapeDataString(memberId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a paged set of user entitlements matching the filter and sort criteria built with properties that match the select input.
		/// User_Entitlements_Search_User_Entitlements {organization}/_apis/userentitlements
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="continuationToken">Continuation token for getting the next page of data set. If null is passed, gets the first page.</param>
		/// <param name="select">Comma (",") separated list of properties to select in the result entitlements. names of the properties are - 'Projects, 'Extensions' and 'Grouprules'.</param>
		/// <param name="filter">Equality operators relating to searching user entitlements seperated by and clauses. Valid filters include: licenseId, licenseStatus, userType, and name. licenseId: filters based on license assignment using license names. i.e. licenseId eq 'Account-Stakeholder' or licenseId eq 'Account-Express'. licenseStatus: filters based on license status. currently only supports disabled. i.e. licenseStatus eq 'Disabled'. To get disabled basic licenses, you would pass (licenseId eq 'Account-Express' and licenseStatus eq 'Disabled') userType: filters off identity type. Suppored types are member or guest i.e. userType eq 'member'. name: filters on if the user's display name or email contians given input. i.e. get all users with "test" in email or displayname is "name eq 'test'". A valid query could be: (licenseId eq 'Account-Stakeholder' or (licenseId eq 'Account-Express' and licenseStatus eq 'Disabled')) and name eq 'test' and userType eq 'guest'.</param>
		/// <param name="orderBy">PropertyName and Order (separated by a space ( )) to sort on (e.g. lastAccessed desc). Order defaults to ascending. valid properties to order by are dateCreated, lastAccessed, and name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<PagedGraphMemberList> User_Entitlements_Search_User_EntitlementsAsync(string organization, string continuationToken, User_Entitlements_Search_User_EntitlementsSelect select, string filter, string orderBy, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/userentitlements&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken))+"&select=" + select+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PagedGraphMemberList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a paged set of user entitlements matching the filter and sort criteria built with properties that match the select input.
		/// User_Entitlements_Search_User_Entitlements {organization}/_apis/userentitlements
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="continuationToken">Continuation token for getting the next page of data set. If null is passed, gets the first page.</param>
		/// <param name="select">Comma (",") separated list of properties to select in the result entitlements. names of the properties are - 'Projects, 'Extensions' and 'Grouprules'.</param>
		/// <param name="filter">Equality operators relating to searching user entitlements seperated by and clauses. Valid filters include: licenseId, licenseStatus, userType, and name. licenseId: filters based on license assignment using license names. i.e. licenseId eq 'Account-Stakeholder' or licenseId eq 'Account-Express'. licenseStatus: filters based on license status. currently only supports disabled. i.e. licenseStatus eq 'Disabled'. To get disabled basic licenses, you would pass (licenseId eq 'Account-Express' and licenseStatus eq 'Disabled') userType: filters off identity type. Suppored types are member or guest i.e. userType eq 'member'. name: filters on if the user's display name or email contians given input. i.e. get all users with "test" in email or displayname is "name eq 'test'". A valid query could be: (licenseId eq 'Account-Stakeholder' or (licenseId eq 'Account-Express' and licenseStatus eq 'Disabled')) and name eq 'test' and userType eq 'guest'.</param>
		/// <param name="orderBy">PropertyName and Order (separated by a space ( )) to sort on (e.g. lastAccessed desc). Order defaults to ascending. valid properties to order by are dateCreated, lastAccessed, and name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public PagedGraphMemberList User_Entitlements_Search_User_Entitlements(string organization, string continuationToken, User_Entitlements_Search_User_EntitlementsSelect select, string filter, string orderBy, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/userentitlements&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken))+"&select=" + select+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PagedGraphMemberList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a user, assign license and extensions and make them a member of a project group in an account.
		/// User_Entitlements_Add {organization}/_apis/userentitlements
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <param name="requestBody">UserEntitlement object specifying License, Extensions and Project/Team groups the user should be added to.</param>
		/// <returns>successful operation</returns>
		public async Task<UserEntitlementsPostResponse> User_Entitlements_AddAsync(string organization, string api_version, UserEntitlement requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/userentitlements&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserEntitlementsPostResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a user, assign license and extensions and make them a member of a project group in an account.
		/// User_Entitlements_Add {organization}/_apis/userentitlements
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <param name="requestBody">UserEntitlement object specifying License, Extensions and Project/Team groups the user should be added to.</param>
		/// <returns>successful operation</returns>
		public UserEntitlementsPostResponse User_Entitlements_Add(string organization, string api_version, UserEntitlement requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/userentitlements&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserEntitlementsPostResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get User Entitlement for a user.
		/// User_Entitlements_Get {organization}/_apis/userentitlements/{userId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="userId">ID of the user.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<UserEntitlement> User_Entitlements_GetAsync(string organization, string userId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/userentitlements/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserEntitlement>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User Entitlement for a user.
		/// User_Entitlements_Get {organization}/_apis/userentitlements/{userId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="userId">ID of the user.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public UserEntitlement User_Entitlements_Get(string organization, string userId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/userentitlements/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserEntitlement>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a user from the account.
		/// 
		/// The delete operation includes unassigning Extensions and Licenses and removing the user from all project memberships.
		/// The user would continue to have access to the account if she is member of an AAD group, that is added directly to the account.
		/// User_Entitlements_Delete {organization}/_apis/userentitlements/{userId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="userId">ID of the user.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task User_Entitlements_DeleteAsync(string organization, string userId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/userentitlements/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a user from the account.
		/// 
		/// The delete operation includes unassigning Extensions and Licenses and removing the user from all project memberships.
		/// The user would continue to have access to the account if she is member of an AAD group, that is added directly to the account.
		/// User_Entitlements_Delete {organization}/_apis/userentitlements/{userId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="userId">ID of the user.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void User_Entitlements_Delete(string organization, string userId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/userentitlements/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get summary of Licenses, Extension, Projects, Groups and their assignments in the collection.
		/// User_Entitlement_Summary_Get {organization}/_apis/userentitlementsummary
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="select">Comma (",") separated list of properties to select. Supported property names are {AccessLevels, Licenses, Projects, Groups}.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<UsersSummary> User_Entitlement_Summary_GetAsync(string organization, string select, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/userentitlementsummary&select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UsersSummary>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get summary of Licenses, Extension, Projects, Groups and their assignments in the collection.
		/// User_Entitlement_Summary_Get {organization}/_apis/userentitlementsummary
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="select">Comma (",") separated list of properties to select. Supported property names are {AccessLevels, Licenses, Projects, Groups}.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public UsersSummary User_Entitlement_Summary_Get(string organization, string select, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/userentitlementsummary&select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UsersSummary>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Group_Entitlements_AddRuleOption
	{
		
		applyGroupRule = 0,
		
		testApplyGroupRule = 1,
	}
	
	public enum User_Entitlements_Search_User_EntitlementsSelect
	{
		
		license = 0,
		
		extensions = 1,
		
		projects = 2,
		
		groupRules = 3,
		
		all = 4,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
