//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Class for encapsulating the allowed and denied permissions for a given IdentityDescriptor.
	/// </summary>
	public class AccessControlEntry
	{
		
		/// <summary>
		/// The set of permission bits that represent the actions that the associated descriptor is allowed to perform.
		/// </summary>
		public System.Nullable<System.Int32> Allow { get; set; }
		
		/// <summary>
		/// The set of permission bits that represent the actions that the associated descriptor is not allowed to perform.
		/// </summary>
		public System.Nullable<System.Int32> Deny { get; set; }
		
		/// <summary>
		/// An Identity descriptor is a wrapper for the identity type (Windows SID, Passport) along with a unique identifier such as the SID or PUID.
		/// </summary>
		public IdentityDescriptor Descriptor { get; set; }
		
		/// <summary>
		/// Holds the inherited and effective permission information for a given AccessControlEntry.
		/// </summary>
		public AceExtendedInformation ExtendedInfo { get; set; }
	}
	
	/// <summary>
	/// An Identity descriptor is a wrapper for the identity type (Windows SID, Passport) along with a unique identifier such as the SID or PUID.
	/// </summary>
	public class IdentityDescriptor
	{
		
		/// <summary>
		/// The unique identifier for this identity, not exceeding 256 chars, which will be persisted.
		/// </summary>
		public string Identifier { get; set; }
		
		/// <summary>
		/// Type of descriptor (for example, Windows, Passport, etc.).
		/// </summary>
		public string IdentityType { get; set; }
	}
	
	/// <summary>
	/// Holds the inherited and effective permission information for a given AccessControlEntry.
	/// </summary>
	public class AceExtendedInformation
	{
		
		/// <summary>
		/// This is the combination of all of the explicit and inherited permissions for this identity on this token.  These are the permissions used when determining if a given user has permission to perform an action.
		/// </summary>
		public System.Nullable<System.Int32> EffectiveAllow { get; set; }
		
		/// <summary>
		/// This is the combination of all of the explicit and inherited permissions for this identity on this token.  These are the permissions used when determining if a given user has permission to perform an action.
		/// </summary>
		public System.Nullable<System.Int32> EffectiveDeny { get; set; }
		
		/// <summary>
		/// These are the permissions that are inherited for this identity on this token.  If the token does not inherit permissions this will be 0.  Note that any permissions that have been explicitly set on this token for this identity, or any groups that this identity is a part of, are not included here.
		/// </summary>
		public System.Nullable<System.Int32> InheritedAllow { get; set; }
		
		/// <summary>
		/// These are the permissions that are inherited for this identity on this token.  If the token does not inherit permissions this will be 0.  Note that any permissions that have been explicitly set on this token for this identity, or any groups that this identity is a part of, are not included here.
		/// </summary>
		public System.Nullable<System.Int32> InheritedDeny { get; set; }
	}
	
	/// <summary>
	/// The AccessControlList class is meant to associate a set of AccessControlEntries with a security token and its inheritance settings.
	/// </summary>
	public class AccessControlList
	{
		
		/// <summary>
		/// Storage of permissions keyed on the identity the permission is for.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, AccessControlEntry> AcesDictionary { get; set; }
		
		/// <summary>
		/// True if this ACL holds ACEs that have extended information.
		/// </summary>
		public System.Nullable<System.Boolean> IncludeExtendedInfo { get; set; }
		
		/// <summary>
		/// True if the given token inherits permissions from parents.
		/// </summary>
		public System.Nullable<System.Boolean> InheritPermissions { get; set; }
		
		/// <summary>
		/// The token that this AccessControlList is for.
		/// </summary>
		public string Token { get; set; }
	}
	
	/// <summary>
	/// A list of AccessControlList. An AccessControlList is meant to associate a set of AccessControlEntries with a security token and its inheritance settings.
	/// </summary>
	public class AccessControlListsCollection
	{
	}
	
	public class ActionDefinition
	{
		
		/// <summary>
		/// The bit mask integer for this action. Must be a power of 2.
		/// </summary>
		public System.Nullable<System.Int32> Bit { get; set; }
		
		/// <summary>
		/// The localized display name for this action.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The non-localized name for this action.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The namespace that this action belongs to.  This will only be used for reading from the database.
		/// </summary>
		public string NamespaceId { get; set; }
	}
	
	/// <summary>
	/// Represents a JSON object.
	/// </summary>
	public class JObject
	{
		
		public string Item { get; set; }
		
		/// <summary>
		/// Gets the node type for this JToken.
		/// </summary>
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents an evaluated permission.
	/// </summary>
	public class PermissionEvaluation
	{
		
		/// <summary>
		/// Permission bit for this evaluated permission.
		/// </summary>
		public System.Nullable<System.Int32> Permissions { get; set; }
		
		/// <summary>
		/// Security namespace identifier for this evaluated permission.
		/// </summary>
		public string SecurityNamespaceId { get; set; }
		
		/// <summary>
		/// Security namespace-specific token for this evaluated permission.
		/// </summary>
		public string Token { get; set; }
		
		/// <summary>
		/// Permission evaluation value.
		/// </summary>
		public System.Nullable<System.Boolean> Value { get; set; }
	}
	
	/// <summary>
	/// Represents a set of evaluated permissions.
	/// </summary>
	public class PermissionEvaluationBatch
	{
		
		/// <summary>
		/// True if members of the Administrators group should always pass the security check.
		/// </summary>
		public System.Nullable<System.Boolean> AlwaysAllowAdministrators { get; set; }
		
		/// <summary>
		/// Array of permission evaluations to evaluate.
		/// </summary>
		public PermissionEvaluation[] Evaluations { get; set; }
	}
	
	/// <summary>
	/// Class for describing the details of a TeamFoundationSecurityNamespace.
	/// </summary>
	public class SecurityNamespaceDescription
	{
		
		/// <summary>
		/// The list of actions that this Security Namespace is responsible for securing.
		/// </summary>
		public ActionDefinition[] Actions { get; set; }
		
		/// <summary>
		/// This is the dataspace category that describes where the security information for this SecurityNamespace should be stored.
		/// </summary>
		public string DataspaceCategory { get; set; }
		
		/// <summary>
		/// This localized name for this namespace.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// If the security tokens this namespace will be operating on need to be split on certain character lengths to determine its elements, that length should be specified here. If not, this value will be -1.
		/// </summary>
		public System.Nullable<System.Int32> ElementLength { get; set; }
		
		/// <summary>
		/// This is the type of the extension that should be loaded from the plugins directory for extending this security namespace.
		/// </summary>
		public string ExtensionType { get; set; }
		
		/// <summary>
		/// If true, the security namespace is remotable, allowing another service to proxy the namespace.
		/// </summary>
		public System.Nullable<System.Boolean> IsRemotable { get; set; }
		
		/// <summary>
		/// This non-localized for this namespace.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The unique identifier for this namespace.
		/// </summary>
		public string NamespaceId { get; set; }
		
		/// <summary>
		/// The permission bits needed by a user in order to read security data on the Security Namespace.
		/// </summary>
		public System.Nullable<System.Int32> ReadPermission { get; set; }
		
		/// <summary>
		/// If the security tokens this namespace will be operating on need to be split on certain characters to determine its elements that character should be specified here. If not, this value will be the null character.
		/// </summary>
		public string SeparatorValue { get; set; }
		
		/// <summary>
		/// Used to send information about the structure of the security namespace over the web service.
		/// </summary>
		public System.Nullable<System.Int32> StructureValue { get; set; }
		
		/// <summary>
		/// The bits reserved by system store
		/// </summary>
		public System.Nullable<System.Int32> SystemBitMask { get; set; }
		
		/// <summary>
		/// If true, the security service will expect an ISecurityDataspaceTokenTranslator plugin to exist for this namespace
		/// </summary>
		public System.Nullable<System.Boolean> UseTokenTranslator { get; set; }
		
		/// <summary>
		/// The permission bits needed by a user in order to modify security data on the Security Namespace.
		/// </summary>
		public System.Nullable<System.Int32> WritePermission { get; set; }
	}
	
	/// <summary>
	/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
	/// </summary>
	public class VssJsonCollectionWrapper
	{
		
		public string Value { get; set; }
	}
	
	public class VssJsonCollectionWrapperBase
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	public partial class MyClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public MyClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Add or update ACEs in the ACL for the provided token. The request body contains the target token, a list of [ACEs](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/access%20control%20entries/set%20access%20control%20entries?#accesscontrolentry) and a optional merge parameter. In the case of a collision (by identity descriptor) with an existing ACE in the ACL, the "merge" parameter determines the behavior. If set, the existing ACE has its allow and deny merged with the incoming ACE's allow and deny. If unset, the existing ACE is displaced.
		/// Access_Control_Entries_Set_Access_Control_Entries {organization}/_apis/accesscontrolentries/{securityNamespaceId}
		/// </summary>
		/// <param name="securityNamespaceId">Security namespace identifier.</param>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<AccessControlEntry[]> Access_Control_Entries_Set_Access_Control_EntriesAsync(string securityNamespaceId, string organization, string api_version, JObject requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/accesscontrolentries/"+ (securityNamespaceId==null? "" : Uri.EscapeDataString(securityNamespaceId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccessControlEntry[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add or update ACEs in the ACL for the provided token. The request body contains the target token, a list of [ACEs](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/access%20control%20entries/set%20access%20control%20entries?#accesscontrolentry) and a optional merge parameter. In the case of a collision (by identity descriptor) with an existing ACE in the ACL, the "merge" parameter determines the behavior. If set, the existing ACE has its allow and deny merged with the incoming ACE's allow and deny. If unset, the existing ACE is displaced.
		/// Access_Control_Entries_Set_Access_Control_Entries {organization}/_apis/accesscontrolentries/{securityNamespaceId}
		/// </summary>
		/// <param name="securityNamespaceId">Security namespace identifier.</param>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public AccessControlEntry[] Access_Control_Entries_Set_Access_Control_Entries(string securityNamespaceId, string organization, string api_version, JObject requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/accesscontrolentries/"+ (securityNamespaceId==null? "" : Uri.EscapeDataString(securityNamespaceId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccessControlEntry[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove the specified ACEs from the ACL belonging to the specified token.
		/// Access_Control_Entries_Remove_Access_Control_Entries {organization}/_apis/accesscontrolentries/{securityNamespaceId}
		/// </summary>
		/// <param name="securityNamespaceId">Security namespace identifier.</param>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="token">The token whose ACL should be modified.</param>
		/// <param name="descriptors">String containing a list of identity descriptors separated by ',' whose entries should be removed.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<bool> Access_Control_Entries_Remove_Access_Control_EntriesAsync(string securityNamespaceId, string organization, string token, string descriptors, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/accesscontrolentries/"+ (securityNamespaceId==null? "" : Uri.EscapeDataString(securityNamespaceId))+"&token=" + (token==null? "" : Uri.EscapeDataString(token))+"&descriptors=" + (descriptors==null? "" : Uri.EscapeDataString(descriptors))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<bool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove the specified ACEs from the ACL belonging to the specified token.
		/// Access_Control_Entries_Remove_Access_Control_Entries {organization}/_apis/accesscontrolentries/{securityNamespaceId}
		/// </summary>
		/// <param name="securityNamespaceId">Security namespace identifier.</param>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="token">The token whose ACL should be modified.</param>
		/// <param name="descriptors">String containing a list of identity descriptors separated by ',' whose entries should be removed.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public bool Access_Control_Entries_Remove_Access_Control_Entries(string securityNamespaceId, string organization, string token, string descriptors, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/accesscontrolentries/"+ (securityNamespaceId==null? "" : Uri.EscapeDataString(securityNamespaceId))+"&token=" + (token==null? "" : Uri.EscapeDataString(token))+"&descriptors=" + (descriptors==null? "" : Uri.EscapeDataString(descriptors))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<bool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of access control lists for the specified security namespace and token. All ACLs in the security namespace will be retrieved if no optional parameters are provided.
		/// Access_Control_Lists_Query {organization}/_apis/accesscontrollists/{securityNamespaceId}
		/// </summary>
		/// <param name="securityNamespaceId">Security namespace identifier.</param>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="token">Security token</param>
		/// <param name="descriptors">An optional filter string containing a list of identity descriptors separated by ',' whose ACEs should be retrieved. If this is left null, entire ACLs will be returned.</param>
		/// <param name="includeExtendedInfo">If true, populate the extended information properties for the access control entries contained in the returned lists.</param>
		/// <param name="recurse">If true and this is a hierarchical namespace, return child ACLs of the specified token.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<AccessControlList[]> Access_Control_Lists_QueryAsync(string securityNamespaceId, string organization, string token, string descriptors, bool includeExtendedInfo, bool recurse, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/accesscontrollists/"+ (securityNamespaceId==null? "" : Uri.EscapeDataString(securityNamespaceId))+"&token=" + (token==null? "" : Uri.EscapeDataString(token))+"&descriptors=" + (descriptors==null? "" : Uri.EscapeDataString(descriptors))+"&includeExtendedInfo="+includeExtendedInfo+"&recurse="+recurse+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccessControlList[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of access control lists for the specified security namespace and token. All ACLs in the security namespace will be retrieved if no optional parameters are provided.
		/// Access_Control_Lists_Query {organization}/_apis/accesscontrollists/{securityNamespaceId}
		/// </summary>
		/// <param name="securityNamespaceId">Security namespace identifier.</param>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="token">Security token</param>
		/// <param name="descriptors">An optional filter string containing a list of identity descriptors separated by ',' whose ACEs should be retrieved. If this is left null, entire ACLs will be returned.</param>
		/// <param name="includeExtendedInfo">If true, populate the extended information properties for the access control entries contained in the returned lists.</param>
		/// <param name="recurse">If true and this is a hierarchical namespace, return child ACLs of the specified token.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public AccessControlList[] Access_Control_Lists_Query(string securityNamespaceId, string organization, string token, string descriptors, bool includeExtendedInfo, bool recurse, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/accesscontrollists/"+ (securityNamespaceId==null? "" : Uri.EscapeDataString(securityNamespaceId))+"&token=" + (token==null? "" : Uri.EscapeDataString(token))+"&descriptors=" + (descriptors==null? "" : Uri.EscapeDataString(descriptors))+"&includeExtendedInfo="+includeExtendedInfo+"&recurse="+recurse+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccessControlList[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update one or more access control lists. All data that currently exists for the ACLs supplied will be overwritten.
		/// Access_Control_Lists_Set_Access_Control_Lists {organization}/_apis/accesscontrollists/{securityNamespaceId}
		/// </summary>
		/// <param name="securityNamespaceId">Security namespace identifier.</param>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">A list of ACLs to create or update.</param>
		/// <returns>successful operation</returns>
		public async Task Access_Control_Lists_Set_Access_Control_ListsAsync(string securityNamespaceId, string organization, string api_version, VssJsonCollectionWrapper requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/accesscontrollists/"+ (securityNamespaceId==null? "" : Uri.EscapeDataString(securityNamespaceId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create or update one or more access control lists. All data that currently exists for the ACLs supplied will be overwritten.
		/// Access_Control_Lists_Set_Access_Control_Lists {organization}/_apis/accesscontrollists/{securityNamespaceId}
		/// </summary>
		/// <param name="securityNamespaceId">Security namespace identifier.</param>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">A list of ACLs to create or update.</param>
		/// <returns>successful operation</returns>
		public void Access_Control_Lists_Set_Access_Control_Lists(string securityNamespaceId, string organization, string api_version, VssJsonCollectionWrapper requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/accesscontrollists/"+ (securityNamespaceId==null? "" : Uri.EscapeDataString(securityNamespaceId))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove access control lists under the specfied security namespace.
		/// Access_Control_Lists_Remove_Access_Control_Lists {organization}/_apis/accesscontrollists/{securityNamespaceId}
		/// </summary>
		/// <param name="securityNamespaceId">Security namespace identifier.</param>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="tokens">One or more comma-separated security tokens</param>
		/// <param name="recurse">If true and this is a hierarchical namespace, also remove child ACLs of the specified tokens.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<bool> Access_Control_Lists_Remove_Access_Control_ListsAsync(string securityNamespaceId, string organization, string tokens, bool recurse, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/accesscontrollists/"+ (securityNamespaceId==null? "" : Uri.EscapeDataString(securityNamespaceId))+"&tokens=" + (tokens==null? "" : Uri.EscapeDataString(tokens))+"&recurse="+recurse+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<bool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove access control lists under the specfied security namespace.
		/// Access_Control_Lists_Remove_Access_Control_Lists {organization}/_apis/accesscontrollists/{securityNamespaceId}
		/// </summary>
		/// <param name="securityNamespaceId">Security namespace identifier.</param>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="tokens">One or more comma-separated security tokens</param>
		/// <param name="recurse">If true and this is a hierarchical namespace, also remove child ACLs of the specified tokens.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public bool Access_Control_Lists_Remove_Access_Control_Lists(string securityNamespaceId, string organization, string tokens, bool recurse, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/accesscontrollists/"+ (securityNamespaceId==null? "" : Uri.EscapeDataString(securityNamespaceId))+"&tokens=" + (tokens==null? "" : Uri.EscapeDataString(tokens))+"&recurse="+recurse+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<bool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Evaluates whether the caller has the specified permissions on the specified set of security tokens.
		/// Permissions_Has_Permissions {organization}/_apis/permissions/{securityNamespaceId}/{permissions}
		/// </summary>
		/// <param name="securityNamespaceId">Security namespace identifier.</param>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="permissions">Permissions to evaluate.</param>
		/// <param name="tokens">One or more security tokens to evaluate.</param>
		/// <param name="alwaysAllowAdministrators">If true and if the caller is an administrator, always return true.</param>
		/// <param name="delimiter">Optional security token separator. Defaults to ",".</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<bool[]> Permissions_Has_PermissionsAsync(string securityNamespaceId, string organization, int permissions, string tokens, bool alwaysAllowAdministrators, string delimiter, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/permissions/"+ (securityNamespaceId==null? "" : Uri.EscapeDataString(securityNamespaceId))+"/"+permissions+"&tokens=" + (tokens==null? "" : Uri.EscapeDataString(tokens))+"&alwaysAllowAdministrators="+alwaysAllowAdministrators+"&delimiter=" + (delimiter==null? "" : Uri.EscapeDataString(delimiter))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<bool[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Evaluates whether the caller has the specified permissions on the specified set of security tokens.
		/// Permissions_Has_Permissions {organization}/_apis/permissions/{securityNamespaceId}/{permissions}
		/// </summary>
		/// <param name="securityNamespaceId">Security namespace identifier.</param>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="permissions">Permissions to evaluate.</param>
		/// <param name="tokens">One or more security tokens to evaluate.</param>
		/// <param name="alwaysAllowAdministrators">If true and if the caller is an administrator, always return true.</param>
		/// <param name="delimiter">Optional security token separator. Defaults to ",".</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public bool[] Permissions_Has_Permissions(string securityNamespaceId, string organization, int permissions, string tokens, bool alwaysAllowAdministrators, string delimiter, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/permissions/"+ (securityNamespaceId==null? "" : Uri.EscapeDataString(securityNamespaceId))+"/"+permissions+"&tokens=" + (tokens==null? "" : Uri.EscapeDataString(tokens))+"&alwaysAllowAdministrators="+alwaysAllowAdministrators+"&delimiter=" + (delimiter==null? "" : Uri.EscapeDataString(delimiter))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<bool[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the specified permissions on a security token for a user or group.
		/// Permissions_Remove_Permission {organization}/_apis/permissions/{securityNamespaceId}/{permissions}
		/// </summary>
		/// <param name="securityNamespaceId">Security namespace identifier.</param>
		/// <param name="descriptor">Identity descriptor of the user to remove permissions for.</param>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="permissions">Permissions to remove.</param>
		/// <param name="token">Security token to remove permissions for.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<AccessControlEntry> Permissions_Remove_PermissionAsync(string securityNamespaceId, string descriptor, string organization, int permissions, string token, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/permissions/"+ (securityNamespaceId==null? "" : Uri.EscapeDataString(securityNamespaceId))+"/"+permissions+"&descriptor=" + (descriptor==null? "" : Uri.EscapeDataString(descriptor))+"&token=" + (token==null? "" : Uri.EscapeDataString(token))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccessControlEntry>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the specified permissions on a security token for a user or group.
		/// Permissions_Remove_Permission {organization}/_apis/permissions/{securityNamespaceId}/{permissions}
		/// </summary>
		/// <param name="securityNamespaceId">Security namespace identifier.</param>
		/// <param name="descriptor">Identity descriptor of the user to remove permissions for.</param>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="permissions">Permissions to remove.</param>
		/// <param name="token">Security token to remove permissions for.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public AccessControlEntry Permissions_Remove_Permission(string securityNamespaceId, string descriptor, string organization, int permissions, string token, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/permissions/"+ (securityNamespaceId==null? "" : Uri.EscapeDataString(securityNamespaceId))+"/"+permissions+"&descriptor=" + (descriptor==null? "" : Uri.EscapeDataString(descriptor))+"&token=" + (token==null? "" : Uri.EscapeDataString(token))+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccessControlEntry>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Evaluates multiple permissions for the calling user.  Note: This method does not aggregate the results, nor does it short-circuit if one of the permissions evaluates to false.
		/// Permissions_Has_Permissions_Batch {organization}/_apis/security/permissionevaluationbatch
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The set of evaluation requests.</param>
		/// <returns>successful operation</returns>
		public async Task<PermissionEvaluationBatch> Permissions_Has_Permissions_BatchAsync(string organization, string api_version, PermissionEvaluationBatch requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/security/permissionevaluationbatch&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PermissionEvaluationBatch>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Evaluates multiple permissions for the calling user.  Note: This method does not aggregate the results, nor does it short-circuit if one of the permissions evaluates to false.
		/// Permissions_Has_Permissions_Batch {organization}/_apis/security/permissionevaluationbatch
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">The set of evaluation requests.</param>
		/// <returns>successful operation</returns>
		public PermissionEvaluationBatch Permissions_Has_Permissions_Batch(string organization, string api_version, PermissionEvaluationBatch requestBody)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/security/permissionevaluationbatch&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PermissionEvaluationBatch>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all security namespaces or just the specified namespace.
		/// Security_Namespaces_Query {organization}/_apis/securitynamespaces/{securityNamespaceId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="securityNamespaceId">Security namespace identifier.</param>
		/// <param name="localOnly">If true, retrieve only local security namespaces.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<SecurityNamespaceDescription[]> Security_Namespaces_QueryAsync(string organization, string securityNamespaceId, bool localOnly, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/securitynamespaces/"+ (securityNamespaceId==null? "" : Uri.EscapeDataString(securityNamespaceId))+"&localOnly="+localOnly+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SecurityNamespaceDescription[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all security namespaces or just the specified namespace.
		/// Security_Namespaces_Query {organization}/_apis/securitynamespaces/{securityNamespaceId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="securityNamespaceId">Security namespace identifier.</param>
		/// <param name="localOnly">If true, retrieve only local security namespaces.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public SecurityNamespaceDescription[] Security_Namespaces_Query(string organization, string securityNamespaceId, bool localOnly, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : Uri.EscapeDataString(organization))+"/_apis/securitynamespaces/"+ (securityNamespaceId==null? "" : Uri.EscapeDataString(securityNamespaceId))+"&localOnly="+localOnly+"&api-version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SecurityNamespaceDescription[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
