//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public class FeedConnections
	{
		
		public Pagination Pagination { get; set; }
		
		public FeedConnection[] Items { get; set; }
	}
	
	public class Pagination
	{
		
		/// <summary>
		/// Page number which specifies the set of records to retrieve. Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?page=2 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned.
		/// </summary>
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Page size which specifies how many records per page will be returned (default 50). Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?pageSize=100 to specify page size of 100.
		/// </summary>
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		/// <summary>
		/// Number of pages available
		/// </summary>
		public System.Nullable<System.Int32> PageCount { get; set; }
		
		/// <summary>
		/// Number of items returned
		/// </summary>
		public System.Nullable<System.Int32> ItemCount { get; set; }
	}
	
	public class FeedConnection
	{
		
		/// <summary>
		/// GUID used to identify the Account.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// This account identifier is generated by the financial institute (FI). This must be unique for your financial institute.
		/// Maximum: 50
		/// </summary>
		public string AccountToken { get; set; }
		
		/// <summary>
		/// String(40) when AccountType is BANK String(4) when AccountType is CREDITCARD The Account Number is used to match the feed to a Xero Bank Account. The API will create a new Xero Bank Account if a match to an existing Xero Bank Account is not found. Only the last 4 digits must be supplied for Credit Card numbers. Must be included if AccountId is not specified.
		/// Maximum: 40
		/// </summary>
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// The Account Name will be used for the creation of a new Xero Bank Account if a matching Xero Bank Account is not found.
		/// Maximum: 30
		/// </summary>
		public string AccountName { get; set; }
		
		/// <summary>
		/// Xero identifier for a bank account in Xero. Must be included if AccountNumber is not specified.
		/// </summary>
		public string AccountId { get; set; }
		
		/// <summary>
		/// High level bank account type - BANK CREDITCARD BANK encompasses all bank account types other than credit cards.
		/// </summary>
		public System.Nullable<FeedConnectionAccountType> AccountType { get; set; }
		
		/// <summary>
		/// 3 letter alpha code for the ISO-4217 currency code, e.g. USD, AUD.
		/// </summary>
		public System.Nullable<FeedConnectionCurrency> Currency { get; set; }
		
		/// <summary>
		/// ISO-3166 alpha-2 country code, e.g. US, AU This element is required only when the Application supports multi-region. Talk to your Partner Manager to confirm if this is the case.
		/// </summary>
		public System.Nullable<FeedConnectionCountry> Country { get; set; }
		
		/// <summary>
		/// the current status of the feed connection
		/// </summary>
		public System.Nullable<FeedConnectionStatus> Status { get; set; }
		
		/// <summary>
		/// On error, the API consumer will receive an HTTP response with a HTTP Status Code of 4xx or 5xx and a Content-Type of application/problem+json.
		/// </summary>
		public Error Error { get; set; }
	}
	
	public enum FeedConnectionAccountType
	{
		
		BANK = 0,
		
		CREDITCARD = 1,
	}
	
	public enum FeedConnectionCurrency
	{
		
		AED = 0,
		
		AFN = 1,
		
		ALL = 2,
		
		AMD = 3,
		
		ANG = 4,
		
		AOA = 5,
		
		ARS = 6,
		
		AUD = 7,
		
		AWG = 8,
		
		AZN = 9,
		
		BAM = 10,
		
		BBD = 11,
		
		BDT = 12,
		
		BGN = 13,
		
		BHD = 14,
		
		BIF = 15,
		
		BMD = 16,
		
		BND = 17,
		
		BOB = 18,
		
		BRL = 19,
		
		BSD = 20,
		
		BTN = 21,
		
		BWP = 22,
		
		BYN = 23,
		
		BZD = 24,
		
		CAD = 25,
		
		CDF = 26,
		
		CHF = 27,
		
		CLP = 28,
		
		CNY = 29,
		
		COP = 30,
		
		CRC = 31,
		
		CUC = 32,
		
		CUP = 33,
		
		CVE = 34,
		
		CZK = 35,
		
		DJF = 36,
		
		DKK = 37,
		
		DOP = 38,
		
		DZD = 39,
		
		EGP = 40,
		
		ERN = 41,
		
		ETB = 42,
		
		EUR = 43,
		
		FJD = 44,
		
		FKP = 45,
		
		GBP = 46,
		
		GEL = 47,
		
		GGP = 48,
		
		GHS = 49,
		
		GIP = 50,
		
		GMD = 51,
		
		GNF = 52,
		
		GTQ = 53,
		
		GYD = 54,
		
		HKD = 55,
		
		HNL = 56,
		
		HRK = 57,
		
		HTG = 58,
		
		HUF = 59,
		
		IDR = 60,
		
		ILS = 61,
		
		IMP = 62,
		
		INR = 63,
		
		IQD = 64,
		
		IRR = 65,
		
		ISK = 66,
		
		JEP = 67,
		
		JMD = 68,
		
		JOD = 69,
		
		JPY = 70,
		
		KES = 71,
		
		KGS = 72,
		
		KHR = 73,
		
		KMF = 74,
		
		KPW = 75,
		
		KRW = 76,
		
		KWD = 77,
		
		KYD = 78,
		
		KZT = 79,
		
		LAK = 80,
		
		LBP = 81,
		
		LKR = 82,
		
		LRD = 83,
		
		LSL = 84,
		
		LYD = 85,
		
		MAD = 86,
		
		MDL = 87,
		
		MGA = 88,
		
		MKD = 89,
		
		MMK = 90,
		
		MNT = 91,
		
		MOP = 92,
		
		MRU = 93,
		
		MUR = 94,
		
		MVR = 95,
		
		MWK = 96,
		
		MXN = 97,
		
		MYR = 98,
		
		MZN = 99,
		
		NAD = 100,
		
		NGN = 101,
		
		NIO = 102,
		
		NOK = 103,
		
		NPR = 104,
		
		NZD = 105,
		
		OMR = 106,
		
		PAB = 107,
		
		PEN = 108,
		
		PGK = 109,
		
		PHP = 110,
		
		PKR = 111,
		
		PLN = 112,
		
		PYG = 113,
		
		QAR = 114,
		
		RON = 115,
		
		RSD = 116,
		
		RUB = 117,
		
		RWF = 118,
		
		SAR = 119,
		
		SBD = 120,
		
		SCR = 121,
		
		SDG = 122,
		
		SEK = 123,
		
		SGD = 124,
		
		SHP = 125,
		
		SLL = 126,
		
		SOS = 127,
		
		SPL = 128,
		
		SRD = 129,
		
		STN = 130,
		
		SVC = 131,
		
		SYP = 132,
		
		SZL = 133,
		
		THB = 134,
		
		TJS = 135,
		
		TMT = 136,
		
		TND = 137,
		
		TOP = 138,
		
		TRY = 139,
		
		TTD = 140,
		
		TVD = 141,
		
		TWD = 142,
		
		TZS = 143,
		
		UAH = 144,
		
		UGX = 145,
		
		USD = 146,
		
		UYU = 147,
		
		UZS = 148,
		
		VEF = 149,
		
		VND = 150,
		
		VUV = 151,
		
		WST = 152,
		
		XAF = 153,
		
		XCD = 154,
		
		XDR = 155,
		
		XOF = 156,
		
		XPF = 157,
		
		YER = 158,
		
		ZAR = 159,
		
		ZMW = 160,
		
		ZMK = 161,
		
		ZWD = 162,
		
		_ = 163,
	}
	
	public enum FeedConnectionCountry
	{
		
		AD = 0,
		
		AE = 1,
		
		AF = 2,
		
		AG = 3,
		
		AI = 4,
		
		AL = 5,
		
		AM = 6,
		
		AN = 7,
		
		AO = 8,
		
		AQ = 9,
		
		AR = 10,
		
		AS = 11,
		
		AT = 12,
		
		AU = 13,
		
		AW = 14,
		
		AZ = 15,
		
		BA = 16,
		
		BB = 17,
		
		BD = 18,
		
		BE = 19,
		
		BF = 20,
		
		BG = 21,
		
		BH = 22,
		
		BI = 23,
		
		BJ = 24,
		
		BL = 25,
		
		BM = 26,
		
		BN = 27,
		
		BO = 28,
		
		BR = 29,
		
		BS = 30,
		
		BT = 31,
		
		BW = 32,
		
		BY = 33,
		
		BZ = 34,
		
		CA = 35,
		
		CC = 36,
		
		CD = 37,
		
		CF = 38,
		
		CG = 39,
		
		CH = 40,
		
		CI = 41,
		
		CK = 42,
		
		CL = 43,
		
		CM = 44,
		
		CN = 45,
		
		CO = 46,
		
		CR = 47,
		
		CU = 48,
		
		CV = 49,
		
		CW = 50,
		
		CX = 51,
		
		CY = 52,
		
		CZ = 53,
		
		DE = 54,
		
		DJ = 55,
		
		DK = 56,
		
		DM = 57,
		
		DO = 58,
		
		DZ = 59,
		
		EC = 60,
		
		EE = 61,
		
		EG = 62,
		
		EH = 63,
		
		ER = 64,
		
		ES = 65,
		
		ET = 66,
		
		FI = 67,
		
		FJ = 68,
		
		FK = 69,
		
		FM = 70,
		
		FO = 71,
		
		FR = 72,
		
		GA = 73,
		
		GB = 74,
		
		GD = 75,
		
		GE = 76,
		
		GG = 77,
		
		GH = 78,
		
		GI = 79,
		
		GL = 80,
		
		GM = 81,
		
		GN = 82,
		
		GQ = 83,
		
		GR = 84,
		
		GT = 85,
		
		GU = 86,
		
		GW = 87,
		
		GY = 88,
		
		HK = 89,
		
		HN = 90,
		
		HR = 91,
		
		HT = 92,
		
		HU = 93,
		
		ID = 94,
		
		IE = 95,
		
		IL = 96,
		
		IM = 97,
		
		IN = 98,
		
		IO = 99,
		
		IQ = 100,
		
		IR = 101,
		
		IS = 102,
		
		IT = 103,
		
		JE = 104,
		
		JM = 105,
		
		JO = 106,
		
		JP = 107,
		
		KE = 108,
		
		KG = 109,
		
		KH = 110,
		
		KI = 111,
		
		KM = 112,
		
		KN = 113,
		
		KP = 114,
		
		KR = 115,
		
		KW = 116,
		
		KY = 117,
		
		KZ = 118,
		
		LA = 119,
		
		LB = 120,
		
		LC = 121,
		
		LI = 122,
		
		LK = 123,
		
		LR = 124,
		
		LS = 125,
		
		LT = 126,
		
		LU = 127,
		
		LV = 128,
		
		LY = 129,
		
		MA = 130,
		
		MC = 131,
		
		MD = 132,
		
		ME = 133,
		
		MF = 134,
		
		MG = 135,
		
		MH = 136,
		
		MK = 137,
		
		ML = 138,
		
		MM = 139,
		
		MN = 140,
		
		MO = 141,
		
		MP = 142,
		
		MR = 143,
		
		MS = 144,
		
		MT = 145,
		
		MU = 146,
		
		MV = 147,
		
		MW = 148,
		
		MX = 149,
		
		MY = 150,
		
		MZ = 151,
		
		NA = 152,
		
		NC = 153,
		
		NE = 154,
		
		NG = 155,
		
		NI = 156,
		
		NL = 157,
		
		NO = 158,
		
		NP = 159,
		
		NR = 160,
		
		NU = 161,
		
		NZ = 162,
		
		OM = 163,
		
		PA = 164,
		
		PE = 165,
		
		PF = 166,
		
		PG = 167,
		
		PH = 168,
		
		PK = 169,
		
		PL = 170,
		
		PM = 171,
		
		PN = 172,
		
		PR = 173,
		
		PS = 174,
		
		PT = 175,
		
		PW = 176,
		
		PY = 177,
		
		QA = 178,
		
		RE = 179,
		
		RO = 180,
		
		RS = 181,
		
		RU = 182,
		
		RW = 183,
		
		SA = 184,
		
		SB = 185,
		
		SC = 186,
		
		SD = 187,
		
		SE = 188,
		
		SG = 189,
		
		SH = 190,
		
		SI = 191,
		
		SJ = 192,
		
		SK = 193,
		
		SL = 194,
		
		SM = 195,
		
		SN = 196,
		
		SO = 197,
		
		SR = 198,
		
		SS = 199,
		
		ST = 200,
		
		SV = 201,
		
		SX = 202,
		
		SY = 203,
		
		SZ = 204,
		
		TC = 205,
		
		TD = 206,
		
		TG = 207,
		
		TH = 208,
		
		TJ = 209,
		
		TK = 210,
		
		TL = 211,
		
		TM = 212,
		
		TN = 213,
		
		TO = 214,
		
		TR = 215,
		
		TT = 216,
		
		TV = 217,
		
		TW = 218,
		
		TZ = 219,
		
		UA = 220,
		
		UG = 221,
		
		US = 222,
		
		UY = 223,
		
		UZ = 224,
		
		VA = 225,
		
		VC = 226,
		
		VE = 227,
		
		VG = 228,
		
		VI = 229,
		
		VN = 230,
		
		VU = 231,
		
		WF = 232,
		
		WS = 233,
		
		XK = 234,
		
		YE = 235,
		
		YT = 236,
		
		ZA = 237,
		
		ZM = 238,
		
		ZW = 239,
	}
	
	public enum FeedConnectionStatus
	{
		
		PENDING = 0,
		
		REJECTED = 1,
	}
	
	/// <summary>
	/// On error, the API consumer will receive an HTTP response with a HTTP Status Code of 4xx or 5xx and a Content-Type of application/problem+json.
	/// </summary>
	public class Error
	{
		
		/// <summary>
		/// Human readable high level error description.
		/// Maximum: 255
		/// </summary>
		public string Title { get; set; }
		
		/// <summary>
		/// The numeric HTTP Status Code, e.g. 404
		/// </summary>
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// Human readable detailed error description.
		/// Maximum: 255
		/// </summary>
		public string Detail { get; set; }
		
		/// <summary>
		/// Identifies the type of error.
		/// </summary>
		public System.Nullable<ErrorType> Type { get; set; }
	}
	
	public enum ErrorType
	{
		
		invalid_request = 0,
		
		invalid_application = 1,
		
		invalid_feed_connection = 2,
		
		duplicate_statement = 3,
		
		invalid_end_balance = 4,
		
		invalid_start_and_end_date = 5,
		
		invalid_start_date = 6,
		
		internal_error = 7,
		
		feed_already_connected_in_current_organisation = 8,
	}
	
	public class Statements
	{
		
		public Pagination Pagination { get; set; }
		
		public Statement[] Items { get; set; }
	}
	
	public class Statement
	{
		
		/// <summary>
		/// GUID used to identify the Statement.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// The Xero generated feed connection Id that identifies the Xero Bank Account Container into which the statement should be delivered. This is obtained by calling GET FeedConnections.
		/// </summary>
		public string FeedConnectionId { get; set; }
		
		/// <summary>
		/// Current status of statements
		/// </summary>
		public System.Nullable<StatementStatus> Status { get; set; }
		
		/// <summary>
		/// Opening balance date (can be no older than one year from the current date) ISO-8601 YYYY-MM-DD
		/// </summary>
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		/// <summary>
		/// Closing balance date ISO-8601 YYYY-MM-DD
		/// </summary>
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		/// <summary>
		/// The starting balance of the statement
		/// </summary>
		public StartBalance StartBalance { get; set; }
		
		/// <summary>
		/// The StartBalance plus all the Statement Line Amounts should be equal to the EndBalance Amount.
		/// </summary>
		public EndBalance EndBalance { get; set; }
		
		public StatementLine[] StatementLines { get; set; }
		
		public Error[] Errors { get; set; }
		
		public System.Nullable<System.Int32> StatementLineCount { get; set; }
	}
	
	public enum StatementStatus
	{
		
		PENDING = 0,
		
		REJECTED = 1,
		
		DELIVERED = 2,
	}
	
	/// <summary>
	/// The starting balance of the statement
	/// </summary>
	public class StartBalance
	{
		
		/// <summary>
		/// decimal(19,4) unsigned Opening/closing balance amount.
		/// </summary>
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// If the statement balances are credit or debit, the CreditDebitIndicator should be specified from the perspective of the Customer.
		/// </summary>
		public System.Nullable<StartBalanceCreditDebitIndicator> CreditDebitIndicator { get; set; }
	}
	
	public enum StartBalanceCreditDebitIndicator
	{
		
		CREDIT = 0,
		
		DEBIT = 1,
	}
	
	/// <summary>
	/// The StartBalance plus all the Statement Line Amounts should be equal to the EndBalance Amount.
	/// </summary>
	public class EndBalance
	{
		
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// If the statement balances are credit or debit, the CreditDebitIndicator should be specified from the perspective of the Customer.
		/// </summary>
		public StartBalanceCreditDebitIndicator CreditDebitIndicator { get; set; }
	}
	
	/// <summary>
	/// the lines details for a statement
	/// </summary>
	public class StatementLine
	{
		
		/// <summary>
		/// The date that the transaction was processed or cleared as seen in internet banking ISO-8601 YYYY-MM-DD
		/// </summary>
		public System.Nullable<System.DateOnly> PostedDate { get; set; }
		
		/// <summary>
		/// Transaction description
		/// Maximum: 2000
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Transaction amount
		/// </summary>
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// If the statement balances are credit or debit, the CreditDebitIndicator should be specified from the perspective of the Customer.
		/// </summary>
		public StartBalanceCreditDebitIndicator CreditDebitIndicator { get; set; }
		
		/// <summary>
		/// Financial institute's internal transaction identifier. If provided this field is factored into duplicate detection.
		/// </summary>
		public string TransactionId { get; set; }
		
		/// <summary>
		/// Typically the merchant or payee name
		/// Maximum: 255
		/// </summary>
		public string PayeeName { get; set; }
		
		/// <summary>
		/// Optional field to enhance the Description
		/// Maximum: 255
		/// </summary>
		public string Reference { get; set; }
		
		/// <summary>
		/// The cheque/check number
		/// Maximum: 20
		/// </summary>
		public string ChequeNumber { get; set; }
	}
	
	/// <summary>
	/// If the statement balances are credit or debit, the CreditDebitIndicator should be specified from the perspective of the Customer.
	/// </summary>
	public enum CreditDebitIndicator
	{
		
		CREDIT = 0,
		
		DEBIT = 1,
	}
	
	/// <summary>
	/// 3 letter alpha code for the ISO-4217 currency code, e.g. USD, AUD.
	/// </summary>
	public enum CurrencyCode
	{
		
		AED = 0,
		
		AFN = 1,
		
		ALL = 2,
		
		AMD = 3,
		
		ANG = 4,
		
		AOA = 5,
		
		ARS = 6,
		
		AUD = 7,
		
		AWG = 8,
		
		AZN = 9,
		
		BAM = 10,
		
		BBD = 11,
		
		BDT = 12,
		
		BGN = 13,
		
		BHD = 14,
		
		BIF = 15,
		
		BMD = 16,
		
		BND = 17,
		
		BOB = 18,
		
		BRL = 19,
		
		BSD = 20,
		
		BTN = 21,
		
		BWP = 22,
		
		BYN = 23,
		
		BZD = 24,
		
		CAD = 25,
		
		CDF = 26,
		
		CHF = 27,
		
		CLP = 28,
		
		CNY = 29,
		
		COP = 30,
		
		CRC = 31,
		
		CUC = 32,
		
		CUP = 33,
		
		CVE = 34,
		
		CZK = 35,
		
		DJF = 36,
		
		DKK = 37,
		
		DOP = 38,
		
		DZD = 39,
		
		EGP = 40,
		
		ERN = 41,
		
		ETB = 42,
		
		EUR = 43,
		
		FJD = 44,
		
		FKP = 45,
		
		GBP = 46,
		
		GEL = 47,
		
		GGP = 48,
		
		GHS = 49,
		
		GIP = 50,
		
		GMD = 51,
		
		GNF = 52,
		
		GTQ = 53,
		
		GYD = 54,
		
		HKD = 55,
		
		HNL = 56,
		
		HRK = 57,
		
		HTG = 58,
		
		HUF = 59,
		
		IDR = 60,
		
		ILS = 61,
		
		IMP = 62,
		
		INR = 63,
		
		IQD = 64,
		
		IRR = 65,
		
		ISK = 66,
		
		JEP = 67,
		
		JMD = 68,
		
		JOD = 69,
		
		JPY = 70,
		
		KES = 71,
		
		KGS = 72,
		
		KHR = 73,
		
		KMF = 74,
		
		KPW = 75,
		
		KRW = 76,
		
		KWD = 77,
		
		KYD = 78,
		
		KZT = 79,
		
		LAK = 80,
		
		LBP = 81,
		
		LKR = 82,
		
		LRD = 83,
		
		LSL = 84,
		
		LYD = 85,
		
		MAD = 86,
		
		MDL = 87,
		
		MGA = 88,
		
		MKD = 89,
		
		MMK = 90,
		
		MNT = 91,
		
		MOP = 92,
		
		MRU = 93,
		
		MUR = 94,
		
		MVR = 95,
		
		MWK = 96,
		
		MXN = 97,
		
		MYR = 98,
		
		MZN = 99,
		
		NAD = 100,
		
		NGN = 101,
		
		NIO = 102,
		
		NOK = 103,
		
		NPR = 104,
		
		NZD = 105,
		
		OMR = 106,
		
		PAB = 107,
		
		PEN = 108,
		
		PGK = 109,
		
		PHP = 110,
		
		PKR = 111,
		
		PLN = 112,
		
		PYG = 113,
		
		QAR = 114,
		
		RON = 115,
		
		RSD = 116,
		
		RUB = 117,
		
		RWF = 118,
		
		SAR = 119,
		
		SBD = 120,
		
		SCR = 121,
		
		SDG = 122,
		
		SEK = 123,
		
		SGD = 124,
		
		SHP = 125,
		
		SLL = 126,
		
		SOS = 127,
		
		SPL = 128,
		
		SRD = 129,
		
		STN = 130,
		
		SVC = 131,
		
		SYP = 132,
		
		SZL = 133,
		
		THB = 134,
		
		TJS = 135,
		
		TMT = 136,
		
		TND = 137,
		
		TOP = 138,
		
		TRY = 139,
		
		TTD = 140,
		
		TVD = 141,
		
		TWD = 142,
		
		TZS = 143,
		
		UAH = 144,
		
		UGX = 145,
		
		USD = 146,
		
		UYU = 147,
		
		UZS = 148,
		
		VEF = 149,
		
		VND = 150,
		
		VUV = 151,
		
		WST = 152,
		
		XAF = 153,
		
		XCD = 154,
		
		XDR = 155,
		
		XOF = 156,
		
		XPF = 157,
		
		YER = 158,
		
		ZAR = 159,
		
		ZMW = 160,
		
		ZMK = 161,
		
		ZWD = 162,
		
		_ = 163,
	}
	
	/// <summary>
	/// ISO-3166 alpha-2 country code, e.g. US, AU This element is required only when the Application supports multi-region. Talk to your Partner Manager to confirm if this is the case.
	/// </summary>
	public enum CountryCode
	{
		
		AD = 0,
		
		AE = 1,
		
		AF = 2,
		
		AG = 3,
		
		AI = 4,
		
		AL = 5,
		
		AM = 6,
		
		AN = 7,
		
		AO = 8,
		
		AQ = 9,
		
		AR = 10,
		
		AS = 11,
		
		AT = 12,
		
		AU = 13,
		
		AW = 14,
		
		AZ = 15,
		
		BA = 16,
		
		BB = 17,
		
		BD = 18,
		
		BE = 19,
		
		BF = 20,
		
		BG = 21,
		
		BH = 22,
		
		BI = 23,
		
		BJ = 24,
		
		BL = 25,
		
		BM = 26,
		
		BN = 27,
		
		BO = 28,
		
		BR = 29,
		
		BS = 30,
		
		BT = 31,
		
		BW = 32,
		
		BY = 33,
		
		BZ = 34,
		
		CA = 35,
		
		CC = 36,
		
		CD = 37,
		
		CF = 38,
		
		CG = 39,
		
		CH = 40,
		
		CI = 41,
		
		CK = 42,
		
		CL = 43,
		
		CM = 44,
		
		CN = 45,
		
		CO = 46,
		
		CR = 47,
		
		CU = 48,
		
		CV = 49,
		
		CW = 50,
		
		CX = 51,
		
		CY = 52,
		
		CZ = 53,
		
		DE = 54,
		
		DJ = 55,
		
		DK = 56,
		
		DM = 57,
		
		DO = 58,
		
		DZ = 59,
		
		EC = 60,
		
		EE = 61,
		
		EG = 62,
		
		EH = 63,
		
		ER = 64,
		
		ES = 65,
		
		ET = 66,
		
		FI = 67,
		
		FJ = 68,
		
		FK = 69,
		
		FM = 70,
		
		FO = 71,
		
		FR = 72,
		
		GA = 73,
		
		GB = 74,
		
		GD = 75,
		
		GE = 76,
		
		GG = 77,
		
		GH = 78,
		
		GI = 79,
		
		GL = 80,
		
		GM = 81,
		
		GN = 82,
		
		GQ = 83,
		
		GR = 84,
		
		GT = 85,
		
		GU = 86,
		
		GW = 87,
		
		GY = 88,
		
		HK = 89,
		
		HN = 90,
		
		HR = 91,
		
		HT = 92,
		
		HU = 93,
		
		ID = 94,
		
		IE = 95,
		
		IL = 96,
		
		IM = 97,
		
		IN = 98,
		
		IO = 99,
		
		IQ = 100,
		
		IR = 101,
		
		IS = 102,
		
		IT = 103,
		
		JE = 104,
		
		JM = 105,
		
		JO = 106,
		
		JP = 107,
		
		KE = 108,
		
		KG = 109,
		
		KH = 110,
		
		KI = 111,
		
		KM = 112,
		
		KN = 113,
		
		KP = 114,
		
		KR = 115,
		
		KW = 116,
		
		KY = 117,
		
		KZ = 118,
		
		LA = 119,
		
		LB = 120,
		
		LC = 121,
		
		LI = 122,
		
		LK = 123,
		
		LR = 124,
		
		LS = 125,
		
		LT = 126,
		
		LU = 127,
		
		LV = 128,
		
		LY = 129,
		
		MA = 130,
		
		MC = 131,
		
		MD = 132,
		
		ME = 133,
		
		MF = 134,
		
		MG = 135,
		
		MH = 136,
		
		MK = 137,
		
		ML = 138,
		
		MM = 139,
		
		MN = 140,
		
		MO = 141,
		
		MP = 142,
		
		MR = 143,
		
		MS = 144,
		
		MT = 145,
		
		MU = 146,
		
		MV = 147,
		
		MW = 148,
		
		MX = 149,
		
		MY = 150,
		
		MZ = 151,
		
		NA = 152,
		
		NC = 153,
		
		NE = 154,
		
		NG = 155,
		
		NI = 156,
		
		NL = 157,
		
		NO = 158,
		
		NP = 159,
		
		NR = 160,
		
		NU = 161,
		
		NZ = 162,
		
		OM = 163,
		
		PA = 164,
		
		PE = 165,
		
		PF = 166,
		
		PG = 167,
		
		PH = 168,
		
		PK = 169,
		
		PL = 170,
		
		PM = 171,
		
		PN = 172,
		
		PR = 173,
		
		PS = 174,
		
		PT = 175,
		
		PW = 176,
		
		PY = 177,
		
		QA = 178,
		
		RE = 179,
		
		RO = 180,
		
		RS = 181,
		
		RU = 182,
		
		RW = 183,
		
		SA = 184,
		
		SB = 185,
		
		SC = 186,
		
		SD = 187,
		
		SE = 188,
		
		SG = 189,
		
		SH = 190,
		
		SI = 191,
		
		SJ = 192,
		
		SK = 193,
		
		SL = 194,
		
		SM = 195,
		
		SN = 196,
		
		SO = 197,
		
		SR = 198,
		
		SS = 199,
		
		ST = 200,
		
		SV = 201,
		
		SX = 202,
		
		SY = 203,
		
		SZ = 204,
		
		TC = 205,
		
		TD = 206,
		
		TG = 207,
		
		TH = 208,
		
		TJ = 209,
		
		TK = 210,
		
		TL = 211,
		
		TM = 212,
		
		TN = 213,
		
		TO = 214,
		
		TR = 215,
		
		TT = 216,
		
		TV = 217,
		
		TW = 218,
		
		TZ = 219,
		
		UA = 220,
		
		UG = 221,
		
		US = 222,
		
		UY = 223,
		
		UZ = 224,
		
		VA = 225,
		
		VC = 226,
		
		VE = 227,
		
		VG = 228,
		
		VI = 229,
		
		VN = 230,
		
		VU = 231,
		
		WF = 232,
		
		WS = 233,
		
		XK = 234,
		
		YE = 235,
		
		YT = 236,
		
		ZA = 237,
		
		ZM = 238,
		
		ZW = 239,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// searches feed connections
		/// By passing in the appropriate options, you can search for available feed connections in the system.
		/// GetFeedConnections FeedConnections
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 10. Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?page=1 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned.</param>
		/// <param name="pageSize">Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?pageSize=100 to specify page size of 100.</param>
		public async Task GetFeedConnectionsAsync(int page, int pageSize)
		{
			var requestUri = "FeedConnections?page="+page+"&pageSize="+pageSize;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches feed connections
		/// By passing in the appropriate options, you can search for available feed connections in the system.
		/// GetFeedConnections FeedConnections
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 10. Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?page=1 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned.</param>
		/// <param name="pageSize">Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?pageSize=100 to specify page size of 100.</param>
		public void GetFeedConnections(int page, int pageSize)
		{
			var requestUri = "FeedConnections?page="+page+"&pageSize="+pageSize;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// create one or more new feed connection
		/// By passing in the FeedConnections array object in the body, you can create one or more new feed connections
		/// CreateFeedConnections FeedConnections
		/// </summary>
		/// <param name="requestBody">Feed Connection(s) array object in the body</param>
		public async Task CreateFeedConnectionsAsync(FeedConnections requestBody)
		{
			var requestUri = "FeedConnections";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// create one or more new feed connection
		/// By passing in the FeedConnections array object in the body, you can create one or more new feed connections
		/// CreateFeedConnections FeedConnections
		/// </summary>
		/// <param name="requestBody">Feed Connection(s) array object in the body</param>
		public void CreateFeedConnections(FeedConnections requestBody)
		{
			var requestUri = "FeedConnections";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrive single feed connection based on unique id provided
		/// By passing in a FeedConnection Id options, you can search for matching feed connections
		/// GetFeedConnection FeedConnections/{id}
		/// </summary>
		/// <param name="id">Unique identifier for retrieving single object</param>
		/// <returns>success returns a FeedConnection object matching the id in response</returns>
		public async Task<FeedConnection> GetFeedConnectionAsync(string id)
		{
			var requestUri = "FeedConnections/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedConnection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrive single feed connection based on unique id provided
		/// By passing in a FeedConnection Id options, you can search for matching feed connections
		/// GetFeedConnection FeedConnections/{id}
		/// </summary>
		/// <param name="id">Unique identifier for retrieving single object</param>
		/// <returns>success returns a FeedConnection object matching the id in response</returns>
		public FeedConnection GetFeedConnection(string id)
		{
			var requestUri = "FeedConnections/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedConnection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an exsiting feed connection
		/// By passing in FeedConnections array object in the body, you can delete a feed connection.
		/// DeleteFeedConnections FeedConnections/DeleteRequests
		/// </summary>
		/// <param name="requestBody">Feed Connections array object in the body</param>
		public async Task DeleteFeedConnectionsAsync(FeedConnections requestBody)
		{
			var requestUri = "FeedConnections/DeleteRequests";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an exsiting feed connection
		/// By passing in FeedConnections array object in the body, you can delete a feed connection.
		/// DeleteFeedConnections FeedConnections/DeleteRequests
		/// </summary>
		/// <param name="requestBody">Feed Connections array object in the body</param>
		public void DeleteFeedConnections(FeedConnections requestBody)
		{
			var requestUri = "FeedConnections/DeleteRequests";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrive all statements based on unique search criteria
		/// By passing in parameters, you can search for matching statements
		/// GetStatements Statements
		/// </summary>
		/// <param name="page">unique id for single object</param>
		/// <param name="pageSize">Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?pageSize=100 to specify page size of 100.</param>
		/// <returns>success returns Statements array of objects response</returns>
		public async Task<Statements> GetStatementsAsync(int page, int pageSize)
		{
			var requestUri = "Statements?page="+page+"&pageSize="+pageSize;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Statements>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrive all statements based on unique search criteria
		/// By passing in parameters, you can search for matching statements
		/// GetStatements Statements
		/// </summary>
		/// <param name="page">unique id for single object</param>
		/// <param name="pageSize">Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?pageSize=100 to specify page size of 100.</param>
		/// <returns>success returns Statements array of objects response</returns>
		public Statements GetStatements(int page, int pageSize)
		{
			var requestUri = "Statements?page="+page+"&pageSize="+pageSize;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Statements>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateStatements Statements
		/// </summary>
		/// <param name="requestBody">Statements array of objects in the body</param>
		public async Task CreateStatementsAsync(Statements requestBody)
		{
			var requestUri = "Statements";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// CreateStatements Statements
		/// </summary>
		/// <param name="requestBody">Statements array of objects in the body</param>
		public void CreateStatements(Statements requestBody)
		{
			var requestUri = "Statements";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrive single statement based on unique id provided
		/// By passing in a statement id, you can search for matching statements
		/// GetStatement Statements/{statementId}
		/// </summary>
		/// <param name="statementId">statement id for single object</param>
		/// <returns>search results matching id for single statement</returns>
		public async Task<Statement> GetStatementAsync(string statementId)
		{
			var requestUri = "Statements/"+ (statementId==null? "" : Uri.EscapeDataString(statementId));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Statement>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrive single statement based on unique id provided
		/// By passing in a statement id, you can search for matching statements
		/// GetStatement Statements/{statementId}
		/// </summary>
		/// <param name="statementId">statement id for single object</param>
		/// <returns>search results matching id for single statement</returns>
		public Statement GetStatement(string statementId)
		{
			var requestUri = "Statements/"+ (statementId==null? "" : Uri.EscapeDataString(statementId));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Statement>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
