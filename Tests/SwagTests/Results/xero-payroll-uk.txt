//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public class Pagination
	{
		
		public System.Nullable<System.Int32> Page { get; set; }
		
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		public System.Nullable<System.Int32> PageCount { get; set; }
		
		public System.Nullable<System.Int32> ItemCount { get; set; }
	}
	
	/// <summary>
	/// The object returned for a bad request
	/// </summary>
	public class Problem
	{
		
		/// <summary>
		/// The type of error format
		/// </summary>
		public string Type { get; set; }
		
		/// <summary>
		/// The type of the error
		/// </summary>
		public string Title { get; set; }
		
		/// <summary>
		/// The error status code
		/// </summary>
		public string Status { get; set; }
		
		/// <summary>
		/// A description of the error
		/// </summary>
		public string Detail { get; set; }
		
		public string Instance { get; set; }
		
		public InvalidField[] InvalidFields { get; set; }
	}
	
	public class InvalidField
	{
		
		/// <summary>
		/// The name of the field that caused the error
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The reason the error occurred
		/// </summary>
		public string Reason { get; set; }
	}
	
	public class Employees
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public Employee[] Employees1 { get; set; }
	}
	
	public class Employee
	{
		
		/// <summary>
		/// Xero unique identifier for the employee
		/// </summary>
		public string EmployeeID { get; set; }
		
		/// <summary>
		/// Title of the employee
		/// </summary>
		public string Title { get; set; }
		
		/// <summary>
		/// First name of employee
		/// </summary>
		public string FirstName { get; set; }
		
		/// <summary>
		/// Last name of employee
		/// </summary>
		public string LastName { get; set; }
		
		/// <summary>
		/// Date of birth of the employee (YYYY-MM-DD)
		/// </summary>
		public System.Nullable<System.DateTimeOffset> DateOfBirth { get; set; }
		
		public Address Address { get; set; }
		
		/// <summary>
		/// The email address for the employee
		/// </summary>
		public string Email { get; set; }
		
		/// <summary>
		/// The employeeâ€™s gender
		/// </summary>
		public EmployeeGender Gender { get; set; }
		
		/// <summary>
		/// Employee phone number
		/// </summary>
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Employment start date of the employee at the time it was requested
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// Employment end date of the employee at the time it was requested
		/// </summary>
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// Xero unique identifier for the payroll calendar of the employee
		/// </summary>
		public string PayrollCalendarID { get; set; }
		
		/// <summary>
		/// UTC timestamp of last update to the employee
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// UTC timestamp when the employee was created in Xero
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDateUTC { get; set; }
		
		/// <summary>
		/// National insurance number of the employee
		/// </summary>
		public string NationalInsuranceNumber { get; set; }
	}
	
	public class Address
	{
		
		/// <summary>
		/// Address line 1 for employee home address
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string AddressLine1 { get; set; }
		
		/// <summary>
		/// Address line 2 for employee home address
		/// </summary>
		public string AddressLine2 { get; set; }
		
		/// <summary>
		/// Suburb for employee home address
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string City { get; set; }
		
		/// <summary>
		/// PostCode for employee home address
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string PostCode { get; set; }
		
		/// <summary>
		/// Country of HomeAddress
		/// </summary>
		public string CountryName { get; set; }
	}
	
	public enum EmployeeGender
	{
		
		M = 0,
		
		F = 1,
	}
	
	public class EmployeeObject
	{
		
		public Pagination Pagination { get; set; }
		
		public Employee Employee { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
	}
	
	public class EmploymentObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public Employment Employment { get; set; }
	}
	
	public class Employment
	{
		
		/// <summary>
		/// Xero unique identifier for the payroll calendar of the employee
		/// </summary>
		public string PayrollCalendarID { get; set; }
		
		/// <summary>
		/// Start date of the employment (YYYY-MM-DD)
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// The employment number of the employee
		/// </summary>
		public string EmployeeNumber { get; set; }
		
		/// <summary>
		/// The NI Category of the employee
		/// </summary>
		public EmploymentNiCategory NiCategory { get; set; }
	}
	
	public enum EmploymentNiCategory
	{
		
		A = 0,
		
		B = 1,
		
		C = 2,
		
		H = 3,
		
		J = 4,
		
		M = 5,
		
		Z = 6,
		
		X = 7,
	}
	
	public class EmployeeTaxObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public EmployeeTax EmployeeTax { get; set; }
	}
	
	public class EmployeeTax
	{
		
		/// <summary>
		/// The Starter type.
		/// </summary>
		public string StarterType { get; set; }
		
		/// <summary>
		/// Starter declaration.
		/// </summary>
		public string StarterDeclaration { get; set; }
		
		/// <summary>
		/// The Tax code.
		/// </summary>
		public string TaxCode { get; set; }
		
		/// <summary>
		/// Describes whether the tax settings is W1M1
		/// </summary>
		public System.Nullable<System.Boolean> W1M1 { get; set; }
		
		/// <summary>
		/// The previous taxable pay
		/// </summary>
		public System.Nullable<System.Double> PreviousTaxablePay { get; set; }
		
		/// <summary>
		/// The tax amount previously paid
		/// </summary>
		public System.Nullable<System.Double> PreviousTaxPaid { get; set; }
		
		/// <summary>
		/// The employee's student loan deduction type
		/// </summary>
		public string StudentLoanDeduction { get; set; }
		
		/// <summary>
		/// Describes whether the employee has post graduate loans
		/// </summary>
		public System.Nullable<System.Boolean> HasPostGraduateLoans { get; set; }
		
		/// <summary>
		/// Describes whether the employee is director
		/// </summary>
		public System.Nullable<System.Boolean> IsDirector { get; set; }
		
		/// <summary>
		/// The directorship start date
		/// </summary>
		public System.Nullable<System.DateTimeOffset> DirectorshipStartDate { get; set; }
		
		/// <summary>
		/// NICs calculation method
		/// </summary>
		public string NicCalculationMethod { get; set; }
	}
	
	public class EmployeeOpeningBalancesObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public EmployeeOpeningBalances OpeningBalances { get; set; }
	}
	
	public class EmployeeOpeningBalances
	{
		
		/// <summary>
		/// The total accumulated statutory adoption pay amount received by the employee for current fiscal year to date
		/// </summary>
		public System.Nullable<System.Double> StatutoryAdoptionPay { get; set; }
		
		/// <summary>
		/// The total accumulated statutory maternity pay amount received by the employee for current fiscal year to date
		/// </summary>
		public System.Nullable<System.Double> StatutoryMaternityPay { get; set; }
		
		/// <summary>
		/// The total accumulated statutory paternity pay amount received by the employee for current fiscal year to date
		/// </summary>
		public System.Nullable<System.Double> StatutoryPaternityPay { get; set; }
		
		/// <summary>
		/// The total accumulated statutory shared parental pay amount received by the employee for current fiscal year to date
		/// </summary>
		public System.Nullable<System.Double> StatutorySharedParentalPay { get; set; }
		
		/// <summary>
		/// The total accumulated statutory sick pay amount received by the employee for current fiscal year to date
		/// </summary>
		public System.Nullable<System.Double> StatutorySickPay { get; set; }
		
		/// <summary>
		/// The unique employee number issued by the employee's former employer
		/// </summary>
		public System.Nullable<System.Double> PriorEmployeeNumber { get; set; }
	}
	
	public class EmployeeLeaves
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public EmployeeLeave[] Leave { get; set; }
	}
	
	public class EmployeeLeave
	{
		
		/// <summary>
		/// The Xero identifier for LeaveType
		/// </summary>
		public string LeaveID { get; set; }
		
		/// <summary>
		/// The Xero identifier for LeaveType
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string LeaveTypeID { get; set; }
		
		/// <summary>
		/// The description of the leave  (max length = 50)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Description { get; set; }
		
		/// <summary>
		/// Start date of the leave (YYYY-MM-DD)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateTimeOffset StartDate { get; set; }
		
		/// <summary>
		/// End date of the leave (YYYY-MM-DD)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateTimeOffset EndDate { get; set; }
		
		/// <summary>
		/// The leave period information. The StartDate, EndDate and NumberOfUnits needs to be specified when you do not want to calculate NumberOfUnits automatically. Using incorrect period StartDate and EndDate will result in automatic computation of the NumberOfUnits.
		/// </summary>
		public LeavePeriod[] Periods { get; set; }
		
		/// <summary>
		/// UTC timestamp of last update to the leave type note
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
	}
	
	public class LeavePeriod
	{
		
		/// <summary>
		/// The Pay Period Start Date (YYYY-MM-DD)
		/// </summary>
		public System.Nullable<System.DateTimeOffset> PeriodStartDate { get; set; }
		
		/// <summary>
		/// The Pay Period End Date (YYYY-MM-DD)
		/// </summary>
		public System.Nullable<System.DateTimeOffset> PeriodEndDate { get; set; }
		
		/// <summary>
		/// The Number of Units for the leave
		/// </summary>
		public System.Nullable<System.Double> NumberOfUnits { get; set; }
		
		/// <summary>
		/// Period Status
		/// </summary>
		public LeavePeriodPeriodStatus PeriodStatus { get; set; }
	}
	
	public enum LeavePeriodPeriodStatus
	{
		
		Approved = 0,
		
		Completed = 1,
	}
	
	public class EmployeeLeaveObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public EmployeeLeave Leave { get; set; }
	}
	
	public class LeavePeriods
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public LeavePeriod[] Periods { get; set; }
	}
	
	public class EmployeeLeaveBalances
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public EmployeeLeaveBalance[] LeaveBalances { get; set; }
	}
	
	public class EmployeeLeaveBalance
	{
		
		/// <summary>
		/// Name of the leave type.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The Xero identifier for leave type
		/// </summary>
		public string LeaveTypeID { get; set; }
		
		/// <summary>
		/// The employees current balance for the corresponding leave type.
		/// </summary>
		public System.Nullable<System.Double> Balance { get; set; }
		
		/// <summary>
		/// The type of the units of the leave.
		/// </summary>
		public string TypeOfUnits { get; set; }
	}
	
	public class EmployeeStatutoryLeaveBalanceObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public EmployeeStatutoryLeaveBalance LeaveBalance { get; set; }
	}
	
	public class EmployeeStatutoryLeaveBalance
	{
		
		/// <summary>
		/// The type of statutory leave
		/// </summary>
		public EmployeeStatutoryLeaveBalanceLeaveType LeaveType { get; set; }
		
		/// <summary>
		/// The balance remaining for the corresponding leave type as of specified date.
		/// </summary>
		public System.Nullable<System.Double> BalanceRemaining { get; set; }
		
		/// <summary>
		/// The units will be "Hours"
		/// </summary>
		public EmployeeStatutoryLeaveBalanceUnits Units { get; set; }
	}
	
	public enum EmployeeStatutoryLeaveBalanceLeaveType
	{
		
		Sick = 0,
		
		Adoption = 1,
		
		Maternity = 2,
		
		Paternity = 3,
		
		Sharedparental = 4,
	}
	
	public enum EmployeeStatutoryLeaveBalanceUnits
	{
		
		Hours = 0,
	}
	
	public class EmployeeStatutoryLeavesSummaries
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public EmployeeStatutoryLeaveSummary[] StatutoryLeaves { get; set; }
	}
	
	public class EmployeeStatutoryLeaveSummary
	{
		
		/// <summary>
		/// The unique identifier (guid) of a statutory leave.
		/// </summary>
		public string StatutoryLeaveID { get; set; }
		
		/// <summary>
		/// The unique identifier (guid) of the employee
		/// </summary>
		public string EmployeeID { get; set; }
		
		/// <summary>
		/// The category of statutory leave
		/// </summary>
		public EmployeeStatutoryLeaveBalanceLeaveType Type { get; set; }
		
		/// <summary>
		/// The date when the leave starts
		/// </summary>
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// The date when the leave ends
		/// </summary>
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// Whether the leave was entitled to receive payment
		/// </summary>
		public System.Nullable<System.Boolean> IsEntitled { get; set; }
		
		/// <summary>
		/// The status of the leave
		/// </summary>
		public EmployeeStatutoryLeaveSummaryStatus Status { get; set; }
	}
	
	public enum EmployeeStatutoryLeaveSummaryStatus
	{
		
		Pending = 0,
		
		In_Progress = 1,
		
		Completed = 2,
	}
	
	public class EmployeeStatutorySickLeaves
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public EmployeeStatutorySickLeave[] StatutorySickLeave { get; set; }
	}
	
	public class EmployeeStatutorySickLeave
	{
		
		/// <summary>
		/// The unique identifier (guid) of a statutory leave
		/// </summary>
		public string StatutoryLeaveID { get; set; }
		
		/// <summary>
		/// The unique identifier (guid) of the employee
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string EmployeeID { get; set; }
		
		/// <summary>
		/// The unique identifier (guid) of the "Statutory Sick Leave (non-pensionable)" pay item
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string LeaveTypeID { get; set; }
		
		/// <summary>
		/// The date when the leave starts
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateTimeOffset StartDate { get; set; }
		
		/// <summary>
		/// The date when the leave ends
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateTimeOffset EndDate { get; set; }
		
		/// <summary>
		/// the type of statutory leave
		/// </summary>
		public string Type { get; set; }
		
		/// <summary>
		/// the type of statutory leave
		/// </summary>
		public string Status { get; set; }
		
		/// <summary>
		/// The days of the work week the employee is scheduled to work at the time the leave is taken
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string[] WorkPattern { get; set; }
		
		/// <summary>
		/// Whether the sick leave was pregnancy related
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public bool IsPregnancyRelated { get; set; }
		
		/// <summary>
		/// Whether the employee provided sufficent notice and documentation as required by the employer supporting the sick leave request
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public bool SufficientNotice { get; set; }
		
		/// <summary>
		/// Whether the leave was entitled to receive payment
		/// </summary>
		public System.Nullable<System.Boolean> IsEntitled { get; set; }
		
		/// <summary>
		/// The amount of requested time (in weeks)
		/// </summary>
		public System.Nullable<System.Double> EntitlementWeeksRequested { get; set; }
		
		/// <summary>
		/// The amount of statutory sick leave time off (in weeks) that is available to take at the time the leave was requested
		/// </summary>
		public System.Nullable<System.Double> EntitlementWeeksQualified { get; set; }
		
		/// <summary>
		/// A calculated amount of time (in weeks) that remains for the statutory sick leave period
		/// </summary>
		public System.Nullable<System.Double> EntitlementWeeksRemaining { get; set; }
		
		/// <summary>
		/// Whether another leave (Paternity, Shared Parental specifically) occurs during the requested leave's period. While this is allowed it could affect payment amounts
		/// </summary>
		public System.Nullable<System.Boolean> OverlapsWithOtherLeave { get; set; }
		
		/// <summary>
		/// If the leave requested was considered "not entitled", the reasons why are listed here.
		/// </summary>
		public string[] EntitlementFailureReasons { get; set; }
	}
	
	public class EmployeeStatutorySickLeaveObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public EmployeeStatutorySickLeave StatutorySickLeave { get; set; }
	}
	
	public class EmployeeLeaveTypes
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public EmployeeLeaveType[] LeaveTypes { get; set; }
	}
	
	public class EmployeeLeaveType
	{
		
		/// <summary>
		/// The Xero identifier for leave type
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string LeaveTypeID { get; set; }
		
		/// <summary>
		/// The schedule of accrual
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public EmployeeLeaveTypeScheduleOfAccrual ScheduleOfAccrual { get; set; }
		
		/// <summary>
		/// The number of hours accrued for the leave annually. This is 0 when the scheduleOfAccrual chosen is "OnHourWorked"
		/// </summary>
		public System.Nullable<System.Double> HoursAccruedAnnually { get; set; }
		
		/// <summary>
		/// The maximum number of hours that can be accrued for the leave
		/// </summary>
		public System.Nullable<System.Double> MaximumToAccrue { get; set; }
		
		/// <summary>
		/// The initial number of hours assigned when the leave was added to the employee
		/// </summary>
		public System.Nullable<System.Double> OpeningBalance { get; set; }
		
		/// <summary>
		/// The number of hours added to the leave balance for every hour worked by the employee. This is normally 0, unless the scheduleOfAccrual chosen is "OnHourWorked"
		/// </summary>
		public System.Nullable<System.Double> RateAccruedHourly { get; set; }
	}
	
	public enum EmployeeLeaveTypeScheduleOfAccrual
	{
		
		BeginningOfCalendarYear = 0,
		
		OnAnniversaryDate = 1,
		
		EachPayPeriod = 2,
		
		OnHourWorked = 3,
	}
	
	public class EmployeeLeaveTypeObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public EmployeeLeaveType LeaveType { get; set; }
	}
	
	public class EmployeePayTemplateObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public EmployeePayTemplate PayTemplate { get; set; }
	}
	
	public class EmployeePayTemplate
	{
		
		/// <summary>
		/// Unique identifier for the employee
		/// </summary>
		public string EmployeeID { get; set; }
		
		public EarningsTemplate[] EarningTemplates { get; set; }
	}
	
	public class EarningsTemplate
	{
		
		/// <summary>
		/// The Xero identifier for the earnings template
		/// </summary>
		public string PayTemplateEarningID { get; set; }
		
		/// <summary>
		/// The rate per unit
		/// </summary>
		public System.Nullable<System.Double> RatePerUnit { get; set; }
		
		/// <summary>
		/// The rate per unit
		/// </summary>
		public System.Nullable<System.Double> NumberOfUnits { get; set; }
		
		/// <summary>
		/// The fixed amount per period
		/// </summary>
		public System.Nullable<System.Double> FixedAmount { get; set; }
		
		/// <summary>
		/// The corresponding earnings rate identifier
		/// </summary>
		public string EarningsRateID { get; set; }
		
		/// <summary>
		/// The read-only name of the Earning Template.
		/// </summary>
		public string Name { get; set; }
	}
	
	public class EmployeePayTemplates
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public EarningsTemplate[] EarningTemplates { get; set; }
	}
	
	public class EarningsTemplateObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public EarningsTemplate EarningTemplate { get; set; }
	}
	
	public class Benefits
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public Benefit[] Benefits1 { get; set; }
	}
	
	public class Benefit
	{
		
		/// <summary>
		/// unique identifier in Xero
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the employer pension
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Name { get; set; }
		
		/// <summary>
		/// Category type of the employer pension
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public BenefitCategory Category { get; set; }
		
		/// <summary>
		/// Xero identifier for Liability Account
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string LiabilityAccountId { get; set; }
		
		/// <summary>
		/// Xero identifier for Expense Account
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string ExpenseAccountId { get; set; }
		
		/// <summary>
		/// Standard amount of the employer pension
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public double StandardAmount { get; set; }
		
		/// <summary>
		/// Percentage of gross of the employer pension
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public double Percentage { get; set; }
		
		/// <summary>
		/// Calculation Type of the employer pension (FixedAmount or PercentageOfGross).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public BenefitCalculationType CalculationType { get; set; }
		
		/// <summary>
		/// Identifier of a record is active or not.
		/// </summary>
		public System.Nullable<System.Boolean> CurrentRecord { get; set; }
		
		/// <summary>
		/// Identifier of subject To NIC
		/// </summary>
		public System.Nullable<System.Boolean> SubjectToNIC { get; set; }
		
		/// <summary>
		/// Identifier of subject To pension
		/// </summary>
		public System.Nullable<System.Boolean> SubjectToPension { get; set; }
		
		/// <summary>
		/// Identifier of subject To Tax
		/// </summary>
		public System.Nullable<System.Boolean> SubjectToTax { get; set; }
		
		/// <summary>
		/// Identifier of calculating on qualifying earnings
		/// </summary>
		public System.Nullable<System.Boolean> IsCalculatingOnQualifyingEarnings { get; set; }
		
		/// <summary>
		/// display the balance to employee
		/// </summary>
		public System.Nullable<System.Boolean> ShowBalanceToEmployee { get; set; }
	}
	
	public enum BenefitCategory
	{
		
		StakeholderPension = 0,
		
		Other = 1,
	}
	
	public enum BenefitCalculationType
	{
		
		FixedAmount = 0,
		
		PercentageOfGross = 1,
	}
	
	public class BenefitObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public Benefit Benefit { get; set; }
	}
	
	public class Deductions
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public Deduction[] Deductions1 { get; set; }
	}
	
	public class Deduction
	{
		
		/// <summary>
		/// The Xero identifier for Deduction
		/// </summary>
		public string DeductionId { get; set; }
		
		/// <summary>
		/// Name of the deduction
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string DeductionName { get; set; }
		
		/// <summary>
		/// Deduction Category type
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public DeductionDeductionCategory DeductionCategory { get; set; }
		
		/// <summary>
		/// Xero identifier for Liability Account
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string LiabilityAccountId { get; set; }
		
		/// <summary>
		/// Identifier of a record is active or not.
		/// </summary>
		public System.Nullable<System.Boolean> CurrentRecord { get; set; }
		
		/// <summary>
		/// Standard amount of the deduction
		/// </summary>
		public System.Nullable<System.Double> StandardAmount { get; set; }
		
		/// <summary>
		/// Identifier of reduces super liability
		/// </summary>
		public System.Nullable<System.Boolean> ReducesSuperLiability { get; set; }
		
		/// <summary>
		/// Identifier of reduces tax liability
		/// </summary>
		public System.Nullable<System.Boolean> ReducesTaxLiability { get; set; }
		
		/// <summary>
		/// determine the calculation type whether fixed amount or percentage of gross
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public BenefitCalculationType CalculationType { get; set; }
		
		/// <summary>
		/// Percentage of gross
		/// </summary>
		public System.Nullable<System.Double> Percentage { get; set; }
		
		/// <summary>
		/// Identifier of subject To NIC
		/// </summary>
		public System.Nullable<System.Boolean> SubjectToNIC { get; set; }
		
		/// <summary>
		/// Identifier of subject To Tax
		/// </summary>
		public System.Nullable<System.Boolean> SubjectToTax { get; set; }
		
		/// <summary>
		/// Identifier of reduced by basic rate applicable or not
		/// </summary>
		public System.Nullable<System.Boolean> IsReducedByBasicRate { get; set; }
		
		/// <summary>
		/// Identifier for apply to pension calculations
		/// </summary>
		public System.Nullable<System.Boolean> ApplyToPensionCalculations { get; set; }
		
		/// <summary>
		/// Identifier of calculating on qualifying earnings
		/// </summary>
		public System.Nullable<System.Boolean> IsCalculatingOnQualifyingEarnings { get; set; }
		
		/// <summary>
		/// Identifier of applicable for pension or not
		/// </summary>
		public System.Nullable<System.Boolean> IsPension { get; set; }
	}
	
	public enum DeductionDeductionCategory
	{
		
		StakeholderPension = 0,
		
		StakeholderPensionPostTax = 1,
		
		ChildCareVoucher = 2,
		
		SalarySacrifice = 3,
		
		UkOther = 4,
	}
	
	public class DeductionObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public Deduction Deduction { get; set; }
	}
	
	public class StatutoryDeduction
	{
		
		/// <summary>
		/// The Xero identifier for earnings order
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the earnings order
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Statutory Deduction Category
		/// </summary>
		public StatutoryDeductionStatutoryDeductionCategory StatutoryDeductionCategory { get; set; }
		
		/// <summary>
		/// Xero identifier for Liability Account
		/// </summary>
		public string LiabilityAccountId { get; set; }
		
		/// <summary>
		/// Identifier of a record is active or not.
		/// </summary>
		public System.Nullable<System.Boolean> CurrentRecord { get; set; }
	}
	
	public enum StatutoryDeductionStatutoryDeductionCategory
	{
		
		AdditionalStudentLoan = 0,
		
		ChildSupport = 1,
		
		CourtFines = 2,
		
		Creditor = 3,
		
		FederalLevy = 4,
		
		InlandRevenueArrears = 5,
		
		KiwiSaver = 6,
		
		MsdRepayments = 7,
		
		NonPriorityOrder = 8,
		
		PriorityOrder = 9,
		
		TableBased = 10,
		
		StudentLoan = 11,
		
		VoluntaryStudentLoan = 12,
		
		USChildSupport = 13,
	}
	
	/// <summary>
	/// Statutory Deduction Category
	/// </summary>
	public enum StatutoryDeductionCategory
	{
		
		AdditionalStudentLoan = 0,
		
		ChildSupport = 1,
		
		CourtFines = 2,
		
		Creditor = 3,
		
		FederalLevy = 4,
		
		InlandRevenueArrears = 5,
		
		KiwiSaver = 6,
		
		MsdRepayments = 7,
		
		NonPriorityOrder = 8,
		
		PriorityOrder = 9,
		
		TableBased = 10,
		
		StudentLoan = 11,
		
		VoluntaryStudentLoan = 12,
		
		USChildSupport = 13,
	}
	
	public class EarningsOrders
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public EarningsOrder[] StatutoryDeductions { get; set; }
	}
	
	public class EarningsOrder
	{
		
		/// <summary>
		/// Xero unique identifier for an earning rate
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the earning order
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Name { get; set; }
		
		/// <summary>
		/// Statutory Deduction Category
		/// </summary>
		public StatutoryDeductionStatutoryDeductionCategory StatutoryDeductionCategory { get; set; }
		
		/// <summary>
		/// Xero identifier for Liability Account
		/// </summary>
		public string LiabilityAccountId { get; set; }
		
		/// <summary>
		/// Identifier of a record is active or not.
		/// </summary>
		public System.Nullable<System.Boolean> CurrentRecord { get; set; }
	}
	
	public class EarningsOrderObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public EarningsOrder StatutoryDeduction { get; set; }
	}
	
	public class EarningsRates
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public EarningsRate[] EarningsRates1 { get; set; }
	}
	
	public class EarningsRate
	{
		
		/// <summary>
		/// Xero unique identifier for an earning rate
		/// </summary>
		public string EarningsRateID { get; set; }
		
		/// <summary>
		/// Name of the earning rate
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates how an employee will be paid when taking this type of earning
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public EarningsRateEarningsType EarningsType { get; set; }
		
		/// <summary>
		/// Indicates the type of the earning rate
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public EarningsRateRateType RateType { get; set; }
		
		/// <summary>
		/// The type of units used to record earnings
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string TypeOfUnits { get; set; }
		
		/// <summary>
		/// Indicates whether an earning type is active
		/// </summary>
		public System.Nullable<System.Boolean> CurrentRecord { get; set; }
		
		/// <summary>
		/// The account that will be used for the earnings rate
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string ExpenseAccountID { get; set; }
		
		/// <summary>
		/// Default rate per unit (optional). Only applicable if RateType is RatePerUnit
		/// </summary>
		public System.Nullable<System.Double> RatePerUnit { get; set; }
		
		/// <summary>
		/// This is the multiplier used to calculate the rate per unit, based on the employeeâ€™s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MultipleOfOrdinaryEarningsRate
		/// </summary>
		public System.Nullable<System.Double> MultipleOfOrdinaryEarningsRate { get; set; }
		
		/// <summary>
		/// Optional Fixed Rate Amount. Applicable for FixedAmount Rate
		/// </summary>
		public System.Nullable<System.Double> FixedAmount { get; set; }
	}
	
	public enum EarningsRateEarningsType
	{
		
		OvertimeEarnings = 0,
		
		Allowance = 1,
		
		RegularEarnings = 2,
		
		Commission = 3,
		
		Bonus = 4,
		
		TipsDirect = 5,
		
		TipsNon_Direct = 6,
		
		Backpay = 7,
		
		OtherEarnings = 8,
		
		LumpSum = 9,
	}
	
	public enum EarningsRateRateType
	{
		
		RatePerUnit = 0,
		
		MultipleOfOrdinaryEarningsRate = 1,
		
		FixedAmount = 2,
	}
	
	public class EarningsRateObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public EarningsRate EarningsRate { get; set; }
	}
	
	public class LeaveTypes
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public LeaveType[] LeaveTypes1 { get; set; }
	}
	
	public class LeaveType
	{
		
		/// <summary>
		/// Xero unique identifier for the leave
		/// </summary>
		public string LeaveID { get; set; }
		
		/// <summary>
		/// Xero unique identifier for the leave type
		/// </summary>
		public string LeaveTypeID { get; set; }
		
		/// <summary>
		/// Name of the leave type
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicate that an employee will be paid when taking this type of leave
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public bool IsPaidLeave { get; set; }
		
		/// <summary>
		/// Indicate that a balance for this leave type to be shown on the employeeâ€™s payslips
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public bool ShowOnPayslip { get; set; }
		
		/// <summary>
		/// UTC timestamp of last update to the leave type note
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// Shows whether the leave type is active or not
		/// </summary>
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Shows whether the leave type is a statutory leave type or not
		/// </summary>
		public System.Nullable<System.Boolean> IsStatutoryLeave { get; set; }
	}
	
	public class LeaveTypeObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public LeaveType LeaveType { get; set; }
	}
	
	public class Reimbursements
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public Reimbursement[] Reimbursements1 { get; set; }
	}
	
	public class Reimbursement
	{
		
		/// <summary>
		/// Xero unique identifier for a reimbursement
		/// </summary>
		public string ReimbursementID { get; set; }
		
		/// <summary>
		/// Name of the reimbursement
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Name { get; set; }
		
		/// <summary>
		/// Xero unique identifier for the account used for the reimbursement
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Indicates that whether the reimbursement is active
		/// </summary>
		public System.Nullable<System.Boolean> CurrentRecord { get; set; }
	}
	
	public class ReimbursementObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public Reimbursement Reimbursement { get; set; }
	}
	
	public class Timesheets
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public Timesheet[] Timesheets1 { get; set; }
	}
	
	public class Timesheet
	{
		
		/// <summary>
		/// The Xero identifier for a Timesheet
		/// </summary>
		public string TimesheetID { get; set; }
		
		/// <summary>
		/// The Xero identifier for the Payroll Calandar that the Timesheet applies to
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string PayrollCalendarID { get; set; }
		
		/// <summary>
		/// The Xero identifier for the Employee that the Timesheet is for
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string EmployeeID { get; set; }
		
		/// <summary>
		/// The Start Date of the Timesheet period (YYYY-MM-DD)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateTimeOffset StartDate { get; set; }
		
		/// <summary>
		/// The End Date of the Timesheet period (YYYY-MM-DD)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateTimeOffset EndDate { get; set; }
		
		/// <summary>
		/// Status of the timesheet
		/// </summary>
		public TimesheetStatus Status { get; set; }
		
		/// <summary>
		/// The Total Hours of the Timesheet
		/// </summary>
		public System.Nullable<System.Double> TotalHours { get; set; }
		
		/// <summary>
		/// The UTC date time that the Timesheet was last updated
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		public TimesheetLine[] TimesheetLines { get; set; }
	}
	
	public enum TimesheetStatus
	{
		
		Draft = 0,
		
		Approved = 1,
		
		Completed = 2,
	}
	
	public class TimesheetLine
	{
		
		/// <summary>
		/// The Xero identifier for a Timesheet Line
		/// </summary>
		public string TimesheetLineID { get; set; }
		
		/// <summary>
		/// The Date that this Timesheet Line is for (YYYY-MM-DD)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateTimeOffset Date { get; set; }
		
		/// <summary>
		/// The Xero identifier for the Earnings Rate that the Timesheet is for
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string EarningsRateID { get; set; }
		
		/// <summary>
		/// The Xero identifier for the Tracking Item that the Timesheet is for
		/// </summary>
		public string TrackingItemID { get; set; }
		
		/// <summary>
		/// The Number of Units of the Timesheet Line
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public double NumberOfUnits { get; set; }
	}
	
	public class TimesheetObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public Timesheet Timesheet { get; set; }
	}
	
	public class TimesheetLineObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public TimesheetLine TimesheetLine { get; set; }
	}
	
	public class PayRunCalendars
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public PayRunCalendar[] PayRunCalendars1 { get; set; }
	}
	
	public class PayRunCalendar
	{
		
		/// <summary>
		/// Xero unique identifier for the payroll calendar
		/// </summary>
		public string PayrollCalendarID { get; set; }
		
		/// <summary>
		/// Name of the calendar
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of the calendar
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public PayRunCalendarCalendarType CalendarType { get; set; }
		
		/// <summary>
		/// Period start date of the calendar
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateTimeOffset PeriodStartDate { get; set; }
		
		/// <summary>
		/// Period end date of the calendar
		/// </summary>
		public System.Nullable<System.DateTimeOffset> PeriodEndDate { get; set; }
		
		/// <summary>
		/// Payment date of the calendar
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateTimeOffset PaymentDate { get; set; }
		
		/// <summary>
		/// UTC timestamp of the last update to the pay run calendar
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
	}
	
	public enum PayRunCalendarCalendarType
	{
		
		Weekly = 0,
		
		Fortnightly = 1,
		
		FourWeekly = 2,
		
		Monthly = 3,
		
		Annual = 4,
		
		Quarterly = 5,
	}
	
	public class PayRunCalendarObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public PayRunCalendar PayRunCalendar { get; set; }
	}
	
	public class PaymentMethodObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public PaymentMethod PaymentMethod { get; set; }
	}
	
	public class PaymentMethod
	{
		
		/// <summary>
		/// The payment method code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public PaymentMethodPaymentMethod1 PaymentMethod1 { get; set; }
		
		public BankAccount[] BankAccounts { get; set; }
	}
	
	public enum PaymentMethodPaymentMethod1
	{
		
		Cheque = 0,
		
		Electronically = 1,
		
		Manual = 2,
	}
	
	public class BankAccount
	{
		
		/// <summary>
		/// Bank account name (max length = 32)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Bank account number (digits only; max length = 8)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// Bank account sort code (6 digits)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string SortCode { get; set; }
	}
	
	public class SalaryAndWages
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public SalaryAndWage[] SalaryAndWages1 { get; set; }
	}
	
	public class SalaryAndWage
	{
		
		/// <summary>
		/// Xero unique identifier for a salary and wages record
		/// </summary>
		public string SalaryAndWagesID { get; set; }
		
		/// <summary>
		/// Xero unique identifier for an earnings rate
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string EarningsRateID { get; set; }
		
		/// <summary>
		/// The Number of Units per week for the corresponding salary and wages
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public double NumberOfUnitsPerWeek { get; set; }
		
		/// <summary>
		/// The rate of each unit for the corresponding salary and wages
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public double RatePerUnit { get; set; }
		
		/// <summary>
		/// The Number of Units per day for the corresponding salary and wages
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public double NumberOfUnitsPerDay { get; set; }
		
		/// <summary>
		/// The effective date of the corresponding salary and wages
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateTimeOffset EffectiveFrom { get; set; }
		
		/// <summary>
		/// The annual salary
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public double AnnualSalary { get; set; }
		
		/// <summary>
		/// The current status of the corresponding salary and wages
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public SalaryAndWageStatus Status { get; set; }
		
		/// <summary>
		/// The type of the payment of the corresponding salary and wages
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public SalaryAndWagePaymentType PaymentType { get; set; }
	}
	
	public enum SalaryAndWageStatus
	{
		
		Active = 0,
		
		Pending = 1,
	}
	
	public enum SalaryAndWagePaymentType
	{
		
		Salary = 0,
	}
	
	public class SalaryAndWageObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public SalaryAndWage SalaryAndWages { get; set; }
	}
	
	public class PayRuns
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public PayRun[] PayRuns1 { get; set; }
	}
	
	public class PayRun
	{
		
		/// <summary>
		/// Xero unique identifier for the pay run
		/// </summary>
		public string PayRunID { get; set; }
		
		/// <summary>
		/// Xero unique identifier for the payroll calendar
		/// </summary>
		public string PayrollCalendarID { get; set; }
		
		/// <summary>
		/// Period start date of the payroll calendar
		/// </summary>
		public System.Nullable<System.DateTimeOffset> PeriodStartDate { get; set; }
		
		/// <summary>
		/// Period end date of the payroll calendar
		/// </summary>
		public System.Nullable<System.DateTimeOffset> PeriodEndDate { get; set; }
		
		/// <summary>
		/// Payment date of the pay run
		/// </summary>
		public System.Nullable<System.DateTimeOffset> PaymentDate { get; set; }
		
		/// <summary>
		/// Total cost of the pay run
		/// </summary>
		public System.Nullable<System.Double> TotalCost { get; set; }
		
		/// <summary>
		/// Total pay of the pay run
		/// </summary>
		public System.Nullable<System.Double> TotalPay { get; set; }
		
		/// <summary>
		/// Pay run status
		/// </summary>
		public PayRunPayRunStatus PayRunStatus { get; set; }
		
		/// <summary>
		/// Pay run type
		/// </summary>
		public PayRunPayRunType PayRunType { get; set; }
		
		/// <summary>
		/// Calendar type of the pay run
		/// </summary>
		public PayRunCalendarCalendarType CalendarType { get; set; }
		
		/// <summary>
		/// Posted date time of the pay run
		/// </summary>
		public System.Nullable<System.DateTimeOffset> PostedDateTime { get; set; }
		
		public Payslip[] PaySlips { get; set; }
	}
	
	public enum PayRunPayRunStatus
	{
		
		Draft = 0,
		
		Posted = 1,
	}
	
	public enum PayRunPayRunType
	{
		
		Scheduled = 0,
		
		Unscheduled = 1,
		
		EarlierYearUpdate = 2,
	}
	
	public class Payslip
	{
		
		/// <summary>
		/// The Xero identifier for a Payslip
		/// </summary>
		public string PaySlipID { get; set; }
		
		/// <summary>
		/// The Xero identifier for payroll employee
		/// </summary>
		public string EmployeeID { get; set; }
		
		/// <summary>
		/// The Xero identifier for the associated payrun
		/// </summary>
		public string PayRunID { get; set; }
		
		/// <summary>
		/// The date payslip was last updated
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastEdited { get; set; }
		
		/// <summary>
		/// Employee first name
		/// </summary>
		public string FirstName { get; set; }
		
		/// <summary>
		/// Employee last name
		/// </summary>
		public string LastName { get; set; }
		
		/// <summary>
		/// Total earnings before any deductions. Same as gross earnings for UK.
		/// </summary>
		public System.Nullable<System.Double> TotalEarnings { get; set; }
		
		/// <summary>
		/// Total earnings before any deductions. Same as total earnings for UK.
		/// </summary>
		public System.Nullable<System.Double> GrossEarnings { get; set; }
		
		/// <summary>
		/// The employee net pay
		/// </summary>
		public System.Nullable<System.Double> TotalPay { get; set; }
		
		/// <summary>
		/// The employer's tax obligation
		/// </summary>
		public System.Nullable<System.Double> TotalEmployerTaxes { get; set; }
		
		/// <summary>
		/// The part of an employee's earnings that is deducted for tax purposes
		/// </summary>
		public System.Nullable<System.Double> TotalEmployeeTaxes { get; set; }
		
		/// <summary>
		/// Total amount subtracted from an employee's earnings to reach total pay
		/// </summary>
		public System.Nullable<System.Double> TotalDeductions { get; set; }
		
		/// <summary>
		/// Total reimbursements are nontaxable payments to an employee used to repay out-of-pocket expenses when the person incurs those expenses through employment
		/// </summary>
		public System.Nullable<System.Double> TotalReimbursements { get; set; }
		
		/// <summary>
		/// Total amounts required by law to subtract from the employee's earnings
		/// </summary>
		public System.Nullable<System.Double> TotalCourtOrders { get; set; }
		
		/// <summary>
		/// Benefits (also called fringe benefits, perquisites or perks) are various non-earnings compensations provided to employees in addition to their normal earnings or salaries
		/// </summary>
		public System.Nullable<System.Double> TotalBenefits { get; set; }
		
		/// <summary>
		/// BACS Service User Number
		/// </summary>
		public string BacsHash { get; set; }
		
		/// <summary>
		/// The payment method code
		/// </summary>
		public PaymentMethodPaymentMethod1 PaymentMethod { get; set; }
		
		public EarningsLine[] EarningsLines { get; set; }
		
		public LeaveEarningsLine[] LeaveEarningsLines { get; set; }
		
		public TimesheetEarningsLine[] TimesheetEarningsLines { get; set; }
		
		public DeductionLine[] DeductionLines { get; set; }
		
		public ReimbursementLine[] ReimbursementLines { get; set; }
		
		public LeaveAccrualLine[] LeaveAccrualLines { get; set; }
		
		public BenefitLine[] BenefitLines { get; set; }
		
		public PaymentLine[] PaymentLines { get; set; }
		
		public TaxLine[] EmployeeTaxLines { get; set; }
		
		public CourtOrderLine[] CourtOrderLines { get; set; }
	}
	
	public class EarningsLine
	{
		
		/// <summary>
		/// Xero identifier for payroll earnings line
		/// </summary>
		public string EarningsLineID { get; set; }
		
		/// <summary>
		/// Xero identifier for payroll earnings rate
		/// </summary>
		public string EarningsRateID { get; set; }
		
		/// <summary>
		/// name of earnings rate for display in UI
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Rate per unit for earnings line
		/// </summary>
		public System.Nullable<System.Double> RatePerUnit { get; set; }
		
		/// <summary>
		/// Earnings number of units
		/// </summary>
		public System.Nullable<System.Double> NumberOfUnits { get; set; }
		
		/// <summary>
		/// Earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed
		/// </summary>
		public System.Nullable<System.Double> FixedAmount { get; set; }
		
		/// <summary>
		/// The amount of the earnings line.
		/// </summary>
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Identifies if the earnings is taken from the timesheet. False for earnings line
		/// </summary>
		public System.Nullable<System.Boolean> IsLinkedToTimesheet { get; set; }
		
		/// <summary>
		/// Identifies if the earnings is using an average daily pay rate
		/// </summary>
		public System.Nullable<System.Boolean> IsAverageDailyPayRate { get; set; }
	}
	
	public class LeaveEarningsLine
	{
		
		/// <summary>
		/// Xero identifier for payroll leave earnings rate
		/// </summary>
		public string EarningsRateID { get; set; }
		
		/// <summary>
		/// Rate per unit for leave earnings line
		/// </summary>
		public System.Nullable<System.Double> RatePerUnit { get; set; }
		
		/// <summary>
		/// Leave earnings number of units
		/// </summary>
		public System.Nullable<System.Double> NumberOfUnits { get; set; }
		
		/// <summary>
		/// Leave earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed
		/// </summary>
		public System.Nullable<System.Double> FixedAmount { get; set; }
		
		/// <summary>
		/// The amount of the earnings line.
		/// </summary>
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Identifies if the leave earnings is taken from the timesheet. False for leave earnings line
		/// </summary>
		public System.Nullable<System.Boolean> IsLinkedToTimesheet { get; set; }
	}
	
	public class TimesheetEarningsLine
	{
		
		/// <summary>
		/// Xero identifier for payroll timesheet earnings rate
		/// </summary>
		public string EarningsRateID { get; set; }
		
		/// <summary>
		/// Rate per unit for timesheet earnings line
		/// </summary>
		public System.Nullable<System.Double> RatePerUnit { get; set; }
		
		/// <summary>
		/// Timesheet earnings number of units
		/// </summary>
		public System.Nullable<System.Double> NumberOfUnits { get; set; }
		
		/// <summary>
		/// Timesheet earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed
		/// </summary>
		public System.Nullable<System.Double> FixedAmount { get; set; }
		
		/// <summary>
		/// The amount of the timesheet earnings line.
		/// </summary>
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Identifies if the timesheet earnings is taken from the timesheet. False for leave earnings line
		/// </summary>
		public System.Nullable<System.Boolean> IsLinkedToTimesheet { get; set; }
	}
	
	public class DeductionLine
	{
		
		/// <summary>
		/// Xero identifier for payroll deduction
		/// </summary>
		public string DeductionTypeID { get; set; }
		
		/// <summary>
		/// The amount of the deduction line
		/// </summary>
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Identifies if the deduction is subject to tax
		/// </summary>
		public System.Nullable<System.Boolean> SubjectToTax { get; set; }
		
		/// <summary>
		/// Deduction rate percentage
		/// </summary>
		public System.Nullable<System.Double> Percentage { get; set; }
	}
	
	public class ReimbursementLine
	{
		
		/// <summary>
		/// Xero identifier for payroll reimbursement
		/// </summary>
		public string ReimbursementTypeID { get; set; }
		
		/// <summary>
		/// Reimbursement line description
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Reimbursement amount
		/// </summary>
		public System.Nullable<System.Double> Amount { get; set; }
	}
	
	public class LeaveAccrualLine
	{
		
		/// <summary>
		/// Xero identifier for the Leave type
		/// </summary>
		public string LeaveTypeID { get; set; }
		
		/// <summary>
		/// Leave accrual number of units
		/// </summary>
		public System.Nullable<System.Double> NumberOfUnits { get; set; }
	}
	
	public class BenefitLine
	{
		
		/// <summary>
		/// Xero identifier for payroll benefit type
		/// </summary>
		public string BenefitTypeID { get; set; }
		
		/// <summary>
		/// Benefit display name
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The amount of the benefit line.
		/// </summary>
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Benefit fixed amount
		/// </summary>
		public System.Nullable<System.Double> FixedAmount { get; set; }
		
		/// <summary>
		/// Benefit rate percentage
		/// </summary>
		public System.Nullable<System.Double> Percentage { get; set; }
	}
	
	public class PaymentLine
	{
		
		/// <summary>
		/// Xero identifier for payroll payment line
		/// </summary>
		public string PaymentLineID { get; set; }
		
		/// <summary>
		/// The amount of the payment line
		/// </summary>
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// The account number
		/// </summary>
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// The account sort code
		/// </summary>
		public string SortCode { get; set; }
		
		/// <summary>
		/// The account name
		/// </summary>
		public string AccountName { get; set; }
	}
	
	public class TaxLine
	{
		
		/// <summary>
		/// Xero identifier for payroll tax line
		/// </summary>
		public string TaxLineID { get; set; }
		
		/// <summary>
		/// Tax line description
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Identifies if the amount is paid for by the employee or employer. True if employer pays the tax
		/// </summary>
		public System.Nullable<System.Boolean> IsEmployerTax { get; set; }
		
		/// <summary>
		/// The amount of the tax line
		/// </summary>
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Tax type ID
		/// </summary>
		public string GlobalTaxTypeID { get; set; }
		
		/// <summary>
		/// Identifies if the tax line is a manual adjustment
		/// </summary>
		public System.Nullable<System.Boolean> ManualAdjustment { get; set; }
	}
	
	public class CourtOrderLine
	{
		
		/// <summary>
		/// Xero identifier for payroll court order type
		/// </summary>
		public string CourtOrderTypeID { get; set; }
		
		/// <summary>
		/// Amount
		/// </summary>
		public System.Nullable<System.Double> Amount { get; set; }
	}
	
	public class PayRunObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public PayRun PayRun { get; set; }
	}
	
	public class PayslipObject
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public Payslip PaySlip { get; set; }
	}
	
	public class Payslips
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public Payslip[] PaySlips { get; set; }
	}
	
	public class Settings
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public Accounts Settings1 { get; set; }
	}
	
	public class Accounts
	{
		
		public Account[] Accounts1 { get; set; }
	}
	
	public class Account
	{
		
		/// <summary>
		/// The Xero identifier for Settings.
		/// </summary>
		public string AccountID { get; set; }
		
		/// <summary>
		/// The assigned AccountType
		/// </summary>
		public AccountType Type { get; set; }
		
		/// <summary>
		/// A unique 3 digit number for each Account
		/// </summary>
		public string Code { get; set; }
		
		/// <summary>
		/// Name of the Account.
		/// </summary>
		public string Name { get; set; }
	}
	
	public enum AccountType
	{
		
		BANK = 0,
		
		EMPLOYERSNIC = 1,
		
		NICLIABILITY = 2,
		
		PAYEECONTRIBUTION = 3,
		
		PAYELIABILITY = 4,
		
		WAGESPAYABLE = 5,
		
		WAGESEXPENSE = 6,
	}
	
	public class TrackingCategories
	{
		
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// The object returned for a bad request
		/// </summary>
		public Problem Problem { get; set; }
		
		public TrackingCategory TrackingCategories1 { get; set; }
	}
	
	public class TrackingCategory
	{
		
		/// <summary>
		/// The Xero identifier for Employee groups tracking category.
		/// </summary>
		public string EmployeeGroupsTrackingCategoryID { get; set; }
		
		/// <summary>
		/// The Xero identifier for Timesheet tracking category.
		/// </summary>
		public string TimesheetTrackingCategoryID { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// searches employees
		/// GetEmployees Employees
		/// </summary>
		/// <param name="firstName">Filter by first name</param>
		/// <param name="lastName">Filter by last name</param>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <returns>search results matching criteria</returns>
		public async Task<Employees> GetEmployeesAsync(string firstName, string lastName, int page)
		{
			var requestUri = "Employees?firstName=" + (firstName==null? "" : Uri.EscapeDataString(firstName))+"&lastName=" + (lastName==null? "" : Uri.EscapeDataString(lastName))+"&page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Employees>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches employees
		/// GetEmployees Employees
		/// </summary>
		/// <param name="firstName">Filter by first name</param>
		/// <param name="lastName">Filter by last name</param>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <returns>search results matching criteria</returns>
		public Employees GetEmployees(string firstName, string lastName, int page)
		{
			var requestUri = "Employees?firstName=" + (firstName==null? "" : Uri.EscapeDataString(firstName))+"&lastName=" + (lastName==null? "" : Uri.EscapeDataString(lastName))+"&page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Employees>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creates employees
		/// CreateEmployee Employees
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public async Task<EmployeeObject> CreateEmployeeAsync(Employee requestBody)
		{
			var requestUri = "Employees";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// creates employees
		/// CreateEmployee Employees
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public EmployeeObject CreateEmployee(Employee requestBody)
		{
			var requestUri = "Employees";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// searches employees
		/// GetEmployee Employees/{EmployeeId}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EmployeeObject> GetEmployeeAsync(string EmployeeId)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches employees
		/// GetEmployee Employees/{EmployeeId}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public EmployeeObject GetEmployee(string EmployeeId)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// updates employee
		/// UpdateEmployee Employees/{EmployeeId}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>successful response</returns>
		public async Task<EmployeeObject> UpdateEmployeeAsync(string EmployeeId, Employee requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// updates employee
		/// UpdateEmployee Employees/{EmployeeId}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>successful response</returns>
		public EmployeeObject UpdateEmployee(string EmployeeId, Employee requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// creates employment
		/// CreateEmployment Employees/{EmployeeId}/Employment
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EmploymentObject> CreateEmploymentAsync(string EmployeeId, Employment requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/Employment";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmploymentObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// creates employment
		/// CreateEmployment Employees/{EmployeeId}/Employment
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public EmploymentObject CreateEmployment(string EmployeeId, Employment requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/Employment";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmploymentObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// searches tax records for an employee
		/// GetEmployeeTax Employees/{EmployeeId}/Tax
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EmployeeTaxObject> GetEmployeeTaxAsync(string EmployeeId)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/Tax";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeTaxObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches tax records for an employee
		/// GetEmployeeTax Employees/{EmployeeId}/Tax
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public EmployeeTaxObject GetEmployeeTax(string EmployeeId)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/Tax";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeTaxObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieve employee openingbalances
		/// GetEmployeeOpeningBalances Employees/{EmployeeId}/ukopeningbalances
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EmployeeOpeningBalancesObject> GetEmployeeOpeningBalancesAsync(string EmployeeId)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/ukopeningbalances";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeOpeningBalancesObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieve employee openingbalances
		/// GetEmployeeOpeningBalances Employees/{EmployeeId}/ukopeningbalances
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public EmployeeOpeningBalancesObject GetEmployeeOpeningBalances(string EmployeeId)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/ukopeningbalances";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeOpeningBalancesObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creates employee opening balances
		/// CreateEmployeeOpeningBalances Employees/{EmployeeId}/ukopeningbalances
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EmployeeOpeningBalancesObject> CreateEmployeeOpeningBalancesAsync(string EmployeeId, EmployeeOpeningBalances requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/ukopeningbalances";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeOpeningBalancesObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// creates employee opening balances
		/// CreateEmployeeOpeningBalances Employees/{EmployeeId}/ukopeningbalances
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public EmployeeOpeningBalancesObject CreateEmployeeOpeningBalances(string EmployeeId, EmployeeOpeningBalances requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/ukopeningbalances";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeOpeningBalancesObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// updates employee opening balances
		/// UpdateEmployeeOpeningBalances Employees/{EmployeeId}/ukopeningbalances
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>successful response</returns>
		public async Task<EmployeeOpeningBalancesObject> UpdateEmployeeOpeningBalancesAsync(string EmployeeId, EmployeeOpeningBalances requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/ukopeningbalances";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeOpeningBalancesObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// updates employee opening balances
		/// UpdateEmployeeOpeningBalances Employees/{EmployeeId}/ukopeningbalances
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>successful response</returns>
		public EmployeeOpeningBalancesObject UpdateEmployeeOpeningBalances(string EmployeeId, EmployeeOpeningBalances requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/ukopeningbalances";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeOpeningBalancesObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// search employee leave records
		/// GetEmployeeLeaves Employees/{EmployeeId}/Leave
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EmployeeLeaves> GetEmployeeLeavesAsync(string EmployeeId)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/Leave";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeLeaves>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// search employee leave records
		/// GetEmployeeLeaves Employees/{EmployeeId}/Leave
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public EmployeeLeaves GetEmployeeLeaves(string EmployeeId)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/Leave";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeLeaves>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creates employee leave records
		/// CreateEmployeeLeave Employees/{EmployeeId}/Leave
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EmployeeLeaveObject> CreateEmployeeLeaveAsync(string EmployeeId, EmployeeLeave requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/Leave";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeLeaveObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// creates employee leave records
		/// CreateEmployeeLeave Employees/{EmployeeId}/Leave
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public EmployeeLeaveObject CreateEmployeeLeave(string EmployeeId, EmployeeLeave requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/Leave";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeLeaveObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// retrieve a single employee leave record
		/// GetEmployeeLeave Employees/{EmployeeId}/Leave/{LeaveID}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="LeaveID">Leave id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EmployeeLeaveObject> GetEmployeeLeaveAsync(string EmployeeId, string LeaveID)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/Leave/"+ (LeaveID==null? "" : Uri.EscapeDataString(LeaveID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeLeaveObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieve a single employee leave record
		/// GetEmployeeLeave Employees/{EmployeeId}/Leave/{LeaveID}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="LeaveID">Leave id for single object</param>
		/// <returns>search results matching criteria</returns>
		public EmployeeLeaveObject GetEmployeeLeave(string EmployeeId, string LeaveID)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/Leave/"+ (LeaveID==null? "" : Uri.EscapeDataString(LeaveID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeLeaveObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// updates employee leave records
		/// UpdateEmployeeLeave Employees/{EmployeeId}/Leave/{LeaveID}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="LeaveID">Leave id for single object</param>
		/// <returns>successful response</returns>
		public async Task<EmployeeLeaveObject> UpdateEmployeeLeaveAsync(string EmployeeId, string LeaveID, EmployeeLeave requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/Leave/"+ (LeaveID==null? "" : Uri.EscapeDataString(LeaveID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeLeaveObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// updates employee leave records
		/// UpdateEmployeeLeave Employees/{EmployeeId}/Leave/{LeaveID}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="LeaveID">Leave id for single object</param>
		/// <returns>successful response</returns>
		public EmployeeLeaveObject UpdateEmployeeLeave(string EmployeeId, string LeaveID, EmployeeLeave requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/Leave/"+ (LeaveID==null? "" : Uri.EscapeDataString(LeaveID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeLeaveObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// deletes an employee leave record
		/// DeleteEmployeeLeave Employees/{EmployeeId}/Leave/{LeaveID}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="LeaveID">Leave id for single object</param>
		/// <returns>successful response</returns>
		public async Task<EmployeeLeaveObject> DeleteEmployeeLeaveAsync(string EmployeeId, string LeaveID)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/Leave/"+ (LeaveID==null? "" : Uri.EscapeDataString(LeaveID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeLeaveObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// deletes an employee leave record
		/// DeleteEmployeeLeave Employees/{EmployeeId}/Leave/{LeaveID}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="LeaveID">Leave id for single object</param>
		/// <returns>successful response</returns>
		public EmployeeLeaveObject DeleteEmployeeLeave(string EmployeeId, string LeaveID)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/Leave/"+ (LeaveID==null? "" : Uri.EscapeDataString(LeaveID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeLeaveObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// search employee leave balances
		/// GetEmployeeLeaveBalances Employees/{EmployeeId}/LeaveBalances
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EmployeeLeaveBalances> GetEmployeeLeaveBalancesAsync(string EmployeeId)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/LeaveBalances";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeLeaveBalances>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// search employee leave balances
		/// GetEmployeeLeaveBalances Employees/{EmployeeId}/LeaveBalances
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public EmployeeLeaveBalances GetEmployeeLeaveBalances(string EmployeeId)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/LeaveBalances";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeLeaveBalances>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// search employee leave balances
		/// GetEmployeeStatutoryLeaveBalances Employees/{EmployeeId}/StatutoryLeaveBalance
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="LeaveType">Filter by the type of statutory leave</param>
		/// <param name="AsOfDate">The date from which to calculate balance remaining. If not specified, current date UTC is used.</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EmployeeStatutoryLeaveBalanceObject> GetEmployeeStatutoryLeaveBalancesAsync(string EmployeeId, string LeaveType, System.DateTimeOffset AsOfDate)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/StatutoryLeaveBalance&LeaveType=" + (LeaveType==null? "" : Uri.EscapeDataString(LeaveType))+"&AsOfDate=" + AsOfDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeStatutoryLeaveBalanceObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// search employee leave balances
		/// GetEmployeeStatutoryLeaveBalances Employees/{EmployeeId}/StatutoryLeaveBalance
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="LeaveType">Filter by the type of statutory leave</param>
		/// <param name="AsOfDate">The date from which to calculate balance remaining. If not specified, current date UTC is used.</param>
		/// <returns>search results matching criteria</returns>
		public EmployeeStatutoryLeaveBalanceObject GetEmployeeStatutoryLeaveBalances(string EmployeeId, string LeaveType, System.DateTimeOffset AsOfDate)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/StatutoryLeaveBalance&LeaveType=" + (LeaveType==null? "" : Uri.EscapeDataString(LeaveType))+"&AsOfDate=" + AsOfDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeStatutoryLeaveBalanceObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieve a summary of statutory leaves for an employee
		/// GetStatutoryLeaveSummary statutoryleaves/summary/{EmployeeId}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="activeOnly">Filter response with leaves that are currently active or yet to be taken. If not specified, all leaves (past, current, and future scheduled) are returned</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EmployeeStatutoryLeavesSummaries> GetStatutoryLeaveSummaryAsync(string EmployeeId, bool activeOnly)
		{
			var requestUri = "statutoryleaves/summary/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"&activeOnly="+activeOnly;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeStatutoryLeavesSummaries>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieve a summary of statutory leaves for an employee
		/// GetStatutoryLeaveSummary statutoryleaves/summary/{EmployeeId}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="activeOnly">Filter response with leaves that are currently active or yet to be taken. If not specified, all leaves (past, current, and future scheduled) are returned</param>
		/// <returns>search results matching criteria</returns>
		public EmployeeStatutoryLeavesSummaries GetStatutoryLeaveSummary(string EmployeeId, bool activeOnly)
		{
			var requestUri = "statutoryleaves/summary/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"&activeOnly="+activeOnly;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeStatutoryLeavesSummaries>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creates employee statutory sick leave records
		/// CreateEmployeeStatutorySickLeave StatutoryLeaves/Sick
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public async Task<EmployeeStatutorySickLeaveObject> CreateEmployeeStatutorySickLeaveAsync(EmployeeStatutorySickLeave requestBody)
		{
			var requestUri = "StatutoryLeaves/Sick";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeStatutorySickLeaveObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// creates employee statutory sick leave records
		/// CreateEmployeeStatutorySickLeave StatutoryLeaves/Sick
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public EmployeeStatutorySickLeaveObject CreateEmployeeStatutorySickLeave(EmployeeStatutorySickLeave requestBody)
		{
			var requestUri = "StatutoryLeaves/Sick";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeStatutorySickLeaveObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// retrieve a statutory sick leave for an employee
		/// GetEmployeeStatutorySickLeave StatutoryLeaves/Sick/{StatutorySickLeaveID}
		/// </summary>
		/// <param name="StatutorySickLeaveID">Statutory sick leave id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EmployeeStatutorySickLeaveObject> GetEmployeeStatutorySickLeaveAsync(string StatutorySickLeaveID)
		{
			var requestUri = "StatutoryLeaves/Sick/"+ (StatutorySickLeaveID==null? "" : Uri.EscapeDataString(StatutorySickLeaveID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeStatutorySickLeaveObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieve a statutory sick leave for an employee
		/// GetEmployeeStatutorySickLeave StatutoryLeaves/Sick/{StatutorySickLeaveID}
		/// </summary>
		/// <param name="StatutorySickLeaveID">Statutory sick leave id for single object</param>
		/// <returns>search results matching criteria</returns>
		public EmployeeStatutorySickLeaveObject GetEmployeeStatutorySickLeave(string StatutorySickLeaveID)
		{
			var requestUri = "StatutoryLeaves/Sick/"+ (StatutorySickLeaveID==null? "" : Uri.EscapeDataString(StatutorySickLeaveID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeStatutorySickLeaveObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches employee leave periods
		/// GetEmployeeLeavePeriods Employees/{EmployeeId}/LeavePeriods
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="startDate">Filter by start date</param>
		/// <param name="endDate">Filter by end date</param>
		/// <returns>search results matching criteria</returns>
		public async Task<LeavePeriods> GetEmployeeLeavePeriodsAsync(string EmployeeId, System.DateTimeOffset startDate, System.DateTimeOffset endDate)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/LeavePeriods&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<LeavePeriods>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches employee leave periods
		/// GetEmployeeLeavePeriods Employees/{EmployeeId}/LeavePeriods
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="startDate">Filter by start date</param>
		/// <param name="endDate">Filter by end date</param>
		/// <returns>search results matching criteria</returns>
		public LeavePeriods GetEmployeeLeavePeriods(string EmployeeId, System.DateTimeOffset startDate, System.DateTimeOffset endDate)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/LeavePeriods&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<LeavePeriods>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches employee leave types
		/// GetEmployeeLeaveTypes Employees/{EmployeeId}/LeaveTypes
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EmployeeLeaveTypes> GetEmployeeLeaveTypesAsync(string EmployeeId)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/LeaveTypes";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeLeaveTypes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches employee leave types
		/// GetEmployeeLeaveTypes Employees/{EmployeeId}/LeaveTypes
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public EmployeeLeaveTypes GetEmployeeLeaveTypes(string EmployeeId)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/LeaveTypes";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeLeaveTypes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creates employee leave type records
		/// CreateEmployeeLeaveType Employees/{EmployeeId}/LeaveTypes
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EmployeeLeaveTypeObject> CreateEmployeeLeaveTypeAsync(string EmployeeId, EmployeeLeaveType requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/LeaveTypes";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeLeaveTypeObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// creates employee leave type records
		/// CreateEmployeeLeaveType Employees/{EmployeeId}/LeaveTypes
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public EmployeeLeaveTypeObject CreateEmployeeLeaveType(string EmployeeId, EmployeeLeaveType requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/LeaveTypes";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeeLeaveTypeObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// retrieves an employee's payment method
		/// GetEmployeePaymentMethod Employees/{EmployeeId}/PaymentMethods
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<PaymentMethodObject> GetEmployeePaymentMethodAsync(string EmployeeId)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/PaymentMethods";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PaymentMethodObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieves an employee's payment method
		/// GetEmployeePaymentMethod Employees/{EmployeeId}/PaymentMethods
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public PaymentMethodObject GetEmployeePaymentMethod(string EmployeeId)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/PaymentMethods";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PaymentMethodObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creates employee payment method
		/// CreateEmployeePaymentMethod Employees/{EmployeeId}/PaymentMethods
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<PaymentMethodObject> CreateEmployeePaymentMethodAsync(string EmployeeId, PaymentMethod requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/PaymentMethods";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PaymentMethodObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// creates employee payment method
		/// CreateEmployeePaymentMethod Employees/{EmployeeId}/PaymentMethods
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public PaymentMethodObject CreateEmployeePaymentMethod(string EmployeeId, PaymentMethod requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/PaymentMethods";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PaymentMethodObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// searches employee pay templates
		/// GetEmployeePayTemplate Employees/{EmployeeId}/PayTemplates
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EmployeePayTemplateObject> GetEmployeePayTemplateAsync(string EmployeeId)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/PayTemplates";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeePayTemplateObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches employee pay templates
		/// GetEmployeePayTemplate Employees/{EmployeeId}/PayTemplates
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public EmployeePayTemplateObject GetEmployeePayTemplate(string EmployeeId)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/PayTemplates";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeePayTemplateObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creates employee earnings template records
		/// CreateEmployeeEarningsTemplate Employees/{EmployeeId}/PayTemplates/earnings
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EarningsTemplateObject> CreateEmployeeEarningsTemplateAsync(string EmployeeId, EarningsTemplate requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/PayTemplates/earnings";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EarningsTemplateObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// creates employee earnings template records
		/// CreateEmployeeEarningsTemplate Employees/{EmployeeId}/PayTemplates/earnings
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public EarningsTemplateObject CreateEmployeeEarningsTemplate(string EmployeeId, EarningsTemplate requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/PayTemplates/earnings";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EarningsTemplateObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// updates employee earnings template records
		/// UpdateEmployeeEarningsTemplate Employees/{EmployeeId}/PayTemplates/earnings/{PayTemplateEarningID}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="PayTemplateEarningID">Id for single pay template earnings object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EarningsTemplateObject> UpdateEmployeeEarningsTemplateAsync(string EmployeeId, string PayTemplateEarningID, EarningsTemplate requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/PayTemplates/earnings/"+ (PayTemplateEarningID==null? "" : Uri.EscapeDataString(PayTemplateEarningID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EarningsTemplateObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// updates employee earnings template records
		/// UpdateEmployeeEarningsTemplate Employees/{EmployeeId}/PayTemplates/earnings/{PayTemplateEarningID}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="PayTemplateEarningID">Id for single pay template earnings object</param>
		/// <returns>search results matching criteria</returns>
		public EarningsTemplateObject UpdateEmployeeEarningsTemplate(string EmployeeId, string PayTemplateEarningID, EarningsTemplate requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/PayTemplates/earnings/"+ (PayTemplateEarningID==null? "" : Uri.EscapeDataString(PayTemplateEarningID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EarningsTemplateObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// deletes an employee earnings template record
		/// DeleteEmployeeEarningsTemplate Employees/{EmployeeId}/PayTemplates/earnings/{PayTemplateEarningID}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="PayTemplateEarningID">Id for single pay template earnings object</param>
		/// <returns>deletion successful</returns>
		public async Task DeleteEmployeeEarningsTemplateAsync(string EmployeeId, string PayTemplateEarningID)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/PayTemplates/earnings/"+ (PayTemplateEarningID==null? "" : Uri.EscapeDataString(PayTemplateEarningID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// deletes an employee earnings template record
		/// DeleteEmployeeEarningsTemplate Employees/{EmployeeId}/PayTemplates/earnings/{PayTemplateEarningID}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="PayTemplateEarningID">Id for single pay template earnings object</param>
		/// <returns>deletion successful</returns>
		public void DeleteEmployeeEarningsTemplate(string EmployeeId, string PayTemplateEarningID)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/PayTemplates/earnings/"+ (PayTemplateEarningID==null? "" : Uri.EscapeDataString(PayTemplateEarningID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creates multiple employee earnings template records
		/// CreateMultipleEmployeeEarningsTemplate Employees/{EmployeeId}/paytemplateearnings
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EmployeePayTemplates> CreateMultipleEmployeeEarningsTemplateAsync(string EmployeeId, EarningsTemplate[] requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/paytemplateearnings";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeePayTemplates>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// creates multiple employee earnings template records
		/// CreateMultipleEmployeeEarningsTemplate Employees/{EmployeeId}/paytemplateearnings
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public EmployeePayTemplates CreateMultipleEmployeeEarningsTemplate(string EmployeeId, EarningsTemplate[] requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/paytemplateearnings";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EmployeePayTemplates>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// searches benefits
		/// GetBenefits Benefits
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <returns>search results matching criteria</returns>
		public async Task<Benefits> GetBenefitsAsync(int page)
		{
			var requestUri = "Benefits?page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Benefits>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches benefits
		/// GetBenefits Benefits
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <returns>search results matching criteria</returns>
		public Benefits GetBenefits(int page)
		{
			var requestUri = "Benefits?page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Benefits>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// create a new benefit
		/// CreateBenefit Benefits
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public async Task<BenefitObject> CreateBenefitAsync(Benefit requestBody)
		{
			var requestUri = "Benefits";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BenefitObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// create a new benefit
		/// CreateBenefit Benefits
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public BenefitObject CreateBenefit(Benefit requestBody)
		{
			var requestUri = "Benefits";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BenefitObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// retrieve a single benefit by id
		/// GetBenefit Benefits/{id}
		/// </summary>
		/// <param name="id">Identifier for the benefit</param>
		/// <returns>search results matching criteria</returns>
		public async Task<BenefitObject> GetBenefitAsync(string id)
		{
			var requestUri = "Benefits/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BenefitObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieve a single benefit by id
		/// GetBenefit Benefits/{id}
		/// </summary>
		/// <param name="id">Identifier for the benefit</param>
		/// <returns>search results matching criteria</returns>
		public BenefitObject GetBenefit(string id)
		{
			var requestUri = "Benefits/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BenefitObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches deductions
		/// GetDeductions Deductions
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <returns>search results matching criteria</returns>
		public async Task<Deductions> GetDeductionsAsync(int page)
		{
			var requestUri = "Deductions?page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Deductions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches deductions
		/// GetDeductions Deductions
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <returns>search results matching criteria</returns>
		public Deductions GetDeductions(int page)
		{
			var requestUri = "Deductions?page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Deductions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// create a new deduction
		/// CreateDeduction Deductions
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public async Task<DeductionObject> CreateDeductionAsync(Deduction requestBody)
		{
			var requestUri = "Deductions";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeductionObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// create a new deduction
		/// CreateDeduction Deductions
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public DeductionObject CreateDeduction(Deduction requestBody)
		{
			var requestUri = "Deductions";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeductionObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// retrieve a single deduction by id
		/// GetDeduction Deductions/{deductionId}
		/// </summary>
		/// <param name="deductionId">Identifier for the deduction</param>
		/// <returns>search results matching criteria</returns>
		public async Task<DeductionObject> GetDeductionAsync(string deductionId)
		{
			var requestUri = "Deductions/"+ (deductionId==null? "" : Uri.EscapeDataString(deductionId));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeductionObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieve a single deduction by id
		/// GetDeduction Deductions/{deductionId}
		/// </summary>
		/// <param name="deductionId">Identifier for the deduction</param>
		/// <returns>search results matching criteria</returns>
		public DeductionObject GetDeduction(string deductionId)
		{
			var requestUri = "Deductions/"+ (deductionId==null? "" : Uri.EscapeDataString(deductionId));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeductionObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches earnings orders
		/// GetEarningsOrders EarningsOrders
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EarningsOrders> GetEarningsOrdersAsync(int page)
		{
			var requestUri = "EarningsOrders?page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EarningsOrders>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches earnings orders
		/// GetEarningsOrders EarningsOrders
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <returns>search results matching criteria</returns>
		public EarningsOrders GetEarningsOrders(int page)
		{
			var requestUri = "EarningsOrders?page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EarningsOrders>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieve a single deduction by id
		/// GetEarningsOrder EarningsOrders/{id}
		/// </summary>
		/// <param name="id">Identifier for the deduction</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EarningsOrderObject> GetEarningsOrderAsync(string id)
		{
			var requestUri = "EarningsOrders/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EarningsOrderObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieve a single deduction by id
		/// GetEarningsOrder EarningsOrders/{id}
		/// </summary>
		/// <param name="id">Identifier for the deduction</param>
		/// <returns>search results matching criteria</returns>
		public EarningsOrderObject GetEarningsOrder(string id)
		{
			var requestUri = "EarningsOrders/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EarningsOrderObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches earnings rates
		/// GetEarningsRates EarningsRates
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EarningsRates> GetEarningsRatesAsync(int page)
		{
			var requestUri = "EarningsRates?page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EarningsRates>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches earnings rates
		/// GetEarningsRates EarningsRates
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <returns>search results matching criteria</returns>
		public EarningsRates GetEarningsRates(int page)
		{
			var requestUri = "EarningsRates?page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EarningsRates>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// create a new earnings rate
		/// CreateEarningsRate EarningsRates
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public async Task<EarningsRateObject> CreateEarningsRateAsync(EarningsRate requestBody)
		{
			var requestUri = "EarningsRates";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EarningsRateObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// create a new earnings rate
		/// CreateEarningsRate EarningsRates
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public EarningsRateObject CreateEarningsRate(EarningsRate requestBody)
		{
			var requestUri = "EarningsRates";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EarningsRateObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// retrieve a single earnings rates by id
		/// GetEarningsRate EarningsRates/{EarningsRateID}
		/// </summary>
		/// <param name="EarningsRateID">Identifier for the earnings rate</param>
		/// <returns>search results matching criteria</returns>
		public async Task<EarningsRateObject> GetEarningsRateAsync(string EarningsRateID)
		{
			var requestUri = "EarningsRates/"+ (EarningsRateID==null? "" : Uri.EscapeDataString(EarningsRateID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EarningsRateObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieve a single earnings rates by id
		/// GetEarningsRate EarningsRates/{EarningsRateID}
		/// </summary>
		/// <param name="EarningsRateID">Identifier for the earnings rate</param>
		/// <returns>search results matching criteria</returns>
		public EarningsRateObject GetEarningsRate(string EarningsRateID)
		{
			var requestUri = "EarningsRates/"+ (EarningsRateID==null? "" : Uri.EscapeDataString(EarningsRateID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EarningsRateObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches leave types
		/// GetLeaveTypes LeaveTypes
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <param name="ActiveOnly">Filters leave types by active status. By default the API returns all leave types.</param>
		/// <returns>search results matching criteria</returns>
		public async Task<LeaveTypes> GetLeaveTypesAsync(int page, bool ActiveOnly)
		{
			var requestUri = "LeaveTypes?page="+page+"&ActiveOnly="+ActiveOnly;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<LeaveTypes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches leave types
		/// GetLeaveTypes LeaveTypes
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <param name="ActiveOnly">Filters leave types by active status. By default the API returns all leave types.</param>
		/// <returns>search results matching criteria</returns>
		public LeaveTypes GetLeaveTypes(int page, bool ActiveOnly)
		{
			var requestUri = "LeaveTypes?page="+page+"&ActiveOnly="+ActiveOnly;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<LeaveTypes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// create a new leave type
		/// CreateLeaveType LeaveTypes
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public async Task<LeaveTypeObject> CreateLeaveTypeAsync(LeaveType requestBody)
		{
			var requestUri = "LeaveTypes";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<LeaveTypeObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// create a new leave type
		/// CreateLeaveType LeaveTypes
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public LeaveTypeObject CreateLeaveType(LeaveType requestBody)
		{
			var requestUri = "LeaveTypes";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<LeaveTypeObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// retrieve a single leave type by id
		/// GetLeaveType LeaveTypes/{LeaveTypeID}
		/// </summary>
		/// <param name="LeaveTypeID">Identifier for the leave type</param>
		/// <returns>search results matching criteria</returns>
		public async Task<LeaveTypeObject> GetLeaveTypeAsync(string LeaveTypeID)
		{
			var requestUri = "LeaveTypes/"+ (LeaveTypeID==null? "" : Uri.EscapeDataString(LeaveTypeID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<LeaveTypeObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieve a single leave type by id
		/// GetLeaveType LeaveTypes/{LeaveTypeID}
		/// </summary>
		/// <param name="LeaveTypeID">Identifier for the leave type</param>
		/// <returns>search results matching criteria</returns>
		public LeaveTypeObject GetLeaveType(string LeaveTypeID)
		{
			var requestUri = "LeaveTypes/"+ (LeaveTypeID==null? "" : Uri.EscapeDataString(LeaveTypeID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<LeaveTypeObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches reimbursements
		/// GetReimbursements Reimbursements
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <returns>search results matching criteria</returns>
		public async Task<Reimbursements> GetReimbursementsAsync(int page)
		{
			var requestUri = "Reimbursements?page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Reimbursements>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches reimbursements
		/// GetReimbursements Reimbursements
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <returns>search results matching criteria</returns>
		public Reimbursements GetReimbursements(int page)
		{
			var requestUri = "Reimbursements?page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Reimbursements>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// create a new reimbursement
		/// CreateReimbursement Reimbursements
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public async Task<ReimbursementObject> CreateReimbursementAsync(Reimbursement requestBody)
		{
			var requestUri = "Reimbursements";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ReimbursementObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// create a new reimbursement
		/// CreateReimbursement Reimbursements
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public ReimbursementObject CreateReimbursement(Reimbursement requestBody)
		{
			var requestUri = "Reimbursements";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ReimbursementObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// retrieve a single reimbursement by id
		/// GetReimbursement Reimbursements/{ReimbursementID}
		/// </summary>
		/// <param name="ReimbursementID">Identifier for the reimbursement</param>
		/// <returns>search results matching criteria</returns>
		public async Task<ReimbursementObject> GetReimbursementAsync(string ReimbursementID)
		{
			var requestUri = "Reimbursements/"+ (ReimbursementID==null? "" : Uri.EscapeDataString(ReimbursementID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ReimbursementObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieve a single reimbursement by id
		/// GetReimbursement Reimbursements/{ReimbursementID}
		/// </summary>
		/// <param name="ReimbursementID">Identifier for the reimbursement</param>
		/// <returns>search results matching criteria</returns>
		public ReimbursementObject GetReimbursement(string ReimbursementID)
		{
			var requestUri = "Reimbursements/"+ (ReimbursementID==null? "" : Uri.EscapeDataString(ReimbursementID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ReimbursementObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches timesheets
		/// GetTimesheets Timesheets
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <param name="employeeId">By default get Timesheets will return the timesheets for all employees in an organization. You can add GET https://â€¦/timesheets?filter=employeeId=={EmployeeId} to get only the timesheets of a particular employee.</param>
		/// <param name="payrollCalendarId">By default get Timesheets will return all the timesheets for an organization. You can add GET https://â€¦/timesheets?filter=payrollCalendarId=={PayrollCalendarID} to filter the timesheets by payroll calendar id</param>
		/// <returns>search results matching criteria</returns>
		public async Task<Timesheets> GetTimesheetsAsync(int page, string employeeId, string payrollCalendarId)
		{
			var requestUri = "Timesheets?page="+page+"&employeeId=" + (employeeId==null? "" : Uri.EscapeDataString(employeeId))+"&payrollCalendarId=" + (payrollCalendarId==null? "" : Uri.EscapeDataString(payrollCalendarId));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Timesheets>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches timesheets
		/// GetTimesheets Timesheets
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <param name="employeeId">By default get Timesheets will return the timesheets for all employees in an organization. You can add GET https://â€¦/timesheets?filter=employeeId=={EmployeeId} to get only the timesheets of a particular employee.</param>
		/// <param name="payrollCalendarId">By default get Timesheets will return all the timesheets for an organization. You can add GET https://â€¦/timesheets?filter=payrollCalendarId=={PayrollCalendarID} to filter the timesheets by payroll calendar id</param>
		/// <returns>search results matching criteria</returns>
		public Timesheets GetTimesheets(int page, string employeeId, string payrollCalendarId)
		{
			var requestUri = "Timesheets?page="+page+"&employeeId=" + (employeeId==null? "" : Uri.EscapeDataString(employeeId))+"&payrollCalendarId=" + (payrollCalendarId==null? "" : Uri.EscapeDataString(payrollCalendarId));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Timesheets>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// create a new timesheet
		/// CreateTimesheet Timesheets
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public async Task<TimesheetObject> CreateTimesheetAsync(Timesheet requestBody)
		{
			var requestUri = "Timesheets";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TimesheetObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// create a new timesheet
		/// CreateTimesheet Timesheets
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public TimesheetObject CreateTimesheet(Timesheet requestBody)
		{
			var requestUri = "Timesheets";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TimesheetObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// retrieve a single timesheet by id
		/// GetTimesheet Timesheets/{TimesheetID}
		/// </summary>
		/// <param name="TimesheetID">Identifier for the timesheet</param>
		/// <returns>search results matching criteria</returns>
		public async Task<TimesheetObject> GetTimesheetAsync(string TimesheetID)
		{
			var requestUri = "Timesheets/"+ (TimesheetID==null? "" : Uri.EscapeDataString(TimesheetID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TimesheetObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieve a single timesheet by id
		/// GetTimesheet Timesheets/{TimesheetID}
		/// </summary>
		/// <param name="TimesheetID">Identifier for the timesheet</param>
		/// <returns>search results matching criteria</returns>
		public TimesheetObject GetTimesheet(string TimesheetID)
		{
			var requestUri = "Timesheets/"+ (TimesheetID==null? "" : Uri.EscapeDataString(TimesheetID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TimesheetObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// delete a timesheet
		/// DeleteTimesheet Timesheets/{TimesheetID}
		/// </summary>
		/// <param name="TimesheetID">Identifier for the timesheet</param>
		/// <returns>search results matching criteria</returns>
		public async Task<TimesheetLine> DeleteTimesheetAsync(string TimesheetID)
		{
			var requestUri = "Timesheets/"+ (TimesheetID==null? "" : Uri.EscapeDataString(TimesheetID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TimesheetLine>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// delete a timesheet
		/// DeleteTimesheet Timesheets/{TimesheetID}
		/// </summary>
		/// <param name="TimesheetID">Identifier for the timesheet</param>
		/// <returns>search results matching criteria</returns>
		public TimesheetLine DeleteTimesheet(string TimesheetID)
		{
			var requestUri = "Timesheets/"+ (TimesheetID==null? "" : Uri.EscapeDataString(TimesheetID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TimesheetLine>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// create a new timesheet line
		/// CreateTimesheetLine Timesheets/{TimesheetID}/Lines
		/// </summary>
		/// <param name="TimesheetID">Identifier for the timesheet</param>
		/// <returns>search results matching criteria</returns>
		public async Task<TimesheetLineObject> CreateTimesheetLineAsync(string TimesheetID, TimesheetLine requestBody)
		{
			var requestUri = "Timesheets/"+ (TimesheetID==null? "" : Uri.EscapeDataString(TimesheetID))+"/Lines";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TimesheetLineObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// create a new timesheet line
		/// CreateTimesheetLine Timesheets/{TimesheetID}/Lines
		/// </summary>
		/// <param name="TimesheetID">Identifier for the timesheet</param>
		/// <returns>search results matching criteria</returns>
		public TimesheetLineObject CreateTimesheetLine(string TimesheetID, TimesheetLine requestBody)
		{
			var requestUri = "Timesheets/"+ (TimesheetID==null? "" : Uri.EscapeDataString(TimesheetID))+"/Lines";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TimesheetLineObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// approve a timesheet
		/// ApproveTimesheet Timesheets/{TimesheetID}/Approve
		/// </summary>
		/// <param name="TimesheetID">Identifier for the timesheet</param>
		/// <returns>search results matching criteria</returns>
		public async Task<TimesheetObject> ApproveTimesheetAsync(string TimesheetID)
		{
			var requestUri = "Timesheets/"+ (TimesheetID==null? "" : Uri.EscapeDataString(TimesheetID))+"/Approve";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TimesheetObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// approve a timesheet
		/// ApproveTimesheet Timesheets/{TimesheetID}/Approve
		/// </summary>
		/// <param name="TimesheetID">Identifier for the timesheet</param>
		/// <returns>search results matching criteria</returns>
		public TimesheetObject ApproveTimesheet(string TimesheetID)
		{
			var requestUri = "Timesheets/"+ (TimesheetID==null? "" : Uri.EscapeDataString(TimesheetID))+"/Approve";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TimesheetObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// revert a timesheet to draft
		/// RevertTimesheet Timesheets/{TimesheetID}/RevertToDraft
		/// </summary>
		/// <param name="TimesheetID">Identifier for the timesheet</param>
		/// <returns>search results matching criteria</returns>
		public async Task<TimesheetObject> RevertTimesheetAsync(string TimesheetID)
		{
			var requestUri = "Timesheets/"+ (TimesheetID==null? "" : Uri.EscapeDataString(TimesheetID))+"/RevertToDraft";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TimesheetObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// revert a timesheet to draft
		/// RevertTimesheet Timesheets/{TimesheetID}/RevertToDraft
		/// </summary>
		/// <param name="TimesheetID">Identifier for the timesheet</param>
		/// <returns>search results matching criteria</returns>
		public TimesheetObject RevertTimesheet(string TimesheetID)
		{
			var requestUri = "Timesheets/"+ (TimesheetID==null? "" : Uri.EscapeDataString(TimesheetID))+"/RevertToDraft";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TimesheetObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// update a timesheet line
		/// UpdateTimesheetLine Timesheets/{TimesheetID}/Lines/{TimesheetLineID}
		/// </summary>
		/// <param name="TimesheetID">Identifier for the timesheet</param>
		/// <param name="TimesheetLineID">Identifier for the timesheet line</param>
		/// <returns>search results matching criteria</returns>
		public async Task<TimesheetLineObject> UpdateTimesheetLineAsync(string TimesheetID, string TimesheetLineID, TimesheetLine requestBody)
		{
			var requestUri = "Timesheets/"+ (TimesheetID==null? "" : Uri.EscapeDataString(TimesheetID))+"/Lines/"+ (TimesheetLineID==null? "" : Uri.EscapeDataString(TimesheetLineID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TimesheetLineObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// update a timesheet line
		/// UpdateTimesheetLine Timesheets/{TimesheetID}/Lines/{TimesheetLineID}
		/// </summary>
		/// <param name="TimesheetID">Identifier for the timesheet</param>
		/// <param name="TimesheetLineID">Identifier for the timesheet line</param>
		/// <returns>search results matching criteria</returns>
		public TimesheetLineObject UpdateTimesheetLine(string TimesheetID, string TimesheetLineID, TimesheetLine requestBody)
		{
			var requestUri = "Timesheets/"+ (TimesheetID==null? "" : Uri.EscapeDataString(TimesheetID))+"/Lines/"+ (TimesheetLineID==null? "" : Uri.EscapeDataString(TimesheetLineID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TimesheetLineObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// delete a timesheet line
		/// DeleteTimesheetLine Timesheets/{TimesheetID}/Lines/{TimesheetLineID}
		/// </summary>
		/// <param name="TimesheetID">Identifier for the timesheet</param>
		/// <param name="TimesheetLineID">Identifier for the timesheet line</param>
		/// <returns>search results matching criteria</returns>
		public async Task<TimesheetLine> DeleteTimesheetLineAsync(string TimesheetID, string TimesheetLineID)
		{
			var requestUri = "Timesheets/"+ (TimesheetID==null? "" : Uri.EscapeDataString(TimesheetID))+"/Lines/"+ (TimesheetLineID==null? "" : Uri.EscapeDataString(TimesheetLineID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TimesheetLine>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// delete a timesheet line
		/// DeleteTimesheetLine Timesheets/{TimesheetID}/Lines/{TimesheetLineID}
		/// </summary>
		/// <param name="TimesheetID">Identifier for the timesheet</param>
		/// <param name="TimesheetLineID">Identifier for the timesheet line</param>
		/// <returns>search results matching criteria</returns>
		public TimesheetLine DeleteTimesheetLine(string TimesheetID, string TimesheetLineID)
		{
			var requestUri = "Timesheets/"+ (TimesheetID==null? "" : Uri.EscapeDataString(TimesheetID))+"/Lines/"+ (TimesheetLineID==null? "" : Uri.EscapeDataString(TimesheetLineID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TimesheetLine>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches payrun calendars
		/// GetPayRunCalendars PayRunCalendars
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <returns>search results matching criteria</returns>
		public async Task<PayRunCalendars> GetPayRunCalendarsAsync(int page)
		{
			var requestUri = "PayRunCalendars?page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PayRunCalendars>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches payrun calendars
		/// GetPayRunCalendars PayRunCalendars
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <returns>search results matching criteria</returns>
		public PayRunCalendars GetPayRunCalendars(int page)
		{
			var requestUri = "PayRunCalendars?page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PayRunCalendars>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// create a new payrun calendar
		/// CreatePayRunCalendar PayRunCalendars
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public async Task<PayRunCalendarObject> CreatePayRunCalendarAsync(PayRunCalendar requestBody)
		{
			var requestUri = "PayRunCalendars";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PayRunCalendarObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// create a new payrun calendar
		/// CreatePayRunCalendar PayRunCalendars
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public PayRunCalendarObject CreatePayRunCalendar(PayRunCalendar requestBody)
		{
			var requestUri = "PayRunCalendars";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PayRunCalendarObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// retrieve a single payrun calendar by id
		/// GetPayRunCalendar PayRunCalendars/{PayRunCalendarID}
		/// </summary>
		/// <param name="PayRunCalendarID">Identifier for the payrun calendars</param>
		/// <returns>search results matching criteria</returns>
		public async Task<PayRunCalendarObject> GetPayRunCalendarAsync(string PayRunCalendarID)
		{
			var requestUri = "PayRunCalendars/"+ (PayRunCalendarID==null? "" : Uri.EscapeDataString(PayRunCalendarID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PayRunCalendarObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieve a single payrun calendar by id
		/// GetPayRunCalendar PayRunCalendars/{PayRunCalendarID}
		/// </summary>
		/// <param name="PayRunCalendarID">Identifier for the payrun calendars</param>
		/// <returns>search results matching criteria</returns>
		public PayRunCalendarObject GetPayRunCalendar(string PayRunCalendarID)
		{
			var requestUri = "PayRunCalendars/"+ (PayRunCalendarID==null? "" : Uri.EscapeDataString(PayRunCalendarID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PayRunCalendarObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieves an employee's salary and wages
		/// GetEmployeeSalaryAndWages Employees/{EmployeeId}/SalaryAndWages
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <returns>search results matching criteria</returns>
		public async Task<SalaryAndWages> GetEmployeeSalaryAndWagesAsync(string EmployeeId, int page)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/SalaryAndWages&page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SalaryAndWages>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieves an employee's salary and wages
		/// GetEmployeeSalaryAndWages Employees/{EmployeeId}/SalaryAndWages
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <returns>search results matching criteria</returns>
		public SalaryAndWages GetEmployeeSalaryAndWages(string EmployeeId, int page)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/SalaryAndWages&page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SalaryAndWages>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creates employee salary and wage record
		/// CreateEmployeeSalaryAndWage Employees/{EmployeeId}/SalaryAndWages
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<SalaryAndWageObject> CreateEmployeeSalaryAndWageAsync(string EmployeeId, SalaryAndWage requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/SalaryAndWages";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SalaryAndWageObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// creates employee salary and wage record
		/// CreateEmployeeSalaryAndWage Employees/{EmployeeId}/SalaryAndWages
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public SalaryAndWageObject CreateEmployeeSalaryAndWage(string EmployeeId, SalaryAndWage requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/SalaryAndWages";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SalaryAndWageObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// get employee salary and wages record by id
		/// GetEmployeeSalaryAndWage Employees/{EmployeeId}/SalaryAndWages/{SalaryAndWagesID}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="SalaryAndWagesID">Id for single pay template earnings object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<SalaryAndWages> GetEmployeeSalaryAndWageAsync(string EmployeeId, string SalaryAndWagesID)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/SalaryAndWages/"+ (SalaryAndWagesID==null? "" : Uri.EscapeDataString(SalaryAndWagesID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SalaryAndWages>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// get employee salary and wages record by id
		/// GetEmployeeSalaryAndWage Employees/{EmployeeId}/SalaryAndWages/{SalaryAndWagesID}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="SalaryAndWagesID">Id for single pay template earnings object</param>
		/// <returns>search results matching criteria</returns>
		public SalaryAndWages GetEmployeeSalaryAndWage(string EmployeeId, string SalaryAndWagesID)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/SalaryAndWages/"+ (SalaryAndWagesID==null? "" : Uri.EscapeDataString(SalaryAndWagesID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SalaryAndWages>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// updates employee salary and wages record
		/// UpdateEmployeeSalaryAndWage Employees/{EmployeeId}/SalaryAndWages/{SalaryAndWagesID}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="SalaryAndWagesID">Id for single pay template earnings object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<SalaryAndWageObject> UpdateEmployeeSalaryAndWageAsync(string EmployeeId, string SalaryAndWagesID, SalaryAndWage requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/SalaryAndWages/"+ (SalaryAndWagesID==null? "" : Uri.EscapeDataString(SalaryAndWagesID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SalaryAndWageObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// updates employee salary and wages record
		/// UpdateEmployeeSalaryAndWage Employees/{EmployeeId}/SalaryAndWages/{SalaryAndWagesID}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="SalaryAndWagesID">Id for single pay template earnings object</param>
		/// <returns>search results matching criteria</returns>
		public SalaryAndWageObject UpdateEmployeeSalaryAndWage(string EmployeeId, string SalaryAndWagesID, SalaryAndWage requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/SalaryAndWages/"+ (SalaryAndWagesID==null? "" : Uri.EscapeDataString(SalaryAndWagesID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SalaryAndWageObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// deletes an employee salary and wages record
		/// DeleteEmployeeSalaryAndWage Employees/{EmployeeId}/SalaryAndWages/{SalaryAndWagesID}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="SalaryAndWagesID">Id for single salary and wages object</param>
		/// <returns>deletion successful</returns>
		public async Task DeleteEmployeeSalaryAndWageAsync(string EmployeeId, string SalaryAndWagesID)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/SalaryAndWages/"+ (SalaryAndWagesID==null? "" : Uri.EscapeDataString(SalaryAndWagesID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// deletes an employee salary and wages record
		/// DeleteEmployeeSalaryAndWage Employees/{EmployeeId}/SalaryAndWages/{SalaryAndWagesID}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <param name="SalaryAndWagesID">Id for single salary and wages object</param>
		/// <returns>deletion successful</returns>
		public void DeleteEmployeeSalaryAndWage(string EmployeeId, string SalaryAndWagesID)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId))+"/SalaryAndWages/"+ (SalaryAndWagesID==null? "" : Uri.EscapeDataString(SalaryAndWagesID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches pay runs
		/// GetPayRuns PayRuns
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <param name="status">By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu={PayRunStatus} to filter the payruns by status.</param>
		/// <returns>search results matching criteria</returns>
		public async Task<PayRuns> GetPayRunsAsync(int page, PayRunPayRunStatus status)
		{
			var requestUri = "PayRuns?page="+page+"&status=" + status;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PayRuns>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches pay runs
		/// GetPayRuns PayRuns
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <param name="status">By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu={PayRunStatus} to filter the payruns by status.</param>
		/// <returns>search results matching criteria</returns>
		public PayRuns GetPayRuns(int page, PayRunPayRunStatus status)
		{
			var requestUri = "PayRuns?page="+page+"&status=" + status;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PayRuns>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieve a single pay run by id
		/// GetPayRun PayRuns/{PayRunID}
		/// </summary>
		/// <param name="PayRunID">Identifier for the pay run</param>
		/// <returns>search results matching criteria</returns>
		public async Task<PayRunObject> GetPayRunAsync(string PayRunID)
		{
			var requestUri = "PayRuns/"+ (PayRunID==null? "" : Uri.EscapeDataString(PayRunID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PayRunObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieve a single pay run by id
		/// GetPayRun PayRuns/{PayRunID}
		/// </summary>
		/// <param name="PayRunID">Identifier for the pay run</param>
		/// <returns>search results matching criteria</returns>
		public PayRunObject GetPayRun(string PayRunID)
		{
			var requestUri = "PayRuns/"+ (PayRunID==null? "" : Uri.EscapeDataString(PayRunID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PayRunObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// update a pay run
		/// UpdatePayRun PayRuns/{PayRunID}
		/// </summary>
		/// <param name="PayRunID">Identifier for the pay run</param>
		/// <returns>search results matching criteria</returns>
		public async Task<PayRunObject> UpdatePayRunAsync(string PayRunID, PayRun requestBody)
		{
			var requestUri = "PayRuns/"+ (PayRunID==null? "" : Uri.EscapeDataString(PayRunID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PayRunObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// update a pay run
		/// UpdatePayRun PayRuns/{PayRunID}
		/// </summary>
		/// <param name="PayRunID">Identifier for the pay run</param>
		/// <returns>search results matching criteria</returns>
		public PayRunObject UpdatePayRun(string PayRunID, PayRun requestBody)
		{
			var requestUri = "PayRuns/"+ (PayRunID==null? "" : Uri.EscapeDataString(PayRunID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PayRunObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// searches payslips
		/// GetPayslips Payslips
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <param name="PayRunID">PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun.</param>
		/// <returns>search results matching criteria</returns>
		public async Task<Payslips> GetPayslipsAsync(int page, string PayRunID)
		{
			var requestUri = "Payslips?page="+page+"&PayRunID=" + (PayRunID==null? "" : Uri.EscapeDataString(PayRunID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Payslips>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches payslips
		/// GetPayslips Payslips
		/// </summary>
		/// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.</param>
		/// <param name="PayRunID">PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun.</param>
		/// <returns>search results matching criteria</returns>
		public Payslips GetPayslips(int page, string PayRunID)
		{
			var requestUri = "Payslips?page="+page+"&PayRunID=" + (PayRunID==null? "" : Uri.EscapeDataString(PayRunID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Payslips>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieve a single payslip by id
		/// GetPaySlip Payslips/{PayslipID}
		/// </summary>
		/// <param name="PayslipID">Identifier for the payslip</param>
		/// <returns>search results matching criteria</returns>
		public async Task<PayslipObject> GetPaySlipAsync(string PayslipID)
		{
			var requestUri = "Payslips/"+ (PayslipID==null? "" : Uri.EscapeDataString(PayslipID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PayslipObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieve a single payslip by id
		/// GetPaySlip Payslips/{PayslipID}
		/// </summary>
		/// <param name="PayslipID">Identifier for the payslip</param>
		/// <returns>search results matching criteria</returns>
		public PayslipObject GetPaySlip(string PayslipID)
		{
			var requestUri = "Payslips/"+ (PayslipID==null? "" : Uri.EscapeDataString(PayslipID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PayslipObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches settings
		/// GetSettings Settings
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public async Task<Settings> GetSettingsAsync()
		{
			var requestUri = "Settings";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Settings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches settings
		/// GetSettings Settings
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public Settings GetSettings()
		{
			var requestUri = "Settings";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Settings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches tracking categories
		/// GetTrackingCategories settings/trackingCategories
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public async Task<TrackingCategories> GetTrackingCategoriesAsync()
		{
			var requestUri = "settings/trackingCategories";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TrackingCategories>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches tracking categories
		/// GetTrackingCategories settings/trackingCategories
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public TrackingCategories GetTrackingCategories()
		{
			var requestUri = "settings/trackingCategories";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TrackingCategories>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
