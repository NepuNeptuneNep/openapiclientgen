//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	
	
	/// <summary>
	/// A representation of a cat
	/// </summary>
	public class Cat : Pet
	{
		
		/// <summary>
		/// The measured skill for hunting
		/// </summary>
		[System.ComponentModel.DefaultValue(CatHuntingSkill.lazy)]
		[System.ComponentModel.DataAnnotations.Required()]
		public CatHuntingSkill HuntingSkill { get; set; }
	}
	
	public enum CatHuntingSkill
	{
		
		clueless = 0,
		
		lazy = 1,
		
		adventurous = 2,
		
		aggressive = 3,
	}
	
	public class Category
	{
		
		/// <summary>
		/// Category ID
		/// </summary>
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Category name
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Test Sub Category
		/// </summary>
		public CategorySub Sub { get; set; }
	}
	
	public class CategorySub
	{
		
		/// <summary>
		/// Dumb Property
		/// </summary>
		public string Prop1 { get; set; }
	}
	
	/// <summary>
	/// A representation of a dog
	/// </summary>
	public class Dog : Pet
	{
		
		/// <summary>
		/// The size of the pack the dog is from
		/// </summary>
		[System.ComponentModel.DefaultValue(1)]
		[System.ComponentModel.DataAnnotations.Required()]
		public int PackSize { get; set; }
	}
	
	/// <summary>
	/// A representation of a honey bee
	/// </summary>
	public class HoneyBee : Pet
	{
		
		/// <summary>
		/// Average amount of honey produced per day in ounces
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public double HoneyPerDay { get; set; }
	}
	
	public class Pet
	{
		
		/// <summary>
		/// Pet ID
		/// </summary>
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Categories this pet belongs to
		/// </summary>
		public Category Category { get; set; }
		
		/// <summary>
		/// The name given to a pet
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Name { get; set; }
		
		/// <summary>
		/// The list of URL to a cute photos featuring pet
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string[] PhotoUrls { get; set; }
		
		public Pet Friend { get; set; }
		
		/// <summary>
		/// Tags attached to the pet
		/// </summary>
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Pet status in the store
		/// </summary>
		public System.Nullable<PetStatus> Status { get; set; }
		
		/// <summary>
		/// Type of a pet
		/// </summary>
		public string PetType { get; set; }
	}
	
	public class Tag
	{
		
		/// <summary>
		/// Tag ID
		/// </summary>
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Tag name
		/// </summary>
		public string Name { get; set; }
	}
	
	public enum PetStatus
	{
		
		available = 0,
		
		pending = 1,
		
		sold = 2,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Finds Pets by status
		/// Multiple status values can be provided with comma separated strings
		/// FindPetsByStatus pet/findByStatus
		/// </summary>
		/// <param name="status">Status values that need to be considered for filter</param>
		/// <returns>successful operation</returns>
		public async Task<Pet[]> FindPetsByStatusAsync(PetStatus[] status)
		{
			var requestUri = "pet/findByStatus?"+string.Join("&", status.Select(z => $"status={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Pet[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Finds Pets by status
		/// Multiple status values can be provided with comma separated strings
		/// FindPetsByStatus pet/findByStatus
		/// </summary>
		/// <param name="status">Status values that need to be considered for filter</param>
		/// <returns>successful operation</returns>
		public Pet[] FindPetsByStatus(PetStatus[] status)
		{
			var requestUri = "pet/findByStatus?"+string.Join("&", status.Select(z => $"status={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Pet[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Finds Pets by status
		/// Multiple status values can be provided with comma separated strings
		/// FindPetsByStatus2 pet/findByStatus2
		/// </summary>
		/// <param name="status">Status values that need to be considered for filter</param>
		/// <returns>successful operation</returns>
		public async Task<Pet[]> FindPetsByStatus2Async(PetStatus status)
		{
			var requestUri = "pet/findByStatus2?status=" + status;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Pet[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Finds Pets by status
		/// Multiple status values can be provided with comma separated strings
		/// FindPetsByStatus2 pet/findByStatus2
		/// </summary>
		/// <param name="status">Status values that need to be considered for filter</param>
		/// <returns>successful operation</returns>
		public Pet[] FindPetsByStatus2(PetStatus status)
		{
			var requestUri = "pet/findByStatus2?status=" + status;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Pet[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Finds Pets by status
		/// Multiple status values can be provided with comma separated strings
		/// FindPetsByStatus3 pet/findByStatus3
		/// </summary>
		/// <param name="status">Status values that need to be considered for filter</param>
		/// <returns>successful operation</returns>
		public async Task<Pet[]> FindPetsByStatus3Async(PetStatus status)
		{
			var requestUri = "pet/findByStatus3?status=" + status;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Pet[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Finds Pets by status
		/// Multiple status values can be provided with comma separated strings
		/// FindPetsByStatus3 pet/findByStatus3
		/// </summary>
		/// <param name="status">Status values that need to be considered for filter</param>
		/// <returns>successful operation</returns>
		public Pet[] FindPetsByStatus3(PetStatus status)
		{
			var requestUri = "pet/findByStatus3?status=" + status;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Pet[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns metadata about your backup jobs.
		/// ListBackupJobs backup-jobs/
		/// </summary>
		/// <param name="nextToken">The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</param>
		/// <param name="maxResults">The maximum number of items to be returned.</param>
		/// <param name="resourceArn">Returns only backup jobs that match the specified resource Amazon Resource Name (ARN).</param>
		/// <param name="state">Returns only backup jobs that are in the specified state.</param>
		/// <param name="backupVaultName">Returns only backup jobs that will be stored in the specified backup vault. Backup vaults are identified by names that are unique to the account used to create them and the AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.</param>
		/// <param name="createdBefore">Returns only backup jobs that were created before the specified date.</param>
		/// <param name="createdAfter">Returns only backup jobs that were created after the specified date.</param>
		/// <param name="resourceType"><p>Returns only backup jobs for the specified resources:</p> <ul> <li> <p> <code>DynamoDB</code> for Amazon DynamoDB</p> </li> <li> <p> <code>EBS</code> for Amazon Elastic Block Store</p> </li> <li> <p> <code>EFS</code> for Amazon Elastic File System</p> </li> <li> <p> <code>RDS</code> for Amazon Relational Database Service</p> </li> <li> <p> <code>Storage Gateway</code> for AWS Storage Gateway</p> </li> </ul></param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<Pet> ListBackupJobsAsync(string nextToken, int maxResults, string resourceArn, ListBackupJobsState state, string backupVaultName, System.DateTimeOffset createdBefore, System.DateTimeOffset createdAfter, string resourceType, string MaxResults, string NextToken)
		{
			var requestUri = "backup-jobs/?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&resourceArn=" + (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"&state=" + state+"&backupVaultName=" + (backupVaultName==null? "" : System.Uri.EscapeDataString(backupVaultName))+"&createdBefore=" + createdBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAfter=" + createdAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&resourceType=" + (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Pet>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns metadata about your backup jobs.
		/// ListBackupJobs backup-jobs/
		/// </summary>
		/// <param name="nextToken">The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</param>
		/// <param name="maxResults">The maximum number of items to be returned.</param>
		/// <param name="resourceArn">Returns only backup jobs that match the specified resource Amazon Resource Name (ARN).</param>
		/// <param name="state">Returns only backup jobs that are in the specified state.</param>
		/// <param name="backupVaultName">Returns only backup jobs that will be stored in the specified backup vault. Backup vaults are identified by names that are unique to the account used to create them and the AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.</param>
		/// <param name="createdBefore">Returns only backup jobs that were created before the specified date.</param>
		/// <param name="createdAfter">Returns only backup jobs that were created after the specified date.</param>
		/// <param name="resourceType"><p>Returns only backup jobs for the specified resources:</p> <ul> <li> <p> <code>DynamoDB</code> for Amazon DynamoDB</p> </li> <li> <p> <code>EBS</code> for Amazon Elastic Block Store</p> </li> <li> <p> <code>EFS</code> for Amazon Elastic File System</p> </li> <li> <p> <code>RDS</code> for Amazon Relational Database Service</p> </li> <li> <p> <code>Storage Gateway</code> for AWS Storage Gateway</p> </li> </ul></param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public Pet ListBackupJobs(string nextToken, int maxResults, string resourceArn, ListBackupJobsState state, string backupVaultName, System.DateTimeOffset createdBefore, System.DateTimeOffset createdAfter, string resourceType, string MaxResults, string NextToken)
		{
			var requestUri = "backup-jobs/?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&resourceArn=" + (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"&state=" + state+"&backupVaultName=" + (backupVaultName==null? "" : System.Uri.EscapeDataString(backupVaultName))+"&createdBefore=" + createdBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAfter=" + createdAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&resourceType=" + (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Pet>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum ListBackupJobsState
	{
		
		CREATED = 0,
		
		PENDING = 1,
		
		RUNNING = 2,
		
		ABORTING = 3,
		
		ABORTED = 4,
		
		COMPLETED = 5,
		
		FAILED = 6,
		
		EXPIRED = 7,
	}
}
