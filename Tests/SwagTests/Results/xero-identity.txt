//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public class Connection
	{
		
		/// <summary>
		/// Xero identifier
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Xero identifier of organisation
		/// </summary>
		public string TenantId { get; set; }
		
		/// <summary>
		/// Identifier shared across connections authorised at the same time
		/// </summary>
		public string AuthEventId { get; set; }
		
		/// <summary>
		/// Xero tenant type (i.e. ORGANISATION, PRACTICE)
		/// </summary>
		public string TenantType { get; set; }
		
		/// <summary>
		/// Xero tenant name
		/// </summary>
		public string TenantName { get; set; }
		
		/// <summary>
		/// The date when the user connected this tenant to your app
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDateUtc { get; set; }
		
		/// <summary>
		/// The date when the user most recently connected this tenant to your app. May differ to the created date if the user has disconnected and subsequently reconnected this tenant to your app.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUtc { get; set; }
	}
	
	public class RefreshToken
	{
		
		/// <summary>
		/// Xero grant type
		/// </summary>
		public string Grant_type { get; set; }
		
		/// <summary>
		/// refresh token provided during authentication flow
		/// </summary>
		public string Refresh_token { get; set; }
		
		/// <summary>
		/// client id for Xero app
		/// </summary>
		public string Client_id { get; set; }
		
		/// <summary>
		/// client secret for Xero app 2
		/// </summary>
		public string Client_secret { get; set; }
	}
	
	public class AccessToken
	{
		
		/// <summary>
		/// Xero unique identifier
		/// </summary>
		public string Id_token { get; set; }
		
		/// <summary>
		/// access token provided during authentication flow
		/// </summary>
		public string Access_token { get; set; }
		
		/// <summary>
		/// time in milliseconds until access token expires.
		/// </summary>
		public string Expires_in { get; set; }
		
		/// <summary>
		/// type of token i.e. Bearer
		/// </summary>
		public string Token_type { get; set; }
		
		/// <summary>
		/// token used to refresh an expired access token
		/// </summary>
		public string Refresh_token { get; set; }
	}
	
	public partial class MyClient
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public MyClient(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Allows you to retrieve the connections for this user
		/// Override the base server url that include version
		/// GetConnections connections
		/// </summary>
		/// <param name="authEventId">Filter by authEventId</param>
		/// <returns>Success - return response of type Connections array with 0 to n Connection</returns>
		public async Task<Connection[]> GetConnectionsAsync(string authEventId)
		{
			var requestUri = "connections?authEventId=" + (authEventId==null? "" : System.Uri.EscapeDataString(authEventId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Connection[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve the connections for this user
		/// Override the base server url that include version
		/// GetConnections connections
		/// </summary>
		/// <param name="authEventId">Filter by authEventId</param>
		/// <returns>Success - return response of type Connections array with 0 to n Connection</returns>
		public Connection[] GetConnections(string authEventId)
		{
			var requestUri = "connections?authEventId=" + (authEventId==null? "" : System.Uri.EscapeDataString(authEventId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Connection[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to delete a connection for this user (i.e. disconnect a tenant)
		/// Override the base server url that include version
		/// DeleteConnection connections/{id}
		/// </summary>
		/// <param name="id">Unique identifier for retrieving single object</param>
		public async Task DeleteConnectionAsync(string id)
		{
			var requestUri = "connections/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to delete a connection for this user (i.e. disconnect a tenant)
		/// Override the base server url that include version
		/// DeleteConnection connections/{id}
		/// </summary>
		/// <param name="id">Unique identifier for retrieving single object</param>
		public void DeleteConnection(string id)
		{
			var requestUri = "connections/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
