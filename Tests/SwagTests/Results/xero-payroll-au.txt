//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public class Employees
	{
		
		public Employee[] Employees1 { get; set; }
	}
	
	public class Employee
	{
		
		/// <summary>
		/// First name of employee
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Last name of employee
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string LastName { get; set; }
		
		/// <summary>
		/// Date of birth of the employee (YYYY-MM-DD)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string DateOfBirth { get; set; }
		
		public HomeAddress HomeAddress { get; set; }
		
		/// <summary>
		/// Start date for an employee (YYYY-MM-DD)
		/// </summary>
		public string StartDate { get; set; }
		
		/// <summary>
		/// Title of the employee
		/// </summary>
		public string Title { get; set; }
		
		/// <summary>
		/// Middle name(s) of the employee
		/// </summary>
		public string MiddleNames { get; set; }
		
		/// <summary>
		/// The email address for the employee
		/// </summary>
		public string Email { get; set; }
		
		/// <summary>
		/// The employee’s gender. See Employee Gender
		/// </summary>
		public System.Nullable<EmployeeGender> Gender { get; set; }
		
		/// <summary>
		/// Employee phone number
		/// </summary>
		public string Phone { get; set; }
		
		/// <summary>
		/// Employee mobile number
		/// </summary>
		public string Mobile { get; set; }
		
		/// <summary>
		/// Employee’s twitter name
		/// </summary>
		public string TwitterUserName { get; set; }
		
		/// <summary>
		/// Authorised to approve other employees' leave requests
		/// </summary>
		public System.Nullable<System.Boolean> IsAuthorisedToApproveLeave { get; set; }
		
		/// <summary>
		/// Authorised to approve timesheets
		/// </summary>
		public System.Nullable<System.Boolean> IsAuthorisedToApproveTimesheets { get; set; }
		
		/// <summary>
		/// JobTitle of the employee
		/// </summary>
		public string JobTitle { get; set; }
		
		/// <summary>
		/// Employees classification
		/// </summary>
		public string Classification { get; set; }
		
		/// <summary>
		/// Xero unique identifier for earnings rate
		/// </summary>
		public string OrdinaryEarningsRateID { get; set; }
		
		/// <summary>
		/// Xero unique identifier for payroll calendar for the employee
		/// </summary>
		public string PayrollCalendarID { get; set; }
		
		/// <summary>
		/// The Employee Group allows you to report on payroll expenses and liabilities for each group of employees
		/// </summary>
		public string EmployeeGroupName { get; set; }
		
		/// <summary>
		/// Xero unique identifier for an Employee
		/// </summary>
		public string EmployeeID { get; set; }
		
		/// <summary>
		/// Employee Termination Date (YYYY-MM-DD)
		/// </summary>
		public string TerminationDate { get; set; }
		
		public BankAccount[] BankAccounts { get; set; }
		
		public PayTemplate PayTemplate { get; set; }
		
		public OpeningBalances OpeningBalances { get; set; }
		
		public TaxDeclaration TaxDeclaration { get; set; }
		
		public LeaveBalance[] LeaveBalances { get; set; }
		
		public LeaveLine[] LeaveLines { get; set; }
		
		public SuperMembership[] SuperMemberships { get; set; }
		
		/// <summary>
		/// Employee Status Types
		/// </summary>
		public System.Nullable<EmployeeStatus> Status { get; set; }
		
		/// <summary>
		/// Last modified timestamp
		/// </summary>
		public string UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// Displays array of validation error messages from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
	}
	
	public class HomeAddress
	{
		
		/// <summary>
		/// Address line 1 for employee home address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string AddressLine1 { get; set; }
		
		/// <summary>
		/// Address line 2 for employee home address
		/// </summary>
		public string AddressLine2 { get; set; }
		
		/// <summary>
		/// Suburb for employee home address
		/// </summary>
		public string City { get; set; }
		
		/// <summary>
		/// State abbreviation for employee home address
		/// </summary>
		public System.Nullable<HomeAddressRegion> Region { get; set; }
		
		/// <summary>
		/// PostCode for employee home address
		/// </summary>
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Country of HomeAddress
		/// </summary>
		public string Country { get; set; }
	}
	
	public enum HomeAddressRegion
	{
		
		ACT = 0,
		
		NSW = 1,
		
		NT = 2,
		
		QLD = 3,
		
		SA = 4,
		
		TAS = 5,
		
		VIC = 6,
		
		WA = 7,
	}
	
	public enum EmployeeGender
	{
		
		N = 0,
		
		M = 1,
		
		F = 2,
		
		I = 3,
	}
	
	public class BankAccount
	{
		
		/// <summary>
		/// The text that will appear on your employee's bank statement when they receive payment
		/// </summary>
		public string StatementText { get; set; }
		
		/// <summary>
		/// The name of the account
		/// </summary>
		public string AccountName { get; set; }
		
		/// <summary>
		/// The BSB number of the account
		/// </summary>
		public string BSB { get; set; }
		
		/// <summary>
		/// The account number
		/// </summary>
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// If this account is the Remaining bank account
		/// </summary>
		public System.Nullable<System.Boolean> Remainder { get; set; }
		
		/// <summary>
		/// Fixed amounts (for example, if an employee wants to have $100 of their salary transferred to one account, and the remaining amount to another)
		/// </summary>
		public System.Nullable<System.Double> Amount { get; set; }
	}
	
	public class PayTemplate
	{
		
		public EarningsLine[] EarningsLines { get; set; }
		
		public DeductionLine[] DeductionLines { get; set; }
		
		public SuperLine[] SuperLines { get; set; }
		
		public ReimbursementLine[] ReimbursementLines { get; set; }
		
		public LeaveLine[] LeaveLines { get; set; }
	}
	
	public class EarningsLine
	{
		
		/// <summary>
		/// Xero unique id for earnings rate
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string EarningsRateID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public EarningsLineCalculationType CalculationType { get; set; }
		
		/// <summary>
		/// Annual salary for earnings line
		/// </summary>
		public System.Nullable<System.Double> AnnualSalary { get; set; }
		
		/// <summary>
		/// number of units for earning line
		/// </summary>
		public System.Nullable<System.Double> NumberOfUnitsPerWeek { get; set; }
		
		/// <summary>
		/// Rate per unit of the EarningsLine.
		/// </summary>
		public System.Nullable<System.Double> RatePerUnit { get; set; }
		
		/// <summary>
		/// Normal number of units for EarningsLine. Applicable when RateType is "MULTIPLE"
		/// </summary>
		public System.Nullable<System.Double> NormalNumberOfUnits { get; set; }
		
		/// <summary>
		/// Earnings rate amount
		/// </summary>
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Earnings rate number of units.
		/// </summary>
		public System.Nullable<System.Double> NumberOfUnits { get; set; }
		
		/// <summary>
		/// Earnings rate amount. Only applicable if the EarningsRate RateType is Fixed
		/// </summary>
		public System.Nullable<System.Double> FixedAmount { get; set; }
	}
	
	public enum EarningsLineCalculationType
	{
		
		USEEARNINGSRATE = 0,
		
		ENTEREARNINGSRATE = 1,
		
		ANNUALSALARY = 2,
	}
	
	public class DeductionLine
	{
		
		/// <summary>
		/// Xero deduction type identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string DeductionTypeID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public DeductionLineCalculationType CalculationType { get; set; }
		
		/// <summary>
		/// Deduction type amount
		/// </summary>
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// The Percentage of the Deduction
		/// </summary>
		public System.Nullable<System.Double> Percentage { get; set; }
		
		/// <summary>
		/// Deduction number of units
		/// </summary>
		public System.Nullable<System.Double> NumberOfUnits { get; set; }
	}
	
	public enum DeductionLineCalculationType
	{
		
		FIXEDAMOUNT = 0,
		
		PRETAX = 1,
		
		POSTTAX = 2,
	}
	
	public class SuperLine
	{
		
		/// <summary>
		/// Xero super membership ID
		/// </summary>
		public string SuperMembershipID { get; set; }
		
		public System.Nullable<SuperLineContributionType> ContributionType { get; set; }
		
		public System.Nullable<SuperLineCalculationType> CalculationType { get; set; }
		
		/// <summary>
		/// amount of mimimum earnings
		/// </summary>
		public System.Nullable<System.Double> MinimumMonthlyEarnings { get; set; }
		
		/// <summary>
		/// expense account code
		/// </summary>
		public string ExpenseAccountCode { get; set; }
		
		/// <summary>
		/// liabilty account code
		/// </summary>
		public string LiabilityAccountCode { get; set; }
		
		/// <summary>
		/// percentage for super line
		/// </summary>
		public System.Nullable<System.Double> Percentage { get; set; }
		
		/// <summary>
		/// Super membership amount
		/// </summary>
		public System.Nullable<System.Double> Amount { get; set; }
	}
	
	public enum SuperLineContributionType
	{
		
		SGC = 0,
		
		SALARYSACRIFICE = 1,
		
		EMPLOYERADDITIONAL = 2,
		
		EMPLOYEE = 3,
	}
	
	public enum SuperLineCalculationType
	{
		
		FIXEDAMOUNT = 0,
		
		PERCENTAGEOFEARNINGS = 1,
		
		STATUTORY = 2,
	}
	
	public class ReimbursementLine
	{
		
		/// <summary>
		/// Xero reimbursement type identifier
		/// </summary>
		public string ReimbursementTypeID { get; set; }
		
		/// <summary>
		/// Reimbursement type amount
		/// </summary>
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Reimbursement lines description (max length 50)
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(50)]
		public string Description { get; set; }
		
		/// <summary>
		/// Reimbursement expense account. For posted pay run you should be able to see expense account code.
		/// </summary>
		public string ExpenseAccount { get; set; }
	}
	
	public class LeaveLine
	{
		
		/// <summary>
		/// Xero leave type identifier
		/// </summary>
		public string LeaveTypeID { get; set; }
		
		/// <summary>
		/// Calculation type for leave line for Opening Balance on Employee
		/// </summary>
		public System.Nullable<LeaveLineCalculationType> CalculationType { get; set; }
		
		public System.Nullable<LeaveLineEntitlementFinalPayPayoutType> EntitlementFinalPayPayoutType { get; set; }
		
		public System.Nullable<LeaveLineEmploymentTerminationPaymentType> EmploymentTerminationPaymentType { get; set; }
		
		/// <summary>
		/// amount of leave line
		/// </summary>
		public System.Nullable<System.Boolean> IncludeSuperannuationGuaranteeContribution { get; set; }
		
		/// <summary>
		/// Leave number of units
		/// </summary>
		public System.Nullable<System.Double> NumberOfUnits { get; set; }
	}
	
	public enum LeaveLineCalculationType
	{
		
		NOCALCULATIONREQUIRED = 0,
		
		FIXEDAMOUNTEACHPERIOD = 1,
		
		ENTERRATEINPAYTEMPLATE = 2,
		
		BASEDONORDINARYEARNINGS = 3,
		
		_ = 4,
	}
	
	public enum LeaveLineEntitlementFinalPayPayoutType
	{
		
		NOTPAIDOUT = 0,
		
		PAIDOUT = 1,
	}
	
	public enum LeaveLineEmploymentTerminationPaymentType
	{
		
		O = 0,
		
		R = 1,
	}
	
	public class OpeningBalances
	{
		
		/// <summary>
		/// Opening Balance Date. (YYYY-MM-DD)
		/// </summary>
		public string OpeningBalanceDate { get; set; }
		
		/// <summary>
		/// Opening Balance tax
		/// </summary>
		public string Tax { get; set; }
		
		public EarningsLine[] EarningsLines { get; set; }
		
		public DeductionLine[] DeductionLines { get; set; }
		
		public SuperLine[] SuperLines { get; set; }
		
		public ReimbursementLine[] ReimbursementLines { get; set; }
		
		public LeaveLine[] LeaveLines { get; set; }
	}
	
	public class TaxDeclaration
	{
		
		/// <summary>
		/// Address line 1 for employee home address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string EmployeeID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public TaxDeclarationEmploymentBasis EmploymentBasis { get; set; }
		
		public System.Nullable<TaxDeclarationTFNExemptionType> TFNExemptionType { get; set; }
		
		/// <summary>
		/// The tax file number e.g 123123123.
		/// </summary>
		public string TaxFileNumber { get; set; }
		
		/// <summary>
		/// If the employee is Australian resident for tax purposes. e.g true or false
		/// </summary>
		public System.Nullable<System.Boolean> AustralianResidentForTaxPurposes { get; set; }
		
		public System.Nullable<TaxDeclarationResidencyStatus> ResidencyStatus { get; set; }
		
		/// <summary>
		/// If tax free threshold claimed. e.g true or false
		/// </summary>
		public System.Nullable<System.Boolean> TaxFreeThresholdClaimed { get; set; }
		
		/// <summary>
		/// If has tax offset estimated then the tax offset estimated amount. e.g 100
		/// </summary>
		public string TaxOffsetEstimatedAmount { get; set; }
		
		/// <summary>
		/// If employee has HECS or HELP debt. e.g true or false
		/// </summary>
		public System.Nullable<System.Boolean> HasHELPDebt { get; set; }
		
		/// <summary>
		/// If employee has financial supplement debt. e.g true or false
		/// </summary>
		public System.Nullable<System.Boolean> HasSFSSDebt { get; set; }
		
		/// <summary>
		/// If employee has trade support loan. e.g true or false
		/// </summary>
		public System.Nullable<System.Boolean> HasTradeSupportLoanDebt { get; set; }
		
		/// <summary>
		/// If the employee has requested that additional tax be withheld each pay run. e.g 50
		/// </summary>
		public string UpwardVariationTaxWithholdingAmount { get; set; }
		
		/// <summary>
		/// If the employee is eligible to receive an additional percentage on top of ordinary earnings when they take leave (typically 17.5%). e.g true or false
		/// </summary>
		public System.Nullable<System.Boolean> EligibleToReceiveLeaveLoading { get; set; }
		
		/// <summary>
		/// If the employee has approved withholding variation. e.g (0 - 100)
		/// </summary>
		public string ApprovedWithholdingVariationPercentage { get; set; }
		
		/// <summary>
		/// If the employee is eligible for student startup loan rules
		/// </summary>
		public System.Nullable<System.Boolean> HasStudentStartupLoan { get; set; }
		
		/// <summary>
		/// Last modified timestamp
		/// </summary>
		public string UpdatedDateUTC { get; set; }
	}
	
	public enum TaxDeclarationEmploymentBasis
	{
		
		FULLTIME = 0,
		
		PARTTIME = 1,
		
		CASUAL = 2,
		
		LABOURHIRE = 3,
		
		SUPERINCOMESTREAM = 4,
	}
	
	public enum TaxDeclarationTFNExemptionType
	{
		
		NOTQUOTED = 0,
		
		PENDING = 1,
		
		PENSIONER = 2,
		
		UNDER18 = 3,
	}
	
	public enum TaxDeclarationResidencyStatus
	{
		
		AUSTRALIANRESIDENT = 0,
		
		FOREIGNRESIDENT = 1,
		
		WORKINGHOLIDAYMAKER = 2,
	}
	
	public class LeaveBalance
	{
		
		/// <summary>
		/// The name of the leave type
		/// </summary>
		public string LeaveName { get; set; }
		
		/// <summary>
		/// Identifier of the leave type (see PayItems)
		/// </summary>
		public string LeaveTypeID { get; set; }
		
		/// <summary>
		/// The balance of the leave available
		/// </summary>
		public System.Nullable<System.Double> NumberOfUnits { get; set; }
		
		/// <summary>
		/// The type of units as specified by the LeaveType (see PayItems)
		/// </summary>
		public string TypeOfUnits { get; set; }
	}
	
	public class SuperMembership
	{
		
		/// <summary>
		/// Xero unique identifier for Super membership
		/// </summary>
		public string SuperMembershipID { get; set; }
		
		/// <summary>
		/// Xero identifier for super fund
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string SuperFundID { get; set; }
		
		/// <summary>
		/// The memberhsip number assigned to the employee by the super fund.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public float EmployeeNumber { get; set; }
	}
	
	public enum EmployeeStatus
	{
		
		ACTIVE = 0,
		
		TERMINATED = 1,
	}
	
	public class ValidationError
	{
		
		/// <summary>
		/// Validation error message
		/// </summary>
		public string Message { get; set; }
	}
	
	public class LeaveApplications
	{
		
		public LeaveApplication[] LeaveApplications1 { get; set; }
	}
	
	public class LeaveApplication
	{
		
		/// <summary>
		/// The Xero identifier for Payroll Employee
		/// </summary>
		public string LeaveApplicationID { get; set; }
		
		/// <summary>
		/// The Xero identifier for Payroll Employee
		/// </summary>
		public string EmployeeID { get; set; }
		
		/// <summary>
		/// The Xero identifier for Leave Type
		/// </summary>
		public string LeaveTypeID { get; set; }
		
		/// <summary>
		/// The title of the leave
		/// </summary>
		public string Title { get; set; }
		
		/// <summary>
		/// Start date of the leave (YYYY-MM-DD)
		/// </summary>
		public string StartDate { get; set; }
		
		/// <summary>
		/// End date of the leave (YYYY-MM-DD)
		/// </summary>
		public string EndDate { get; set; }
		
		/// <summary>
		/// The Description of the Leave
		/// </summary>
		public string Description { get; set; }
		
		public LeavePeriod[] LeavePeriods { get; set; }
		
		/// <summary>
		/// Last modified timestamp
		/// </summary>
		public string UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// Displays array of validation error messages from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
	}
	
	public class LeavePeriod
	{
		
		/// <summary>
		/// The Number of Units for the leave
		/// </summary>
		public System.Nullable<System.Double> NumberOfUnits { get; set; }
		
		/// <summary>
		/// The Pay Period End Date (YYYY-MM-DD)
		/// </summary>
		public string PayPeriodEndDate { get; set; }
		
		/// <summary>
		/// The Pay Period Start Date (YYYY-MM-DD)
		/// </summary>
		public string PayPeriodStartDate { get; set; }
		
		public System.Nullable<LeavePeriodLeavePeriodStatus> LeavePeriodStatus { get; set; }
	}
	
	public enum LeavePeriodLeavePeriodStatus
	{
		
		SCHEDULED = 0,
		
		PROCESSED = 1,
	}
	
	public enum LeavePeriodStatus
	{
		
		SCHEDULED = 0,
		
		PROCESSED = 1,
	}
	
	public class PayItems
	{
		
		public PayItem PayItems1 { get; set; }
	}
	
	public class PayItem
	{
		
		public EarningsRate[] EarningsRates { get; set; }
		
		public DeductionType[] DeductionTypes { get; set; }
		
		public LeaveType[] LeaveTypes { get; set; }
		
		public ReimbursementType[] ReimbursementTypes { get; set; }
	}
	
	public class EarningsRate
	{
		
		/// <summary>
		/// Name of the earnings rate (max length = 100)
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public string Name { get; set; }
		
		/// <summary>
		/// See Accounts
		/// </summary>
		public string AccountCode { get; set; }
		
		/// <summary>
		/// Type of units used to record earnings (max length = 50). Only When RateType is RATEPERUNIT
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(50)]
		public string TypeOfUnits { get; set; }
		
		/// <summary>
		/// Most payments are subject to tax, so you should only set this value if you are sure that a payment is exempt from PAYG withholding
		/// </summary>
		public System.Nullable<System.Boolean> IsExemptFromTax { get; set; }
		
		/// <summary>
		/// See the ATO website for details of which payments are exempt from SGC
		/// </summary>
		public System.Nullable<System.Boolean> IsExemptFromSuper { get; set; }
		
		/// <summary>
		/// Boolean to determine if the earnings rate is reportable or exempt from W1
		/// </summary>
		public System.Nullable<System.Boolean> IsReportableAsW1 { get; set; }
		
		public System.Nullable<EarningsRateEarningsType> EarningsType { get; set; }
		
		/// <summary>
		/// Xero identifier
		/// </summary>
		public string EarningsRateID { get; set; }
		
		public System.Nullable<EarningsRateRateType> RateType { get; set; }
		
		/// <summary>
		/// Default rate per unit (optional). Only applicable if RateType is RATEPERUNIT.
		/// </summary>
		public string RatePerUnit { get; set; }
		
		/// <summary>
		/// This is the multiplier used to calculate the rate per unit, based on the employee’s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MULTIPLE
		/// </summary>
		public System.Nullable<System.Double> Multiplier { get; set; }
		
		/// <summary>
		/// Indicates that this earnings rate should accrue leave. Only applicable if RateType is MULTIPLE
		/// </summary>
		public System.Nullable<System.Boolean> AccrueLeave { get; set; }
		
		/// <summary>
		/// Optional Amount for FIXEDAMOUNT RateType EarningsRate
		/// </summary>
		public System.Nullable<System.Double> Amount { get; set; }
		
		public LeaveLineEmploymentTerminationPaymentType EmploymentTerminationPaymentType { get; set; }
		
		/// <summary>
		/// Last modified timestamp
		/// </summary>
		public string UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// Is the current record
		/// </summary>
		public System.Nullable<System.Boolean> CurrentRecord { get; set; }
		
		public System.Nullable<EarningsRateAllowanceType> AllowanceType { get; set; }
	}
	
	public enum EarningsRateEarningsType
	{
		
		FIXED = 0,
		
		ORDINARYTIMEEARNINGS = 1,
		
		OVERTIMEEARNINGS = 2,
		
		ALLOWANCE = 3,
		
		LUMPSUMD = 4,
		
		EMPLOYMENTTERMINATIONPAYMENT = 5,
		
		LUMPSUMA = 6,
		
		LUMPSUMB = 7,
	}
	
	public enum EarningsRateRateType
	{
		
		FIXEDAMOUNT = 0,
		
		MULTIPLE = 1,
		
		RATEPERUNIT = 2,
	}
	
	public enum EarningsRateAllowanceType
	{
		
		CAR = 0,
		
		TRANSPORT = 1,
		
		TRAVEL = 2,
		
		LAUNDRY = 3,
		
		MEALS = 4,
		
		JOBKEEPER = 5,
		
		OTHER = 6,
	}
	
	public class DeductionType
	{
		
		/// <summary>
		/// Name of the earnings rate (max length = 100)
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public string Name { get; set; }
		
		/// <summary>
		/// See Accounts
		/// </summary>
		public string AccountCode { get; set; }
		
		/// <summary>
		/// Indicates that this is a pre-tax deduction that will reduce the amount of tax you withhold from an employee.
		/// </summary>
		public System.Nullable<System.Boolean> ReducesTax { get; set; }
		
		/// <summary>
		/// Most deductions don’t reduce your superannuation guarantee contribution liability, so typically you will not set any value for this.
		/// </summary>
		public System.Nullable<System.Boolean> ReducesSuper { get; set; }
		
		/// <summary>
		/// Boolean to determine if the deduction type is reportable or exempt from W1
		/// </summary>
		public System.Nullable<System.Boolean> IsExemptFromW1 { get; set; }
		
		/// <summary>
		/// Xero identifier
		/// </summary>
		public string DeductionTypeID { get; set; }
		
		/// <summary>
		/// Last modified timestamp
		/// </summary>
		public string UpdatedDateUTC { get; set; }
		
		public System.Nullable<DeductionTypeDeductionCategory> DeductionCategory { get; set; }
		
		/// <summary>
		/// Is the current record
		/// </summary>
		public System.Nullable<System.Boolean> CurrentRecord { get; set; }
	}
	
	public enum DeductionTypeDeductionCategory
	{
		
		NONE = 0,
		
		UNIONFEES = 1,
		
		WORKPLACEGIVING = 2,
	}
	
	public class LeaveType
	{
		
		/// <summary>
		/// Name of the earnings rate (max length = 100)
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of units by which leave entitlements are normally tracked. These are typically the same as the type of units used for the employee’s ordinary earnings rate
		/// </summary>
		public string TypeOfUnits { get; set; }
		
		/// <summary>
		/// Xero identifier
		/// </summary>
		public string LeaveTypeID { get; set; }
		
		/// <summary>
		/// The number of units the employee is entitled to each year
		/// </summary>
		public System.Nullable<System.Double> NormalEntitlement { get; set; }
		
		/// <summary>
		/// Enter an amount here if your organisation pays an additional percentage on top of ordinary earnings when your employees take leave (typically 17.5%)
		/// </summary>
		public System.Nullable<System.Int32> LeaveLoadingRate { get; set; }
		
		/// <summary>
		/// Last modified timestamp
		/// </summary>
		public string UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// Set this to indicate that an employee will be paid when taking this type of leave
		/// </summary>
		public System.Nullable<System.Boolean> IsPaidLeave { get; set; }
		
		/// <summary>
		/// Set this if you want a balance for this leave type to be shown on your employee’s payslips
		/// </summary>
		public System.Nullable<System.Boolean> ShowOnPayslip { get; set; }
		
		/// <summary>
		/// Is the current record
		/// </summary>
		public System.Nullable<System.Boolean> CurrentRecord { get; set; }
	}
	
	public class ReimbursementType
	{
		
		/// <summary>
		/// Name of the earnings rate (max length = 100)
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public string Name { get; set; }
		
		/// <summary>
		/// See Accounts
		/// </summary>
		public string AccountCode { get; set; }
		
		/// <summary>
		/// Xero identifier
		/// </summary>
		public string ReimbursementTypeID { get; set; }
		
		/// <summary>
		/// Last modified timestamp
		/// </summary>
		public string UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// Is the current record
		/// </summary>
		public System.Nullable<System.Boolean> CurrentRecord { get; set; }
	}
	
	public class PayrollCalendars
	{
		
		public PayrollCalendar[] PayrollCalendars1 { get; set; }
	}
	
	public class PayrollCalendar
	{
		
		/// <summary>
		/// Name of the Payroll Calendar
		/// </summary>
		public string Name { get; set; }
		
		public System.Nullable<PayrollCalendarCalendarType> CalendarType { get; set; }
		
		/// <summary>
		/// The start date of the upcoming pay period. The end date will be calculated based upon this date, and the calendar type selected (YYYY-MM-DD)
		/// </summary>
		public string StartDate { get; set; }
		
		/// <summary>
		/// The date on which employees will be paid for the upcoming pay period (YYYY-MM-DD)
		/// </summary>
		public string PaymentDate { get; set; }
		
		/// <summary>
		/// Xero identifier
		/// </summary>
		public string PayrollCalendarID { get; set; }
		
		/// <summary>
		/// Last modified timestamp
		/// </summary>
		public string UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// Displays array of validation error messages from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
	}
	
	public enum PayrollCalendarCalendarType
	{
		
		WEEKLY = 0,
		
		FORTNIGHTLY = 1,
		
		FOURWEEKLY = 2,
		
		MONTHLY = 3,
		
		TWICEMONTHLY = 4,
		
		QUARTERLY = 5,
	}
	
	public class Timesheets
	{
		
		public Timesheet[] Timesheets1 { get; set; }
	}
	
	public class Timesheet
	{
		
		/// <summary>
		/// The Xero identifier for an employee
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string EmployeeID { get; set; }
		
		/// <summary>
		/// Period start date (YYYY-MM-DD)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string StartDate { get; set; }
		
		/// <summary>
		/// Period end date (YYYY-MM-DD)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string EndDate { get; set; }
		
		public System.Nullable<TimesheetStatus> Status { get; set; }
		
		/// <summary>
		/// Timesheet total hours
		/// </summary>
		public System.Nullable<System.Double> Hours { get; set; }
		
		/// <summary>
		/// The Xero identifier for a Payroll Timesheet
		/// </summary>
		public string TimesheetID { get; set; }
		
		public TimesheetLine[] TimesheetLines { get; set; }
		
		/// <summary>
		/// Last modified timestamp
		/// </summary>
		public string UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// Displays array of validation error messages from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
	}
	
	public enum TimesheetStatus
	{
		
		DRAFT = 0,
		
		PROCESSED = 1,
		
		APPROVED = 2,
	}
	
	public class TimesheetLine
	{
		
		/// <summary>
		/// The Xero identifier for an Earnings Rate
		/// </summary>
		public string EarningsRateID { get; set; }
		
		/// <summary>
		/// The Xero identifier for a Tracking Category. The TrackingOptionID must belong to the TrackingCategory selected as TimesheetCategories under Payroll Settings.
		/// </summary>
		public string TrackingItemID { get; set; }
		
		/// <summary>
		/// The number of units on a timesheet line
		/// </summary>
		public float[] NumberOfUnits { get; set; }
		
		/// <summary>
		/// Last modified timestamp
		/// </summary>
		public string UpdatedDateUTC { get; set; }
	}
	
	public class TimesheetObject
	{
		
		public Timesheet Timesheet { get; set; }
	}
	
	public class PayRuns
	{
		
		public PayRun[] PayRuns1 { get; set; }
	}
	
	public class PayRun
	{
		
		/// <summary>
		/// Xero identifier for pay run
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string PayrollCalendarID { get; set; }
		
		/// <summary>
		/// Xero identifier for pay run
		/// </summary>
		public string PayRunID { get; set; }
		
		/// <summary>
		/// Period Start Date for the PayRun (YYYY-MM-DD)
		/// </summary>
		public string PayRunPeriodStartDate { get; set; }
		
		/// <summary>
		/// Period End Date for the PayRun (YYYY-MM-DD)
		/// </summary>
		public string PayRunPeriodEndDate { get; set; }
		
		public System.Nullable<PayRunPayRunStatus> PayRunStatus { get; set; }
		
		/// <summary>
		/// Payment Date for the PayRun (YYYY-MM-DD)
		/// </summary>
		public string PaymentDate { get; set; }
		
		/// <summary>
		/// Payslip message for the PayRun
		/// </summary>
		public string PayslipMessage { get; set; }
		
		/// <summary>
		/// Last modified timestamp
		/// </summary>
		public string UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// The payslips in the payrun
		/// </summary>
		public PayslipSummary[] Payslips { get; set; }
		
		/// <summary>
		/// The total Wages for the Payrun
		/// </summary>
		public System.Nullable<System.Double> Wages { get; set; }
		
		/// <summary>
		/// The total Deductions for the Payrun
		/// </summary>
		public System.Nullable<System.Double> Deductions { get; set; }
		
		/// <summary>
		/// The total Tax for the Payrun
		/// </summary>
		public System.Nullable<System.Double> Tax { get; set; }
		
		/// <summary>
		/// The total Super for the Payrun
		/// </summary>
		public System.Nullable<System.Double> Super { get; set; }
		
		/// <summary>
		/// The total Reimbursements for the Payrun
		/// </summary>
		public System.Nullable<System.Double> Reimbursement { get; set; }
		
		/// <summary>
		/// The total NetPay for the Payrun
		/// </summary>
		public System.Nullable<System.Double> NetPay { get; set; }
		
		/// <summary>
		/// Displays array of validation error messages from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
	}
	
	public enum PayRunPayRunStatus
	{
		
		DRAFT = 0,
		
		POSTED = 1,
	}
	
	public class PayslipSummary
	{
		
		/// <summary>
		/// The Xero identifier for an employee
		/// </summary>
		public string EmployeeID { get; set; }
		
		/// <summary>
		/// Xero identifier for the payslip
		/// </summary>
		public string PayslipID { get; set; }
		
		/// <summary>
		/// First name of employee
		/// </summary>
		public string FirstName { get; set; }
		
		/// <summary>
		/// Last name of employee
		/// </summary>
		public string LastName { get; set; }
		
		/// <summary>
		/// Employee group name
		/// </summary>
		public string EmployeeGroup { get; set; }
		
		/// <summary>
		/// The Wages for the Payslip
		/// </summary>
		public System.Nullable<System.Double> Wages { get; set; }
		
		/// <summary>
		/// The Deductions for the Payslip
		/// </summary>
		public System.Nullable<System.Double> Deductions { get; set; }
		
		/// <summary>
		/// The Tax for the Payslip
		/// </summary>
		public System.Nullable<System.Double> Tax { get; set; }
		
		/// <summary>
		/// The Super for the Payslip
		/// </summary>
		public System.Nullable<System.Double> Super { get; set; }
		
		/// <summary>
		/// The Reimbursements for the Payslip
		/// </summary>
		public System.Nullable<System.Double> Reimbursements { get; set; }
		
		/// <summary>
		/// The NetPay for the Payslip
		/// </summary>
		public System.Nullable<System.Double> NetPay { get; set; }
		
		/// <summary>
		/// Last modified timestamp
		/// </summary>
		public string UpdatedDateUTC { get; set; }
	}
	
	public class PayslipLines
	{
		
		public EarningsLine[] EarningsLines { get; set; }
		
		public LeaveEarningsLine[] LeaveEarningsLines { get; set; }
		
		public EarningsLine[] TimesheetEarningsLines { get; set; }
		
		public DeductionLine[] DeductionLines { get; set; }
		
		public LeaveAccrualLine[] LeaveAccrualLines { get; set; }
		
		public ReimbursementLine[] ReimbursementLines { get; set; }
		
		public SuperannuationLine[] SuperannuationLines { get; set; }
		
		public TaxLine[] TaxLines { get; set; }
	}
	
	public class LeaveEarningsLine
	{
		
		/// <summary>
		/// Xero identifier
		/// </summary>
		public string EarningsRateID { get; set; }
		
		/// <summary>
		/// Rate per unit of the EarningsLine.
		/// </summary>
		public System.Nullable<System.Double> RatePerUnit { get; set; }
		
		/// <summary>
		/// Earnings rate number of units.
		/// </summary>
		public System.Nullable<System.Double> NumberOfUnits { get; set; }
	}
	
	public class LeaveAccrualLine
	{
		
		/// <summary>
		/// Xero identifier for the Leave type.
		/// </summary>
		public string LeaveTypeID { get; set; }
		
		/// <summary>
		/// Leave Accrual number of units
		/// </summary>
		public System.Nullable<System.Double> NumberOfUnits { get; set; }
		
		/// <summary>
		/// If you want to auto calculate leave.
		/// </summary>
		public System.Nullable<System.Boolean> AutoCalculate { get; set; }
	}
	
	public class SuperannuationLine
	{
		
		/// <summary>
		/// Xero identifier for payroll super fund membership ID.
		/// </summary>
		public string SuperMembershipID { get; set; }
		
		public SuperLineContributionType ContributionType { get; set; }
		
		public SuperLineCalculationType CalculationType { get; set; }
		
		/// <summary>
		/// Superannuation minimum monthly earnings.
		/// </summary>
		public System.Nullable<System.Double> MinimumMonthlyEarnings { get; set; }
		
		/// <summary>
		/// Superannuation expense account code.
		/// </summary>
		public string ExpenseAccountCode { get; set; }
		
		/// <summary>
		/// Superannuation liability account code
		/// </summary>
		public string LiabilityAccountCode { get; set; }
		
		/// <summary>
		/// Superannuation payment date for the current period (YYYY-MM-DD)
		/// </summary>
		public string PaymentDateForThisPeriod { get; set; }
		
		/// <summary>
		/// Superannuation percentage
		/// </summary>
		public System.Nullable<System.Double> Percentage { get; set; }
		
		/// <summary>
		/// Superannuation amount
		/// </summary>
		public System.Nullable<System.Double> Amount { get; set; }
	}
	
	public class TaxLine
	{
		
		/// <summary>
		/// Xero identifier for payslip tax line ID.
		/// </summary>
		public string PayslipTaxLineID { get; set; }
		
		/// <summary>
		/// The tax line amount
		/// </summary>
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Name of the tax type.
		/// </summary>
		public string TaxTypeName { get; set; }
		
		/// <summary>
		/// Description of the tax line.
		/// </summary>
		public string Description { get; set; }
		
		public System.Nullable<TaxLineManualTaxType> ManualTaxType { get; set; }
		
		/// <summary>
		/// The tax line liability account code. For posted pay run you should be able to see liability account code
		/// </summary>
		public string LiabilityAccount { get; set; }
	}
	
	public enum TaxLineManualTaxType
	{
		
		PAYGMANUAL = 0,
		
		ETPOMANUAL = 1,
		
		ETPRMANUAL = 2,
	}
	
	public class PayslipObject
	{
		
		public Payslip Payslip { get; set; }
	}
	
	public class Payslip
	{
		
		/// <summary>
		/// The Xero identifier for an employee
		/// </summary>
		public string EmployeeID { get; set; }
		
		/// <summary>
		/// Xero identifier for the payslip
		/// </summary>
		public string PayslipID { get; set; }
		
		/// <summary>
		/// First name of employee
		/// </summary>
		public string FirstName { get; set; }
		
		/// <summary>
		/// Last name of employee
		/// </summary>
		public string LastName { get; set; }
		
		/// <summary>
		/// The Wages for the Payslip
		/// </summary>
		public System.Nullable<System.Double> Wages { get; set; }
		
		/// <summary>
		/// The Deductions for the Payslip
		/// </summary>
		public System.Nullable<System.Double> Deductions { get; set; }
		
		/// <summary>
		/// The Tax for the Payslip
		/// </summary>
		public System.Nullable<System.Double> Tax { get; set; }
		
		/// <summary>
		/// The Super for the Payslip
		/// </summary>
		public System.Nullable<System.Double> Super { get; set; }
		
		/// <summary>
		/// The Reimbursements for the Payslip
		/// </summary>
		public System.Nullable<System.Double> Reimbursements { get; set; }
		
		/// <summary>
		/// The NetPay for the Payslip
		/// </summary>
		public System.Nullable<System.Double> NetPay { get; set; }
		
		public EarningsLine[] EarningsLines { get; set; }
		
		public LeaveEarningsLine[] LeaveEarningsLines { get; set; }
		
		public EarningsLine[] TimesheetEarningsLines { get; set; }
		
		public DeductionLine[] DeductionLines { get; set; }
		
		public LeaveAccrualLine[] LeaveAccrualLines { get; set; }
		
		public ReimbursementLine[] ReimbursementLines { get; set; }
		
		public SuperannuationLine[] SuperannuationLines { get; set; }
		
		public TaxLine[] TaxLines { get; set; }
		
		/// <summary>
		/// Last modified timestamp
		/// </summary>
		public string UpdatedDateUTC { get; set; }
	}
	
	public class Payslips
	{
		
		public Payslip[] Payslips1 { get; set; }
	}
	
	public class SettingsObject
	{
		
		public Settings Settings { get; set; }
	}
	
	public class Settings
	{
		
		/// <summary>
		/// Payroll Account details for SuperExpense, SuperLiabilty, WagesExpense, PAYGLiability & WagesPayable.
		/// </summary>
		public Account[] Accounts { get; set; }
		
		/// <summary>
		/// Tracking categories for Employees and Timesheets
		/// </summary>
		public SettingsTrackingCategories TrackingCategories { get; set; }
		
		/// <summary>
		/// Number of days in the Payroll year
		/// </summary>
		public System.Nullable<System.Int32> DaysInPayrollYear { get; set; }
	}
	
	public class Account
	{
		
		/// <summary>
		/// Xero identifier for accounts
		/// </summary>
		public string AccountID { get; set; }
		
		/// <summary>
		/// See Account Types
		/// </summary>
		public System.Nullable<AccountType> Type { get; set; }
		
		/// <summary>
		/// Customer defined account code
		/// </summary>
		public string Code { get; set; }
		
		/// <summary>
		/// Name of account
		/// </summary>
		public string Name { get; set; }
	}
	
	public enum AccountType
	{
		
		BANK = 0,
		
		CURRENT = 1,
		
		CURRLIAB = 2,
		
		DEPRECIATN = 3,
		
		DIRECTCOSTS = 4,
		
		EQUITY = 5,
		
		EXPENSE = 6,
		
		FIXED = 7,
		
		INVENTORY = 8,
		
		LIABILITY = 9,
		
		NONCURRENT = 10,
		
		OTHERINCOME = 11,
		
		OVERHEADS = 12,
		
		PREPAYMENT = 13,
		
		REVENUE = 14,
		
		SALES = 15,
		
		TERMLIAB = 16,
		
		PAYGLIABILITY = 17,
		
		PAYG = 18,
		
		SUPERANNUATIONEXPENSE = 19,
		
		SUPERANNUATIONLIABILITY = 20,
		
		WAGESEXPENSE = 21,
		
		WAGESPAYABLELIABILITY = 22,
	}
	
	public class SettingsTrackingCategories
	{
		
		/// <summary>
		/// The tracking category used for employees
		/// </summary>
		public SettingsTrackingCategoriesEmployeeGroups EmployeeGroups { get; set; }
		
		/// <summary>
		/// The tracking category used for timesheets
		/// </summary>
		public SettingsTrackingCategoriesTimesheetCategories TimesheetCategories { get; set; }
	}
	
	public class SettingsTrackingCategoriesEmployeeGroups
	{
		
		/// <summary>
		/// The identifier for the tracking category
		/// </summary>
		public string TrackingCategoryID { get; set; }
		
		/// <summary>
		/// Name of the tracking category
		/// </summary>
		public string TrackingCategoryName { get; set; }
	}
	
	public class SettingsTrackingCategoriesTimesheetCategories
	{
		
		/// <summary>
		/// The identifier for the tracking category
		/// </summary>
		public string TrackingCategoryID { get; set; }
		
		/// <summary>
		/// Name of the tracking category
		/// </summary>
		public string TrackingCategoryName { get; set; }
	}
	
	public class SuperFunds
	{
		
		public SuperFund[] SuperFunds1 { get; set; }
	}
	
	public class SuperFund
	{
		
		/// <summary>
		/// Xero identifier for a super fund
		/// </summary>
		public string SuperFundID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public SuperFundType Type { get; set; }
		
		/// <summary>
		/// Name of the super fund
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// ABN of the self managed super fund
		/// </summary>
		public string ABN { get; set; }
		
		/// <summary>
		/// BSB of the self managed super fund
		/// </summary>
		public string BSB { get; set; }
		
		/// <summary>
		/// The account number for the self managed super fund.
		/// </summary>
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// The account name for the self managed super fund.
		/// </summary>
		public string AccountName { get; set; }
		
		/// <summary>
		/// The electronic service address for the self managed super fund.
		/// </summary>
		public string ElectronicServiceAddress { get; set; }
		
		/// <summary>
		/// Some funds assign a unique number to each employer
		/// </summary>
		public string EmployerNumber { get; set; }
		
		/// <summary>
		/// The SPIN of the Regulated SuperFund. This field has been deprecated. It will only be present for legacy superfunds. New superfunds will not have a SPIN value. The USI field should be used instead of SPIN.
		/// </summary>
		public string SPIN { get; set; }
		
		/// <summary>
		/// The USI of the Regulated SuperFund
		/// </summary>
		public string USI { get; set; }
		
		/// <summary>
		/// Last modified timestamp
		/// </summary>
		public string UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// Displays array of validation error messages from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
	}
	
	public enum SuperFundType
	{
		
		REGULATED = 0,
		
		SMSF = 1,
	}
	
	public class SuperFundProducts
	{
		
		public SuperFundProduct[] SuperFundProducts1 { get; set; }
	}
	
	public class SuperFundProduct
	{
		
		/// <summary>
		/// The ABN of the Regulated SuperFund
		/// </summary>
		public string ABN { get; set; }
		
		/// <summary>
		/// The USI of the Regulated SuperFund
		/// </summary>
		public string USI { get; set; }
		
		/// <summary>
		/// The SPIN of the Regulated SuperFund. This field has been deprecated. New superfunds will not have a SPIN value. The USI field should be used instead of SPIN
		/// </summary>
		public string SPIN { get; set; }
		
		/// <summary>
		/// The name of the Regulated SuperFund
		/// </summary>
		public string ProductName { get; set; }
	}
	
	/// <summary>
	/// The reimbursement type lines
	/// </summary>
	public class ReimbursementLines
	{
		
		public ReimbursementLine[] ReimbursementLines1 { get; set; }
	}
	
	/// <summary>
	/// The leave type lines
	/// </summary>
	public class LeaveLines
	{
		
		public LeaveLine[] Employee { get; set; }
	}
	
	public enum RateType
	{
		
		FIXEDAMOUNT = 0,
		
		MULTIPLE = 1,
		
		RATEPERUNIT = 2,
	}
	
	public enum EarningsType
	{
		
		FIXED = 0,
		
		ORDINARYTIMEEARNINGS = 1,
		
		OVERTIMEEARNINGS = 2,
		
		ALLOWANCE = 3,
		
		LUMPSUMD = 4,
		
		EMPLOYMENTTERMINATIONPAYMENT = 5,
		
		LUMPSUMA = 6,
		
		LUMPSUMB = 7,
	}
	
	public enum EmploymentTerminationPaymentType
	{
		
		O = 0,
		
		R = 1,
	}
	
	public enum AllowanceType
	{
		
		CAR = 0,
		
		TRANSPORT = 1,
		
		TRAVEL = 2,
		
		LAUNDRY = 3,
		
		MEALS = 4,
		
		JOBKEEPER = 5,
		
		OTHER = 6,
	}
	
	public enum CalendarType
	{
		
		WEEKLY = 0,
		
		FORTNIGHTLY = 1,
		
		FOURWEEKLY = 2,
		
		MONTHLY = 3,
		
		TWICEMONTHLY = 4,
		
		QUARTERLY = 5,
	}
	
	public enum EarningsRateCalculationType
	{
		
		USEEARNINGSRATE = 0,
		
		ENTEREARNINGSRATE = 1,
		
		ANNUALSALARY = 2,
	}
	
	public enum DeductionTypeCalculationType
	{
		
		FIXEDAMOUNT = 0,
		
		PRETAX = 1,
		
		POSTTAX = 2,
	}
	
	public enum SuperannuationContributionType
	{
		
		SGC = 0,
		
		SALARYSACRIFICE = 1,
		
		EMPLOYERADDITIONAL = 2,
		
		EMPLOYEE = 3,
	}
	
	public enum SuperannuationCalculationType
	{
		
		FIXEDAMOUNT = 0,
		
		PERCENTAGEOFEARNINGS = 1,
		
		STATUTORY = 2,
	}
	
	public enum PaymentFrequencyType
	{
		
		WEEKLY = 0,
		
		MONTHLY = 1,
		
		FORTNIGHTLY = 2,
		
		QUARTERLY = 3,
		
		TWICEMONTHLY = 4,
		
		FOURWEEKLY = 5,
		
		YEARLY = 6,
	}
	
	public enum LeaveTypeContributionType
	{
		
		SGC = 0,
		
		SALARYSACRIFICE = 1,
		
		EMPLOYERADDITIONAL = 2,
		
		EMPLOYEE = 3,
	}
	
	public enum EntitlementFinalPayPayoutType
	{
		
		NOTPAIDOUT = 0,
		
		PAIDOUT = 1,
	}
	
	public enum PayRunStatus
	{
		
		DRAFT = 0,
		
		POSTED = 1,
	}
	
	public enum ManualTaxType
	{
		
		PAYGMANUAL = 0,
		
		ETPOMANUAL = 1,
		
		ETPRMANUAL = 2,
	}
	
	public enum EmploymentBasis
	{
		
		FULLTIME = 0,
		
		PARTTIME = 1,
		
		CASUAL = 2,
		
		LABOURHIRE = 3,
		
		SUPERINCOMESTREAM = 4,
	}
	
	public enum TFNExemptionType
	{
		
		NOTQUOTED = 0,
		
		PENDING = 1,
		
		PENSIONER = 2,
		
		UNDER18 = 3,
	}
	
	public enum ResidencyStatus
	{
		
		AUSTRALIANRESIDENT = 0,
		
		FOREIGNRESIDENT = 1,
		
		WORKINGHOLIDAYMAKER = 2,
	}
	
	/// <summary>
	/// State abbreviation for employee home address
	/// </summary>
	public enum State
	{
		
		ACT = 0,
		
		NSW = 1,
		
		NT = 2,
		
		QLD = 3,
		
		SA = 4,
		
		TAS = 5,
		
		VIC = 6,
		
		WA = 7,
	}
	
	/// <summary>
	/// The object returned for a bad request
	/// </summary>
	public class APIException
	{
		
		/// <summary>
		/// The error number
		/// </summary>
		public string ErrorNumber { get; set; }
		
		/// <summary>
		/// The type of error
		/// </summary>
		public string Type { get; set; }
		
		/// <summary>
		/// The message describing the error
		/// </summary>
		public string Message { get; set; }
	}
	
	public partial class MyClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public MyClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// searches employees
		/// GetEmployees Employees
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 – Up to 100 employees will be returned in a single API call</param>
		/// <returns>search results matching criteria</returns>
		public async Task<Employees> GetEmployeesAsync(string @where, string order, int page)
		{
			var requestUri = "Employees?where=" + (where==null? "" : Uri.EscapeDataString(where))+"&order=" + (order==null? "" : Uri.EscapeDataString(order))+"&page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Employees>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches employees
		/// GetEmployees Employees
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 – Up to 100 employees will be returned in a single API call</param>
		/// <returns>search results matching criteria</returns>
		public Employees GetEmployees(string @where, string order, int page)
		{
			var requestUri = "Employees?where=" + (where==null? "" : Uri.EscapeDataString(where))+"&order=" + (order==null? "" : Uri.EscapeDataString(order))+"&page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Employees>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Use this method to create a payroll employee
		/// CreateEmployee Employees
		/// </summary>
		/// <returns>A successful request</returns>
		public async Task<Employees> CreateEmployeeAsync(Employee[] requestBody)
		{
			var requestUri = "Employees";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Employees>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Use this method to create a payroll employee
		/// CreateEmployee Employees
		/// </summary>
		/// <returns>A successful request</returns>
		public Employees CreateEmployee(Employee[] requestBody)
		{
			var requestUri = "Employees";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Employees>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// searches for an employee by unique id
		/// GetEmployee Employees/{EmployeeId}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<Employees> GetEmployeeAsync(string EmployeeId)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Employees>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches for an employee by unique id
		/// GetEmployee Employees/{EmployeeId}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>search results matching criteria</returns>
		public Employees GetEmployee(string EmployeeId)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Employees>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an Employee
		/// Update properties on a single employee
		/// UpdateEmployee Employees/{EmployeeId}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>A successful request</returns>
		public async Task<Employees> UpdateEmployeeAsync(string EmployeeId, Employee[] requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Employees>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update an Employee
		/// Update properties on a single employee
		/// UpdateEmployee Employees/{EmployeeId}
		/// </summary>
		/// <param name="EmployeeId">Employee id for single object</param>
		/// <returns>A successful request</returns>
		public Employees UpdateEmployee(string EmployeeId, Employee[] requestBody)
		{
			var requestUri = "Employees/"+ (EmployeeId==null? "" : Uri.EscapeDataString(EmployeeId));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Employees>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// searches Leave Applications
		/// GetLeaveApplications LeaveApplications
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 – Up to 100 objects will be returned in a single API call</param>
		/// <returns>search results matching criteria</returns>
		public async Task<LeaveApplications> GetLeaveApplicationsAsync(string @where, string order, int page)
		{
			var requestUri = "LeaveApplications?where=" + (where==null? "" : Uri.EscapeDataString(where))+"&order=" + (order==null? "" : Uri.EscapeDataString(order))+"&page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LeaveApplications>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches Leave Applications
		/// GetLeaveApplications LeaveApplications
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 – Up to 100 objects will be returned in a single API call</param>
		/// <returns>search results matching criteria</returns>
		public LeaveApplications GetLeaveApplications(string @where, string order, int page)
		{
			var requestUri = "LeaveApplications?where=" + (where==null? "" : Uri.EscapeDataString(where))+"&order=" + (order==null? "" : Uri.EscapeDataString(order))+"&page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LeaveApplications>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Use this method to create a Leave Application
		/// CreateLeaveApplication LeaveApplications
		/// </summary>
		/// <returns>A successful request</returns>
		public async Task<LeaveApplications> CreateLeaveApplicationAsync(LeaveApplication[] requestBody)
		{
			var requestUri = "LeaveApplications";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LeaveApplications>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Use this method to create a Leave Application
		/// CreateLeaveApplication LeaveApplications
		/// </summary>
		/// <returns>A successful request</returns>
		public LeaveApplications CreateLeaveApplication(LeaveApplication[] requestBody)
		{
			var requestUri = "LeaveApplications";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LeaveApplications>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// searches for an Leave Application by unique id
		/// GetLeaveApplication LeaveApplications/{LeaveApplicationId}
		/// </summary>
		/// <param name="LeaveApplicationId">Leave Application id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<LeaveApplications> GetLeaveApplicationAsync(string LeaveApplicationId)
		{
			var requestUri = "LeaveApplications/"+ (LeaveApplicationId==null? "" : Uri.EscapeDataString(LeaveApplicationId));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LeaveApplications>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches for an Leave Application by unique id
		/// GetLeaveApplication LeaveApplications/{LeaveApplicationId}
		/// </summary>
		/// <param name="LeaveApplicationId">Leave Application id for single object</param>
		/// <returns>search results matching criteria</returns>
		public LeaveApplications GetLeaveApplication(string LeaveApplicationId)
		{
			var requestUri = "LeaveApplications/"+ (LeaveApplicationId==null? "" : Uri.EscapeDataString(LeaveApplicationId));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LeaveApplications>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Use this method to update a Leave Application
		/// UpdateLeaveApplication LeaveApplications/{LeaveApplicationId}
		/// </summary>
		/// <param name="LeaveApplicationId">Leave Application id for single object</param>
		/// <returns>A successful request</returns>
		public async Task<LeaveApplications> UpdateLeaveApplicationAsync(string LeaveApplicationId, LeaveApplication[] requestBody)
		{
			var requestUri = "LeaveApplications/"+ (LeaveApplicationId==null? "" : Uri.EscapeDataString(LeaveApplicationId));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LeaveApplications>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Use this method to update a Leave Application
		/// UpdateLeaveApplication LeaveApplications/{LeaveApplicationId}
		/// </summary>
		/// <param name="LeaveApplicationId">Leave Application id for single object</param>
		/// <returns>A successful request</returns>
		public LeaveApplications UpdateLeaveApplication(string LeaveApplicationId, LeaveApplication[] requestBody)
		{
			var requestUri = "LeaveApplications/"+ (LeaveApplicationId==null? "" : Uri.EscapeDataString(LeaveApplicationId));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LeaveApplications>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// searches Pay Items
		/// GetPayItems PayItems
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 – Up to 100 objects will be returned in a single API call</param>
		/// <returns>search results matching criteria</returns>
		public async Task<PayItems> GetPayItemsAsync(string @where, string order, int page)
		{
			var requestUri = "PayItems?where=" + (where==null? "" : Uri.EscapeDataString(where))+"&order=" + (order==null? "" : Uri.EscapeDataString(order))+"&page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayItems>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches Pay Items
		/// GetPayItems PayItems
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 – Up to 100 objects will be returned in a single API call</param>
		/// <returns>search results matching criteria</returns>
		public PayItems GetPayItems(string @where, string order, int page)
		{
			var requestUri = "PayItems?where=" + (where==null? "" : Uri.EscapeDataString(where))+"&order=" + (order==null? "" : Uri.EscapeDataString(order))+"&page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayItems>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Use this method to create a Pay Item
		/// CreatePayItem PayItems
		/// </summary>
		/// <returns>A successful request - currently returns empty array for JSON</returns>
		public async Task<PayItems> CreatePayItemAsync(PayItem requestBody)
		{
			var requestUri = "PayItems";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayItems>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Use this method to create a Pay Item
		/// CreatePayItem PayItems
		/// </summary>
		/// <returns>A successful request - currently returns empty array for JSON</returns>
		public PayItems CreatePayItem(PayItem requestBody)
		{
			var requestUri = "PayItems";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayItems>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// searches Payroll Calendars
		/// GetPayrollCalendars PayrollCalendars
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 – Up to 100 objects will be returned in a single API call</param>
		/// <returns>search results matching criteria</returns>
		public async Task<PayrollCalendars> GetPayrollCalendarsAsync(string @where, string order, int page)
		{
			var requestUri = "PayrollCalendars?where=" + (where==null? "" : Uri.EscapeDataString(where))+"&order=" + (order==null? "" : Uri.EscapeDataString(order))+"&page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayrollCalendars>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches Payroll Calendars
		/// GetPayrollCalendars PayrollCalendars
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 – Up to 100 objects will be returned in a single API call</param>
		/// <returns>search results matching criteria</returns>
		public PayrollCalendars GetPayrollCalendars(string @where, string order, int page)
		{
			var requestUri = "PayrollCalendars?where=" + (where==null? "" : Uri.EscapeDataString(where))+"&order=" + (order==null? "" : Uri.EscapeDataString(order))+"&page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayrollCalendars>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Use this method to create a Payroll Calendars
		/// CreatePayrollCalendar PayrollCalendars
		/// </summary>
		/// <returns>A successful request</returns>
		public async Task<PayrollCalendars> CreatePayrollCalendarAsync(PayrollCalendar[] requestBody)
		{
			var requestUri = "PayrollCalendars";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayrollCalendars>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Use this method to create a Payroll Calendars
		/// CreatePayrollCalendar PayrollCalendars
		/// </summary>
		/// <returns>A successful request</returns>
		public PayrollCalendars CreatePayrollCalendar(PayrollCalendar[] requestBody)
		{
			var requestUri = "PayrollCalendars";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayrollCalendars>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// searches Payroll Calendars
		/// GetPayrollCalendar PayrollCalendars/{PayrollCalendarID}
		/// </summary>
		/// <param name="PayrollCalendarID">Payroll Calendar id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<PayrollCalendars> GetPayrollCalendarAsync(string PayrollCalendarID)
		{
			var requestUri = "PayrollCalendars/"+ (PayrollCalendarID==null? "" : Uri.EscapeDataString(PayrollCalendarID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayrollCalendars>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches Payroll Calendars
		/// GetPayrollCalendar PayrollCalendars/{PayrollCalendarID}
		/// </summary>
		/// <param name="PayrollCalendarID">Payroll Calendar id for single object</param>
		/// <returns>search results matching criteria</returns>
		public PayrollCalendars GetPayrollCalendar(string PayrollCalendarID)
		{
			var requestUri = "PayrollCalendars/"+ (PayrollCalendarID==null? "" : Uri.EscapeDataString(PayrollCalendarID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayrollCalendars>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches PayRuns
		/// GetPayRuns PayRuns
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 – Up to 100 PayRuns will be returned in a single API call</param>
		/// <returns>search results matching criteria</returns>
		public async Task<PayRuns> GetPayRunsAsync(string @where, string order, int page)
		{
			var requestUri = "PayRuns?where=" + (where==null? "" : Uri.EscapeDataString(where))+"&order=" + (order==null? "" : Uri.EscapeDataString(order))+"&page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayRuns>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches PayRuns
		/// GetPayRuns PayRuns
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 – Up to 100 PayRuns will be returned in a single API call</param>
		/// <returns>search results matching criteria</returns>
		public PayRuns GetPayRuns(string @where, string order, int page)
		{
			var requestUri = "PayRuns?where=" + (where==null? "" : Uri.EscapeDataString(where))+"&order=" + (order==null? "" : Uri.EscapeDataString(order))+"&page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayRuns>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Use this method to create a PayRun
		/// CreatePayRun PayRuns
		/// </summary>
		/// <returns>A successful request</returns>
		public async Task<PayRuns> CreatePayRunAsync(PayRun[] requestBody)
		{
			var requestUri = "PayRuns";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayRuns>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Use this method to create a PayRun
		/// CreatePayRun PayRuns
		/// </summary>
		/// <returns>A successful request</returns>
		public PayRuns CreatePayRun(PayRun[] requestBody)
		{
			var requestUri = "PayRuns";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayRuns>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// searches for an payrun by unique id
		/// GetPayRun PayRuns/{PayRunID}
		/// </summary>
		/// <param name="PayRunID">PayRun id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<PayRuns> GetPayRunAsync(string PayRunID)
		{
			var requestUri = "PayRuns/"+ (PayRunID==null? "" : Uri.EscapeDataString(PayRunID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayRuns>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches for an payrun by unique id
		/// GetPayRun PayRuns/{PayRunID}
		/// </summary>
		/// <param name="PayRunID">PayRun id for single object</param>
		/// <returns>search results matching criteria</returns>
		public PayRuns GetPayRun(string PayRunID)
		{
			var requestUri = "PayRuns/"+ (PayRunID==null? "" : Uri.EscapeDataString(PayRunID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayRuns>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a PayRun
		/// Update properties on a single PayRun
		/// UpdatePayRun PayRuns/{PayRunID}
		/// </summary>
		/// <param name="PayRunID">PayRun id for single object</param>
		/// <returns>A successful request</returns>
		public async Task<PayRuns> UpdatePayRunAsync(string PayRunID, PayRun[] requestBody)
		{
			var requestUri = "PayRuns/"+ (PayRunID==null? "" : Uri.EscapeDataString(PayRunID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayRuns>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a PayRun
		/// Update properties on a single PayRun
		/// UpdatePayRun PayRuns/{PayRunID}
		/// </summary>
		/// <param name="PayRunID">PayRun id for single object</param>
		/// <returns>A successful request</returns>
		public PayRuns UpdatePayRun(string PayRunID, PayRun[] requestBody)
		{
			var requestUri = "PayRuns/"+ (PayRunID==null? "" : Uri.EscapeDataString(PayRunID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayRuns>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// searches for an payslip by unique id
		/// GetPayslip Payslip/{PayslipID}
		/// </summary>
		/// <param name="PayslipID">Payslip id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<PayslipObject> GetPayslipAsync(string PayslipID)
		{
			var requestUri = "Payslip/"+ (PayslipID==null? "" : Uri.EscapeDataString(PayslipID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayslipObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches for an payslip by unique id
		/// GetPayslip Payslip/{PayslipID}
		/// </summary>
		/// <param name="PayslipID">Payslip id for single object</param>
		/// <returns>search results matching criteria</returns>
		public PayslipObject GetPayslip(string PayslipID)
		{
			var requestUri = "Payslip/"+ (PayslipID==null? "" : Uri.EscapeDataString(PayslipID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayslipObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Payslip
		/// Update lines on a single payslips
		/// UpdatePayslip Payslip/{PayslipID}
		/// </summary>
		/// <param name="PayslipID">Payslip id for single object</param>
		/// <returns>A successful request - currently returns empty array for JSON</returns>
		public async Task<Payslips> UpdatePayslipAsync(string PayslipID, PayslipLines[] requestBody)
		{
			var requestUri = "Payslip/"+ (PayslipID==null? "" : Uri.EscapeDataString(PayslipID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Payslips>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a Payslip
		/// Update lines on a single payslips
		/// UpdatePayslip Payslip/{PayslipID}
		/// </summary>
		/// <param name="PayslipID">Payslip id for single object</param>
		/// <returns>A successful request - currently returns empty array for JSON</returns>
		public Payslips UpdatePayslip(string PayslipID, PayslipLines[] requestBody)
		{
			var requestUri = "Payslip/"+ (PayslipID==null? "" : Uri.EscapeDataString(PayslipID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Payslips>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// retrieve settings
		/// GetSettings Settings
		/// </summary>
		/// <returns>payroll settings</returns>
		public async Task<SettingsObject> GetSettingsAsync()
		{
			var requestUri = "Settings";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SettingsObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieve settings
		/// GetSettings Settings
		/// </summary>
		/// <returns>payroll settings</returns>
		public SettingsObject GetSettings()
		{
			var requestUri = "Settings";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SettingsObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches SuperFunds
		/// GetSuperfunds Superfunds
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 – Up to 100 SuperFunds will be returned in a single API call</param>
		/// <returns>search results matching criteria</returns>
		public async Task<SuperFunds> GetSuperfundsAsync(string @where, string order, int page)
		{
			var requestUri = "Superfunds?where=" + (where==null? "" : Uri.EscapeDataString(where))+"&order=" + (order==null? "" : Uri.EscapeDataString(order))+"&page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SuperFunds>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches SuperFunds
		/// GetSuperfunds Superfunds
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 – Up to 100 SuperFunds will be returned in a single API call</param>
		/// <returns>search results matching criteria</returns>
		public SuperFunds GetSuperfunds(string @where, string order, int page)
		{
			var requestUri = "Superfunds?where=" + (where==null? "" : Uri.EscapeDataString(where))+"&order=" + (order==null? "" : Uri.EscapeDataString(order))+"&page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SuperFunds>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Use this method to create a super fund
		/// CreateSuperfund Superfunds
		/// </summary>
		/// <returns>A successful request</returns>
		public async Task<SuperFunds> CreateSuperfundAsync(SuperFund[] requestBody)
		{
			var requestUri = "Superfunds";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SuperFunds>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Use this method to create a super fund
		/// CreateSuperfund Superfunds
		/// </summary>
		/// <returns>A successful request</returns>
		public SuperFunds CreateSuperfund(SuperFund[] requestBody)
		{
			var requestUri = "Superfunds";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SuperFunds>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// searches for an Superfund by unique id
		/// GetSuperfund Superfunds/{SuperFundID}
		/// </summary>
		/// <param name="SuperFundID">Superfund id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<SuperFunds> GetSuperfundAsync(string SuperFundID)
		{
			var requestUri = "Superfunds/"+ (SuperFundID==null? "" : Uri.EscapeDataString(SuperFundID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SuperFunds>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches for an Superfund by unique id
		/// GetSuperfund Superfunds/{SuperFundID}
		/// </summary>
		/// <param name="SuperFundID">Superfund id for single object</param>
		/// <returns>search results matching criteria</returns>
		public SuperFunds GetSuperfund(string SuperFundID)
		{
			var requestUri = "Superfunds/"+ (SuperFundID==null? "" : Uri.EscapeDataString(SuperFundID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SuperFunds>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Superfund
		/// Update properties on a single Superfund
		/// UpdateSuperfund Superfunds/{SuperFundID}
		/// </summary>
		/// <param name="SuperFundID">Superfund id for single object</param>
		/// <returns>A successful request</returns>
		public async Task<SuperFunds> UpdateSuperfundAsync(string SuperFundID, SuperFund[] requestBody)
		{
			var requestUri = "Superfunds/"+ (SuperFundID==null? "" : Uri.EscapeDataString(SuperFundID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SuperFunds>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a Superfund
		/// Update properties on a single Superfund
		/// UpdateSuperfund Superfunds/{SuperFundID}
		/// </summary>
		/// <param name="SuperFundID">Superfund id for single object</param>
		/// <returns>A successful request</returns>
		public SuperFunds UpdateSuperfund(string SuperFundID, SuperFund[] requestBody)
		{
			var requestUri = "Superfunds/"+ (SuperFundID==null? "" : Uri.EscapeDataString(SuperFundID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SuperFunds>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// searches SuperfundProducts
		/// GetSuperfundProducts SuperfundProducts
		/// </summary>
		/// <param name="ABN">The ABN of the Regulated SuperFund</param>
		/// <param name="USI">The USI of the Regulated SuperFund</param>
		/// <returns>search results matching criteria</returns>
		public async Task<SuperFundProducts> GetSuperfundProductsAsync(string ABN, string USI)
		{
			var requestUri = "SuperfundProducts?ABN=" + (ABN==null? "" : Uri.EscapeDataString(ABN))+"&USI=" + (USI==null? "" : Uri.EscapeDataString(USI));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SuperFundProducts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches SuperfundProducts
		/// GetSuperfundProducts SuperfundProducts
		/// </summary>
		/// <param name="ABN">The ABN of the Regulated SuperFund</param>
		/// <param name="USI">The USI of the Regulated SuperFund</param>
		/// <returns>search results matching criteria</returns>
		public SuperFundProducts GetSuperfundProducts(string ABN, string USI)
		{
			var requestUri = "SuperfundProducts?ABN=" + (ABN==null? "" : Uri.EscapeDataString(ABN))+"&USI=" + (USI==null? "" : Uri.EscapeDataString(USI));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SuperFundProducts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches timesheets
		/// GetTimesheets Timesheets
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 – Up to 100 timesheets will be returned in a single API call</param>
		/// <returns>search results matching criteria</returns>
		public async Task<Timesheets> GetTimesheetsAsync(string @where, string order, int page)
		{
			var requestUri = "Timesheets?where=" + (where==null? "" : Uri.EscapeDataString(where))+"&order=" + (order==null? "" : Uri.EscapeDataString(order))+"&page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Timesheets>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches timesheets
		/// GetTimesheets Timesheets
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 – Up to 100 timesheets will be returned in a single API call</param>
		/// <returns>search results matching criteria</returns>
		public Timesheets GetTimesheets(string @where, string order, int page)
		{
			var requestUri = "Timesheets?where=" + (where==null? "" : Uri.EscapeDataString(where))+"&order=" + (order==null? "" : Uri.EscapeDataString(order))+"&page="+page;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Timesheets>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Use this method to create a timesheet
		/// CreateTimesheet Timesheets
		/// </summary>
		/// <returns>A successful request</returns>
		public async Task<Timesheets> CreateTimesheetAsync(Timesheet[] requestBody)
		{
			var requestUri = "Timesheets";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Timesheets>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Use this method to create a timesheet
		/// CreateTimesheet Timesheets
		/// </summary>
		/// <returns>A successful request</returns>
		public Timesheets CreateTimesheet(Timesheet[] requestBody)
		{
			var requestUri = "Timesheets";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Timesheets>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// searches for an timesheet by unique id
		/// GetTimesheet Timesheets/{TimesheetID}
		/// </summary>
		/// <param name="TimesheetID">Timesheet id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<TimesheetObject> GetTimesheetAsync(string TimesheetID)
		{
			var requestUri = "Timesheets/"+ (TimesheetID==null? "" : Uri.EscapeDataString(TimesheetID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TimesheetObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches for an timesheet by unique id
		/// GetTimesheet Timesheets/{TimesheetID}
		/// </summary>
		/// <param name="TimesheetID">Timesheet id for single object</param>
		/// <returns>search results matching criteria</returns>
		public TimesheetObject GetTimesheet(string TimesheetID)
		{
			var requestUri = "Timesheets/"+ (TimesheetID==null? "" : Uri.EscapeDataString(TimesheetID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TimesheetObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Timesheet
		/// Update properties on a single timesheet
		/// UpdateTimesheet Timesheets/{TimesheetID}
		/// </summary>
		/// <param name="TimesheetID">Timesheet id for single object</param>
		/// <returns>A successful request</returns>
		public async Task<Timesheets> UpdateTimesheetAsync(string TimesheetID, Timesheet[] requestBody)
		{
			var requestUri = "Timesheets/"+ (TimesheetID==null? "" : Uri.EscapeDataString(TimesheetID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Timesheets>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a Timesheet
		/// Update properties on a single timesheet
		/// UpdateTimesheet Timesheets/{TimesheetID}
		/// </summary>
		/// <param name="TimesheetID">Timesheet id for single object</param>
		/// <returns>A successful request</returns>
		public Timesheets UpdateTimesheet(string TimesheetID, Timesheet[] requestBody)
		{
			var requestUri = "Timesheets/"+ (TimesheetID==null? "" : Uri.EscapeDataString(TimesheetID));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Timesheets>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
