//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public class Address
	{
		
		/// <summary>
		/// define the type of address
		/// </summary>
		public System.Nullable<AddressAddressType> AddressType { get; set; }
		
		/// <summary>
		/// max length = 500
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string AddressLine1 { get; set; }
		
		/// <summary>
		/// max length = 500
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string AddressLine2 { get; set; }
		
		/// <summary>
		/// max length = 500
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string AddressLine3 { get; set; }
		
		/// <summary>
		/// max length = 500
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string AddressLine4 { get; set; }
		
		/// <summary>
		/// max length = 255
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string City { get; set; }
		
		/// <summary>
		/// max length = 255
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Region { get; set; }
		
		/// <summary>
		/// max length = 50
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// max length = 50, [A-Z], [a-z] only
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Country { get; set; }
		
		/// <summary>
		/// max length = 255
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AttentionTo { get; set; }
	}
	
	public enum AddressAddressType
	{
		
		POBOX = 0,
		
		STREET = 1,
		
		DELIVERY = 2,
	}
	
	public class Phone
	{
		
		public System.Nullable<PhonePhoneType> PhoneType { get; set; }
		
		/// <summary>
		/// max length = 50
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// max length = 10
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string PhoneAreaCode { get; set; }
		
		/// <summary>
		/// max length = 20
		/// Max length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string PhoneCountryCode { get; set; }
	}
	
	public enum PhonePhoneType
	{
		
		DEFAULT = 0,
		
		DDI = 1,
		
		MOBILE = 2,
		
		FAX = 3,
		
		OFFICE = 4,
	}
	
	public class Accounts
	{
		
		public Account[] Accounts1 { get; set; }
	}
	
	public class Account
	{
		
		/// <summary>
		/// Customer defined alpha numeric account code e.g 200 or SALES (max length = 10)
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Code { get; set; }
		
		/// <summary>
		/// Name of account (max length = 150)
		/// Max length: 150
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(150)]
		public string Name { get; set; }
		
		/// <summary>
		/// The Xero identifier for an account � specified as a string following  the endpoint name   e.g. /297c2dc5-cc47-4afd-8ec8-74990b8761e9
		/// </summary>
		public string AccountID { get; set; }
		
		/// <summary>
		/// See Account Types
		/// </summary>
		public System.Nullable<AccountType> Type { get; set; }
		
		/// <summary>
		/// For bank accounts only (Account Type BANK)
		/// </summary>
		public string BankAccountNumber { get; set; }
		
		/// <summary>
		/// Accounts with a status of ACTIVE can be updated to ARCHIVED. See Account Status Codes
		/// </summary>
		public System.Nullable<AccountStatus> Status { get; set; }
		
		/// <summary>
		/// Description of the Account. Valid for all types of accounts except bank accounts (max length = 4000)
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// For bank accounts only. See Bank Account types
		/// </summary>
		public System.Nullable<AccountBankAccountType> BankAccountType { get; set; }
		
		/// <summary>
		/// 3 letter alpha code for the currency � see list of currency codes
		/// </summary>
		public System.Nullable<AccountCurrencyCode> CurrencyCode { get; set; }
		
		/// <summary>
		/// The tax type from TaxRates
		/// </summary>
		public string TaxType { get; set; }
		
		/// <summary>
		/// Boolean � describes whether account can have payments applied to it
		/// </summary>
		public System.Nullable<System.Boolean> EnablePaymentsToAccount { get; set; }
		
		/// <summary>
		/// Boolean � describes whether account code is available for use with expense claims
		/// </summary>
		public System.Nullable<System.Boolean> ShowInExpenseClaims { get; set; }
		
		/// <summary>
		/// See Account Class Types
		/// </summary>
		public System.Nullable<AccountClass> Class { get; set; }
		
		/// <summary>
		/// If this is a system account then this element is returned. See System Account types. Note that non-system accounts may have this element set as either �� or null.
		/// </summary>
		public System.Nullable<AccountSystemAccount> SystemAccount { get; set; }
		
		/// <summary>
		/// Shown if set
		/// </summary>
		public string ReportingCode { get; set; }
		
		/// <summary>
		/// Shown if set
		/// </summary>
		public string ReportingCodeName { get; set; }
		
		/// <summary>
		/// boolean to indicate if an account has an attachment (read only)
		/// </summary>
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// Last modified date UTC format
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// Boolean � describes whether the account is shown in the watchlist widget on the dashboard
		/// </summary>
		public System.Nullable<System.Boolean> AddToWatchlist { get; set; }
		
		/// <summary>
		/// Displays array of validation error messages from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
	}
	
	public enum AccountType
	{
		
		BANK = 0,
		
		CURRENT = 1,
		
		CURRLIAB = 2,
		
		DEPRECIATN = 3,
		
		DIRECTCOSTS = 4,
		
		EQUITY = 5,
		
		EXPENSE = 6,
		
		FIXED = 7,
		
		INVENTORY = 8,
		
		LIABILITY = 9,
		
		NONCURRENT = 10,
		
		OTHERINCOME = 11,
		
		OVERHEADS = 12,
		
		PREPAYMENT = 13,
		
		REVENUE = 14,
		
		SALES = 15,
		
		TERMLIAB = 16,
		
		PAYGLIABILITY = 17,
		
		PAYG = 18,
		
		SUPERANNUATIONEXPENSE = 19,
		
		SUPERANNUATIONLIABILITY = 20,
		
		WAGESEXPENSE = 21,
	}
	
	public enum AccountStatus
	{
		
		ACTIVE = 0,
		
		ARCHIVED = 1,
		
		DELETED = 2,
	}
	
	public enum AccountBankAccountType
	{
		
		BANK = 0,
		
		CREDITCARD = 1,
		
		PAYPAL = 2,
		
		NONE = 3,
		
		_ = 4,
	}
	
	public enum AccountCurrencyCode
	{
		
		AED = 0,
		
		AFN = 1,
		
		ALL = 2,
		
		AMD = 3,
		
		ANG = 4,
		
		AOA = 5,
		
		ARS = 6,
		
		AUD = 7,
		
		AWG = 8,
		
		AZN = 9,
		
		BAM = 10,
		
		BBD = 11,
		
		BDT = 12,
		
		BGN = 13,
		
		BHD = 14,
		
		BIF = 15,
		
		BMD = 16,
		
		BND = 17,
		
		BOB = 18,
		
		BRL = 19,
		
		BSD = 20,
		
		BTN = 21,
		
		BWP = 22,
		
		BYN = 23,
		
		BZD = 24,
		
		CAD = 25,
		
		CDF = 26,
		
		CHF = 27,
		
		CLP = 28,
		
		CNY = 29,
		
		COP = 30,
		
		CRC = 31,
		
		CUC = 32,
		
		CUP = 33,
		
		CVE = 34,
		
		CZK = 35,
		
		DJF = 36,
		
		DKK = 37,
		
		DOP = 38,
		
		DZD = 39,
		
		EGP = 40,
		
		ERN = 41,
		
		ETB = 42,
		
		EUR = 43,
		
		FJD = 44,
		
		FKP = 45,
		
		GBP = 46,
		
		GEL = 47,
		
		GGP = 48,
		
		GHS = 49,
		
		GIP = 50,
		
		GMD = 51,
		
		GNF = 52,
		
		GTQ = 53,
		
		GYD = 54,
		
		HKD = 55,
		
		HNL = 56,
		
		HRK = 57,
		
		HTG = 58,
		
		HUF = 59,
		
		IDR = 60,
		
		ILS = 61,
		
		IMP = 62,
		
		INR = 63,
		
		IQD = 64,
		
		IRR = 65,
		
		ISK = 66,
		
		JEP = 67,
		
		JMD = 68,
		
		JOD = 69,
		
		JPY = 70,
		
		KES = 71,
		
		KGS = 72,
		
		KHR = 73,
		
		KMF = 74,
		
		KPW = 75,
		
		KRW = 76,
		
		KWD = 77,
		
		KYD = 78,
		
		KZT = 79,
		
		LAK = 80,
		
		LBP = 81,
		
		LKR = 82,
		
		LRD = 83,
		
		LSL = 84,
		
		LYD = 85,
		
		MAD = 86,
		
		MDL = 87,
		
		MGA = 88,
		
		MKD = 89,
		
		MMK = 90,
		
		MNT = 91,
		
		MOP = 92,
		
		MRU = 93,
		
		MUR = 94,
		
		MVR = 95,
		
		MWK = 96,
		
		MXN = 97,
		
		MYR = 98,
		
		MZN = 99,
		
		NAD = 100,
		
		NGN = 101,
		
		NIO = 102,
		
		NOK = 103,
		
		NPR = 104,
		
		NZD = 105,
		
		OMR = 106,
		
		PAB = 107,
		
		PEN = 108,
		
		PGK = 109,
		
		PHP = 110,
		
		PKR = 111,
		
		PLN = 112,
		
		PYG = 113,
		
		QAR = 114,
		
		RON = 115,
		
		RSD = 116,
		
		RUB = 117,
		
		RWF = 118,
		
		SAR = 119,
		
		SBD = 120,
		
		SCR = 121,
		
		SDG = 122,
		
		SEK = 123,
		
		SGD = 124,
		
		SHP = 125,
		
		SLL = 126,
		
		SOS = 127,
		
		SPL = 128,
		
		SRD = 129,
		
		STN = 130,
		
		SVC = 131,
		
		SYP = 132,
		
		SZL = 133,
		
		THB = 134,
		
		TJS = 135,
		
		TMT = 136,
		
		TND = 137,
		
		TOP = 138,
		
		TRY = 139,
		
		TTD = 140,
		
		TVD = 141,
		
		TWD = 142,
		
		TZS = 143,
		
		UAH = 144,
		
		UGX = 145,
		
		USD = 146,
		
		UYU = 147,
		
		UZS = 148,
		
		VEF = 149,
		
		VND = 150,
		
		VUV = 151,
		
		WST = 152,
		
		XAF = 153,
		
		XCD = 154,
		
		XDR = 155,
		
		XOF = 156,
		
		XPF = 157,
		
		YER = 158,
		
		ZAR = 159,
		
		ZMW = 160,
		
		ZMK = 161,
		
		ZWD = 162,
		
		_ = 163,
	}
	
	public enum AccountClass
	{
		
		ASSET = 0,
		
		EQUITY = 1,
		
		EXPENSE = 2,
		
		LIABILITY = 3,
		
		REVENUE = 4,
	}
	
	public enum AccountSystemAccount
	{
		
		DEBTORS = 0,
		
		CREDITORS = 1,
		
		BANKCURRENCYGAIN = 2,
		
		GST = 3,
		
		GSTONIMPORTS = 4,
		
		HISTORICAL = 5,
		
		REALISEDCURRENCYGAIN = 6,
		
		RETAINEDEARNINGS = 7,
		
		ROUNDING = 8,
		
		TRACKINGTRANSFERS = 9,
		
		UNPAIDEXPCLM = 10,
		
		UNREALISEDCURRENCYGAIN = 11,
		
		WAGEPAYABLES = 12,
		
		CISASSETS = 13,
		
		CISASSET = 14,
		
		CISLABOUR = 15,
		
		CISLABOUREXPENSE = 16,
		
		CISLABOURINCOME = 17,
		
		CISLIABILITY = 18,
		
		CISMATERIALS = 19,
		
		_ = 20,
	}
	
	public class ValidationError
	{
		
		/// <summary>
		/// Validation error message
		/// </summary>
		public string Message { get; set; }
	}
	
	public class Attachments
	{
		
		public Attachment[] Attachments1 { get; set; }
	}
	
	public class Attachment
	{
		
		/// <summary>
		/// Unique ID for the file
		/// </summary>
		public string AttachmentID { get; set; }
		
		/// <summary>
		/// Name of the file
		/// </summary>
		public string FileName { get; set; }
		
		/// <summary>
		/// URL to the file on xero.com
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// Type of file
		/// </summary>
		public string MimeType { get; set; }
		
		/// <summary>
		/// Length of the file content
		/// </summary>
		public System.Nullable<System.Double> ContentLength { get; set; }
		
		/// <summary>
		/// Include the file with the online invoice
		/// </summary>
		public System.Nullable<System.Boolean> IncludeOnline { get; set; }
	}
	
	public class BankTransactions
	{
		
		public BankTransaction[] BankTransactions1 { get; set; }
	}
	
	public class BankTransaction
	{
		
		/// <summary>
		/// See Bank Transaction Types
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public BankTransactionType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public Contact Contact { get; set; }
		
		/// <summary>
		/// See LineItems
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public LineItem[] LineItems { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public Account BankAccount { get; set; }
		
		/// <summary>
		/// Boolean to show if transaction is reconciled
		/// </summary>
		public System.Nullable<System.Boolean> IsReconciled { get; set; }
		
		/// <summary>
		/// Date of transaction � YYYY-MM-DD
		/// </summary>
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// Reference for the transaction. Only supported for SPEND and RECEIVE transactions.
		/// </summary>
		public string Reference { get; set; }
		
		/// <summary>
		/// 3 letter alpha code for the currency � see list of currency codes
		/// </summary>
		public System.Nullable<BankTransactionCurrencyCode> CurrencyCode { get; set; }
		
		/// <summary>
		/// Exchange rate to base currency when money is spent or received. e.g.0.7500 Only used for bank transactions in non base currency. If this isn�t specified for non base currency accounts then either the user-defined rate (preference) or the XE.com day rate will be used. Setting currency is only supported on overpayments.
		/// </summary>
		public System.Nullable<System.Double> CurrencyRate { get; set; }
		
		/// <summary>
		/// URL link to a source document � shown as �Go to App Name�
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// See Bank Transaction Status Codes
		/// </summary>
		public System.Nullable<BankTransactionStatus> Status { get; set; }
		
		/// <summary>
		/// Line amounts are exclusive of tax by default if you don�t specify this element. See Line Amount Types
		/// </summary>
		public System.Nullable<BankTransactionLineAmountTypes> LineAmountTypes { get; set; }
		
		/// <summary>
		/// Total of bank transaction excluding taxes
		/// </summary>
		public System.Nullable<System.Double> SubTotal { get; set; }
		
		/// <summary>
		/// Total tax on bank transaction
		/// </summary>
		public System.Nullable<System.Double> TotalTax { get; set; }
		
		/// <summary>
		/// Total of bank transaction tax inclusive
		/// </summary>
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier for bank transaction
		/// </summary>
		public string BankTransactionID { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier for a Prepayment. This will be returned on BankTransactions with a Type of SPEND-PREPAYMENT or RECEIVE-PREPAYMENT
		/// </summary>
		public string PrepaymentID { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier for an Overpayment. This will be returned on BankTransactions with a Type of SPEND-OVERPAYMENT or RECEIVE-OVERPAYMENT
		/// </summary>
		public string OverpaymentID { get; set; }
		
		/// <summary>
		/// Last modified date UTC format
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// Boolean to indicate if a bank transaction has an attachment
		/// </summary>
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// A string to indicate if a invoice status
		/// </summary>
		public string StatusAttributeString { get; set; }
		
		/// <summary>
		/// Displays array of validation error messages from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
	}
	
	public enum BankTransactionType
	{
		
		RECEIVE = 0,
		
		RECEIVEMinusOVERPAYMENT = 1,
		
		RECEIVEMinusPREPAYMENT = 2,
		
		SPEND = 3,
		
		SPENDMinusOVERPAYMENT = 4,
		
		SPENDMinusPREPAYMENT = 5,
		
		RECEIVEMinusTRANSFER = 6,
		
		SPENDMinusTRANSFER = 7,
	}
	
	public class Contact
	{
		
		/// <summary>
		/// Xero identifier
		/// </summary>
		public string ContactID { get; set; }
		
		/// <summary>
		/// This can be updated via the API only i.e. This field is read only on the Xero contact screen, used to identify contacts in external systems (max length = 50). If the Contact Number is used, this is displayed as Contact Code in the Contacts UI in Xero.
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string ContactNumber { get; set; }
		
		/// <summary>
		/// A user defined account number. This can be updated via the API and the Xero UI (max length = 50)
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// Current status of a contact � see contact status types
		/// </summary>
		public System.Nullable<ContactContactStatus> ContactStatus { get; set; }
		
		/// <summary>
		/// Full name of contact/organisation (max length = 255)
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// First name of contact person (max length = 255)
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Last name of contact person (max length = 255)
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LastName { get; set; }
		
		/// <summary>
		/// Email address of contact person (umlauts not supported) (max length  = 255)
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Skype user name of contact
		/// </summary>
		public string SkypeUserName { get; set; }
		
		/// <summary>
		/// See contact persons
		/// </summary>
		public ContactPerson[] ContactPersons { get; set; }
		
		/// <summary>
		/// Bank account number of contact
		/// </summary>
		public string BankAccountDetails { get; set; }
		
		/// <summary>
		/// Tax number of contact � this is also known as the ABN (Australia), GST Number (New Zealand), VAT Number (UK) or Tax ID Number (US and global) in the Xero UI depending on which regionalized version of Xero you are using (max length = 50)
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string TaxNumber { get; set; }
		
		/// <summary>
		/// The tax type from TaxRates
		/// </summary>
		public string AccountsReceivableTaxType { get; set; }
		
		/// <summary>
		/// The tax type from TaxRates
		/// </summary>
		public string AccountsPayableTaxType { get; set; }
		
		/// <summary>
		/// Store certain address types for a contact � see address types
		/// </summary>
		public Address[] Addresses { get; set; }
		
		/// <summary>
		/// Store certain phone types for a contact � see phone types
		/// </summary>
		public Phone[] Phones { get; set; }
		
		/// <summary>
		/// true or false � Boolean that describes if a contact that has any AP  invoices entered against them. Cannot be set via PUT or POST � it is automatically set when an accounts payable invoice is generated against this contact.
		/// </summary>
		public System.Nullable<System.Boolean> IsSupplier { get; set; }
		
		/// <summary>
		/// true or false � Boolean that describes if a contact has any AR invoices entered against them. Cannot be set via PUT or POST � it is automatically set when an accounts receivable invoice is generated against this contact.
		/// </summary>
		public System.Nullable<System.Boolean> IsCustomer { get; set; }
		
		/// <summary>
		/// 3 letter alpha code for the currency � see list of currency codes
		/// </summary>
		public System.Nullable<ContactDefaultCurrency> DefaultCurrency { get; set; }
		
		/// <summary>
		/// Store XeroNetworkKey for contacts.
		/// </summary>
		public string XeroNetworkKey { get; set; }
		
		/// <summary>
		/// The default sales account code for contacts
		/// </summary>
		public string SalesDefaultAccountCode { get; set; }
		
		/// <summary>
		/// The default purchases account code for contacts
		/// </summary>
		public string PurchasesDefaultAccountCode { get; set; }
		
		/// <summary>
		/// The default sales tracking categories for contacts
		/// </summary>
		public SalesTrackingCategory[] SalesTrackingCategories { get; set; }
		
		/// <summary>
		/// The default purchases tracking categories for contacts
		/// </summary>
		public SalesTrackingCategory[] PurchasesTrackingCategories { get; set; }
		
		/// <summary>
		/// The name of the Tracking Category assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories
		/// </summary>
		public string TrackingCategoryName { get; set; }
		
		/// <summary>
		/// The name of the Tracking Option assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories
		/// </summary>
		public string TrackingCategoryOption { get; set; }
		
		public PaymentTerm PaymentTerms { get; set; }
		
		/// <summary>
		/// UTC timestamp of last update to contact
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// Displays which contact groups a contact is included in
		/// </summary>
		public ContactGroup[] ContactGroups { get; set; }
		
		/// <summary>
		/// Website address for contact (read only)
		/// </summary>
		public string Website { get; set; }
		
		public BrandingTheme BrandingTheme { get; set; }
		
		/// <summary>
		/// Bank details for use on a batch payment stored with each contact
		/// </summary>
		public BatchPaymentDetails BatchPayments { get; set; }
		
		/// <summary>
		/// The default discount rate for the contact (read only)
		/// </summary>
		public System.Nullable<System.Double> Discount { get; set; }
		
		/// <summary>
		/// The raw AccountsReceivable(sales invoices) and AccountsPayable(bills) outstanding and overdue amounts, not converted to base currency (read only)
		/// </summary>
		public Balances Balances { get; set; }
		
		/// <summary>
		/// Displays array of attachments from the API
		/// </summary>
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// A boolean to indicate if a contact has an attachment
		/// </summary>
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// Displays validation errors returned from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
		
		/// <summary>
		/// A boolean to indicate if a contact has an validation errors
		/// </summary>
		public System.Nullable<System.Boolean> HasValidationErrors { get; set; }
		
		/// <summary>
		/// Status of object
		/// </summary>
		public string StatusAttributeString { get; set; }
	}
	
	public enum ContactContactStatus
	{
		
		ACTIVE = 0,
		
		ARCHIVED = 1,
		
		GDPRREQUEST = 2,
	}
	
	public class ContactPerson
	{
		
		/// <summary>
		/// First name of person
		/// </summary>
		public string FirstName { get; set; }
		
		/// <summary>
		/// Last name of person
		/// </summary>
		public string LastName { get; set; }
		
		/// <summary>
		/// Email address of person
		/// </summary>
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// boolean to indicate whether contact should be included on emails with invoices etc.
		/// </summary>
		public System.Nullable<System.Boolean> IncludeInEmails { get; set; }
	}
	
	public enum ContactDefaultCurrency
	{
		
		AED = 0,
		
		AFN = 1,
		
		ALL = 2,
		
		AMD = 3,
		
		ANG = 4,
		
		AOA = 5,
		
		ARS = 6,
		
		AUD = 7,
		
		AWG = 8,
		
		AZN = 9,
		
		BAM = 10,
		
		BBD = 11,
		
		BDT = 12,
		
		BGN = 13,
		
		BHD = 14,
		
		BIF = 15,
		
		BMD = 16,
		
		BND = 17,
		
		BOB = 18,
		
		BRL = 19,
		
		BSD = 20,
		
		BTN = 21,
		
		BWP = 22,
		
		BYN = 23,
		
		BZD = 24,
		
		CAD = 25,
		
		CDF = 26,
		
		CHF = 27,
		
		CLP = 28,
		
		CNY = 29,
		
		COP = 30,
		
		CRC = 31,
		
		CUC = 32,
		
		CUP = 33,
		
		CVE = 34,
		
		CZK = 35,
		
		DJF = 36,
		
		DKK = 37,
		
		DOP = 38,
		
		DZD = 39,
		
		EGP = 40,
		
		ERN = 41,
		
		ETB = 42,
		
		EUR = 43,
		
		FJD = 44,
		
		FKP = 45,
		
		GBP = 46,
		
		GEL = 47,
		
		GGP = 48,
		
		GHS = 49,
		
		GIP = 50,
		
		GMD = 51,
		
		GNF = 52,
		
		GTQ = 53,
		
		GYD = 54,
		
		HKD = 55,
		
		HNL = 56,
		
		HRK = 57,
		
		HTG = 58,
		
		HUF = 59,
		
		IDR = 60,
		
		ILS = 61,
		
		IMP = 62,
		
		INR = 63,
		
		IQD = 64,
		
		IRR = 65,
		
		ISK = 66,
		
		JEP = 67,
		
		JMD = 68,
		
		JOD = 69,
		
		JPY = 70,
		
		KES = 71,
		
		KGS = 72,
		
		KHR = 73,
		
		KMF = 74,
		
		KPW = 75,
		
		KRW = 76,
		
		KWD = 77,
		
		KYD = 78,
		
		KZT = 79,
		
		LAK = 80,
		
		LBP = 81,
		
		LKR = 82,
		
		LRD = 83,
		
		LSL = 84,
		
		LYD = 85,
		
		MAD = 86,
		
		MDL = 87,
		
		MGA = 88,
		
		MKD = 89,
		
		MMK = 90,
		
		MNT = 91,
		
		MOP = 92,
		
		MRU = 93,
		
		MUR = 94,
		
		MVR = 95,
		
		MWK = 96,
		
		MXN = 97,
		
		MYR = 98,
		
		MZN = 99,
		
		NAD = 100,
		
		NGN = 101,
		
		NIO = 102,
		
		NOK = 103,
		
		NPR = 104,
		
		NZD = 105,
		
		OMR = 106,
		
		PAB = 107,
		
		PEN = 108,
		
		PGK = 109,
		
		PHP = 110,
		
		PKR = 111,
		
		PLN = 112,
		
		PYG = 113,
		
		QAR = 114,
		
		RON = 115,
		
		RSD = 116,
		
		RUB = 117,
		
		RWF = 118,
		
		SAR = 119,
		
		SBD = 120,
		
		SCR = 121,
		
		SDG = 122,
		
		SEK = 123,
		
		SGD = 124,
		
		SHP = 125,
		
		SLL = 126,
		
		SOS = 127,
		
		SPL = 128,
		
		SRD = 129,
		
		STN = 130,
		
		SVC = 131,
		
		SYP = 132,
		
		SZL = 133,
		
		THB = 134,
		
		TJS = 135,
		
		TMT = 136,
		
		TND = 137,
		
		TOP = 138,
		
		TRY = 139,
		
		TTD = 140,
		
		TVD = 141,
		
		TWD = 142,
		
		TZS = 143,
		
		UAH = 144,
		
		UGX = 145,
		
		USD = 146,
		
		UYU = 147,
		
		UZS = 148,
		
		VEF = 149,
		
		VND = 150,
		
		VUV = 151,
		
		WST = 152,
		
		XAF = 153,
		
		XCD = 154,
		
		XDR = 155,
		
		XOF = 156,
		
		XPF = 157,
		
		YER = 158,
		
		ZAR = 159,
		
		ZMW = 160,
		
		ZMK = 161,
		
		ZWD = 162,
		
		_ = 163,
	}
	
	public class SalesTrackingCategory
	{
		
		/// <summary>
		/// The default sales tracking category name for contacts
		/// </summary>
		public string TrackingCategoryName { get; set; }
		
		/// <summary>
		/// The default purchase tracking category name for contacts
		/// </summary>
		public string TrackingOptionName { get; set; }
	}
	
	public class PaymentTerm
	{
		
		public Bill Bills { get; set; }
		
		public Bill Sales { get; set; }
	}
	
	public class Bill
	{
		
		/// <summary>
		/// Day of Month (0-31)
		/// </summary>
		public System.Nullable<System.Int32> Day { get; set; }
		
		public System.Nullable<BillType> Type { get; set; }
	}
	
	public enum BillType
	{
		
		DAYSAFTERBILLDATE = 0,
		
		DAYSAFTERBILLMONTH = 1,
		
		OFCURRENTMONTH = 2,
		
		OFFOLLOWINGMONTH = 3,
	}
	
	public class ContactGroup
	{
		
		/// <summary>
		/// The Name of the contact group. Required when creating a new contact  group
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The Status of a contact group. To delete a contact group update the status to DELETED. Only contact groups with a status of ACTIVE are returned on GETs.
		/// </summary>
		public System.Nullable<ContactGroupStatus> Status { get; set; }
		
		/// <summary>
		/// The Xero identifier for an contact group � specified as a string following the endpoint name. e.g. /297c2dc5-cc47-4afd-8ec8-74990b8761e9
		/// </summary>
		public string ContactGroupID { get; set; }
		
		/// <summary>
		/// The ContactID and Name of Contacts in a contact group. Returned on GETs when the ContactGroupID is supplied in the URL.
		/// </summary>
		public Contact[] Contacts { get; set; }
	}
	
	public enum ContactGroupStatus
	{
		
		ACTIVE = 0,
		
		DELETED = 1,
	}
	
	public class BrandingTheme
	{
		
		/// <summary>
		/// Xero identifier
		/// </summary>
		public string BrandingThemeID { get; set; }
		
		/// <summary>
		/// Name of branding theme
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The location of the image file used as the logo on this branding theme
		/// </summary>
		public string LogoUrl { get; set; }
		
		/// <summary>
		/// Always INVOICE
		/// </summary>
		public System.Nullable<BrandingThemeType> Type { get; set; }
		
		/// <summary>
		/// Integer � ranked order of branding theme. The default branding theme has a value of 0
		/// </summary>
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		/// <summary>
		/// UTC timestamp of creation date of branding theme
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDateUTC { get; set; }
	}
	
	public enum BrandingThemeType
	{
		
		INVOICE = 0,
	}
	
	/// <summary>
	/// The raw AccountsReceivable(sales invoices) and AccountsPayable(bills) outstanding and overdue amounts, not converted to base currency (read only)
	/// </summary>
	public class Balances
	{
		
		public AccountsReceivable AccountsReceivable { get; set; }
		
		public AccountsPayable AccountsPayable { get; set; }
	}
	
	public class AccountsReceivable
	{
		
		public System.Nullable<System.Double> Outstanding { get; set; }
		
		public System.Nullable<System.Double> Overdue { get; set; }
	}
	
	public class AccountsPayable
	{
		
		public System.Nullable<System.Double> Outstanding { get; set; }
		
		public System.Nullable<System.Double> Overdue { get; set; }
	}
	
	public class LineItem
	{
		
		/// <summary>
		/// LineItem unique ID
		/// </summary>
		public string LineItemID { get; set; }
		
		/// <summary>
		/// Description needs to be at least 1 char long. A line item with just a description (i.e no unit amount or quantity) can be created by specifying just a <Description> element that contains at least 1 character
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// LineItem Quantity
		/// </summary>
		public System.Nullable<System.Double> Quantity { get; set; }
		
		/// <summary>
		/// LineItem Unit Amount
		/// </summary>
		public System.Nullable<System.Double> UnitAmount { get; set; }
		
		/// <summary>
		/// See Items
		/// </summary>
		public string ItemCode { get; set; }
		
		/// <summary>
		/// See Accounts
		/// </summary>
		public string AccountCode { get; set; }
		
		/// <summary>
		/// The tax type from TaxRates
		/// </summary>
		public string TaxType { get; set; }
		
		/// <summary>
		/// The tax amount is auto calculated as a percentage of the line amount (see below) based on the tax rate. This value can be overriden if the calculated <TaxAmount> is not correct.
		/// </summary>
		public System.Nullable<System.Double> TaxAmount { get; set; }
		
		/// <summary>
		/// If you wish to omit either of the <Quantity> or <UnitAmount> you can provide a LineAmount and Xero will calculate the missing amount for you. The line amount reflects the discounted price if a DiscountRate has been used . i.e LineAmount = Quantity * Unit Amount * ((100 � DiscountRate)/100)
		/// </summary>
		public System.Nullable<System.Double> LineAmount { get; set; }
		
		/// <summary>
		/// Optional Tracking Category � see Tracking.  Any LineItem can have a  maximum of 2 <TrackingCategory> elements.
		/// </summary>
		public LineItemTracking[] Tracking { get; set; }
		
		/// <summary>
		/// Percentage discount being applied to a line item (only supported on  ACCREC invoices � ACC PAY invoices and credit notes in Xero do not support discounts
		/// </summary>
		public System.Nullable<System.Double> DiscountRate { get; set; }
		
		/// <summary>
		/// Discount amount being applied to a line item. Only supported on ACCREC invoices - ACCPAY invoices and credit notes in Xero do not support discounts.
		/// </summary>
		public System.Nullable<System.Double> DiscountAmount { get; set; }
		
		/// <summary>
		/// The Xero identifier for a Repeating Invoice
		/// </summary>
		public string RepeatingInvoiceID { get; set; }
	}
	
	public class LineItemTracking
	{
		
		/// <summary>
		/// The Xero identifier for a tracking category
		/// </summary>
		public string TrackingCategoryID { get; set; }
		
		/// <summary>
		/// The Xero identifier for a tracking category option
		/// </summary>
		public string TrackingOptionID { get; set; }
		
		/// <summary>
		/// The name of the tracking category
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Name { get; set; }
		
		/// <summary>
		/// See Tracking Options
		/// </summary>
		public string Option { get; set; }
	}
	
	public enum BankTransactionCurrencyCode
	{
		
		AED = 0,
		
		AFN = 1,
		
		ALL = 2,
		
		AMD = 3,
		
		ANG = 4,
		
		AOA = 5,
		
		ARS = 6,
		
		AUD = 7,
		
		AWG = 8,
		
		AZN = 9,
		
		BAM = 10,
		
		BBD = 11,
		
		BDT = 12,
		
		BGN = 13,
		
		BHD = 14,
		
		BIF = 15,
		
		BMD = 16,
		
		BND = 17,
		
		BOB = 18,
		
		BRL = 19,
		
		BSD = 20,
		
		BTN = 21,
		
		BWP = 22,
		
		BYN = 23,
		
		BZD = 24,
		
		CAD = 25,
		
		CDF = 26,
		
		CHF = 27,
		
		CLP = 28,
		
		CNY = 29,
		
		COP = 30,
		
		CRC = 31,
		
		CUC = 32,
		
		CUP = 33,
		
		CVE = 34,
		
		CZK = 35,
		
		DJF = 36,
		
		DKK = 37,
		
		DOP = 38,
		
		DZD = 39,
		
		EGP = 40,
		
		ERN = 41,
		
		ETB = 42,
		
		EUR = 43,
		
		FJD = 44,
		
		FKP = 45,
		
		GBP = 46,
		
		GEL = 47,
		
		GGP = 48,
		
		GHS = 49,
		
		GIP = 50,
		
		GMD = 51,
		
		GNF = 52,
		
		GTQ = 53,
		
		GYD = 54,
		
		HKD = 55,
		
		HNL = 56,
		
		HRK = 57,
		
		HTG = 58,
		
		HUF = 59,
		
		IDR = 60,
		
		ILS = 61,
		
		IMP = 62,
		
		INR = 63,
		
		IQD = 64,
		
		IRR = 65,
		
		ISK = 66,
		
		JEP = 67,
		
		JMD = 68,
		
		JOD = 69,
		
		JPY = 70,
		
		KES = 71,
		
		KGS = 72,
		
		KHR = 73,
		
		KMF = 74,
		
		KPW = 75,
		
		KRW = 76,
		
		KWD = 77,
		
		KYD = 78,
		
		KZT = 79,
		
		LAK = 80,
		
		LBP = 81,
		
		LKR = 82,
		
		LRD = 83,
		
		LSL = 84,
		
		LYD = 85,
		
		MAD = 86,
		
		MDL = 87,
		
		MGA = 88,
		
		MKD = 89,
		
		MMK = 90,
		
		MNT = 91,
		
		MOP = 92,
		
		MRU = 93,
		
		MUR = 94,
		
		MVR = 95,
		
		MWK = 96,
		
		MXN = 97,
		
		MYR = 98,
		
		MZN = 99,
		
		NAD = 100,
		
		NGN = 101,
		
		NIO = 102,
		
		NOK = 103,
		
		NPR = 104,
		
		NZD = 105,
		
		OMR = 106,
		
		PAB = 107,
		
		PEN = 108,
		
		PGK = 109,
		
		PHP = 110,
		
		PKR = 111,
		
		PLN = 112,
		
		PYG = 113,
		
		QAR = 114,
		
		RON = 115,
		
		RSD = 116,
		
		RUB = 117,
		
		RWF = 118,
		
		SAR = 119,
		
		SBD = 120,
		
		SCR = 121,
		
		SDG = 122,
		
		SEK = 123,
		
		SGD = 124,
		
		SHP = 125,
		
		SLL = 126,
		
		SOS = 127,
		
		SPL = 128,
		
		SRD = 129,
		
		STN = 130,
		
		SVC = 131,
		
		SYP = 132,
		
		SZL = 133,
		
		THB = 134,
		
		TJS = 135,
		
		TMT = 136,
		
		TND = 137,
		
		TOP = 138,
		
		TRY = 139,
		
		TTD = 140,
		
		TVD = 141,
		
		TWD = 142,
		
		TZS = 143,
		
		UAH = 144,
		
		UGX = 145,
		
		USD = 146,
		
		UYU = 147,
		
		UZS = 148,
		
		VEF = 149,
		
		VND = 150,
		
		VUV = 151,
		
		WST = 152,
		
		XAF = 153,
		
		XCD = 154,
		
		XDR = 155,
		
		XOF = 156,
		
		XPF = 157,
		
		YER = 158,
		
		ZAR = 159,
		
		ZMW = 160,
		
		ZMK = 161,
		
		ZWD = 162,
		
		_ = 163,
	}
	
	public enum BankTransactionStatus
	{
		
		AUTHORISED = 0,
		
		DELETED = 1,
		
		VOIDED = 2,
	}
	
	public enum BankTransactionLineAmountTypes
	{
		
		Exclusive = 0,
		
		Inclusive = 1,
		
		NoTax = 2,
	}
	
	/// <summary>
	/// Line amounts are exclusive of tax by default if you don�t specify this element. See Line Amount Types
	/// </summary>
	public enum LineAmountTypes
	{
		
		Exclusive = 0,
		
		Inclusive = 1,
		
		NoTax = 2,
	}
	
	public class BankTransfers
	{
		
		public BankTransfer[] BankTransfers1 { get; set; }
	}
	
	public class BankTransfer
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public Account FromBankAccount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public Account ToBankAccount { get; set; }
		
		/// <summary>
		/// amount of the transaction
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public double Amount { get; set; }
		
		/// <summary>
		/// The date of the Transfer YYYY-MM-DD
		/// </summary>
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// The identifier of the Bank Transfer
		/// </summary>
		public string BankTransferID { get; set; }
		
		/// <summary>
		/// The currency rate
		/// </summary>
		public System.Nullable<System.Double> CurrencyRate { get; set; }
		
		/// <summary>
		/// The Bank Transaction ID for the source account
		/// </summary>
		public string FromBankTransactionID { get; set; }
		
		/// <summary>
		/// The Bank Transaction ID for the destination account
		/// </summary>
		public string ToBankTransactionID { get; set; }
		
		/// <summary>
		/// Boolean to indicate if a Bank Transfer has an attachment
		/// </summary>
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// UTC timestamp of creation date of bank transfer
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDateUTC { get; set; }
		
		/// <summary>
		/// Displays array of validation error messages from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
	}
	
	public class BatchPayments
	{
		
		public BatchPayment[] BatchPayments1 { get; set; }
	}
	
	public class BatchPayment
	{
		
		public Account Account { get; set; }
		
		/// <summary>
		/// (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
		/// Max length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public string Reference { get; set; }
		
		/// <summary>
		/// (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
		/// Max length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public string Particulars { get; set; }
		
		/// <summary>
		/// (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
		/// Max length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public string Code { get; set; }
		
		/// <summary>
		/// (Non-NZ Only) These details are sent to the org�s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length = 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string Details { get; set; }
		
		/// <summary>
		/// (UK Only) Only shows on the statement line in Xero. Max length =18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string Narrative { get; set; }
		
		/// <summary>
		/// The Xero generated unique identifier for the bank transaction (read-only)
		/// </summary>
		public string BatchPaymentID { get; set; }
		
		/// <summary>
		/// Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
		/// </summary>
		public string DateString { get; set; }
		
		/// <summary>
		/// Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
		/// </summary>
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00
		/// </summary>
		public System.Nullable<System.Double> Amount { get; set; }
		
		public Payment[] Payments { get; set; }
		
		/// <summary>
		/// PAYBATCH for bill payments or RECBATCH for sales invoice payments (read-only)
		/// </summary>
		public System.Nullable<BatchPaymentType> Type { get; set; }
		
		/// <summary>
		/// AUTHORISED or DELETED (read-only). New batch payments will have a status of AUTHORISED. It is not possible to delete batch payments via the API.
		/// </summary>
		public PaymentStatus Status { get; set; }
		
		/// <summary>
		/// The total of the payments that make up the batch (read-only)
		/// </summary>
		public string TotalAmount { get; set; }
		
		/// <summary>
		/// UTC timestamp of last update to the payment
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// Booelan that tells you if the batch payment has been reconciled (read-only)
		/// </summary>
		public string IsReconciled { get; set; }
	}
	
	public class Payment
	{
		
		public Invoice Invoice { get; set; }
		
		public CreditNote CreditNote { get; set; }
		
		public Prepayment Prepayment { get; set; }
		
		public Overpayment Overpayment { get; set; }
		
		/// <summary>
		/// Number of invoice or credit note you are applying payment to e.g.INV-4003
		/// </summary>
		public string InvoiceNumber { get; set; }
		
		/// <summary>
		/// Number of invoice or credit note you are applying payment to e.g. INV-4003
		/// </summary>
		public string CreditNoteNumber { get; set; }
		
		public Account Account { get; set; }
		
		/// <summary>
		/// Code of account you are using to make the payment e.g. 001 (note- not all accounts have a code value)
		/// </summary>
		public string Code { get; set; }
		
		/// <summary>
		/// Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
		/// </summary>
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// Exchange rate when payment is received. Only used for non base currency invoices and credit notes e.g. 0.7500
		/// </summary>
		public System.Nullable<System.Double> CurrencyRate { get; set; }
		
		/// <summary>
		/// The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00
		/// </summary>
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// An optional description for the payment e.g. Direct Debit
		/// </summary>
		public string Reference { get; set; }
		
		/// <summary>
		/// An optional parameter for the payment. A boolean indicating whether you would like the payment to be created as reconciled when using PUT, or whether a payment has been reconciled when using GET
		/// </summary>
		public System.Nullable<System.Boolean> IsReconciled { get; set; }
		
		/// <summary>
		/// The status of the payment.
		/// </summary>
		public System.Nullable<PaymentStatus> Status { get; set; }
		
		/// <summary>
		/// See Payment Types.
		/// </summary>
		public System.Nullable<PaymentPaymentType> PaymentType { get; set; }
		
		/// <summary>
		/// UTC timestamp of last update to the payment
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// The Xero identifier for an Payment e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
		/// </summary>
		public string PaymentID { get; set; }
		
		/// <summary>
		/// The suppliers bank account number the payment is being made to
		/// </summary>
		public string BankAccountNumber { get; set; }
		
		/// <summary>
		/// The suppliers bank account number the payment is being made to
		/// </summary>
		public string Particulars { get; set; }
		
		/// <summary>
		/// The information to appear on the supplier's bank account
		/// </summary>
		public string Details { get; set; }
		
		/// <summary>
		/// A boolean to indicate if a contact has an validation errors
		/// </summary>
		public System.Nullable<System.Boolean> HasAccount { get; set; }
		
		/// <summary>
		/// A boolean to indicate if a contact has an validation errors
		/// </summary>
		public System.Nullable<System.Boolean> HasValidationErrors { get; set; }
		
		/// <summary>
		/// A string to indicate if a invoice status
		/// </summary>
		public string StatusAttributeString { get; set; }
		
		/// <summary>
		/// Displays array of validation error messages from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
	}
	
	public class Invoice
	{
		
		/// <summary>
		/// See Invoice Types
		/// </summary>
		public System.Nullable<InvoiceType> Type { get; set; }
		
		public Contact Contact { get; set; }
		
		/// <summary>
		/// See LineItems
		/// </summary>
		public LineItem[] LineItems { get; set; }
		
		/// <summary>
		/// Date invoice was issued � YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation
		/// </summary>
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// Date invoice is due � YYYY-MM-DD
		/// </summary>
		public System.Nullable<System.DateOnly> DueDate { get; set; }
		
		/// <summary>
		/// Line amounts are exclusive of tax by default if you don�t specify this element. See Line Amount Types
		/// </summary>
		public BankTransactionLineAmountTypes LineAmountTypes { get; set; }
		
		/// <summary>
		/// ACCREC � Unique alpha numeric code identifying invoice (when missing will auto-generate from your Organisation Invoice Settings) (max length = 255)
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string InvoiceNumber { get; set; }
		
		/// <summary>
		/// ACCREC only � additional reference number (max length = 255)
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Reference { get; set; }
		
		/// <summary>
		/// See BrandingThemes
		/// </summary>
		public string BrandingThemeID { get; set; }
		
		/// <summary>
		/// URL link to a source document � shown as �Go to [appName]� in the Xero app
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// 3 letter alpha code for the currency � see list of currency codes
		/// </summary>
		public System.Nullable<InvoiceCurrencyCode> CurrencyCode { get; set; }
		
		/// <summary>
		/// The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used. (max length = [18].[6])
		/// </summary>
		public System.Nullable<System.Double> CurrencyRate { get; set; }
		
		/// <summary>
		/// See Invoice Status Codes
		/// </summary>
		public System.Nullable<InvoiceStatus> Status { get; set; }
		
		/// <summary>
		/// Boolean to set whether the invoice in the Xero app should be marked as �sent�. This can be set only on invoices that have been approved
		/// </summary>
		public System.Nullable<System.Boolean> SentToContact { get; set; }
		
		/// <summary>
		/// Shown on sales invoices (Accounts Receivable) when this has been set
		/// </summary>
		public System.Nullable<System.DateOnly> ExpectedPaymentDate { get; set; }
		
		/// <summary>
		/// Shown on bills (Accounts Payable) when this has been set
		/// </summary>
		public System.Nullable<System.DateOnly> PlannedPaymentDate { get; set; }
		
		/// <summary>
		/// CIS deduction for UK contractors
		/// </summary>
		public System.Nullable<System.Double> CISDeduction { get; set; }
		
		/// <summary>
		/// Total of invoice excluding taxes
		/// </summary>
		public System.Nullable<System.Double> SubTotal { get; set; }
		
		/// <summary>
		/// Total tax on invoice
		/// </summary>
		public System.Nullable<System.Double> TotalTax { get; set; }
		
		/// <summary>
		/// Total of Invoice tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn�t equal the sum of the LineAmounts
		/// </summary>
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// Total of discounts applied on the invoice line items
		/// </summary>
		public System.Nullable<System.Double> TotalDiscount { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier for invoice
		/// </summary>
		public string InvoiceID { get; set; }
		
		/// <summary>
		/// boolean to indicate if an invoice has an attachment
		/// </summary>
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// boolean to indicate if an invoice has a discount
		/// </summary>
		public System.Nullable<System.Boolean> IsDiscounted { get; set; }
		
		/// <summary>
		/// See Payments
		/// </summary>
		public Payment[] Payments { get; set; }
		
		/// <summary>
		/// See Prepayments
		/// </summary>
		public Prepayment[] Prepayments { get; set; }
		
		/// <summary>
		/// See Overpayments
		/// </summary>
		public Overpayment[] Overpayments { get; set; }
		
		/// <summary>
		/// Amount remaining to be paid on invoice
		/// </summary>
		public System.Nullable<System.Double> AmountDue { get; set; }
		
		/// <summary>
		/// Sum of payments received for invoice
		/// </summary>
		public System.Nullable<System.Double> AmountPaid { get; set; }
		
		/// <summary>
		/// The date the invoice was fully paid. Only returned on fully paid invoices
		/// </summary>
		public System.Nullable<System.DateOnly> FullyPaidOnDate { get; set; }
		
		/// <summary>
		/// Sum of all credit notes, over-payments and pre-payments applied to invoice
		/// </summary>
		public System.Nullable<System.Double> AmountCredited { get; set; }
		
		/// <summary>
		/// Last modified date UTC format
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// Details of credit notes that have been applied to an invoice
		/// </summary>
		public CreditNote[] CreditNotes { get; set; }
		
		/// <summary>
		/// Displays array of attachments from the API
		/// </summary>
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// A boolean to indicate if a invoice has an validation errors
		/// </summary>
		public System.Nullable<System.Boolean> HasErrors { get; set; }
		
		/// <summary>
		/// A string to indicate if a invoice status
		/// </summary>
		public string StatusAttributeString { get; set; }
		
		/// <summary>
		/// Displays array of validation error messages from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
		
		/// <summary>
		/// Displays array of warning messages from the API
		/// </summary>
		public ValidationError[] Warnings { get; set; }
	}
	
	public enum InvoiceType
	{
		
		ACCPAY = 0,
		
		ACCPAYCREDIT = 1,
		
		APOVERPAYMENT = 2,
		
		APPREPAYMENT = 3,
		
		ACCREC = 4,
		
		ACCRECCREDIT = 5,
		
		AROVERPAYMENT = 6,
		
		ARPREPAYMENT = 7,
	}
	
	public enum InvoiceCurrencyCode
	{
		
		AED = 0,
		
		AFN = 1,
		
		ALL = 2,
		
		AMD = 3,
		
		ANG = 4,
		
		AOA = 5,
		
		ARS = 6,
		
		AUD = 7,
		
		AWG = 8,
		
		AZN = 9,
		
		BAM = 10,
		
		BBD = 11,
		
		BDT = 12,
		
		BGN = 13,
		
		BHD = 14,
		
		BIF = 15,
		
		BMD = 16,
		
		BND = 17,
		
		BOB = 18,
		
		BRL = 19,
		
		BSD = 20,
		
		BTN = 21,
		
		BWP = 22,
		
		BYN = 23,
		
		BZD = 24,
		
		CAD = 25,
		
		CDF = 26,
		
		CHF = 27,
		
		CLP = 28,
		
		CNY = 29,
		
		COP = 30,
		
		CRC = 31,
		
		CUC = 32,
		
		CUP = 33,
		
		CVE = 34,
		
		CZK = 35,
		
		DJF = 36,
		
		DKK = 37,
		
		DOP = 38,
		
		DZD = 39,
		
		EGP = 40,
		
		ERN = 41,
		
		ETB = 42,
		
		EUR = 43,
		
		FJD = 44,
		
		FKP = 45,
		
		GBP = 46,
		
		GEL = 47,
		
		GGP = 48,
		
		GHS = 49,
		
		GIP = 50,
		
		GMD = 51,
		
		GNF = 52,
		
		GTQ = 53,
		
		GYD = 54,
		
		HKD = 55,
		
		HNL = 56,
		
		HRK = 57,
		
		HTG = 58,
		
		HUF = 59,
		
		IDR = 60,
		
		ILS = 61,
		
		IMP = 62,
		
		INR = 63,
		
		IQD = 64,
		
		IRR = 65,
		
		ISK = 66,
		
		JEP = 67,
		
		JMD = 68,
		
		JOD = 69,
		
		JPY = 70,
		
		KES = 71,
		
		KGS = 72,
		
		KHR = 73,
		
		KMF = 74,
		
		KPW = 75,
		
		KRW = 76,
		
		KWD = 77,
		
		KYD = 78,
		
		KZT = 79,
		
		LAK = 80,
		
		LBP = 81,
		
		LKR = 82,
		
		LRD = 83,
		
		LSL = 84,
		
		LYD = 85,
		
		MAD = 86,
		
		MDL = 87,
		
		MGA = 88,
		
		MKD = 89,
		
		MMK = 90,
		
		MNT = 91,
		
		MOP = 92,
		
		MRU = 93,
		
		MUR = 94,
		
		MVR = 95,
		
		MWK = 96,
		
		MXN = 97,
		
		MYR = 98,
		
		MZN = 99,
		
		NAD = 100,
		
		NGN = 101,
		
		NIO = 102,
		
		NOK = 103,
		
		NPR = 104,
		
		NZD = 105,
		
		OMR = 106,
		
		PAB = 107,
		
		PEN = 108,
		
		PGK = 109,
		
		PHP = 110,
		
		PKR = 111,
		
		PLN = 112,
		
		PYG = 113,
		
		QAR = 114,
		
		RON = 115,
		
		RSD = 116,
		
		RUB = 117,
		
		RWF = 118,
		
		SAR = 119,
		
		SBD = 120,
		
		SCR = 121,
		
		SDG = 122,
		
		SEK = 123,
		
		SGD = 124,
		
		SHP = 125,
		
		SLL = 126,
		
		SOS = 127,
		
		SPL = 128,
		
		SRD = 129,
		
		STN = 130,
		
		SVC = 131,
		
		SYP = 132,
		
		SZL = 133,
		
		THB = 134,
		
		TJS = 135,
		
		TMT = 136,
		
		TND = 137,
		
		TOP = 138,
		
		TRY = 139,
		
		TTD = 140,
		
		TVD = 141,
		
		TWD = 142,
		
		TZS = 143,
		
		UAH = 144,
		
		UGX = 145,
		
		USD = 146,
		
		UYU = 147,
		
		UZS = 148,
		
		VEF = 149,
		
		VND = 150,
		
		VUV = 151,
		
		WST = 152,
		
		XAF = 153,
		
		XCD = 154,
		
		XDR = 155,
		
		XOF = 156,
		
		XPF = 157,
		
		YER = 158,
		
		ZAR = 159,
		
		ZMW = 160,
		
		ZMK = 161,
		
		ZWD = 162,
		
		_ = 163,
	}
	
	public enum InvoiceStatus
	{
		
		DRAFT = 0,
		
		SUBMITTED = 1,
		
		DELETED = 2,
		
		AUTHORISED = 3,
		
		PAID = 4,
		
		VOIDED = 5,
	}
	
	public class Prepayment
	{
		
		/// <summary>
		/// See Prepayment Types
		/// </summary>
		public System.Nullable<PrepaymentType> Type { get; set; }
		
		public Contact Contact { get; set; }
		
		/// <summary>
		/// The date the prepayment is created YYYY-MM-DD
		/// </summary>
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// See Prepayment Status Codes
		/// </summary>
		public System.Nullable<PrepaymentStatus> Status { get; set; }
		
		/// <summary>
		/// Line amounts are exclusive of tax by default if you don�t specify this element. See Line Amount Types
		/// </summary>
		public BankTransactionLineAmountTypes LineAmountTypes { get; set; }
		
		/// <summary>
		/// See Prepayment Line Items
		/// </summary>
		public LineItem[] LineItems { get; set; }
		
		/// <summary>
		/// The subtotal of the prepayment excluding taxes
		/// </summary>
		public System.Nullable<System.Double> SubTotal { get; set; }
		
		/// <summary>
		/// The total tax on the prepayment
		/// </summary>
		public System.Nullable<System.Double> TotalTax { get; set; }
		
		/// <summary>
		/// The total of the prepayment(subtotal + total tax)
		/// </summary>
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// Returns Invoice number field. Reference field isn't available.
		/// </summary>
		public string Reference { get; set; }
		
		/// <summary>
		/// UTC timestamp of last update to the prepayment
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// 3 letter alpha code for the currency � see list of currency codes
		/// </summary>
		public System.Nullable<PrepaymentCurrencyCode> CurrencyCode { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier
		/// </summary>
		public string PrepaymentID { get; set; }
		
		/// <summary>
		/// The currency rate for a multicurrency prepayment. If no rate is specified, the XE.com day rate is used
		/// </summary>
		public System.Nullable<System.Double> CurrencyRate { get; set; }
		
		/// <summary>
		/// The remaining credit balance on the prepayment
		/// </summary>
		public System.Nullable<System.Double> RemainingCredit { get; set; }
		
		/// <summary>
		/// See Allocations
		/// </summary>
		public Allocation[] Allocations { get; set; }
		
		/// <summary>
		/// The amount of applied to an invoice
		/// </summary>
		public System.Nullable<System.Double> AppliedAmount { get; set; }
		
		/// <summary>
		/// boolean to indicate if a prepayment has an attachment
		/// </summary>
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// See Attachments
		/// </summary>
		public Attachment[] Attachments { get; set; }
	}
	
	public enum PrepaymentType
	{
		
		RECEIVEMinusPREPAYMENT = 0,
		
		SPENDMinusPREPAYMENT = 1,
		
		ARPREPAYMENT = 2,
		
		APPREPAYMENT = 3,
	}
	
	public enum PrepaymentStatus
	{
		
		AUTHORISED = 0,
		
		PAID = 1,
		
		VOIDED = 2,
	}
	
	public enum PrepaymentCurrencyCode
	{
		
		AED = 0,
		
		AFN = 1,
		
		ALL = 2,
		
		AMD = 3,
		
		ANG = 4,
		
		AOA = 5,
		
		ARS = 6,
		
		AUD = 7,
		
		AWG = 8,
		
		AZN = 9,
		
		BAM = 10,
		
		BBD = 11,
		
		BDT = 12,
		
		BGN = 13,
		
		BHD = 14,
		
		BIF = 15,
		
		BMD = 16,
		
		BND = 17,
		
		BOB = 18,
		
		BRL = 19,
		
		BSD = 20,
		
		BTN = 21,
		
		BWP = 22,
		
		BYN = 23,
		
		BZD = 24,
		
		CAD = 25,
		
		CDF = 26,
		
		CHF = 27,
		
		CLP = 28,
		
		CNY = 29,
		
		COP = 30,
		
		CRC = 31,
		
		CUC = 32,
		
		CUP = 33,
		
		CVE = 34,
		
		CZK = 35,
		
		DJF = 36,
		
		DKK = 37,
		
		DOP = 38,
		
		DZD = 39,
		
		EGP = 40,
		
		ERN = 41,
		
		ETB = 42,
		
		EUR = 43,
		
		FJD = 44,
		
		FKP = 45,
		
		GBP = 46,
		
		GEL = 47,
		
		GGP = 48,
		
		GHS = 49,
		
		GIP = 50,
		
		GMD = 51,
		
		GNF = 52,
		
		GTQ = 53,
		
		GYD = 54,
		
		HKD = 55,
		
		HNL = 56,
		
		HRK = 57,
		
		HTG = 58,
		
		HUF = 59,
		
		IDR = 60,
		
		ILS = 61,
		
		IMP = 62,
		
		INR = 63,
		
		IQD = 64,
		
		IRR = 65,
		
		ISK = 66,
		
		JEP = 67,
		
		JMD = 68,
		
		JOD = 69,
		
		JPY = 70,
		
		KES = 71,
		
		KGS = 72,
		
		KHR = 73,
		
		KMF = 74,
		
		KPW = 75,
		
		KRW = 76,
		
		KWD = 77,
		
		KYD = 78,
		
		KZT = 79,
		
		LAK = 80,
		
		LBP = 81,
		
		LKR = 82,
		
		LRD = 83,
		
		LSL = 84,
		
		LYD = 85,
		
		MAD = 86,
		
		MDL = 87,
		
		MGA = 88,
		
		MKD = 89,
		
		MMK = 90,
		
		MNT = 91,
		
		MOP = 92,
		
		MRU = 93,
		
		MUR = 94,
		
		MVR = 95,
		
		MWK = 96,
		
		MXN = 97,
		
		MYR = 98,
		
		MZN = 99,
		
		NAD = 100,
		
		NGN = 101,
		
		NIO = 102,
		
		NOK = 103,
		
		NPR = 104,
		
		NZD = 105,
		
		OMR = 106,
		
		PAB = 107,
		
		PEN = 108,
		
		PGK = 109,
		
		PHP = 110,
		
		PKR = 111,
		
		PLN = 112,
		
		PYG = 113,
		
		QAR = 114,
		
		RON = 115,
		
		RSD = 116,
		
		RUB = 117,
		
		RWF = 118,
		
		SAR = 119,
		
		SBD = 120,
		
		SCR = 121,
		
		SDG = 122,
		
		SEK = 123,
		
		SGD = 124,
		
		SHP = 125,
		
		SLL = 126,
		
		SOS = 127,
		
		SPL = 128,
		
		SRD = 129,
		
		STN = 130,
		
		SVC = 131,
		
		SYP = 132,
		
		SZL = 133,
		
		THB = 134,
		
		TJS = 135,
		
		TMT = 136,
		
		TND = 137,
		
		TOP = 138,
		
		TRY = 139,
		
		TTD = 140,
		
		TVD = 141,
		
		TWD = 142,
		
		TZS = 143,
		
		UAH = 144,
		
		UGX = 145,
		
		USD = 146,
		
		UYU = 147,
		
		UZS = 148,
		
		VEF = 149,
		
		VND = 150,
		
		VUV = 151,
		
		WST = 152,
		
		XAF = 153,
		
		XCD = 154,
		
		XDR = 155,
		
		XOF = 156,
		
		XPF = 157,
		
		YER = 158,
		
		ZAR = 159,
		
		ZMW = 160,
		
		ZMK = 161,
		
		ZWD = 162,
		
		_ = 163,
	}
	
	public class Allocation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public Invoice Invoice { get; set; }
		
		public Overpayment Overpayment { get; set; }
		
		public Prepayment Prepayment { get; set; }
		
		public CreditNote CreditNote { get; set; }
		
		/// <summary>
		/// the amount being applied to the invoice
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public double Amount { get; set; }
		
		/// <summary>
		/// the date the allocation is applied YYYY-MM-DD.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateOnly Date { get; set; }
		
		/// <summary>
		/// A string to indicate if a invoice status
		/// </summary>
		public string StatusAttributeString { get; set; }
		
		/// <summary>
		/// Displays array of validation error messages from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
	}
	
	public class Overpayment
	{
		
		/// <summary>
		/// See Overpayment Types
		/// </summary>
		public System.Nullable<OverpaymentType> Type { get; set; }
		
		public Contact Contact { get; set; }
		
		/// <summary>
		/// The date the overpayment is created YYYY-MM-DD
		/// </summary>
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// See Overpayment Status Codes
		/// </summary>
		public PrepaymentStatus Status { get; set; }
		
		/// <summary>
		/// Line amounts are exclusive of tax by default if you don�t specify this element. See Line Amount Types
		/// </summary>
		public BankTransactionLineAmountTypes LineAmountTypes { get; set; }
		
		/// <summary>
		/// See Overpayment Line Items
		/// </summary>
		public LineItem[] LineItems { get; set; }
		
		/// <summary>
		/// The subtotal of the overpayment excluding taxes
		/// </summary>
		public System.Nullable<System.Double> SubTotal { get; set; }
		
		/// <summary>
		/// The total tax on the overpayment
		/// </summary>
		public System.Nullable<System.Double> TotalTax { get; set; }
		
		/// <summary>
		/// The total of the overpayment (subtotal + total tax)
		/// </summary>
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// UTC timestamp of last update to the overpayment
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// 3 letter alpha code for the currency � see list of currency codes
		/// </summary>
		public System.Nullable<OverpaymentCurrencyCode> CurrencyCode { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier
		/// </summary>
		public string OverpaymentID { get; set; }
		
		/// <summary>
		/// The currency rate for a multicurrency overpayment. If no rate is specified, the XE.com day rate is used
		/// </summary>
		public System.Nullable<System.Double> CurrencyRate { get; set; }
		
		/// <summary>
		/// The remaining credit balance on the overpayment
		/// </summary>
		public System.Nullable<System.Double> RemainingCredit { get; set; }
		
		/// <summary>
		/// See Allocations
		/// </summary>
		public Allocation[] Allocations { get; set; }
		
		/// <summary>
		/// The amount of applied to an invoice
		/// </summary>
		public System.Nullable<System.Double> AppliedAmount { get; set; }
		
		/// <summary>
		/// See Payments
		/// </summary>
		public Payment[] Payments { get; set; }
		
		/// <summary>
		/// boolean to indicate if a overpayment has an attachment
		/// </summary>
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// See Attachments
		/// </summary>
		public Attachment[] Attachments { get; set; }
	}
	
	public enum OverpaymentType
	{
		
		RECEIVEMinusOVERPAYMENT = 0,
		
		SPENDMinusOVERPAYMENT = 1,
		
		AROVERPAYMENT = 2,
	}
	
	public enum OverpaymentCurrencyCode
	{
		
		AED = 0,
		
		AFN = 1,
		
		ALL = 2,
		
		AMD = 3,
		
		ANG = 4,
		
		AOA = 5,
		
		ARS = 6,
		
		AUD = 7,
		
		AWG = 8,
		
		AZN = 9,
		
		BAM = 10,
		
		BBD = 11,
		
		BDT = 12,
		
		BGN = 13,
		
		BHD = 14,
		
		BIF = 15,
		
		BMD = 16,
		
		BND = 17,
		
		BOB = 18,
		
		BRL = 19,
		
		BSD = 20,
		
		BTN = 21,
		
		BWP = 22,
		
		BYN = 23,
		
		BZD = 24,
		
		CAD = 25,
		
		CDF = 26,
		
		CHF = 27,
		
		CLP = 28,
		
		CNY = 29,
		
		COP = 30,
		
		CRC = 31,
		
		CUC = 32,
		
		CUP = 33,
		
		CVE = 34,
		
		CZK = 35,
		
		DJF = 36,
		
		DKK = 37,
		
		DOP = 38,
		
		DZD = 39,
		
		EGP = 40,
		
		ERN = 41,
		
		ETB = 42,
		
		EUR = 43,
		
		FJD = 44,
		
		FKP = 45,
		
		GBP = 46,
		
		GEL = 47,
		
		GGP = 48,
		
		GHS = 49,
		
		GIP = 50,
		
		GMD = 51,
		
		GNF = 52,
		
		GTQ = 53,
		
		GYD = 54,
		
		HKD = 55,
		
		HNL = 56,
		
		HRK = 57,
		
		HTG = 58,
		
		HUF = 59,
		
		IDR = 60,
		
		ILS = 61,
		
		IMP = 62,
		
		INR = 63,
		
		IQD = 64,
		
		IRR = 65,
		
		ISK = 66,
		
		JEP = 67,
		
		JMD = 68,
		
		JOD = 69,
		
		JPY = 70,
		
		KES = 71,
		
		KGS = 72,
		
		KHR = 73,
		
		KMF = 74,
		
		KPW = 75,
		
		KRW = 76,
		
		KWD = 77,
		
		KYD = 78,
		
		KZT = 79,
		
		LAK = 80,
		
		LBP = 81,
		
		LKR = 82,
		
		LRD = 83,
		
		LSL = 84,
		
		LYD = 85,
		
		MAD = 86,
		
		MDL = 87,
		
		MGA = 88,
		
		MKD = 89,
		
		MMK = 90,
		
		MNT = 91,
		
		MOP = 92,
		
		MRU = 93,
		
		MUR = 94,
		
		MVR = 95,
		
		MWK = 96,
		
		MXN = 97,
		
		MYR = 98,
		
		MZN = 99,
		
		NAD = 100,
		
		NGN = 101,
		
		NIO = 102,
		
		NOK = 103,
		
		NPR = 104,
		
		NZD = 105,
		
		OMR = 106,
		
		PAB = 107,
		
		PEN = 108,
		
		PGK = 109,
		
		PHP = 110,
		
		PKR = 111,
		
		PLN = 112,
		
		PYG = 113,
		
		QAR = 114,
		
		RON = 115,
		
		RSD = 116,
		
		RUB = 117,
		
		RWF = 118,
		
		SAR = 119,
		
		SBD = 120,
		
		SCR = 121,
		
		SDG = 122,
		
		SEK = 123,
		
		SGD = 124,
		
		SHP = 125,
		
		SLL = 126,
		
		SOS = 127,
		
		SPL = 128,
		
		SRD = 129,
		
		STN = 130,
		
		SVC = 131,
		
		SYP = 132,
		
		SZL = 133,
		
		THB = 134,
		
		TJS = 135,
		
		TMT = 136,
		
		TND = 137,
		
		TOP = 138,
		
		TRY = 139,
		
		TTD = 140,
		
		TVD = 141,
		
		TWD = 142,
		
		TZS = 143,
		
		UAH = 144,
		
		UGX = 145,
		
		USD = 146,
		
		UYU = 147,
		
		UZS = 148,
		
		VEF = 149,
		
		VND = 150,
		
		VUV = 151,
		
		WST = 152,
		
		XAF = 153,
		
		XCD = 154,
		
		XDR = 155,
		
		XOF = 156,
		
		XPF = 157,
		
		YER = 158,
		
		ZAR = 159,
		
		ZMW = 160,
		
		ZMK = 161,
		
		ZWD = 162,
		
		_ = 163,
	}
	
	public class CreditNote
	{
		
		/// <summary>
		/// See Credit Note Types
		/// </summary>
		public System.Nullable<CreditNoteType> Type { get; set; }
		
		public Contact Contact { get; set; }
		
		/// <summary>
		/// The date the credit note is issued YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation
		/// </summary>
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// See Credit Note Status Codes
		/// </summary>
		public InvoiceStatus Status { get; set; }
		
		/// <summary>
		/// Line amounts are exclusive of tax by default if you don�t specify this element. See Line Amount Types
		/// </summary>
		public BankTransactionLineAmountTypes LineAmountTypes { get; set; }
		
		/// <summary>
		/// See Invoice Line Items
		/// </summary>
		public LineItem[] LineItems { get; set; }
		
		/// <summary>
		/// The subtotal of the credit note excluding taxes
		/// </summary>
		public System.Nullable<System.Double> SubTotal { get; set; }
		
		/// <summary>
		/// The total tax on the credit note
		/// </summary>
		public System.Nullable<System.Double> TotalTax { get; set; }
		
		/// <summary>
		/// The total of the Credit Note(subtotal + total tax)
		/// </summary>
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// UTC timestamp of last update to the credit note
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// 3 letter alpha code for the currency � see list of currency codes
		/// </summary>
		public System.Nullable<CreditNoteCurrencyCode> CurrencyCode { get; set; }
		
		/// <summary>
		/// Date when credit note was fully paid(UTC format)
		/// </summary>
		public System.Nullable<System.DateOnly> FullyPaidOnDate { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier
		/// </summary>
		public string CreditNoteID { get; set; }
		
		/// <summary>
		/// ACCRECCREDIT � Unique alpha numeric code identifying credit note (when missing will auto-generate from your Organisation Invoice Settings)
		/// </summary>
		public string CreditNoteNumber { get; set; }
		
		/// <summary>
		/// ACCRECCREDIT only � additional reference number
		/// </summary>
		public string Reference { get; set; }
		
		/// <summary>
		/// boolean to indicate if a credit note has been sent to a contact via  the Xero app (currently read only)
		/// </summary>
		public System.Nullable<System.Boolean> SentToContact { get; set; }
		
		/// <summary>
		/// The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used
		/// </summary>
		public System.Nullable<System.Double> CurrencyRate { get; set; }
		
		/// <summary>
		/// The remaining credit balance on the Credit Note
		/// </summary>
		public System.Nullable<System.Double> RemainingCredit { get; set; }
		
		/// <summary>
		/// See Allocations
		/// </summary>
		public Allocation[] Allocations { get; set; }
		
		/// <summary>
		/// The amount of applied to an invoice
		/// </summary>
		public System.Nullable<System.Double> AppliedAmount { get; set; }
		
		/// <summary>
		/// See Payments
		/// </summary>
		public Payment[] Payments { get; set; }
		
		/// <summary>
		/// See BrandingThemes
		/// </summary>
		public string BrandingThemeID { get; set; }
		
		/// <summary>
		/// A string to indicate if a invoice status
		/// </summary>
		public string StatusAttributeString { get; set; }
		
		/// <summary>
		/// boolean to indicate if a credit note has an attachment
		/// </summary>
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// A boolean to indicate if a credit note has an validation errors
		/// </summary>
		public System.Nullable<System.Boolean> HasErrors { get; set; }
		
		/// <summary>
		/// Displays array of validation error messages from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
	}
	
	public enum CreditNoteType
	{
		
		ACCPAYCREDIT = 0,
		
		ACCRECCREDIT = 1,
	}
	
	public enum CreditNoteCurrencyCode
	{
		
		AED = 0,
		
		AFN = 1,
		
		ALL = 2,
		
		AMD = 3,
		
		ANG = 4,
		
		AOA = 5,
		
		ARS = 6,
		
		AUD = 7,
		
		AWG = 8,
		
		AZN = 9,
		
		BAM = 10,
		
		BBD = 11,
		
		BDT = 12,
		
		BGN = 13,
		
		BHD = 14,
		
		BIF = 15,
		
		BMD = 16,
		
		BND = 17,
		
		BOB = 18,
		
		BRL = 19,
		
		BSD = 20,
		
		BTN = 21,
		
		BWP = 22,
		
		BYN = 23,
		
		BZD = 24,
		
		CAD = 25,
		
		CDF = 26,
		
		CHF = 27,
		
		CLP = 28,
		
		CNY = 29,
		
		COP = 30,
		
		CRC = 31,
		
		CUC = 32,
		
		CUP = 33,
		
		CVE = 34,
		
		CZK = 35,
		
		DJF = 36,
		
		DKK = 37,
		
		DOP = 38,
		
		DZD = 39,
		
		EGP = 40,
		
		ERN = 41,
		
		ETB = 42,
		
		EUR = 43,
		
		FJD = 44,
		
		FKP = 45,
		
		GBP = 46,
		
		GEL = 47,
		
		GGP = 48,
		
		GHS = 49,
		
		GIP = 50,
		
		GMD = 51,
		
		GNF = 52,
		
		GTQ = 53,
		
		GYD = 54,
		
		HKD = 55,
		
		HNL = 56,
		
		HRK = 57,
		
		HTG = 58,
		
		HUF = 59,
		
		IDR = 60,
		
		ILS = 61,
		
		IMP = 62,
		
		INR = 63,
		
		IQD = 64,
		
		IRR = 65,
		
		ISK = 66,
		
		JEP = 67,
		
		JMD = 68,
		
		JOD = 69,
		
		JPY = 70,
		
		KES = 71,
		
		KGS = 72,
		
		KHR = 73,
		
		KMF = 74,
		
		KPW = 75,
		
		KRW = 76,
		
		KWD = 77,
		
		KYD = 78,
		
		KZT = 79,
		
		LAK = 80,
		
		LBP = 81,
		
		LKR = 82,
		
		LRD = 83,
		
		LSL = 84,
		
		LYD = 85,
		
		MAD = 86,
		
		MDL = 87,
		
		MGA = 88,
		
		MKD = 89,
		
		MMK = 90,
		
		MNT = 91,
		
		MOP = 92,
		
		MRU = 93,
		
		MUR = 94,
		
		MVR = 95,
		
		MWK = 96,
		
		MXN = 97,
		
		MYR = 98,
		
		MZN = 99,
		
		NAD = 100,
		
		NGN = 101,
		
		NIO = 102,
		
		NOK = 103,
		
		NPR = 104,
		
		NZD = 105,
		
		OMR = 106,
		
		PAB = 107,
		
		PEN = 108,
		
		PGK = 109,
		
		PHP = 110,
		
		PKR = 111,
		
		PLN = 112,
		
		PYG = 113,
		
		QAR = 114,
		
		RON = 115,
		
		RSD = 116,
		
		RUB = 117,
		
		RWF = 118,
		
		SAR = 119,
		
		SBD = 120,
		
		SCR = 121,
		
		SDG = 122,
		
		SEK = 123,
		
		SGD = 124,
		
		SHP = 125,
		
		SLL = 126,
		
		SOS = 127,
		
		SPL = 128,
		
		SRD = 129,
		
		STN = 130,
		
		SVC = 131,
		
		SYP = 132,
		
		SZL = 133,
		
		THB = 134,
		
		TJS = 135,
		
		TMT = 136,
		
		TND = 137,
		
		TOP = 138,
		
		TRY = 139,
		
		TTD = 140,
		
		TVD = 141,
		
		TWD = 142,
		
		TZS = 143,
		
		UAH = 144,
		
		UGX = 145,
		
		USD = 146,
		
		UYU = 147,
		
		UZS = 148,
		
		VEF = 149,
		
		VND = 150,
		
		VUV = 151,
		
		WST = 152,
		
		XAF = 153,
		
		XCD = 154,
		
		XDR = 155,
		
		XOF = 156,
		
		XPF = 157,
		
		YER = 158,
		
		ZAR = 159,
		
		ZMW = 160,
		
		ZMK = 161,
		
		ZWD = 162,
		
		_ = 163,
	}
	
	public enum PaymentStatus
	{
		
		AUTHORISED = 0,
		
		DELETED = 1,
	}
	
	public enum PaymentPaymentType
	{
		
		ACCRECPAYMENT = 0,
		
		ACCPAYPAYMENT = 1,
		
		ARCREDITPAYMENT = 2,
		
		APCREDITPAYMENT = 3,
		
		AROVERPAYMENTPAYMENT = 4,
		
		ARPREPAYMENTPAYMENT = 5,
		
		APPREPAYMENTPAYMENT = 6,
		
		APOVERPAYMENTPAYMENT = 7,
	}
	
	public enum BatchPaymentType
	{
		
		PAYBATCH = 0,
		
		RECBATCH = 1,
	}
	
	/// <summary>
	/// Bank details for use on a batch payment stored with each contact
	/// </summary>
	public class BatchPaymentDetails
	{
		
		/// <summary>
		/// Bank account number for use with Batch Payments
		/// </summary>
		public string BankAccountNumber { get; set; }
		
		/// <summary>
		/// Name of bank for use with Batch Payments
		/// </summary>
		public string BankAccountName { get; set; }
		
		/// <summary>
		/// (Non-NZ Only) These details are sent to the org�s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length = 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string Details { get; set; }
		
		/// <summary>
		/// (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
		/// Max length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public string Code { get; set; }
		
		/// <summary>
		/// (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
		/// Max length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public string Reference { get; set; }
	}
	
	public class BrandingThemes
	{
		
		public BrandingTheme[] BrandingThemes1 { get; set; }
	}
	
	public class PaymentServices
	{
		
		public PaymentService[] PaymentServices1 { get; set; }
	}
	
	public class PaymentService
	{
		
		/// <summary>
		/// Xero identifier
		/// </summary>
		public string PaymentServiceID { get; set; }
		
		/// <summary>
		/// Name of payment service
		/// </summary>
		public string PaymentServiceName { get; set; }
		
		/// <summary>
		/// The custom payment URL
		/// </summary>
		public string PaymentServiceUrl { get; set; }
		
		/// <summary>
		/// The text displayed on the Pay Now button in Xero Online Invoicing. If this is not set it will default to Pay by credit card
		/// </summary>
		public string PayNowText { get; set; }
		
		/// <summary>
		/// This will always be CUSTOM for payment services created via the API.
		/// </summary>
		public string PaymentServiceType { get; set; }
		
		/// <summary>
		/// Displays array of validation error messages from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
	}
	
	public class Contacts
	{
		
		public Contact[] Contacts1 { get; set; }
	}
	
	public class CISSettings
	{
		
		public CISSetting[] CISSettings1 { get; set; }
	}
	
	public class CISSetting
	{
		
		/// <summary>
		/// Boolean that describes if the contact is a CIS Subcontractor
		/// </summary>
		public System.Nullable<System.Boolean> CISEnabled { get; set; }
		
		/// <summary>
		/// CIS Deduction rate for the contact if he is a subcontractor. If the contact is not CISEnabled, then the rate is not returned
		/// </summary>
		public System.Nullable<System.Int32> Rate { get; set; }
	}
	
	public class CISOrgSetting
	{
		
		/// <summary>
		/// true or false - Boolean that describes if the organisation is a CIS Contractor
		/// </summary>
		public System.Nullable<System.Boolean> CISContractorEnabled { get; set; }
		
		/// <summary>
		/// true or false - Boolean that describes if the organisation is a CIS SubContractor
		/// </summary>
		public System.Nullable<System.Boolean> CISSubContractorEnabled { get; set; }
		
		/// <summary>
		/// CIS Deduction rate for the organisation
		/// </summary>
		public System.Nullable<System.Int32> Rate { get; set; }
	}
	
	public class ContactGroups
	{
		
		public ContactGroup[] ContactGroups1 { get; set; }
	}
	
	public class RequestEmpty
	{
		
		/// <summary>
		/// Need at least one field to create an empty JSON payload
		/// </summary>
		public string Status { get; set; }
	}
	
	public class CreditNotes
	{
		
		public CreditNote[] CreditNotes1 { get; set; }
	}
	
	public class Allocations
	{
		
		public Allocation[] Allocations1 { get; set; }
	}
	
	public class Currencies
	{
		
		public Currency[] Currencies1 { get; set; }
	}
	
	public class Currency
	{
		
		/// <summary>
		/// 3 letter alpha code for the currency � see list of currency codes
		/// </summary>
		public System.Nullable<CurrencyCode> Code { get; set; }
		
		/// <summary>
		/// Name of Currency
		/// </summary>
		public string Description { get; set; }
	}
	
	public enum CurrencyCode
	{
		
		AED = 0,
		
		AFN = 1,
		
		ALL = 2,
		
		AMD = 3,
		
		ANG = 4,
		
		AOA = 5,
		
		ARS = 6,
		
		AUD = 7,
		
		AWG = 8,
		
		AZN = 9,
		
		BAM = 10,
		
		BBD = 11,
		
		BDT = 12,
		
		BGN = 13,
		
		BHD = 14,
		
		BIF = 15,
		
		BMD = 16,
		
		BND = 17,
		
		BOB = 18,
		
		BRL = 19,
		
		BSD = 20,
		
		BTN = 21,
		
		BWP = 22,
		
		BYN = 23,
		
		BZD = 24,
		
		CAD = 25,
		
		CDF = 26,
		
		CHF = 27,
		
		CLP = 28,
		
		CNY = 29,
		
		COP = 30,
		
		CRC = 31,
		
		CUC = 32,
		
		CUP = 33,
		
		CVE = 34,
		
		CZK = 35,
		
		DJF = 36,
		
		DKK = 37,
		
		DOP = 38,
		
		DZD = 39,
		
		EGP = 40,
		
		ERN = 41,
		
		ETB = 42,
		
		EUR = 43,
		
		FJD = 44,
		
		FKP = 45,
		
		GBP = 46,
		
		GEL = 47,
		
		GGP = 48,
		
		GHS = 49,
		
		GIP = 50,
		
		GMD = 51,
		
		GNF = 52,
		
		GTQ = 53,
		
		GYD = 54,
		
		HKD = 55,
		
		HNL = 56,
		
		HRK = 57,
		
		HTG = 58,
		
		HUF = 59,
		
		IDR = 60,
		
		ILS = 61,
		
		IMP = 62,
		
		INR = 63,
		
		IQD = 64,
		
		IRR = 65,
		
		ISK = 66,
		
		JEP = 67,
		
		JMD = 68,
		
		JOD = 69,
		
		JPY = 70,
		
		KES = 71,
		
		KGS = 72,
		
		KHR = 73,
		
		KMF = 74,
		
		KPW = 75,
		
		KRW = 76,
		
		KWD = 77,
		
		KYD = 78,
		
		KZT = 79,
		
		LAK = 80,
		
		LBP = 81,
		
		LKR = 82,
		
		LRD = 83,
		
		LSL = 84,
		
		LYD = 85,
		
		MAD = 86,
		
		MDL = 87,
		
		MGA = 88,
		
		MKD = 89,
		
		MMK = 90,
		
		MNT = 91,
		
		MOP = 92,
		
		MRU = 93,
		
		MUR = 94,
		
		MVR = 95,
		
		MWK = 96,
		
		MXN = 97,
		
		MYR = 98,
		
		MZN = 99,
		
		NAD = 100,
		
		NGN = 101,
		
		NIO = 102,
		
		NOK = 103,
		
		NPR = 104,
		
		NZD = 105,
		
		OMR = 106,
		
		PAB = 107,
		
		PEN = 108,
		
		PGK = 109,
		
		PHP = 110,
		
		PKR = 111,
		
		PLN = 112,
		
		PYG = 113,
		
		QAR = 114,
		
		RON = 115,
		
		RSD = 116,
		
		RUB = 117,
		
		RWF = 118,
		
		SAR = 119,
		
		SBD = 120,
		
		SCR = 121,
		
		SDG = 122,
		
		SEK = 123,
		
		SGD = 124,
		
		SHP = 125,
		
		SLL = 126,
		
		SOS = 127,
		
		SPL = 128,
		
		SRD = 129,
		
		STN = 130,
		
		SVC = 131,
		
		SYP = 132,
		
		SZL = 133,
		
		THB = 134,
		
		TJS = 135,
		
		TMT = 136,
		
		TND = 137,
		
		TOP = 138,
		
		TRY = 139,
		
		TTD = 140,
		
		TVD = 141,
		
		TWD = 142,
		
		TZS = 143,
		
		UAH = 144,
		
		UGX = 145,
		
		USD = 146,
		
		UYU = 147,
		
		UZS = 148,
		
		VEF = 149,
		
		VND = 150,
		
		VUV = 151,
		
		WST = 152,
		
		XAF = 153,
		
		XCD = 154,
		
		XDR = 155,
		
		XOF = 156,
		
		XPF = 157,
		
		YER = 158,
		
		ZAR = 159,
		
		ZMW = 160,
		
		ZMK = 161,
		
		ZWD = 162,
		
		_ = 163,
	}
	
	public class Employees
	{
		
		public Employee[] Employees1 { get; set; }
	}
	
	public class Employee
	{
		
		/// <summary>
		/// The Xero identifier for an employee e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
		/// </summary>
		public string EmployeeID { get; set; }
		
		/// <summary>
		/// Current status of an employee � see contact status types
		/// </summary>
		public ContactContactStatus Status { get; set; }
		
		/// <summary>
		/// First name of an employee (max length = 255)
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Last name of an employee (max length = 255)
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LastName { get; set; }
		
		public ExternalLink ExternalLink { get; set; }
		
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// A string to indicate if a invoice status
		/// </summary>
		public string StatusAttributeString { get; set; }
		
		/// <summary>
		/// Displays array of validation error messages from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
	}
	
	public class ExternalLink
	{
		
		/// <summary>
		/// See External link types
		/// </summary>
		public System.Nullable<ExternalLinkLinkType> LinkType { get; set; }
		
		/// <summary>
		/// URL for service e.g. http://twitter.com/xeroapi
		/// </summary>
		public string Url { get; set; }
		
		public string Description { get; set; }
	}
	
	public enum ExternalLinkLinkType
	{
		
		Facebook = 0,
		
		GooglePlus = 1,
		
		LinkedIn = 2,
		
		Twitter = 3,
		
		Website = 4,
	}
	
	public class ExpenseClaims
	{
		
		public ExpenseClaim[] ExpenseClaims1 { get; set; }
	}
	
	public class ExpenseClaim
	{
		
		/// <summary>
		/// Xero generated unique identifier for an expense claim
		/// </summary>
		public string ExpenseClaimID { get; set; }
		
		/// <summary>
		/// Current status of an expense claim � see status types
		/// </summary>
		public System.Nullable<ExpenseClaimStatus> Status { get; set; }
		
		/// <summary>
		/// See Payments
		/// </summary>
		public Payment[] Payments { get; set; }
		
		public User User { get; set; }
		
		public Receipt[] Receipts { get; set; }
		
		/// <summary>
		/// Last modified date UTC format
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// The total of an expense claim being paid
		/// </summary>
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// The amount due to be paid for an expense claim
		/// </summary>
		public System.Nullable<System.Double> AmountDue { get; set; }
		
		/// <summary>
		/// The amount still to pay for an expense claim
		/// </summary>
		public System.Nullable<System.Double> AmountPaid { get; set; }
		
		/// <summary>
		/// The date when the expense claim is due to be paid YYYY-MM-DD
		/// </summary>
		public System.Nullable<System.DateOnly> PaymentDueDate { get; set; }
		
		/// <summary>
		/// The date the expense claim will be reported in Xero YYYY-MM-DD
		/// </summary>
		public System.Nullable<System.DateOnly> ReportingDate { get; set; }
		
		/// <summary>
		/// The Xero identifier for the Receipt e.g.  e59a2c7f-1306-4078-a0f3-73537afcbba9
		/// </summary>
		public string ReceiptID { get; set; }
	}
	
	public enum ExpenseClaimStatus
	{
		
		SUBMITTED = 0,
		
		AUTHORISED = 1,
		
		PAID = 2,
		
		VOIDED = 3,
		
		DELETED = 4,
	}
	
	public class User
	{
		
		/// <summary>
		/// Xero identifier
		/// </summary>
		public string UserID { get; set; }
		
		/// <summary>
		/// Email address of user
		/// </summary>
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// First name of user
		/// </summary>
		public string FirstName { get; set; }
		
		/// <summary>
		/// Last name of user
		/// </summary>
		public string LastName { get; set; }
		
		/// <summary>
		/// Timestamp of last change to user
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// Boolean to indicate if user is the subscriber
		/// </summary>
		public System.Nullable<System.Boolean> IsSubscriber { get; set; }
		
		/// <summary>
		/// User role that defines permissions in Xero and via API (READONLY, INVOICEONLY, STANDARD, FINANCIALADVISER, etc)
		/// </summary>
		public System.Nullable<UserOrganisationRole> OrganisationRole { get; set; }
	}
	
	public enum UserOrganisationRole
	{
		
		READONLY = 0,
		
		INVOICEONLY = 1,
		
		STANDARD = 2,
		
		FINANCIALADVISER = 3,
		
		MANAGEDCLIENT = 4,
		
		CASHBOOKCLIENT = 5,
		
		UNKNOWN = 6,
	}
	
	public class Receipt
	{
		
		/// <summary>
		/// Date of receipt � YYYY-MM-DD
		/// </summary>
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		public Contact Contact { get; set; }
		
		public LineItem[] LineItems { get; set; }
		
		public User User { get; set; }
		
		/// <summary>
		/// Additional reference number
		/// </summary>
		public string Reference { get; set; }
		
		/// <summary>
		/// Line amounts are exclusive of tax by default if you don�t specify this element. See Line Amount Types
		/// </summary>
		public BankTransactionLineAmountTypes LineAmountTypes { get; set; }
		
		/// <summary>
		/// Total of receipt excluding taxes
		/// </summary>
		public System.Nullable<System.Double> SubTotal { get; set; }
		
		/// <summary>
		/// Total tax on receipt
		/// </summary>
		public System.Nullable<System.Double> TotalTax { get; set; }
		
		/// <summary>
		/// Total of receipt tax inclusive (i.e. SubTotal + TotalTax)
		/// </summary>
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier for receipt
		/// </summary>
		public string ReceiptID { get; set; }
		
		/// <summary>
		/// Current status of receipt � see status types
		/// </summary>
		public System.Nullable<ReceiptStatus> Status { get; set; }
		
		/// <summary>
		/// Xero generated sequence number for receipt in current claim for a given user
		/// </summary>
		public string ReceiptNumber { get; set; }
		
		/// <summary>
		/// Last modified date UTC format
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// boolean to indicate if a receipt has an attachment
		/// </summary>
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// URL link to a source document � shown as �Go to [appName]� in the Xero app
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// Displays array of validation error messages from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
		
		/// <summary>
		/// Displays array of warning messages from the API
		/// </summary>
		public ValidationError[] Warnings { get; set; }
		
		/// <summary>
		/// Displays array of attachments from the API
		/// </summary>
		public Attachment[] Attachments { get; set; }
	}
	
	public enum ReceiptStatus
	{
		
		DRAFT = 0,
		
		SUBMITTED = 1,
		
		AUTHORISED = 2,
		
		DECLINED = 3,
		
		VOIDED = 4,
	}
	
	public class HistoryRecords
	{
		
		public HistoryRecord[] HistoryRecords1 { get; set; }
	}
	
	public class HistoryRecord
	{
		
		/// <summary>
		/// details
		/// </summary>
		public string Details { get; set; }
		
		/// <summary>
		/// Name of branding theme
		/// </summary>
		public string Changes { get; set; }
		
		/// <summary>
		/// has a value of 0
		/// </summary>
		public string User { get; set; }
		
		/// <summary>
		/// UTC timestamp of creation date of branding theme
		/// </summary>
		public System.Nullable<System.DateTimeOffset> DateUTC { get; set; }
	}
	
	public class Invoices
	{
		
		public Invoice[] Invoices1 { get; set; }
	}
	
	public class OnlineInvoices
	{
		
		public OnlineInvoice[] OnlineInvoices1 { get; set; }
	}
	
	public class OnlineInvoice
	{
		
		/// <summary>
		/// the URL to an online invoice
		/// </summary>
		public string OnlineInvoiceUrl { get; set; }
	}
	
	public class InvoiceReminders
	{
		
		public InvoiceReminder[] InvoiceReminders1 { get; set; }
	}
	
	public class InvoiceReminder
	{
		
		/// <summary>
		/// setting for on or off
		/// </summary>
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	public class Items
	{
		
		public Item[] Items1 { get; set; }
	}
	
	public class Item
	{
		
		/// <summary>
		/// User defined item code (max length = 30)
		/// Required
		/// Max length: 30
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string Code { get; set; }
		
		/// <summary>
		/// The inventory asset account for the item. The account must be of type INVENTORY. The  COGSAccountCode in PurchaseDetails is also required to create a tracked item
		/// </summary>
		public string InventoryAssetAccountCode { get; set; }
		
		/// <summary>
		/// The name of the item (max length = 50)
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Name { get; set; }
		
		/// <summary>
		/// Boolean value, defaults to true. When IsSold is true the item will be available on sales transactions in the Xero UI. If IsSold is updated to false then Description and SalesDetails values will be nulled.
		/// </summary>
		public System.Nullable<System.Boolean> IsSold { get; set; }
		
		/// <summary>
		/// Boolean value, defaults to true. When IsPurchased is true the item is available for purchase transactions in the Xero UI. If IsPurchased is updated to false then PurchaseDescription and PurchaseDetails values will be nulled.
		/// </summary>
		public System.Nullable<System.Boolean> IsPurchased { get; set; }
		
		/// <summary>
		/// The sales description of the item (max length = 4000)
		/// Max length: 4000
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(4000)]
		public string Description { get; set; }
		
		/// <summary>
		/// The purchase description of the item (max length = 4000)
		/// Max length: 4000
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(4000)]
		public string PurchaseDescription { get; set; }
		
		public Purchase PurchaseDetails { get; set; }
		
		public Purchase SalesDetails { get; set; }
		
		/// <summary>
		/// True for items that are tracked as inventory. An item will be tracked as inventory if the InventoryAssetAccountCode and COGSAccountCode are set.
		/// </summary>
		public System.Nullable<System.Boolean> IsTrackedAsInventory { get; set; }
		
		/// <summary>
		/// The value of the item on hand. Calculated using average cost accounting.
		/// </summary>
		public System.Nullable<System.Double> TotalCostPool { get; set; }
		
		/// <summary>
		/// The quantity of the item on hand
		/// </summary>
		public System.Nullable<System.Double> QuantityOnHand { get; set; }
		
		/// <summary>
		/// Last modified date in UTC format
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// The Xero identifier for an Item
		/// </summary>
		public string ItemID { get; set; }
		
		/// <summary>
		/// Status of object
		/// </summary>
		public string StatusAttributeString { get; set; }
		
		/// <summary>
		/// Displays array of validation error messages from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
	}
	
	public class Purchase
	{
		
		/// <summary>
		/// Unit Price of the item. By default UnitPrice is rounded to two decimal places. You can use 4 decimal places by adding the unitdp=4 querystring parameter to your request.
		/// </summary>
		public System.Nullable<System.Double> UnitPrice { get; set; }
		
		/// <summary>
		/// Default account code to be used for purchased/sale. Not applicable to the purchase details of tracked items
		/// </summary>
		public string AccountCode { get; set; }
		
		/// <summary>
		/// Cost of goods sold account. Only applicable to the purchase details of tracked items.
		/// </summary>
		public string COGSAccountCode { get; set; }
		
		/// <summary>
		/// The tax type from TaxRates
		/// </summary>
		public string TaxType { get; set; }
	}
	
	public class Journals
	{
		
		public Journal[] Journals1 { get; set; }
	}
	
	public class Journal
	{
		
		/// <summary>
		/// Xero identifier
		/// </summary>
		public string JournalID { get; set; }
		
		/// <summary>
		/// Date the journal was posted
		/// </summary>
		public System.Nullable<System.DateOnly> JournalDate { get; set; }
		
		/// <summary>
		/// Xero generated journal number
		/// </summary>
		public System.Nullable<System.Int32> JournalNumber { get; set; }
		
		/// <summary>
		/// Created date UTC format
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDateUTC { get; set; }
		
		/// <summary>
		/// reference field for additional indetifying information
		/// </summary>
		public string Reference { get; set; }
		
		/// <summary>
		/// The identifier for the source transaction (e.g. InvoiceID)
		/// </summary>
		public string SourceID { get; set; }
		
		/// <summary>
		/// The journal source type. The type of transaction that created the journal
		/// </summary>
		public System.Nullable<JournalSourceType> SourceType { get; set; }
		
		/// <summary>
		/// See JournalLines
		/// </summary>
		public JournalLine[] JournalLines { get; set; }
	}
	
	public enum JournalSourceType
	{
		
		ACCREC = 0,
		
		ACCPAY = 1,
		
		ACCRECCREDIT = 2,
		
		ACCPAYCREDIT = 3,
		
		ACCRECPAYMENT = 4,
		
		ACCPAYPAYMENT = 5,
		
		ARCREDITPAYMENT = 6,
		
		APCREDITPAYMENT = 7,
		
		CASHREC = 8,
		
		CASHPAID = 9,
		
		TRANSFER = 10,
		
		ARPREPAYMENT = 11,
		
		APPREPAYMENT = 12,
		
		AROVERPAYMENT = 13,
		
		APOVERPAYMENT = 14,
		
		EXPCLAIM = 15,
		
		EXPPAYMENT = 16,
		
		MANJOURNAL = 17,
		
		PAYSLIP = 18,
		
		WAGEPAYABLE = 19,
		
		INTEGRATEDPAYROLLPE = 20,
		
		INTEGRATEDPAYROLLPT = 21,
		
		EXTERNALSPENDMONEY = 22,
		
		INTEGRATEDPAYROLLPTPAYMENT = 23,
		
		INTEGRATEDPAYROLLCN = 24,
	}
	
	public class JournalLine
	{
		
		/// <summary>
		/// Xero identifier for Journal
		/// </summary>
		public string JournalLineID { get; set; }
		
		/// <summary>
		/// See Accounts
		/// </summary>
		public string AccountID { get; set; }
		
		/// <summary>
		/// See Accounts
		/// </summary>
		public string AccountCode { get; set; }
		
		/// <summary>
		/// See Account Types
		/// </summary>
		public AccountType AccountType { get; set; }
		
		/// <summary>
		/// See AccountCodes
		/// </summary>
		public string AccountName { get; set; }
		
		/// <summary>
		/// The description from the source transaction line item. Only returned if populated.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Net amount of journal line. This will be a positive value for a debit and negative for a credit
		/// </summary>
		public System.Nullable<System.Double> NetAmount { get; set; }
		
		/// <summary>
		/// Gross amount of journal line (NetAmount + TaxAmount).
		/// </summary>
		public System.Nullable<System.Double> GrossAmount { get; set; }
		
		/// <summary>
		/// Total tax on a journal line
		/// </summary>
		public System.Nullable<System.Double> TaxAmount { get; set; }
		
		/// <summary>
		/// The tax type from TaxRates
		/// </summary>
		public string TaxType { get; set; }
		
		/// <summary>
		/// see TaxRates
		/// </summary>
		public string TaxName { get; set; }
		
		/// <summary>
		/// Optional Tracking Category � see Tracking. Any JournalLine can have a maximum of 2 <TrackingCategory> elements.
		/// </summary>
		public TrackingCategory[] TrackingCategories { get; set; }
	}
	
	public class TrackingCategory
	{
		
		/// <summary>
		/// The Xero identifier for a tracking category e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
		/// </summary>
		public string TrackingCategoryID { get; set; }
		
		/// <summary>
		/// The Xero identifier for a tracking option e.g. dc54c220-0140-495a-b925-3246adc0075f
		/// </summary>
		public string TrackingOptionID { get; set; }
		
		/// <summary>
		/// The name of the tracking category e.g. Department, Region (max length = 100)
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Name { get; set; }
		
		/// <summary>
		/// The option name of the tracking option e.g. East, West (max length = 100)
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Option { get; set; }
		
		/// <summary>
		/// The status of a tracking category
		/// </summary>
		public AccountStatus Status { get; set; }
		
		/// <summary>
		/// See Tracking Options
		/// </summary>
		public TrackingOption[] Options { get; set; }
	}
	
	public class TrackingOption
	{
		
		/// <summary>
		/// The Xero identifier for a tracking optione.g. ae777a87-5ef3-4fa0-a4f0-d10e1f13073a
		/// </summary>
		public string TrackingOptionID { get; set; }
		
		/// <summary>
		/// The name of the tracking option e.g. Marketing, East (max length = 50)
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Name { get; set; }
		
		/// <summary>
		/// The status of a tracking option
		/// </summary>
		public AccountStatus Status { get; set; }
		
		/// <summary>
		/// Filter by a tracking categorye.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
		/// </summary>
		public string TrackingCategoryID { get; set; }
	}
	
	public class LinkedTransactions
	{
		
		public LinkedTransaction[] LinkedTransactions1 { get; set; }
	}
	
	public class LinkedTransaction
	{
		
		/// <summary>
		/// Filter by the SourceTransactionID. Get all the linked transactions created from a particular ACCPAY invoice
		/// </summary>
		public string SourceTransactionID { get; set; }
		
		/// <summary>
		/// The line item identifier from the source transaction.
		/// </summary>
		public string SourceLineItemID { get; set; }
		
		/// <summary>
		/// Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID=4bb34b03-3378-4bb2-a0ed-6345abf3224e&Status=APPROVED.
		/// </summary>
		public string ContactID { get; set; }
		
		/// <summary>
		/// Filter by the TargetTransactionID. Get all the linked transactions  allocated to a particular ACCREC invoice
		/// </summary>
		public string TargetTransactionID { get; set; }
		
		/// <summary>
		/// The line item identifier from the target transaction. It is possible  to link multiple billable expenses to the same TargetLineItemID.
		/// </summary>
		public string TargetLineItemID { get; set; }
		
		/// <summary>
		/// The Xero identifier for an Linked Transaction e.g./LinkedTransactions/297c2dc5-cc47-4afd-8ec8-74990b8761e9
		/// </summary>
		public string LinkedTransactionID { get; set; }
		
		/// <summary>
		/// Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID=4bb34b03-3378-4bb2-a0ed-6345abf3224e&Status=APPROVED.
		/// </summary>
		public System.Nullable<LinkedTransactionStatus> Status { get; set; }
		
		/// <summary>
		/// This will always be BILLABLEEXPENSE. More types may be added in future.
		/// </summary>
		public System.Nullable<LinkedTransactionType> Type { get; set; }
		
		/// <summary>
		/// The last modified date in UTC format
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// The Type of the source tranasction. This will be ACCPAY if the linked transaction was created from an invoice and SPEND if it was created from a bank transaction.
		/// </summary>
		public System.Nullable<LinkedTransactionSourceTransactionTypeCode> SourceTransactionTypeCode { get; set; }
		
		/// <summary>
		/// Displays array of validation error messages from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
	}
	
	public enum LinkedTransactionStatus
	{
		
		APPROVED = 0,
		
		DRAFT = 1,
		
		ONDRAFT = 2,
		
		BILLED = 3,
		
		VOIDED = 4,
	}
	
	public enum LinkedTransactionType
	{
		
		BILLABLEEXPENSE = 0,
	}
	
	public enum LinkedTransactionSourceTransactionTypeCode
	{
		
		ACCPAY = 0,
		
		SPEND = 1,
	}
	
	public class ManualJournals
	{
		
		public ManualJournal[] ManualJournals1 { get; set; }
	}
	
	public class ManualJournal
	{
		
		/// <summary>
		/// Description of journal being posted
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Narration { get; set; }
		
		/// <summary>
		/// See JournalLines
		/// </summary>
		public ManualJournalLine[] JournalLines { get; set; }
		
		/// <summary>
		/// Date journal was posted � YYYY-MM-DD
		/// </summary>
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// Line amounts are exclusive of tax by default if you don�t specify this element. See Line Amount Types
		/// </summary>
		public BankTransactionLineAmountTypes LineAmountTypes { get; set; }
		
		/// <summary>
		/// See Manual Journal Status Codes
		/// </summary>
		public System.Nullable<ManualJournalStatus> Status { get; set; }
		
		/// <summary>
		/// Url link to a source document � shown as �Go to [appName]� in the Xero app
		/// </summary>
		public string Url { get; set; }
		
		/// <summary>
		/// Boolean � default is true if not specified
		/// </summary>
		public System.Nullable<System.Boolean> ShowOnCashBasisReports { get; set; }
		
		/// <summary>
		/// Boolean to indicate if a manual journal has an attachment
		/// </summary>
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// Last modified date UTC format
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// The Xero identifier for a Manual Journal
		/// </summary>
		public string ManualJournalID { get; set; }
		
		/// <summary>
		/// A string to indicate if a invoice status
		/// </summary>
		public string StatusAttributeString { get; set; }
		
		/// <summary>
		/// Displays array of warning messages from the API
		/// </summary>
		public ValidationError[] Warnings { get; set; }
		
		/// <summary>
		/// Displays array of validation error messages from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
		
		/// <summary>
		/// Displays array of attachments from the API
		/// </summary>
		public Attachment[] Attachments { get; set; }
	}
	
	public class ManualJournalLine
	{
		
		/// <summary>
		/// total for line. Debits are positive, credits are negative value
		/// </summary>
		public System.Nullable<System.Double> LineAmount { get; set; }
		
		/// <summary>
		/// See Accounts
		/// </summary>
		public string AccountCode { get; set; }
		
		/// <summary>
		/// Description for journal line
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// The tax type from TaxRates
		/// </summary>
		public string TaxType { get; set; }
		
		/// <summary>
		/// Optional Tracking Category � see Tracking. Any JournalLine can have a maximum of 2 <TrackingCategory> elements.
		/// </summary>
		public TrackingCategory[] Tracking { get; set; }
		
		/// <summary>
		/// The calculated tax amount based on the TaxType and LineAmount
		/// </summary>
		public System.Nullable<System.Double> TaxAmount { get; set; }
		
		/// <summary>
		/// is the line blank
		/// </summary>
		public System.Nullable<System.Boolean> IsBlank { get; set; }
	}
	
	public enum ManualJournalStatus
	{
		
		DRAFT = 0,
		
		POSTED = 1,
		
		DELETED = 2,
		
		VOIDED = 3,
		
		ARCHIVED = 4,
	}
	
	public class Organisations
	{
		
		public Organisation[] Organisations1 { get; set; }
	}
	
	public class Organisation
	{
		
		/// <summary>
		/// Unique Xero identifier
		/// </summary>
		public string OrganisationID { get; set; }
		
		/// <summary>
		/// Display a unique key used for Xero-to-Xero transactions
		/// </summary>
		public string APIKey { get; set; }
		
		/// <summary>
		/// Display name of organisation shown in Xero
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Organisation name shown on Reports
		/// </summary>
		public string LegalName { get; set; }
		
		/// <summary>
		/// Boolean to describe if organisation is registered with a local tax authority i.e. true, false
		/// </summary>
		public System.Nullable<System.Boolean> PaysTax { get; set; }
		
		/// <summary>
		/// See Version Types
		/// </summary>
		public System.Nullable<OrganisationVersion> Version { get; set; }
		
		/// <summary>
		/// Organisation Type
		/// </summary>
		public System.Nullable<OrganisationOrganisationType> OrganisationType { get; set; }
		
		/// <summary>
		/// 3 letter alpha code for the currency � see list of currency codes
		/// </summary>
		public System.Nullable<OrganisationBaseCurrency> BaseCurrency { get; set; }
		
		public System.Nullable<OrganisationCountryCode> CountryCode { get; set; }
		
		/// <summary>
		/// Boolean to describe if organisation is a demo company.
		/// </summary>
		public System.Nullable<System.Boolean> IsDemoCompany { get; set; }
		
		/// <summary>
		/// Will be set to ACTIVE if you can connect to organisation via the Xero API
		/// </summary>
		public string OrganisationStatus { get; set; }
		
		/// <summary>
		/// Shows for New Zealand, Australian and UK organisations
		/// </summary>
		public string RegistrationNumber { get; set; }
		
		/// <summary>
		/// Shown if set. US Only.
		/// </summary>
		public string EmployerIdentificationNumber { get; set; }
		
		/// <summary>
		/// Shown if set. Displays in the Xero UI as Tax File Number (AU), GST Number (NZ), VAT Number (UK) and Tax ID Number (US & Global).
		/// </summary>
		public string TaxNumber { get; set; }
		
		/// <summary>
		/// Calendar day e.g. 0-31
		/// </summary>
		public System.Nullable<System.Int32> FinancialYearEndDay { get; set; }
		
		/// <summary>
		/// Calendar Month e.g. 1-12
		/// </summary>
		public System.Nullable<System.Int32> FinancialYearEndMonth { get; set; }
		
		/// <summary>
		/// The accounting basis used for tax returns. See Sales Tax Basis
		/// </summary>
		public System.Nullable<OrganisationSalesTaxBasis> SalesTaxBasis { get; set; }
		
		/// <summary>
		/// The frequency with which tax returns are processed. See Sales Tax Period
		/// </summary>
		public System.Nullable<OrganisationSalesTaxPeriod> SalesTaxPeriod { get; set; }
		
		/// <summary>
		/// The default for LineAmountTypes on sales transactions
		/// </summary>
		public string DefaultSalesTax { get; set; }
		
		/// <summary>
		/// The default for LineAmountTypes on purchase transactions
		/// </summary>
		public string DefaultPurchasesTax { get; set; }
		
		/// <summary>
		/// Shown if set. See lock dates
		/// </summary>
		public System.Nullable<System.DateOnly> PeriodLockDate { get; set; }
		
		/// <summary>
		/// Shown if set. See lock dates
		/// </summary>
		public System.Nullable<System.DateOnly> EndOfYearLockDate { get; set; }
		
		/// <summary>
		/// Timestamp when the organisation was created in Xero
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDateUTC { get; set; }
		
		/// <summary>
		/// Timezone specifications
		/// </summary>
		public System.Nullable<OrganisationTimezone> Timezone { get; set; }
		
		/// <summary>
		/// Organisation Type
		/// </summary>
		public OrganisationOrganisationType OrganisationEntityType { get; set; }
		
		/// <summary>
		/// A unique identifier for the organisation. Potential uses.
		/// </summary>
		public string ShortCode { get; set; }
		
		/// <summary>
		/// Organisation Classes describe which plan the Xero organisation is on (e.g. DEMO, TRIAL, PREMIUM)
		/// </summary>
		public System.Nullable<OrganisationClass> Class { get; set; }
		
		/// <summary>
		/// BUSINESS or PARTNER. Partner edition organisations are sold exclusively through accounting partners and have restricted functionality (e.g. no access to invoicing)
		/// </summary>
		public System.Nullable<OrganisationEdition> Edition { get; set; }
		
		/// <summary>
		/// Description of business type as defined in Organisation settings
		/// </summary>
		public string LineOfBusiness { get; set; }
		
		/// <summary>
		/// Address details for organisation � see Addresses
		/// </summary>
		public Address[] Addresses { get; set; }
		
		/// <summary>
		/// Phones details for organisation � see Phones
		/// </summary>
		public Phone[] Phones { get; set; }
		
		/// <summary>
		/// Organisation profile links for popular services such as Facebook,Twitter, GooglePlus and LinkedIn. You can also add link to your website here. Shown if Organisation settings  is updated in Xero. See ExternalLinks below
		/// </summary>
		public ExternalLink[] ExternalLinks { get; set; }
		
		public PaymentTerm PaymentTerms { get; set; }
	}
	
	public enum OrganisationVersion
	{
		
		AU = 0,
		
		NZ = 1,
		
		GLOBAL = 2,
		
		UK = 3,
		
		US = 4,
		
		AUONRAMP = 5,
		
		NZONRAMP = 6,
		
		GLOBALONRAMP = 7,
		
		UKONRAMP = 8,
		
		USONRAMP = 9,
	}
	
	public enum OrganisationOrganisationType
	{
		
		ACCOUNTING_PRACTICE = 0,
		
		COMPANY = 1,
		
		CHARITY = 2,
		
		CLUB_OR_SOCIETY = 3,
		
		LOOK_THROUGH_COMPANY = 4,
		
		NOT_FOR_PROFIT = 5,
		
		PARTNERSHIP = 6,
		
		S_CORPORATION = 7,
		
		SELF_MANAGED_SUPERANNUATION_FUND = 8,
		
		SOLE_TRADER = 9,
		
		SUPERANNUATION_FUND = 10,
		
		TRUST = 11,
	}
	
	public enum OrganisationBaseCurrency
	{
		
		AED = 0,
		
		AFN = 1,
		
		ALL = 2,
		
		AMD = 3,
		
		ANG = 4,
		
		AOA = 5,
		
		ARS = 6,
		
		AUD = 7,
		
		AWG = 8,
		
		AZN = 9,
		
		BAM = 10,
		
		BBD = 11,
		
		BDT = 12,
		
		BGN = 13,
		
		BHD = 14,
		
		BIF = 15,
		
		BMD = 16,
		
		BND = 17,
		
		BOB = 18,
		
		BRL = 19,
		
		BSD = 20,
		
		BTN = 21,
		
		BWP = 22,
		
		BYN = 23,
		
		BZD = 24,
		
		CAD = 25,
		
		CDF = 26,
		
		CHF = 27,
		
		CLP = 28,
		
		CNY = 29,
		
		COP = 30,
		
		CRC = 31,
		
		CUC = 32,
		
		CUP = 33,
		
		CVE = 34,
		
		CZK = 35,
		
		DJF = 36,
		
		DKK = 37,
		
		DOP = 38,
		
		DZD = 39,
		
		EGP = 40,
		
		ERN = 41,
		
		ETB = 42,
		
		EUR = 43,
		
		FJD = 44,
		
		FKP = 45,
		
		GBP = 46,
		
		GEL = 47,
		
		GGP = 48,
		
		GHS = 49,
		
		GIP = 50,
		
		GMD = 51,
		
		GNF = 52,
		
		GTQ = 53,
		
		GYD = 54,
		
		HKD = 55,
		
		HNL = 56,
		
		HRK = 57,
		
		HTG = 58,
		
		HUF = 59,
		
		IDR = 60,
		
		ILS = 61,
		
		IMP = 62,
		
		INR = 63,
		
		IQD = 64,
		
		IRR = 65,
		
		ISK = 66,
		
		JEP = 67,
		
		JMD = 68,
		
		JOD = 69,
		
		JPY = 70,
		
		KES = 71,
		
		KGS = 72,
		
		KHR = 73,
		
		KMF = 74,
		
		KPW = 75,
		
		KRW = 76,
		
		KWD = 77,
		
		KYD = 78,
		
		KZT = 79,
		
		LAK = 80,
		
		LBP = 81,
		
		LKR = 82,
		
		LRD = 83,
		
		LSL = 84,
		
		LYD = 85,
		
		MAD = 86,
		
		MDL = 87,
		
		MGA = 88,
		
		MKD = 89,
		
		MMK = 90,
		
		MNT = 91,
		
		MOP = 92,
		
		MRU = 93,
		
		MUR = 94,
		
		MVR = 95,
		
		MWK = 96,
		
		MXN = 97,
		
		MYR = 98,
		
		MZN = 99,
		
		NAD = 100,
		
		NGN = 101,
		
		NIO = 102,
		
		NOK = 103,
		
		NPR = 104,
		
		NZD = 105,
		
		OMR = 106,
		
		PAB = 107,
		
		PEN = 108,
		
		PGK = 109,
		
		PHP = 110,
		
		PKR = 111,
		
		PLN = 112,
		
		PYG = 113,
		
		QAR = 114,
		
		RON = 115,
		
		RSD = 116,
		
		RUB = 117,
		
		RWF = 118,
		
		SAR = 119,
		
		SBD = 120,
		
		SCR = 121,
		
		SDG = 122,
		
		SEK = 123,
		
		SGD = 124,
		
		SHP = 125,
		
		SLL = 126,
		
		SOS = 127,
		
		SPL = 128,
		
		SRD = 129,
		
		STN = 130,
		
		SVC = 131,
		
		SYP = 132,
		
		SZL = 133,
		
		THB = 134,
		
		TJS = 135,
		
		TMT = 136,
		
		TND = 137,
		
		TOP = 138,
		
		TRY = 139,
		
		TTD = 140,
		
		TVD = 141,
		
		TWD = 142,
		
		TZS = 143,
		
		UAH = 144,
		
		UGX = 145,
		
		USD = 146,
		
		UYU = 147,
		
		UZS = 148,
		
		VEF = 149,
		
		VND = 150,
		
		VUV = 151,
		
		WST = 152,
		
		XAF = 153,
		
		XCD = 154,
		
		XDR = 155,
		
		XOF = 156,
		
		XPF = 157,
		
		YER = 158,
		
		ZAR = 159,
		
		ZMW = 160,
		
		ZMK = 161,
		
		ZWD = 162,
		
		_ = 163,
	}
	
	public enum OrganisationCountryCode
	{
		
		AD = 0,
		
		AE = 1,
		
		AF = 2,
		
		AG = 3,
		
		AI = 4,
		
		AL = 5,
		
		AM = 6,
		
		AN = 7,
		
		AO = 8,
		
		AQ = 9,
		
		AR = 10,
		
		AS = 11,
		
		AT = 12,
		
		AU = 13,
		
		AW = 14,
		
		AZ = 15,
		
		BA = 16,
		
		BB = 17,
		
		BD = 18,
		
		BE = 19,
		
		BF = 20,
		
		BG = 21,
		
		BH = 22,
		
		BI = 23,
		
		BJ = 24,
		
		BL = 25,
		
		BM = 26,
		
		BN = 27,
		
		BO = 28,
		
		BR = 29,
		
		BS = 30,
		
		BT = 31,
		
		BW = 32,
		
		BY = 33,
		
		BZ = 34,
		
		CA = 35,
		
		CC = 36,
		
		CD = 37,
		
		CF = 38,
		
		CG = 39,
		
		CH = 40,
		
		CI = 41,
		
		CK = 42,
		
		CL = 43,
		
		CM = 44,
		
		CN = 45,
		
		CO = 46,
		
		CR = 47,
		
		CU = 48,
		
		CV = 49,
		
		CW = 50,
		
		CX = 51,
		
		CY = 52,
		
		CZ = 53,
		
		DE = 54,
		
		DJ = 55,
		
		DK = 56,
		
		DM = 57,
		
		DO = 58,
		
		DZ = 59,
		
		EC = 60,
		
		EE = 61,
		
		EG = 62,
		
		EH = 63,
		
		ER = 64,
		
		ES = 65,
		
		ET = 66,
		
		FI = 67,
		
		FJ = 68,
		
		FK = 69,
		
		FM = 70,
		
		FO = 71,
		
		FR = 72,
		
		GA = 73,
		
		GB = 74,
		
		GD = 75,
		
		GE = 76,
		
		GG = 77,
		
		GH = 78,
		
		GI = 79,
		
		GL = 80,
		
		GM = 81,
		
		GN = 82,
		
		GQ = 83,
		
		GR = 84,
		
		GT = 85,
		
		GU = 86,
		
		GW = 87,
		
		GY = 88,
		
		HK = 89,
		
		HN = 90,
		
		HR = 91,
		
		HT = 92,
		
		HU = 93,
		
		ID = 94,
		
		IE = 95,
		
		IL = 96,
		
		IM = 97,
		
		IN = 98,
		
		IO = 99,
		
		IQ = 100,
		
		IR = 101,
		
		IS = 102,
		
		IT = 103,
		
		JE = 104,
		
		JM = 105,
		
		JO = 106,
		
		JP = 107,
		
		KE = 108,
		
		KG = 109,
		
		KH = 110,
		
		KI = 111,
		
		KM = 112,
		
		KN = 113,
		
		KP = 114,
		
		KR = 115,
		
		KW = 116,
		
		KY = 117,
		
		KZ = 118,
		
		LA = 119,
		
		LB = 120,
		
		LC = 121,
		
		LI = 122,
		
		LK = 123,
		
		LR = 124,
		
		LS = 125,
		
		LT = 126,
		
		LU = 127,
		
		LV = 128,
		
		LY = 129,
		
		MA = 130,
		
		MC = 131,
		
		MD = 132,
		
		ME = 133,
		
		MF = 134,
		
		MG = 135,
		
		MH = 136,
		
		MK = 137,
		
		ML = 138,
		
		MM = 139,
		
		MN = 140,
		
		MO = 141,
		
		MP = 142,
		
		MR = 143,
		
		MS = 144,
		
		MT = 145,
		
		MU = 146,
		
		MV = 147,
		
		MW = 148,
		
		MX = 149,
		
		MY = 150,
		
		MZ = 151,
		
		NA = 152,
		
		NC = 153,
		
		NE = 154,
		
		NG = 155,
		
		NI = 156,
		
		NL = 157,
		
		NO = 158,
		
		NP = 159,
		
		NR = 160,
		
		NU = 161,
		
		NZ = 162,
		
		OM = 163,
		
		PA = 164,
		
		PE = 165,
		
		PF = 166,
		
		PG = 167,
		
		PH = 168,
		
		PK = 169,
		
		PL = 170,
		
		PM = 171,
		
		PN = 172,
		
		PR = 173,
		
		PS = 174,
		
		PT = 175,
		
		PW = 176,
		
		PY = 177,
		
		QA = 178,
		
		RE = 179,
		
		RO = 180,
		
		RS = 181,
		
		RU = 182,
		
		RW = 183,
		
		SA = 184,
		
		SB = 185,
		
		SC = 186,
		
		SD = 187,
		
		SE = 188,
		
		SG = 189,
		
		SH = 190,
		
		SI = 191,
		
		SJ = 192,
		
		SK = 193,
		
		SL = 194,
		
		SM = 195,
		
		SN = 196,
		
		SO = 197,
		
		SR = 198,
		
		SS = 199,
		
		ST = 200,
		
		SV = 201,
		
		SX = 202,
		
		SY = 203,
		
		SZ = 204,
		
		TC = 205,
		
		TD = 206,
		
		TG = 207,
		
		TH = 208,
		
		TJ = 209,
		
		TK = 210,
		
		TL = 211,
		
		TM = 212,
		
		TN = 213,
		
		TO = 214,
		
		TR = 215,
		
		TT = 216,
		
		TV = 217,
		
		TW = 218,
		
		TZ = 219,
		
		UA = 220,
		
		UG = 221,
		
		US = 222,
		
		UY = 223,
		
		UZ = 224,
		
		VA = 225,
		
		VC = 226,
		
		VE = 227,
		
		VG = 228,
		
		VI = 229,
		
		VN = 230,
		
		VU = 231,
		
		WF = 232,
		
		WS = 233,
		
		XK = 234,
		
		YE = 235,
		
		YT = 236,
		
		ZA = 237,
		
		ZM = 238,
		
		ZW = 239,
	}
	
	public enum OrganisationSalesTaxBasis
	{
		
		PAYMENTS = 0,
		
		INVOICE = 1,
		
		NONE = 2,
		
		CASH = 3,
		
		ACCRUAL = 4,
		
		FLATRATECASH = 5,
		
		FLATRATEACCRUAL = 6,
		
		ACCRUALS = 7,
	}
	
	public enum OrganisationSalesTaxPeriod
	{
		
		MONTHLY = 0,
		
		QUARTERLY1 = 1,
		
		QUARTERLY2 = 2,
		
		QUARTERLY3 = 3,
		
		ANNUALLY = 4,
		
		ONEMONTHS = 5,
		
		TWOMONTHS = 6,
		
		SIXMONTHS = 7,
		
		_1MONTHLY = 8,
		
		_2MONTHLY = 9,
		
		_3MONTHLY = 10,
		
		_6MONTHLY = 11,
		
		QUARTERLY = 12,
		
		YEARLY = 13,
		
		NONE = 14,
	}
	
	public enum OrganisationTimezone
	{
		
		MOROCCOSTANDARDTIME = 0,
		
		UTC = 1,
		
		GMTSTANDARDTIME = 2,
		
		GREENWICHSTANDARDTIME = 3,
		
		WEUROPESTANDARDTIME = 4,
		
		CENTRALEUROPESTANDARDTIME = 5,
		
		ROMANCESTANDARDTIME = 6,
		
		CENTRALEUROPEANSTANDARDTIME = 7,
		
		WCENTRALAFRICASTANDARDTIME = 8,
		
		NAMIBIASTANDARDTIME = 9,
		
		JORDANSTANDARDTIME = 10,
		
		GTBSTANDARDTIME = 11,
		
		MIDDLEEASTSTANDARDTIME = 12,
		
		EGYPTSTANDARDTIME = 13,
		
		SYRIASTANDARDTIME = 14,
		
		EEUROPESTANDARDTIME = 15,
		
		SOUTHAFRICASTANDARDTIME = 16,
		
		FLESTANDARDTIME = 17,
		
		TURKEYSTANDARDTIME = 18,
		
		ISRAELSTANDARDTIME = 19,
		
		KALININGRADSTANDARDTIME = 20,
		
		LIBYASTANDARDTIME = 21,
		
		ARABICSTANDARDTIME = 22,
		
		ARABSTANDARDTIME = 23,
		
		BELARUSSTANDARDTIME = 24,
		
		RUSSIANSTANDARDTIME = 25,
		
		EAFRICASTANDARDTIME = 26,
		
		IRANSTANDARDTIME = 27,
		
		ARABIANSTANDARDTIME = 28,
		
		AZERBAIJANSTANDARDTIME = 29,
		
		RUSSIATIMEZONE3 = 30,
		
		MAURITIUSSTANDARDTIME = 31,
		
		GEORGIANSTANDARDTIME = 32,
		
		CAUCASUSSTANDARDTIME = 33,
		
		AFGHANISTANSTANDARDTIME = 34,
		
		WESTASIASTANDARDTIME = 35,
		
		EKATERINBURGSTANDARDTIME = 36,
		
		PAKISTANSTANDARDTIME = 37,
		
		INDIASTANDARDTIME = 38,
		
		SRILANKASTANDARDTIME = 39,
		
		NEPALSTANDARDTIME = 40,
		
		CENTRALASIASTANDARDTIME = 41,
		
		BANGLADESHSTANDARDTIME = 42,
		
		NCENTRALASIASTANDARDTIME = 43,
		
		MYANMARSTANDARDTIME = 44,
		
		SEASIASTANDARDTIME = 45,
		
		NORTHASIASTANDARDTIME = 46,
		
		CHINASTANDARDTIME = 47,
		
		NORTHASIAEASTSTANDARDTIME = 48,
		
		SINGAPORESTANDARDTIME = 49,
		
		WAUSTRALIASTANDARDTIME = 50,
		
		TAIPEISTANDARDTIME = 51,
		
		ULAANBAATARSTANDARDTIME = 52,
		
		TOKYOSTANDARDTIME = 53,
		
		KOREASTANDARDTIME = 54,
		
		YAKUTSKSTANDARDTIME = 55,
		
		CENAUSTRALIASTANDARDTIME = 56,
		
		AUSCENTRALSTANDARDTIME = 57,
		
		EAUSTRALIASTANDARDTIME = 58,
		
		AUSEASTERNSTANDARDTIME = 59,
		
		WESTPACIFICSTANDARDTIME = 60,
		
		TASMANIASTANDARDTIME = 61,
		
		MAGADANSTANDARDTIME = 62,
		
		VLADIVOSTOKSTANDARDTIME = 63,
		
		RUSSIATIMEZONE10 = 64,
		
		CENTRALPACIFICSTANDARDTIME = 65,
		
		RUSSIATIMEZONE11 = 66,
		
		NEWZEALANDSTANDARDTIME = 67,
		
		UTCPlus12 = 68,
		
		FIJISTANDARDTIME = 69,
		
		KAMCHATKASTANDARDTIME = 70,
		
		TONGASTANDARDTIME = 71,
		
		SAMOASTANDARDTIME = 72,
		
		LINEISLANDSSTANDARDTIME = 73,
		
		AZORESSTANDARDTIME = 74,
		
		CAPEVERDESTANDARDTIME = 75,
		
		UTC02 = 76,
		
		MIDATLANTICSTANDARDTIME = 77,
		
		ESOUTHAMERICASTANDARDTIME = 78,
		
		ARGENTINASTANDARDTIME = 79,
		
		SAEASTERNSTANDARDTIME = 80,
		
		GREENLANDSTANDARDTIME = 81,
		
		MONTEVIDEOSTANDARDTIME = 82,
		
		BAHIASTANDARDTIME = 83,
		
		NEWFOUNDLANDSTANDARDTIME = 84,
		
		PARAGUAYSTANDARDTIME = 85,
		
		ATLANTICSTANDARDTIME = 86,
		
		CENTRALBRAZILIANSTANDARDTIME = 87,
		
		SAWESTERNSTANDARDTIME = 88,
		
		PACIFICSASTANDARDTIME = 89,
		
		VENEZUELASTANDARDTIME = 90,
		
		SAPACIFICSTANDARDTIME = 91,
		
		EASTERNSTANDARDTIME = 92,
		
		USEASTERNSTANDARDTIME = 93,
		
		CENTRALAMERICASTANDARDTIME = 94,
		
		CENTRALSTANDARDTIME = 95,
		
		CENTRALSTANDARDTIMEMEXICO = 96,
		
		CANADACENTRALSTANDARDTIME = 97,
		
		USMOUNTAINSTANDARDTIME = 98,
		
		MOUNTAINSTANDARDTIMEMEXICO = 99,
		
		MOUNTAINSTANDARDTIME = 100,
		
		PACIFICSTANDARDTIMEMEXICO = 101,
		
		PACIFICSTANDARDTIME = 102,
		
		ALASKANSTANDARDTIME = 103,
		
		HAWAIIANSTANDARDTIME = 104,
		
		UTC11 = 105,
		
		DATELINESTANDARDTIME = 106,
	}
	
	public enum OrganisationClass
	{
		
		DEMO = 0,
		
		TRIAL = 1,
		
		STARTER = 2,
		
		STANDARD = 3,
		
		PREMIUM = 4,
		
		PREMIUM_20 = 5,
		
		PREMIUM_50 = 6,
		
		PREMIUM_100 = 7,
		
		LEDGER = 8,
		
		GST_CASHBOOK = 9,
		
		NON_GST_CASHBOOK = 10,
	}
	
	public enum OrganisationEdition
	{
		
		BUSINESS = 0,
		
		PARTNER = 1,
	}
	
	public enum CountryCode
	{
		
		AD = 0,
		
		AE = 1,
		
		AF = 2,
		
		AG = 3,
		
		AI = 4,
		
		AL = 5,
		
		AM = 6,
		
		AN = 7,
		
		AO = 8,
		
		AQ = 9,
		
		AR = 10,
		
		AS = 11,
		
		AT = 12,
		
		AU = 13,
		
		AW = 14,
		
		AZ = 15,
		
		BA = 16,
		
		BB = 17,
		
		BD = 18,
		
		BE = 19,
		
		BF = 20,
		
		BG = 21,
		
		BH = 22,
		
		BI = 23,
		
		BJ = 24,
		
		BL = 25,
		
		BM = 26,
		
		BN = 27,
		
		BO = 28,
		
		BR = 29,
		
		BS = 30,
		
		BT = 31,
		
		BW = 32,
		
		BY = 33,
		
		BZ = 34,
		
		CA = 35,
		
		CC = 36,
		
		CD = 37,
		
		CF = 38,
		
		CG = 39,
		
		CH = 40,
		
		CI = 41,
		
		CK = 42,
		
		CL = 43,
		
		CM = 44,
		
		CN = 45,
		
		CO = 46,
		
		CR = 47,
		
		CU = 48,
		
		CV = 49,
		
		CW = 50,
		
		CX = 51,
		
		CY = 52,
		
		CZ = 53,
		
		DE = 54,
		
		DJ = 55,
		
		DK = 56,
		
		DM = 57,
		
		DO = 58,
		
		DZ = 59,
		
		EC = 60,
		
		EE = 61,
		
		EG = 62,
		
		EH = 63,
		
		ER = 64,
		
		ES = 65,
		
		ET = 66,
		
		FI = 67,
		
		FJ = 68,
		
		FK = 69,
		
		FM = 70,
		
		FO = 71,
		
		FR = 72,
		
		GA = 73,
		
		GB = 74,
		
		GD = 75,
		
		GE = 76,
		
		GG = 77,
		
		GH = 78,
		
		GI = 79,
		
		GL = 80,
		
		GM = 81,
		
		GN = 82,
		
		GQ = 83,
		
		GR = 84,
		
		GT = 85,
		
		GU = 86,
		
		GW = 87,
		
		GY = 88,
		
		HK = 89,
		
		HN = 90,
		
		HR = 91,
		
		HT = 92,
		
		HU = 93,
		
		ID = 94,
		
		IE = 95,
		
		IL = 96,
		
		IM = 97,
		
		IN = 98,
		
		IO = 99,
		
		IQ = 100,
		
		IR = 101,
		
		IS = 102,
		
		IT = 103,
		
		JE = 104,
		
		JM = 105,
		
		JO = 106,
		
		JP = 107,
		
		KE = 108,
		
		KG = 109,
		
		KH = 110,
		
		KI = 111,
		
		KM = 112,
		
		KN = 113,
		
		KP = 114,
		
		KR = 115,
		
		KW = 116,
		
		KY = 117,
		
		KZ = 118,
		
		LA = 119,
		
		LB = 120,
		
		LC = 121,
		
		LI = 122,
		
		LK = 123,
		
		LR = 124,
		
		LS = 125,
		
		LT = 126,
		
		LU = 127,
		
		LV = 128,
		
		LY = 129,
		
		MA = 130,
		
		MC = 131,
		
		MD = 132,
		
		ME = 133,
		
		MF = 134,
		
		MG = 135,
		
		MH = 136,
		
		MK = 137,
		
		ML = 138,
		
		MM = 139,
		
		MN = 140,
		
		MO = 141,
		
		MP = 142,
		
		MR = 143,
		
		MS = 144,
		
		MT = 145,
		
		MU = 146,
		
		MV = 147,
		
		MW = 148,
		
		MX = 149,
		
		MY = 150,
		
		MZ = 151,
		
		NA = 152,
		
		NC = 153,
		
		NE = 154,
		
		NG = 155,
		
		NI = 156,
		
		NL = 157,
		
		NO = 158,
		
		NP = 159,
		
		NR = 160,
		
		NU = 161,
		
		NZ = 162,
		
		OM = 163,
		
		PA = 164,
		
		PE = 165,
		
		PF = 166,
		
		PG = 167,
		
		PH = 168,
		
		PK = 169,
		
		PL = 170,
		
		PM = 171,
		
		PN = 172,
		
		PR = 173,
		
		PS = 174,
		
		PT = 175,
		
		PW = 176,
		
		PY = 177,
		
		QA = 178,
		
		RE = 179,
		
		RO = 180,
		
		RS = 181,
		
		RU = 182,
		
		RW = 183,
		
		SA = 184,
		
		SB = 185,
		
		SC = 186,
		
		SD = 187,
		
		SE = 188,
		
		SG = 189,
		
		SH = 190,
		
		SI = 191,
		
		SJ = 192,
		
		SK = 193,
		
		SL = 194,
		
		SM = 195,
		
		SN = 196,
		
		SO = 197,
		
		SR = 198,
		
		SS = 199,
		
		ST = 200,
		
		SV = 201,
		
		SX = 202,
		
		SY = 203,
		
		SZ = 204,
		
		TC = 205,
		
		TD = 206,
		
		TG = 207,
		
		TH = 208,
		
		TJ = 209,
		
		TK = 210,
		
		TL = 211,
		
		TM = 212,
		
		TN = 213,
		
		TO = 214,
		
		TR = 215,
		
		TT = 216,
		
		TV = 217,
		
		TW = 218,
		
		TZ = 219,
		
		UA = 220,
		
		UG = 221,
		
		US = 222,
		
		UY = 223,
		
		UZ = 224,
		
		VA = 225,
		
		VC = 226,
		
		VE = 227,
		
		VG = 228,
		
		VI = 229,
		
		VN = 230,
		
		VU = 231,
		
		WF = 232,
		
		WS = 233,
		
		XK = 234,
		
		YE = 235,
		
		YT = 236,
		
		ZA = 237,
		
		ZM = 238,
		
		ZW = 239,
	}
	
	/// <summary>
	/// Timezone specifications
	/// </summary>
	public enum TimeZone
	{
		
		MOROCCOSTANDARDTIME = 0,
		
		UTC = 1,
		
		GMTSTANDARDTIME = 2,
		
		GREENWICHSTANDARDTIME = 3,
		
		WEUROPESTANDARDTIME = 4,
		
		CENTRALEUROPESTANDARDTIME = 5,
		
		ROMANCESTANDARDTIME = 6,
		
		CENTRALEUROPEANSTANDARDTIME = 7,
		
		WCENTRALAFRICASTANDARDTIME = 8,
		
		NAMIBIASTANDARDTIME = 9,
		
		JORDANSTANDARDTIME = 10,
		
		GTBSTANDARDTIME = 11,
		
		MIDDLEEASTSTANDARDTIME = 12,
		
		EGYPTSTANDARDTIME = 13,
		
		SYRIASTANDARDTIME = 14,
		
		EEUROPESTANDARDTIME = 15,
		
		SOUTHAFRICASTANDARDTIME = 16,
		
		FLESTANDARDTIME = 17,
		
		TURKEYSTANDARDTIME = 18,
		
		ISRAELSTANDARDTIME = 19,
		
		KALININGRADSTANDARDTIME = 20,
		
		LIBYASTANDARDTIME = 21,
		
		ARABICSTANDARDTIME = 22,
		
		ARABSTANDARDTIME = 23,
		
		BELARUSSTANDARDTIME = 24,
		
		RUSSIANSTANDARDTIME = 25,
		
		EAFRICASTANDARDTIME = 26,
		
		IRANSTANDARDTIME = 27,
		
		ARABIANSTANDARDTIME = 28,
		
		AZERBAIJANSTANDARDTIME = 29,
		
		RUSSIATIMEZONE3 = 30,
		
		MAURITIUSSTANDARDTIME = 31,
		
		GEORGIANSTANDARDTIME = 32,
		
		CAUCASUSSTANDARDTIME = 33,
		
		AFGHANISTANSTANDARDTIME = 34,
		
		WESTASIASTANDARDTIME = 35,
		
		EKATERINBURGSTANDARDTIME = 36,
		
		PAKISTANSTANDARDTIME = 37,
		
		INDIASTANDARDTIME = 38,
		
		SRILANKASTANDARDTIME = 39,
		
		NEPALSTANDARDTIME = 40,
		
		CENTRALASIASTANDARDTIME = 41,
		
		BANGLADESHSTANDARDTIME = 42,
		
		NCENTRALASIASTANDARDTIME = 43,
		
		MYANMARSTANDARDTIME = 44,
		
		SEASIASTANDARDTIME = 45,
		
		NORTHASIASTANDARDTIME = 46,
		
		CHINASTANDARDTIME = 47,
		
		NORTHASIAEASTSTANDARDTIME = 48,
		
		SINGAPORESTANDARDTIME = 49,
		
		WAUSTRALIASTANDARDTIME = 50,
		
		TAIPEISTANDARDTIME = 51,
		
		ULAANBAATARSTANDARDTIME = 52,
		
		TOKYOSTANDARDTIME = 53,
		
		KOREASTANDARDTIME = 54,
		
		YAKUTSKSTANDARDTIME = 55,
		
		CENAUSTRALIASTANDARDTIME = 56,
		
		AUSCENTRALSTANDARDTIME = 57,
		
		EAUSTRALIASTANDARDTIME = 58,
		
		AUSEASTERNSTANDARDTIME = 59,
		
		WESTPACIFICSTANDARDTIME = 60,
		
		TASMANIASTANDARDTIME = 61,
		
		MAGADANSTANDARDTIME = 62,
		
		VLADIVOSTOKSTANDARDTIME = 63,
		
		RUSSIATIMEZONE10 = 64,
		
		CENTRALPACIFICSTANDARDTIME = 65,
		
		RUSSIATIMEZONE11 = 66,
		
		NEWZEALANDSTANDARDTIME = 67,
		
		UTCPlus12 = 68,
		
		FIJISTANDARDTIME = 69,
		
		KAMCHATKASTANDARDTIME = 70,
		
		TONGASTANDARDTIME = 71,
		
		SAMOASTANDARDTIME = 72,
		
		LINEISLANDSSTANDARDTIME = 73,
		
		AZORESSTANDARDTIME = 74,
		
		CAPEVERDESTANDARDTIME = 75,
		
		UTC02 = 76,
		
		MIDATLANTICSTANDARDTIME = 77,
		
		ESOUTHAMERICASTANDARDTIME = 78,
		
		ARGENTINASTANDARDTIME = 79,
		
		SAEASTERNSTANDARDTIME = 80,
		
		GREENLANDSTANDARDTIME = 81,
		
		MONTEVIDEOSTANDARDTIME = 82,
		
		BAHIASTANDARDTIME = 83,
		
		NEWFOUNDLANDSTANDARDTIME = 84,
		
		PARAGUAYSTANDARDTIME = 85,
		
		ATLANTICSTANDARDTIME = 86,
		
		CENTRALBRAZILIANSTANDARDTIME = 87,
		
		SAWESTERNSTANDARDTIME = 88,
		
		PACIFICSASTANDARDTIME = 89,
		
		VENEZUELASTANDARDTIME = 90,
		
		SAPACIFICSTANDARDTIME = 91,
		
		EASTERNSTANDARDTIME = 92,
		
		USEASTERNSTANDARDTIME = 93,
		
		CENTRALAMERICASTANDARDTIME = 94,
		
		CENTRALSTANDARDTIME = 95,
		
		CENTRALSTANDARDTIMEMEXICO = 96,
		
		CANADACENTRALSTANDARDTIME = 97,
		
		USMOUNTAINSTANDARDTIME = 98,
		
		MOUNTAINSTANDARDTIMEMEXICO = 99,
		
		MOUNTAINSTANDARDTIME = 100,
		
		PACIFICSTANDARDTIMEMEXICO = 101,
		
		PACIFICSTANDARDTIME = 102,
		
		ALASKANSTANDARDTIME = 103,
		
		HAWAIIANSTANDARDTIME = 104,
		
		UTC11 = 105,
		
		DATELINESTANDARDTIME = 106,
	}
	
	public enum PaymentTermType
	{
		
		DAYSAFTERBILLDATE = 0,
		
		DAYSAFTERBILLMONTH = 1,
		
		OFCURRENTMONTH = 2,
		
		OFFOLLOWINGMONTH = 3,
	}
	
	public class Overpayments
	{
		
		public Overpayment[] Overpayments1 { get; set; }
	}
	
	public class Payments
	{
		
		public Payment[] Payments1 { get; set; }
	}
	
	public class PaymentDelete
	{
		
		/// <summary>
		/// The status of the payment.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("DELETED")]
		[System.ComponentModel.DataAnnotations.Required()]
		public string Status { get; set; } = "DELETED";
	}
	
	public class Prepayments
	{
		
		public Prepayment[] Prepayments1 { get; set; }
	}
	
	public class PurchaseOrders
	{
		
		public PurchaseOrder[] PurchaseOrders1 { get; set; }
	}
	
	public class PurchaseOrder
	{
		
		public Contact Contact { get; set; }
		
		/// <summary>
		/// See LineItems
		/// </summary>
		public LineItem[] LineItems { get; set; }
		
		/// <summary>
		/// Date purchase order was issued � YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation
		/// </summary>
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// Date the goods are to be delivered � YYYY-MM-DD
		/// </summary>
		public System.Nullable<System.DateOnly> DeliveryDate { get; set; }
		
		/// <summary>
		/// Line amounts are exclusive of tax by default if you don�t specify this element. See Line Amount Types
		/// </summary>
		public BankTransactionLineAmountTypes LineAmountTypes { get; set; }
		
		/// <summary>
		/// Unique alpha numeric code identifying purchase order (when missing will auto-generate from your Organisation Invoice Settings)
		/// </summary>
		public string PurchaseOrderNumber { get; set; }
		
		/// <summary>
		/// Additional reference number
		/// </summary>
		public string Reference { get; set; }
		
		/// <summary>
		/// See BrandingThemes
		/// </summary>
		public string BrandingThemeID { get; set; }
		
		/// <summary>
		/// 3 letter alpha code for the currency � see list of currency codes
		/// </summary>
		public System.Nullable<PurchaseOrderCurrencyCode> CurrencyCode { get; set; }
		
		/// <summary>
		/// See Purchase Order Status Codes
		/// </summary>
		public System.Nullable<PurchaseOrderStatus> Status { get; set; }
		
		/// <summary>
		/// Boolean to set whether the purchase order should be marked as �sent�. This can be set only on purchase orders that have been approved or billed
		/// </summary>
		public System.Nullable<System.Boolean> SentToContact { get; set; }
		
		/// <summary>
		/// The address the goods are to be delivered to
		/// </summary>
		public string DeliveryAddress { get; set; }
		
		/// <summary>
		/// The person that the delivery is going to
		/// </summary>
		public string AttentionTo { get; set; }
		
		/// <summary>
		/// The phone number for the person accepting the delivery
		/// </summary>
		public string Telephone { get; set; }
		
		/// <summary>
		/// A free text feild for instructions (500 characters max)
		/// </summary>
		public string DeliveryInstructions { get; set; }
		
		/// <summary>
		/// The date the goods are expected to arrive.
		/// </summary>
		public System.Nullable<System.DateOnly> ExpectedArrivalDate { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier for purchase order
		/// </summary>
		public string PurchaseOrderID { get; set; }
		
		/// <summary>
		/// The currency rate for a multicurrency purchase order. If no rate is specified, the XE.com day rate is used.
		/// </summary>
		public System.Nullable<System.Double> CurrencyRate { get; set; }
		
		/// <summary>
		/// Total of purchase order excluding taxes
		/// </summary>
		public System.Nullable<System.Double> SubTotal { get; set; }
		
		/// <summary>
		/// Total tax on purchase order
		/// </summary>
		public System.Nullable<System.Double> TotalTax { get; set; }
		
		/// <summary>
		/// Total of Purchase Order tax inclusive (i.e. SubTotal + TotalTax)
		/// </summary>
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// Total of discounts applied on the purchase order line items
		/// </summary>
		public System.Nullable<System.Double> TotalDiscount { get; set; }
		
		/// <summary>
		/// boolean to indicate if a purchase order has an attachment
		/// </summary>
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// Last modified date UTC format
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// A string to indicate if a invoice status
		/// </summary>
		public string StatusAttributeString { get; set; }
		
		/// <summary>
		/// Displays array of validation error messages from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
		
		/// <summary>
		/// Displays array of warning messages from the API
		/// </summary>
		public ValidationError[] Warnings { get; set; }
		
		/// <summary>
		/// Displays array of attachments from the API
		/// </summary>
		public Attachment[] Attachments { get; set; }
	}
	
	public enum PurchaseOrderCurrencyCode
	{
		
		AED = 0,
		
		AFN = 1,
		
		ALL = 2,
		
		AMD = 3,
		
		ANG = 4,
		
		AOA = 5,
		
		ARS = 6,
		
		AUD = 7,
		
		AWG = 8,
		
		AZN = 9,
		
		BAM = 10,
		
		BBD = 11,
		
		BDT = 12,
		
		BGN = 13,
		
		BHD = 14,
		
		BIF = 15,
		
		BMD = 16,
		
		BND = 17,
		
		BOB = 18,
		
		BRL = 19,
		
		BSD = 20,
		
		BTN = 21,
		
		BWP = 22,
		
		BYN = 23,
		
		BZD = 24,
		
		CAD = 25,
		
		CDF = 26,
		
		CHF = 27,
		
		CLP = 28,
		
		CNY = 29,
		
		COP = 30,
		
		CRC = 31,
		
		CUC = 32,
		
		CUP = 33,
		
		CVE = 34,
		
		CZK = 35,
		
		DJF = 36,
		
		DKK = 37,
		
		DOP = 38,
		
		DZD = 39,
		
		EGP = 40,
		
		ERN = 41,
		
		ETB = 42,
		
		EUR = 43,
		
		FJD = 44,
		
		FKP = 45,
		
		GBP = 46,
		
		GEL = 47,
		
		GGP = 48,
		
		GHS = 49,
		
		GIP = 50,
		
		GMD = 51,
		
		GNF = 52,
		
		GTQ = 53,
		
		GYD = 54,
		
		HKD = 55,
		
		HNL = 56,
		
		HRK = 57,
		
		HTG = 58,
		
		HUF = 59,
		
		IDR = 60,
		
		ILS = 61,
		
		IMP = 62,
		
		INR = 63,
		
		IQD = 64,
		
		IRR = 65,
		
		ISK = 66,
		
		JEP = 67,
		
		JMD = 68,
		
		JOD = 69,
		
		JPY = 70,
		
		KES = 71,
		
		KGS = 72,
		
		KHR = 73,
		
		KMF = 74,
		
		KPW = 75,
		
		KRW = 76,
		
		KWD = 77,
		
		KYD = 78,
		
		KZT = 79,
		
		LAK = 80,
		
		LBP = 81,
		
		LKR = 82,
		
		LRD = 83,
		
		LSL = 84,
		
		LYD = 85,
		
		MAD = 86,
		
		MDL = 87,
		
		MGA = 88,
		
		MKD = 89,
		
		MMK = 90,
		
		MNT = 91,
		
		MOP = 92,
		
		MRU = 93,
		
		MUR = 94,
		
		MVR = 95,
		
		MWK = 96,
		
		MXN = 97,
		
		MYR = 98,
		
		MZN = 99,
		
		NAD = 100,
		
		NGN = 101,
		
		NIO = 102,
		
		NOK = 103,
		
		NPR = 104,
		
		NZD = 105,
		
		OMR = 106,
		
		PAB = 107,
		
		PEN = 108,
		
		PGK = 109,
		
		PHP = 110,
		
		PKR = 111,
		
		PLN = 112,
		
		PYG = 113,
		
		QAR = 114,
		
		RON = 115,
		
		RSD = 116,
		
		RUB = 117,
		
		RWF = 118,
		
		SAR = 119,
		
		SBD = 120,
		
		SCR = 121,
		
		SDG = 122,
		
		SEK = 123,
		
		SGD = 124,
		
		SHP = 125,
		
		SLL = 126,
		
		SOS = 127,
		
		SPL = 128,
		
		SRD = 129,
		
		STN = 130,
		
		SVC = 131,
		
		SYP = 132,
		
		SZL = 133,
		
		THB = 134,
		
		TJS = 135,
		
		TMT = 136,
		
		TND = 137,
		
		TOP = 138,
		
		TRY = 139,
		
		TTD = 140,
		
		TVD = 141,
		
		TWD = 142,
		
		TZS = 143,
		
		UAH = 144,
		
		UGX = 145,
		
		USD = 146,
		
		UYU = 147,
		
		UZS = 148,
		
		VEF = 149,
		
		VND = 150,
		
		VUV = 151,
		
		WST = 152,
		
		XAF = 153,
		
		XCD = 154,
		
		XDR = 155,
		
		XOF = 156,
		
		XPF = 157,
		
		YER = 158,
		
		ZAR = 159,
		
		ZMW = 160,
		
		ZMK = 161,
		
		ZWD = 162,
		
		_ = 163,
	}
	
	public enum PurchaseOrderStatus
	{
		
		DRAFT = 0,
		
		SUBMITTED = 1,
		
		AUTHORISED = 2,
		
		BILLED = 3,
		
		DELETED = 4,
	}
	
	public class Quotes
	{
		
		public Quote[] Quotes1 { get; set; }
	}
	
	public class Quote
	{
		
		/// <summary>
		/// QuoteID GUID is automatically generated and is returned after create or GET.
		/// </summary>
		public string QuoteID { get; set; }
		
		/// <summary>
		/// Unique alpha numeric code identifying a quote (Max Length = 255)
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string QuoteNumber { get; set; }
		
		/// <summary>
		/// Additional reference number
		/// Max length: 4000
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(4000)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Terms of the quote
		/// Max length: 4000
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(4000)]
		public string Terms { get; set; }
		
		public Contact Contact { get; set; }
		
		/// <summary>
		/// See LineItems
		/// </summary>
		public LineItem[] LineItems { get; set; }
		
		/// <summary>
		/// Date quote was issued � YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation
		/// </summary>
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// Date the quote was issued (YYYY-MM-DD)
		/// </summary>
		public string DateString { get; set; }
		
		/// <summary>
		/// Date the quote expires � YYYY-MM-DD.
		/// </summary>
		public System.Nullable<System.DateOnly> ExpiryDate { get; set; }
		
		/// <summary>
		/// Date the quote expires � YYYY-MM-DD.
		/// </summary>
		public string ExpiryDateString { get; set; }
		
		/// <summary>
		/// The status of the quote.
		/// </summary>
		public System.Nullable<QuoteStatus> Status { get; set; }
		
		/// <summary>
		/// 3 letter alpha code for the currency � see list of currency codes
		/// </summary>
		public System.Nullable<QuoteCurrencyCode> CurrencyCode { get; set; }
		
		/// <summary>
		/// The currency rate for a multicurrency quote
		/// </summary>
		public System.Nullable<System.Double> CurrencyRate { get; set; }
		
		/// <summary>
		/// Total of quote excluding taxes.
		/// </summary>
		public System.Nullable<System.Double> SubTotal { get; set; }
		
		/// <summary>
		/// Total tax on quote
		/// </summary>
		public System.Nullable<System.Double> TotalTax { get; set; }
		
		/// <summary>
		/// Total of Quote tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn�t equal the sum of the LineAmounts
		/// </summary>
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// Total of discounts applied on the quote line items
		/// </summary>
		public System.Nullable<System.Double> TotalDiscount { get; set; }
		
		/// <summary>
		/// Title text for the quote
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Title { get; set; }
		
		/// <summary>
		/// Summary text for the quote
		/// Max length: 3000
		/// </summary>
		[System.ComponentModel.DataAnnotations.MaxLength(3000)]
		public string Summary { get; set; }
		
		/// <summary>
		/// See BrandingThemes
		/// </summary>
		public string BrandingThemeID { get; set; }
		
		/// <summary>
		/// Last modified date UTC format
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// Line amounts are exclusive of tax by default if you don�t specify this element. See Line Amount Types
		/// </summary>
		public System.Nullable<QuoteLineAmountTypes> LineAmountTypes { get; set; }
		
		/// <summary>
		/// A string to indicate if a invoice status
		/// </summary>
		public string StatusAttributeString { get; set; }
		
		/// <summary>
		/// Displays array of validation error messages from the API
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
	}
	
	public enum QuoteStatus
	{
		
		DRAFT = 0,
		
		SENT = 1,
		
		DECLINED = 2,
		
		ACCEPTED = 3,
		
		INVOICED = 4,
	}
	
	public enum QuoteCurrencyCode
	{
		
		AED = 0,
		
		AFN = 1,
		
		ALL = 2,
		
		AMD = 3,
		
		ANG = 4,
		
		AOA = 5,
		
		ARS = 6,
		
		AUD = 7,
		
		AWG = 8,
		
		AZN = 9,
		
		BAM = 10,
		
		BBD = 11,
		
		BDT = 12,
		
		BGN = 13,
		
		BHD = 14,
		
		BIF = 15,
		
		BMD = 16,
		
		BND = 17,
		
		BOB = 18,
		
		BRL = 19,
		
		BSD = 20,
		
		BTN = 21,
		
		BWP = 22,
		
		BYN = 23,
		
		BZD = 24,
		
		CAD = 25,
		
		CDF = 26,
		
		CHF = 27,
		
		CLP = 28,
		
		CNY = 29,
		
		COP = 30,
		
		CRC = 31,
		
		CUC = 32,
		
		CUP = 33,
		
		CVE = 34,
		
		CZK = 35,
		
		DJF = 36,
		
		DKK = 37,
		
		DOP = 38,
		
		DZD = 39,
		
		EGP = 40,
		
		ERN = 41,
		
		ETB = 42,
		
		EUR = 43,
		
		FJD = 44,
		
		FKP = 45,
		
		GBP = 46,
		
		GEL = 47,
		
		GGP = 48,
		
		GHS = 49,
		
		GIP = 50,
		
		GMD = 51,
		
		GNF = 52,
		
		GTQ = 53,
		
		GYD = 54,
		
		HKD = 55,
		
		HNL = 56,
		
		HRK = 57,
		
		HTG = 58,
		
		HUF = 59,
		
		IDR = 60,
		
		ILS = 61,
		
		IMP = 62,
		
		INR = 63,
		
		IQD = 64,
		
		IRR = 65,
		
		ISK = 66,
		
		JEP = 67,
		
		JMD = 68,
		
		JOD = 69,
		
		JPY = 70,
		
		KES = 71,
		
		KGS = 72,
		
		KHR = 73,
		
		KMF = 74,
		
		KPW = 75,
		
		KRW = 76,
		
		KWD = 77,
		
		KYD = 78,
		
		KZT = 79,
		
		LAK = 80,
		
		LBP = 81,
		
		LKR = 82,
		
		LRD = 83,
		
		LSL = 84,
		
		LYD = 85,
		
		MAD = 86,
		
		MDL = 87,
		
		MGA = 88,
		
		MKD = 89,
		
		MMK = 90,
		
		MNT = 91,
		
		MOP = 92,
		
		MRU = 93,
		
		MUR = 94,
		
		MVR = 95,
		
		MWK = 96,
		
		MXN = 97,
		
		MYR = 98,
		
		MZN = 99,
		
		NAD = 100,
		
		NGN = 101,
		
		NIO = 102,
		
		NOK = 103,
		
		NPR = 104,
		
		NZD = 105,
		
		OMR = 106,
		
		PAB = 107,
		
		PEN = 108,
		
		PGK = 109,
		
		PHP = 110,
		
		PKR = 111,
		
		PLN = 112,
		
		PYG = 113,
		
		QAR = 114,
		
		RON = 115,
		
		RSD = 116,
		
		RUB = 117,
		
		RWF = 118,
		
		SAR = 119,
		
		SBD = 120,
		
		SCR = 121,
		
		SDG = 122,
		
		SEK = 123,
		
		SGD = 124,
		
		SHP = 125,
		
		SLL = 126,
		
		SOS = 127,
		
		SPL = 128,
		
		SRD = 129,
		
		STN = 130,
		
		SVC = 131,
		
		SYP = 132,
		
		SZL = 133,
		
		THB = 134,
		
		TJS = 135,
		
		TMT = 136,
		
		TND = 137,
		
		TOP = 138,
		
		TRY = 139,
		
		TTD = 140,
		
		TVD = 141,
		
		TWD = 142,
		
		TZS = 143,
		
		UAH = 144,
		
		UGX = 145,
		
		USD = 146,
		
		UYU = 147,
		
		UZS = 148,
		
		VEF = 149,
		
		VND = 150,
		
		VUV = 151,
		
		WST = 152,
		
		XAF = 153,
		
		XCD = 154,
		
		XDR = 155,
		
		XOF = 156,
		
		XPF = 157,
		
		YER = 158,
		
		ZAR = 159,
		
		ZMW = 160,
		
		ZMK = 161,
		
		ZWD = 162,
		
		_ = 163,
	}
	
	public enum QuoteLineAmountTypes
	{
		
		EXCLUSIVE = 0,
		
		INCLUSIVE = 1,
		
		NOTAX = 2,
	}
	
	/// <summary>
	/// The status of the quote.
	/// </summary>
	public enum QuoteStatusCodes
	{
		
		DRAFT = 0,
		
		SENT = 1,
		
		DECLINED = 2,
		
		ACCEPTED = 3,
		
		INVOICED = 4,
	}
	
	public class Receipts
	{
		
		public Receipt[] Receipts1 { get; set; }
	}
	
	public class RepeatingInvoices
	{
		
		public RepeatingInvoice[] RepeatingInvoices1 { get; set; }
	}
	
	public class RepeatingInvoice
	{
		
		/// <summary>
		/// See Invoice Types
		/// </summary>
		public System.Nullable<RepeatingInvoiceType> Type { get; set; }
		
		public Contact Contact { get; set; }
		
		public Schedule Schedule { get; set; }
		
		/// <summary>
		/// See LineItems
		/// </summary>
		public LineItem[] LineItems { get; set; }
		
		/// <summary>
		/// Line amounts are exclusive of tax by default if you don�t specify this element. See Line Amount Types
		/// </summary>
		public BankTransactionLineAmountTypes LineAmountTypes { get; set; }
		
		/// <summary>
		/// ACCREC only � additional reference number
		/// </summary>
		public string Reference { get; set; }
		
		/// <summary>
		/// See BrandingThemes
		/// </summary>
		public string BrandingThemeID { get; set; }
		
		/// <summary>
		/// 3 letter alpha code for the currency � see list of currency codes
		/// </summary>
		public System.Nullable<RepeatingInvoiceCurrencyCode> CurrencyCode { get; set; }
		
		/// <summary>
		/// One of the following - DRAFT or AUTHORISED � See Invoice Status Codes
		/// </summary>
		public System.Nullable<RepeatingInvoiceStatus> Status { get; set; }
		
		/// <summary>
		/// Total of invoice excluding taxes
		/// </summary>
		public System.Nullable<System.Double> SubTotal { get; set; }
		
		/// <summary>
		/// Total tax on invoice
		/// </summary>
		public System.Nullable<System.Double> TotalTax { get; set; }
		
		/// <summary>
		/// Total of Invoice tax inclusive (i.e. SubTotal + TotalTax)
		/// </summary>
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier for repeating invoice template
		/// </summary>
		public string RepeatingInvoiceID { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier for repeating invoice template
		/// </summary>
		public string ID { get; set; }
		
		/// <summary>
		/// boolean to indicate if an invoice has an attachment
		/// </summary>
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// Displays array of attachments from the API
		/// </summary>
		public Attachment[] Attachments { get; set; }
	}
	
	public enum RepeatingInvoiceType
	{
		
		ACCPAY = 0,
		
		ACCREC = 1,
	}
	
	public class Schedule
	{
		
		/// <summary>
		/// Integer used with the unit e.g. 1 (every 1 week), 2 (every 2 months)
		/// </summary>
		public System.Nullable<System.Int32> Period { get; set; }
		
		/// <summary>
		/// One of the following - WEEKLY or MONTHLY
		/// </summary>
		public System.Nullable<ScheduleUnit> Unit { get; set; }
		
		/// <summary>
		/// Integer used with due date type e.g 20 (of following month), 31 (of current month)
		/// </summary>
		public System.Nullable<System.Int32> DueDate { get; set; }
		
		/// <summary>
		/// the payment terms
		/// </summary>
		public System.Nullable<ScheduleDueDateType> DueDateType { get; set; }
		
		/// <summary>
		/// Date the first invoice of the current version of the repeating schedule was generated (changes when repeating invoice is edited)
		/// </summary>
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		/// <summary>
		/// The calendar date of the next invoice in the schedule to be generated
		/// </summary>
		public System.Nullable<System.DateOnly> NextScheduledDate { get; set; }
		
		/// <summary>
		/// Invoice end date � only returned if the template has an end date set
		/// </summary>
		public System.Nullable<System.DateOnly> EndDate { get; set; }
	}
	
	public enum ScheduleUnit
	{
		
		WEEKLY = 0,
		
		MONTHLY = 1,
	}
	
	public enum ScheduleDueDateType
	{
		
		DAYSAFTERBILLDATE = 0,
		
		DAYSAFTERBILLMONTH = 1,
		
		DAYSAFTERINVOICEDATE = 2,
		
		DAYSAFTERINVOICEMONTH = 3,
		
		OFCURRENTMONTH = 4,
		
		OFFOLLOWINGMONTH = 5,
	}
	
	public enum RepeatingInvoiceCurrencyCode
	{
		
		AED = 0,
		
		AFN = 1,
		
		ALL = 2,
		
		AMD = 3,
		
		ANG = 4,
		
		AOA = 5,
		
		ARS = 6,
		
		AUD = 7,
		
		AWG = 8,
		
		AZN = 9,
		
		BAM = 10,
		
		BBD = 11,
		
		BDT = 12,
		
		BGN = 13,
		
		BHD = 14,
		
		BIF = 15,
		
		BMD = 16,
		
		BND = 17,
		
		BOB = 18,
		
		BRL = 19,
		
		BSD = 20,
		
		BTN = 21,
		
		BWP = 22,
		
		BYN = 23,
		
		BZD = 24,
		
		CAD = 25,
		
		CDF = 26,
		
		CHF = 27,
		
		CLP = 28,
		
		CNY = 29,
		
		COP = 30,
		
		CRC = 31,
		
		CUC = 32,
		
		CUP = 33,
		
		CVE = 34,
		
		CZK = 35,
		
		DJF = 36,
		
		DKK = 37,
		
		DOP = 38,
		
		DZD = 39,
		
		EGP = 40,
		
		ERN = 41,
		
		ETB = 42,
		
		EUR = 43,
		
		FJD = 44,
		
		FKP = 45,
		
		GBP = 46,
		
		GEL = 47,
		
		GGP = 48,
		
		GHS = 49,
		
		GIP = 50,
		
		GMD = 51,
		
		GNF = 52,
		
		GTQ = 53,
		
		GYD = 54,
		
		HKD = 55,
		
		HNL = 56,
		
		HRK = 57,
		
		HTG = 58,
		
		HUF = 59,
		
		IDR = 60,
		
		ILS = 61,
		
		IMP = 62,
		
		INR = 63,
		
		IQD = 64,
		
		IRR = 65,
		
		ISK = 66,
		
		JEP = 67,
		
		JMD = 68,
		
		JOD = 69,
		
		JPY = 70,
		
		KES = 71,
		
		KGS = 72,
		
		KHR = 73,
		
		KMF = 74,
		
		KPW = 75,
		
		KRW = 76,
		
		KWD = 77,
		
		KYD = 78,
		
		KZT = 79,
		
		LAK = 80,
		
		LBP = 81,
		
		LKR = 82,
		
		LRD = 83,
		
		LSL = 84,
		
		LYD = 85,
		
		MAD = 86,
		
		MDL = 87,
		
		MGA = 88,
		
		MKD = 89,
		
		MMK = 90,
		
		MNT = 91,
		
		MOP = 92,
		
		MRU = 93,
		
		MUR = 94,
		
		MVR = 95,
		
		MWK = 96,
		
		MXN = 97,
		
		MYR = 98,
		
		MZN = 99,
		
		NAD = 100,
		
		NGN = 101,
		
		NIO = 102,
		
		NOK = 103,
		
		NPR = 104,
		
		NZD = 105,
		
		OMR = 106,
		
		PAB = 107,
		
		PEN = 108,
		
		PGK = 109,
		
		PHP = 110,
		
		PKR = 111,
		
		PLN = 112,
		
		PYG = 113,
		
		QAR = 114,
		
		RON = 115,
		
		RSD = 116,
		
		RUB = 117,
		
		RWF = 118,
		
		SAR = 119,
		
		SBD = 120,
		
		SCR = 121,
		
		SDG = 122,
		
		SEK = 123,
		
		SGD = 124,
		
		SHP = 125,
		
		SLL = 126,
		
		SOS = 127,
		
		SPL = 128,
		
		SRD = 129,
		
		STN = 130,
		
		SVC = 131,
		
		SYP = 132,
		
		SZL = 133,
		
		THB = 134,
		
		TJS = 135,
		
		TMT = 136,
		
		TND = 137,
		
		TOP = 138,
		
		TRY = 139,
		
		TTD = 140,
		
		TVD = 141,
		
		TWD = 142,
		
		TZS = 143,
		
		UAH = 144,
		
		UGX = 145,
		
		USD = 146,
		
		UYU = 147,
		
		UZS = 148,
		
		VEF = 149,
		
		VND = 150,
		
		VUV = 151,
		
		WST = 152,
		
		XAF = 153,
		
		XCD = 154,
		
		XDR = 155,
		
		XOF = 156,
		
		XPF = 157,
		
		YER = 158,
		
		ZAR = 159,
		
		ZMW = 160,
		
		ZMK = 161,
		
		ZWD = 162,
		
		_ = 163,
	}
	
	public enum RepeatingInvoiceStatus
	{
		
		DRAFT = 0,
		
		AUTHORISED = 1,
		
		DELETED = 2,
	}
	
	public class ReportWithRows
	{
		
		public ReportWithRow[] Reports { get; set; }
	}
	
	public class ReportWithRow
	{
		
		/// <summary>
		/// Report id
		/// </summary>
		public string ReportID { get; set; }
		
		/// <summary>
		/// Name of the report
		/// </summary>
		public string ReportName { get; set; }
		
		/// <summary>
		/// Title of the report
		/// </summary>
		public string ReportTitle { get; set; }
		
		/// <summary>
		/// The type of report (BalanceSheet,ProfitLoss, etc)
		/// </summary>
		public string ReportType { get; set; }
		
		/// <summary>
		/// Report titles array (3 to 4 strings with the report name, orgnisation name and time frame of report)
		/// </summary>
		public string[] ReportTitles { get; set; }
		
		/// <summary>
		/// Date of report
		/// </summary>
		public string ReportDate { get; set; }
		
		public ReportRows[] Rows { get; set; }
		
		/// <summary>
		/// Updated Date
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		public ReportFields[] Fields { get; set; }
	}
	
	public class ReportRows
	{
		
		public System.Nullable<ReportRowsRowType> RowType { get; set; }
		
		public string Title { get; set; }
		
		public ReportCell[] Cells { get; set; }
		
		public ReportRow[] Rows { get; set; }
	}
	
	public enum ReportRowsRowType
	{
		
		Header = 0,
		
		Section = 1,
		
		Row = 2,
		
		SummaryRow = 3,
	}
	
	public class ReportCell
	{
		
		public string Value { get; set; }
		
		public ReportAttribute[] Attributes { get; set; }
	}
	
	public class ReportAttribute
	{
		
		public string Id { get; set; }
		
		public string Value { get; set; }
	}
	
	public class ReportRow
	{
		
		public ReportRowsRowType RowType { get; set; }
		
		public string Title { get; set; }
		
		public ReportCell[] Cells { get; set; }
	}
	
	public class ReportFields
	{
		
		public string FieldID { get; set; }
		
		public string Description { get; set; }
		
		public string Value { get; set; }
	}
	
	public enum RowType
	{
		
		Header = 0,
		
		Section = 1,
		
		Row = 2,
		
		SummaryRow = 3,
	}
	
	public class Reports
	{
		
		public Report[] Reports1 { get; set; }
	}
	
	public class Report
	{
		
		/// <summary>
		/// See Prepayment Types
		/// </summary>
		public string ReportID { get; set; }
		
		/// <summary>
		/// See Prepayment Types
		/// </summary>
		public string ReportName { get; set; }
		
		/// <summary>
		/// See Prepayment Types
		/// </summary>
		public System.Nullable<ReportReportType> ReportType { get; set; }
		
		/// <summary>
		/// See Prepayment Types
		/// </summary>
		public string ReportTitle { get; set; }
		
		/// <summary>
		/// Date of report
		/// </summary>
		public string ReportDate { get; set; }
		
		/// <summary>
		/// Updated Date
		/// </summary>
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		public TenNinteyNineContact[] Contacts { get; set; }
	}
	
	public enum ReportReportType
	{
		
		AgedPayablesByContact = 0,
	}
	
	public class TenNinteyNineContact
	{
		
		/// <summary>
		/// Box 1 on 1099 Form
		/// </summary>
		public System.Nullable<System.Double> Box1 { get; set; }
		
		/// <summary>
		/// Box 2 on 1099 Form
		/// </summary>
		public System.Nullable<System.Double> Box2 { get; set; }
		
		/// <summary>
		/// Box 3 on 1099 Form
		/// </summary>
		public System.Nullable<System.Double> Box3 { get; set; }
		
		/// <summary>
		/// Box 4 on 1099 Form
		/// </summary>
		public System.Nullable<System.Double> Box4 { get; set; }
		
		/// <summary>
		/// Box 5 on 1099 Form
		/// </summary>
		public System.Nullable<System.Double> Box5 { get; set; }
		
		/// <summary>
		/// Box 6 on 1099 Form
		/// </summary>
		public System.Nullable<System.Double> Box6 { get; set; }
		
		/// <summary>
		/// Box 7 on 1099 Form
		/// </summary>
		public System.Nullable<System.Double> Box7 { get; set; }
		
		/// <summary>
		/// Box 8 on 1099 Form
		/// </summary>
		public System.Nullable<System.Double> Box8 { get; set; }
		
		/// <summary>
		/// Box 9 on 1099 Form
		/// </summary>
		public System.Nullable<System.Double> Box9 { get; set; }
		
		/// <summary>
		/// Box 10 on 1099 Form
		/// </summary>
		public System.Nullable<System.Double> Box10 { get; set; }
		
		/// <summary>
		/// Box 11 on 1099 Form
		/// </summary>
		public System.Nullable<System.Double> Box11 { get; set; }
		
		/// <summary>
		/// Box 13 on 1099 Form
		/// </summary>
		public System.Nullable<System.Double> Box13 { get; set; }
		
		/// <summary>
		/// Box 14 on 1099 Form
		/// </summary>
		public System.Nullable<System.Double> Box14 { get; set; }
		
		/// <summary>
		/// Contact name on 1099 Form
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Contact Fed Tax ID type
		/// </summary>
		public string FederalTaxIDType { get; set; }
		
		/// <summary>
		/// Contact city on 1099 Form
		/// </summary>
		public string City { get; set; }
		
		/// <summary>
		/// Contact zip on 1099 Form
		/// </summary>
		public string Zip { get; set; }
		
		/// <summary>
		/// Contact State on 1099 Form
		/// </summary>
		public string State { get; set; }
		
		/// <summary>
		/// Contact email on 1099 Form
		/// </summary>
		public string Email { get; set; }
		
		/// <summary>
		/// Contact address on 1099 Form
		/// </summary>
		public string StreetAddress { get; set; }
		
		/// <summary>
		/// Contact tax id on 1099 Form
		/// </summary>
		public string TaxID { get; set; }
		
		/// <summary>
		/// Contact contact id
		/// </summary>
		public string ContactId { get; set; }
	}
	
	public class TaxRates
	{
		
		public TaxRate[] TaxRates1 { get; set; }
	}
	
	public class TaxRate
	{
		
		/// <summary>
		/// Name of tax rate
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The tax type
		/// </summary>
		public string TaxType { get; set; }
		
		/// <summary>
		/// See TaxComponents
		/// </summary>
		public TaxComponent[] TaxComponents { get; set; }
		
		/// <summary>
		/// See Status Codes
		/// </summary>
		public System.Nullable<TaxRateStatus> Status { get; set; }
		
		/// <summary>
		/// See ReportTaxTypes
		/// </summary>
		public System.Nullable<TaxRateReportTaxType> ReportTaxType { get; set; }
		
		/// <summary>
		/// Boolean to describe if tax rate can be used for asset accounts i.e.  true,false
		/// </summary>
		public System.Nullable<System.Boolean> CanApplyToAssets { get; set; }
		
		/// <summary>
		/// Boolean to describe if tax rate can be used for equity accounts i.e true,false
		/// </summary>
		public System.Nullable<System.Boolean> CanApplyToEquity { get; set; }
		
		/// <summary>
		/// Boolean to describe if tax rate can be used for expense accounts  i.e. true,false
		/// </summary>
		public System.Nullable<System.Boolean> CanApplyToExpenses { get; set; }
		
		/// <summary>
		/// Boolean to describe if tax rate can be used for liability accounts  i.e. true,false
		/// </summary>
		public System.Nullable<System.Boolean> CanApplyToLiabilities { get; set; }
		
		/// <summary>
		/// Boolean to describe if tax rate can be used for revenue accounts i.e. true,false
		/// </summary>
		public System.Nullable<System.Boolean> CanApplyToRevenue { get; set; }
		
		/// <summary>
		/// Tax Rate (decimal to 4dp) e.g 12.5000
		/// </summary>
		public System.Nullable<System.Double> DisplayTaxRate { get; set; }
		
		/// <summary>
		/// Effective Tax Rate (decimal to 4dp) e.g 12.5000
		/// </summary>
		public System.Nullable<System.Double> EffectiveRate { get; set; }
	}
	
	public class TaxComponent
	{
		
		/// <summary>
		/// Name of Tax Component
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Tax Rate (up to 4dp)
		/// </summary>
		public System.Nullable<System.Double> Rate { get; set; }
		
		/// <summary>
		/// Boolean to describe if Tax rate is compounded.
		/// </summary>
		public System.Nullable<System.Boolean> IsCompound { get; set; }
		
		/// <summary>
		/// Boolean to describe if tax rate is non-recoverable. Non-recoverable rates are only applicable to Canadian organisations
		/// </summary>
		public System.Nullable<System.Boolean> IsNonRecoverable { get; set; }
	}
	
	public enum TaxRateStatus
	{
		
		ACTIVE = 0,
		
		DELETED = 1,
		
		ARCHIVED = 2,
		
		PENDING = 3,
	}
	
	public enum TaxRateReportTaxType
	{
		
		AVALARA = 0,
		
		BASEXCLUDED = 1,
		
		CAPITALSALESOUTPUT = 2,
		
		CAPITALEXPENSESINPUT = 3,
		
		ECOUTPUT = 4,
		
		ECOUTPUTSERVICES = 5,
		
		ECINPUT = 6,
		
		ECACQUISITIONS = 7,
		
		EXEMPTEXPENSES = 8,
		
		EXEMPTINPUT = 9,
		
		EXEMPTOUTPUT = 10,
		
		GSTONIMPORTS = 11,
		
		INPUT = 12,
		
		INPUTTAXED = 13,
		
		MOSSSALES = 14,
		
		NONE = 15,
		
		NONEOUTPUT = 16,
		
		OUTPUT = 17,
		
		PURCHASESINPUT = 18,
		
		SALESOUTPUT = 19,
		
		EXEMPTCAPITAL = 20,
		
		EXEMPTEXPORT = 21,
		
		CAPITALEXINPUT = 22,
		
		GSTONCAPIMPORTS = 23,
		
		GSTONCAPITALIMPORTS = 24,
		
		REVERSECHARGES = 25,
		
		PAYMENTS = 26,
		
		INVOICE = 27,
		
		CASH = 28,
		
		ACCRUAL = 29,
		
		FLATRATECASH = 30,
		
		FLATRATEACCRUAL = 31,
		
		ACCRUALS = 32,
		
		TXCA = 33,
		
		SRCAS = 34,
		
		DSOUTPUT = 35,
		
		BLINPUT2 = 36,
		
		EPINPUT = 37,
		
		IMINPUT2 = 38,
		
		MEINPUT = 39,
		
		IGDSINPUT2 = 40,
		
		ESN33OUTPUT = 41,
		
		OPINPUT = 42,
		
		OSOUTPUT = 43,
		
		TXN33INPUT = 44,
		
		TXESSINPUT = 45,
		
		TXREINPUT = 46,
		
		TXPETINPUT = 47,
		
		NRINPUT = 48,
		
		ES33OUTPUT = 49,
		
		ZERORATEDINPUT = 50,
		
		ZERORATEDOUTPUT = 51,
		
		DRCHARGESUPPLY = 52,
		
		DRCHARGE = 53,
		
		CAPINPUT = 54,
		
		CAPIMPORTS = 55,
		
		IMINPUT = 56,
		
		INPUT2 = 57,
		
		CIUINPUT = 58,
		
		SRINPUT = 59,
		
		OUTPUT2 = 60,
		
		SROUTPUT = 61,
		
		CAPOUTPUT = 62,
		
		SROUTPUT2 = 63,
		
		CIUOUTPUT = 64,
		
		ZROUTPUT = 65,
		
		ZREXPORT = 66,
		
		ACC28PLUS = 67,
		
		ACCUPTO28 = 68,
		
		OTHEROUTPUT = 69,
		
		SHOUTPUT = 70,
		
		ZRINPUT = 71,
		
		BADDEBT = 72,
		
		OTHERINPUT = 73,
	}
	
	/// <summary>
	/// See Tax Types � can only be used on update calls
	/// </summary>
	public enum TaxType
	{
		
		OUTPUT = 0,
		
		INPUT = 1,
		
		CAPEXINPUT = 2,
		
		EXEMPTEXPORT = 3,
		
		EXEMPTEXPENSES = 4,
		
		EXEMPTCAPITAL = 5,
		
		EXEMPTOUTPUT = 6,
		
		INPUTTAXED = 7,
		
		BASEXCLUDED = 8,
		
		GSTONCAPIMPORTS = 9,
		
		GSTONIMPORTS = 10,
		
		NONE = 11,
		
		INPUT2 = 12,
		
		ZERORATED = 13,
		
		OUTPUT2 = 14,
		
		CAPEXINPUT2 = 15,
		
		CAPEXOUTPUT = 16,
		
		CAPEXOUTPUT2 = 17,
		
		CAPEXSRINPUT = 18,
		
		CAPEXSROUTPUT = 19,
		
		ECACQUISITIONS = 20,
		
		ECZRINPUT = 21,
		
		ECZROUTPUT = 22,
		
		ECZROUTPUTSERVICES = 23,
		
		EXEMPTINPUT = 24,
		
		REVERSECHARGES = 25,
		
		RRINPUT = 26,
		
		RROUTPUT = 27,
		
		SRINPUT = 28,
		
		SROUTPUT = 29,
		
		ZERORATEDINPUT = 30,
		
		ZERORATEDOUTPUT = 31,
		
		BLINPUT = 32,
		
		DSOUTPUT = 33,
		
		EPINPUT = 34,
		
		ES33OUTPUT = 35,
		
		ESN33OUTPUT = 36,
		
		IGDSINPUT2 = 37,
		
		IMINPUT2 = 38,
		
		MEINPUT = 39,
		
		NRINPUT = 40,
		
		OPINPUT = 41,
		
		OSOUTPUT = 42,
		
		TXESSINPUT = 43,
		
		TXN33INPUT = 44,
		
		TXPETINPUT = 45,
		
		TXREINPUT = 46,
		
		INPUT3 = 47,
		
		INPUT4 = 48,
		
		OUTPUT3 = 49,
		
		OUTPUT4 = 50,
		
		SROUTPUT2 = 51,
		
		TXCA = 52,
		
		SRCAS = 53,
		
		BLINPUT2 = 54,
		
		DRCHARGESUPPLY20 = 55,
		
		DRCHARGE20 = 56,
		
		DRCHARGESUPPLY5 = 57,
		
		DRCHARGE5 = 58,
	}
	
	public class TrackingCategories
	{
		
		public TrackingCategory[] TrackingCategories1 { get; set; }
	}
	
	public class TrackingOptions
	{
		
		public TrackingOption[] Options { get; set; }
	}
	
	public class Users
	{
		
		public User[] Users1 { get; set; }
	}
	
	public class Error
	{
		
		/// <summary>
		/// Exception number
		/// </summary>
		public System.Nullable<System.Int32> ErrorNumber { get; set; }
		
		/// <summary>
		/// Exception type
		/// </summary>
		public string Type { get; set; }
		
		/// <summary>
		/// Exception message
		/// </summary>
		public string Message { get; set; }
		
		/// <summary>
		/// Array of Elements of validation Errors
		/// </summary>
		public Element[] Elements { get; set; }
	}
	
	public class Element
	{
		
		/// <summary>
		/// Array of Validation Error message
		/// </summary>
		public ValidationError[] ValidationErrors { get; set; }
		
		/// <summary>
		/// Unique ID for batch payment object with validation error
		/// </summary>
		public string BatchPaymentID { get; set; }
		
		public string BankTransactionID { get; set; }
		
		public string CreditNoteID { get; set; }
		
		public string ContactID { get; set; }
		
		public string InvoiceID { get; set; }
		
		public string ItemID { get; set; }
		
		public string PurchaseOrderID { get; set; }
	}
	
	public partial class MyClient
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public MyClient(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Allows you to retrieve the full chart of accounts
		/// GetAccounts Accounts
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <returns>Success - return response of type Accounts array with 0 to n Account</returns>
		public async Task<Accounts> GetAccountsAsync(string @where, string order)
		{
			var requestUri = "Accounts?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Accounts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve the full chart of accounts
		/// GetAccounts Accounts
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <returns>Success - return response of type Accounts array with 0 to n Account</returns>
		public Accounts GetAccounts(string @where, string order)
		{
			var requestUri = "Accounts?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Accounts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a new chart of accounts
		/// CreateAccount Accounts
		/// </summary>
		/// <param name="requestBody">Account object in body of request</param>
		/// <returns>Success - created new Account and return response of type Accounts array with new Account</returns>
		public async Task<Accounts> CreateAccountAsync(Account requestBody)
		{
			var requestUri = "Accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Accounts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a new chart of accounts
		/// CreateAccount Accounts
		/// </summary>
		/// <param name="requestBody">Account object in body of request</param>
		/// <returns>Success - created new Account and return response of type Accounts array with new Account</returns>
		public Accounts CreateAccount(Account requestBody)
		{
			var requestUri = "Accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Accounts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a single chart of accounts
		/// GetAccount Accounts/{AccountID}
		/// </summary>
		/// <param name="AccountID">Unique identifier for retrieving single object</param>
		/// <returns>Success - return response of type Accounts array with one Account</returns>
		public async Task<Accounts> GetAccountAsync(string AccountID)
		{
			var requestUri = "Accounts/"+ (AccountID==null? "" : System.Uri.EscapeDataString(AccountID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Accounts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a single chart of accounts
		/// GetAccount Accounts/{AccountID}
		/// </summary>
		/// <param name="AccountID">Unique identifier for retrieving single object</param>
		/// <returns>Success - return response of type Accounts array with one Account</returns>
		public Accounts GetAccount(string AccountID)
		{
			var requestUri = "Accounts/"+ (AccountID==null? "" : System.Uri.EscapeDataString(AccountID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Accounts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a chart of accounts
		/// UpdateAccount Accounts/{AccountID}
		/// </summary>
		/// <param name="AccountID">Unique identifier for retrieving single object</param>
		/// <param name="requestBody">Request of type Accounts array with one Account</param>
		/// <returns>Success - update existing Account and return response of type Accounts array with updated Account</returns>
		public async Task<Accounts> UpdateAccountAsync(string AccountID, Accounts requestBody)
		{
			var requestUri = "Accounts/"+ (AccountID==null? "" : System.Uri.EscapeDataString(AccountID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Accounts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a chart of accounts
		/// UpdateAccount Accounts/{AccountID}
		/// </summary>
		/// <param name="AccountID">Unique identifier for retrieving single object</param>
		/// <param name="requestBody">Request of type Accounts array with one Account</param>
		/// <returns>Success - update existing Account and return response of type Accounts array with updated Account</returns>
		public Accounts UpdateAccount(string AccountID, Accounts requestBody)
		{
			var requestUri = "Accounts/"+ (AccountID==null? "" : System.Uri.EscapeDataString(AccountID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Accounts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to delete a chart of accounts
		/// DeleteAccount Accounts/{AccountID}
		/// </summary>
		/// <param name="AccountID">Unique identifier for retrieving single object</param>
		/// <returns>Success - delete existing Account and return response of type Accounts array with deleted Account</returns>
		public async Task<Accounts> DeleteAccountAsync(string AccountID)
		{
			var requestUri = "Accounts/"+ (AccountID==null? "" : System.Uri.EscapeDataString(AccountID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Accounts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to delete a chart of accounts
		/// DeleteAccount Accounts/{AccountID}
		/// </summary>
		/// <param name="AccountID">Unique identifier for retrieving single object</param>
		/// <returns>Success - delete existing Account and return response of type Accounts array with deleted Account</returns>
		public Accounts DeleteAccount(string AccountID)
		{
			var requestUri = "Accounts/"+ (AccountID==null? "" : System.Uri.EscapeDataString(AccountID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Accounts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments for accounts
		/// GetAccountAttachments Accounts/{AccountID}/Attachments
		/// </summary>
		/// <param name="AccountID">Unique identifier for Account object</param>
		/// <returns>Success - return response of type Attachments array of Attachment</returns>
		public async Task<Attachments> GetAccountAttachmentsAsync(string AccountID)
		{
			var requestUri = "Accounts/"+ (AccountID==null? "" : System.Uri.EscapeDataString(AccountID))+"/Attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments for accounts
		/// GetAccountAttachments Accounts/{AccountID}/Attachments
		/// </summary>
		/// <param name="AccountID">Unique identifier for Account object</param>
		/// <returns>Success - return response of type Attachments array of Attachment</returns>
		public Attachments GetAccountAttachments(string AccountID)
		{
			var requestUri = "Accounts/"+ (AccountID==null? "" : System.Uri.EscapeDataString(AccountID))+"/Attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve specific Attachment on Account
		/// GetAccountAttachmentById Accounts/{AccountID}/Attachments/{AttachmentID}
		/// </summary>
		/// <param name="AccountID">Unique identifier for Account object</param>
		/// <param name="AttachmentID">Unique identifier for Attachment object</param>
		/// <returns>Success - return response of attachment for Account as binary data</returns>
		public async Task GetAccountAttachmentByIdAsync(string AccountID, string AttachmentID)
		{
			var requestUri = "Accounts/"+ (AccountID==null? "" : System.Uri.EscapeDataString(AccountID))+"/Attachments/"+ (AttachmentID==null? "" : System.Uri.EscapeDataString(AttachmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve specific Attachment on Account
		/// GetAccountAttachmentById Accounts/{AccountID}/Attachments/{AttachmentID}
		/// </summary>
		/// <param name="AccountID">Unique identifier for Account object</param>
		/// <param name="AttachmentID">Unique identifier for Attachment object</param>
		/// <returns>Success - return response of attachment for Account as binary data</returns>
		public void GetAccountAttachmentById(string AccountID, string AttachmentID)
		{
			var requestUri = "Accounts/"+ (AccountID==null? "" : System.Uri.EscapeDataString(AccountID))+"/Attachments/"+ (AttachmentID==null? "" : System.Uri.EscapeDataString(AttachmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachment on Account by Filename
		/// GetAccountAttachmentByFileName Accounts/{AccountID}/Attachments/{FileName}
		/// </summary>
		/// <param name="AccountID">Unique identifier for Account object</param>
		/// <param name="FileName">Name of the attachment</param>
		/// <returns>Success - return response of attachment for Account as binary data</returns>
		public async Task GetAccountAttachmentByFileNameAsync(string AccountID, string FileName)
		{
			var requestUri = "Accounts/"+ (AccountID==null? "" : System.Uri.EscapeDataString(AccountID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachment on Account by Filename
		/// GetAccountAttachmentByFileName Accounts/{AccountID}/Attachments/{FileName}
		/// </summary>
		/// <param name="AccountID">Unique identifier for Account object</param>
		/// <param name="FileName">Name of the attachment</param>
		/// <returns>Success - return response of attachment for Account as binary data</returns>
		public void GetAccountAttachmentByFileName(string AccountID, string FileName)
		{
			var requestUri = "Accounts/"+ (AccountID==null? "" : System.Uri.EscapeDataString(AccountID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve either one or many BatchPayments for invoices
		/// GetBatchPayments BatchPayments
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <returns>Success - return response of type BatchPayments array of BatchPayment objects</returns>
		public async Task<BatchPayments> GetBatchPaymentsAsync(string @where, string order)
		{
			var requestUri = "BatchPayments?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPayments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve either one or many BatchPayments for invoices
		/// GetBatchPayments BatchPayments
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <returns>Success - return response of type BatchPayments array of BatchPayment objects</returns>
		public BatchPayments GetBatchPayments(string @where, string order)
		{
			var requestUri = "BatchPayments?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPayments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create one or many BatchPayments for invoices
		/// CreateBatchPayment BatchPayments
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">BatchPayments with an array of Payments in body of request</param>
		/// <returns>Success - return response of type BatchPayments array of BatchPayment objects</returns>
		public async Task<BatchPayments> CreateBatchPaymentAsync(bool summarizeErrors, BatchPayments requestBody)
		{
			var requestUri = "BatchPayments?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPayments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create one or many BatchPayments for invoices
		/// CreateBatchPayment BatchPayments
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">BatchPayments with an array of Payments in body of request</param>
		/// <returns>Success - return response of type BatchPayments array of BatchPayment objects</returns>
		public BatchPayments CreateBatchPayment(bool summarizeErrors, BatchPayments requestBody)
		{
			var requestUri = "BatchPayments?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPayments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve history from a Batch Payment
		/// GetBatchPaymentHistory BatchPayments/{BatchPaymentID}/History
		/// </summary>
		/// <param name="BatchPaymentID">Unique identifier for BatchPayment</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public async Task<HistoryRecords> GetBatchPaymentHistoryAsync(string BatchPaymentID)
		{
			var requestUri = "BatchPayments/"+ (BatchPaymentID==null? "" : System.Uri.EscapeDataString(BatchPaymentID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve history from a Batch Payment
		/// GetBatchPaymentHistory BatchPayments/{BatchPaymentID}/History
		/// </summary>
		/// <param name="BatchPaymentID">Unique identifier for BatchPayment</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public HistoryRecords GetBatchPaymentHistory(string BatchPaymentID)
		{
			var requestUri = "BatchPayments/"+ (BatchPaymentID==null? "" : System.Uri.EscapeDataString(BatchPaymentID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a history record for a Batch Payment
		/// CreateBatchPaymentHistoryRecord BatchPayments/{BatchPaymentID}/History
		/// </summary>
		/// <param name="BatchPaymentID">Unique identifier for BatchPayment</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public async Task<HistoryRecords> CreateBatchPaymentHistoryRecordAsync(string BatchPaymentID, HistoryRecords requestBody)
		{
			var requestUri = "BatchPayments/"+ (BatchPaymentID==null? "" : System.Uri.EscapeDataString(BatchPaymentID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a history record for a Batch Payment
		/// CreateBatchPaymentHistoryRecord BatchPayments/{BatchPaymentID}/History
		/// </summary>
		/// <param name="BatchPaymentID">Unique identifier for BatchPayment</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public HistoryRecords CreateBatchPaymentHistoryRecord(string BatchPaymentID, HistoryRecords requestBody)
		{
			var requestUri = "BatchPayments/"+ (BatchPaymentID==null? "" : System.Uri.EscapeDataString(BatchPaymentID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve any spend or receive money transactions
		/// GetBankTransactions BankTransactions
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">Up to 100 bank transactions will be returned in a single API call with line items details</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type BankTransactions array with 0 to n BankTransaction</returns>
		public async Task<BankTransactions> GetBankTransactionsAsync(string @where, string order, int page, int unitdp)
		{
			var requestUri = "BankTransactions?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&page="+page+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankTransactions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve any spend or receive money transactions
		/// GetBankTransactions BankTransactions
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">Up to 100 bank transactions will be returned in a single API call with line items details</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type BankTransactions array with 0 to n BankTransaction</returns>
		public BankTransactions GetBankTransactions(string @where, string order, int page, int unitdp)
		{
			var requestUri = "BankTransactions?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&page="+page+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankTransactions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create one or more spend or receive money transaction
		/// CreateBankTransactions BankTransactions
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <param name="requestBody">BankTransactions with an array of BankTransaction objects in body of request</param>
		/// <returns>Success - return response of type BankTransactions array with new BankTransaction</returns>
		public async Task<BankTransactions> CreateBankTransactionsAsync(bool summarizeErrors, int unitdp, BankTransactions requestBody)
		{
			var requestUri = "BankTransactions?summarizeErrors="+summarizeErrors+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankTransactions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create one or more spend or receive money transaction
		/// CreateBankTransactions BankTransactions
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <param name="requestBody">BankTransactions with an array of BankTransaction objects in body of request</param>
		/// <returns>Success - return response of type BankTransactions array with new BankTransaction</returns>
		public BankTransactions CreateBankTransactions(bool summarizeErrors, int unitdp, BankTransactions requestBody)
		{
			var requestUri = "BankTransactions?summarizeErrors="+summarizeErrors+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankTransactions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update or create one or more spend or receive money transaction
		/// UpdateOrCreateBankTransactions BankTransactions
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type BankTransactions array with new BankTransaction</returns>
		public async Task<BankTransactions> UpdateOrCreateBankTransactionsAsync(bool summarizeErrors, int unitdp, BankTransactions requestBody)
		{
			var requestUri = "BankTransactions?summarizeErrors="+summarizeErrors+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankTransactions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update or create one or more spend or receive money transaction
		/// UpdateOrCreateBankTransactions BankTransactions
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type BankTransactions array with new BankTransaction</returns>
		public BankTransactions UpdateOrCreateBankTransactions(bool summarizeErrors, int unitdp, BankTransactions requestBody)
		{
			var requestUri = "BankTransactions?summarizeErrors="+summarizeErrors+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankTransactions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a single spend or receive money transaction
		/// GetBankTransaction BankTransactions/{BankTransactionID}
		/// </summary>
		/// <param name="BankTransactionID">Xero generated unique identifier for a bank transaction</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type BankTransactions array with a specific BankTransaction</returns>
		public async Task<BankTransactions> GetBankTransactionAsync(string BankTransactionID, int unitdp)
		{
			var requestUri = "BankTransactions/"+ (BankTransactionID==null? "" : System.Uri.EscapeDataString(BankTransactionID))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankTransactions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a single spend or receive money transaction
		/// GetBankTransaction BankTransactions/{BankTransactionID}
		/// </summary>
		/// <param name="BankTransactionID">Xero generated unique identifier for a bank transaction</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type BankTransactions array with a specific BankTransaction</returns>
		public BankTransactions GetBankTransaction(string BankTransactionID, int unitdp)
		{
			var requestUri = "BankTransactions/"+ (BankTransactionID==null? "" : System.Uri.EscapeDataString(BankTransactionID))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankTransactions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a single spend or receive money transaction
		/// UpdateBankTransaction BankTransactions/{BankTransactionID}
		/// </summary>
		/// <param name="BankTransactionID">Xero generated unique identifier for a bank transaction</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type BankTransactions array with updated BankTransaction</returns>
		public async Task<BankTransactions> UpdateBankTransactionAsync(string BankTransactionID, int unitdp, BankTransactions requestBody)
		{
			var requestUri = "BankTransactions/"+ (BankTransactionID==null? "" : System.Uri.EscapeDataString(BankTransactionID))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankTransactions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a single spend or receive money transaction
		/// UpdateBankTransaction BankTransactions/{BankTransactionID}
		/// </summary>
		/// <param name="BankTransactionID">Xero generated unique identifier for a bank transaction</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type BankTransactions array with updated BankTransaction</returns>
		public BankTransactions UpdateBankTransaction(string BankTransactionID, int unitdp, BankTransactions requestBody)
		{
			var requestUri = "BankTransactions/"+ (BankTransactionID==null? "" : System.Uri.EscapeDataString(BankTransactionID))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankTransactions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve any attachments to bank transactions
		/// GetBankTransactionAttachments BankTransactions/{BankTransactionID}/Attachments
		/// </summary>
		/// <param name="BankTransactionID">Xero generated unique identifier for a bank transaction</param>
		/// <returns>Success - return response of type Attachments array with 0 to n Attachment</returns>
		public async Task<Attachments> GetBankTransactionAttachmentsAsync(string BankTransactionID)
		{
			var requestUri = "BankTransactions/"+ (BankTransactionID==null? "" : System.Uri.EscapeDataString(BankTransactionID))+"/Attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve any attachments to bank transactions
		/// GetBankTransactionAttachments BankTransactions/{BankTransactionID}/Attachments
		/// </summary>
		/// <param name="BankTransactionID">Xero generated unique identifier for a bank transaction</param>
		/// <returns>Success - return response of type Attachments array with 0 to n Attachment</returns>
		public Attachments GetBankTransactionAttachments(string BankTransactionID)
		{
			var requestUri = "BankTransactions/"+ (BankTransactionID==null? "" : System.Uri.EscapeDataString(BankTransactionID))+"/Attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on a specific BankTransaction
		/// GetBankTransactionAttachmentById BankTransactions/{BankTransactionID}/Attachments/{AttachmentID}
		/// </summary>
		/// <param name="BankTransactionID">Xero generated unique identifier for a bank transaction</param>
		/// <param name="AttachmentID">Xero generated unique identifier for an attachment</param>
		/// <returns>Success - return response of attachment for BankTransaction as binary data</returns>
		public async Task GetBankTransactionAttachmentByIdAsync(string BankTransactionID, string AttachmentID)
		{
			var requestUri = "BankTransactions/"+ (BankTransactionID==null? "" : System.Uri.EscapeDataString(BankTransactionID))+"/Attachments/"+ (AttachmentID==null? "" : System.Uri.EscapeDataString(AttachmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on a specific BankTransaction
		/// GetBankTransactionAttachmentById BankTransactions/{BankTransactionID}/Attachments/{AttachmentID}
		/// </summary>
		/// <param name="BankTransactionID">Xero generated unique identifier for a bank transaction</param>
		/// <param name="AttachmentID">Xero generated unique identifier for an attachment</param>
		/// <returns>Success - return response of attachment for BankTransaction as binary data</returns>
		public void GetBankTransactionAttachmentById(string BankTransactionID, string AttachmentID)
		{
			var requestUri = "BankTransactions/"+ (BankTransactionID==null? "" : System.Uri.EscapeDataString(BankTransactionID))+"/Attachments/"+ (AttachmentID==null? "" : System.Uri.EscapeDataString(AttachmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on BankTransaction by Filename
		/// GetBankTransactionAttachmentByFileName BankTransactions/{BankTransactionID}/Attachments/{FileName}
		/// </summary>
		/// <param name="BankTransactionID">Xero generated unique identifier for a bank transaction</param>
		/// <param name="FileName">The name of the file being attached</param>
		/// <returns>Success - return response of attachment for BankTransaction as binary data</returns>
		public async Task GetBankTransactionAttachmentByFileNameAsync(string BankTransactionID, string FileName)
		{
			var requestUri = "BankTransactions/"+ (BankTransactionID==null? "" : System.Uri.EscapeDataString(BankTransactionID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on BankTransaction by Filename
		/// GetBankTransactionAttachmentByFileName BankTransactions/{BankTransactionID}/Attachments/{FileName}
		/// </summary>
		/// <param name="BankTransactionID">Xero generated unique identifier for a bank transaction</param>
		/// <param name="FileName">The name of the file being attached</param>
		/// <returns>Success - return response of attachment for BankTransaction as binary data</returns>
		public void GetBankTransactionAttachmentByFileName(string BankTransactionID, string FileName)
		{
			var requestUri = "BankTransactions/"+ (BankTransactionID==null? "" : System.Uri.EscapeDataString(BankTransactionID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve history from a bank transactions
		/// GetBankTransactionsHistory BankTransactions/{BankTransactionID}/History
		/// </summary>
		/// <param name="BankTransactionID">Xero generated unique identifier for a bank transaction</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public async Task<HistoryRecords> GetBankTransactionsHistoryAsync(string BankTransactionID)
		{
			var requestUri = "BankTransactions/"+ (BankTransactionID==null? "" : System.Uri.EscapeDataString(BankTransactionID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve history from a bank transactions
		/// GetBankTransactionsHistory BankTransactions/{BankTransactionID}/History
		/// </summary>
		/// <param name="BankTransactionID">Xero generated unique identifier for a bank transaction</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public HistoryRecords GetBankTransactionsHistory(string BankTransactionID)
		{
			var requestUri = "BankTransactions/"+ (BankTransactionID==null? "" : System.Uri.EscapeDataString(BankTransactionID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create history record for a bank transactions
		/// CreateBankTransactionHistoryRecord BankTransactions/{BankTransactionID}/History
		/// </summary>
		/// <param name="BankTransactionID">Xero generated unique identifier for a bank transaction</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public async Task<HistoryRecords> CreateBankTransactionHistoryRecordAsync(string BankTransactionID, HistoryRecords requestBody)
		{
			var requestUri = "BankTransactions/"+ (BankTransactionID==null? "" : System.Uri.EscapeDataString(BankTransactionID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create history record for a bank transactions
		/// CreateBankTransactionHistoryRecord BankTransactions/{BankTransactionID}/History
		/// </summary>
		/// <param name="BankTransactionID">Xero generated unique identifier for a bank transaction</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public HistoryRecords CreateBankTransactionHistoryRecord(string BankTransactionID, HistoryRecords requestBody)
		{
			var requestUri = "BankTransactions/"+ (BankTransactionID==null? "" : System.Uri.EscapeDataString(BankTransactionID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve all bank transfers
		/// GetBankTransfers BankTransfers
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <returns>Success - return response of BankTransfers array of 0 to N BankTransfer</returns>
		public async Task<BankTransfers> GetBankTransfersAsync(string @where, string order)
		{
			var requestUri = "BankTransfers?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankTransfers>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve all bank transfers
		/// GetBankTransfers BankTransfers
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <returns>Success - return response of BankTransfers array of 0 to N BankTransfer</returns>
		public BankTransfers GetBankTransfers(string @where, string order)
		{
			var requestUri = "BankTransfers?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankTransfers>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a bank transfers
		/// CreateBankTransfer BankTransfers
		/// </summary>
		/// <param name="requestBody">BankTransfers with array of BankTransfer objects in request body</param>
		/// <returns>Success - return response of BankTransfers array of one BankTransfer</returns>
		public async Task<BankTransfers> CreateBankTransferAsync(BankTransfers requestBody)
		{
			var requestUri = "BankTransfers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankTransfers>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a bank transfers
		/// CreateBankTransfer BankTransfers
		/// </summary>
		/// <param name="requestBody">BankTransfers with array of BankTransfer objects in request body</param>
		/// <returns>Success - return response of BankTransfers array of one BankTransfer</returns>
		public BankTransfers CreateBankTransfer(BankTransfers requestBody)
		{
			var requestUri = "BankTransfers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankTransfers>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve any bank transfers
		/// GetBankTransfer BankTransfers/{BankTransferID}
		/// </summary>
		/// <param name="BankTransferID">Xero generated unique identifier for a bank transfer</param>
		/// <returns>Success - return response of BankTransfers array with one BankTransfer</returns>
		public async Task<BankTransfers> GetBankTransferAsync(string BankTransferID)
		{
			var requestUri = "BankTransfers/"+ (BankTransferID==null? "" : System.Uri.EscapeDataString(BankTransferID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankTransfers>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve any bank transfers
		/// GetBankTransfer BankTransfers/{BankTransferID}
		/// </summary>
		/// <param name="BankTransferID">Xero generated unique identifier for a bank transfer</param>
		/// <returns>Success - return response of BankTransfers array with one BankTransfer</returns>
		public BankTransfers GetBankTransfer(string BankTransferID)
		{
			var requestUri = "BankTransfers/"+ (BankTransferID==null? "" : System.Uri.EscapeDataString(BankTransferID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankTransfers>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments from  bank transfers
		/// GetBankTransferAttachments BankTransfers/{BankTransferID}/Attachments
		/// </summary>
		/// <param name="BankTransferID">Xero generated unique identifier for a bank transfer</param>
		/// <returns>Success - return response of Attachments array of 0 to N Attachment for a Bank Transfer</returns>
		public async Task<Attachments> GetBankTransferAttachmentsAsync(string BankTransferID)
		{
			var requestUri = "BankTransfers/"+ (BankTransferID==null? "" : System.Uri.EscapeDataString(BankTransferID))+"/Attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments from  bank transfers
		/// GetBankTransferAttachments BankTransfers/{BankTransferID}/Attachments
		/// </summary>
		/// <param name="BankTransferID">Xero generated unique identifier for a bank transfer</param>
		/// <returns>Success - return response of Attachments array of 0 to N Attachment for a Bank Transfer</returns>
		public Attachments GetBankTransferAttachments(string BankTransferID)
		{
			var requestUri = "BankTransfers/"+ (BankTransferID==null? "" : System.Uri.EscapeDataString(BankTransferID))+"/Attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on BankTransfer
		/// GetBankTransferAttachmentById BankTransfers/{BankTransferID}/Attachments/{AttachmentID}
		/// </summary>
		/// <param name="BankTransferID">Xero generated unique identifier for a bank transfer</param>
		/// <param name="AttachmentID">Xero generated unique identifier for an Attachment to a bank transfer</param>
		/// <returns>Success - return response of binary data from the Attachment to a Bank Transfer</returns>
		public async Task GetBankTransferAttachmentByIdAsync(string BankTransferID, string AttachmentID)
		{
			var requestUri = "BankTransfers/"+ (BankTransferID==null? "" : System.Uri.EscapeDataString(BankTransferID))+"/Attachments/"+ (AttachmentID==null? "" : System.Uri.EscapeDataString(AttachmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on BankTransfer
		/// GetBankTransferAttachmentById BankTransfers/{BankTransferID}/Attachments/{AttachmentID}
		/// </summary>
		/// <param name="BankTransferID">Xero generated unique identifier for a bank transfer</param>
		/// <param name="AttachmentID">Xero generated unique identifier for an Attachment to a bank transfer</param>
		/// <returns>Success - return response of binary data from the Attachment to a Bank Transfer</returns>
		public void GetBankTransferAttachmentById(string BankTransferID, string AttachmentID)
		{
			var requestUri = "BankTransfers/"+ (BankTransferID==null? "" : System.Uri.EscapeDataString(BankTransferID))+"/Attachments/"+ (AttachmentID==null? "" : System.Uri.EscapeDataString(AttachmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on BankTransfer by file name
		/// GetBankTransferAttachmentByFileName BankTransfers/{BankTransferID}/Attachments/{FileName}
		/// </summary>
		/// <param name="BankTransferID">Xero generated unique identifier for a bank transfer</param>
		/// <param name="FileName">The name of the file being attached to a Bank Transfer</param>
		/// <returns>Success - return response of binary data from the Attachment to a Bank Transfer</returns>
		public async Task GetBankTransferAttachmentByFileNameAsync(string BankTransferID, string FileName)
		{
			var requestUri = "BankTransfers/"+ (BankTransferID==null? "" : System.Uri.EscapeDataString(BankTransferID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on BankTransfer by file name
		/// GetBankTransferAttachmentByFileName BankTransfers/{BankTransferID}/Attachments/{FileName}
		/// </summary>
		/// <param name="BankTransferID">Xero generated unique identifier for a bank transfer</param>
		/// <param name="FileName">The name of the file being attached to a Bank Transfer</param>
		/// <returns>Success - return response of binary data from the Attachment to a Bank Transfer</returns>
		public void GetBankTransferAttachmentByFileName(string BankTransferID, string FileName)
		{
			var requestUri = "BankTransfers/"+ (BankTransferID==null? "" : System.Uri.EscapeDataString(BankTransferID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve history from a bank transfers
		/// GetBankTransferHistory BankTransfers/{BankTransferID}/History
		/// </summary>
		/// <param name="BankTransferID">Xero generated unique identifier for a bank transfer</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public async Task<HistoryRecords> GetBankTransferHistoryAsync(string BankTransferID)
		{
			var requestUri = "BankTransfers/"+ (BankTransferID==null? "" : System.Uri.EscapeDataString(BankTransferID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve history from a bank transfers
		/// GetBankTransferHistory BankTransfers/{BankTransferID}/History
		/// </summary>
		/// <param name="BankTransferID">Xero generated unique identifier for a bank transfer</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public HistoryRecords GetBankTransferHistory(string BankTransferID)
		{
			var requestUri = "BankTransfers/"+ (BankTransferID==null? "" : System.Uri.EscapeDataString(BankTransferID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateBankTransferHistoryRecord BankTransfers/{BankTransferID}/History
		/// </summary>
		/// <param name="BankTransferID">Xero generated unique identifier for a bank transfer</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public async Task<HistoryRecords> CreateBankTransferHistoryRecordAsync(string BankTransferID, HistoryRecords requestBody)
		{
			var requestUri = "BankTransfers/"+ (BankTransferID==null? "" : System.Uri.EscapeDataString(BankTransferID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// CreateBankTransferHistoryRecord BankTransfers/{BankTransferID}/History
		/// </summary>
		/// <param name="BankTransferID">Xero generated unique identifier for a bank transfer</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public HistoryRecords CreateBankTransferHistoryRecord(string BankTransferID, HistoryRecords requestBody)
		{
			var requestUri = "BankTransfers/"+ (BankTransferID==null? "" : System.Uri.EscapeDataString(BankTransferID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve all the BrandingThemes
		/// GetBrandingThemes BrandingThemes
		/// </summary>
		/// <returns>Success - return response of type BrandingThemes</returns>
		public async Task<BrandingThemes> GetBrandingThemesAsync()
		{
			var requestUri = "BrandingThemes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BrandingThemes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve all the BrandingThemes
		/// GetBrandingThemes BrandingThemes
		/// </summary>
		/// <returns>Success - return response of type BrandingThemes</returns>
		public BrandingThemes GetBrandingThemes()
		{
			var requestUri = "BrandingThemes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BrandingThemes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specific BrandingThemes
		/// GetBrandingTheme BrandingThemes/{BrandingThemeID}
		/// </summary>
		/// <param name="BrandingThemeID">Unique identifier for a Branding Theme</param>
		/// <returns>Success - return response of type BrandingThemes with one BrandingTheme</returns>
		public async Task<BrandingThemes> GetBrandingThemeAsync(string BrandingThemeID)
		{
			var requestUri = "BrandingThemes/"+ (BrandingThemeID==null? "" : System.Uri.EscapeDataString(BrandingThemeID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BrandingThemes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specific BrandingThemes
		/// GetBrandingTheme BrandingThemes/{BrandingThemeID}
		/// </summary>
		/// <param name="BrandingThemeID">Unique identifier for a Branding Theme</param>
		/// <returns>Success - return response of type BrandingThemes with one BrandingTheme</returns>
		public BrandingThemes GetBrandingTheme(string BrandingThemeID)
		{
			var requestUri = "BrandingThemes/"+ (BrandingThemeID==null? "" : System.Uri.EscapeDataString(BrandingThemeID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BrandingThemes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve the Payment services for a Branding Theme
		/// GetBrandingThemePaymentServices BrandingThemes/{BrandingThemeID}/PaymentServices
		/// </summary>
		/// <param name="BrandingThemeID">Unique identifier for a Branding Theme</param>
		/// <returns>Success - return response of type PaymentServices array with 0 to N PaymentService</returns>
		public async Task<PaymentServices> GetBrandingThemePaymentServicesAsync(string BrandingThemeID)
		{
			var requestUri = "BrandingThemes/"+ (BrandingThemeID==null? "" : System.Uri.EscapeDataString(BrandingThemeID))+"/PaymentServices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaymentServices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve the Payment services for a Branding Theme
		/// GetBrandingThemePaymentServices BrandingThemes/{BrandingThemeID}/PaymentServices
		/// </summary>
		/// <param name="BrandingThemeID">Unique identifier for a Branding Theme</param>
		/// <returns>Success - return response of type PaymentServices array with 0 to N PaymentService</returns>
		public PaymentServices GetBrandingThemePaymentServices(string BrandingThemeID)
		{
			var requestUri = "BrandingThemes/"+ (BrandingThemeID==null? "" : System.Uri.EscapeDataString(BrandingThemeID))+"/PaymentServices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaymentServices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allow for the creation of new custom payment service for specified Branding Theme
		/// CreateBrandingThemePaymentServices BrandingThemes/{BrandingThemeID}/PaymentServices
		/// </summary>
		/// <param name="BrandingThemeID">Unique identifier for a Branding Theme</param>
		/// <param name="requestBody">PaymentService object in body of request</param>
		/// <returns>Success - return response of type PaymentServices array with newly created PaymentService</returns>
		public async Task<PaymentServices> CreateBrandingThemePaymentServicesAsync(string BrandingThemeID, PaymentService requestBody)
		{
			var requestUri = "BrandingThemes/"+ (BrandingThemeID==null? "" : System.Uri.EscapeDataString(BrandingThemeID))+"/PaymentServices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaymentServices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allow for the creation of new custom payment service for specified Branding Theme
		/// CreateBrandingThemePaymentServices BrandingThemes/{BrandingThemeID}/PaymentServices
		/// </summary>
		/// <param name="BrandingThemeID">Unique identifier for a Branding Theme</param>
		/// <param name="requestBody">PaymentService object in body of request</param>
		/// <returns>Success - return response of type PaymentServices array with newly created PaymentService</returns>
		public PaymentServices CreateBrandingThemePaymentServices(string BrandingThemeID, PaymentService requestBody)
		{
			var requestUri = "BrandingThemes/"+ (BrandingThemeID==null? "" : System.Uri.EscapeDataString(BrandingThemeID))+"/PaymentServices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaymentServices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve all contacts in a Xero organisation
		/// GetContacts Contacts
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="IDs">Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call.</param>
		/// <param name="page">e.g. page=1 - Up to 100 contacts will be returned in a single API call.</param>
		/// <param name="includeArchived">e.g. includeArchived=true - Contacts with a status of ARCHIVED will be included in the response</param>
		/// <returns>Success - return response of type Contacts array with 0 to N Contact</returns>
		public async Task<Contacts> GetContactsAsync(string @where, string order, string[] IDs, int page, bool includeArchived)
		{
			var requestUri = "Contacts?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&"+string.Join("&", IDs.Select(z => $"IDs={System.Uri.EscapeDataString(z.ToString())}"))+"&page="+page+"&includeArchived="+includeArchived;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Contacts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve all contacts in a Xero organisation
		/// GetContacts Contacts
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="IDs">Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call.</param>
		/// <param name="page">e.g. page=1 - Up to 100 contacts will be returned in a single API call.</param>
		/// <param name="includeArchived">e.g. includeArchived=true - Contacts with a status of ARCHIVED will be included in the response</param>
		/// <returns>Success - return response of type Contacts array with 0 to N Contact</returns>
		public Contacts GetContacts(string @where, string order, string[] IDs, int page, bool includeArchived)
		{
			var requestUri = "Contacts?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&"+string.Join("&", IDs.Select(z => $"IDs={System.Uri.EscapeDataString(z.ToString())}"))+"&page="+page+"&includeArchived="+includeArchived;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Contacts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a multiple contacts (bulk) in a Xero organisation
		/// CreateContacts Contacts
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">Contacts with an array of Contact objects to create in body of request</param>
		/// <returns>Success - return response of type Contacts array with newly created Contact</returns>
		public async Task<Contacts> CreateContactsAsync(bool summarizeErrors, Contacts requestBody)
		{
			var requestUri = "Contacts?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Contacts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a multiple contacts (bulk) in a Xero organisation
		/// CreateContacts Contacts
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">Contacts with an array of Contact objects to create in body of request</param>
		/// <returns>Success - return response of type Contacts array with newly created Contact</returns>
		public Contacts CreateContacts(bool summarizeErrors, Contacts requestBody)
		{
			var requestUri = "Contacts?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Contacts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update OR create one or more contacts in a Xero organisation
		/// UpdateOrCreateContacts Contacts
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <returns>Success - return response of type Contacts array with newly created Contact</returns>
		public async Task<Contacts> UpdateOrCreateContactsAsync(bool summarizeErrors, Contacts requestBody)
		{
			var requestUri = "Contacts?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Contacts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update OR create one or more contacts in a Xero organisation
		/// UpdateOrCreateContacts Contacts
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <returns>Success - return response of type Contacts array with newly created Contact</returns>
		public Contacts UpdateOrCreateContacts(bool summarizeErrors, Contacts requestBody)
		{
			var requestUri = "Contacts?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Contacts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a single contact by Contact Number in a Xero organisation
		/// GetContactByContactNumber Contacts/{ContactNumber}
		/// </summary>
		/// <param name="ContactNumber">This field is read only on the Xero contact screen, used to identify contacts in external systems (max length = 50).</param>
		/// <returns>Success - return response of type Contacts array with a unique Contact</returns>
		public async Task<Contacts> GetContactByContactNumberAsync(string ContactNumber)
		{
			var requestUri = "Contacts/"+ (ContactNumber==null? "" : System.Uri.EscapeDataString(ContactNumber));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Contacts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a single contact by Contact Number in a Xero organisation
		/// GetContactByContactNumber Contacts/{ContactNumber}
		/// </summary>
		/// <param name="ContactNumber">This field is read only on the Xero contact screen, used to identify contacts in external systems (max length = 50).</param>
		/// <returns>Success - return response of type Contacts array with a unique Contact</returns>
		public Contacts GetContactByContactNumber(string ContactNumber)
		{
			var requestUri = "Contacts/"+ (ContactNumber==null? "" : System.Uri.EscapeDataString(ContactNumber));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Contacts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a single contacts in a Xero organisation
		/// GetContact Contacts/{ContactID}
		/// </summary>
		/// <param name="ContactID">Unique identifier for a Contact</param>
		/// <returns>Success - return response of type Contacts array with a unique Contact</returns>
		public async Task<Contacts> GetContactAsync(string ContactID)
		{
			var requestUri = "Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Contacts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a single contacts in a Xero organisation
		/// GetContact Contacts/{ContactID}
		/// </summary>
		/// <param name="ContactID">Unique identifier for a Contact</param>
		/// <returns>Success - return response of type Contacts array with a unique Contact</returns>
		public Contacts GetContact(string ContactID)
		{
			var requestUri = "Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Contacts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpdateContact Contacts/{ContactID}
		/// </summary>
		/// <param name="ContactID">Unique identifier for a Contact</param>
		/// <param name="requestBody">an array of Contacts containing single Contact object with properties to update</param>
		/// <returns>Success - return response of type Contacts array with an updated Contact</returns>
		public async Task<Contacts> UpdateContactAsync(string ContactID, Contacts requestBody)
		{
			var requestUri = "Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Contacts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// UpdateContact Contacts/{ContactID}
		/// </summary>
		/// <param name="ContactID">Unique identifier for a Contact</param>
		/// <param name="requestBody">an array of Contacts containing single Contact object with properties to update</param>
		/// <returns>Success - return response of type Contacts array with an updated Contact</returns>
		public Contacts UpdateContact(string ContactID, Contacts requestBody)
		{
			var requestUri = "Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Contacts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve, add and update contacts in a Xero organisation
		/// GetContactAttachments Contacts/{ContactID}/Attachments
		/// </summary>
		/// <param name="ContactID">Unique identifier for a Contact</param>
		/// <returns>Success - return response of type Attachments array with 0 to N Attachment</returns>
		public async Task<Attachments> GetContactAttachmentsAsync(string ContactID)
		{
			var requestUri = "Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID))+"/Attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve, add and update contacts in a Xero organisation
		/// GetContactAttachments Contacts/{ContactID}/Attachments
		/// </summary>
		/// <param name="ContactID">Unique identifier for a Contact</param>
		/// <returns>Success - return response of type Attachments array with 0 to N Attachment</returns>
		public Attachments GetContactAttachments(string ContactID)
		{
			var requestUri = "Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID))+"/Attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on Contacts
		/// GetContactAttachmentById Contacts/{ContactID}/Attachments/{AttachmentID}
		/// </summary>
		/// <param name="ContactID">Unique identifier for a Contact</param>
		/// <param name="AttachmentID">Unique identifier for a Attachment</param>
		/// <returns>Success - return response of attachment for Contact as binary data</returns>
		public async Task GetContactAttachmentByIdAsync(string ContactID, string AttachmentID)
		{
			var requestUri = "Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID))+"/Attachments/"+ (AttachmentID==null? "" : System.Uri.EscapeDataString(AttachmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on Contacts
		/// GetContactAttachmentById Contacts/{ContactID}/Attachments/{AttachmentID}
		/// </summary>
		/// <param name="ContactID">Unique identifier for a Contact</param>
		/// <param name="AttachmentID">Unique identifier for a Attachment</param>
		/// <returns>Success - return response of attachment for Contact as binary data</returns>
		public void GetContactAttachmentById(string ContactID, string AttachmentID)
		{
			var requestUri = "Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID))+"/Attachments/"+ (AttachmentID==null? "" : System.Uri.EscapeDataString(AttachmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on Contacts by file name
		/// GetContactAttachmentByFileName Contacts/{ContactID}/Attachments/{FileName}
		/// </summary>
		/// <param name="ContactID">Unique identifier for a Contact</param>
		/// <param name="FileName">Name for the file you are attaching</param>
		/// <returns>Success - return response of attachment for Contact as binary data</returns>
		public async Task GetContactAttachmentByFileNameAsync(string ContactID, string FileName)
		{
			var requestUri = "Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on Contacts by file name
		/// GetContactAttachmentByFileName Contacts/{ContactID}/Attachments/{FileName}
		/// </summary>
		/// <param name="ContactID">Unique identifier for a Contact</param>
		/// <param name="FileName">Name for the file you are attaching</param>
		/// <returns>Success - return response of attachment for Contact as binary data</returns>
		public void GetContactAttachmentByFileName(string ContactID, string FileName)
		{
			var requestUri = "Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve CISSettings for a contact in a Xero organisation
		/// GetContactCISSettings Contacts/{ContactID}/CISSettings
		/// </summary>
		/// <param name="ContactID">Unique identifier for a Contact</param>
		/// <returns>Success - return response of type CISSettings for a specific Contact</returns>
		public async Task<CISSettings> GetContactCISSettingsAsync(string ContactID)
		{
			var requestUri = "Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID))+"/CISSettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CISSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve CISSettings for a contact in a Xero organisation
		/// GetContactCISSettings Contacts/{ContactID}/CISSettings
		/// </summary>
		/// <param name="ContactID">Unique identifier for a Contact</param>
		/// <returns>Success - return response of type CISSettings for a specific Contact</returns>
		public CISSettings GetContactCISSettings(string ContactID)
		{
			var requestUri = "Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID))+"/CISSettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CISSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an Contact
		/// GetContactHistory Contacts/{ContactID}/History
		/// </summary>
		/// <param name="ContactID">Unique identifier for a Contact</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public async Task<HistoryRecords> GetContactHistoryAsync(string ContactID)
		{
			var requestUri = "Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an Contact
		/// GetContactHistory Contacts/{ContactID}/History
		/// </summary>
		/// <param name="ContactID">Unique identifier for a Contact</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public HistoryRecords GetContactHistory(string ContactID)
		{
			var requestUri = "Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an Contact
		/// CreateContactHistory Contacts/{ContactID}/History
		/// </summary>
		/// <param name="ContactID">Unique identifier for a Contact</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public async Task<HistoryRecords> CreateContactHistoryAsync(string ContactID, HistoryRecords requestBody)
		{
			var requestUri = "Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an Contact
		/// CreateContactHistory Contacts/{ContactID}/History
		/// </summary>
		/// <param name="ContactID">Unique identifier for a Contact</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public HistoryRecords CreateContactHistory(string ContactID, HistoryRecords requestBody)
		{
			var requestUri = "Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve the ContactID and Name of all the contacts in a contact group
		/// GetContactGroups ContactGroups
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <returns>Success - return response of type Contact Groups array of Contact Group</returns>
		public async Task<ContactGroups> GetContactGroupsAsync(string @where, string order)
		{
			var requestUri = "ContactGroups?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactGroups>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve the ContactID and Name of all the contacts in a contact group
		/// GetContactGroups ContactGroups
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <returns>Success - return response of type Contact Groups array of Contact Group</returns>
		public ContactGroups GetContactGroups(string @where, string order)
		{
			var requestUri = "ContactGroups?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactGroups>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a contact group
		/// CreateContactGroup ContactGroups
		/// </summary>
		/// <param name="requestBody">ContactGroups with an array of names in request body</param>
		/// <returns>Success - return response of type Contact Groups array of newly created Contact Group</returns>
		public async Task<ContactGroups> CreateContactGroupAsync(ContactGroups requestBody)
		{
			var requestUri = "ContactGroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactGroups>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a contact group
		/// CreateContactGroup ContactGroups
		/// </summary>
		/// <param name="requestBody">ContactGroups with an array of names in request body</param>
		/// <returns>Success - return response of type Contact Groups array of newly created Contact Group</returns>
		public ContactGroups CreateContactGroup(ContactGroups requestBody)
		{
			var requestUri = "ContactGroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactGroups>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a unique Contact Group by ID
		/// GetContactGroup ContactGroups/{ContactGroupID}
		/// </summary>
		/// <param name="ContactGroupID">Unique identifier for a Contact Group</param>
		/// <returns>Success - return response of type Contact Groups array with a specific Contact Group</returns>
		public async Task<ContactGroups> GetContactGroupAsync(string ContactGroupID)
		{
			var requestUri = "ContactGroups/"+ (ContactGroupID==null? "" : System.Uri.EscapeDataString(ContactGroupID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactGroups>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a unique Contact Group by ID
		/// GetContactGroup ContactGroups/{ContactGroupID}
		/// </summary>
		/// <param name="ContactGroupID">Unique identifier for a Contact Group</param>
		/// <returns>Success - return response of type Contact Groups array with a specific Contact Group</returns>
		public ContactGroups GetContactGroup(string ContactGroupID)
		{
			var requestUri = "ContactGroups/"+ (ContactGroupID==null? "" : System.Uri.EscapeDataString(ContactGroupID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactGroups>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a Contact Group
		/// UpdateContactGroup ContactGroups/{ContactGroupID}
		/// </summary>
		/// <param name="ContactGroupID">Unique identifier for a Contact Group</param>
		/// <param name="requestBody">an array of Contact groups with Name of specific group to update</param>
		/// <returns>Success - return response of type Contact Groups array of updated Contact Group</returns>
		public async Task<ContactGroups> UpdateContactGroupAsync(string ContactGroupID, ContactGroups requestBody)
		{
			var requestUri = "ContactGroups/"+ (ContactGroupID==null? "" : System.Uri.EscapeDataString(ContactGroupID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactGroups>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a Contact Group
		/// UpdateContactGroup ContactGroups/{ContactGroupID}
		/// </summary>
		/// <param name="ContactGroupID">Unique identifier for a Contact Group</param>
		/// <param name="requestBody">an array of Contact groups with Name of specific group to update</param>
		/// <returns>Success - return response of type Contact Groups array of updated Contact Group</returns>
		public ContactGroups UpdateContactGroup(string ContactGroupID, ContactGroups requestBody)
		{
			var requestUri = "ContactGroups/"+ (ContactGroupID==null? "" : System.Uri.EscapeDataString(ContactGroupID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactGroups>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to add Contacts to a Contact Group
		/// CreateContactGroupContacts ContactGroups/{ContactGroupID}/Contacts
		/// </summary>
		/// <param name="ContactGroupID">Unique identifier for a Contact Group</param>
		/// <param name="requestBody">Contacts with array of contacts specifiying the ContactID to be added to ContactGroup in body of request</param>
		/// <returns>Success - return response of type Contacts array of added Contacts</returns>
		public async Task<Contacts> CreateContactGroupContactsAsync(string ContactGroupID, Contacts requestBody)
		{
			var requestUri = "ContactGroups/"+ (ContactGroupID==null? "" : System.Uri.EscapeDataString(ContactGroupID))+"/Contacts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Contacts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to add Contacts to a Contact Group
		/// CreateContactGroupContacts ContactGroups/{ContactGroupID}/Contacts
		/// </summary>
		/// <param name="ContactGroupID">Unique identifier for a Contact Group</param>
		/// <param name="requestBody">Contacts with array of contacts specifiying the ContactID to be added to ContactGroup in body of request</param>
		/// <returns>Success - return response of type Contacts array of added Contacts</returns>
		public Contacts CreateContactGroupContacts(string ContactGroupID, Contacts requestBody)
		{
			var requestUri = "ContactGroups/"+ (ContactGroupID==null? "" : System.Uri.EscapeDataString(ContactGroupID))+"/Contacts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Contacts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to delete  all Contacts from a Contact Group
		/// DeleteContactGroupContacts ContactGroups/{ContactGroupID}/Contacts
		/// </summary>
		/// <param name="ContactGroupID">Unique identifier for a Contact Group</param>
		public async Task DeleteContactGroupContactsAsync(string ContactGroupID)
		{
			var requestUri = "ContactGroups/"+ (ContactGroupID==null? "" : System.Uri.EscapeDataString(ContactGroupID))+"/Contacts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to delete  all Contacts from a Contact Group
		/// DeleteContactGroupContacts ContactGroups/{ContactGroupID}/Contacts
		/// </summary>
		/// <param name="ContactGroupID">Unique identifier for a Contact Group</param>
		public void DeleteContactGroupContacts(string ContactGroupID)
		{
			var requestUri = "ContactGroups/"+ (ContactGroupID==null? "" : System.Uri.EscapeDataString(ContactGroupID))+"/Contacts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to delete a specific Contact from a Contact Group
		/// DeleteContactGroupContact ContactGroups/{ContactGroupID}/Contacts/{ContactID}
		/// </summary>
		/// <param name="ContactGroupID">Unique identifier for a Contact Group</param>
		/// <param name="ContactID">Unique identifier for a Contact</param>
		public async Task DeleteContactGroupContactAsync(string ContactGroupID, string ContactID)
		{
			var requestUri = "ContactGroups/"+ (ContactGroupID==null? "" : System.Uri.EscapeDataString(ContactGroupID))+"/Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to delete a specific Contact from a Contact Group
		/// DeleteContactGroupContact ContactGroups/{ContactGroupID}/Contacts/{ContactID}
		/// </summary>
		/// <param name="ContactGroupID">Unique identifier for a Contact Group</param>
		/// <param name="ContactID">Unique identifier for a Contact</param>
		public void DeleteContactGroupContact(string ContactGroupID, string ContactID)
		{
			var requestUri = "ContactGroups/"+ (ContactGroupID==null? "" : System.Uri.EscapeDataString(ContactGroupID))+"/Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve any credit notes
		/// GetCreditNotes CreditNotes
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 � Up to 100 credit notes will be returned in a single API call with line items shown for each credit note</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Credit Notes array of CreditNote</returns>
		public async Task<CreditNotes> GetCreditNotesAsync(string @where, string order, int page, int unitdp)
		{
			var requestUri = "CreditNotes?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&page="+page+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreditNotes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve any credit notes
		/// GetCreditNotes CreditNotes
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 � Up to 100 credit notes will be returned in a single API call with line items shown for each credit note</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Credit Notes array of CreditNote</returns>
		public CreditNotes GetCreditNotes(string @where, string order, int page, int unitdp)
		{
			var requestUri = "CreditNotes?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&page="+page+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreditNotes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a credit note
		/// CreateCreditNotes CreditNotes
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <param name="requestBody">Credit Notes with array of CreditNote object in body of request</param>
		/// <returns>Success - return response of type Credit Notes array of newly created CreditNote</returns>
		public async Task<CreditNotes> CreateCreditNotesAsync(bool summarizeErrors, int unitdp, CreditNotes requestBody)
		{
			var requestUri = "CreditNotes?summarizeErrors="+summarizeErrors+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreditNotes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a credit note
		/// CreateCreditNotes CreditNotes
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <param name="requestBody">Credit Notes with array of CreditNote object in body of request</param>
		/// <returns>Success - return response of type Credit Notes array of newly created CreditNote</returns>
		public CreditNotes CreateCreditNotes(bool summarizeErrors, int unitdp, CreditNotes requestBody)
		{
			var requestUri = "CreditNotes?summarizeErrors="+summarizeErrors+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreditNotes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update OR create one or more credit notes
		/// UpdateOrCreateCreditNotes CreditNotes
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <param name="requestBody">an array of Credit Notes with a single CreditNote object.</param>
		/// <returns>Success - return response of type Credit Notes array of newly created CreditNote</returns>
		public async Task<CreditNotes> UpdateOrCreateCreditNotesAsync(bool summarizeErrors, int unitdp, CreditNotes requestBody)
		{
			var requestUri = "CreditNotes?summarizeErrors="+summarizeErrors+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreditNotes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update OR create one or more credit notes
		/// UpdateOrCreateCreditNotes CreditNotes
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <param name="requestBody">an array of Credit Notes with a single CreditNote object.</param>
		/// <returns>Success - return response of type Credit Notes array of newly created CreditNote</returns>
		public CreditNotes UpdateOrCreateCreditNotes(bool summarizeErrors, int unitdp, CreditNotes requestBody)
		{
			var requestUri = "CreditNotes?summarizeErrors="+summarizeErrors+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreditNotes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specific credit note
		/// GetCreditNote CreditNotes/{CreditNoteID}
		/// </summary>
		/// <param name="CreditNoteID">Unique identifier for a Credit Note</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Credit Notes array with a unique CreditNote</returns>
		public async Task<CreditNotes> GetCreditNoteAsync(string CreditNoteID, int unitdp)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreditNotes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specific credit note
		/// GetCreditNote CreditNotes/{CreditNoteID}
		/// </summary>
		/// <param name="CreditNoteID">Unique identifier for a Credit Note</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Credit Notes array with a unique CreditNote</returns>
		public CreditNotes GetCreditNote(string CreditNoteID, int unitdp)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreditNotes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a specific credit note
		/// UpdateCreditNote CreditNotes/{CreditNoteID}
		/// </summary>
		/// <param name="CreditNoteID">Unique identifier for a Credit Note</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <param name="requestBody">an array of Credit Notes containing credit note details to update</param>
		/// <returns>Success - return response of type Credit Notes array with updated CreditNote</returns>
		public async Task<CreditNotes> UpdateCreditNoteAsync(string CreditNoteID, int unitdp, CreditNotes requestBody)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreditNotes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a specific credit note
		/// UpdateCreditNote CreditNotes/{CreditNoteID}
		/// </summary>
		/// <param name="CreditNoteID">Unique identifier for a Credit Note</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <param name="requestBody">an array of Credit Notes containing credit note details to update</param>
		/// <returns>Success - return response of type Credit Notes array with updated CreditNote</returns>
		public CreditNotes UpdateCreditNote(string CreditNoteID, int unitdp, CreditNotes requestBody)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreditNotes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments for credit notes
		/// GetCreditNoteAttachments CreditNotes/{CreditNoteID}/Attachments
		/// </summary>
		/// <param name="CreditNoteID">Unique identifier for a Credit Note</param>
		/// <returns>Success - return response of type Attachments array with all Attachment for specific Credit Note</returns>
		public async Task<Attachments> GetCreditNoteAttachmentsAsync(string CreditNoteID)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"/Attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments for credit notes
		/// GetCreditNoteAttachments CreditNotes/{CreditNoteID}/Attachments
		/// </summary>
		/// <param name="CreditNoteID">Unique identifier for a Credit Note</param>
		/// <returns>Success - return response of type Attachments array with all Attachment for specific Credit Note</returns>
		public Attachments GetCreditNoteAttachments(string CreditNoteID)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"/Attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on CreditNote
		/// GetCreditNoteAttachmentById CreditNotes/{CreditNoteID}/Attachments/{AttachmentID}
		/// </summary>
		/// <param name="CreditNoteID">Unique identifier for a Credit Note</param>
		/// <param name="AttachmentID">Unique identifier for a Attachment</param>
		/// <returns>Success - return response of attachment for Credit Note as binary data</returns>
		public async Task GetCreditNoteAttachmentByIdAsync(string CreditNoteID, string AttachmentID)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"/Attachments/"+ (AttachmentID==null? "" : System.Uri.EscapeDataString(AttachmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on CreditNote
		/// GetCreditNoteAttachmentById CreditNotes/{CreditNoteID}/Attachments/{AttachmentID}
		/// </summary>
		/// <param name="CreditNoteID">Unique identifier for a Credit Note</param>
		/// <param name="AttachmentID">Unique identifier for a Attachment</param>
		/// <returns>Success - return response of attachment for Credit Note as binary data</returns>
		public void GetCreditNoteAttachmentById(string CreditNoteID, string AttachmentID)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"/Attachments/"+ (AttachmentID==null? "" : System.Uri.EscapeDataString(AttachmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on CreditNote by file name
		/// GetCreditNoteAttachmentByFileName CreditNotes/{CreditNoteID}/Attachments/{FileName}
		/// </summary>
		/// <param name="CreditNoteID">Unique identifier for a Credit Note</param>
		/// <param name="FileName">Name of the file you are attaching to Credit Note</param>
		/// <returns>Success - return response of attachment for Credit Note as binary data</returns>
		public async Task GetCreditNoteAttachmentByFileNameAsync(string CreditNoteID, string FileName)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on CreditNote by file name
		/// GetCreditNoteAttachmentByFileName CreditNotes/{CreditNoteID}/Attachments/{FileName}
		/// </summary>
		/// <param name="CreditNoteID">Unique identifier for a Credit Note</param>
		/// <param name="FileName">Name of the file you are attaching to Credit Note</param>
		/// <returns>Success - return response of attachment for Credit Note as binary data</returns>
		public void GetCreditNoteAttachmentByFileName(string CreditNoteID, string FileName)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Credit Note as PDF files
		/// GetCreditNoteAsPdf CreditNotes/{CreditNoteID}/pdf
		/// </summary>
		/// <param name="CreditNoteID">Unique identifier for a Credit Note</param>
		/// <returns>Success - return response of binary data from the Attachment to a Credit Note</returns>
		public async Task GetCreditNoteAsPdfAsync(string CreditNoteID)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"/pdf";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Credit Note as PDF files
		/// GetCreditNoteAsPdf CreditNotes/{CreditNoteID}/pdf
		/// </summary>
		/// <param name="CreditNoteID">Unique identifier for a Credit Note</param>
		/// <returns>Success - return response of binary data from the Attachment to a Credit Note</returns>
		public void GetCreditNoteAsPdf(string CreditNoteID)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"/pdf";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create Allocation on CreditNote
		/// CreateCreditNoteAllocation CreditNotes/{CreditNoteID}/Allocations
		/// </summary>
		/// <param name="CreditNoteID">Unique identifier for a Credit Note</param>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">Allocations with array of Allocation object in body of request.</param>
		/// <returns>Success - return response of type Allocations array with newly created Allocation for specific Credit Note</returns>
		public async Task<Allocations> CreateCreditNoteAllocationAsync(string CreditNoteID, bool summarizeErrors, Allocations requestBody)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"/Allocations&summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Allocations>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create Allocation on CreditNote
		/// CreateCreditNoteAllocation CreditNotes/{CreditNoteID}/Allocations
		/// </summary>
		/// <param name="CreditNoteID">Unique identifier for a Credit Note</param>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">Allocations with array of Allocation object in body of request.</param>
		/// <returns>Success - return response of type Allocations array with newly created Allocation for specific Credit Note</returns>
		public Allocations CreateCreditNoteAllocation(string CreditNoteID, bool summarizeErrors, Allocations requestBody)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"/Allocations&summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Allocations>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an CreditNote
		/// GetCreditNoteHistory CreditNotes/{CreditNoteID}/History
		/// </summary>
		/// <param name="CreditNoteID">Unique identifier for a Credit Note</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public async Task<HistoryRecords> GetCreditNoteHistoryAsync(string CreditNoteID)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an CreditNote
		/// GetCreditNoteHistory CreditNotes/{CreditNoteID}/History
		/// </summary>
		/// <param name="CreditNoteID">Unique identifier for a Credit Note</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public HistoryRecords GetCreditNoteHistory(string CreditNoteID)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an CreditNote
		/// CreateCreditNoteHistory CreditNotes/{CreditNoteID}/History
		/// </summary>
		/// <param name="CreditNoteID">Unique identifier for a Credit Note</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public async Task<HistoryRecords> CreateCreditNoteHistoryAsync(string CreditNoteID, HistoryRecords requestBody)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an CreditNote
		/// CreateCreditNoteHistory CreditNotes/{CreditNoteID}/History
		/// </summary>
		/// <param name="CreditNoteID">Unique identifier for a Credit Note</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public HistoryRecords CreateCreditNoteHistory(string CreditNoteID, HistoryRecords requestBody)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve currencies for your organisation
		/// GetCurrencies Currencies
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <returns>Success - return response of type Currencies array with all Currencies</returns>
		public async Task<Currencies> GetCurrenciesAsync(string @where, string order)
		{
			var requestUri = "Currencies?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Currencies>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve currencies for your organisation
		/// GetCurrencies Currencies
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <returns>Success - return response of type Currencies array with all Currencies</returns>
		public Currencies GetCurrencies(string @where, string order)
		{
			var requestUri = "Currencies?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Currencies>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateCurrency Currencies
		/// </summary>
		/// <param name="requestBody">Currency obejct in the body of request</param>
		/// <returns>Unsupported - return response incorrect exception, API is not able to create new Currency</returns>
		public async Task<Currencies> CreateCurrencyAsync(Currency requestBody)
		{
			var requestUri = "Currencies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Currencies>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// CreateCurrency Currencies
		/// </summary>
		/// <param name="requestBody">Currency obejct in the body of request</param>
		/// <returns>Unsupported - return response incorrect exception, API is not able to create new Currency</returns>
		public Currencies CreateCurrency(Currency requestBody)
		{
			var requestUri = "Currencies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Currencies>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve employees used in Xero payrun
		/// GetEmployees Employees
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <returns>Success - return response of type Employees array with all Employee</returns>
		public async Task<Employees> GetEmployeesAsync(string @where, string order)
		{
			var requestUri = "Employees?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Employees>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve employees used in Xero payrun
		/// GetEmployees Employees
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <returns>Success - return response of type Employees array with all Employee</returns>
		public Employees GetEmployees(string @where, string order)
		{
			var requestUri = "Employees?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Employees>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create new employees used in Xero payrun
		/// CreateEmployees Employees
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">Employees with array of Employee object in body of request</param>
		/// <returns>Success - return response of type Employees array with new Employee</returns>
		public async Task<Employees> CreateEmployeesAsync(bool summarizeErrors, Employees requestBody)
		{
			var requestUri = "Employees?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Employees>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create new employees used in Xero payrun
		/// CreateEmployees Employees
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">Employees with array of Employee object in body of request</param>
		/// <returns>Success - return response of type Employees array with new Employee</returns>
		public Employees CreateEmployees(bool summarizeErrors, Employees requestBody)
		{
			var requestUri = "Employees?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Employees>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a single new employees used in Xero payrun
		/// UpdateOrCreateEmployees Employees
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">Employees with array of Employee object in body of request</param>
		/// <returns>Success - return response of type Employees array with new Employee</returns>
		public async Task<Employees> UpdateOrCreateEmployeesAsync(bool summarizeErrors, Employees requestBody)
		{
			var requestUri = "Employees?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Employees>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a single new employees used in Xero payrun
		/// UpdateOrCreateEmployees Employees
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">Employees with array of Employee object in body of request</param>
		/// <returns>Success - return response of type Employees array with new Employee</returns>
		public Employees UpdateOrCreateEmployees(bool summarizeErrors, Employees requestBody)
		{
			var requestUri = "Employees?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Employees>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specific employee used in Xero payrun
		/// GetEmployee Employees/{EmployeeID}
		/// </summary>
		/// <param name="EmployeeID">Unique identifier for a Employee</param>
		/// <returns>Success - return response of type Employees array with specified Employee</returns>
		public async Task<Employees> GetEmployeeAsync(string EmployeeID)
		{
			var requestUri = "Employees/"+ (EmployeeID==null? "" : System.Uri.EscapeDataString(EmployeeID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Employees>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specific employee used in Xero payrun
		/// GetEmployee Employees/{EmployeeID}
		/// </summary>
		/// <param name="EmployeeID">Unique identifier for a Employee</param>
		/// <returns>Success - return response of type Employees array with specified Employee</returns>
		public Employees GetEmployee(string EmployeeID)
		{
			var requestUri = "Employees/"+ (EmployeeID==null? "" : System.Uri.EscapeDataString(EmployeeID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Employees>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve expense claims
		/// GetExpenseClaims ExpenseClaims
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <returns>Success - return response of type ExpenseClaims array with all ExpenseClaims</returns>
		public async Task<ExpenseClaims> GetExpenseClaimsAsync(string @where, string order)
		{
			var requestUri = "ExpenseClaims?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExpenseClaims>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve expense claims
		/// GetExpenseClaims ExpenseClaims
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <returns>Success - return response of type ExpenseClaims array with all ExpenseClaims</returns>
		public ExpenseClaims GetExpenseClaims(string @where, string order)
		{
			var requestUri = "ExpenseClaims?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExpenseClaims>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve expense claims
		/// CreateExpenseClaims ExpenseClaims
		/// </summary>
		/// <param name="requestBody">ExpenseClaims with array of ExpenseClaim object in body of request</param>
		/// <returns>Success - return response of type ExpenseClaims array with newly created ExpenseClaim</returns>
		public async Task<ExpenseClaims> CreateExpenseClaimsAsync(ExpenseClaims requestBody)
		{
			var requestUri = "ExpenseClaims";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExpenseClaims>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve expense claims
		/// CreateExpenseClaims ExpenseClaims
		/// </summary>
		/// <param name="requestBody">ExpenseClaims with array of ExpenseClaim object in body of request</param>
		/// <returns>Success - return response of type ExpenseClaims array with newly created ExpenseClaim</returns>
		public ExpenseClaims CreateExpenseClaims(ExpenseClaims requestBody)
		{
			var requestUri = "ExpenseClaims";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExpenseClaims>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified expense claim
		/// GetExpenseClaim ExpenseClaims/{ExpenseClaimID}
		/// </summary>
		/// <param name="ExpenseClaimID">Unique identifier for a ExpenseClaim</param>
		/// <returns>Success - return response of type ExpenseClaims array with specified ExpenseClaim</returns>
		public async Task<ExpenseClaims> GetExpenseClaimAsync(string ExpenseClaimID)
		{
			var requestUri = "ExpenseClaims/"+ (ExpenseClaimID==null? "" : System.Uri.EscapeDataString(ExpenseClaimID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExpenseClaims>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified expense claim
		/// GetExpenseClaim ExpenseClaims/{ExpenseClaimID}
		/// </summary>
		/// <param name="ExpenseClaimID">Unique identifier for a ExpenseClaim</param>
		/// <returns>Success - return response of type ExpenseClaims array with specified ExpenseClaim</returns>
		public ExpenseClaims GetExpenseClaim(string ExpenseClaimID)
		{
			var requestUri = "ExpenseClaims/"+ (ExpenseClaimID==null? "" : System.Uri.EscapeDataString(ExpenseClaimID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExpenseClaims>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to update specified expense claims
		/// UpdateExpenseClaim ExpenseClaims/{ExpenseClaimID}
		/// </summary>
		/// <param name="ExpenseClaimID">Unique identifier for a ExpenseClaim</param>
		/// <returns>Success - return response of type ExpenseClaims array with updated ExpenseClaim</returns>
		public async Task<ExpenseClaims> UpdateExpenseClaimAsync(string ExpenseClaimID, ExpenseClaims requestBody)
		{
			var requestUri = "ExpenseClaims/"+ (ExpenseClaimID==null? "" : System.Uri.EscapeDataString(ExpenseClaimID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExpenseClaims>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update specified expense claims
		/// UpdateExpenseClaim ExpenseClaims/{ExpenseClaimID}
		/// </summary>
		/// <param name="ExpenseClaimID">Unique identifier for a ExpenseClaim</param>
		/// <returns>Success - return response of type ExpenseClaims array with updated ExpenseClaim</returns>
		public ExpenseClaims UpdateExpenseClaim(string ExpenseClaimID, ExpenseClaims requestBody)
		{
			var requestUri = "ExpenseClaims/"+ (ExpenseClaimID==null? "" : System.Uri.EscapeDataString(ExpenseClaimID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExpenseClaims>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an ExpenseClaim
		/// GetExpenseClaimHistory ExpenseClaims/{ExpenseClaimID}/History
		/// </summary>
		/// <param name="ExpenseClaimID">Unique identifier for a ExpenseClaim</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public async Task<HistoryRecords> GetExpenseClaimHistoryAsync(string ExpenseClaimID)
		{
			var requestUri = "ExpenseClaims/"+ (ExpenseClaimID==null? "" : System.Uri.EscapeDataString(ExpenseClaimID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an ExpenseClaim
		/// GetExpenseClaimHistory ExpenseClaims/{ExpenseClaimID}/History
		/// </summary>
		/// <param name="ExpenseClaimID">Unique identifier for a ExpenseClaim</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public HistoryRecords GetExpenseClaimHistory(string ExpenseClaimID)
		{
			var requestUri = "ExpenseClaims/"+ (ExpenseClaimID==null? "" : System.Uri.EscapeDataString(ExpenseClaimID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a history records of an ExpenseClaim
		/// CreateExpenseClaimHistory ExpenseClaims/{ExpenseClaimID}/History
		/// </summary>
		/// <param name="ExpenseClaimID">Unique identifier for a ExpenseClaim</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public async Task<HistoryRecords> CreateExpenseClaimHistoryAsync(string ExpenseClaimID, HistoryRecords requestBody)
		{
			var requestUri = "ExpenseClaims/"+ (ExpenseClaimID==null? "" : System.Uri.EscapeDataString(ExpenseClaimID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a history records of an ExpenseClaim
		/// CreateExpenseClaimHistory ExpenseClaims/{ExpenseClaimID}/History
		/// </summary>
		/// <param name="ExpenseClaimID">Unique identifier for a ExpenseClaim</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public HistoryRecords CreateExpenseClaimHistory(string ExpenseClaimID, HistoryRecords requestBody)
		{
			var requestUri = "ExpenseClaims/"+ (ExpenseClaimID==null? "" : System.Uri.EscapeDataString(ExpenseClaimID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve any sales invoices or purchase bills
		/// GetInvoices Invoices
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="IDs">Filter by a comma-separated list of InvoicesIDs.</param>
		/// <param name="InvoiceNumbers">Filter by a comma-separated list of InvoiceNumbers.</param>
		/// <param name="ContactIDs">Filter by a comma-separated list of ContactIDs.</param>
		/// <param name="Statuses">Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter.</param>
		/// <param name="page">e.g. page=1 � Up to 100 invoices will be returned in a single API call with line items shown for each invoice</param>
		/// <param name="includeArchived">e.g. includeArchived=true - Contacts with a status of ARCHIVED will be included in the response</param>
		/// <param name="createdByMyApp">When set to true you'll only retrieve Invoices created by your app</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Invoices array with all Invoices</returns>
		public async Task<Invoices> GetInvoicesAsync(string @where, string order, string[] IDs, string[] InvoiceNumbers, string[] ContactIDs, string[] Statuses, int page, bool includeArchived, bool createdByMyApp, int unitdp)
		{
			var requestUri = "Invoices?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&"+string.Join("&", IDs.Select(z => $"IDs={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", InvoiceNumbers.Select(z => $"InvoiceNumbers={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", ContactIDs.Select(z => $"ContactIDs={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", Statuses.Select(z => $"Statuses={System.Uri.EscapeDataString(z.ToString())}"))+"&page="+page+"&includeArchived="+includeArchived+"&createdByMyApp="+createdByMyApp+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve any sales invoices or purchase bills
		/// GetInvoices Invoices
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="IDs">Filter by a comma-separated list of InvoicesIDs.</param>
		/// <param name="InvoiceNumbers">Filter by a comma-separated list of InvoiceNumbers.</param>
		/// <param name="ContactIDs">Filter by a comma-separated list of ContactIDs.</param>
		/// <param name="Statuses">Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter.</param>
		/// <param name="page">e.g. page=1 � Up to 100 invoices will be returned in a single API call with line items shown for each invoice</param>
		/// <param name="includeArchived">e.g. includeArchived=true - Contacts with a status of ARCHIVED will be included in the response</param>
		/// <param name="createdByMyApp">When set to true you'll only retrieve Invoices created by your app</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Invoices array with all Invoices</returns>
		public Invoices GetInvoices(string @where, string order, string[] IDs, string[] InvoiceNumbers, string[] ContactIDs, string[] Statuses, int page, bool includeArchived, bool createdByMyApp, int unitdp)
		{
			var requestUri = "Invoices?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&"+string.Join("&", IDs.Select(z => $"IDs={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", InvoiceNumbers.Select(z => $"InvoiceNumbers={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", ContactIDs.Select(z => $"ContactIDs={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", Statuses.Select(z => $"Statuses={System.Uri.EscapeDataString(z.ToString())}"))+"&page="+page+"&includeArchived="+includeArchived+"&createdByMyApp="+createdByMyApp+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create one or more sales invoices or purchase bills
		/// CreateInvoices Invoices
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <param name="requestBody">Invoices with an array of invoice objects in body of request</param>
		/// <returns>Success - return response of type Invoices array with newly created Invoice</returns>
		public async Task<Invoices> CreateInvoicesAsync(bool summarizeErrors, int unitdp, Invoices requestBody)
		{
			var requestUri = "Invoices?summarizeErrors="+summarizeErrors+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create one or more sales invoices or purchase bills
		/// CreateInvoices Invoices
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <param name="requestBody">Invoices with an array of invoice objects in body of request</param>
		/// <returns>Success - return response of type Invoices array with newly created Invoice</returns>
		public Invoices CreateInvoices(bool summarizeErrors, int unitdp, Invoices requestBody)
		{
			var requestUri = "Invoices?summarizeErrors="+summarizeErrors+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update OR create one or more sales invoices or purchase bills
		/// UpdateOrCreateInvoices Invoices
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Invoices array with newly created Invoice</returns>
		public async Task<Invoices> UpdateOrCreateInvoicesAsync(bool summarizeErrors, int unitdp, Invoices requestBody)
		{
			var requestUri = "Invoices?summarizeErrors="+summarizeErrors+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update OR create one or more sales invoices or purchase bills
		/// UpdateOrCreateInvoices Invoices
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Invoices array with newly created Invoice</returns>
		public Invoices UpdateOrCreateInvoices(bool summarizeErrors, int unitdp, Invoices requestBody)
		{
			var requestUri = "Invoices?summarizeErrors="+summarizeErrors+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified sales invoice or purchase bill
		/// GetInvoice Invoices/{InvoiceID}
		/// </summary>
		/// <param name="InvoiceID">Unique identifier for an Invoice</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Invoices array with specified Invoices</returns>
		public async Task<Invoices> GetInvoiceAsync(string InvoiceID, int unitdp)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified sales invoice or purchase bill
		/// GetInvoice Invoices/{InvoiceID}
		/// </summary>
		/// <param name="InvoiceID">Unique identifier for an Invoice</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Invoices array with specified Invoices</returns>
		public Invoices GetInvoice(string InvoiceID, int unitdp)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a specified sales invoices or purchase bills
		/// UpdateInvoice Invoices/{InvoiceID}
		/// </summary>
		/// <param name="InvoiceID">Unique identifier for an Invoice</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Invoices array with updated Invoice</returns>
		public async Task<Invoices> UpdateInvoiceAsync(string InvoiceID, int unitdp, Invoices requestBody)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a specified sales invoices or purchase bills
		/// UpdateInvoice Invoices/{InvoiceID}
		/// </summary>
		/// <param name="InvoiceID">Unique identifier for an Invoice</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Invoices array with updated Invoice</returns>
		public Invoices UpdateInvoice(string InvoiceID, int unitdp, Invoices requestBody)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve invoices or purchase bills as PDF files
		/// GetInvoiceAsPdf Invoices/{InvoiceID}/pdf
		/// </summary>
		/// <param name="InvoiceID">Unique identifier for an Invoice</param>
		/// <returns>Success - return response of byte array pdf version of specified Invoices</returns>
		public async Task GetInvoiceAsPdfAsync(string InvoiceID)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"/pdf";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve invoices or purchase bills as PDF files
		/// GetInvoiceAsPdf Invoices/{InvoiceID}/pdf
		/// </summary>
		/// <param name="InvoiceID">Unique identifier for an Invoice</param>
		/// <returns>Success - return response of byte array pdf version of specified Invoices</returns>
		public void GetInvoiceAsPdf(string InvoiceID)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"/pdf";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on invoices or purchase bills
		/// GetInvoiceAttachments Invoices/{InvoiceID}/Attachments
		/// </summary>
		/// <param name="InvoiceID">Unique identifier for an Invoice</param>
		/// <returns>Success - return response of type Attachments array of Attachments for specified Invoices</returns>
		public async Task<Attachments> GetInvoiceAttachmentsAsync(string InvoiceID)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"/Attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on invoices or purchase bills
		/// GetInvoiceAttachments Invoices/{InvoiceID}/Attachments
		/// </summary>
		/// <param name="InvoiceID">Unique identifier for an Invoice</param>
		/// <returns>Success - return response of type Attachments array of Attachments for specified Invoices</returns>
		public Attachments GetInvoiceAttachments(string InvoiceID)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"/Attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified Attachment on invoices or purchase bills by it's ID
		/// GetInvoiceAttachmentById Invoices/{InvoiceID}/Attachments/{AttachmentID}
		/// </summary>
		/// <param name="InvoiceID">Unique identifier for an Invoice</param>
		/// <param name="AttachmentID">Unique identifier for an Attachment</param>
		/// <returns>Success - return response of attachment for Invoice as binary data</returns>
		public async Task GetInvoiceAttachmentByIdAsync(string InvoiceID, string AttachmentID)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"/Attachments/"+ (AttachmentID==null? "" : System.Uri.EscapeDataString(AttachmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified Attachment on invoices or purchase bills by it's ID
		/// GetInvoiceAttachmentById Invoices/{InvoiceID}/Attachments/{AttachmentID}
		/// </summary>
		/// <param name="InvoiceID">Unique identifier for an Invoice</param>
		/// <param name="AttachmentID">Unique identifier for an Attachment</param>
		/// <returns>Success - return response of attachment for Invoice as binary data</returns>
		public void GetInvoiceAttachmentById(string InvoiceID, string AttachmentID)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"/Attachments/"+ (AttachmentID==null? "" : System.Uri.EscapeDataString(AttachmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachment on invoices or purchase bills by it's filename
		/// GetInvoiceAttachmentByFileName Invoices/{InvoiceID}/Attachments/{FileName}
		/// </summary>
		/// <param name="InvoiceID">Unique identifier for an Invoice</param>
		/// <param name="FileName">Name of the file you are attaching</param>
		/// <returns>Success - return response of attachment for Invoice as binary data</returns>
		public async Task GetInvoiceAttachmentByFileNameAsync(string InvoiceID, string FileName)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachment on invoices or purchase bills by it's filename
		/// GetInvoiceAttachmentByFileName Invoices/{InvoiceID}/Attachments/{FileName}
		/// </summary>
		/// <param name="InvoiceID">Unique identifier for an Invoice</param>
		/// <param name="FileName">Name of the file you are attaching</param>
		/// <returns>Success - return response of attachment for Invoice as binary data</returns>
		public void GetInvoiceAttachmentByFileName(string InvoiceID, string FileName)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a URL to an online invoice
		/// GetOnlineInvoice Invoices/{InvoiceID}/OnlineInvoice
		/// </summary>
		/// <param name="InvoiceID">Unique identifier for an Invoice</param>
		/// <returns>Success - return response of type OnlineInvoice array with one OnlineInvoice</returns>
		public async Task<OnlineInvoices> GetOnlineInvoiceAsync(string InvoiceID)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"/OnlineInvoice";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OnlineInvoices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a URL to an online invoice
		/// GetOnlineInvoice Invoices/{InvoiceID}/OnlineInvoice
		/// </summary>
		/// <param name="InvoiceID">Unique identifier for an Invoice</param>
		/// <returns>Success - return response of type OnlineInvoice array with one OnlineInvoice</returns>
		public OnlineInvoices GetOnlineInvoice(string InvoiceID)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"/OnlineInvoice";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OnlineInvoices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to email a copy of invoice to related Contact
		/// EmailInvoice Invoices/{InvoiceID}/Email
		/// </summary>
		/// <param name="InvoiceID">Unique identifier for an Invoice</param>
		public async Task EmailInvoiceAsync(string InvoiceID, RequestEmpty requestBody)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"/Email";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to email a copy of invoice to related Contact
		/// EmailInvoice Invoices/{InvoiceID}/Email
		/// </summary>
		/// <param name="InvoiceID">Unique identifier for an Invoice</param>
		public void EmailInvoice(string InvoiceID, RequestEmpty requestBody)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"/Email";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an invoice
		/// GetInvoiceHistory Invoices/{InvoiceID}/History
		/// </summary>
		/// <param name="InvoiceID">Unique identifier for an Invoice</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public async Task<HistoryRecords> GetInvoiceHistoryAsync(string InvoiceID)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an invoice
		/// GetInvoiceHistory Invoices/{InvoiceID}/History
		/// </summary>
		/// <param name="InvoiceID">Unique identifier for an Invoice</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public HistoryRecords GetInvoiceHistory(string InvoiceID)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an invoice
		/// CreateInvoiceHistory Invoices/{InvoiceID}/History
		/// </summary>
		/// <param name="InvoiceID">Unique identifier for an Invoice</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public async Task<HistoryRecords> CreateInvoiceHistoryAsync(string InvoiceID, HistoryRecords requestBody)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an invoice
		/// CreateInvoiceHistory Invoices/{InvoiceID}/History
		/// </summary>
		/// <param name="InvoiceID">Unique identifier for an Invoice</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public HistoryRecords CreateInvoiceHistory(string InvoiceID, HistoryRecords requestBody)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve invoice reminder settings
		/// GetInvoiceReminders InvoiceReminders/Settings
		/// </summary>
		/// <returns>Success - return response of Invoice Reminders</returns>
		public async Task<InvoiceReminders> GetInvoiceRemindersAsync()
		{
			var requestUri = "InvoiceReminders/Settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvoiceReminders>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve invoice reminder settings
		/// GetInvoiceReminders InvoiceReminders/Settings
		/// </summary>
		/// <returns>Success - return response of Invoice Reminders</returns>
		public InvoiceReminders GetInvoiceReminders()
		{
			var requestUri = "InvoiceReminders/Settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvoiceReminders>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve any items
		/// GetItems Items
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Items array with all Item</returns>
		public async Task<Items> GetItemsAsync(string @where, string order, int unitdp)
		{
			var requestUri = "Items?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Items>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve any items
		/// GetItems Items
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Items array with all Item</returns>
		public Items GetItems(string @where, string order, int unitdp)
		{
			var requestUri = "Items?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Items>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create one or more items
		/// CreateItems Items
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <param name="requestBody">Items with an array of Item objects in body of request</param>
		/// <returns>Success - return response of type Items array with newly created Item</returns>
		public async Task<Items> CreateItemsAsync(bool summarizeErrors, int unitdp, Items requestBody)
		{
			var requestUri = "Items?summarizeErrors="+summarizeErrors+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Items>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create one or more items
		/// CreateItems Items
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <param name="requestBody">Items with an array of Item objects in body of request</param>
		/// <returns>Success - return response of type Items array with newly created Item</returns>
		public Items CreateItems(bool summarizeErrors, int unitdp, Items requestBody)
		{
			var requestUri = "Items?summarizeErrors="+summarizeErrors+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Items>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update or create one or more items
		/// UpdateOrCreateItems Items
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Items array with newly created Item</returns>
		public async Task<Items> UpdateOrCreateItemsAsync(bool summarizeErrors, int unitdp, Items requestBody)
		{
			var requestUri = "Items?summarizeErrors="+summarizeErrors+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Items>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update or create one or more items
		/// UpdateOrCreateItems Items
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Items array with newly created Item</returns>
		public Items UpdateOrCreateItems(bool summarizeErrors, int unitdp, Items requestBody)
		{
			var requestUri = "Items?summarizeErrors="+summarizeErrors+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Items>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified item
		/// GetItem Items/{ItemID}
		/// </summary>
		/// <param name="ItemID">Unique identifier for an Item</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Items array with specified Item</returns>
		public async Task<Items> GetItemAsync(string ItemID, int unitdp)
		{
			var requestUri = "Items/"+ (ItemID==null? "" : System.Uri.EscapeDataString(ItemID))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Items>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified item
		/// GetItem Items/{ItemID}
		/// </summary>
		/// <param name="ItemID">Unique identifier for an Item</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Items array with specified Item</returns>
		public Items GetItem(string ItemID, int unitdp)
		{
			var requestUri = "Items/"+ (ItemID==null? "" : System.Uri.EscapeDataString(ItemID))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Items>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a specified item
		/// UpdateItem Items/{ItemID}
		/// </summary>
		/// <param name="ItemID">Unique identifier for an Item</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Items array with updated Item</returns>
		public async Task<Items> UpdateItemAsync(string ItemID, int unitdp, Items requestBody)
		{
			var requestUri = "Items/"+ (ItemID==null? "" : System.Uri.EscapeDataString(ItemID))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Items>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a specified item
		/// UpdateItem Items/{ItemID}
		/// </summary>
		/// <param name="ItemID">Unique identifier for an Item</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Items array with updated Item</returns>
		public Items UpdateItem(string ItemID, int unitdp, Items requestBody)
		{
			var requestUri = "Items/"+ (ItemID==null? "" : System.Uri.EscapeDataString(ItemID))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Items>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to delete a specified item
		/// DeleteItem Items/{ItemID}
		/// </summary>
		/// <param name="ItemID">Unique identifier for an Item</param>
		public async Task DeleteItemAsync(string ItemID)
		{
			var requestUri = "Items/"+ (ItemID==null? "" : System.Uri.EscapeDataString(ItemID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to delete a specified item
		/// DeleteItem Items/{ItemID}
		/// </summary>
		/// <param name="ItemID">Unique identifier for an Item</param>
		public void DeleteItem(string ItemID)
		{
			var requestUri = "Items/"+ (ItemID==null? "" : System.Uri.EscapeDataString(ItemID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve history for items
		/// GetItemHistory Items/{ItemID}/History
		/// </summary>
		/// <param name="ItemID">Unique identifier for an Item</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public async Task<HistoryRecords> GetItemHistoryAsync(string ItemID)
		{
			var requestUri = "Items/"+ (ItemID==null? "" : System.Uri.EscapeDataString(ItemID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve history for items
		/// GetItemHistory Items/{ItemID}/History
		/// </summary>
		/// <param name="ItemID">Unique identifier for an Item</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public HistoryRecords GetItemHistory(string ItemID)
		{
			var requestUri = "Items/"+ (ItemID==null? "" : System.Uri.EscapeDataString(ItemID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a history record for items
		/// CreateItemHistory Items/{ItemID}/History
		/// </summary>
		/// <param name="ItemID">Unique identifier for an Item</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public async Task<HistoryRecords> CreateItemHistoryAsync(string ItemID, HistoryRecords requestBody)
		{
			var requestUri = "Items/"+ (ItemID==null? "" : System.Uri.EscapeDataString(ItemID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a history record for items
		/// CreateItemHistory Items/{ItemID}/History
		/// </summary>
		/// <param name="ItemID">Unique identifier for an Item</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public HistoryRecords CreateItemHistory(string ItemID, HistoryRecords requestBody)
		{
			var requestUri = "Items/"+ (ItemID==null? "" : System.Uri.EscapeDataString(ItemID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve any journals.
		/// GetJournals Journals
		/// </summary>
		/// <param name="offset">Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned</param>
		/// <param name="paymentsOnly">Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default.</param>
		/// <returns>Success - return response of type Journals array with all Journals</returns>
		public async Task<Journals> GetJournalsAsync(int offset, bool paymentsOnly)
		{
			var requestUri = "Journals?offset="+offset+"&paymentsOnly="+paymentsOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Journals>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve any journals.
		/// GetJournals Journals
		/// </summary>
		/// <param name="offset">Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned</param>
		/// <param name="paymentsOnly">Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default.</param>
		/// <returns>Success - return response of type Journals array with all Journals</returns>
		public Journals GetJournals(int offset, bool paymentsOnly)
		{
			var requestUri = "Journals?offset="+offset+"&paymentsOnly="+paymentsOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Journals>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified journals.
		/// GetJournal Journals/{JournalID}
		/// </summary>
		/// <param name="JournalID">Unique identifier for a Journal</param>
		/// <returns>Success - return response of type Journals array with specified Journal</returns>
		public async Task<Journals> GetJournalAsync(string JournalID)
		{
			var requestUri = "Journals/"+ (JournalID==null? "" : System.Uri.EscapeDataString(JournalID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Journals>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified journals.
		/// GetJournal Journals/{JournalID}
		/// </summary>
		/// <param name="JournalID">Unique identifier for a Journal</param>
		/// <returns>Success - return response of type Journals array with specified Journal</returns>
		public Journals GetJournal(string JournalID)
		{
			var requestUri = "Journals/"+ (JournalID==null? "" : System.Uri.EscapeDataString(JournalID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Journals>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve linked transactions (billable expenses)
		/// GetLinkedTransactions LinkedTransactions
		/// </summary>
		/// <param name="page">Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page=1.</param>
		/// <param name="LinkedTransactionID">The Xero identifier for an Linked Transaction</param>
		/// <param name="SourceTransactionID">Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice</param>
		/// <param name="ContactID">Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer.</param>
		/// <param name="Status">Filter by the combination of ContactID and Status. Get  the linked transactions associaed to a  customer and with a status</param>
		/// <param name="TargetTransactionID">Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice</param>
		/// <returns>Success - return response of type LinkedTransactions array with all LinkedTransaction</returns>
		public async Task<LinkedTransactions> GetLinkedTransactionsAsync(int page, string LinkedTransactionID, string SourceTransactionID, string ContactID, string Status, string TargetTransactionID)
		{
			var requestUri = "LinkedTransactions?page="+page+"&LinkedTransactionID=" + (LinkedTransactionID==null? "" : System.Uri.EscapeDataString(LinkedTransactionID))+"&SourceTransactionID=" + (SourceTransactionID==null? "" : System.Uri.EscapeDataString(SourceTransactionID))+"&ContactID=" + (ContactID==null? "" : System.Uri.EscapeDataString(ContactID))+"&Status=" + (Status==null? "" : System.Uri.EscapeDataString(Status))+"&TargetTransactionID=" + (TargetTransactionID==null? "" : System.Uri.EscapeDataString(TargetTransactionID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LinkedTransactions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve linked transactions (billable expenses)
		/// GetLinkedTransactions LinkedTransactions
		/// </summary>
		/// <param name="page">Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page=1.</param>
		/// <param name="LinkedTransactionID">The Xero identifier for an Linked Transaction</param>
		/// <param name="SourceTransactionID">Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice</param>
		/// <param name="ContactID">Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer.</param>
		/// <param name="Status">Filter by the combination of ContactID and Status. Get  the linked transactions associaed to a  customer and with a status</param>
		/// <param name="TargetTransactionID">Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice</param>
		/// <returns>Success - return response of type LinkedTransactions array with all LinkedTransaction</returns>
		public LinkedTransactions GetLinkedTransactions(int page, string LinkedTransactionID, string SourceTransactionID, string ContactID, string Status, string TargetTransactionID)
		{
			var requestUri = "LinkedTransactions?page="+page+"&LinkedTransactionID=" + (LinkedTransactionID==null? "" : System.Uri.EscapeDataString(LinkedTransactionID))+"&SourceTransactionID=" + (SourceTransactionID==null? "" : System.Uri.EscapeDataString(SourceTransactionID))+"&ContactID=" + (ContactID==null? "" : System.Uri.EscapeDataString(ContactID))+"&Status=" + (Status==null? "" : System.Uri.EscapeDataString(Status))+"&TargetTransactionID=" + (TargetTransactionID==null? "" : System.Uri.EscapeDataString(TargetTransactionID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LinkedTransactions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create linked transactions (billable expenses)
		/// CreateLinkedTransaction LinkedTransactions
		/// </summary>
		/// <param name="requestBody">LinkedTransaction object in body of request</param>
		/// <returns>Success - return response of type LinkedTransactions array with newly created LinkedTransaction</returns>
		public async Task<LinkedTransactions> CreateLinkedTransactionAsync(LinkedTransaction requestBody)
		{
			var requestUri = "LinkedTransactions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LinkedTransactions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create linked transactions (billable expenses)
		/// CreateLinkedTransaction LinkedTransactions
		/// </summary>
		/// <param name="requestBody">LinkedTransaction object in body of request</param>
		/// <returns>Success - return response of type LinkedTransactions array with newly created LinkedTransaction</returns>
		public LinkedTransactions CreateLinkedTransaction(LinkedTransaction requestBody)
		{
			var requestUri = "LinkedTransactions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LinkedTransactions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified linked transactions (billable expenses)
		/// GetLinkedTransaction LinkedTransactions/{LinkedTransactionID}
		/// </summary>
		/// <param name="LinkedTransactionID">Unique identifier for a LinkedTransaction</param>
		/// <returns>Success - return response of type LinkedTransactions array with a specified LinkedTransaction</returns>
		public async Task<LinkedTransactions> GetLinkedTransactionAsync(string LinkedTransactionID)
		{
			var requestUri = "LinkedTransactions/"+ (LinkedTransactionID==null? "" : System.Uri.EscapeDataString(LinkedTransactionID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LinkedTransactions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified linked transactions (billable expenses)
		/// GetLinkedTransaction LinkedTransactions/{LinkedTransactionID}
		/// </summary>
		/// <param name="LinkedTransactionID">Unique identifier for a LinkedTransaction</param>
		/// <returns>Success - return response of type LinkedTransactions array with a specified LinkedTransaction</returns>
		public LinkedTransactions GetLinkedTransaction(string LinkedTransactionID)
		{
			var requestUri = "LinkedTransactions/"+ (LinkedTransactionID==null? "" : System.Uri.EscapeDataString(LinkedTransactionID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LinkedTransactions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a specified linked transactions (billable expenses)
		/// UpdateLinkedTransaction LinkedTransactions/{LinkedTransactionID}
		/// </summary>
		/// <param name="LinkedTransactionID">Unique identifier for a LinkedTransaction</param>
		/// <returns>Success - return response of type LinkedTransactions array with updated LinkedTransaction</returns>
		public async Task<LinkedTransactions> UpdateLinkedTransactionAsync(string LinkedTransactionID, LinkedTransactions requestBody)
		{
			var requestUri = "LinkedTransactions/"+ (LinkedTransactionID==null? "" : System.Uri.EscapeDataString(LinkedTransactionID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LinkedTransactions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a specified linked transactions (billable expenses)
		/// UpdateLinkedTransaction LinkedTransactions/{LinkedTransactionID}
		/// </summary>
		/// <param name="LinkedTransactionID">Unique identifier for a LinkedTransaction</param>
		/// <returns>Success - return response of type LinkedTransactions array with updated LinkedTransaction</returns>
		public LinkedTransactions UpdateLinkedTransaction(string LinkedTransactionID, LinkedTransactions requestBody)
		{
			var requestUri = "LinkedTransactions/"+ (LinkedTransactionID==null? "" : System.Uri.EscapeDataString(LinkedTransactionID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LinkedTransactions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to delete a specified linked transactions (billable expenses)
		/// DeleteLinkedTransaction LinkedTransactions/{LinkedTransactionID}
		/// </summary>
		/// <param name="LinkedTransactionID">Unique identifier for a LinkedTransaction</param>
		public async Task DeleteLinkedTransactionAsync(string LinkedTransactionID)
		{
			var requestUri = "LinkedTransactions/"+ (LinkedTransactionID==null? "" : System.Uri.EscapeDataString(LinkedTransactionID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to delete a specified linked transactions (billable expenses)
		/// DeleteLinkedTransaction LinkedTransactions/{LinkedTransactionID}
		/// </summary>
		/// <param name="LinkedTransactionID">Unique identifier for a LinkedTransaction</param>
		public void DeleteLinkedTransaction(string LinkedTransactionID)
		{
			var requestUri = "LinkedTransactions/"+ (LinkedTransactionID==null? "" : System.Uri.EscapeDataString(LinkedTransactionID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve any manual journals
		/// GetManualJournals ManualJournals
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 � Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment</param>
		/// <returns>Success - return response of type ManualJournals array with a all ManualJournals</returns>
		public async Task<ManualJournals> GetManualJournalsAsync(string @where, string order, int page)
		{
			var requestUri = "ManualJournals?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManualJournals>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve any manual journals
		/// GetManualJournals ManualJournals
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 � Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment</param>
		/// <returns>Success - return response of type ManualJournals array with a all ManualJournals</returns>
		public ManualJournals GetManualJournals(string @where, string order, int page)
		{
			var requestUri = "ManualJournals?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManualJournals>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create one or more manual journals
		/// CreateManualJournals ManualJournals
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">ManualJournals array with ManualJournal object in body of request</param>
		/// <returns>Success - return response of type ManualJournals array with newly created ManualJournal</returns>
		public async Task<ManualJournals> CreateManualJournalsAsync(bool summarizeErrors, ManualJournals requestBody)
		{
			var requestUri = "ManualJournals?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManualJournals>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create one or more manual journals
		/// CreateManualJournals ManualJournals
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">ManualJournals array with ManualJournal object in body of request</param>
		/// <returns>Success - return response of type ManualJournals array with newly created ManualJournal</returns>
		public ManualJournals CreateManualJournals(bool summarizeErrors, ManualJournals requestBody)
		{
			var requestUri = "ManualJournals?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManualJournals>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a single manual journal
		/// UpdateOrCreateManualJournals ManualJournals
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">ManualJournals array with ManualJournal object in body of request</param>
		/// <returns>Success - return response of type ManualJournals array with newly created ManualJournal</returns>
		public async Task<ManualJournals> UpdateOrCreateManualJournalsAsync(bool summarizeErrors, ManualJournals requestBody)
		{
			var requestUri = "ManualJournals?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManualJournals>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a single manual journal
		/// UpdateOrCreateManualJournals ManualJournals
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">ManualJournals array with ManualJournal object in body of request</param>
		/// <returns>Success - return response of type ManualJournals array with newly created ManualJournal</returns>
		public ManualJournals UpdateOrCreateManualJournals(bool summarizeErrors, ManualJournals requestBody)
		{
			var requestUri = "ManualJournals?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManualJournals>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified manual journals
		/// GetManualJournal ManualJournals/{ManualJournalID}
		/// </summary>
		/// <param name="ManualJournalID">Unique identifier for a ManualJournal</param>
		/// <returns>Success - return response of type ManualJournals array with a specified ManualJournals</returns>
		public async Task<ManualJournals> GetManualJournalAsync(string ManualJournalID)
		{
			var requestUri = "ManualJournals/"+ (ManualJournalID==null? "" : System.Uri.EscapeDataString(ManualJournalID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManualJournals>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified manual journals
		/// GetManualJournal ManualJournals/{ManualJournalID}
		/// </summary>
		/// <param name="ManualJournalID">Unique identifier for a ManualJournal</param>
		/// <returns>Success - return response of type ManualJournals array with a specified ManualJournals</returns>
		public ManualJournals GetManualJournal(string ManualJournalID)
		{
			var requestUri = "ManualJournals/"+ (ManualJournalID==null? "" : System.Uri.EscapeDataString(ManualJournalID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManualJournals>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a specified manual journal
		/// UpdateManualJournal ManualJournals/{ManualJournalID}
		/// </summary>
		/// <param name="ManualJournalID">Unique identifier for a ManualJournal</param>
		/// <returns>Success - return response of type ManualJournals array with an updated ManualJournal</returns>
		public async Task<ManualJournals> UpdateManualJournalAsync(string ManualJournalID, ManualJournals requestBody)
		{
			var requestUri = "ManualJournals/"+ (ManualJournalID==null? "" : System.Uri.EscapeDataString(ManualJournalID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManualJournals>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a specified manual journal
		/// UpdateManualJournal ManualJournals/{ManualJournalID}
		/// </summary>
		/// <param name="ManualJournalID">Unique identifier for a ManualJournal</param>
		/// <returns>Success - return response of type ManualJournals array with an updated ManualJournal</returns>
		public ManualJournals UpdateManualJournal(string ManualJournalID, ManualJournals requestBody)
		{
			var requestUri = "ManualJournals/"+ (ManualJournalID==null? "" : System.Uri.EscapeDataString(ManualJournalID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManualJournals>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachment for manual journals
		/// GetManualJournalAttachments ManualJournals/{ManualJournalID}/Attachments
		/// </summary>
		/// <param name="ManualJournalID">Unique identifier for a ManualJournal</param>
		/// <returns>Success - return response of type Attachments array with all Attachments for a ManualJournals</returns>
		public async Task<Attachments> GetManualJournalAttachmentsAsync(string ManualJournalID)
		{
			var requestUri = "ManualJournals/"+ (ManualJournalID==null? "" : System.Uri.EscapeDataString(ManualJournalID))+"/Attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachment for manual journals
		/// GetManualJournalAttachments ManualJournals/{ManualJournalID}/Attachments
		/// </summary>
		/// <param name="ManualJournalID">Unique identifier for a ManualJournal</param>
		/// <returns>Success - return response of type Attachments array with all Attachments for a ManualJournals</returns>
		public Attachments GetManualJournalAttachments(string ManualJournalID)
		{
			var requestUri = "ManualJournals/"+ (ManualJournalID==null? "" : System.Uri.EscapeDataString(ManualJournalID))+"/Attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve specified Attachment on ManualJournals
		/// GetManualJournalAttachmentById ManualJournals/{ManualJournalID}/Attachments/{AttachmentID}
		/// </summary>
		/// <param name="ManualJournalID">Unique identifier for a ManualJournal</param>
		/// <param name="AttachmentID">Unique identifier for a Attachment</param>
		/// <returns>Success - return response of attachment for Manual Journal as binary data</returns>
		public async Task GetManualJournalAttachmentByIdAsync(string ManualJournalID, string AttachmentID)
		{
			var requestUri = "ManualJournals/"+ (ManualJournalID==null? "" : System.Uri.EscapeDataString(ManualJournalID))+"/Attachments/"+ (AttachmentID==null? "" : System.Uri.EscapeDataString(AttachmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve specified Attachment on ManualJournals
		/// GetManualJournalAttachmentById ManualJournals/{ManualJournalID}/Attachments/{AttachmentID}
		/// </summary>
		/// <param name="ManualJournalID">Unique identifier for a ManualJournal</param>
		/// <param name="AttachmentID">Unique identifier for a Attachment</param>
		/// <returns>Success - return response of attachment for Manual Journal as binary data</returns>
		public void GetManualJournalAttachmentById(string ManualJournalID, string AttachmentID)
		{
			var requestUri = "ManualJournals/"+ (ManualJournalID==null? "" : System.Uri.EscapeDataString(ManualJournalID))+"/Attachments/"+ (AttachmentID==null? "" : System.Uri.EscapeDataString(AttachmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve specified Attachment on ManualJournal by file name
		/// GetManualJournalAttachmentByFileName ManualJournals/{ManualJournalID}/Attachments/{FileName}
		/// </summary>
		/// <param name="ManualJournalID">Unique identifier for a ManualJournal</param>
		/// <param name="FileName">The name of the file being attached to a ManualJournal</param>
		/// <returns>Success - return response of attachment for Manual Journal as binary data</returns>
		public async Task GetManualJournalAttachmentByFileNameAsync(string ManualJournalID, string FileName)
		{
			var requestUri = "ManualJournals/"+ (ManualJournalID==null? "" : System.Uri.EscapeDataString(ManualJournalID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve specified Attachment on ManualJournal by file name
		/// GetManualJournalAttachmentByFileName ManualJournals/{ManualJournalID}/Attachments/{FileName}
		/// </summary>
		/// <param name="ManualJournalID">Unique identifier for a ManualJournal</param>
		/// <param name="FileName">The name of the file being attached to a ManualJournal</param>
		/// <returns>Success - return response of attachment for Manual Journal as binary data</returns>
		public void GetManualJournalAttachmentByFileName(string ManualJournalID, string FileName)
		{
			var requestUri = "ManualJournals/"+ (ManualJournalID==null? "" : System.Uri.EscapeDataString(ManualJournalID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Organisation details
		/// GetOrganisations Organisation
		/// </summary>
		/// <returns>Success - return response of type Organisation array with all Organisation</returns>
		public async Task<Organisations> GetOrganisationsAsync()
		{
			var requestUri = "Organisation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Organisations>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Organisation details
		/// GetOrganisations Organisation
		/// </summary>
		/// <returns>Success - return response of type Organisation array with all Organisation</returns>
		public Organisations GetOrganisations()
		{
			var requestUri = "Organisation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Organisations>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you To verify if an organisation is using contruction industry scheme, you can retrieve the CIS settings for the organistaion.
		/// GetOrganisationCISSettings Organisation/{OrganisationID}/CISSettings
		/// </summary>
		/// <param name="OrganisationID">The unique Xero identifier for an organisation</param>
		/// <returns>Success - return response of type Organisation array with specified Organisation</returns>
		public async Task<CISOrgSetting> GetOrganisationCISSettingsAsync(string OrganisationID)
		{
			var requestUri = "Organisation/"+ (OrganisationID==null? "" : System.Uri.EscapeDataString(OrganisationID))+"/CISSettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CISOrgSetting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you To verify if an organisation is using contruction industry scheme, you can retrieve the CIS settings for the organistaion.
		/// GetOrganisationCISSettings Organisation/{OrganisationID}/CISSettings
		/// </summary>
		/// <param name="OrganisationID">The unique Xero identifier for an organisation</param>
		/// <returns>Success - return response of type Organisation array with specified Organisation</returns>
		public CISOrgSetting GetOrganisationCISSettings(string OrganisationID)
		{
			var requestUri = "Organisation/"+ (OrganisationID==null? "" : System.Uri.EscapeDataString(OrganisationID))+"/CISSettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CISOrgSetting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve overpayments
		/// GetOverpayments Overpayments
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 � Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Overpayments array with all Overpayments</returns>
		public async Task<Overpayments> GetOverpaymentsAsync(string @where, string order, int page, int unitdp)
		{
			var requestUri = "Overpayments?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&page="+page+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Overpayments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve overpayments
		/// GetOverpayments Overpayments
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 � Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Overpayments array with all Overpayments</returns>
		public Overpayments GetOverpayments(string @where, string order, int page, int unitdp)
		{
			var requestUri = "Overpayments?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&page="+page+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Overpayments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified overpayments
		/// GetOverpayment Overpayments/{OverpaymentID}
		/// </summary>
		/// <param name="OverpaymentID">Unique identifier for a Overpayment</param>
		/// <returns>Success - return response of type Overpayments array with specified Overpayments</returns>
		public async Task<Overpayments> GetOverpaymentAsync(string OverpaymentID)
		{
			var requestUri = "Overpayments/"+ (OverpaymentID==null? "" : System.Uri.EscapeDataString(OverpaymentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Overpayments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified overpayments
		/// GetOverpayment Overpayments/{OverpaymentID}
		/// </summary>
		/// <param name="OverpaymentID">Unique identifier for a Overpayment</param>
		/// <returns>Success - return response of type Overpayments array with specified Overpayments</returns>
		public Overpayments GetOverpayment(string OverpaymentID)
		{
			var requestUri = "Overpayments/"+ (OverpaymentID==null? "" : System.Uri.EscapeDataString(OverpaymentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Overpayments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a single allocation for an overpayment
		/// CreateOverpaymentAllocations Overpayments/{OverpaymentID}/Allocations
		/// </summary>
		/// <param name="OverpaymentID">Unique identifier for a Overpayment</param>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">Allocations array with Allocation object in body of request</param>
		/// <returns>Success - return response of type Allocations array with all Allocation for Overpayments</returns>
		public async Task<Allocations> CreateOverpaymentAllocationsAsync(string OverpaymentID, bool summarizeErrors, Allocations requestBody)
		{
			var requestUri = "Overpayments/"+ (OverpaymentID==null? "" : System.Uri.EscapeDataString(OverpaymentID))+"/Allocations&summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Allocations>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a single allocation for an overpayment
		/// CreateOverpaymentAllocations Overpayments/{OverpaymentID}/Allocations
		/// </summary>
		/// <param name="OverpaymentID">Unique identifier for a Overpayment</param>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">Allocations array with Allocation object in body of request</param>
		/// <returns>Success - return response of type Allocations array with all Allocation for Overpayments</returns>
		public Allocations CreateOverpaymentAllocations(string OverpaymentID, bool summarizeErrors, Allocations requestBody)
		{
			var requestUri = "Overpayments/"+ (OverpaymentID==null? "" : System.Uri.EscapeDataString(OverpaymentID))+"/Allocations&summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Allocations>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an Overpayment
		/// GetOverpaymentHistory Overpayments/{OverpaymentID}/History
		/// </summary>
		/// <param name="OverpaymentID">Unique identifier for a Overpayment</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public async Task<HistoryRecords> GetOverpaymentHistoryAsync(string OverpaymentID)
		{
			var requestUri = "Overpayments/"+ (OverpaymentID==null? "" : System.Uri.EscapeDataString(OverpaymentID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an Overpayment
		/// GetOverpaymentHistory Overpayments/{OverpaymentID}/History
		/// </summary>
		/// <param name="OverpaymentID">Unique identifier for a Overpayment</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public HistoryRecords GetOverpaymentHistory(string OverpaymentID)
		{
			var requestUri = "Overpayments/"+ (OverpaymentID==null? "" : System.Uri.EscapeDataString(OverpaymentID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create history records of an Overpayment
		/// CreateOverpaymentHistory Overpayments/{OverpaymentID}/History
		/// </summary>
		/// <param name="OverpaymentID">Unique identifier for a Overpayment</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public async Task<HistoryRecords> CreateOverpaymentHistoryAsync(string OverpaymentID, HistoryRecords requestBody)
		{
			var requestUri = "Overpayments/"+ (OverpaymentID==null? "" : System.Uri.EscapeDataString(OverpaymentID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create history records of an Overpayment
		/// CreateOverpaymentHistory Overpayments/{OverpaymentID}/History
		/// </summary>
		/// <param name="OverpaymentID">Unique identifier for a Overpayment</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public HistoryRecords CreateOverpaymentHistory(string OverpaymentID, HistoryRecords requestBody)
		{
			var requestUri = "Overpayments/"+ (OverpaymentID==null? "" : System.Uri.EscapeDataString(OverpaymentID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve payments for invoices and credit notes
		/// GetPayments Payments
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">Up to 100 payments will be returned in a single API call</param>
		/// <returns>Success - return response of type Payments array for all Payments</returns>
		public async Task<Payments> GetPaymentsAsync(string @where, string order, int page)
		{
			var requestUri = "Payments?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Payments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve payments for invoices and credit notes
		/// GetPayments Payments
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">Up to 100 payments will be returned in a single API call</param>
		/// <returns>Success - return response of type Payments array for all Payments</returns>
		public Payments GetPayments(string @where, string order, int page)
		{
			var requestUri = "Payments?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Payments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create multiple payments for invoices or credit notes
		/// CreatePayments Payments
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">Payments array with Payment object in body of request</param>
		/// <returns>Success - return response of type Payments array for newly created Payment</returns>
		public async Task<Payments> CreatePaymentsAsync(bool summarizeErrors, Payments requestBody)
		{
			var requestUri = "Payments?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Payments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create multiple payments for invoices or credit notes
		/// CreatePayments Payments
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">Payments array with Payment object in body of request</param>
		/// <returns>Success - return response of type Payments array for newly created Payment</returns>
		public Payments CreatePayments(bool summarizeErrors, Payments requestBody)
		{
			var requestUri = "Payments?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Payments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a single payment for invoices or credit notes
		/// CreatePayment Payments
		/// </summary>
		/// <param name="requestBody">Request body with a single Payment object</param>
		/// <returns>Success - return response of type Payments array for newly created Payment</returns>
		public async Task<Payments> CreatePaymentAsync(Payment requestBody)
		{
			var requestUri = "Payments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Payments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a single payment for invoices or credit notes
		/// CreatePayment Payments
		/// </summary>
		/// <param name="requestBody">Request body with a single Payment object</param>
		/// <returns>Success - return response of type Payments array for newly created Payment</returns>
		public Payments CreatePayment(Payment requestBody)
		{
			var requestUri = "Payments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Payments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified payment for invoices and credit notes
		/// GetPayment Payments/{PaymentID}
		/// </summary>
		/// <param name="PaymentID">Unique identifier for a Payment</param>
		/// <returns>Success - return response of type Payments array for specified Payment</returns>
		public async Task<Payments> GetPaymentAsync(string PaymentID)
		{
			var requestUri = "Payments/"+ (PaymentID==null? "" : System.Uri.EscapeDataString(PaymentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Payments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified payment for invoices and credit notes
		/// GetPayment Payments/{PaymentID}
		/// </summary>
		/// <param name="PaymentID">Unique identifier for a Payment</param>
		/// <returns>Success - return response of type Payments array for specified Payment</returns>
		public Payments GetPayment(string PaymentID)
		{
			var requestUri = "Payments/"+ (PaymentID==null? "" : System.Uri.EscapeDataString(PaymentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Payments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a specified payment for invoices and credit notes
		/// DeletePayment Payments/{PaymentID}
		/// </summary>
		/// <param name="PaymentID">Unique identifier for a Payment</param>
		/// <returns>Success - return response of type Payments array for updated Payment</returns>
		public async Task<Payments> DeletePaymentAsync(string PaymentID, PaymentDelete requestBody)
		{
			var requestUri = "Payments/"+ (PaymentID==null? "" : System.Uri.EscapeDataString(PaymentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Payments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a specified payment for invoices and credit notes
		/// DeletePayment Payments/{PaymentID}
		/// </summary>
		/// <param name="PaymentID">Unique identifier for a Payment</param>
		/// <returns>Success - return response of type Payments array for updated Payment</returns>
		public Payments DeletePayment(string PaymentID, PaymentDelete requestBody)
		{
			var requestUri = "Payments/"+ (PaymentID==null? "" : System.Uri.EscapeDataString(PaymentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Payments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve history records of a payment
		/// GetPaymentHistory Payments/{PaymentID}/History
		/// </summary>
		/// <param name="PaymentID">Unique identifier for a Payment</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public async Task<HistoryRecords> GetPaymentHistoryAsync(string PaymentID)
		{
			var requestUri = "Payments/"+ (PaymentID==null? "" : System.Uri.EscapeDataString(PaymentID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve history records of a payment
		/// GetPaymentHistory Payments/{PaymentID}/History
		/// </summary>
		/// <param name="PaymentID">Unique identifier for a Payment</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public HistoryRecords GetPaymentHistory(string PaymentID)
		{
			var requestUri = "Payments/"+ (PaymentID==null? "" : System.Uri.EscapeDataString(PaymentID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a history record for a payment
		/// CreatePaymentHistory Payments/{PaymentID}/History
		/// </summary>
		/// <param name="PaymentID">Unique identifier for a Payment</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public async Task<HistoryRecords> CreatePaymentHistoryAsync(string PaymentID, HistoryRecords requestBody)
		{
			var requestUri = "Payments/"+ (PaymentID==null? "" : System.Uri.EscapeDataString(PaymentID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a history record for a payment
		/// CreatePaymentHistory Payments/{PaymentID}/History
		/// </summary>
		/// <param name="PaymentID">Unique identifier for a Payment</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public HistoryRecords CreatePaymentHistory(string PaymentID, HistoryRecords requestBody)
		{
			var requestUri = "Payments/"+ (PaymentID==null? "" : System.Uri.EscapeDataString(PaymentID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve payment services
		/// GetPaymentServices PaymentServices
		/// </summary>
		/// <returns>Success - return response of type PaymentServices array for all PaymentService</returns>
		public async Task<PaymentServices> GetPaymentServicesAsync()
		{
			var requestUri = "PaymentServices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaymentServices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve payment services
		/// GetPaymentServices PaymentServices
		/// </summary>
		/// <returns>Success - return response of type PaymentServices array for all PaymentService</returns>
		public PaymentServices GetPaymentServices()
		{
			var requestUri = "PaymentServices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaymentServices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create payment services
		/// CreatePaymentService PaymentServices
		/// </summary>
		/// <param name="requestBody">PaymentServices array with PaymentService object in body of request</param>
		/// <returns>Success - return response of type PaymentServices array for newly created PaymentService</returns>
		public async Task<PaymentServices> CreatePaymentServiceAsync(PaymentServices requestBody)
		{
			var requestUri = "PaymentServices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaymentServices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create payment services
		/// CreatePaymentService PaymentServices
		/// </summary>
		/// <param name="requestBody">PaymentServices array with PaymentService object in body of request</param>
		/// <returns>Success - return response of type PaymentServices array for newly created PaymentService</returns>
		public PaymentServices CreatePaymentService(PaymentServices requestBody)
		{
			var requestUri = "PaymentServices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaymentServices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve prepayments
		/// GetPrepayments Prepayments
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 � Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Prepayments array for all Prepayment</returns>
		public async Task<Prepayments> GetPrepaymentsAsync(string @where, string order, int page, int unitdp)
		{
			var requestUri = "Prepayments?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&page="+page+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Prepayments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve prepayments
		/// GetPrepayments Prepayments
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">e.g. page=1 � Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Prepayments array for all Prepayment</returns>
		public Prepayments GetPrepayments(string @where, string order, int page, int unitdp)
		{
			var requestUri = "Prepayments?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&page="+page+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Prepayments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified prepayments
		/// GetPrepayment Prepayments/{PrepaymentID}
		/// </summary>
		/// <param name="PrepaymentID">Unique identifier for a PrePayment</param>
		/// <returns>Success - return response of type Prepayments array for a specified Prepayment</returns>
		public async Task<Prepayments> GetPrepaymentAsync(string PrepaymentID)
		{
			var requestUri = "Prepayments/"+ (PrepaymentID==null? "" : System.Uri.EscapeDataString(PrepaymentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Prepayments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified prepayments
		/// GetPrepayment Prepayments/{PrepaymentID}
		/// </summary>
		/// <param name="PrepaymentID">Unique identifier for a PrePayment</param>
		/// <returns>Success - return response of type Prepayments array for a specified Prepayment</returns>
		public Prepayments GetPrepayment(string PrepaymentID)
		{
			var requestUri = "Prepayments/"+ (PrepaymentID==null? "" : System.Uri.EscapeDataString(PrepaymentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Prepayments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create an Allocation for prepayments
		/// CreatePrepaymentAllocations Prepayments/{PrepaymentID}/Allocations
		/// </summary>
		/// <param name="PrepaymentID">Unique identifier for Prepayment</param>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">Allocations with an array of Allocation object in body of request</param>
		/// <returns>Success - return response of type Allocations array of Allocation for all Prepayment</returns>
		public async Task<Allocations> CreatePrepaymentAllocationsAsync(string PrepaymentID, bool summarizeErrors, Allocations requestBody)
		{
			var requestUri = "Prepayments/"+ (PrepaymentID==null? "" : System.Uri.EscapeDataString(PrepaymentID))+"/Allocations&summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Allocations>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create an Allocation for prepayments
		/// CreatePrepaymentAllocations Prepayments/{PrepaymentID}/Allocations
		/// </summary>
		/// <param name="PrepaymentID">Unique identifier for Prepayment</param>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">Allocations with an array of Allocation object in body of request</param>
		/// <returns>Success - return response of type Allocations array of Allocation for all Prepayment</returns>
		public Allocations CreatePrepaymentAllocations(string PrepaymentID, bool summarizeErrors, Allocations requestBody)
		{
			var requestUri = "Prepayments/"+ (PrepaymentID==null? "" : System.Uri.EscapeDataString(PrepaymentID))+"/Allocations&summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Allocations>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an Prepayment
		/// GetPrepaymentHistory Prepayments/{PrepaymentID}/History
		/// </summary>
		/// <param name="PrepaymentID">Unique identifier for a PrePayment</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public async Task<HistoryRecords> GetPrepaymentHistoryAsync(string PrepaymentID)
		{
			var requestUri = "Prepayments/"+ (PrepaymentID==null? "" : System.Uri.EscapeDataString(PrepaymentID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an Prepayment
		/// GetPrepaymentHistory Prepayments/{PrepaymentID}/History
		/// </summary>
		/// <param name="PrepaymentID">Unique identifier for a PrePayment</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public HistoryRecords GetPrepaymentHistory(string PrepaymentID)
		{
			var requestUri = "Prepayments/"+ (PrepaymentID==null? "" : System.Uri.EscapeDataString(PrepaymentID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a history record for an Prepayment
		/// CreatePrepaymentHistory Prepayments/{PrepaymentID}/History
		/// </summary>
		/// <param name="PrepaymentID">Unique identifier for a PrePayment</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public async Task<HistoryRecords> CreatePrepaymentHistoryAsync(string PrepaymentID, HistoryRecords requestBody)
		{
			var requestUri = "Prepayments/"+ (PrepaymentID==null? "" : System.Uri.EscapeDataString(PrepaymentID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create a history record for an Prepayment
		/// CreatePrepaymentHistory Prepayments/{PrepaymentID}/History
		/// </summary>
		/// <param name="PrepaymentID">Unique identifier for a PrePayment</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public HistoryRecords CreatePrepaymentHistory(string PrepaymentID, HistoryRecords requestBody)
		{
			var requestUri = "Prepayments/"+ (PrepaymentID==null? "" : System.Uri.EscapeDataString(PrepaymentID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve purchase orders
		/// GetPurchaseOrders PurchaseOrders
		/// </summary>
		/// <param name="Status">Filter by purchase order status</param>
		/// <param name="DateFrom">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom=2015-12-01&DateTo=2015-12-31</param>
		/// <param name="DateTo">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom=2015-12-01&DateTo=2015-12-31</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">To specify a page, append the page parameter to the URL e.g. ?page=1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page=2 and continuing this process until no more results are returned.</param>
		/// <returns>Success - return response of type PurchaseOrder array of all PurchaseOrder</returns>
		public async Task<PurchaseOrders> GetPurchaseOrdersAsync(PurchaseOrderStatus Status, string DateFrom, string DateTo, string order, int page)
		{
			var requestUri = "PurchaseOrders?Status=" + Status+"&DateFrom=" + (DateFrom==null? "" : System.Uri.EscapeDataString(DateFrom))+"&DateTo=" + (DateTo==null? "" : System.Uri.EscapeDataString(DateTo))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PurchaseOrders>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve purchase orders
		/// GetPurchaseOrders PurchaseOrders
		/// </summary>
		/// <param name="Status">Filter by purchase order status</param>
		/// <param name="DateFrom">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom=2015-12-01&DateTo=2015-12-31</param>
		/// <param name="DateTo">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom=2015-12-01&DateTo=2015-12-31</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="page">To specify a page, append the page parameter to the URL e.g. ?page=1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page=2 and continuing this process until no more results are returned.</param>
		/// <returns>Success - return response of type PurchaseOrder array of all PurchaseOrder</returns>
		public PurchaseOrders GetPurchaseOrders(PurchaseOrderStatus Status, string DateFrom, string DateTo, string order, int page)
		{
			var requestUri = "PurchaseOrders?Status=" + Status+"&DateFrom=" + (DateFrom==null? "" : System.Uri.EscapeDataString(DateFrom))+"&DateTo=" + (DateTo==null? "" : System.Uri.EscapeDataString(DateTo))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PurchaseOrders>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create one or more purchase orders
		/// CreatePurchaseOrders PurchaseOrders
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">PurchaseOrders with an array of PurchaseOrder object in body of request</param>
		/// <returns>Success - return response of type PurchaseOrder array for specified PurchaseOrder</returns>
		public async Task<PurchaseOrders> CreatePurchaseOrdersAsync(bool summarizeErrors, PurchaseOrders requestBody)
		{
			var requestUri = "PurchaseOrders?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PurchaseOrders>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create one or more purchase orders
		/// CreatePurchaseOrders PurchaseOrders
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">PurchaseOrders with an array of PurchaseOrder object in body of request</param>
		/// <returns>Success - return response of type PurchaseOrder array for specified PurchaseOrder</returns>
		public PurchaseOrders CreatePurchaseOrders(bool summarizeErrors, PurchaseOrders requestBody)
		{
			var requestUri = "PurchaseOrders?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PurchaseOrders>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update or create one or more purchase orders
		/// UpdateOrCreatePurchaseOrders PurchaseOrders
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <returns>Success - return response of type PurchaseOrder array for specified PurchaseOrder</returns>
		public async Task<PurchaseOrders> UpdateOrCreatePurchaseOrdersAsync(bool summarizeErrors, PurchaseOrders requestBody)
		{
			var requestUri = "PurchaseOrders?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PurchaseOrders>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update or create one or more purchase orders
		/// UpdateOrCreatePurchaseOrders PurchaseOrders
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <returns>Success - return response of type PurchaseOrder array for specified PurchaseOrder</returns>
		public PurchaseOrders UpdateOrCreatePurchaseOrders(bool summarizeErrors, PurchaseOrders requestBody)
		{
			var requestUri = "PurchaseOrders?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PurchaseOrders>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve purchase orders as PDF files
		/// GetPurchaseOrderAsPdf PurchaseOrders/{PurchaseOrderID}/pdf
		/// </summary>
		/// <param name="PurchaseOrderID">Unique identifier for an Purchase Order</param>
		/// <returns>Success - return response of byte array pdf version of specified Purchase Orders</returns>
		public async Task GetPurchaseOrderAsPdfAsync(string PurchaseOrderID)
		{
			var requestUri = "PurchaseOrders/"+ (PurchaseOrderID==null? "" : System.Uri.EscapeDataString(PurchaseOrderID))+"/pdf";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve purchase orders as PDF files
		/// GetPurchaseOrderAsPdf PurchaseOrders/{PurchaseOrderID}/pdf
		/// </summary>
		/// <param name="PurchaseOrderID">Unique identifier for an Purchase Order</param>
		/// <returns>Success - return response of byte array pdf version of specified Purchase Orders</returns>
		public void GetPurchaseOrderAsPdf(string PurchaseOrderID)
		{
			var requestUri = "PurchaseOrders/"+ (PurchaseOrderID==null? "" : System.Uri.EscapeDataString(PurchaseOrderID))+"/pdf";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified purchase orders
		/// GetPurchaseOrder PurchaseOrders/{PurchaseOrderID}
		/// </summary>
		/// <param name="PurchaseOrderID">Unique identifier for a PurchaseOrder</param>
		/// <returns>Success - return response of type PurchaseOrder array for specified PurchaseOrder</returns>
		public async Task<PurchaseOrders> GetPurchaseOrderAsync(string PurchaseOrderID)
		{
			var requestUri = "PurchaseOrders/"+ (PurchaseOrderID==null? "" : System.Uri.EscapeDataString(PurchaseOrderID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PurchaseOrders>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified purchase orders
		/// GetPurchaseOrder PurchaseOrders/{PurchaseOrderID}
		/// </summary>
		/// <param name="PurchaseOrderID">Unique identifier for a PurchaseOrder</param>
		/// <returns>Success - return response of type PurchaseOrder array for specified PurchaseOrder</returns>
		public PurchaseOrders GetPurchaseOrder(string PurchaseOrderID)
		{
			var requestUri = "PurchaseOrders/"+ (PurchaseOrderID==null? "" : System.Uri.EscapeDataString(PurchaseOrderID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PurchaseOrders>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a specified purchase order
		/// UpdatePurchaseOrder PurchaseOrders/{PurchaseOrderID}
		/// </summary>
		/// <param name="PurchaseOrderID">Unique identifier for a PurchaseOrder</param>
		/// <returns>Success - return response of type PurchaseOrder array for updated PurchaseOrder</returns>
		public async Task<PurchaseOrders> UpdatePurchaseOrderAsync(string PurchaseOrderID, PurchaseOrders requestBody)
		{
			var requestUri = "PurchaseOrders/"+ (PurchaseOrderID==null? "" : System.Uri.EscapeDataString(PurchaseOrderID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PurchaseOrders>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a specified purchase order
		/// UpdatePurchaseOrder PurchaseOrders/{PurchaseOrderID}
		/// </summary>
		/// <param name="PurchaseOrderID">Unique identifier for a PurchaseOrder</param>
		/// <returns>Success - return response of type PurchaseOrder array for updated PurchaseOrder</returns>
		public PurchaseOrders UpdatePurchaseOrder(string PurchaseOrderID, PurchaseOrders requestBody)
		{
			var requestUri = "PurchaseOrders/"+ (PurchaseOrderID==null? "" : System.Uri.EscapeDataString(PurchaseOrderID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PurchaseOrders>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified purchase orders
		/// GetPurchaseOrderByNumber PurchaseOrders/{PurchaseOrderNumber}
		/// </summary>
		/// <param name="PurchaseOrderNumber">Unique identifier for a PurchaseOrder</param>
		/// <returns>Success - return response of type PurchaseOrder array for specified PurchaseOrder</returns>
		public async Task<PurchaseOrders> GetPurchaseOrderByNumberAsync(string PurchaseOrderNumber)
		{
			var requestUri = "PurchaseOrders/"+ (PurchaseOrderNumber==null? "" : System.Uri.EscapeDataString(PurchaseOrderNumber));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PurchaseOrders>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified purchase orders
		/// GetPurchaseOrderByNumber PurchaseOrders/{PurchaseOrderNumber}
		/// </summary>
		/// <param name="PurchaseOrderNumber">Unique identifier for a PurchaseOrder</param>
		/// <returns>Success - return response of type PurchaseOrder array for specified PurchaseOrder</returns>
		public PurchaseOrders GetPurchaseOrderByNumber(string PurchaseOrderNumber)
		{
			var requestUri = "PurchaseOrders/"+ (PurchaseOrderNumber==null? "" : System.Uri.EscapeDataString(PurchaseOrderNumber));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PurchaseOrders>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve history for PurchaseOrder
		/// GetPurchaseOrderHistory PurchaseOrders/{PurchaseOrderID}/History
		/// </summary>
		/// <param name="PurchaseOrderID">Unique identifier for a PurchaseOrder</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public async Task<HistoryRecords> GetPurchaseOrderHistoryAsync(string PurchaseOrderID)
		{
			var requestUri = "PurchaseOrders/"+ (PurchaseOrderID==null? "" : System.Uri.EscapeDataString(PurchaseOrderID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve history for PurchaseOrder
		/// GetPurchaseOrderHistory PurchaseOrders/{PurchaseOrderID}/History
		/// </summary>
		/// <param name="PurchaseOrderID">Unique identifier for a PurchaseOrder</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public HistoryRecords GetPurchaseOrderHistory(string PurchaseOrderID)
		{
			var requestUri = "PurchaseOrders/"+ (PurchaseOrderID==null? "" : System.Uri.EscapeDataString(PurchaseOrderID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create HistoryRecord for purchase orders
		/// CreatePurchaseOrderHistory PurchaseOrders/{PurchaseOrderID}/History
		/// </summary>
		/// <param name="PurchaseOrderID">Unique identifier for a PurchaseOrder</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public async Task<HistoryRecords> CreatePurchaseOrderHistoryAsync(string PurchaseOrderID, HistoryRecords requestBody)
		{
			var requestUri = "PurchaseOrders/"+ (PurchaseOrderID==null? "" : System.Uri.EscapeDataString(PurchaseOrderID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create HistoryRecord for purchase orders
		/// CreatePurchaseOrderHistory PurchaseOrders/{PurchaseOrderID}/History
		/// </summary>
		/// <param name="PurchaseOrderID">Unique identifier for a PurchaseOrder</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public HistoryRecords CreatePurchaseOrderHistory(string PurchaseOrderID, HistoryRecords requestBody)
		{
			var requestUri = "PurchaseOrders/"+ (PurchaseOrderID==null? "" : System.Uri.EscapeDataString(PurchaseOrderID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve any sales quotes
		/// GetQuotes Quotes
		/// </summary>
		/// <param name="DateFrom">Filter for quotes after a particular date</param>
		/// <param name="DateTo">Filter for quotes before a particular date</param>
		/// <param name="ExpiryDateFrom">Filter for quotes expiring after a particular date</param>
		/// <param name="ExpiryDateTo">Filter for quotes before a particular date</param>
		/// <param name="ContactID">Filter for quotes belonging to a particular contact</param>
		/// <param name="Status">Filter for quotes of a particular Status</param>
		/// <param name="page">e.g. page=1 � Up to 100 Quotes will be returned in a single API call with line items shown for each quote</param>
		/// <param name="order">Order by an any element</param>
		/// <returns>Success - return response of type quotes array with all quotes</returns>
		public async Task<Quotes> GetQuotesAsync(System.DateOnly DateFrom, System.DateOnly DateTo, System.DateOnly ExpiryDateFrom, System.DateOnly ExpiryDateTo, string ContactID, string Status, int page, string order)
		{
			var requestUri = "Quotes?DateFrom="+DateFrom+"&DateTo="+DateTo+"&ExpiryDateFrom="+ExpiryDateFrom+"&ExpiryDateTo="+ExpiryDateTo+"&ContactID=" + (ContactID==null? "" : System.Uri.EscapeDataString(ContactID))+"&Status=" + (Status==null? "" : System.Uri.EscapeDataString(Status))+"&page="+page+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Quotes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve any sales quotes
		/// GetQuotes Quotes
		/// </summary>
		/// <param name="DateFrom">Filter for quotes after a particular date</param>
		/// <param name="DateTo">Filter for quotes before a particular date</param>
		/// <param name="ExpiryDateFrom">Filter for quotes expiring after a particular date</param>
		/// <param name="ExpiryDateTo">Filter for quotes before a particular date</param>
		/// <param name="ContactID">Filter for quotes belonging to a particular contact</param>
		/// <param name="Status">Filter for quotes of a particular Status</param>
		/// <param name="page">e.g. page=1 � Up to 100 Quotes will be returned in a single API call with line items shown for each quote</param>
		/// <param name="order">Order by an any element</param>
		/// <returns>Success - return response of type quotes array with all quotes</returns>
		public Quotes GetQuotes(System.DateOnly DateFrom, System.DateOnly DateTo, System.DateOnly ExpiryDateFrom, System.DateOnly ExpiryDateTo, string ContactID, string Status, int page, string order)
		{
			var requestUri = "Quotes?DateFrom="+DateFrom+"&DateTo="+DateTo+"&ExpiryDateFrom="+ExpiryDateFrom+"&ExpiryDateTo="+ExpiryDateTo+"&ContactID=" + (ContactID==null? "" : System.Uri.EscapeDataString(ContactID))+"&Status=" + (Status==null? "" : System.Uri.EscapeDataString(Status))+"&page="+page+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Quotes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create one or more quotes
		/// CreateQuotes Quotes
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">Quotes with an array of Quote object in body of request</param>
		/// <returns>Success - return response of type Quotes with array with newly created Quote</returns>
		public async Task<Quotes> CreateQuotesAsync(bool summarizeErrors, Quotes requestBody)
		{
			var requestUri = "Quotes?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Quotes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create one or more quotes
		/// CreateQuotes Quotes
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <param name="requestBody">Quotes with an array of Quote object in body of request</param>
		/// <returns>Success - return response of type Quotes with array with newly created Quote</returns>
		public Quotes CreateQuotes(bool summarizeErrors, Quotes requestBody)
		{
			var requestUri = "Quotes?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Quotes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update OR create one or more quotes
		/// UpdateOrCreateQuotes Quotes
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <returns>Success - return response of type Quotes array with updated or created Quote</returns>
		public async Task<Quotes> UpdateOrCreateQuotesAsync(bool summarizeErrors, Quotes requestBody)
		{
			var requestUri = "Quotes?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Quotes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update OR create one or more quotes
		/// UpdateOrCreateQuotes Quotes
		/// </summary>
		/// <param name="summarizeErrors">If false return 200 OK and mix of successfully created obejcts and any with validation errors</param>
		/// <returns>Success - return response of type Quotes array with updated or created Quote</returns>
		public Quotes UpdateOrCreateQuotes(bool summarizeErrors, Quotes requestBody)
		{
			var requestUri = "Quotes?summarizeErrors="+summarizeErrors;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Quotes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified quote
		/// GetQuote Quotes/{QuoteID}
		/// </summary>
		/// <param name="QuoteID">Unique identifier for an Quote</param>
		/// <returns>Success - return response of type Quotes array with specified Quote</returns>
		public async Task<Quotes> GetQuoteAsync(string QuoteID)
		{
			var requestUri = "Quotes/"+ (QuoteID==null? "" : System.Uri.EscapeDataString(QuoteID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Quotes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified quote
		/// GetQuote Quotes/{QuoteID}
		/// </summary>
		/// <param name="QuoteID">Unique identifier for an Quote</param>
		/// <returns>Success - return response of type Quotes array with specified Quote</returns>
		public Quotes GetQuote(string QuoteID)
		{
			var requestUri = "Quotes/"+ (QuoteID==null? "" : System.Uri.EscapeDataString(QuoteID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Quotes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a specified quote
		/// UpdateQuote Quotes/{QuoteID}
		/// </summary>
		/// <param name="QuoteID">Unique identifier for an Quote</param>
		/// <returns>Success - return response of type Quotes array with updated Quote</returns>
		public async Task<Quotes> UpdateQuoteAsync(string QuoteID, Quotes requestBody)
		{
			var requestUri = "Quotes/"+ (QuoteID==null? "" : System.Uri.EscapeDataString(QuoteID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Quotes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a specified quote
		/// UpdateQuote Quotes/{QuoteID}
		/// </summary>
		/// <param name="QuoteID">Unique identifier for an Quote</param>
		/// <returns>Success - return response of type Quotes array with updated Quote</returns>
		public Quotes UpdateQuote(string QuoteID, Quotes requestBody)
		{
			var requestUri = "Quotes/"+ (QuoteID==null? "" : System.Uri.EscapeDataString(QuoteID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Quotes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an quote
		/// GetQuoteHistory Quotes/{QuoteID}/History
		/// </summary>
		/// <param name="QuoteID">Unique identifier for an Quote</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public async Task<HistoryRecords> GetQuoteHistoryAsync(string QuoteID)
		{
			var requestUri = "Quotes/"+ (QuoteID==null? "" : System.Uri.EscapeDataString(QuoteID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an quote
		/// GetQuoteHistory Quotes/{QuoteID}/History
		/// </summary>
		/// <param name="QuoteID">Unique identifier for an Quote</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public HistoryRecords GetQuoteHistory(string QuoteID)
		{
			var requestUri = "Quotes/"+ (QuoteID==null? "" : System.Uri.EscapeDataString(QuoteID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an quote
		/// CreateQuoteHistory Quotes/{QuoteID}/History
		/// </summary>
		/// <param name="QuoteID">Unique identifier for an Quote</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public async Task<HistoryRecords> CreateQuoteHistoryAsync(string QuoteID, HistoryRecords requestBody)
		{
			var requestUri = "Quotes/"+ (QuoteID==null? "" : System.Uri.EscapeDataString(QuoteID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an quote
		/// CreateQuoteHistory Quotes/{QuoteID}/History
		/// </summary>
		/// <param name="QuoteID">Unique identifier for an Quote</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public HistoryRecords CreateQuoteHistory(string QuoteID, HistoryRecords requestBody)
		{
			var requestUri = "Quotes/"+ (QuoteID==null? "" : System.Uri.EscapeDataString(QuoteID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve quotes as PDF files
		/// GetQuoteAsPdf Quotes/{QuoteID}/pdf
		/// </summary>
		/// <param name="QuoteID">Unique identifier for an Quote</param>
		/// <returns>Success - return response of byte array pdf version of specified Quotes</returns>
		public async Task GetQuoteAsPdfAsync(string QuoteID)
		{
			var requestUri = "Quotes/"+ (QuoteID==null? "" : System.Uri.EscapeDataString(QuoteID))+"/pdf";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve quotes as PDF files
		/// GetQuoteAsPdf Quotes/{QuoteID}/pdf
		/// </summary>
		/// <param name="QuoteID">Unique identifier for an Quote</param>
		/// <returns>Success - return response of byte array pdf version of specified Quotes</returns>
		public void GetQuoteAsPdf(string QuoteID)
		{
			var requestUri = "Quotes/"+ (QuoteID==null? "" : System.Uri.EscapeDataString(QuoteID))+"/pdf";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments for Quotes
		/// GetQuoteAttachments Quotes/{QuoteID}/Attachments
		/// </summary>
		/// <param name="QuoteID">Unique identifier for Quote object</param>
		/// <returns>Success - return response of type Attachments array of Attachment</returns>
		public async Task<Attachments> GetQuoteAttachmentsAsync(string QuoteID)
		{
			var requestUri = "Quotes/"+ (QuoteID==null? "" : System.Uri.EscapeDataString(QuoteID))+"/Attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments for Quotes
		/// GetQuoteAttachments Quotes/{QuoteID}/Attachments
		/// </summary>
		/// <param name="QuoteID">Unique identifier for Quote object</param>
		/// <returns>Success - return response of type Attachments array of Attachment</returns>
		public Attachments GetQuoteAttachments(string QuoteID)
		{
			var requestUri = "Quotes/"+ (QuoteID==null? "" : System.Uri.EscapeDataString(QuoteID))+"/Attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve specific Attachment on Quote
		/// GetQuoteAttachmentById Quotes/{QuoteID}/Attachments/{AttachmentID}
		/// </summary>
		/// <param name="QuoteID">Unique identifier for Quote object</param>
		/// <param name="AttachmentID">Unique identifier for Attachment object</param>
		/// <returns>Success - return response of attachment for Quote as binary data</returns>
		public async Task GetQuoteAttachmentByIdAsync(string QuoteID, string AttachmentID)
		{
			var requestUri = "Quotes/"+ (QuoteID==null? "" : System.Uri.EscapeDataString(QuoteID))+"/Attachments/"+ (AttachmentID==null? "" : System.Uri.EscapeDataString(AttachmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve specific Attachment on Quote
		/// GetQuoteAttachmentById Quotes/{QuoteID}/Attachments/{AttachmentID}
		/// </summary>
		/// <param name="QuoteID">Unique identifier for Quote object</param>
		/// <param name="AttachmentID">Unique identifier for Attachment object</param>
		/// <returns>Success - return response of attachment for Quote as binary data</returns>
		public void GetQuoteAttachmentById(string QuoteID, string AttachmentID)
		{
			var requestUri = "Quotes/"+ (QuoteID==null? "" : System.Uri.EscapeDataString(QuoteID))+"/Attachments/"+ (AttachmentID==null? "" : System.Uri.EscapeDataString(AttachmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachment on Quote by Filename
		/// GetQuoteAttachmentByFileName Quotes/{QuoteID}/Attachments/{FileName}
		/// </summary>
		/// <param name="QuoteID">Unique identifier for Quote object</param>
		/// <param name="FileName">Name of the attachment</param>
		/// <returns>Success - return response of attachment for Quote as binary data</returns>
		public async Task GetQuoteAttachmentByFileNameAsync(string QuoteID, string FileName)
		{
			var requestUri = "Quotes/"+ (QuoteID==null? "" : System.Uri.EscapeDataString(QuoteID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachment on Quote by Filename
		/// GetQuoteAttachmentByFileName Quotes/{QuoteID}/Attachments/{FileName}
		/// </summary>
		/// <param name="QuoteID">Unique identifier for Quote object</param>
		/// <param name="FileName">Name of the attachment</param>
		/// <returns>Success - return response of attachment for Quote as binary data</returns>
		public void GetQuoteAttachmentByFileName(string QuoteID, string FileName)
		{
			var requestUri = "Quotes/"+ (QuoteID==null? "" : System.Uri.EscapeDataString(QuoteID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve draft expense claim receipts for any user
		/// GetReceipts Receipts
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Receipts array for all Receipt</returns>
		public async Task<Receipts> GetReceiptsAsync(string @where, string order, int unitdp)
		{
			var requestUri = "Receipts?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Receipts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve draft expense claim receipts for any user
		/// GetReceipts Receipts
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Receipts array for all Receipt</returns>
		public Receipts GetReceipts(string @where, string order, int unitdp)
		{
			var requestUri = "Receipts?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Receipts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create draft expense claim receipts for any user
		/// CreateReceipt Receipts
		/// </summary>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <param name="requestBody">Receipts with an array of Receipt object in body of request</param>
		/// <returns>Success - return response of type Receipts array for newly created Receipt</returns>
		public async Task<Receipts> CreateReceiptAsync(int unitdp, Receipts requestBody)
		{
			var requestUri = "Receipts?unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Receipts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create draft expense claim receipts for any user
		/// CreateReceipt Receipts
		/// </summary>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <param name="requestBody">Receipts with an array of Receipt object in body of request</param>
		/// <returns>Success - return response of type Receipts array for newly created Receipt</returns>
		public Receipts CreateReceipt(int unitdp, Receipts requestBody)
		{
			var requestUri = "Receipts?unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Receipts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified draft expense claim receipts
		/// GetReceipt Receipts/{ReceiptID}
		/// </summary>
		/// <param name="ReceiptID">Unique identifier for a Receipt</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Receipts array for a specified Receipt</returns>
		public async Task<Receipts> GetReceiptAsync(string ReceiptID, int unitdp)
		{
			var requestUri = "Receipts/"+ (ReceiptID==null? "" : System.Uri.EscapeDataString(ReceiptID))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Receipts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified draft expense claim receipts
		/// GetReceipt Receipts/{ReceiptID}
		/// </summary>
		/// <param name="ReceiptID">Unique identifier for a Receipt</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Receipts array for a specified Receipt</returns>
		public Receipts GetReceipt(string ReceiptID, int unitdp)
		{
			var requestUri = "Receipts/"+ (ReceiptID==null? "" : System.Uri.EscapeDataString(ReceiptID))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Receipts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified draft expense claim receipts
		/// UpdateReceipt Receipts/{ReceiptID}
		/// </summary>
		/// <param name="ReceiptID">Unique identifier for a Receipt</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Receipts array for updated Receipt</returns>
		public async Task<Receipts> UpdateReceiptAsync(string ReceiptID, int unitdp, Receipts requestBody)
		{
			var requestUri = "Receipts/"+ (ReceiptID==null? "" : System.Uri.EscapeDataString(ReceiptID))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Receipts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified draft expense claim receipts
		/// UpdateReceipt Receipts/{ReceiptID}
		/// </summary>
		/// <param name="ReceiptID">Unique identifier for a Receipt</param>
		/// <param name="unitdp">e.g. unitdp=4 � (Unit Decimal Places) You can opt in to use four decimal places for unit amounts</param>
		/// <returns>Success - return response of type Receipts array for updated Receipt</returns>
		public Receipts UpdateReceipt(string ReceiptID, int unitdp, Receipts requestBody)
		{
			var requestUri = "Receipts/"+ (ReceiptID==null? "" : System.Uri.EscapeDataString(ReceiptID))+"&unitdp="+unitdp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Receipts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments for expense claim receipts
		/// GetReceiptAttachments Receipts/{ReceiptID}/Attachments
		/// </summary>
		/// <param name="ReceiptID">Unique identifier for a Receipt</param>
		/// <returns>Success - return response of type Attachments array of Attachments for a specified Receipt</returns>
		public async Task<Attachments> GetReceiptAttachmentsAsync(string ReceiptID)
		{
			var requestUri = "Receipts/"+ (ReceiptID==null? "" : System.Uri.EscapeDataString(ReceiptID))+"/Attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments for expense claim receipts
		/// GetReceiptAttachments Receipts/{ReceiptID}/Attachments
		/// </summary>
		/// <param name="ReceiptID">Unique identifier for a Receipt</param>
		/// <returns>Success - return response of type Attachments array of Attachments for a specified Receipt</returns>
		public Attachments GetReceiptAttachments(string ReceiptID)
		{
			var requestUri = "Receipts/"+ (ReceiptID==null? "" : System.Uri.EscapeDataString(ReceiptID))+"/Attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on expense claim receipts by ID
		/// GetReceiptAttachmentById Receipts/{ReceiptID}/Attachments/{AttachmentID}
		/// </summary>
		/// <param name="ReceiptID">Unique identifier for a Receipt</param>
		/// <param name="AttachmentID">Unique identifier for a Attachment</param>
		/// <returns>Success - return response of attachment for Receipt as binary data</returns>
		public async Task GetReceiptAttachmentByIdAsync(string ReceiptID, string AttachmentID)
		{
			var requestUri = "Receipts/"+ (ReceiptID==null? "" : System.Uri.EscapeDataString(ReceiptID))+"/Attachments/"+ (AttachmentID==null? "" : System.Uri.EscapeDataString(AttachmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on expense claim receipts by ID
		/// GetReceiptAttachmentById Receipts/{ReceiptID}/Attachments/{AttachmentID}
		/// </summary>
		/// <param name="ReceiptID">Unique identifier for a Receipt</param>
		/// <param name="AttachmentID">Unique identifier for a Attachment</param>
		/// <returns>Success - return response of attachment for Receipt as binary data</returns>
		public void GetReceiptAttachmentById(string ReceiptID, string AttachmentID)
		{
			var requestUri = "Receipts/"+ (ReceiptID==null? "" : System.Uri.EscapeDataString(ReceiptID))+"/Attachments/"+ (AttachmentID==null? "" : System.Uri.EscapeDataString(AttachmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on expense claim receipts by file name
		/// GetReceiptAttachmentByFileName Receipts/{ReceiptID}/Attachments/{FileName}
		/// </summary>
		/// <param name="ReceiptID">Unique identifier for a Receipt</param>
		/// <param name="FileName">The name of the file being attached to the Receipt</param>
		/// <returns>Success - return response of attachment for Receipt as binary data</returns>
		public async Task GetReceiptAttachmentByFileNameAsync(string ReceiptID, string FileName)
		{
			var requestUri = "Receipts/"+ (ReceiptID==null? "" : System.Uri.EscapeDataString(ReceiptID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on expense claim receipts by file name
		/// GetReceiptAttachmentByFileName Receipts/{ReceiptID}/Attachments/{FileName}
		/// </summary>
		/// <param name="ReceiptID">Unique identifier for a Receipt</param>
		/// <param name="FileName">The name of the file being attached to the Receipt</param>
		/// <returns>Success - return response of attachment for Receipt as binary data</returns>
		public void GetReceiptAttachmentByFileName(string ReceiptID, string FileName)
		{
			var requestUri = "Receipts/"+ (ReceiptID==null? "" : System.Uri.EscapeDataString(ReceiptID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an Receipt
		/// GetReceiptHistory Receipts/{ReceiptID}/History
		/// </summary>
		/// <param name="ReceiptID">Unique identifier for a Receipt</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public async Task<HistoryRecords> GetReceiptHistoryAsync(string ReceiptID)
		{
			var requestUri = "Receipts/"+ (ReceiptID==null? "" : System.Uri.EscapeDataString(ReceiptID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an Receipt
		/// GetReceiptHistory Receipts/{ReceiptID}/History
		/// </summary>
		/// <param name="ReceiptID">Unique identifier for a Receipt</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public HistoryRecords GetReceiptHistory(string ReceiptID)
		{
			var requestUri = "Receipts/"+ (ReceiptID==null? "" : System.Uri.EscapeDataString(ReceiptID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an Receipt
		/// CreateReceiptHistory Receipts/{ReceiptID}/History
		/// </summary>
		/// <param name="ReceiptID">Unique identifier for a Receipt</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public async Task<HistoryRecords> CreateReceiptHistoryAsync(string ReceiptID, HistoryRecords requestBody)
		{
			var requestUri = "Receipts/"+ (ReceiptID==null? "" : System.Uri.EscapeDataString(ReceiptID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a history records of an Receipt
		/// CreateReceiptHistory Receipts/{ReceiptID}/History
		/// </summary>
		/// <param name="ReceiptID">Unique identifier for a Receipt</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public HistoryRecords CreateReceiptHistory(string ReceiptID, HistoryRecords requestBody)
		{
			var requestUri = "Receipts/"+ (ReceiptID==null? "" : System.Uri.EscapeDataString(ReceiptID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve any repeating invoices
		/// GetRepeatingInvoices RepeatingInvoices
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <returns>Success - return response of type Repeating Invoices array for all Repeating Invoice</returns>
		public async Task<RepeatingInvoices> GetRepeatingInvoicesAsync(string @where, string order)
		{
			var requestUri = "RepeatingInvoices?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RepeatingInvoices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve any repeating invoices
		/// GetRepeatingInvoices RepeatingInvoices
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <returns>Success - return response of type Repeating Invoices array for all Repeating Invoice</returns>
		public RepeatingInvoices GetRepeatingInvoices(string @where, string order)
		{
			var requestUri = "RepeatingInvoices?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RepeatingInvoices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified repeating invoice
		/// GetRepeatingInvoice RepeatingInvoices/{RepeatingInvoiceID}
		/// </summary>
		/// <param name="RepeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
		/// <returns>Success - return response of type Repeating Invoices array with a specified Repeating Invoice</returns>
		public async Task<RepeatingInvoices> GetRepeatingInvoiceAsync(string RepeatingInvoiceID)
		{
			var requestUri = "RepeatingInvoices/"+ (RepeatingInvoiceID==null? "" : System.Uri.EscapeDataString(RepeatingInvoiceID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RepeatingInvoices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified repeating invoice
		/// GetRepeatingInvoice RepeatingInvoices/{RepeatingInvoiceID}
		/// </summary>
		/// <param name="RepeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
		/// <returns>Success - return response of type Repeating Invoices array with a specified Repeating Invoice</returns>
		public RepeatingInvoices GetRepeatingInvoice(string RepeatingInvoiceID)
		{
			var requestUri = "RepeatingInvoices/"+ (RepeatingInvoiceID==null? "" : System.Uri.EscapeDataString(RepeatingInvoiceID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RepeatingInvoices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on repeating invoice
		/// GetRepeatingInvoiceAttachments RepeatingInvoices/{RepeatingInvoiceID}/Attachments
		/// </summary>
		/// <param name="RepeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
		/// <returns>Success - return response of type Attachments array with all Attachments for a specified Repeating Invoice</returns>
		public async Task<Attachments> GetRepeatingInvoiceAttachmentsAsync(string RepeatingInvoiceID)
		{
			var requestUri = "RepeatingInvoices/"+ (RepeatingInvoiceID==null? "" : System.Uri.EscapeDataString(RepeatingInvoiceID))+"/Attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Attachments on repeating invoice
		/// GetRepeatingInvoiceAttachments RepeatingInvoices/{RepeatingInvoiceID}/Attachments
		/// </summary>
		/// <param name="RepeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
		/// <returns>Success - return response of type Attachments array with all Attachments for a specified Repeating Invoice</returns>
		public Attachments GetRepeatingInvoiceAttachments(string RepeatingInvoiceID)
		{
			var requestUri = "RepeatingInvoices/"+ (RepeatingInvoiceID==null? "" : System.Uri.EscapeDataString(RepeatingInvoiceID))+"/Attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified Attachments on repeating invoices
		/// GetRepeatingInvoiceAttachmentById RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{AttachmentID}
		/// </summary>
		/// <param name="RepeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
		/// <param name="AttachmentID">Unique identifier for a Attachment</param>
		/// <returns>Success - return response of attachment for Repeating Invoice as binary data</returns>
		public async Task GetRepeatingInvoiceAttachmentByIdAsync(string RepeatingInvoiceID, string AttachmentID)
		{
			var requestUri = "RepeatingInvoices/"+ (RepeatingInvoiceID==null? "" : System.Uri.EscapeDataString(RepeatingInvoiceID))+"/Attachments/"+ (AttachmentID==null? "" : System.Uri.EscapeDataString(AttachmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified Attachments on repeating invoices
		/// GetRepeatingInvoiceAttachmentById RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{AttachmentID}
		/// </summary>
		/// <param name="RepeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
		/// <param name="AttachmentID">Unique identifier for a Attachment</param>
		/// <returns>Success - return response of attachment for Repeating Invoice as binary data</returns>
		public void GetRepeatingInvoiceAttachmentById(string RepeatingInvoiceID, string AttachmentID)
		{
			var requestUri = "RepeatingInvoices/"+ (RepeatingInvoiceID==null? "" : System.Uri.EscapeDataString(RepeatingInvoiceID))+"/Attachments/"+ (AttachmentID==null? "" : System.Uri.EscapeDataString(AttachmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve specified attachment on repeating invoices by file name
		/// GetRepeatingInvoiceAttachmentByFileName RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}
		/// </summary>
		/// <param name="RepeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
		/// <param name="FileName">The name of the file being attached to a Repeating Invoice</param>
		/// <returns>Success - return response of attachment for Repeating Invoice as binary data</returns>
		public async Task GetRepeatingInvoiceAttachmentByFileNameAsync(string RepeatingInvoiceID, string FileName)
		{
			var requestUri = "RepeatingInvoices/"+ (RepeatingInvoiceID==null? "" : System.Uri.EscapeDataString(RepeatingInvoiceID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve specified attachment on repeating invoices by file name
		/// GetRepeatingInvoiceAttachmentByFileName RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}
		/// </summary>
		/// <param name="RepeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
		/// <param name="FileName">The name of the file being attached to a Repeating Invoice</param>
		/// <returns>Success - return response of attachment for Repeating Invoice as binary data</returns>
		public void GetRepeatingInvoiceAttachmentByFileName(string RepeatingInvoiceID, string FileName)
		{
			var requestUri = "RepeatingInvoices/"+ (RepeatingInvoiceID==null? "" : System.Uri.EscapeDataString(RepeatingInvoiceID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve history for a repeating invoice
		/// GetRepeatingInvoiceHistory RepeatingInvoices/{RepeatingInvoiceID}/History
		/// </summary>
		/// <param name="RepeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public async Task<HistoryRecords> GetRepeatingInvoiceHistoryAsync(string RepeatingInvoiceID)
		{
			var requestUri = "RepeatingInvoices/"+ (RepeatingInvoiceID==null? "" : System.Uri.EscapeDataString(RepeatingInvoiceID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve history for a repeating invoice
		/// GetRepeatingInvoiceHistory RepeatingInvoices/{RepeatingInvoiceID}/History
		/// </summary>
		/// <param name="RepeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
		/// <returns>Success - return response of HistoryRecords array of 0 to N HistoryRecord</returns>
		public HistoryRecords GetRepeatingInvoiceHistory(string RepeatingInvoiceID)
		{
			var requestUri = "RepeatingInvoices/"+ (RepeatingInvoiceID==null? "" : System.Uri.EscapeDataString(RepeatingInvoiceID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create history for a repeating invoice
		/// CreateRepeatingInvoiceHistory RepeatingInvoices/{RepeatingInvoiceID}/History
		/// </summary>
		/// <param name="RepeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public async Task<HistoryRecords> CreateRepeatingInvoiceHistoryAsync(string RepeatingInvoiceID, HistoryRecords requestBody)
		{
			var requestUri = "RepeatingInvoices/"+ (RepeatingInvoiceID==null? "" : System.Uri.EscapeDataString(RepeatingInvoiceID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create history for a repeating invoice
		/// CreateRepeatingInvoiceHistory RepeatingInvoices/{RepeatingInvoiceID}/History
		/// </summary>
		/// <param name="RepeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
		/// <param name="requestBody">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
		/// <returns>Success - return response of type HistoryRecords array of HistoryRecord objects</returns>
		public HistoryRecords CreateRepeatingInvoiceHistory(string RepeatingInvoiceID, HistoryRecords requestBody)
		{
			var requestUri = "RepeatingInvoices/"+ (RepeatingInvoiceID==null? "" : System.Uri.EscapeDataString(RepeatingInvoiceID))+"/History";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryRecords>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for TenNinetyNine
		/// GetReportTenNinetyNine Reports/TenNinetyNine
		/// </summary>
		/// <param name="reportYear">The year of the 1099 report</param>
		/// <returns>Success - return response of type Reports</returns>
		public async Task<Reports> GetReportTenNinetyNineAsync(string reportYear)
		{
			var requestUri = "Reports/TenNinetyNine?reportYear=" + (reportYear==null? "" : System.Uri.EscapeDataString(reportYear));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Reports>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for TenNinetyNine
		/// GetReportTenNinetyNine Reports/TenNinetyNine
		/// </summary>
		/// <param name="reportYear">The year of the 1099 report</param>
		/// <returns>Success - return response of type Reports</returns>
		public Reports GetReportTenNinetyNine(string reportYear)
		{
			var requestUri = "Reports/TenNinetyNine?reportYear=" + (reportYear==null? "" : System.Uri.EscapeDataString(reportYear));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Reports>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for AgedPayablesByContact
		/// GetReportAgedPayablesByContact Reports/AgedPayablesByContact
		/// </summary>
		/// <param name="contactId">Unique identifier for a Contact</param>
		/// <param name="date">The date of the Aged Payables By Contact report</param>
		/// <param name="fromDate">The from date of the Aged Payables By Contact report</param>
		/// <param name="toDate">The to date of the Aged Payables By Contact report</param>
		/// <returns>Success - return response of type ReportWithRows</returns>
		public async Task<ReportWithRows> GetReportAgedPayablesByContactAsync(string contactId, System.DateOnly date, System.DateOnly fromDate, System.DateOnly toDate)
		{
			var requestUri = "Reports/AgedPayablesByContact?contactId=" + (contactId==null? "" : System.Uri.EscapeDataString(contactId))+"&date="+date+"&fromDate="+fromDate+"&toDate="+toDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWithRows>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for AgedPayablesByContact
		/// GetReportAgedPayablesByContact Reports/AgedPayablesByContact
		/// </summary>
		/// <param name="contactId">Unique identifier for a Contact</param>
		/// <param name="date">The date of the Aged Payables By Contact report</param>
		/// <param name="fromDate">The from date of the Aged Payables By Contact report</param>
		/// <param name="toDate">The to date of the Aged Payables By Contact report</param>
		/// <returns>Success - return response of type ReportWithRows</returns>
		public ReportWithRows GetReportAgedPayablesByContact(string contactId, System.DateOnly date, System.DateOnly fromDate, System.DateOnly toDate)
		{
			var requestUri = "Reports/AgedPayablesByContact?contactId=" + (contactId==null? "" : System.Uri.EscapeDataString(contactId))+"&date="+date+"&fromDate="+fromDate+"&toDate="+toDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWithRows>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for AgedReceivablesByContact
		/// GetReportAgedReceivablesByContact Reports/AgedReceivablesByContact
		/// </summary>
		/// <param name="contactId">Unique identifier for a Contact</param>
		/// <param name="date">The date of the Aged Receivables By Contact report</param>
		/// <param name="fromDate">The from date of the Aged Receivables By Contact report</param>
		/// <param name="toDate">The to date of the Aged Receivables By Contact report</param>
		/// <returns>Success - return response of type ReportWithRows</returns>
		public async Task<ReportWithRows> GetReportAgedReceivablesByContactAsync(string contactId, System.DateOnly date, System.DateOnly fromDate, System.DateOnly toDate)
		{
			var requestUri = "Reports/AgedReceivablesByContact?contactId=" + (contactId==null? "" : System.Uri.EscapeDataString(contactId))+"&date="+date+"&fromDate="+fromDate+"&toDate="+toDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWithRows>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for AgedReceivablesByContact
		/// GetReportAgedReceivablesByContact Reports/AgedReceivablesByContact
		/// </summary>
		/// <param name="contactId">Unique identifier for a Contact</param>
		/// <param name="date">The date of the Aged Receivables By Contact report</param>
		/// <param name="fromDate">The from date of the Aged Receivables By Contact report</param>
		/// <param name="toDate">The to date of the Aged Receivables By Contact report</param>
		/// <returns>Success - return response of type ReportWithRows</returns>
		public ReportWithRows GetReportAgedReceivablesByContact(string contactId, System.DateOnly date, System.DateOnly fromDate, System.DateOnly toDate)
		{
			var requestUri = "Reports/AgedReceivablesByContact?contactId=" + (contactId==null? "" : System.Uri.EscapeDataString(contactId))+"&date="+date+"&fromDate="+fromDate+"&toDate="+toDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWithRows>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for BalanceSheet
		/// GetReportBalanceSheet Reports/BalanceSheet
		/// </summary>
		/// <param name="date">The date of the Balance Sheet report</param>
		/// <param name="periods">The number of periods for the Balance Sheet report</param>
		/// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR)</param>
		/// <param name="trackingOptionID1">The tracking option 1 for the Balance Sheet report</param>
		/// <param name="trackingOptionID2">The tracking option 2 for the Balance Sheet report</param>
		/// <param name="standardLayout">The standard layout boolean for the Balance Sheet report</param>
		/// <param name="paymentsOnly">return a cash basis for the Balance Sheet report</param>
		/// <returns>Success - return response of type ReportWithRows</returns>
		public async Task<ReportWithRows> GetReportBalanceSheetAsync(string date, int periods, GetReportBalanceSheetTimeframe timeframe, string trackingOptionID1, string trackingOptionID2, bool standardLayout, bool paymentsOnly)
		{
			var requestUri = "Reports/BalanceSheet?date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&periods="+periods+"&timeframe=" + timeframe+"&trackingOptionID1=" + (trackingOptionID1==null? "" : System.Uri.EscapeDataString(trackingOptionID1))+"&trackingOptionID2=" + (trackingOptionID2==null? "" : System.Uri.EscapeDataString(trackingOptionID2))+"&standardLayout="+standardLayout+"&paymentsOnly="+paymentsOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWithRows>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for BalanceSheet
		/// GetReportBalanceSheet Reports/BalanceSheet
		/// </summary>
		/// <param name="date">The date of the Balance Sheet report</param>
		/// <param name="periods">The number of periods for the Balance Sheet report</param>
		/// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR)</param>
		/// <param name="trackingOptionID1">The tracking option 1 for the Balance Sheet report</param>
		/// <param name="trackingOptionID2">The tracking option 2 for the Balance Sheet report</param>
		/// <param name="standardLayout">The standard layout boolean for the Balance Sheet report</param>
		/// <param name="paymentsOnly">return a cash basis for the Balance Sheet report</param>
		/// <returns>Success - return response of type ReportWithRows</returns>
		public ReportWithRows GetReportBalanceSheet(string date, int periods, GetReportBalanceSheetTimeframe timeframe, string trackingOptionID1, string trackingOptionID2, bool standardLayout, bool paymentsOnly)
		{
			var requestUri = "Reports/BalanceSheet?date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&periods="+periods+"&timeframe=" + timeframe+"&trackingOptionID1=" + (trackingOptionID1==null? "" : System.Uri.EscapeDataString(trackingOptionID1))+"&trackingOptionID2=" + (trackingOptionID2==null? "" : System.Uri.EscapeDataString(trackingOptionID2))+"&standardLayout="+standardLayout+"&paymentsOnly="+paymentsOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWithRows>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for BankSummary
		/// GetReportBankSummary Reports/BankSummary
		/// </summary>
		/// <param name="fromDate">The from date for the Bank Summary report e.g. 2018-03-31</param>
		/// <param name="toDate">The to date for the Bank Summary report e.g. 2018-03-31</param>
		/// <returns>Success - return response of type ReportWithRows</returns>
		public async Task<ReportWithRows> GetReportBankSummaryAsync(System.DateOnly fromDate, System.DateOnly toDate)
		{
			var requestUri = "Reports/BankSummary?fromDate="+fromDate+"&toDate="+toDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWithRows>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for BankSummary
		/// GetReportBankSummary Reports/BankSummary
		/// </summary>
		/// <param name="fromDate">The from date for the Bank Summary report e.g. 2018-03-31</param>
		/// <param name="toDate">The to date for the Bank Summary report e.g. 2018-03-31</param>
		/// <returns>Success - return response of type ReportWithRows</returns>
		public ReportWithRows GetReportBankSummary(System.DateOnly fromDate, System.DateOnly toDate)
		{
			var requestUri = "Reports/BankSummary?fromDate="+fromDate+"&toDate="+toDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWithRows>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for BAS only valid for AU orgs
		/// GetReportBASorGSTList Reports
		/// </summary>
		/// <returns>Success - return response of type ReportWithRows</returns>
		public async Task<ReportWithRows> GetReportBASorGSTListAsync()
		{
			var requestUri = "Reports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWithRows>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for BAS only valid for AU orgs
		/// GetReportBASorGSTList Reports
		/// </summary>
		/// <returns>Success - return response of type ReportWithRows</returns>
		public ReportWithRows GetReportBASorGSTList()
		{
			var requestUri = "Reports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWithRows>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for BAS only valid for AU orgs
		/// GetReportBASorGST Reports/{ReportID}
		/// </summary>
		/// <param name="ReportID">Unique identifier for a Report</param>
		/// <returns>Success - return response of type ReportWithRows</returns>
		public async Task<ReportWithRows> GetReportBASorGSTAsync(string ReportID)
		{
			var requestUri = "Reports/"+ (ReportID==null? "" : System.Uri.EscapeDataString(ReportID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWithRows>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for BAS only valid for AU orgs
		/// GetReportBASorGST Reports/{ReportID}
		/// </summary>
		/// <param name="ReportID">Unique identifier for a Report</param>
		/// <returns>Success - return response of type ReportWithRows</returns>
		public ReportWithRows GetReportBASorGST(string ReportID)
		{
			var requestUri = "Reports/"+ (ReportID==null? "" : System.Uri.EscapeDataString(ReportID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWithRows>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for Budget Summary
		/// GetReportBudgetSummary Reports/BudgetSummary
		/// </summary>
		/// <param name="date">The date for the Bank Summary report e.g. 2018-03-31</param>
		/// <param name="period">The number of periods to compare (integer between 1 and 12)</param>
		/// <param name="timeframe">The period size to compare to (1=month, 3=quarter, 12=year)</param>
		/// <returns>success- return a Report with Rows object</returns>
		public async Task<ReportWithRows> GetReportBudgetSummaryAsync(System.DateOnly date, int period, int timeframe)
		{
			var requestUri = "Reports/BudgetSummary?date="+date+"&period="+period+"&timeframe="+timeframe;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWithRows>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for Budget Summary
		/// GetReportBudgetSummary Reports/BudgetSummary
		/// </summary>
		/// <param name="date">The date for the Bank Summary report e.g. 2018-03-31</param>
		/// <param name="period">The number of periods to compare (integer between 1 and 12)</param>
		/// <param name="timeframe">The period size to compare to (1=month, 3=quarter, 12=year)</param>
		/// <returns>success- return a Report with Rows object</returns>
		public ReportWithRows GetReportBudgetSummary(System.DateOnly date, int period, int timeframe)
		{
			var requestUri = "Reports/BudgetSummary?date="+date+"&period="+period+"&timeframe="+timeframe;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWithRows>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for ExecutiveSummary
		/// GetReportExecutiveSummary Reports/ExecutiveSummary
		/// </summary>
		/// <param name="date">The date for the Bank Summary report e.g. 2018-03-31</param>
		/// <returns>Success - return response of type ReportWithRows</returns>
		public async Task<ReportWithRows> GetReportExecutiveSummaryAsync(System.DateOnly date)
		{
			var requestUri = "Reports/ExecutiveSummary?date="+date;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWithRows>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for ExecutiveSummary
		/// GetReportExecutiveSummary Reports/ExecutiveSummary
		/// </summary>
		/// <param name="date">The date for the Bank Summary report e.g. 2018-03-31</param>
		/// <returns>Success - return response of type ReportWithRows</returns>
		public ReportWithRows GetReportExecutiveSummary(System.DateOnly date)
		{
			var requestUri = "Reports/ExecutiveSummary?date="+date;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWithRows>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for ProfitAndLoss
		/// GetReportProfitAndLoss Reports/ProfitAndLoss
		/// </summary>
		/// <param name="fromDate">The from date for the ProfitAndLoss report e.g. 2018-03-31</param>
		/// <param name="toDate">The to date for the ProfitAndLoss report e.g. 2018-03-31</param>
		/// <param name="periods">The number of periods to compare (integer between 1 and 12)</param>
		/// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR)</param>
		/// <param name="trackingCategoryID">The trackingCategory 1 for the ProfitAndLoss report</param>
		/// <param name="trackingCategoryID2">The trackingCategory 2 for the ProfitAndLoss report</param>
		/// <param name="trackingOptionID">The tracking option 1 for the ProfitAndLoss report</param>
		/// <param name="trackingOptionID2">The tracking option 2 for the ProfitAndLoss report</param>
		/// <param name="standardLayout">Return the standard layout for the ProfitAndLoss report</param>
		/// <param name="paymentsOnly">Return cash only basis for the ProfitAndLoss report</param>
		/// <returns>Success - return response of type ReportWithRows</returns>
		public async Task<ReportWithRows> GetReportProfitAndLossAsync(System.DateOnly fromDate, System.DateOnly toDate, int periods, GetReportBalanceSheetTimeframe timeframe, string trackingCategoryID, string trackingCategoryID2, string trackingOptionID, string trackingOptionID2, bool standardLayout, bool paymentsOnly)
		{
			var requestUri = "Reports/ProfitAndLoss?fromDate="+fromDate+"&toDate="+toDate+"&periods="+periods+"&timeframe=" + timeframe+"&trackingCategoryID=" + (trackingCategoryID==null? "" : System.Uri.EscapeDataString(trackingCategoryID))+"&trackingCategoryID2=" + (trackingCategoryID2==null? "" : System.Uri.EscapeDataString(trackingCategoryID2))+"&trackingOptionID=" + (trackingOptionID==null? "" : System.Uri.EscapeDataString(trackingOptionID))+"&trackingOptionID2=" + (trackingOptionID2==null? "" : System.Uri.EscapeDataString(trackingOptionID2))+"&standardLayout="+standardLayout+"&paymentsOnly="+paymentsOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWithRows>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for ProfitAndLoss
		/// GetReportProfitAndLoss Reports/ProfitAndLoss
		/// </summary>
		/// <param name="fromDate">The from date for the ProfitAndLoss report e.g. 2018-03-31</param>
		/// <param name="toDate">The to date for the ProfitAndLoss report e.g. 2018-03-31</param>
		/// <param name="periods">The number of periods to compare (integer between 1 and 12)</param>
		/// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR)</param>
		/// <param name="trackingCategoryID">The trackingCategory 1 for the ProfitAndLoss report</param>
		/// <param name="trackingCategoryID2">The trackingCategory 2 for the ProfitAndLoss report</param>
		/// <param name="trackingOptionID">The tracking option 1 for the ProfitAndLoss report</param>
		/// <param name="trackingOptionID2">The tracking option 2 for the ProfitAndLoss report</param>
		/// <param name="standardLayout">Return the standard layout for the ProfitAndLoss report</param>
		/// <param name="paymentsOnly">Return cash only basis for the ProfitAndLoss report</param>
		/// <returns>Success - return response of type ReportWithRows</returns>
		public ReportWithRows GetReportProfitAndLoss(System.DateOnly fromDate, System.DateOnly toDate, int periods, GetReportBalanceSheetTimeframe timeframe, string trackingCategoryID, string trackingCategoryID2, string trackingOptionID, string trackingOptionID2, bool standardLayout, bool paymentsOnly)
		{
			var requestUri = "Reports/ProfitAndLoss?fromDate="+fromDate+"&toDate="+toDate+"&periods="+periods+"&timeframe=" + timeframe+"&trackingCategoryID=" + (trackingCategoryID==null? "" : System.Uri.EscapeDataString(trackingCategoryID))+"&trackingCategoryID2=" + (trackingCategoryID2==null? "" : System.Uri.EscapeDataString(trackingCategoryID2))+"&trackingOptionID=" + (trackingOptionID==null? "" : System.Uri.EscapeDataString(trackingOptionID))+"&trackingOptionID2=" + (trackingOptionID2==null? "" : System.Uri.EscapeDataString(trackingOptionID2))+"&standardLayout="+standardLayout+"&paymentsOnly="+paymentsOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWithRows>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for TrialBalance
		/// GetReportTrialBalance Reports/TrialBalance
		/// </summary>
		/// <param name="date">The date for the Trial Balance report e.g. 2018-03-31</param>
		/// <param name="paymentsOnly">Return cash only basis for the Trial Balance report</param>
		/// <returns>Success - return response of type ReportWithRows</returns>
		public async Task<ReportWithRows> GetReportTrialBalanceAsync(System.DateOnly date, bool paymentsOnly)
		{
			var requestUri = "Reports/TrialBalance?date="+date+"&paymentsOnly="+paymentsOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWithRows>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve report for TrialBalance
		/// GetReportTrialBalance Reports/TrialBalance
		/// </summary>
		/// <param name="date">The date for the Trial Balance report e.g. 2018-03-31</param>
		/// <param name="paymentsOnly">Return cash only basis for the Trial Balance report</param>
		/// <returns>Success - return response of type ReportWithRows</returns>
		public ReportWithRows GetReportTrialBalance(System.DateOnly date, bool paymentsOnly)
		{
			var requestUri = "Reports/TrialBalance?date="+date+"&paymentsOnly="+paymentsOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWithRows>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Tax Rates
		/// GetTaxRates TaxRates
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="TaxType">Filter by tax type</param>
		/// <returns>Success - return response of type TaxRates array with TaxRates</returns>
		public async Task<TaxRates> GetTaxRatesAsync(string @where, string order, string TaxType)
		{
			var requestUri = "TaxRates?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&TaxType=" + (TaxType==null? "" : System.Uri.EscapeDataString(TaxType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaxRates>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve Tax Rates
		/// GetTaxRates TaxRates
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="TaxType">Filter by tax type</param>
		/// <returns>Success - return response of type TaxRates array with TaxRates</returns>
		public TaxRates GetTaxRates(string @where, string order, string TaxType)
		{
			var requestUri = "TaxRates?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&TaxType=" + (TaxType==null? "" : System.Uri.EscapeDataString(TaxType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaxRates>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create one or more Tax Rates
		/// CreateTaxRates TaxRates
		/// </summary>
		/// <param name="requestBody">TaxRates array with TaxRate object in body of request</param>
		/// <returns>Success - return response of type TaxRates array newly created TaxRate</returns>
		public async Task<TaxRates> CreateTaxRatesAsync(TaxRates requestBody)
		{
			var requestUri = "TaxRates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaxRates>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create one or more Tax Rates
		/// CreateTaxRates TaxRates
		/// </summary>
		/// <param name="requestBody">TaxRates array with TaxRate object in body of request</param>
		/// <returns>Success - return response of type TaxRates array newly created TaxRate</returns>
		public TaxRates CreateTaxRates(TaxRates requestBody)
		{
			var requestUri = "TaxRates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaxRates>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update Tax Rates
		/// UpdateTaxRate TaxRates
		/// </summary>
		/// <returns>Success - return response of type TaxRates array updated TaxRate</returns>
		public async Task<TaxRates> UpdateTaxRateAsync(TaxRates requestBody)
		{
			var requestUri = "TaxRates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaxRates>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update Tax Rates
		/// UpdateTaxRate TaxRates
		/// </summary>
		/// <returns>Success - return response of type TaxRates array updated TaxRate</returns>
		public TaxRates UpdateTaxRate(TaxRates requestBody)
		{
			var requestUri = "TaxRates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaxRates>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve tracking categories and options
		/// GetTrackingCategories TrackingCategories
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="includeArchived">e.g. includeArchived=true - Categories and options with a status of ARCHIVED will be included in the response</param>
		/// <returns>Success - return response of type TrackingCategories array of TrackingCategory</returns>
		public async Task<TrackingCategories> GetTrackingCategoriesAsync(string @where, string order, bool includeArchived)
		{
			var requestUri = "TrackingCategories?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&includeArchived="+includeArchived;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrackingCategories>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve tracking categories and options
		/// GetTrackingCategories TrackingCategories
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <param name="includeArchived">e.g. includeArchived=true - Categories and options with a status of ARCHIVED will be included in the response</param>
		/// <returns>Success - return response of type TrackingCategories array of TrackingCategory</returns>
		public TrackingCategories GetTrackingCategories(string @where, string order, bool includeArchived)
		{
			var requestUri = "TrackingCategories?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&includeArchived="+includeArchived;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrackingCategories>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create tracking categories
		/// CreateTrackingCategory TrackingCategories
		/// </summary>
		/// <param name="requestBody">TrackingCategory object in body of request</param>
		/// <returns>Success - return response of type TrackingCategories array of newly created TrackingCategory</returns>
		public async Task<TrackingCategories> CreateTrackingCategoryAsync(TrackingCategory requestBody)
		{
			var requestUri = "TrackingCategories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrackingCategories>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create tracking categories
		/// CreateTrackingCategory TrackingCategories
		/// </summary>
		/// <param name="requestBody">TrackingCategory object in body of request</param>
		/// <returns>Success - return response of type TrackingCategories array of newly created TrackingCategory</returns>
		public TrackingCategories CreateTrackingCategory(TrackingCategory requestBody)
		{
			var requestUri = "TrackingCategories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrackingCategories>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve tracking categories and options for specified category
		/// GetTrackingCategory TrackingCategories/{TrackingCategoryID}
		/// </summary>
		/// <param name="TrackingCategoryID">Unique identifier for a TrackingCategory</param>
		/// <returns>Success - return response of type TrackingCategories array of specified TrackingCategory</returns>
		public async Task<TrackingCategories> GetTrackingCategoryAsync(string TrackingCategoryID)
		{
			var requestUri = "TrackingCategories/"+ (TrackingCategoryID==null? "" : System.Uri.EscapeDataString(TrackingCategoryID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrackingCategories>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve tracking categories and options for specified category
		/// GetTrackingCategory TrackingCategories/{TrackingCategoryID}
		/// </summary>
		/// <param name="TrackingCategoryID">Unique identifier for a TrackingCategory</param>
		/// <returns>Success - return response of type TrackingCategories array of specified TrackingCategory</returns>
		public TrackingCategories GetTrackingCategory(string TrackingCategoryID)
		{
			var requestUri = "TrackingCategories/"+ (TrackingCategoryID==null? "" : System.Uri.EscapeDataString(TrackingCategoryID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrackingCategories>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to update tracking categories
		/// UpdateTrackingCategory TrackingCategories/{TrackingCategoryID}
		/// </summary>
		/// <param name="TrackingCategoryID">Unique identifier for a TrackingCategory</param>
		/// <returns>Success - return response of type TrackingCategories array of updated TrackingCategory</returns>
		public async Task<TrackingCategories> UpdateTrackingCategoryAsync(string TrackingCategoryID, TrackingCategory requestBody)
		{
			var requestUri = "TrackingCategories/"+ (TrackingCategoryID==null? "" : System.Uri.EscapeDataString(TrackingCategoryID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrackingCategories>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update tracking categories
		/// UpdateTrackingCategory TrackingCategories/{TrackingCategoryID}
		/// </summary>
		/// <param name="TrackingCategoryID">Unique identifier for a TrackingCategory</param>
		/// <returns>Success - return response of type TrackingCategories array of updated TrackingCategory</returns>
		public TrackingCategories UpdateTrackingCategory(string TrackingCategoryID, TrackingCategory requestBody)
		{
			var requestUri = "TrackingCategories/"+ (TrackingCategoryID==null? "" : System.Uri.EscapeDataString(TrackingCategoryID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrackingCategories>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to delete tracking categories
		/// DeleteTrackingCategory TrackingCategories/{TrackingCategoryID}
		/// </summary>
		/// <param name="TrackingCategoryID">Unique identifier for a TrackingCategory</param>
		/// <returns>Success - return response of type TrackingCategories array of deleted TrackingCategory</returns>
		public async Task<TrackingCategories> DeleteTrackingCategoryAsync(string TrackingCategoryID)
		{
			var requestUri = "TrackingCategories/"+ (TrackingCategoryID==null? "" : System.Uri.EscapeDataString(TrackingCategoryID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrackingCategories>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to delete tracking categories
		/// DeleteTrackingCategory TrackingCategories/{TrackingCategoryID}
		/// </summary>
		/// <param name="TrackingCategoryID">Unique identifier for a TrackingCategory</param>
		/// <returns>Success - return response of type TrackingCategories array of deleted TrackingCategory</returns>
		public TrackingCategories DeleteTrackingCategory(string TrackingCategoryID)
		{
			var requestUri = "TrackingCategories/"+ (TrackingCategoryID==null? "" : System.Uri.EscapeDataString(TrackingCategoryID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrackingCategories>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to create options for a specified tracking category
		/// CreateTrackingOptions TrackingCategories/{TrackingCategoryID}/Options
		/// </summary>
		/// <param name="TrackingCategoryID">Unique identifier for a TrackingCategory</param>
		/// <param name="requestBody">TrackingOption object in body of request</param>
		/// <returns>Success - return response of type TrackingOptions array of options for a specified category</returns>
		public async Task<TrackingOptions> CreateTrackingOptionsAsync(string TrackingCategoryID, TrackingOption requestBody)
		{
			var requestUri = "TrackingCategories/"+ (TrackingCategoryID==null? "" : System.Uri.EscapeDataString(TrackingCategoryID))+"/Options";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrackingOptions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to create options for a specified tracking category
		/// CreateTrackingOptions TrackingCategories/{TrackingCategoryID}/Options
		/// </summary>
		/// <param name="TrackingCategoryID">Unique identifier for a TrackingCategory</param>
		/// <param name="requestBody">TrackingOption object in body of request</param>
		/// <returns>Success - return response of type TrackingOptions array of options for a specified category</returns>
		public TrackingOptions CreateTrackingOptions(string TrackingCategoryID, TrackingOption requestBody)
		{
			var requestUri = "TrackingCategories/"+ (TrackingCategoryID==null? "" : System.Uri.EscapeDataString(TrackingCategoryID))+"/Options";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrackingOptions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update options for a specified tracking category
		/// UpdateTrackingOptions TrackingCategories/{TrackingCategoryID}/Options/{TrackingOptionID}
		/// </summary>
		/// <param name="TrackingCategoryID">Unique identifier for a TrackingCategory</param>
		/// <param name="TrackingOptionID">Unique identifier for a Tracking Option</param>
		/// <returns>Success - return response of type TrackingOptions array of options for a specified category</returns>
		public async Task<TrackingOptions> UpdateTrackingOptionsAsync(string TrackingCategoryID, string TrackingOptionID, TrackingOption requestBody)
		{
			var requestUri = "TrackingCategories/"+ (TrackingCategoryID==null? "" : System.Uri.EscapeDataString(TrackingCategoryID))+"/Options/"+ (TrackingOptionID==null? "" : System.Uri.EscapeDataString(TrackingOptionID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrackingOptions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update options for a specified tracking category
		/// UpdateTrackingOptions TrackingCategories/{TrackingCategoryID}/Options/{TrackingOptionID}
		/// </summary>
		/// <param name="TrackingCategoryID">Unique identifier for a TrackingCategory</param>
		/// <param name="TrackingOptionID">Unique identifier for a Tracking Option</param>
		/// <returns>Success - return response of type TrackingOptions array of options for a specified category</returns>
		public TrackingOptions UpdateTrackingOptions(string TrackingCategoryID, string TrackingOptionID, TrackingOption requestBody)
		{
			var requestUri = "TrackingCategories/"+ (TrackingCategoryID==null? "" : System.Uri.EscapeDataString(TrackingCategoryID))+"/Options/"+ (TrackingOptionID==null? "" : System.Uri.EscapeDataString(TrackingOptionID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrackingOptions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to delete a specified option for a specified tracking category
		/// DeleteTrackingOptions TrackingCategories/{TrackingCategoryID}/Options/{TrackingOptionID}
		/// </summary>
		/// <param name="TrackingCategoryID">Unique identifier for a TrackingCategory</param>
		/// <param name="TrackingOptionID">Unique identifier for a Tracking Option</param>
		/// <returns>Success - return response of type TrackingOptions array of remaining options for a specified category</returns>
		public async Task<TrackingOptions> DeleteTrackingOptionsAsync(string TrackingCategoryID, string TrackingOptionID)
		{
			var requestUri = "TrackingCategories/"+ (TrackingCategoryID==null? "" : System.Uri.EscapeDataString(TrackingCategoryID))+"/Options/"+ (TrackingOptionID==null? "" : System.Uri.EscapeDataString(TrackingOptionID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrackingOptions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to delete a specified option for a specified tracking category
		/// DeleteTrackingOptions TrackingCategories/{TrackingCategoryID}/Options/{TrackingOptionID}
		/// </summary>
		/// <param name="TrackingCategoryID">Unique identifier for a TrackingCategory</param>
		/// <param name="TrackingOptionID">Unique identifier for a Tracking Option</param>
		/// <returns>Success - return response of type TrackingOptions array of remaining options for a specified category</returns>
		public TrackingOptions DeleteTrackingOptions(string TrackingCategoryID, string TrackingOptionID)
		{
			var requestUri = "TrackingCategories/"+ (TrackingCategoryID==null? "" : System.Uri.EscapeDataString(TrackingCategoryID))+"/Options/"+ (TrackingOptionID==null? "" : System.Uri.EscapeDataString(TrackingOptionID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrackingOptions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve users
		/// GetUsers Users
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <returns>Success - return response of type Users array of all User</returns>
		public async Task<Users> GetUsersAsync(string @where, string order)
		{
			var requestUri = "Users?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Users>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve users
		/// GetUsers Users
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by an any element</param>
		/// <returns>Success - return response of type Users array of all User</returns>
		public Users GetUsers(string @where, string order)
		{
			var requestUri = "Users?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Users>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified user
		/// GetUser Users/{UserID}
		/// </summary>
		/// <param name="UserID">Unique identifier for a User</param>
		/// <returns>Success - return response of type Users array of specified User</returns>
		public async Task<Users> GetUserAsync(string UserID)
		{
			var requestUri = "Users/"+ (UserID==null? "" : System.Uri.EscapeDataString(UserID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Users>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to retrieve a specified user
		/// GetUser Users/{UserID}
		/// </summary>
		/// <param name="UserID">Unique identifier for a User</param>
		/// <returns>Success - return response of type Users array of specified User</returns>
		public Users GetUser(string UserID)
		{
			var requestUri = "Users/"+ (UserID==null? "" : System.Uri.EscapeDataString(UserID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStream();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Users>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GetReportBalanceSheetTimeframe
	{
		
		MONTH = 0,
		
		QUARTER = 1,
		
		YEAR = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
