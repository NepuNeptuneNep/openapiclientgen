//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	
	
	public class ApiResponse
	{
		
		public System.Nullable<System.Int32> Code { get; set; }
		
		public string Type { get; set; }
		
		public string Message { get; set; }
	}
	
	/// <summary>
	/// A representation of a cat
	/// </summary>
	public class Cat : Pet
	{
		
		/// <summary>
		/// The measured skill for hunting
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public CatHuntingSkill HuntingSkill { get; set; }
	}
	
	public enum CatHuntingSkill
	{
		
		clueless = 0,
		
		lazy = 1,
		
		adventurous = 2,
		
		aggressive = 3,
	}
	
	public class Category
	{
		
		/// <summary>
		/// Category ID
		/// </summary>
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Category name
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Test Sub Category
		/// </summary>
		public CategorySub Sub { get; set; }
	}
	
	public class CategorySub
	{
		
		/// <summary>
		/// Dumb Property
		/// </summary>
		public string Prop1 { get; set; }
	}
	
	/// <summary>
	/// A representation of a dog
	/// </summary>
	public class Dog : Pet
	{
		
		/// <summary>
		/// The size of the pack the dog is from
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public int PackSize { get; set; }
	}
	
	/// <summary>
	/// A representation of a honey bee
	/// </summary>
	public class HoneyBee : Pet
	{
		
		/// <summary>
		/// Average amount of honey produced per day in ounces
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public float HoneyPerDay { get; set; }
	}
	
	public class Order
	{
		
		/// <summary>
		/// Order ID
		/// </summary>
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Pet ID
		/// </summary>
		public System.Nullable<System.Int64> PetId { get; set; }
		
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Estimated ship date
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ShipDate { get; set; }
		
		/// <summary>
		/// Order Status
		/// </summary>
		public System.Nullable<OrderStatus> Status { get; set; }
		
		/// <summary>
		/// Indicates whenever order was completed or not
		/// </summary>
		public System.Nullable<System.Boolean> Complete { get; set; }
		
		/// <summary>
		/// Unique Request Id
		/// </summary>
		public string RequestId { get; set; }
	}
	
	public enum OrderStatus
	{
		
		placed = 0,
		
		approved = 1,
		
		delivered = 2,
	}
	
	public class Pet
	{
		
		/// <summary>
		/// Pet ID
		/// </summary>
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Categories this pet belongs to
		/// </summary>
		public Category Category { get; set; }
		
		/// <summary>
		/// The name given to a pet
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Name { get; set; }
		
		/// <summary>
		/// The list of URL to a cute photos featuring pet
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string[] PhotoUrls { get; set; }
		
		public Pet Friend { get; set; }
		
		/// <summary>
		/// Tags attached to the pet
		/// </summary>
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Pet status in the store
		/// </summary>
		public System.Nullable<PetStatus> Status { get; set; }
		
		/// <summary>
		/// Type of a pet
		/// </summary>
		public string PetType { get; set; }
	}
	
	public class Tag
	{
		
		/// <summary>
		/// Tag ID
		/// </summary>
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Tag name
		/// </summary>
		public string Name { get; set; }
	}
	
	public enum PetStatus
	{
		
		available = 0,
		
		pending = 1,
		
		sold = 2,
	}
	
	public class User
	{
		
		public System.Nullable<System.Int64> Id { get; set; }
		
		public Pet Pet { get; set; }
		
		/// <summary>
		/// User supplied username
		/// </summary>
		public string Username { get; set; }
		
		/// <summary>
		/// User first name
		/// </summary>
		public string FirstName { get; set; }
		
		/// <summary>
		/// User last name
		/// </summary>
		public string LastName { get; set; }
		
		/// <summary>
		/// User email address
		/// </summary>
		public string Email { get; set; }
		
		/// <summary>
		/// User password, MUST contain a mix of upper and lower case letters, as well as digits
		/// </summary>
		public string Password { get; set; }
		
		/// <summary>
		/// User phone number in international format
		/// </summary>
		public string Phone { get; set; }
		
		/// <summary>
		/// User status
		/// </summary>
		public System.Nullable<System.Int32> UserStatus { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Add a new pet to the store
		/// Add new pet to the store inventory.
		/// PetPost pet
		/// </summary>
		/// <param name="requestBody">Pet object that needs to be added to the store</param>
		public async Task PetPostAsync(Pet requestBody)
		{
			var requestUri = "pet";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update an existing pet
		/// PetPut pet
		/// </summary>
		/// <param name="requestBody">Pet object that needs to be added to the store</param>
		public async Task PetPutAsync(Pet requestBody)
		{
			var requestUri = "pet";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find pet by ID
		/// Returns a single pet
		/// Pet_petIdGet pet/{petId}
		/// </summary>
		/// <param name="petId">ID of pet to return</param>
		/// <returns>successful operation</returns>
		public async Task<Pet> Pet_petIdGetAsync(long petId)
		{
			var requestUri = "pet/"+petId;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Pet>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a pet
		/// Pet_petIdDelete pet/{petId}
		/// </summary>
		/// <param name="petId">Pet id to delete</param>
		public async Task Pet_petIdDeleteAsync(long petId)
		{
			var requestUri = "pet/"+petId;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Finds Pets by status
		/// Multiple status values can be provided with comma separated strings
		/// PetFindByStatusGetByStatus pet/findByStatus
		/// </summary>
		/// <param name="status">Status values that need to be considered for filter</param>
		/// <returns>successful operation</returns>
		public async Task<Pet[]> PetFindByStatusGetByStatusAsync(PetStatus[] status)
		{
			var requestUri = "pet/findByStatus?"+String.Join("&", status.Select(z => $"status={z}"));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Pet[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Finds Pets by tags
		/// Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
		/// PetFindByTagsGetByTags pet/findByTags
		/// </summary>
		/// <param name="tags">Tags to filter by</param>
		/// <returns>successful operation</returns>
		public async Task<Pet[]> PetFindByTagsGetByTagsAsync(string[] tags)
		{
			var requestUri = "pet/findByTags?"+String.Join("&", tags.Select(z => $"tags={Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Pet[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns pet inventories by status
		/// Returns a map of status codes to quantities
		/// StoreInventoryGet store/inventory
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, int>> StoreInventoryGetAsync()
		{
			var requestUri = "store/inventory";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, int>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Place an order for a pet
		/// StoreOrderPost store/order
		/// </summary>
		/// <param name="requestBody">order placed for purchasing the pet</param>
		/// <returns>successful operation</returns>
		public async Task<Order> StoreOrderPostAsync(Order requestBody)
		{
			var requestUri = "store/order";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Order>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find purchase order by ID
		/// For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
		/// StoreOrder_orderIdGet store/order/{orderId}
		/// </summary>
		/// <param name="orderId">ID of pet that needs to be fetched</param>
		/// <returns>successful operation</returns>
		public async Task<Order> StoreOrder_orderIdGetAsync(long orderId)
		{
			var requestUri = "store/order/"+orderId;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Order>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete purchase order by ID
		/// For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
		/// StoreOrder_orderIdDelete store/order/{orderId}
		/// </summary>
		/// <param name="orderId">ID of the order that needs to be deleted</param>
		public async Task StoreOrder_orderIdDeleteAsync(string orderId)
		{
			var requestUri = "store/order/"+ (orderId==null? "" : Uri.EscapeDataString(orderId));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create user
		/// This can only be done by the logged in user.
		/// UserPost user
		/// </summary>
		/// <param name="requestBody">Created user object</param>
		public async Task UserPostAsync(User requestBody)
		{
			var requestUri = "user";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get user by user name
		/// User_usernameGet user/{username}
		/// </summary>
		/// <param name="username">The name that needs to be fetched. Use user1 for testing. </param>
		/// <returns>successful operation</returns>
		public async Task<User> User_usernameGetAsync(string username)
		{
			var requestUri = "user/"+ (username==null? "" : Uri.EscapeDataString(username));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updated user
		/// This can only be done by the logged in user.
		/// User_usernamePut user/{username}
		/// </summary>
		/// <param name="username">name that need to be deleted</param>
		/// <param name="requestBody">Updated user object</param>
		public async Task User_usernamePutAsync(string username, User requestBody)
		{
			var requestUri = "user/"+ (username==null? "" : Uri.EscapeDataString(username));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete user
		/// This can only be done by the logged in user.
		/// User_usernameDelete user/{username}
		/// </summary>
		/// <param name="username">The name that needs to be deleted</param>
		public async Task User_usernameDeleteAsync(string username)
		{
			var requestUri = "user/"+ (username==null? "" : Uri.EscapeDataString(username));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates list of users with given input array
		/// UserCreateWithArrayPost user/createWithArray
		/// </summary>
		/// <param name="requestBody">List of user object</param>
		public async Task UserCreateWithArrayPostAsync(User[] requestBody)
		{
			var requestUri = "user/createWithArray";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates list of users with given input array
		/// UserCreateWithListPost user/createWithList
		/// </summary>
		/// <param name="requestBody">List of user object</param>
		public async Task UserCreateWithListPostAsync(User[] requestBody)
		{
			var requestUri = "user/createWithList";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Logs user into the system
		/// UserLoginGetByUsernameAndPassword user/login
		/// </summary>
		/// <param name="username">The user name for login</param>
		/// <param name="password">The password for login in clear text</param>
		/// <returns>successful operation</returns>
		public async Task<string> UserLoginGetByUsernameAndPasswordAsync(string username, string password)
		{
			var requestUri = "user/login?username=" + (username==null? "" : Uri.EscapeDataString(username))+"&password=" + (password==null? "" : Uri.EscapeDataString(password));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Logs out current logged in user session
		/// UserLogoutGet user/logout
		/// </summary>
		public async Task UserLogoutGetAsync()
		{
			var requestUri = "user/logout";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}
