//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents AAD (Azure Active Directory) data connector.
	/// </summary>
	public class AADDataConnector
	{
		
		/// <summary>
		/// AAD (Azure Active Directory) data connector properties.
		/// </summary>
		public AADDataConnectorProperties Properties { get; set; }
	}
	
	/// <summary>
	/// AAD (Azure Active Directory) data connector properties.
	/// </summary>
	public class AADDataConnectorProperties
	{
	}
	
	/// <summary>
	/// Represents AATP (Azure Advanced Threat Protection) data connector.
	/// </summary>
	public class AATPDataConnector
	{
		
		/// <summary>
		/// AATP (Azure Advanced Threat Protection) data connector properties.
		/// </summary>
		public AATPDataConnectorProperties Properties { get; set; }
	}
	
	/// <summary>
	/// AATP (Azure Advanced Threat Protection) data connector properties.
	/// </summary>
	public class AATPDataConnectorProperties
	{
	}
	
	/// <summary>
	/// Represents ASC (Azure Security Center) data connector.
	/// </summary>
	public class ASCDataConnector
	{
		
		/// <summary>
		/// ASC (Azure Security Center) data connector properties.
		/// </summary>
		public ASCDataConnectorProperties Properties { get; set; }
	}
	
	/// <summary>
	/// ASC (Azure Security Center) data connector properties.
	/// </summary>
	public class ASCDataConnectorProperties
	{
		
		/// <summary>
		/// The subscription id to connect to, and get the data from.
		/// </summary>
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// Action property bag base.
	/// </summary>
	public class ActionPropertiesBase
	{
		
		/// <summary>
		/// Logic App Resource Id, providers/Microsoft.Logic/workflows/{WorkflowID}.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string LogicAppResourceId { get; set; }
	}
	
	/// <summary>
	/// Action for alert rule.
	/// </summary>
	public class ActionRequest
	{
		
		/// <summary>
		/// Action property bag.
		/// </summary>
		public ActionRequestProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Action property bag.
	/// </summary>
	public class ActionRequestProperties
	{
		
		/// <summary>
		/// Logic App Callback URL for this specific workflow.
		/// </summary>
		public string TriggerUri { get; set; }
	}
	
	/// <summary>
	/// Action for alert rule.
	/// </summary>
	public class ActionResponse
	{
		
		/// <summary>
		/// Etag of the action.
		/// </summary>
		public string Etag { get; set; }
		
		/// <summary>
		/// Action property bag.
		/// </summary>
		public ActionResponseProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Action property bag.
	/// </summary>
	public class ActionResponseProperties
	{
		
		/// <summary>
		/// The name of the logic app's workflow.
		/// </summary>
		public string WorkflowId { get; set; }
	}
	
	/// <summary>
	/// List all the actions.
	/// </summary>
	public class ActionsList
	{
		
		/// <summary>
		/// URL to fetch the next set of actions.
		/// </summary>
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of actions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public ActionResponse[] Value { get; set; }
	}
	
	/// <summary>
	/// Alert rule.
	/// </summary>
	public class AlertRule
	{
	}
	
	/// <summary>
	/// Describes an Azure resource with kind.
	/// </summary>
	public class AlertRuleKind
	{
		
		/// <summary>
		/// The kind of the alert rule
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public AlertRuleKindKind Kind { get; set; }
	}
	
	public enum AlertRuleKindKind
	{
		
		Scheduled = 0,
		
		MicrosoftSecurityIncidentCreation = 1,
		
		Fusion = 2,
	}
	
	/// <summary>
	/// Alert rule template.
	/// </summary>
	public class AlertRuleTemplate
	{
	}
	
	/// <summary>
	/// alert rule template data sources
	/// </summary>
	public class AlertRuleTemplateDataSource
	{
		
		/// <summary>
		/// The connector id that provides the following data types
		/// </summary>
		public string ConnectorId { get; set; }
		
		/// <summary>
		/// The data types used by the alert rule template
		/// </summary>
		public string[] DataTypes { get; set; }
	}
	
	/// <summary>
	/// Base alert rule template property bag.
	/// </summary>
	public class AlertRuleTemplatePropertiesBase
	{
		
		/// <summary>
		/// the number of alert rules that were created by this template
		/// </summary>
		public System.Nullable<System.Int32> AlertRulesCreatedByTemplateCount { get; set; }
		
		/// <summary>
		/// The time that this alert rule template has been added.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDateUTC { get; set; }
		
		/// <summary>
		/// The description of the alert rule template.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// The display name for alert rule template.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The required data connectors for this template
		/// </summary>
		public AlertRuleTemplateDataSource[] RequiredDataConnectors { get; set; }
		
		/// <summary>
		/// The alert rule template status.
		/// </summary>
		public System.Nullable<AlertRuleTemplatePropertiesBaseStatus> Status { get; set; }
	}
	
	public enum AlertRuleTemplatePropertiesBaseStatus
	{
		
		Installed = 0,
		
		Available = 1,
		
		NotAvailable = 2,
	}
	
	/// <summary>
	/// The operation against the threshold that triggers alert rule.
	/// </summary>
	public enum AlertRuleTriggerOperator
	{
		
		GreaterThan = 0,
		
		LessThan = 1,
		
		Equal = 2,
		
		NotEqual = 3,
	}
	
	/// <summary>
	/// List all the alert rules.
	/// </summary>
	public class AlertRulesList
	{
		
		/// <summary>
		/// URL to fetch the next set of alert rules.
		/// </summary>
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of alert rules.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public AlertRule[] Value { get; set; }
	}
	
	/// <summary>
	/// The severity of the alert
	/// </summary>
	public enum AlertSeverity
	{
		
		High = 0,
		
		Medium = 1,
		
		Low = 2,
		
		Informational = 3,
	}
	
	/// <summary>
	/// Alerts data type for data connectors.
	/// </summary>
	public class AlertsDataTypeOfDataConnector
	{
		
		/// <summary>
		/// Alerts data type connection.
		/// </summary>
		public string Alerts { get; set; }
	}
	
	/// <summary>
	/// The severity for alerts created by this alert rule.
	/// </summary>
	public enum AttackTactic
	{
		
		InitialAccess = 0,
		
		Execution = 1,
		
		Persistence = 2,
		
		PrivilegeEscalation = 3,
		
		DefenseEvasion = 4,
		
		CredentialAccess = 5,
		
		Discovery = 6,
		
		LateralMovement = 7,
		
		Collection = 8,
		
		Exfiltration = 9,
		
		CommandAndControl = 10,
		
		Impact = 11,
	}
	
	/// <summary>
	/// Represents Amazon Web Services CloudTrail data connector.
	/// </summary>
	public class AwsCloudTrailDataConnector
	{
		
		/// <summary>
		/// Amazon Web Services CloudTrail data connector properties.
		/// </summary>
		public AwsCloudTrailDataConnectorProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Amazon Web Services CloudTrail data connector properties.
	/// </summary>
	public class AwsCloudTrailDataConnectorProperties
	{
		
		/// <summary>
		/// The Aws Role Arn (with CloudTrailReadOnly policy) that is used to access the Aws account.
		/// </summary>
		public string AwsRoleArn { get; set; }
		
		/// <summary>
		/// The available data types for Amazon Web Services CloudTrail data connector.
		/// </summary>
		public AwsCloudTrailDataConnectorDataTypes DataTypes { get; set; }
	}
	
	/// <summary>
	/// The available data types for Amazon Web Services CloudTrail data connector.
	/// </summary>
	public class AwsCloudTrailDataConnectorDataTypes
	{
		
		/// <summary>
		/// Logs data type.
		/// </summary>
		public string Logs { get; set; }
	}
	
	/// <summary>
	/// Error response structure.
	/// </summary>
	public class CloudError
	{
		
		/// <summary>
		/// Error details.
		/// </summary>
		public CloudErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// Error details.
	/// </summary>
	public class CloudErrorBody
	{
		
		/// <summary>
		/// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		public string Code { get; set; }
		
		/// <summary>
		/// A message describing the error, intended to be suitable for display in a user interface.
		/// </summary>
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Data connector.
	/// </summary>
	public class DataConnector
	{
	}
	
	/// <summary>
	/// Common field for data type in data connectors.
	/// </summary>
	public class DataConnectorDataTypeCommon
	{
		
		/// <summary>
		/// Describe whether this data type connection is enabled or not.
		/// </summary>
		public System.Nullable<DataConnectorDataTypeCommonState> State { get; set; }
	}
	
	public enum DataConnectorDataTypeCommonState
	{
		
		Enabled = 0,
		
		Disabled = 1,
	}
	
	/// <summary>
	/// Describes an Azure resource with kind.
	/// </summary>
	public class DataConnectorKind
	{
		
		/// <summary>
		/// The kind of the data connector
		/// </summary>
		public System.Nullable<DataConnectorKindKind> Kind { get; set; }
	}
	
	public enum DataConnectorKindKind
	{
		
		AzureActiveDirectory = 0,
		
		AzureSecurityCenter = 1,
		
		MicrosoftCloudAppSecurity = 2,
		
		ThreatIntelligence = 3,
		
		Office365 = 4,
		
		AmazonWebServicesCloudTrail = 5,
		
		AzureAdvancedThreatProtection = 6,
		
		MicrosoftDefenderAdvancedThreatProtection = 7,
	}
	
	/// <summary>
	/// List all the data connectors.
	/// </summary>
	public class DataConnectorList
	{
		
		/// <summary>
		/// URL to fetch the next set of data connectors.
		/// </summary>
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of data connectors.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public DataConnector[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties data connector on tenant level.
	/// </summary>
	public class DataConnectorTenantId
	{
		
		/// <summary>
		/// The tenant id to connect to, and get the data from.
		/// </summary>
		public string TenantId { get; set; }
	}
	
	/// <summary>
	/// Data connector properties.
	/// </summary>
	public class DataConnectorWithAlertsProperties
	{
		
		/// <summary>
		/// Alerts data type for data connectors.
		/// </summary>
		public AlertsDataTypeOfDataConnector DataTypes { get; set; }
	}
	
	/// <summary>
	/// Represents Fusion alert rule.
	/// </summary>
	public class FusionAlertRule
	{
		
		/// <summary>
		/// Fusion alert rule base property bag.
		/// </summary>
		public FusionAlertRuleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Fusion alert rule base property bag.
	/// </summary>
	public class FusionAlertRuleProperties
	{
		
		/// <summary>
		/// The Name of the alert rule template used to create this rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string AlertRuleTemplateName { get; set; }
		
		/// <summary>
		/// The description of the alert rule.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// The display name for alerts created by this alert rule.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Determines whether this alert rule is enabled or disabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// The last time that this alert has been modified.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastModifiedUtc { get; set; }
		
		/// <summary>
		/// The severity of the alert
		/// </summary>
		public AlertSeverity Severity { get; set; }
		
		/// <summary>
		/// The tactics of the alert rule
		/// </summary>
		public AttackTactic[] Tactics { get; set; }
	}
	
	/// <summary>
	/// Represents Fusion alert rule template.
	/// </summary>
	public class FusionAlertRuleTemplate
	{
		
		/// <summary>
		/// Fusion alert rule template properties
		/// </summary>
		public AlertRuleTemplatePropertiesBase Properties { get; set; }
	}
	
	/// <summary>
	/// Describes related incident information for the bookmark
	/// </summary>
	public class IncidentInfo
	{
		
		/// <summary>
		/// Incident Id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string IncidentId { get; set; }
		
		/// <summary>
		/// Relation Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string RelationName { get; set; }
		
		/// <summary>
		/// The severity of the incident
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public IncidentInfoSeverity Severity { get; set; }
		
		/// <summary>
		/// The title of the incident
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Title { get; set; }
	}
	
	public enum IncidentInfoSeverity
	{
		
		Critical = 0,
		
		High = 1,
		
		Medium = 2,
		
		Low = 3,
		
		Informational = 4,
	}
	
	/// <summary>
	/// Represents MCAS (Microsoft Cloud App Security) data connector.
	/// </summary>
	public class MCASDataConnector
	{
		
		/// <summary>
		/// MCAS (Microsoft Cloud App Security) data connector properties.
		/// </summary>
		public MCASDataConnectorProperties Properties { get; set; }
	}
	
	/// <summary>
	/// MCAS (Microsoft Cloud App Security) data connector properties.
	/// </summary>
	public class MCASDataConnectorProperties
	{
		
		/// <summary>
		/// The available data types for MCAS (Microsoft Cloud App Security) data connector.
		/// </summary>
		public MCASDataConnectorDataTypes DataTypes { get; set; }
	}
	
	/// <summary>
	/// The available data types for MCAS (Microsoft Cloud App Security) data connector.
	/// </summary>
	public class MCASDataConnectorDataTypes
	{
		
		/// <summary>
		/// Discovery log data type connection.
		/// </summary>
		public string DiscoveryLogs { get; set; }
	}
	
	/// <summary>
	/// Represents MDATP (Microsoft Defender Advanced Threat Protection) data connector.
	/// </summary>
	public class MDATPDataConnector
	{
		
		/// <summary>
		/// MDATP (Microsoft Defender Advanced Threat Protection) data connector properties.
		/// </summary>
		public MDATPDataConnectorProperties Properties { get; set; }
	}
	
	/// <summary>
	/// MDATP (Microsoft Defender Advanced Threat Protection) data connector properties.
	/// </summary>
	public class MDATPDataConnectorProperties
	{
	}
	
	/// <summary>
	/// Represents MicrosoftSecurityIncidentCreation rule.
	/// </summary>
	public class MicrosoftSecurityIncidentCreationAlertRule
	{
		
		/// <summary>
		/// MicrosoftSecurityIncidentCreation rule property bag.
		/// </summary>
		public MicrosoftSecurityIncidentCreationAlertRuleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// MicrosoftSecurityIncidentCreation rule property bag.
	/// </summary>
	public class MicrosoftSecurityIncidentCreationAlertRuleProperties
	{
		
		/// <summary>
		/// The Name of the alert rule template used to create this rule.
		/// </summary>
		public string AlertRuleTemplateName { get; set; }
		
		/// <summary>
		/// The description of the alert rule.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// The display name for alerts created by this alert rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Determines whether this alert rule is enabled or disabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// The last time that this alert has been modified.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastModifiedUtc { get; set; }
	}
	
	/// <summary>
	/// MicrosoftSecurityIncidentCreation rule common property bag.
	/// </summary>
	public class MicrosoftSecurityIncidentCreationAlertRuleCommonProperties
	{
		
		/// <summary>
		/// the alerts' displayNames on which the cases will be generated
		/// </summary>
		public string[] DisplayNamesFilter { get; set; }
		
		/// <summary>
		/// The alerts' productName on which the cases will be generated
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public MicrosoftSecurityIncidentCreationAlertRuleCommonPropertiesProductFilter ProductFilter { get; set; }
		
		/// <summary>
		/// the alerts' severities on which the cases will be generated
		/// </summary>
		public AlertSeverity[] SeveritiesFilter { get; set; }
	}
	
	public enum MicrosoftSecurityIncidentCreationAlertRuleCommonPropertiesProductFilter
	{
		
		Microsoft_Cloud_App_Security = 0,
		
		Azure_Security_Center = 1,
		
		Azure_Advanced_Threat_Protection = 2,
		
		Azure_Active_Directory_Identity_Protection = 3,
		
		Azure_Security_Center_for_IoT = 4,
	}
	
	/// <summary>
	/// Represents MicrosoftSecurityIncidentCreation rule template.
	/// </summary>
	public class MicrosoftSecurityIncidentCreationAlertRuleTemplate
	{
		
		/// <summary>
		/// MicrosoftSecurityIncidentCreation rule template properties
		/// </summary>
		public AlertRuleTemplatePropertiesBase Properties { get; set; }
	}
	
	/// <summary>
	/// Consent for Office365 tenant that already made.
	/// </summary>
	public class OfficeConsent
	{
		
		/// <summary>
		/// Consent property bag.
		/// </summary>
		public OfficeConsentProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Consent property bag.
	/// </summary>
	public class OfficeConsentProperties
	{
		
		/// <summary>
		/// The tenantId of the Office365 with the consent.
		/// </summary>
		public string TenantId { get; set; }
		
		/// <summary>
		/// The tenant name of the Office365 with the consent.
		/// </summary>
		public string TenantName { get; set; }
	}
	
	/// <summary>
	/// List of all the office365 consents.
	/// </summary>
	public class OfficeConsentList
	{
		
		/// <summary>
		/// URL to fetch the next set of office consents.
		/// </summary>
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of the consents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public OfficeConsent[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents office data connector.
	/// </summary>
	public class OfficeDataConnector
	{
		
		/// <summary>
		/// Office data connector properties.
		/// </summary>
		public OfficeDataConnectorProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Office data connector properties.
	/// </summary>
	public class OfficeDataConnectorProperties
	{
		
		/// <summary>
		/// The available data types for office data connector.
		/// </summary>
		public OfficeDataConnectorDataTypes DataTypes { get; set; }
	}
	
	/// <summary>
	/// The available data types for office data connector.
	/// </summary>
	public class OfficeDataConnectorDataTypes
	{
		
		/// <summary>
		/// Exchange data type connection.
		/// </summary>
		public string Exchange { get; set; }
		
		/// <summary>
		/// SharePoint data type connection.
		/// </summary>
		public string SharePoint { get; set; }
	}
	
	/// <summary>
	/// Operation provided by provider
	/// </summary>
	public class Operation
	{
		
		/// <summary>
		/// Properties of the operation
		/// </summary>
		public OperationDisplay Display { get; set; }
		
		/// <summary>
		/// Name of the operation
		/// </summary>
		public string Name { get; set; }
	}
	
	public class OperationDisplay
	{
		
		/// <summary>
		/// Description of the operation
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Operation name
		/// </summary>
		public string Operation { get; set; }
		
		/// <summary>
		/// Provider name
		/// </summary>
		public string Provider { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// Lists the operations available in the SecurityInsights RP.
	/// </summary>
	public class OperationsList
	{
		
		/// <summary>
		/// URL to fetch the next set of operations.
		/// </summary>
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of operations
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// An azure resource object
	/// </summary>
	public class Resource
	{
		
		/// <summary>
		/// Azure resource Id
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Azure resource name
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Azure resource type
		/// </summary>
		public string Type { get; set; }
	}
	
	/// <summary>
	/// An azure resource object with an Etag property
	/// </summary>
	public class ResourceWithEtag
	{
		
		/// <summary>
		/// Etag of the azure resource
		/// </summary>
		public string Etag { get; set; }
		
		/// <summary>
		/// Azure resource Id
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Azure resource name
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Azure resource type
		/// </summary>
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents scheduled alert rule.
	/// </summary>
	public class ScheduledAlertRule
	{
		
		/// <summary>
		/// Scheduled alert rule base property bag.
		/// </summary>
		public ScheduledAlertRuleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Scheduled alert rule base property bag.
	/// </summary>
	public class ScheduledAlertRuleProperties
	{
		
		/// <summary>
		/// The Name of the alert rule template used to create this rule.
		/// </summary>
		public string AlertRuleTemplateName { get; set; }
		
		/// <summary>
		/// The description of the alert rule.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// The display name for alerts created by this alert rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Determines whether this alert rule is enabled or disabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// The last time that this alert rule has been modified.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastModifiedUtc { get; set; }
		
		/// <summary>
		/// The suppression (in ISO 8601 duration format) to wait since last time this alert rule been triggered.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string SuppressionDuration { get; set; }
		
		/// <summary>
		/// Determines whether the suppression for this alert rule is enabled or disabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public bool SuppressionEnabled { get; set; }
		
		/// <summary>
		/// The tactics of the alert rule
		/// </summary>
		public AttackTactic[] Tactics { get; set; }
	}
	
	/// <summary>
	/// Schedule alert rule template property bag.
	/// </summary>
	public class ScheduledAlertRuleCommonProperties
	{
		
		/// <summary>
		/// The query that creates alerts for this rule.
		/// </summary>
		public string Query { get; set; }
		
		/// <summary>
		/// The frequency (in ISO 8601 duration format) for this alert rule to run.
		/// </summary>
		public string QueryFrequency { get; set; }
		
		/// <summary>
		/// The period (in ISO 8601 duration format) that this alert rule looks at.
		/// </summary>
		public string QueryPeriod { get; set; }
		
		/// <summary>
		/// The severity of the alert
		/// </summary>
		public AlertSeverity Severity { get; set; }
		
		/// <summary>
		/// The operation against the threshold that triggers alert rule.
		/// </summary>
		public AlertRuleTriggerOperator TriggerOperator { get; set; }
		
		/// <summary>
		/// The threshold triggers this alert rule.
		/// </summary>
		public System.Nullable<System.Int32> TriggerThreshold { get; set; }
	}
	
	/// <summary>
	/// Represents scheduled alert rule template.
	/// </summary>
	public class ScheduledAlertRuleTemplate
	{
		
		/// <summary>
		/// Scheduled alert rule template properties
		/// </summary>
		public AlertRuleTemplatePropertiesBase Properties { get; set; }
	}
	
	/// <summary>
	/// The Setting.
	/// </summary>
	public class Settings
	{
	}
	
	/// <summary>
	/// Describes an Azure resource with kind.
	/// </summary>
	public class SettingsKind
	{
		
		/// <summary>
		/// The kind of the setting
		/// </summary>
		public System.Nullable<SettingsKindKind> Kind { get; set; }
	}
	
	public enum SettingsKindKind
	{
		
		UebaSettings = 0,
		
		ToggleSettings = 1,
	}
	
	/// <summary>
	/// Represents threat intelligence data connector.
	/// </summary>
	public class TIDataConnector
	{
		
		/// <summary>
		/// TI (Threat Intelligence) data connector properties.
		/// </summary>
		public TIDataConnectorProperties Properties { get; set; }
	}
	
	/// <summary>
	/// TI (Threat Intelligence) data connector properties.
	/// </summary>
	public class TIDataConnectorProperties
	{
		
		/// <summary>
		/// The available data types for TI (Threat Intelligence) data connector.
		/// </summary>
		public TIDataConnectorDataTypes DataTypes { get; set; }
	}
	
	/// <summary>
	/// The available data types for TI (Threat Intelligence) data connector.
	/// </summary>
	public class TIDataConnectorDataTypes
	{
		
		/// <summary>
		/// Data type for indicators connection.
		/// </summary>
		public string Indicators { get; set; }
	}
	
	/// <summary>
	/// ThreatIntelligence property bag.
	/// </summary>
	public class ThreatIntelligence
	{
		
		/// <summary>
		/// Confidence (must be between 0 and 1)
		/// </summary>
		public System.Nullable<System.Double> Confidence { get; set; }
		
		/// <summary>
		/// Name of the provider from whom this Threat Intelligence information was received
		/// </summary>
		public string ProviderName { get; set; }
		
		/// <summary>
		/// Report link
		/// </summary>
		public string ReportLink { get; set; }
		
		/// <summary>
		/// Threat description (free text)
		/// </summary>
		public string ThreatDescription { get; set; }
		
		/// <summary>
		/// Threat name (e.g. "Jedobot malware")
		/// </summary>
		public string ThreatName { get; set; }
		
		/// <summary>
		/// Threat type (e.g. "Botnet")
		/// </summary>
		public string ThreatType { get; set; }
	}
	
	/// <summary>
	/// Settings with single toggle.
	/// </summary>
	public class ToggleSettings
	{
		
		/// <summary>
		/// toggle property bag.
		/// </summary>
		public ToggleSettingsProperties Properties { get; set; }
	}
	
	/// <summary>
	/// toggle property bag.
	/// </summary>
	public class ToggleSettingsProperties
	{
		
		/// <summary>
		/// Determines whether the setting is enable or disabled.
		/// </summary>
		public System.Nullable<System.Boolean> IsEnabled { get; set; }
	}
	
	/// <summary>
	/// Represents settings for User and Entity Behavior Analytics enablement.
	/// </summary>
	public class UebaSettings
	{
		
		/// <summary>
		/// User and Entity Behavior Analytics settings property bag.
		/// </summary>
		public UebaSettingsProperties Properties { get; set; }
	}
	
	/// <summary>
	/// User and Entity Behavior Analytics settings property bag.
	/// </summary>
	public class UebaSettingsProperties
	{
		
		/// <summary>
		/// Determines whether the tenant has ATP (Advanced Threat Protection) license.
		/// </summary>
		public DataConnectorDataTypeCommonState AtpLicenseStatus { get; set; }
		
		/// <summary>
		/// Determines whether User and Entity Behavior Analytics is enabled for this workspace.
		/// </summary>
		public System.Nullable<System.Boolean> IsEnabled { get; set; }
		
		/// <summary>
		/// Determines whether User and Entity Behavior Analytics is enabled from MCAS (Microsoft Cloud App Security).
		/// </summary>
		public DataConnectorDataTypeCommonState StatusInMcas { get; set; }
	}
	
	/// <summary>
	/// User information that made some action
	/// </summary>
	public class UserInfo
	{
		
		/// <summary>
		/// The email of the user.
		/// </summary>
		public string Email { get; set; }
		
		/// <summary>
		/// The name of the user.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The object id of the user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string ObjectId { get; set; }
	}
	
	public partial class MyClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public MyClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all operations available Azure Security Insights Resource Provider.
		/// Operations_List providers/Microsoft.SecurityInsights/operations
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <returns>OK. Successfully retrieved operations list.</returns>
		public async Task<OperationsList> Operations_ListAsync(Operations_ListApi_version api_version)
		{
			var requestUri = "providers/Microsoft.SecurityInsights/operations?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationsList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all operations available Azure Security Insights Resource Provider.
		/// Operations_List providers/Microsoft.SecurityInsights/operations
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <returns>OK. Successfully retrieved operations list.</returns>
		public OperationsList Operations_List(Operations_ListApi_version api_version)
		{
			var requestUri = "providers/Microsoft.SecurityInsights/operations?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationsList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all alert rules.
		/// AlertRules_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <returns>OK</returns>
		public async Task<AlertRulesList> AlertRules_ListAsync(AlertRules_ListApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/alertRules?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertRulesList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all alert rules.
		/// AlertRules_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <returns>OK</returns>
		public AlertRulesList AlertRules_List(AlertRules_ListApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/alertRules?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertRulesList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the alert rule.
		/// AlertRules_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="ruleId">Alert rule ID</param>
		/// <returns>OK</returns>
		public async Task<AlertRule> AlertRules_GetAsync(AlertRules_GetApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName, string ruleId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/alertRules/"+ (ruleId==null? "" : Uri.EscapeDataString(ruleId))+"?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the alert rule.
		/// AlertRules_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="ruleId">Alert rule ID</param>
		/// <returns>OK</returns>
		public AlertRule AlertRules_Get(AlertRules_GetApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName, string ruleId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/alertRules/"+ (ruleId==null? "" : Uri.EscapeDataString(ruleId))+"?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the alert rule.
		/// AlertRules_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="ruleId">Alert rule ID</param>
		/// <param name="requestBody">The alert rule</param>
		/// <returns>OK</returns>
		public async Task<AlertRule> AlertRules_CreateOrUpdateAsync(AlertRules_CreateOrUpdateApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName, string ruleId, AlertRule requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/alertRules/"+ (ruleId==null? "" : Uri.EscapeDataString(ruleId))+"?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the alert rule.
		/// AlertRules_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="ruleId">Alert rule ID</param>
		/// <param name="requestBody">The alert rule</param>
		/// <returns>OK</returns>
		public AlertRule AlertRules_CreateOrUpdate(AlertRules_CreateOrUpdateApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName, string ruleId, AlertRule requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/alertRules/"+ (ruleId==null? "" : Uri.EscapeDataString(ruleId))+"?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete the alert rule.
		/// AlertRules_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="ruleId">Alert rule ID</param>
		/// <returns>OK</returns>
		public async Task AlertRules_DeleteAsync(AlertRules_DeleteApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName, string ruleId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/alertRules/"+ (ruleId==null? "" : Uri.EscapeDataString(ruleId))+"?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the alert rule.
		/// AlertRules_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="ruleId">Alert rule ID</param>
		/// <returns>OK</returns>
		public void AlertRules_Delete(AlertRules_DeleteApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName, string ruleId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/alertRules/"+ (ruleId==null? "" : Uri.EscapeDataString(ruleId))+"?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all actions of alert rule.
		/// Actions_ListByAlertRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}/actions
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="ruleId">Alert rule ID</param>
		/// <returns>OK</returns>
		public async Task<ActionsList> Actions_ListByAlertRuleAsync(Actions_ListByAlertRuleApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName, string ruleId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/alertRules/"+ (ruleId==null? "" : Uri.EscapeDataString(ruleId))+"/actions?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActionsList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all actions of alert rule.
		/// Actions_ListByAlertRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}/actions
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="ruleId">Alert rule ID</param>
		/// <returns>OK</returns>
		public ActionsList Actions_ListByAlertRule(Actions_ListByAlertRuleApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName, string ruleId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/alertRules/"+ (ruleId==null? "" : Uri.EscapeDataString(ruleId))+"/actions?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActionsList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the action of alert rule.
		/// AlertRules_GetAction subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}/actions/{actionId}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="ruleId">Alert rule ID</param>
		/// <param name="actionId">Action ID</param>
		/// <returns>OK</returns>
		public async Task<ActionResponse> AlertRules_GetActionAsync(AlertRules_GetActionApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName, string ruleId, string actionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/alertRules/"+ (ruleId==null? "" : Uri.EscapeDataString(ruleId))+"/actions/"+ (actionId==null? "" : Uri.EscapeDataString(actionId))+"?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the action of alert rule.
		/// AlertRules_GetAction subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}/actions/{actionId}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="ruleId">Alert rule ID</param>
		/// <param name="actionId">Action ID</param>
		/// <returns>OK</returns>
		public ActionResponse AlertRules_GetAction(AlertRules_GetActionApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName, string ruleId, string actionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/alertRules/"+ (ruleId==null? "" : Uri.EscapeDataString(ruleId))+"/actions/"+ (actionId==null? "" : Uri.EscapeDataString(actionId))+"?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the action of alert rule.
		/// AlertRules_CreateOrUpdateAction subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}/actions/{actionId}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="ruleId">Alert rule ID</param>
		/// <param name="actionId">Action ID</param>
		/// <param name="requestBody">The action</param>
		/// <returns>OK</returns>
		public async Task<ActionResponse> AlertRules_CreateOrUpdateActionAsync(AlertRules_CreateOrUpdateActionApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName, string ruleId, string actionId, Action requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/alertRules/"+ (ruleId==null? "" : Uri.EscapeDataString(ruleId))+"/actions/"+ (actionId==null? "" : Uri.EscapeDataString(actionId))+"?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the action of alert rule.
		/// AlertRules_CreateOrUpdateAction subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}/actions/{actionId}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="ruleId">Alert rule ID</param>
		/// <param name="actionId">Action ID</param>
		/// <param name="requestBody">The action</param>
		/// <returns>OK</returns>
		public ActionResponse AlertRules_CreateOrUpdateAction(AlertRules_CreateOrUpdateActionApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName, string ruleId, string actionId, Action requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/alertRules/"+ (ruleId==null? "" : Uri.EscapeDataString(ruleId))+"/actions/"+ (actionId==null? "" : Uri.EscapeDataString(actionId))+"?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete the action of alert rule.
		/// AlertRules_DeleteAction subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}/actions/{actionId}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="ruleId">Alert rule ID</param>
		/// <param name="actionId">Action ID</param>
		/// <returns>OK</returns>
		public async Task AlertRules_DeleteActionAsync(AlertRules_DeleteActionApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName, string ruleId, string actionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/alertRules/"+ (ruleId==null? "" : Uri.EscapeDataString(ruleId))+"/actions/"+ (actionId==null? "" : Uri.EscapeDataString(actionId))+"?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the action of alert rule.
		/// AlertRules_DeleteAction subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}/actions/{actionId}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="ruleId">Alert rule ID</param>
		/// <param name="actionId">Action ID</param>
		/// <returns>OK</returns>
		public void AlertRules_DeleteAction(AlertRules_DeleteActionApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName, string ruleId, string actionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/alertRules/"+ (ruleId==null? "" : Uri.EscapeDataString(ruleId))+"/actions/"+ (actionId==null? "" : Uri.EscapeDataString(actionId))+"?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all data connectors.
		/// DataConnectors_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectors
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <returns>OK</returns>
		public async Task<DataConnectorList> DataConnectors_ListAsync(DataConnectors_ListApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/dataConnectors?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataConnectorList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all data connectors.
		/// DataConnectors_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectors
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <returns>OK</returns>
		public DataConnectorList DataConnectors_List(DataConnectors_ListApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/dataConnectors?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataConnectorList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a data connector.
		/// DataConnectors_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectors/{dataConnectorId}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="dataConnectorId">Connector ID</param>
		/// <returns>OK</returns>
		public async Task<DataConnector> DataConnectors_GetAsync(DataConnectors_GetApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName, string dataConnectorId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/dataConnectors/"+ (dataConnectorId==null? "" : Uri.EscapeDataString(dataConnectorId))+"?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataConnector>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a data connector.
		/// DataConnectors_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectors/{dataConnectorId}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="dataConnectorId">Connector ID</param>
		/// <returns>OK</returns>
		public DataConnector DataConnectors_Get(DataConnectors_GetApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName, string dataConnectorId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/dataConnectors/"+ (dataConnectorId==null? "" : Uri.EscapeDataString(dataConnectorId))+"?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataConnector>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the data connector.
		/// DataConnectors_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectors/{dataConnectorId}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="dataConnectorId">Connector ID</param>
		/// <param name="requestBody">The data connector</param>
		/// <returns>OK</returns>
		public async Task<DataConnector> DataConnectors_CreateOrUpdateAsync(DataConnectors_CreateOrUpdateApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName, string dataConnectorId, DataConnector requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/dataConnectors/"+ (dataConnectorId==null? "" : Uri.EscapeDataString(dataConnectorId))+"?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataConnector>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the data connector.
		/// DataConnectors_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectors/{dataConnectorId}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="dataConnectorId">Connector ID</param>
		/// <param name="requestBody">The data connector</param>
		/// <returns>OK</returns>
		public DataConnector DataConnectors_CreateOrUpdate(DataConnectors_CreateOrUpdateApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName, string dataConnectorId, DataConnector requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/dataConnectors/"+ (dataConnectorId==null? "" : Uri.EscapeDataString(dataConnectorId))+"?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataConnector>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete the data connector.
		/// DataConnectors_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectors/{dataConnectorId}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="dataConnectorId">Connector ID</param>
		/// <returns>OK</returns>
		public async Task DataConnectors_DeleteAsync(DataConnectors_DeleteApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName, string dataConnectorId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/dataConnectors/"+ (dataConnectorId==null? "" : Uri.EscapeDataString(dataConnectorId))+"?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the data connector.
		/// DataConnectors_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectors/{dataConnectorId}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="dataConnectorId">Connector ID</param>
		/// <returns>OK</returns>
		public void DataConnectors_Delete(DataConnectors_DeleteApi_version api_version, string subscriptionId, string resourceGroupName, string workspaceName, string dataConnectorId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.OperationalInsights/workspaces/"+ (workspaceName==null? "" : Uri.EscapeDataString(workspaceName))+"/providers/Microsoft.SecurityInsights/dataConnectors/"+ (dataConnectorId==null? "" : Uri.EscapeDataString(dataConnectorId))+"?api-version=" + api_version;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Operations_ListApi_version
	{
		
		_2020_01_01 = 0,
	}
	
	public enum AlertRules_ListApi_version
	{
		
		_2020_01_01 = 0,
	}
	
	public enum AlertRules_GetApi_version
	{
		
		_2020_01_01 = 0,
	}
	
	public enum AlertRules_CreateOrUpdateApi_version
	{
		
		_2020_01_01 = 0,
	}
	
	public enum AlertRules_DeleteApi_version
	{
		
		_2020_01_01 = 0,
	}
	
	public enum Actions_ListByAlertRuleApi_version
	{
		
		_2020_01_01 = 0,
	}
	
	public enum AlertRules_GetActionApi_version
	{
		
		_2020_01_01 = 0,
	}
	
	public enum AlertRules_CreateOrUpdateActionApi_version
	{
		
		_2020_01_01 = 0,
	}
	
	public enum AlertRules_DeleteActionApi_version
	{
		
		_2020_01_01 = 0,
	}
	
	public enum DataConnectors_ListApi_version
	{
		
		_2020_01_01 = 0,
	}
	
	public enum DataConnectors_GetApi_version
	{
		
		_2020_01_01 = 0,
	}
	
	public enum DataConnectors_CreateOrUpdateApi_version
	{
		
		_2020_01_01 = 0,
	}
	
	public enum DataConnectors_DeleteApi_version
	{
		
		_2020_01_01 = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
