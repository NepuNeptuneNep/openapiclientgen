//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	
	
	public class BBSReportRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public ProviderType PayeeProvider { get; set; }
		
		/// <summary>
		/// Min length: 6
		/// Max length: 6
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string ClaimId { get; set; }
		
		public System.Nullable<System.DateOnly> LodgementDate { get; set; }
	}
	
	public class ProviderType
	{
		
		/// <summary>
		/// Required
		/// Min length: 8
		/// Max length: 8
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public string ProviderNumber { get; set; }
	}
	
	public class BBSPaymentReportResponseType
	{
		
		public PaymentRunType PaymentRun { get; set; }
		
		public PaymentType PaymentInfo { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ClaimSummaryType[] ClaimSummary { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Status { get; set; }
	}
	
	public class PaymentRunType
	{
		
		public string PayerName { get; set; }
		
		public System.Nullable<System.DateOnly> RunDate { get; set; }
		
		public string RunNumber { get; set; }
	}
	
	public class PaymentType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public BankAccountType AccountInfo { get; set; }
		
		public string DepositAmount { get; set; }
		
		public string PaymentReference { get; set; }
	}
	
	public class BankAccountType
	{
		
		/// <summary>
		/// Min length: 1
		/// Max length: 30
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// Min length: 6
		/// Max length: 6
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string BsbCode { get; set; }
	}
	
	public class ClaimSummaryType
	{
		
		public string AccountReferenceId { get; set; }
		
		public string Benefit { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string ChargeAmount { get; set; }
		
		public string ClaimChannelCode { get; set; }
		
		public string ClaimId { get; set; }
		
		public System.Nullable<System.DateOnly> LodgementDate { get; set; }
		
		public string TransactionId { get; set; }
	}
	
	public class ServiceMessagesType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public ServiceMessagesTypeHighestSeverity HighestSeverity { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ServiceMessageType[] ServiceMessage { get; set; }
	}
	
	public enum ServiceMessagesTypeHighestSeverity
	{
		
		Fatal = 0,
		
		Error = 1,
		
		Warning = 2,
		
		Informational = 3,
	}
	
	public class ServiceMessageType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public ServiceMessagesTypeHighestSeverity Severity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Reason { get; set; }
	}
	
	public class BBSProcessingReportResponseType
	{
		
		public ClaimAssessmentType ClaimAssessment { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Status { get; set; }
	}
	
	public class ClaimAssessmentType
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public MedicalEventResponseType[] MedicalEvent { get; set; }
		
		public ProviderType ServiceProvider { get; set; }
		
		public string BenefitPaid { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string ChargeAmount { get; set; }
		
		public string ClaimId { get; set; }
	}
	
	public class MedicalEventResponseType
	{
		
		public MembershipStatusType Patient { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ServiceResponseType[] Service { get; set; }
		
		public string Id { get; set; }
		
		public System.Nullable<System.DateOnly> EventDate { get; set; }
	}
	
	public class MembershipStatusType
	{
		
		public StatusType Status { get; set; }
		
		public MembershipType CurrentMembership { get; set; }
		
		public IdentityType CurrentMember { get; set; }
		
		public System.Nullable<System.DateOnly> ProcessDate { get; set; }
	}
	
	public class StatusType
	{
		
		public System.Nullable<System.Int32> Code { get; set; }
		
		public string Text { get; set; }
	}
	
	public class MembershipType
	{
		
		/// <summary>
		/// Min length: 10
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string MemberNumber { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string MemberRefNumber { get; set; }
	}
	
	public class IdentityType
	{
		
		public System.Nullable<System.DateOnly> DateOfBirth { get; set; }
		
		public string FamilyName { get; set; }
		
		public string GivenName { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string SecondInitial { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Sex { get; set; }
	}
	
	public class ServiceResponseType
	{
		
		public StatusType Error { get; set; }
		
		public string Id { get; set; }
		
		public string AssessmentCode { get; set; }
		
		public string BenefitPaid { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string ChargeAmount { get; set; }
		
		public string ItemNumber { get; set; }
		
		public string NumberOfPatientsSeen { get; set; }
	}
	
	public class BulkBillStoreForwardRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public BulkBillClaimStoreForwardClaimType Claim { get; set; }
	}
	
	public class BulkBillClaimStoreForwardClaimType
	{
		
		/// <summary>
		/// Min length: 8
		/// Max length: 8
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public string FacilityId { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string HospitalInd { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public BBSMedicalEventType[] MedicalEvent { get; set; }
		
		public ProviderType PayeeProvider { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public ProviderType ServiceProvider { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string ServiceTypeCode { get; set; }
	}
	
	public class BBSMedicalEventType
	{
		
		/// <summary>
		/// Required
		/// Min length: 2
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateOnly AuthorisationDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateTimeOffset CreateDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateOnly MedicalEventDate { get; set; }
		
		/// <summary>
		/// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]*)?(Z|z|(([+]|-)([0-1][0-9]|2[0-3]):[0-5][0-9]))?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]*)?(Z|z|(([+]|-)([0-1][0-9]|2[0-3]):[0-5][0-9]))?$")]
		public string MedicalEventTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public MedicarePatientType Patient { get; set; }
		
		public ReferralType Referral { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string ReferralOverrideCode { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ServiceType[] Service { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string SubmissionAuthorityInd { get; set; }
	}
	
	public class MedicarePatientType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public IdentityType Identity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public MembershipType Medicare { get; set; }
	}
	
	public class ReferralType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateOnly IssueDate { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Period { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string PeriodCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public ProviderType Provider { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string TypeCode { get; set; }
	}
	
	public class ServiceType
	{
		
		/// <summary>
		/// Required
		/// Min length: 4
		/// Max length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Id { get; set; }
		
		public System.Nullable<System.DateTimeOffset> AccessionDateTime { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string AftercareOverrideInd { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string ChargeAmount { get; set; }
		
		public System.Nullable<System.DateTimeOffset> CollectionDateTime { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string DuplicateServiceOverrideInd { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string FieldQuantity { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string ItemNumber { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 6
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string LspNumber { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string MultipleProcedureOverrideInd { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string NumberOfPatientsSeen { get; set; }
		
		/// <summary>
		/// Min length: 2
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string RestrictiveOverrideCode { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Rule3ExemptInd { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string S4b3ExemptInd { get; set; }
		
		/// <summary>
		/// Min length: 3
		/// Max length: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string ScpId { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string SelfDeemedCode { get; set; }
		
		public string Text { get; set; }
		
		/// <summary>
		/// Min length: 3
		/// Max length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string TimeDuration { get; set; }
	}
	
	public class BulkBillStoreForwardResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string ClaimId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Status { get; set; }
	}
	
	public class AlliedHealthClaimRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public VAAClaimType Claim { get; set; }
	}
	
	public class VAAClaimType
	{
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string HospitalInd { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public VAAMedicalEventType[] MedicalEvent { get; set; }
		
		public ProviderType PayeeProvider { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public ProviderType ServiceProvider { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string ServiceTypeCode { get; set; }
	}
	
	public class VAAMedicalEventType
	{
		
		/// <summary>
		/// Required
		/// Min length: 2
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Id { get; set; }
		
		public AcceptedDisabilityType AcceptedDisability { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateOnly AuthorisationDate { get; set; }
		
		public System.Nullable<System.DateOnly> BreakInEpisodeEndDate { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string BreakInEpisodeOfCareNumber { get; set; }
		
		public System.Nullable<System.DateOnly> BreakInEpisodeStartDate { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string NumberOfCNCHours { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string NumberOfCNCVisits { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateTimeOffset CreateDateTime { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string NumberOfENHours { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string NumberOfENVisits { get; set; }
		
		/// <summary>
		/// Min length: 8
		/// Max length: 8
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public string FacilityId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateOnly MedicalEventDate { get; set; }
		
		/// <summary>
		/// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]*)?(Z|z|(([+]|-)([0-1][0-9]|2[0-3]):[0-5][0-9]))?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]*)?(Z|z|(([+]|-)([0-1][0-9]|2[0-3]):[0-5][0-9]))?$")]
		public string MedicalEventTime { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string NumberOfNSSHours { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string NumberOfNSSVisits { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public VeteranPatientType Patient { get; set; }
		
		public ReferralType Referral { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string ReferralOverrideCode { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string NumberOfRNHours { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string NumberOfRNVisits { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public VAAServiceType[] Service { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string SubmissionAuthorityInd { get; set; }
	}
	
	public class AcceptedDisabilityType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Ind { get; set; }
	}
	
	public class VAAServiceType
	{
		
		/// <summary>
		/// Required
		/// Min length: 4
		/// Max length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Id { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 8
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public string AccountReferenceNumber { get; set; }
		
		public System.Nullable<System.DateOnly> AdmissionDate { get; set; }
		
		/// <summary>
		/// Min length: 3
		/// Max length: 7
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(7)]
		public string ChargeAmount { get; set; }
		
		public System.Nullable<System.DateOnly> DischargeDate { get; set; }
		
		public System.Nullable<System.Int32> DistanceKilometres { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string DuplicateServiceOverrideInd { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string ItemNumber { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string MultipleProcedureOverrideInd { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string NumberOfPatientsSeen { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string NumberOfTeeth { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string OpticalScriptCode { get; set; }
		
		/// <summary>
		/// Min length: 2
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string RestrictiveOverrideCode { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string SecondDeviceInd { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string SelfDeemedCode { get; set; }
		
		public string Text { get; set; }
		
		/// <summary>
		/// Min length: 3
		/// Max length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string TimeDuration { get; set; }
		
		/// <summary>
		/// Min length: 2
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string ToothNumber { get; set; }
		
		/// <summary>
		/// Min length: 3
		/// Max length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string UpperLowerJawCode { get; set; }
	}
	
	public class VeteranPatientType : PatientType
	{
		
		public VeteranMembershipType VeteranMembership { get; set; }
	}
	
	public class VeteranMembershipType
	{
		
		/// <summary>
		/// Required
		/// Min length: 3
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string VeteranNumber { get; set; }
	}
	
	public class PatientType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public IdentityType Identity { get; set; }
		
		public AddressType ResidentialAddress { get; set; }
	}
	
	public class AddressType
	{
		
		/// <summary>
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AddressLineOne { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AddressLineTwo { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Locality { get; set; }
		
		/// <summary>
		/// Min length: 4
		/// Max length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Postcode { get; set; }
	}
	
	public class AlliedHealthClaimResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string ClaimId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Status { get; set; }
	}
	
	public class DVAClaimRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public DVAClaimType Claim { get; set; }
	}
	
	public class DVAClaimType
	{
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string HospitalInd { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string ServiceTypeCode { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DVAMedicalEventType[] MedicalEvent { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public ProviderType ServiceProvider { get; set; }
		
		public ProviderType PayeeProvider { get; set; }
	}
	
	public class DVAMedicalEventType
	{
		
		/// <summary>
		/// Required
		/// Min length: 2
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateOnly AuthorisationDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateTimeOffset CreateDateTime { get; set; }
		
		/// <summary>
		/// Min length: 8
		/// Max length: 8
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public string FacilityId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateOnly MedicalEventDate { get; set; }
		
		/// <summary>
		/// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]*)?(Z|z|(([+]|-)([0-1][0-9]|2[0-3]):[0-5][0-9]))?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]*)?(Z|z|(([+]|-)([0-1][0-9]|2[0-3]):[0-5][0-9]))?$")]
		public string MedicalEventTime { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string ReferralOverrideCode { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string SubmissionAuthorityInd { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string TreatmentLocationCode { get; set; }
		
		public AcceptedDisabilityType AcceptedDisability { get; set; }
		
		public ReferralType Referral { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public VeteranPatientType Patient { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DVAServiceType[] Service { get; set; }
	}
	
	public class DVAServiceType : ServiceType
	{
		
		/// <summary>
		/// Min length: 1
		/// Max length: 8
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public string AccountReferenceNumber { get; set; }
		
		public System.Nullable<System.Int32> DistanceKilometres { get; set; }
	}
	
	public class DVAClaimResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string ClaimId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Status { get; set; }
	}
	
	public class DVAReportRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public ProviderType PayeeProvider { get; set; }
		
		/// <summary>
		/// Min length: 6
		/// Max length: 6
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string ClaimId { get; set; }
		
		public System.Nullable<System.DateOnly> LodgementDate { get; set; }
	}
	
	public class DVAPaymentReportResponseType
	{
		
		public PaymentRunType PaymentRun { get; set; }
		
		public PaymentType PaymentInfo { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ClaimSummaryType[] ClaimSummary { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Status { get; set; }
	}
	
	public class DVAProcessingReportResponseType
	{
		
		public DVAClaimAssessmentType ClaimAssessment { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Status { get; set; }
	}
	
	public class DVAClaimAssessmentType
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DVAMedicalEventAssessmentType[] MedicalEvent { get; set; }
		
		public ProviderType ServiceProvider { get; set; }
		
		public string BenefitPaid { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string ChargeAmount { get; set; }
		
		public string ClaimId { get; set; }
	}
	
	public class DVAMedicalEventAssessmentType
	{
		
		public VeteranMembershipStatusType Patient { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DVAServiceAssessmentType[] Service { get; set; }
		
		public string Id { get; set; }
		
		public System.Nullable<System.DateOnly> EventDate { get; set; }
	}
	
	public class VeteranMembershipStatusType
	{
		
		public VeteranMembershipResponseType CurrentMembership { get; set; }
		
		public IdentityType CurrentMember { get; set; }
		
		public StatusType Status { get; set; }
		
		public System.Nullable<System.DateOnly> ProcessDate { get; set; }
	}
	
	public class DVAServiceAssessmentType
	{
		
		public string Id { get; set; }
		
		public string AccountReferenceNumber { get; set; }
		
		public string AssessmentCode { get; set; }
		
		public string BenefitPaid { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string ChargeAmount { get; set; }
		
		public string GstInd { get; set; }
		
		public string ItemNumber { get; set; }
		
		public string NumberOfPatientsSeen { get; set; }
	}
	
	public class VeteranMembershipResponseType : VeteranMembershipType
	{
		
		public string EntitlementCode { get; set; }
	}
	
	public class EnterpriseConcessionVerificationRequestType
	{
		
		public System.Nullable<System.Int32> Timeout { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ReferenceConcessionVerificationRequestType[] ConcessionVerificationRequest { get; set; }
	}
	
	public class ReferenceConcessionVerificationRequestType : ConcessionVerificationRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Id { get; set; }
	}
	
	public class ConcessionVerificationRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public MedicarePatientType Patient { get; set; }
		
		public System.Nullable<System.DateOnly> DateOfService { get; set; }
	}
	
	public class EnterpriseConcessionVerificationResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Status { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ReferenceConcessionVerificationResponseType[] ConcessionVerificationResponse { get; set; }
	}
	
	public class ReferenceConcessionVerificationResponseType : ConcessionVerificationResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Id { get; set; }
	}
	
	public class ConcessionVerificationResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public MembershipStatusType MedicareStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public ConcessionStatusType ConcessionStatus { get; set; }
	}
	
	public class ConcessionStatusType
	{
		
		public StatusType Status { get; set; }
		
		public System.Nullable<System.DateOnly> ProcessDate { get; set; }
	}
	
	public class EnterprisePatientVerificationRequestType
	{
		
		public System.Nullable<System.Int32> Timeout { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ReferencePatientVerificationRequestType[] PatientVerificationRequest { get; set; }
	}
	
	public class ReferencePatientVerificationRequestType : PatientVerificationRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Id { get; set; }
	}
	
	public class PatientVerificationRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public FundPatientType Patient { get; set; }
		
		public ProviderType Provider { get; set; }
		
		public System.Nullable<System.DateOnly> DateOfService { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 3
		/// Max length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string TypeCode { get; set; }
	}
	
	public class FundPatientType : PatientType
	{
		
		public IdentityType AlsoKnownAs { get; set; }
		
		public MembershipType Medicare { get; set; }
		
		public FundMembershipType HealthFund { get; set; }
	}
	
	public class FundMembershipType
	{
		
		/// <summary>
		/// Min length: 1
		/// Max length: 19
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		public string MemberNumber { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string MemberRefNumber { get; set; }
		
		/// <summary>
		/// Min length: 3
		/// Max length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Organisation { get; set; }
	}
	
	public class EnterprisePatientVerificationResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Status { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ReferencePatientVerificationResponseType[] PatientVerificationResponse { get; set; }
	}
	
	public class ReferencePatientVerificationResponseType : PatientVerificationResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Id { get; set; }
	}
	
	public class PatientVerificationResponseType
	{
		
		public MembershipStatusType MedicareStatus { get; set; }
		
		public FundMembershipStatusType HealthFundStatus { get; set; }
	}
	
	public class FundMembershipStatusType
	{
		
		public StatusType Status { get; set; }
		
		public FundMembershipType CurrentMembership { get; set; }
		
		public IdentityType CurrentMember { get; set; }
		
		public System.Nullable<System.DateOnly> ProcessDate { get; set; }
	}
	
	public class EnterpriseVeteranVerificationRequestType
	{
		
		public System.Nullable<System.Int32> Timeout { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ReferenceVeteranVerificationRequestType[] VeteranVerificationRequest { get; set; }
	}
	
	public class ReferenceVeteranVerificationRequestType : VeteranVerificationRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Id { get; set; }
	}
	
	public class VeteranVerificationRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public VeteranPatientType Patient { get; set; }
	}
	
	public class EnterpriseVeteranVerificationResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Status { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ReferenceVeteranVerificationResponseType[] VeteranVerificationResponse { get; set; }
	}
	
	public class ReferenceVeteranVerificationResponseType : VeteranVerificationResponseType
	{
		
		public string Id { get; set; }
	}
	
	public class VeteranVerificationResponseType
	{
		
		public VeteranMembershipStatusType VeteranStatus { get; set; }
	}
	
	public class PatientClaimInteractiveRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public PatientClaimInteractiveType PatientClaimInteractive { get; set; }
	}
	
	public class PatientClaimInteractiveType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public MedicarePatientType Patient { get; set; }
		
		public ReferralType Referral { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public ClaimantType Claimant { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public PCIMedicalEventType[] MedicalEvent { get; set; }
		
		public ProviderType PayeeProvider { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public ProviderType ServiceProvider { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string ReferralOverrideCode { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string AccountPaidInd { get; set; }
		
		public string AccountReferenceId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string SubmissionAuthorityInd { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateOnly AuthorisationDate { get; set; }
	}
	
	public class PCIMedicalEventType
	{
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public PCIServiceType[] Service { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 2
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public System.DateOnly MedicalEventDate { get; set; }
		
		/// <summary>
		/// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]*)?(Z|z|(([+]|-)([0-1][0-9]|2[0-3]):[0-5][0-9]))?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]*)?(Z|z|(([+]|-)([0-1][0-9]|2[0-3]):[0-5][0-9]))?$")]
		public string MedicalEventTime { get; set; }
	}
	
	public class PCIServiceType : ServiceType
	{
		
		/// <summary>
		/// Min length: 3
		/// Max length: 7
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(7)]
		public string PatientContribAmount { get; set; }
		
		/// <summary>
		/// Min length: 8
		/// Max length: 8
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public string FacilityId { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string HospitalInd { get; set; }
	}
	
	public class ClaimantType : MedicarePatientType
	{
		
		public BankAccountType EftDetails { get; set; }
		
		public AddressType ResidentialAddress { get; set; }
		
		public ContactType ContactDetails { get; set; }
	}
	
	public class ContactType
	{
		
		/// <summary>
		/// Min length: 5
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(5)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string EmailAddress { get; set; }
		
		public string Name { get; set; }
		
		/// <summary>
		/// Min length: 8
		/// Max length: 19
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		public string PhoneNumber { get; set; }
	}
	
	public class PatientClaimInteractiveResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public PCIAssessmentType ClaimAssessment { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Status { get; set; }
	}
	
	public class PCIAssessmentType
	{
		
		public CurrentMembershipType Claimant { get; set; }
		
		public CurrentMembershipType Patient { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public PCIMedicalEventResponseType[] MedicalEvent { get; set; }
		
		public StatusType Error { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string ClaimId { get; set; }
	}
	
	public class CurrentMembershipType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public MembershipType CurrentMembership { get; set; }
	}
	
	public class PCIMedicalEventResponseType
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ServiceResponseType[] Service { get; set; }
		
		public System.Nullable<System.DateOnly> EventDate { get; set; }
		
		public string Id { get; set; }
	}
	
	public class RetrieveReportRequestType
	{
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] TransactionId { get; set; }
	}
	
	public class RetrieveReportResponseType
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ContentType[] Content { get; set; }
	}
	
	public class ContentType
	{
		
		public string TransactionId { get; set; }
		
		public string Status { get; set; }
	}
	
	public class EnterpriseConcessionVerificationReportContentType : ContentType
	{
		
		public EnterpriseConcessionVerificationResponseType Report { get; set; }
	}
	
	public class EnterprisePatientVerificationReportContentType : ContentType
	{
		
		public EnterprisePatientVerificationResponseType Report { get; set; }
	}
	
	public class EnterpriseVeteranVerificationReportContentType : ContentType
	{
		
		public EnterpriseVeteranVerificationResponseType Report { get; set; }
	}
	
	public class SameDayDeleteRequestType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public SameDayDeleteType SameDayDelete { get; set; }
	}
	
	public class SameDayDeleteType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public MedicarePatientType Patient { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 3
		/// Max length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string ReasonCode { get; set; }
	}
	
	public class SameDayDeleteResponseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Status { get; set; }
	}
	
	public class StatusReportRequestType
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] TransactionId { get; set; }
		
		public string AssociateName { get; set; }
		
		public System.Nullable<System.DateTimeOffset> FromDateTime { get; set; }
		
		public System.Nullable<System.DateTimeOffset> ToDateTime { get; set; }
		
		public string ReportStatus { get; set; }
		
		public string RequestTransmissionType { get; set; }
		
		public string Status { get; set; }
	}
	
	public class StatusReportResponseType
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public TransactionStatusType[] TransactionStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Status { get; set; }
	}
	
	public class TransactionStatusType
	{
		
		public string AssociateName { get; set; }
		
		public System.Nullable<System.DateTimeOffset> LodgementDateTime { get; set; }
		
		public string ProcessStatus { get; set; }
		
		public string Reference { get; set; }
		
		public string ReportStatus { get; set; }
		
		public string RequestTransmissionType { get; set; }
		
		public string TransactionId { get; set; }
	}
	
	public partial class McpClient
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public McpClient(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// This is the request
		/// McpBulkBillPaymentReport1Eigw mcp/bulkbillpaymentreport/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<BBSPaymentReportResponseType> McpBulkBillPaymentReport1EigwAsync(BBSReportRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/bulkbillpaymentreport/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BBSPaymentReportResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpBulkBillProcessingReport1Eigw mcp/bulkbillprocessingreport/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<BBSProcessingReportResponseType> McpBulkBillProcessingReport1EigwAsync(BBSReportRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/bulkbillprocessingreport/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BBSProcessingReportResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpBulkBillStoreForwardGeneral1Eigw mcp/bulkbillstoreforward/general/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<BulkBillStoreForwardResponseType> McpBulkBillStoreForwardGeneral1EigwAsync(BulkBillStoreForwardRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/bulkbillstoreforward/general/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BulkBillStoreForwardResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpBulkBillStoreForwardPathology1Eigw mcp/bulkbillstoreforward/pathology/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<BulkBillStoreForwardResponseType> McpBulkBillStoreForwardPathology1EigwAsync(BulkBillStoreForwardRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/bulkbillstoreforward/pathology/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BulkBillStoreForwardResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpBulkBillStoreForwardSpecialist1Eigw mcp/bulkbillstoreforward/specialist/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<BulkBillStoreForwardResponseType> McpBulkBillStoreForwardSpecialist1EigwAsync(BulkBillStoreForwardRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/bulkbillstoreforward/specialist/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BulkBillStoreForwardResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaAlliedHealthAllied1Eigw mcp/dvaalliedhealth/allied/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<AlliedHealthClaimResponseType> McpDvaAlliedHealthAllied1EigwAsync(AlliedHealthClaimRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvaalliedhealth/allied/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlliedHealthClaimResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaAlliedHealthCommunityNursing1Eigw mcp/dvaalliedhealth/communitynursing/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<AlliedHealthClaimResponseType> McpDvaAlliedHealthCommunityNursing1EigwAsync(AlliedHealthClaimRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvaalliedhealth/communitynursing/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlliedHealthClaimResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaAlliedHealthDental1Eigw mcp/dvaalliedhealth/dental/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<AlliedHealthClaimResponseType> McpDvaAlliedHealthDental1EigwAsync(AlliedHealthClaimRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvaalliedhealth/dental/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlliedHealthClaimResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaAlliedHealthOptical1Eigw mcp/dvaalliedhealth/optical/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<AlliedHealthClaimResponseType> McpDvaAlliedHealthOptical1EigwAsync(AlliedHealthClaimRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvaalliedhealth/optical/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlliedHealthClaimResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaAlliedHealthPsych1Eigw mcp/dvaalliedhealth/psych/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<AlliedHealthClaimResponseType> McpDvaAlliedHealthPsych1EigwAsync(AlliedHealthClaimRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvaalliedhealth/psych/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlliedHealthClaimResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaAlliedHealthSpeechPathology1Eigw mcp/dvaalliedhealth/speechpathology/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<AlliedHealthClaimResponseType> McpDvaAlliedHealthSpeechPathology1EigwAsync(AlliedHealthClaimRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvaalliedhealth/speechpathology/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlliedHealthClaimResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaClaimGeneral1Eigw mcp/dvaclaim/general/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<DVAClaimResponseType> McpDvaClaimGeneral1EigwAsync(DVAClaimRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvaclaim/general/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DVAClaimResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaClaimPathology1Eigw mcp/dvaclaim/pathology/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<DVAClaimResponseType> McpDvaClaimPathology1EigwAsync(DVAClaimRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvaclaim/pathology/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DVAClaimResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaClaimSpecialist1Eigw mcp/dvaclaim/specialist/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<DVAClaimResponseType> McpDvaClaimSpecialist1EigwAsync(DVAClaimRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvaclaim/specialist/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DVAClaimResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaPaymentReport1Eigw mcp/dvapaymentreport/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<DVAPaymentReportResponseType> McpDvaPaymentReport1EigwAsync(DVAReportRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvapaymentreport/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DVAPaymentReportResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpDvaProcessingReport1Eigw mcp/dvaprocessingreport/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<DVAProcessingReportResponseType> McpDvaProcessingReport1EigwAsync(DVAReportRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/dvaprocessingreport/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DVAProcessingReportResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpEnterpriseConcessionVerification1Eigw mcp/enterpriseconcessionverification/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<EnterpriseConcessionVerificationResponseType> McpEnterpriseConcessionVerification1EigwAsync(EnterpriseConcessionVerificationRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/enterpriseconcessionverification/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnterpriseConcessionVerificationResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpEnterprisePatientVerification1Eigw mcp/enterprisepatientverification/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<EnterprisePatientVerificationResponseType> McpEnterprisePatientVerification1EigwAsync(EnterprisePatientVerificationRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/enterprisepatientverification/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnterprisePatientVerificationResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpEnterpriseVeteranVerification1Eigw mcp/enterpriseveteranverification/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<EnterpriseVeteranVerificationResponseType> McpEnterpriseVeteranVerification1EigwAsync(EnterpriseVeteranVerificationRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/enterpriseveteranverification/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnterpriseVeteranVerificationResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpPatientClaimInteractiveGeneral1Eigw mcp/patientclaiminteractive/general/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<PatientClaimInteractiveResponseType> McpPatientClaimInteractiveGeneral1EigwAsync(PatientClaimInteractiveRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/patientclaiminteractive/general/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PatientClaimInteractiveResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpPatientClaimInteractivePathology1Eigw mcp/patientclaiminteractive/pathology/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<PatientClaimInteractiveResponseType> McpPatientClaimInteractivePathology1EigwAsync(PatientClaimInteractiveRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/patientclaiminteractive/pathology/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PatientClaimInteractiveResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpPatientClaimInteractiveSpecialist1Eigw mcp/patientclaiminteractive/specialist/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<PatientClaimInteractiveResponseType> McpPatientClaimInteractiveSpecialist1EigwAsync(PatientClaimInteractiveRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/patientclaiminteractive/specialist/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PatientClaimInteractiveResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpPatientVerification1Eigw mcp/patientverification/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<PatientVerificationResponseType> McpPatientVerification1EigwAsync(PatientVerificationRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/patientverification/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PatientVerificationResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpPatientVerificationHf1Eigw mcp/patientverification/hf/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<PatientVerificationResponseType> McpPatientVerificationHf1EigwAsync(PatientVerificationRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/patientverification/hf/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PatientVerificationResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpPatientVerificationMedicare1Eigw mcp/patientverification/medicare/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<PatientVerificationResponseType> McpPatientVerificationMedicare1EigwAsync(PatientVerificationRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/patientverification/medicare/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PatientVerificationResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpRetrieveReportEcv1Eigw mcp/enterpriseconcessionverification/retrievereport/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<RetrieveReportResponseType> McpRetrieveReportEcv1EigwAsync(RetrieveReportRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/enterpriseconcessionverification/retrievereport/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveReportResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpRetrieveReportEpv1Eigw mcp/enterprisepatientverification/retrievereport/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<RetrieveReportResponseType> McpRetrieveReportEpv1EigwAsync(RetrieveReportRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/enterprisepatientverification/retrievereport/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveReportResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpRetrieveReportEvv1Eigw mcp/enterpriseveteranverification/retrievereport/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<RetrieveReportResponseType> McpRetrieveReportEvv1EigwAsync(RetrieveReportRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/enterpriseveteranverification/retrievereport/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveReportResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpSameDayDelete1Eigw mcp/samedaydelete/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<SameDayDeleteResponseType> McpSameDayDelete1EigwAsync(SameDayDeleteRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/samedaydelete/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SameDayDeleteResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpStatusReport1Eigw mcp/statusreport/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<StatusReportResponseType> McpStatusReport1EigwAsync(StatusReportRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/statusreport/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StatusReportResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This is the request
		/// McpVeteranVerification1Eigw mcp/veteranverification/v1
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<VeteranVerificationResponseType> McpVeteranVerification1EigwAsync(VeteranVerificationRequestType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mcp/veteranverification/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VeteranVerificationResponseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}
