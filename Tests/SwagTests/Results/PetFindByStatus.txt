//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	
	
	/// <summary>
	/// A representation of a cat
	/// </summary>
	public class Cat : Pet
	{
		
		/// <summary>
		/// The measured skill for hunting
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public CatHuntingSkill HuntingSkill { get; set; }
	}
	
	public enum CatHuntingSkill
	{
		
		clueless = 0,
		
		lazy = 1,
		
		adventurous = 2,
		
		aggressive = 3,
	}
	
	public class Category
	{
		
		/// <summary>
		/// Category ID
		/// </summary>
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Category name
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Test Sub Category
		/// </summary>
		public CategorySub Sub { get; set; }
	}
	
	public class CategorySub
	{
		
		/// <summary>
		/// Dumb Property
		/// </summary>
		public string Prop1 { get; set; }
	}
	
	/// <summary>
	/// A representation of a dog
	/// </summary>
	public class Dog : Pet
	{
		
		/// <summary>
		/// The size of the pack the dog is from
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public int PackSize { get; set; }
	}
	
	/// <summary>
	/// A representation of a honey bee
	/// </summary>
	public class HoneyBee : Pet
	{
		
		/// <summary>
		/// Average amount of honey produced per day in ounces
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public float HoneyPerDay { get; set; }
	}
	
	public class Pet
	{
		
		/// <summary>
		/// Pet ID
		/// </summary>
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Categories this pet belongs to
		/// </summary>
		public Category Category { get; set; }
		
		/// <summary>
		/// The name given to a pet
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Name { get; set; }
		
		/// <summary>
		/// The list of URL to a cute photos featuring pet
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string[] PhotoUrls { get; set; }
		
		public Pet Friend { get; set; }
		
		/// <summary>
		/// Tags attached to the pet
		/// </summary>
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Pet status in the store
		/// </summary>
		public System.Nullable<PetStatus> Status { get; set; }
		
		/// <summary>
		/// Type of a pet
		/// </summary>
		public string PetType { get; set; }
	}
	
	public class Tag
	{
		
		/// <summary>
		/// Tag ID
		/// </summary>
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Tag name
		/// </summary>
		public string Name { get; set; }
	}
	
	public enum PetStatus
	{
		
		available = 0,
		
		pending = 1,
		
		sold = 2,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Finds Pets by status
		/// Multiple status values can be provided with comma separated strings
		/// FindPetsByStatus pet/findByStatus
		/// </summary>
		/// <param name="status">Status values that need to be considered for filter</param>
		/// <returns>successful operation</returns>
		public async Task<Pet[]> FindPetsByStatusAsync(PetStatus[] status)
		{
			var requestUri = "pet/findByStatus?"+String.Join("&", status.Select(z => $"status={z}"));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Pet[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Finds Pets by status
		/// Multiple status values can be provided with comma separated strings
		/// FindPetsByStatus pet/findByStatus
		/// </summary>
		/// <param name="status">Status values that need to be considered for filter</param>
		/// <returns>successful operation</returns>
		public Pet[] FindPetsByStatus(PetStatus[] status)
		{
			var requestUri = "pet/findByStatus?"+String.Join("&", status.Select(z => $"status={z}"));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Pet[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Finds Pets by status
		/// Multiple status values can be provided with comma separated strings
		/// FindPetsByStatus2 pet/findByStatus2
		/// </summary>
		/// <param name="status">Status values that need to be considered for filter</param>
		/// <returns>successful operation</returns>
		public async Task<Pet[]> FindPetsByStatus2Async(PetStatus status)
		{
			var requestUri = "pet/findByStatus2?status=" + status;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Pet[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Finds Pets by status
		/// Multiple status values can be provided with comma separated strings
		/// FindPetsByStatus2 pet/findByStatus2
		/// </summary>
		/// <param name="status">Status values that need to be considered for filter</param>
		/// <returns>successful operation</returns>
		public Pet[] FindPetsByStatus2(PetStatus status)
		{
			var requestUri = "pet/findByStatus2?status=" + status;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Pet[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Finds Pets by status
		/// Multiple status values can be provided with comma separated strings
		/// FindPetsByStatus3 pet/findByStatus3
		/// </summary>
		/// <param name="status">Status values that need to be considered for filter</param>
		/// <returns>successful operation</returns>
		public async Task<Pet[]> FindPetsByStatus3Async(PetStatus status)
		{
			var requestUri = "pet/findByStatus3?status=" + status;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Pet[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Finds Pets by status
		/// Multiple status values can be provided with comma separated strings
		/// FindPetsByStatus3 pet/findByStatus3
		/// </summary>
		/// <param name="status">Status values that need to be considered for filter</param>
		/// <returns>successful operation</returns>
		public Pet[] FindPetsByStatus3(PetStatus status)
		{
			var requestUri = "pet/findByStatus3?status=" + status;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Pet[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}
