//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public class Assets
	{
		
		public Pagination Pagination { get; set; }
		
		public Asset[] Items { get; set; }
	}
	
	public class Asset
	{
		
		/// <summary>
		/// The Xero-generated Id for the asset
		/// </summary>
		public string AssetId { get; set; }
		
		/// <summary>
		/// The name of the asset
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string AssetName { get; set; }
		
		/// <summary>
		/// The Xero-generated Id for the asset type
		/// </summary>
		public string AssetTypeId { get; set; }
		
		/// <summary>
		/// Must be unique.
		/// </summary>
		public string AssetNumber { get; set; }
		
		/// <summary>
		/// The date the asset was purchased YYYY-MM-DD
		/// </summary>
		public System.Nullable<System.DateOnly> PurchaseDate { get; set; }
		
		/// <summary>
		/// The purchase price of the asset
		/// </summary>
		public System.Nullable<System.Double> PurchasePrice { get; set; }
		
		/// <summary>
		/// The price the asset was disposed at
		/// </summary>
		public System.Nullable<System.Double> DisposalPrice { get; set; }
		
		/// <summary>
		/// See Asset Status Codes.
		/// </summary>
		public System.Nullable<AssetAssetStatus> AssetStatus { get; set; }
		
		/// <summary>
		/// The date the asset’s warranty expires (if needed) YYYY-MM-DD
		/// </summary>
		public string WarrantyExpiryDate { get; set; }
		
		/// <summary>
		/// The asset's serial number
		/// </summary>
		public string SerialNumber { get; set; }
		
		public BookDepreciationSetting BookDepreciationSetting { get; set; }
		
		public BookDepreciationDetail BookDepreciationDetail { get; set; }
		
		/// <summary>
		/// Boolean to indicate whether depreciation can be rolled back for this asset individually. This is true if it doesn't have 'legacy' journal entries and if there is no lock period that would prevent this asset from rolling back.
		/// </summary>
		public System.Nullable<System.Boolean> CanRollback { get; set; }
		
		/// <summary>
		/// The accounting value of the asset
		/// </summary>
		public System.Nullable<System.Double> AccountingBookValue { get; set; }
		
		/// <summary>
		/// Boolean to indicate whether delete is enabled
		/// </summary>
		public System.Nullable<System.Boolean> IsDeleteEnabledForDate { get; set; }
	}
	
	public enum AssetAssetStatus
	{
		
		Draft = 0,
		
		Registered = 1,
		
		Disposed = 2,
	}
	
	public class Pagination
	{
		
		public System.Nullable<System.Int32> Page { get; set; }
		
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		public System.Nullable<System.Int32> PageCount { get; set; }
		
		public System.Nullable<System.Int32> ItemCount { get; set; }
	}
	
	/// <summary>
	/// See Asset Status Codes.
	/// </summary>
	public enum AssetStatus
	{
		
		Draft = 0,
		
		Registered = 1,
		
		Disposed = 2,
	}
	
	/// <summary>
	/// See Asset Status Codes.
	/// </summary>
	public enum AssetStatusQueryParam
	{
		
		DRAFT = 0,
		
		REGISTERED = 1,
		
		DISPOSED = 2,
	}
	
	public class AssetType
	{
		
		/// <summary>
		/// Xero generated unique identifier for asset types
		/// </summary>
		public string AssetTypeId { get; set; }
		
		/// <summary>
		/// The name of the asset type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string AssetTypeName { get; set; }
		
		/// <summary>
		/// The asset account for fixed assets of this type
		/// </summary>
		public string FixedAssetAccountId { get; set; }
		
		/// <summary>
		/// The expense account for the depreciation of fixed assets of this type
		/// </summary>
		public string DepreciationExpenseAccountId { get; set; }
		
		/// <summary>
		/// The account for accumulated depreciation of fixed assets of this type
		/// </summary>
		public string AccumulatedDepreciationAccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public BookDepreciationSetting BookDepreciationSetting { get; set; }
		
		/// <summary>
		/// All asset types that have accumulated depreciation for any assets that use them are deemed ‘locked’ and cannot be removed.
		/// </summary>
		public System.Nullable<System.Int32> Locks { get; set; }
	}
	
	public class BookDepreciationSetting
	{
		
		/// <summary>
		/// The method of depreciation applied to this asset. See Depreciation Methods
		/// </summary>
		public System.Nullable<BookDepreciationSettingDepreciationMethod> DepreciationMethod { get; set; }
		
		/// <summary>
		/// The method of averaging applied to this asset. See Averaging Methods
		/// </summary>
		public System.Nullable<BookDepreciationSettingAveragingMethod> AveragingMethod { get; set; }
		
		/// <summary>
		/// The rate of depreciation (e.g. 0.05)
		/// </summary>
		public System.Nullable<System.Double> DepreciationRate { get; set; }
		
		/// <summary>
		/// Effective life of the asset in years (e.g. 5)
		/// </summary>
		public System.Nullable<System.Int32> EffectiveLifeYears { get; set; }
		
		/// <summary>
		/// See Depreciation Calculation Methods
		/// </summary>
		public System.Nullable<BookDepreciationSettingDepreciationCalculationMethod> DepreciationCalculationMethod { get; set; }
		
		/// <summary>
		/// Unique Xero identifier for the depreciable object
		/// </summary>
		public string DepreciableObjectId { get; set; }
		
		/// <summary>
		/// The type of asset object
		/// </summary>
		public string DepreciableObjectType { get; set; }
		
		/// <summary>
		/// Unique Xero identifier for the effective date change
		/// </summary>
		public string BookEffectiveDateOfChangeId { get; set; }
	}
	
	public enum BookDepreciationSettingDepreciationMethod
	{
		
		NoDepreciation = 0,
		
		StraightLine = 1,
		
		DiminishingValue100 = 2,
		
		DiminishingValue150 = 3,
		
		DiminishingValue200 = 4,
		
		FullDepreciation = 5,
	}
	
	public enum BookDepreciationSettingAveragingMethod
	{
		
		FullMonth = 0,
		
		ActualDays = 1,
	}
	
	public enum BookDepreciationSettingDepreciationCalculationMethod
	{
		
		Rate = 0,
		
		Life = 1,
		
		None = 2,
	}
	
	public class BookDepreciationDetail
	{
		
		/// <summary>
		/// When an asset is disposed, this will be the sell price minus the purchase price if a profit was made.
		/// </summary>
		public System.Nullable<System.Double> CurrentCapitalGain { get; set; }
		
		/// <summary>
		/// When an asset is disposed, this will be the lowest one of sell price or purchase price, minus the current book value.
		/// </summary>
		public System.Nullable<System.Double> CurrentGainLoss { get; set; }
		
		/// <summary>
		/// YYYY-MM-DD
		/// </summary>
		public System.Nullable<System.DateOnly> DepreciationStartDate { get; set; }
		
		/// <summary>
		/// The value of the asset you want to depreciate, if this is less than the cost of the asset.
		/// </summary>
		public System.Nullable<System.Double> CostLimit { get; set; }
		
		/// <summary>
		/// The value of the asset remaining when you've fully depreciated it.
		/// </summary>
		public System.Nullable<System.Double> ResidualValue { get; set; }
		
		/// <summary>
		/// All depreciation prior to the current financial year.
		/// </summary>
		public System.Nullable<System.Double> PriorAccumDepreciationAmount { get; set; }
		
		/// <summary>
		/// All depreciation occurring in the current financial year.
		/// </summary>
		public System.Nullable<System.Double> CurrentAccumDepreciationAmount { get; set; }
	}
	
	public class Setting
	{
		
		/// <summary>
		/// The prefix used for fixed asset numbers (“FA-” by default)
		/// </summary>
		public string AssetNumberPrefix { get; set; }
		
		/// <summary>
		/// The next available sequence number
		/// </summary>
		public string AssetNumberSequence { get; set; }
		
		/// <summary>
		/// The date depreciation calculations started on registered fixed assets in Xero
		/// </summary>
		public System.Nullable<System.DateOnly> AssetStartDate { get; set; }
		
		/// <summary>
		/// The last depreciation date
		/// </summary>
		public System.Nullable<System.DateOnly> LastDepreciationDate { get; set; }
		
		/// <summary>
		/// Default account that gains are posted to
		/// </summary>
		public string DefaultGainOnDisposalAccountId { get; set; }
		
		/// <summary>
		/// Default account that losses are posted to
		/// </summary>
		public string DefaultLossOnDisposalAccountId { get; set; }
		
		/// <summary>
		/// Default account that capital gains are posted to
		/// </summary>
		public string DefaultCapitalGainOnDisposalAccountId { get; set; }
		
		/// <summary>
		/// opt in for tax calculation
		/// </summary>
		public System.Nullable<System.Boolean> OptInForTax { get; set; }
	}
	
	public class Error
	{
		
		/// <summary>
		/// Array of elements of resource validation errors
		/// </summary>
		public ResourceValidationErrorsElement[] ResourceValidationErrors { get; set; }
		
		/// <summary>
		/// Array of elements of field validation errors
		/// </summary>
		public FieldValidationErrorsElement[] FieldValidationErrors { get; set; }
		
		/// <summary>
		/// The internal type of error, not accessible externally
		/// </summary>
		public string Type { get; set; }
		
		/// <summary>
		/// Title of the error
		/// </summary>
		public string Title { get; set; }
		
		/// <summary>
		/// Detail of the error
		/// </summary>
		public string Detail { get; set; }
	}
	
	public class ResourceValidationErrorsElement
	{
		
		/// <summary>
		/// The field name of the erroneous field
		/// </summary>
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Explaination of the resource validation error
		/// </summary>
		public string LocalisedMessage { get; set; }
		
		/// <summary>
		/// Internal type of the resource error message
		/// </summary>
		public string Type { get; set; }
		
		/// <summary>
		/// Title of the resource validation error
		/// </summary>
		public string Title { get; set; }
		
		/// <summary>
		/// Detail of the resource validation error
		/// </summary>
		public string Detail { get; set; }
	}
	
	public class FieldValidationErrorsElement
	{
		
		/// <summary>
		/// The field name of the erroneous field
		/// </summary>
		public string FieldName { get; set; }
		
		/// <summary>
		/// The provided value
		/// </summary>
		public string ValueProvided { get; set; }
		
		/// <summary>
		/// Explaination of the field validation error
		/// </summary>
		public string LocalisedMessage { get; set; }
		
		/// <summary>
		/// Internal type of the field validation error message
		/// </summary>
		public string Type { get; set; }
		
		/// <summary>
		/// Title of the field validation error
		/// </summary>
		public string Title { get; set; }
		
		/// <summary>
		/// Detail of the field validation error
		/// </summary>
		public string Detail { get; set; }
	}
	
	public partial class MyClient
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public MyClient(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// searches fixed asset
		/// By passing in the appropriate options, you can search for available fixed asset in the system
		/// GetAssets Assets
		/// </summary>
		/// <param name="status">Required when retrieving a collection of assets. See Asset Status Codes</param>
		/// <param name="page">Results are paged. This specifies which page of the results to return. The default page is 1.</param>
		/// <param name="pageSize">The number of records returned per page. By default the number of records returned is 10.</param>
		/// <param name="orderBy">Requests can be ordered by AssetType, AssetName, AssetNumber, PurchaseDate and PurchasePrice. If the asset status is DISPOSED it also allows DisposalDate and DisposalPrice.</param>
		/// <param name="sortDirection">ASC or DESC</param>
		/// <param name="filterBy">A string that can be used to filter the list to only return assets containing the text. Checks it against the AssetName, AssetNumber, Description and AssetTypeName fields.</param>
		/// <returns>search results matching criteria</returns>
		public async Task<Assets> GetAssetsAsync(AssetStatusQueryParam status, int page, int pageSize, GetAssetsOrderBy orderBy, GetAssetsSortDirection sortDirection, GetAssetsFilterBy filterBy)
		{
			var requestUri = "Assets?status=" + status+"&page="+page+"&pageSize="+pageSize+"&orderBy=" + orderBy+"&sortDirection=" + sortDirection+"&filterBy=" + filterBy;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Assets>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches fixed asset
		/// By passing in the appropriate options, you can search for available fixed asset in the system
		/// GetAssets Assets
		/// </summary>
		/// <param name="status">Required when retrieving a collection of assets. See Asset Status Codes</param>
		/// <param name="page">Results are paged. This specifies which page of the results to return. The default page is 1.</param>
		/// <param name="pageSize">The number of records returned per page. By default the number of records returned is 10.</param>
		/// <param name="orderBy">Requests can be ordered by AssetType, AssetName, AssetNumber, PurchaseDate and PurchasePrice. If the asset status is DISPOSED it also allows DisposalDate and DisposalPrice.</param>
		/// <param name="sortDirection">ASC or DESC</param>
		/// <param name="filterBy">A string that can be used to filter the list to only return assets containing the text. Checks it against the AssetName, AssetNumber, Description and AssetTypeName fields.</param>
		/// <returns>search results matching criteria</returns>
		public Assets GetAssets(AssetStatusQueryParam status, int page, int pageSize, GetAssetsOrderBy orderBy, GetAssetsSortDirection sortDirection, GetAssetsFilterBy filterBy)
		{
			var requestUri = "Assets?status=" + status+"&page="+page+"&pageSize="+pageSize+"&orderBy=" + orderBy+"&sortDirection=" + sortDirection+"&filterBy=" + filterBy;
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Assets>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// adds a fixed asset
		/// Adds an asset to the system
		/// CreateAsset Assets
		/// </summary>
		/// <param name="requestBody">Fixed asset you are creating</param>
		/// <returns>return single object - create new asset</returns>
		public async Task<Asset> CreateAssetAsync(Asset requestBody)
		{
			var requestUri = "Assets";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Asset>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// adds a fixed asset
		/// Adds an asset to the system
		/// CreateAsset Assets
		/// </summary>
		/// <param name="requestBody">Fixed asset you are creating</param>
		/// <returns>return single object - create new asset</returns>
		public Asset CreateAsset(Asset requestBody)
		{
			var requestUri = "Assets";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Asset>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// retrieves fixed asset by id
		/// By passing in the appropriate asset id, you can search for
		/// a specific fixed asset in the system
		/// 
		/// GetAssetById Assets/{id}
		/// </summary>
		/// <param name="id">fixed asset id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<Asset> GetAssetByIdAsync(string id)
		{
			var requestUri = "Assets/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Asset>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// retrieves fixed asset by id
		/// By passing in the appropriate asset id, you can search for
		/// a specific fixed asset in the system
		/// 
		/// GetAssetById Assets/{id}
		/// </summary>
		/// <param name="id">fixed asset id for single object</param>
		/// <returns>search results matching criteria</returns>
		public Asset GetAssetById(string id)
		{
			var requestUri = "Assets/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Asset>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches fixed asset types
		/// By passing in the appropriate options, you can search for available fixed asset types in the system
		/// GetAssetTypes AssetTypes
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public async Task<AssetType[]> GetAssetTypesAsync()
		{
			var requestUri = "AssetTypes";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssetType[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches fixed asset types
		/// By passing in the appropriate options, you can search for available fixed asset types in the system
		/// GetAssetTypes AssetTypes
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public AssetType[] GetAssetTypes()
		{
			var requestUri = "AssetTypes";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssetType[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// adds a fixed asset type
		/// Adds an fixed asset type to the system
		/// CreateAssetType AssetTypes
		/// </summary>
		/// <param name="requestBody">Asset type to add</param>
		/// <returns>results single object -  created fixed type</returns>
		public async Task<AssetType> CreateAssetTypeAsync(AssetType requestBody)
		{
			var requestUri = "AssetTypes";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssetType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// adds a fixed asset type
		/// Adds an fixed asset type to the system
		/// CreateAssetType AssetTypes
		/// </summary>
		/// <param name="requestBody">Asset type to add</param>
		/// <returns>results single object -  created fixed type</returns>
		public AssetType CreateAssetType(AssetType requestBody)
		{
			var requestUri = "AssetTypes";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssetType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// searches fixed asset settings
		/// By passing in the appropriate options, you can search for available fixed asset types in the system
		/// GetAssetSettings Settings
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public async Task<Setting> GetAssetSettingsAsync()
		{
			var requestUri = "Settings";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Setting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// searches fixed asset settings
		/// By passing in the appropriate options, you can search for available fixed asset types in the system
		/// GetAssetSettings Settings
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public Setting GetAssetSettings()
		{
			var requestUri = "Settings";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			var responseMessage = httpClient.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Setting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GetAssetsOrderBy
	{
		
		AssetType = 0,
		
		AssetName = 1,
		
		AssetNumber = 2,
		
		PurchaseDate = 3,
		
		PurchasePrice = 4,
		
		DisposalDate = 5,
		
		DisposalPrice = 6,
	}
	
	public enum GetAssetsSortDirection
	{
		
		asc = 0,
		
		desc = 1,
	}
	
	public enum GetAssetsFilterBy
	{
		
		AssetName = 0,
		
		AssetNumber = 1,
		
		Description = 2,
		
		AssetTypeName = 3,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
