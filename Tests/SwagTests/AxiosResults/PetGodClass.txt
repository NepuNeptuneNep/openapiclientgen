import Axios from 'axios';
import { AxiosResponse } from 'axios';
export namespace MyNS {
	export interface ApiResponse {
		code?: number | null;
		type?: string | null;
		message?: string | null;
	}


	/** A representation of a cat */
	export interface Cat extends Pet {

		/** The measured skill for hunting */
		huntingSkill: CatHuntingSkill;
	}

	export enum CatHuntingSkill { clueless = 0, lazy = 1, adventurous = 2, aggressive = 3 }

	export interface Category {

		/** Category ID */
		id?: number | null;

		/** Category name */
		name?: string | null;

		/** Test Sub Category */
		sub?: CategorySub | null;
	}

	export interface CategorySub {

		/** Dumb Property */
		prop1?: string | null;
	}


	/** A representation of a dog */
	export interface Dog extends Pet {

		/** The size of the pack the dog is from */
		packSize: number;
	}


	/** A representation of a honey bee */
	export interface HoneyBee extends Pet {

		/** Average amount of honey produced per day in ounces */
		honeyPerDay: number;
	}

	export interface Order {

		/** Order ID */
		id?: number | null;

		/** Pet ID */
		petId?: number | null;
		quantity?: number | null;

		/** Estimated ship date */
		shipDate?: Date | null;

		/** Order Status */
		status?: OrderStatus | null;

		/** Indicates whenever order was completed or not */
		complete?: boolean | null;

		/** Unique Request Id */
		requestId?: string | null;
	}

	export enum OrderStatus { placed = 0, approved = 1, delivered = 2 }

	export interface Pet {

		/** Pet ID */
		id?: number | null;

		/** Categories this pet belongs to */
		category?: Category | null;

		/** The name given to a pet */
		name: string;

		/** The list of URL to a cute photos featuring pet */
		photoUrls: Array<string>;
		friend?: Pet | null;

		/** Tags attached to the pet */
		tags?: Array<Tag> | null;

		/** Pet status in the store */
		status?: PetStatus | null;

		/** Type of a pet */
		petType?: string | null;
	}

	export interface Tag {

		/** Tag ID */
		id?: number | null;

		/** Tag name */
		name?: string | null;
	}

	export enum PetStatus { available = 0, pending = 1, sold = 2 }

	export interface User {
		id?: number | null;
		pet?: Pet | null;

		/** User supplied username */
		username?: string | null;

		/** User first name */
		firstName?: string | null;

		/** User last name */
		lastName?: string | null;

		/** User email address */
		email?: string | null;

		/** User password, MUST contain a mix of upper and lower case letters, as well as digits */
		password?: string | null;

		/** User phone number in international format */
		phone?: string | null;

		/** User status */
		userStatus?: number | null;
	}

	export class Misc {
		constructor(private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/') {
		}

		/**
		 * Add a new pet to the store
		 * Add new pet to the store inventory.
		 * Post pet
		 * @param {Pet} requestBody Pet object that needs to be added to the store
		 * @return {void} 
		 */
		PetPost(requestBody: Pet): Promise<AxiosResponse<string>> {
			return Axios.post(this.baseUri + 'pet', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, responseType: 'text' });
		}

		/**
		 * Update an existing pet
		 * Put pet
		 * @param {Pet} requestBody Pet object that needs to be added to the store
		 * @return {void} 
		 */
		PetPut(requestBody: Pet): Promise<AxiosResponse<string>> {
			return Axios.put(this.baseUri + 'pet', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, responseType: 'text' });
		}

		/**
		 * Find pet by ID
		 * Returns a single pet
		 * Get pet/{petId}
		 * @param {number} petId ID of pet to return
		 * @return {Pet} successful operation
		 */
		Pet_petIdGet(petId: number): Promise<Pet> {
			return Axios.get<Pet>(this.baseUri + 'pet/' + petId, {}).then(d => d.data);
		}

		/**
		 * Deletes a pet
		 * Delete pet/{petId}
		 * @param {number} petId Pet id to delete
		 * @return {void} 
		 */
		Pet_petIdDelete(petId: number): Promise<AxiosResponse<string>> {
			return Axios.delete(this.baseUri + 'pet/' + petId, { responseType: 'text' });
		}

		/**
		 * Finds Pets by status
		 * Multiple status values can be provided with comma separated strings
		 * Get pet/findByStatus
		 * @param {Array<PetStatus>} status Status values that need to be considered for filter
		 * @return {Array<Pet>} successful operation
		 */
		PetFindByStatusGetByStatus(status: Array<PetStatus>): Promise<Array<Pet>> {
			return Axios.get<Array<Pet>>(this.baseUri + 'pet/findByStatus?' + status.map(z => `status=${z}`).join('&'), {}).then(d => d.data);
		}

		/**
		 * Finds Pets by tags
		 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
		 * Get pet/findByTags
		 * @param {Array<string>} tags Tags to filter by
		 * @return {Array<Pet>} successful operation
		 */
		PetFindByTagsGetByTags(tags: Array<string>): Promise<Array<Pet>> {
			return Axios.get<Array<Pet>>(this.baseUri + 'pet/findByTags?' + tags.map(z => `tags=${encodeURIComponent(z)}`).join('&'), {}).then(d => d.data);
		}

		/**
		 * Returns pet inventories by status
		 * Returns a map of status codes to quantities
		 * Get store/inventory
		 * @return {{[id: string]: number }} successful operation
		 */
		StoreInventoryGet(): Promise<{[id: string]: number }> {
			return Axios.get<{[id: string]: number }>(this.baseUri + 'store/inventory', {}).then(d => d.data);
		}

		/**
		 * Place an order for a pet
		 * Post store/order
		 * @param {Order} requestBody order placed for purchasing the pet
		 * @return {Order} successful operation
		 */
		StoreOrderPost(requestBody: Order): Promise<Order> {
			return Axios.post<Order>(this.baseUri + 'store/order', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } }).then(d => d.data);
		}

		/**
		 * Find purchase order by ID
		 * For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
		 * Get store/order/{orderId}
		 * @param {number} orderId ID of pet that needs to be fetched
		 * @return {Order} successful operation
		 */
		StoreOrder_orderIdGet(orderId: number): Promise<Order> {
			return Axios.get<Order>(this.baseUri + 'store/order/' + orderId, {}).then(d => d.data);
		}

		/**
		 * Delete purchase order by ID
		 * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
		 * Delete store/order/{orderId}
		 * @param {string} orderId ID of the order that needs to be deleted
		 * @return {void} 
		 */
		StoreOrder_orderIdDelete(orderId: string): Promise<AxiosResponse<string>> {
			return Axios.delete(this.baseUri + 'store/order/' + (orderId == null ? '' : encodeURIComponent(orderId)), { responseType: 'text' });
		}

		/**
		 * Create user
		 * This can only be done by the logged in user.
		 * Post user
		 * @param {User} requestBody Created user object
		 * @return {void} 
		 */
		UserPost(requestBody: User): Promise<AxiosResponse<string>> {
			return Axios.post(this.baseUri + 'user', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, responseType: 'text' });
		}

		/**
		 * Get user by user name
		 * Get user/{username}
		 * @param {string} username The name that needs to be fetched. Use user1 for testing. 
		 * @return {User} successful operation
		 */
		User_usernameGet(username: string): Promise<User> {
			return Axios.get<User>(this.baseUri + 'user/' + (username == null ? '' : encodeURIComponent(username)), {}).then(d => d.data);
		}

		/**
		 * Updated user
		 * This can only be done by the logged in user.
		 * Put user/{username}
		 * @param {string} username name that need to be deleted
		 * @param {User} requestBody Updated user object
		 * @return {void} 
		 */
		User_usernamePut(username: string, requestBody: User): Promise<AxiosResponse<string>> {
			return Axios.put(this.baseUri + 'user/' + (username == null ? '' : encodeURIComponent(username)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, responseType: 'text' });
		}

		/**
		 * Delete user
		 * This can only be done by the logged in user.
		 * Delete user/{username}
		 * @param {string} username The name that needs to be deleted
		 * @return {void} 
		 */
		User_usernameDelete(username: string): Promise<AxiosResponse<string>> {
			return Axios.delete(this.baseUri + 'user/' + (username == null ? '' : encodeURIComponent(username)), { responseType: 'text' });
		}

		/**
		 * Creates list of users with given input array
		 * Post user/createWithArray
		 * @param {Array<User>} requestBody List of user object
		 * @return {void} 
		 */
		UserCreateWithArrayPost(requestBody: Array<User>): Promise<AxiosResponse<string>> {
			return Axios.post(this.baseUri + 'user/createWithArray', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, responseType: 'text' });
		}

		/**
		 * Creates list of users with given input array
		 * Post user/createWithList
		 * @param {Array<User>} requestBody List of user object
		 * @return {void} 
		 */
		UserCreateWithListPost(requestBody: Array<User>): Promise<AxiosResponse<string>> {
			return Axios.post(this.baseUri + 'user/createWithList', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, responseType: 'text' });
		}

		/**
		 * Logs user into the system
		 * Get user/login
		 * @param {string} username The user name for login
		 * @param {string} password The password for login in clear text
		 * @return {string} successful operation
		 */
		UserLoginGetByUsernameAndPassword(username: string, password: string): Promise<string> {
			return Axios.get(this.baseUri + 'user/login?username=' + (username == null ? '' : encodeURIComponent(username)) + '&password=' + (password == null ? '' : encodeURIComponent(password)), { responseType: 'text' }).then(d => d.data);
		}

		/**
		 * Logs out current logged in user session
		 * Get user/logout
		 * @return {void} 
		 */
		UserLogoutGet(): Promise<AxiosResponse<string>> {
			return Axios.get(this.baseUri + 'user/logout', { responseType: 'text' });
		}
	}

}

