//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchEvaluateFeatureResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public EvaluationResult[] Results { get; set; }
	}
	
	/// <summary>
	/// This structure displays the results of one feature evaluation assignment to one user session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EvaluationResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="feature")]
		public string Feature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public VariableValue Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variation")]
		public string Variation { get; set; }
	}
	
	/// <summary>
	/// The value assigned to a feature variation. This structure must contain exactly one field. It can be <code>boolValue</code>, <code>doubleValue</code>, <code>longValue</code>, or <code>stringValue</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VariableValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="boolValue")]
		public System.Nullable<System.Boolean> BoolValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="doubleValue")]
		public System.Nullable<System.Double> DoubleValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longValue")]
		public System.Nullable<System.Int32> LongValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
	}
	
	/// <summary>
	/// This structure assigns a feature variation to one user session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EvaluationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evaluationContext")]
		public string EvaluationContext { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="feature")]
		public string Feature { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateExperimentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="experiment")]
		public Experiment Experiment { get; set; }
	}
	
	/// <summary>
	/// A structure containing the configuration details of an experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Experiment
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="execution")]
		public ExperimentExecution Execution { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.DateTimeOffset LastUpdatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricGoals")]
		public MetricGoal[] MetricGoals { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onlineAbDefinition")]
		public OnlineAbDefinition OnlineAbDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="randomizationSalt")]
		public string RandomizationSalt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="samplingRate")]
		public System.Nullable<System.Int32> SamplingRate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public ExperimentSchedule Schedule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segment")]
		public string Segment { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ExperimentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treatments")]
		public Treatment[] Treatments { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ExperimentType Type { get; set; }
	}
	
	/// <summary>
	/// This structure contains the date and time that the experiment started and ended.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExperimentExecution
	{
		
		[System.Runtime.Serialization.DataMember(Name="endedTime")]
		public System.DateTimeOffset EndedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startedTime")]
		public System.DateTimeOffset StartedTime { get; set; }
	}
	
	/// <summary>
	/// A structure that tells Evidently whether higher or lower values are desired for a metric that is used in an experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricGoal
	{
		
		[System.Runtime.Serialization.DataMember(Name="desiredChange")]
		public ChangeDirectionEnum DesiredChange { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricDefinition")]
		public MetricDefinition MetricDefinition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ChangeDirectionEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCREASE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECREASE = 1,
	}
	
	/// <summary>
	/// This structure defines a metric that is being used to evaluate the variations during a launch or experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="entityIdKey")]
		public string EntityIdKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventPattern")]
		public string EventPattern { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitLabel")]
		public string UnitLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueKey")]
		public string ValueKey { get; set; }
	}
	
	/// <summary>
	/// A structure that contains the configuration of which variation to use as the "control" version. The "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OnlineAbDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="controlTreatmentName")]
		public string ControlTreatmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treatmentWeights")]
		public TreatmentToWeightMap TreatmentWeights { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TreatmentToWeightMap
	{
	}
	
	/// <summary>
	/// This structure contains the time and date that Evidently completed the analysis of the experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExperimentSchedule
	{
		
		[System.Runtime.Serialization.DataMember(Name="analysisCompleteTime")]
		public System.DateTimeOffset AnalysisCompleteTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExperimentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagMap
	{
	}
	
	/// <summary>
	/// A structure that defines one treatment in an experiment. A treatment is a variation of the feature that you are including in the experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Treatment
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="featureVariations")]
		public FeatureToVariationMap FeatureVariations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FeatureToVariationMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExperimentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aws.evidently.onlineab")]
		aws_evidently_onlineab = 0,
	}
	
	/// <summary>
	/// Use this structure to tell Evidently whether higher or lower values are desired for a metric that is used in an experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricGoalConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="desiredChange")]
		public ChangeDirectionEnum DesiredChange { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricDefinition")]
		public MetricDefinitionConfig MetricDefinition { get; set; }
	}
	
	/// <summary>
	/// This structure defines a metric that you want to use to evaluate the variations during a launch or experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricDefinitionConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityIdKey")]
		public string EntityIdKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventPattern")]
		public string EventPattern { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitLabel")]
		public string UnitLabel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="valueKey")]
		public string ValueKey { get; set; }
	}
	
	/// <summary>
	/// A structure that defines one treatment in an experiment. A treatment is a variation of the feature that you are including in the experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TreatmentConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="feature")]
		public string Feature { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="variation")]
		public string Variation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFeatureResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="feature")]
		public Feature Feature { get; set; }
	}
	
	/// <summary>
	/// This structure contains information about one Evidently feature in your account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Feature
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultVariation")]
		public string DefaultVariation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entityOverrides")]
		public EntityOverrideMap EntityOverrides { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evaluationRules")]
		public EvaluationRule[] EvaluationRules { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evaluationStrategy")]
		public FeatureEvaluationStrategy EvaluationStrategy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.DateTimeOffset LastUpdatedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public FeatureStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="valueType")]
		public VariationValueType ValueType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="variations")]
		public Variation[] Variations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityOverrideMap
	{
	}
	
	/// <summary>
	/// A structure that contains the information about an evaluation rule for this feature, if it is used in a launch or experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EvaluationRule
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FeatureEvaluationStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL_RULES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_VARIATION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FeatureStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VariationValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LONG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOUBLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOLEAN = 3,
	}
	
	/// <summary>
	/// This structure contains the name and variation value of one variation of a feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Variation
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public VariableValue Value { get; set; }
	}
	
	/// <summary>
	/// This structure contains the name and variation value of one variation of a feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VariationConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public VariableValue Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateLaunchResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launch")]
		public Launch Launch { get; set; }
	}
	
	/// <summary>
	/// This structure contains the configuration details of one Evidently launch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Launch
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="execution")]
		public LaunchExecution Execution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public LaunchGroup[] Groups { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.DateTimeOffset LastUpdatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricMonitors")]
		public MetricMonitor[] MetricMonitors { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="randomizationSalt")]
		public string RandomizationSalt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduledSplitsDefinition")]
		public ScheduledSplitsLaunchDefinition ScheduledSplitsDefinition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ExperimentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public LaunchType Type { get; set; }
	}
	
	/// <summary>
	/// This structure contains information about the start and end times of the launch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LaunchExecution
	{
		
		[System.Runtime.Serialization.DataMember(Name="endedTime")]
		public System.DateTimeOffset EndedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startedTime")]
		public System.DateTimeOffset StartedTime { get; set; }
	}
	
	/// <summary>
	/// A structure that defines one launch group in a launch. A launch group is a variation of the feature that you are including in the launch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LaunchGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="featureVariations")]
		public FeatureToVariationMap FeatureVariations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A structure that defines a metric to be used to monitor performance of the variations during a launch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricMonitor
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricDefinition")]
		public MetricDefinition MetricDefinition { get; set; }
	}
	
	/// <summary>
	/// An array of structures that define the traffic allocation percentages among the feature variations during each step of a launch. This also defines the start time of each step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScheduledSplitsLaunchDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public ScheduledSplit[] Steps { get; set; }
	}
	
	/// <summary>
	/// This structure defines the traffic allocation percentages among the feature variations during one step of a launch, and the start time of that step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScheduledSplit
	{
		
		[System.Runtime.Serialization.DataMember(Name="groupWeights")]
		public GroupToWeightMap GroupWeights { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segmentOverrides")]
		public SegmentOverride[] SegmentOverrides { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupToWeightMap
	{
	}
	
	/// <summary>
	/// This structure specifies a segment that you have already created, and defines the traffic split for that segment to be used in a launch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SegmentOverride
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evaluationOrder")]
		public int EvaluationOrder { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="segment")]
		public string Segment { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="weights")]
		public GroupToWeightMap Weights { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LaunchType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aws.evidently.splits")]
		aws_evidently_splits = 0,
	}
	
	/// <summary>
	/// A structure that defines one launch group in a launch. A launch group is a variation of the feature that you are including in the launch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LaunchGroupConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="feature")]
		public string Feature { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="variation")]
		public string Variation { get; set; }
	}
	
	/// <summary>
	/// A structure that defines a metric to be used to monitor performance of the variations during a launch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricMonitorConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricDefinition")]
		public MetricDefinitionConfig MetricDefinition { get; set; }
	}
	
	/// <summary>
	/// This structure defines the traffic allocation percentages among the feature variations during one step of a launch, and the start time of that step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScheduledSplitConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groupWeights")]
		public GroupToWeightMap GroupWeights { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segmentOverrides")]
		public SegmentOverride[] SegmentOverrides { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateProjectResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public Project Project { get; set; }
	}
	
	/// <summary>
	/// This structure defines a project, which is the logical object in Evidently that can contain features, launches, and experiments. Use projects to group similar features together.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Project
	{
		
		[System.Runtime.Serialization.DataMember(Name="activeExperimentCount")]
		public System.Nullable<System.Int32> ActiveExperimentCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activeLaunchCount")]
		public System.Nullable<System.Int32> ActiveLaunchCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appConfigResource")]
		public ProjectAppConfigResource AppConfigResource { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataDelivery")]
		public ProjectDataDelivery DataDelivery { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="experimentCount")]
		public System.Nullable<System.Int32> ExperimentCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="featureCount")]
		public System.Nullable<System.Int32> FeatureCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.DateTimeOffset LastUpdatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchCount")]
		public System.Nullable<System.Int32> LaunchCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public FeatureStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// This is a structure that defines the configuration of how your application integrates with AppConfig to run client-side evaluation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProjectAppConfigResource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configurationProfileId")]
		public string ConfigurationProfileId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
	}
	
	/// <summary>
	/// A structure that contains information about where Evidently is to store evaluation events for longer term storage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProjectDataDelivery
	{
		
		[System.Runtime.Serialization.DataMember(Name="cloudWatchLogs")]
		public CloudWatchLogsDestination CloudWatchLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Destination")]
		public S3Destination S3Destination { get; set; }
	}
	
	/// <summary>
	/// A structure containing the CloudWatch Logs log group where the project stores evaluation events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloudWatchLogsDestination
	{
		
		[System.Runtime.Serialization.DataMember(Name="logGroup")]
		public string LogGroup { get; set; }
	}
	
	/// <summary>
	/// If the project stores evaluation events in an Amazon S3 bucket, this structure stores the bucket name and bucket prefix.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3Destination
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
	}
	
	/// <summary>
	/// A structure containing the CloudWatch Logs log group where the project stores evaluation events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloudWatchLogsDestinationConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="logGroup")]
		public string LogGroup { get; set; }
	}
	
	/// <summary>
	/// If the project stores evaluation events in an Amazon S3 bucket, this structure stores the bucket name and bucket prefix.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3DestinationConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSegmentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="segment")]
		public Segment Segment { get; set; }
	}
	
	/// <summary>
	/// This structure contains information about one audience <i>segment</i>. You can use segments in your experiments and launches to narrow the user sessions used for experiment or launch to only the user sessions that match one or more criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Segment
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="experimentCount")]
		public System.Nullable<System.Int32> ExperimentCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.DateTimeOffset LastUpdatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchCount")]
		public System.Nullable<System.Int32> LaunchCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pattern")]
		public string Pattern { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteExperimentResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceUnavailableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteFeatureResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteLaunchResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteProjectResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSegmentResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EvaluateFeatureResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public VariableValue Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variation")]
		public string Variation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetExperimentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="experiment")]
		public Experiment Experiment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetExperimentResultsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reports")]
		public ExperimentReport[] Reports { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resultsData")]
		public ExperimentResultsData[] ResultsData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamps")]
		public string[] Timestamps { get; set; }
	}
	
	/// <summary>
	/// A structure that contains results of an experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExperimentReport
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportName")]
		public ExperimentReportName ReportName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treatmentName")]
		public string TreatmentName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExperimentReportName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BayesianInference = 0,
	}
	
	/// <summary>
	/// A structure that contains experiment results for one metric that is monitored in the experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExperimentResultsData
	{
		
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resultStat")]
		public ExperimentResultResponseType ResultStat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treatmentName")]
		public string TreatmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public System.Nullable<System.Double> Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExperimentResultResponseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mean = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TreatmentEffect = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConfidenceIntervalUpperBound = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConfidenceIntervalLowerBound = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PValue = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExperimentResultRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseStat = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TreatmentEffect = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConfidenceInterval = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PValue = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetFeatureResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="feature")]
		public Feature Feature { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLaunchResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="launch")]
		public Launch Launch { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetProjectResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public Project Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSegmentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="segment")]
		public Segment Segment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListExperimentsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="experiments")]
		public Experiment[] Experiments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFeaturesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="features")]
		public FeatureSummary[] Features { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// This structure contains information about one Evidently feature in your account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FeatureSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultVariation")]
		public string DefaultVariation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evaluationRules")]
		public EvaluationRule[] EvaluationRules { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evaluationStrategy")]
		public FeatureEvaluationStrategy EvaluationStrategy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.DateTimeOffset LastUpdatedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public FeatureStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLaunchesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="launches")]
		public Launch[] Launches { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProjectsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public ProjectSummary[] Projects { get; set; }
	}
	
	/// <summary>
	/// A structure that contains configuration information about an Evidently project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProjectSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="activeExperimentCount")]
		public System.Nullable<System.Int32> ActiveExperimentCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activeLaunchCount")]
		public System.Nullable<System.Int32> ActiveLaunchCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="experimentCount")]
		public System.Nullable<System.Int32> ExperimentCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="featureCount")]
		public System.Nullable<System.Int32> FeatureCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.DateTimeOffset LastUpdatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchCount")]
		public System.Nullable<System.Int32> LaunchCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public FeatureStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSegmentReferencesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referencedBy")]
		public RefResource[] ReferencedBy { get; set; }
	}
	
	/// <summary>
	/// A structure that contains information about one experiment or launch that uses the specified segment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RefResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedOn")]
		public string LastUpdatedOn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSegmentsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public Segment[] Segments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutProjectEventsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="eventResults")]
		public PutProjectEventsResultEntry[] EventResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failedEventCount")]
		public System.Nullable<System.Int32> FailedEventCount { get; set; }
	}
	
	/// <summary>
	/// A structure that contains Evidently's response to the sent events, including an event ID and error codes, if any. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutProjectEventsResultEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
	}
	
	/// <summary>
	/// A structure that contains the information about one evaluation event or custom event sent to Evidently. This is a JSON payload. If this event specifies a pre-defined event type, the payload must follow the defined event schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Event
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EventType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aws.evidently.evaluation")]
		aws_evidently_evaluation = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aws.evidently.custom")]
		aws_evidently_custom = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartExperimentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="startedTime")]
		public System.DateTimeOffset StartedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartLaunchResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launch")]
		public Launch Launch { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopExperimentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="endedTime")]
		public System.DateTimeOffset EndedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopLaunchResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="endedTime")]
		public System.DateTimeOffset EndedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestSegmentPatternResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="match")]
		public bool Match { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateExperimentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="experiment")]
		public Experiment Experiment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFeatureResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="feature")]
		public Feature Feature { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateLaunchResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launch")]
		public Launch Launch { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateProjectResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public Project Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateProjectDataDeliveryResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public Project Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchEvaluateFeatureRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public EvaluationRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// A structure that contains the configuration of which variation to use as the "control" version. The "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OnlineAbConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="controlTreatmentName")]
		public string ControlTreatmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treatmentWeights")]
		public TreatmentToWeightMap TreatmentWeights { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateExperimentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricGoals")]
		public MetricGoalConfig[] MetricGoals { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onlineAbConfig")]
		public OnlineAbConfig OnlineAbConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="randomizationSalt")]
		public string RandomizationSalt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="samplingRate")]
		public System.Nullable<System.Int32> SamplingRate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segment")]
		public string Segment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="treatments")]
		public TreatmentConfig[] Treatments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFeatureRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="defaultVariation")]
		public string DefaultVariation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entityOverrides")]
		public EntityOverrideMap EntityOverrides { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evaluationStrategy")]
		public FeatureEvaluationStrategy EvaluationStrategy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="variations")]
		public VariationConfig[] Variations { get; set; }
	}
	
	/// <summary>
	/// An array of structures that define the traffic allocation percentages among the feature variations during each step of a launch. This also defines the start time of each step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScheduledSplitsLaunchConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public ScheduledSplitConfig[] Steps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateLaunchRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public LaunchGroupConfig[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricMonitors")]
		public MetricMonitorConfig[] MetricMonitors { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="randomizationSalt")]
		public string RandomizationSalt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduledSplitsConfig")]
		public ScheduledSplitsLaunchConfig ScheduledSplitsConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// <p>Use this parameter to configure client-side evaluation for your project. Client-side evaluation allows your application to assign variations to user sessions locally instead of by calling the <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_EvaluateFeature.html">EvaluateFeature</a> operation to assign the variations. This mitigates the latency and availability risks that come with an API call.</p> <p> <code>ProjectAppConfigResource</code> is a structure that defines the configuration of how your application integrates with AppConfig to run client-side evaluation.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProjectAppConfigResourceConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
	}
	
	/// <summary>
	/// A structure that contains information about where Evidently is to store evaluation events for longer term storage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProjectDataDeliveryConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="cloudWatchLogs")]
		public CloudWatchLogsDestinationConfig CloudWatchLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Destination")]
		public S3DestinationConfig S3Destination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateProjectRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="appConfigResource")]
		public ProjectAppConfigResourceConfig AppConfigResource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataDelivery")]
		public ProjectDataDeliveryConfig DataDelivery { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSegmentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pattern")]
		public string Pattern { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteExperimentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteFeatureRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteLaunchRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteProjectRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSegmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EvaluateFeatureRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evaluationContext")]
		public string EvaluationContext { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExperimentBaseStat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mean = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExperimentStopDesiredState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetExperimentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetExperimentResultsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseStat")]
		public ExperimentBaseStat BaseStat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricNames")]
		public string[] MetricNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="period")]
		public System.Nullable<System.Int32> Period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportNames")]
		public ExperimentReportName[] ReportNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resultStats")]
		public ExperimentResultRequestType[] ResultStats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="treatmentNames")]
		public string[] TreatmentNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetFeatureRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLaunchRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetProjectRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSegmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LaunchStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LaunchStopDesiredState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListExperimentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFeaturesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLaunchesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProjectsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SegmentReferenceResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPERIMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSegmentReferencesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSegmentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProjectStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutProjectEventsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="events")]
		public Event[] Events { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartExperimentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="analysisCompleteTime")]
		public System.DateTimeOffset AnalysisCompleteTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartLaunchRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopExperimentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="desiredState")]
		public ExperimentStopDesiredState DesiredState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopLaunchRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="desiredState")]
		public ExperimentStopDesiredState DesiredState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestSegmentPatternRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pattern")]
		public string Pattern { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateExperimentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricGoals")]
		public MetricGoalConfig[] MetricGoals { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onlineAbConfig")]
		public OnlineAbConfig OnlineAbConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="randomizationSalt")]
		public string RandomizationSalt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="removeSegment")]
		public System.Nullable<System.Boolean> RemoveSegment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="samplingRate")]
		public System.Nullable<System.Int32> SamplingRate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segment")]
		public string Segment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treatments")]
		public TreatmentConfig[] Treatments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFeatureRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="addOrUpdateVariations")]
		public VariationConfig[] AddOrUpdateVariations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultVariation")]
		public string DefaultVariation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entityOverrides")]
		public EntityOverrideMap EntityOverrides { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evaluationStrategy")]
		public FeatureEvaluationStrategy EvaluationStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="removeVariations")]
		public string[] RemoveVariations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateLaunchRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public LaunchGroupConfig[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricMonitors")]
		public MetricMonitorConfig[] MetricMonitors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="randomizationSalt")]
		public string RandomizationSalt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduledSplitsConfig")]
		public ScheduledSplitsLaunchConfig ScheduledSplitsConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateProjectDataDeliveryRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="cloudWatchLogs")]
		public CloudWatchLogsDestinationConfig CloudWatchLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Destination")]
		public S3DestinationConfig S3Destination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateProjectRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="appConfigResource")]
		public ProjectAppConfigResourceConfig AppConfigResource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>This operation assigns feature variation to user sessions. For each user session, you pass in an <code>entityID</code> that represents the user. Evidently then checks the evaluation rules and assigns the variation.</p> <p>The first rules that are evaluated are the override rules. If the user's <code>entityID</code> matches an override rule, the user is served the variation specified by that rule.</p> <p>Next, if there is a launch of the feature, the user might be assigned to a variation in the launch. The chance of this depends on the percentage of users that are allocated to that launch. If the user is enrolled in the launch, the variation they are served depends on the allocation of the various feature variations used for the launch.</p> <p>If the user is not assigned to a launch, and there is an ongoing experiment for this feature, the user might be assigned to a variation in the experiment. The chance of this depends on the percentage of users that are allocated to that experiment. If the user is enrolled in the experiment, the variation they are served depends on the allocation of the various feature variations used for the experiment. </p> <p>If the user is not assigned to a launch or experiment, they are served the default variation.</p>
		/// BatchEvaluateFeature projects/{project}/evaluations
		/// </summary>
		/// <param name="project">The name or ARN of the project that contains the feature being evaluated.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<BatchEvaluateFeatureResponse> BatchEvaluateFeatureAsync(string project, BatchEvaluateFeaturePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/evaluations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BatchEvaluateFeatureResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Creates an Evidently <i>experiment</i>. Before you create an experiment, you must create the feature to use for the experiment.</p> <p>An experiment helps you make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it by statistical methods, and provides clear recommendations about which variations perform better.</p> <p>You can optionally specify a <code>segment</code> to have the experiment consider only certain audience types in the experiment, such as using only user sessions from a certain location or who use a certain internet browser.</p> <p>Don't use this operation to update an existing experiment. Instead, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateExperiment.html">UpdateExperiment</a>. </p>
		/// CreateExperiment projects/{project}/experiments
		/// </summary>
		/// <param name="project">The name or ARN of the project that you want to create the new experiment in.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateExperimentResponse> CreateExperimentAsync(string project, CreateExperimentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/experiments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateExperimentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns configuration details about all the experiments in the specified project.
		/// ListExperiments projects/{project}/experiments
		/// </summary>
		/// <param name="maxResults">The maximum number of results to include in the response.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token to use when requesting the next set of results. You received this token from a previous <code>ListExperiments</code> operation.
		/// Min length: 1
		/// Max length: 8192
		// </param>
		/// <param name="project">The name or ARN of the project to return the experiment list from.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <param name="status">Use this optional parameter to limit the returned results to only the experiments with the status that you specify here.</param>
		/// <returns>Success</returns>
		public async Task<ListExperimentsResponse> ListExperimentsAsync(int maxResults, string nextToken, string project, ExperimentStatus status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/experiments?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&status=" + status;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListExperimentsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Creates an Evidently <i>feature</i> that you want to launch or test. You can define up to five variations of a feature, and use these variations in your launches and experiments. A feature must be created in a project. For information about creating a project, see <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateProject.html">CreateProject</a>.</p> <p>Don't use this operation to update an existing feature. Instead, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateFeature.html">UpdateFeature</a>. </p>
		/// CreateFeature projects/{project}/features
		/// </summary>
		/// <param name="project">The name or ARN of the project that is to contain the new feature.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateFeatureResponse> CreateFeatureAsync(string project, CreateFeaturePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/features";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateFeatureResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns configuration details about all the features in the specified project.
		/// ListFeatures projects/{project}/features
		/// </summary>
		/// <param name="maxResults">The maximum number of results to include in the response.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token to use when requesting the next set of results. You received this token from a previous <code>ListFeatures</code> operation.
		/// Min length: 1
		/// Max length: 8192
		// </param>
		/// <param name="project">The name or ARN of the project to return the feature list from.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListFeaturesResponse> ListFeaturesAsync(int maxResults, string nextToken, string project, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/features?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListFeaturesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Creates a <i>launch</i> of a given feature. Before you create a launch, you must create the feature to use for the launch.</p> <p>You can use a launch to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to more users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>Don't use this operation to update an existing launch. Instead, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateLaunch.html">UpdateLaunch</a>. </p>
		/// CreateLaunch projects/{project}/launches
		/// </summary>
		/// <param name="project">The name or ARN of the project that you want to create the launch in.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateLaunchResponse> CreateLaunchAsync(string project, CreateLaunchPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/launches";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateLaunchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns configuration details about all the launches in the specified project.
		/// ListLaunches projects/{project}/launches
		/// </summary>
		/// <param name="maxResults">The maximum number of results to include in the response.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token to use when requesting the next set of results. You received this token from a previous <code>ListLaunches</code> operation.
		/// Min length: 1
		/// Max length: 8192
		// </param>
		/// <param name="project">The name or ARN of the project to return the launch list from.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <param name="status">Use this optional parameter to limit the returned results to only the launches with the status that you specify here.</param>
		/// <returns>Success</returns>
		public async Task<ListLaunchesResponse> ListLaunchesAsync(int maxResults, string nextToken, string project, ExperimentStatus status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/launches?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&status=" + status;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListLaunchesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Creates a project, which is the logical object in Evidently that can contain features, launches, and experiments. Use projects to group similar features together.</p> <p>To update an existing project, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateProject.html">UpdateProject</a>.</p>
		/// CreateProject projects
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateProjectResponse> CreateProjectAsync(CreateProjectPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateProjectResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns configuration details about all the projects in the current Region in your account.
		/// ListProjects projects
		/// </summary>
		/// <param name="maxResults">The maximum number of results to include in the response.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="nextToken">The token to use when requesting the next set of results. You received this token from a previous <code>ListProjects</code> operation.
		/// Min length: 1
		/// Max length: 8192
		// </param>
		/// <returns>Success</returns>
		public async Task<ListProjectsResponse> ListProjectsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListProjectsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Use this operation to define a <i>segment</i> of your audience. A segment is a portion of your audience that share one or more characteristics. Examples could be Chrome browser users, users in Europe, or Firefox browser users in Europe who also fit other criteria that your application collects, such as age.</p> <p>Using a segment in an experiment limits that experiment to evaluate only the users who match the segment criteria. Using one or more segments in a launch allows you to define different traffic splits for the different audience segments.</p> <p>For more information about segment pattern syntax, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax.html"> Segment rule pattern syntax</a>.</p> <p>The pattern that you define for a segment is matched against the value of <code>evaluationContext</code>, which is passed into Evidently in the <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_EvaluateFeature.html">EvaluateFeature</a> operation, when Evidently assigns a feature variation to a user.</p>
		/// CreateSegment segments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateSegmentResponse> CreateSegmentAsync(CreateSegmentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "segments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateSegmentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of audience segments that you have created in your account in this Region.
		/// ListSegments segments
		/// </summary>
		/// <param name="maxResults">The maximum number of results to include in the response. If you omit this, the default of 50 is used.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="nextToken">The token to use when requesting the next set of results. You received this token from a previous <code>ListSegments</code> operation.
		/// Min length: 1
		/// Max length: 8192
		// </param>
		/// <returns>Success</returns>
		public async Task<ListSegmentsResponse> ListSegmentsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "segments?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListSegmentsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Deletes an Evidently experiment. The feature used for the experiment is not deleted.</p> <p>To stop an experiment without deleting it, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_StopExperiment.html">StopExperiment</a>. </p>
		/// DeleteExperiment projects/{project}/experiments/{experiment}
		/// </summary>
		/// <param name="experiment">The name of the experiment to delete.
		/// Min length: 1
		/// Max length: 127
		// </param>
		/// <param name="project">The name or ARN of the project that contains the experiment to delete.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteExperimentResponse> DeleteExperimentAsync(string experiment, string project, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/experiments/"+ (experiment==null? "" : System.Uri.EscapeDataString(experiment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteExperimentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the details about one experiment. You must already know the experiment name. To retrieve a list of experiments in your account, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListExperiments.html">ListExperiments</a>.
		/// GetExperiment projects/{project}/experiments/{experiment}
		/// </summary>
		/// <param name="experiment">The name of the experiment that you want to see the details of.
		/// Min length: 1
		/// Max length: 127
		// </param>
		/// <param name="project">The name or ARN of the project that contains the experiment.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetExperimentResponse> GetExperimentAsync(string experiment, string project, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/experiments/"+ (experiment==null? "" : System.Uri.EscapeDataString(experiment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetExperimentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Updates an Evidently experiment. </p> <p>Don't use this operation to update an experiment's tag. Instead, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html">TagResource</a>. </p>
		/// UpdateExperiment projects/{project}/experiments/{experiment}
		/// </summary>
		/// <param name="experiment">The name of the experiment to update.
		/// Min length: 1
		/// Max length: 127
		// </param>
		/// <param name="project">The name or ARN of the project that contains the experiment that you want to update.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateExperimentResponse> UpdateExperimentAsync(string experiment, string project, UpdateExperimentPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/experiments/"+ (experiment==null? "" : System.Uri.EscapeDataString(experiment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateExperimentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an Evidently feature.
		/// DeleteFeature projects/{project}/features/{feature}
		/// </summary>
		/// <param name="feature">The name of the feature to delete.
		/// Min length: 1
		/// Max length: 127
		// </param>
		/// <param name="project">The name or ARN of the project that contains the feature to delete.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteFeatureResponse> DeleteFeatureAsync(string feature, string project, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/features/"+ (feature==null? "" : System.Uri.EscapeDataString(feature));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteFeatureResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the details about one feature. You must already know the feature name. To retrieve a list of features in your account, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListFeatures.html">ListFeatures</a>.
		/// GetFeature projects/{project}/features/{feature}
		/// </summary>
		/// <param name="feature">The name of the feature that you want to retrieve information for.
		/// Min length: 1
		/// Max length: 127
		// </param>
		/// <param name="project">The name or ARN of the project that contains the feature.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetFeatureResponse> GetFeatureAsync(string feature, string project, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/features/"+ (feature==null? "" : System.Uri.EscapeDataString(feature));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetFeatureResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Updates an existing feature.</p> <p>You can't use this operation to update the tags of an existing feature. Instead, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html">TagResource</a>. </p>
		/// UpdateFeature projects/{project}/features/{feature}
		/// </summary>
		/// <param name="feature">The name of the feature to be updated.
		/// Min length: 1
		/// Max length: 127
		// </param>
		/// <param name="project">The name or ARN of the project that contains the feature to be updated.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateFeatureResponse> UpdateFeatureAsync(string feature, string project, UpdateFeaturePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/features/"+ (feature==null? "" : System.Uri.EscapeDataString(feature));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateFeatureResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Deletes an Evidently launch. The feature used for the launch is not deleted.</p> <p>To stop a launch without deleting it, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_StopLaunch.html">StopLaunch</a>. </p>
		/// DeleteLaunch projects/{project}/launches/{launch}
		/// </summary>
		/// <param name="launch">The name of the launch to delete.
		/// Min length: 1
		/// Max length: 127
		// </param>
		/// <param name="project">The name or ARN of the project that contains the launch to delete.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteLaunchResponse> DeleteLaunchAsync(string launch, string project, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/launches/"+ (launch==null? "" : System.Uri.EscapeDataString(launch));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteLaunchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the details about one launch. You must already know the launch name. To retrieve a list of launches in your account, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListLaunches.html">ListLaunches</a>.
		/// GetLaunch projects/{project}/launches/{launch}
		/// </summary>
		/// <param name="launch">The name of the launch that you want to see the details of.
		/// Min length: 1
		/// Max length: 127
		// </param>
		/// <param name="project">The name or ARN of the project that contains the launch.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetLaunchResponse> GetLaunchAsync(string launch, string project, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/launches/"+ (launch==null? "" : System.Uri.EscapeDataString(launch));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetLaunchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Updates a launch of a given feature. </p> <p>Don't use this operation to update the tags of an existing launch. Instead, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html">TagResource</a>. </p>
		/// UpdateLaunch projects/{project}/launches/{launch}
		/// </summary>
		/// <param name="launch">The name of the launch that is to be updated.
		/// Min length: 1
		/// Max length: 127
		// </param>
		/// <param name="project">The name or ARN of the project that contains the launch that you want to update.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateLaunchResponse> UpdateLaunchAsync(string launch, string project, UpdateLaunchPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/launches/"+ (launch==null? "" : System.Uri.EscapeDataString(launch));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateLaunchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an Evidently project. Before you can delete a project, you must delete all the features that the project contains. To delete a feature, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_DeleteFeature.html">DeleteFeature</a>.
		/// DeleteProject projects/{project}
		/// </summary>
		/// <param name="project">The name or ARN of the project to delete.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteProjectResponse> DeleteProjectAsync(string project, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteProjectResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the details about one launch. You must already know the project name. To retrieve a list of projects in your account, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListProjects.html">ListProjects</a>.
		/// GetProject projects/{project}
		/// </summary>
		/// <param name="project">The name or ARN of the project that you want to see the details of.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetProjectResponse> GetProjectAsync(string project, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetProjectResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Updates the description of an existing project.</p> <p>To create a new project, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateProject.html">CreateProject</a>.</p> <p>Don't use this operation to update the data storage options of a project. Instead, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateProjectDataDelivery.html">UpdateProjectDataDelivery</a>. </p> <p>Don't use this operation to update the tags of a project. Instead, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html">TagResource</a>. </p>
		/// UpdateProject projects/{project}
		/// </summary>
		/// <param name="project">The name or ARN of the project to update.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateProjectResponse> UpdateProjectAsync(string project, UpdateProjectPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateProjectResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a segment. You can't delete a segment that is being used in a launch or experiment, even if that launch or experiment is not currently running.
		/// DeleteSegment segments/{segment}
		/// </summary>
		/// <param name="segment">Specifies the segment to delete.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteSegmentResponse> DeleteSegmentAsync(string segment, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "segments/"+ (segment==null? "" : System.Uri.EscapeDataString(segment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteSegmentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns information about the specified segment. Specify the segment you want to view by specifying its ARN.
		/// GetSegment segments/{segment}
		/// </summary>
		/// <param name="segment">The ARN of the segment to return information for.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetSegmentResponse> GetSegmentAsync(string segment, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "segments/"+ (segment==null? "" : System.Uri.EscapeDataString(segment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetSegmentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>This operation assigns a feature variation to one given user session. You pass in an <code>entityID</code> that represents the user. Evidently then checks the evaluation rules and assigns the variation.</p> <p>The first rules that are evaluated are the override rules. If the user's <code>entityID</code> matches an override rule, the user is served the variation specified by that rule.</p> <p>If there is a current launch with this feature that uses segment overrides, and if the user session's <code>evaluationContext</code> matches a segment rule defined in a segment override, the configuration in the segment overrides is used. For more information about segments, see <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateSegment.html">CreateSegment</a> and <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html">Use segments to focus your audience</a>.</p> <p>If there is a launch with no segment overrides, the user might be assigned to a variation in the launch. The chance of this depends on the percentage of users that are allocated to that launch. If the user is enrolled in the launch, the variation they are served depends on the allocation of the various feature variations used for the launch.</p> <p>If the user is not assigned to a launch, and there is an ongoing experiment for this feature, the user might be assigned to a variation in the experiment. The chance of this depends on the percentage of users that are allocated to that experiment.</p> <p>If the experiment uses a segment, then only user sessions with <code>evaluationContext</code> values that match the segment rule are used in the experiment.</p> <p>If the user is enrolled in the experiment, the variation they are served depends on the allocation of the various feature variations used for the experiment. </p> <p>If the user is not assigned to a launch or experiment, they are served the default variation.</p>
		/// EvaluateFeature projects/{project}/evaluations/{feature}
		/// </summary>
		/// <param name="feature">The name of the feature being evaluated.
		/// Min length: 1
		/// Max length: 127
		// </param>
		/// <param name="project">The name or ARN of the project that contains this feature.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<EvaluateFeatureResponse> EvaluateFeatureAsync(string feature, string project, EvaluateFeaturePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/evaluations/"+ (feature==null? "" : System.Uri.EscapeDataString(feature));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EvaluateFeatureResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Retrieves the results of a running or completed experiment. No results are available until there have been 100 events for each variation and at least 10 minutes have passed since the start of the experiment. To increase the statistical power, Evidently performs an additional offline p-value analysis at the end of the experiment. Offline p-value analysis can detect statistical significance in some cases where the anytime p-values used during the experiment do not find statistical significance.</p> <p>Experiment results are available up to 63 days after the start of the experiment. They are not available after that because of CloudWatch data retention policies.</p>
		/// GetExperimentResults projects/{project}/experiments/{experiment}/results
		/// </summary>
		/// <param name="experiment">The name of the experiment to retrieve the results of.
		/// Min length: 1
		/// Max length: 127
		// </param>
		/// <param name="project">The name or ARN of the project that contains the experiment that you want to see the results of.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetExperimentResultsResponse> GetExperimentResultsAsync(string experiment, string project, GetExperimentResultsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/experiments/"+ (experiment==null? "" : System.Uri.EscapeDataString(experiment))+"/results";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetExperimentResultsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Use this operation to find which experiments or launches are using a specified segment.
		/// ListSegmentReferences segments/{segment}/references#type
		/// </summary>
		/// <param name="maxResults">The maximum number of results to include in the response. If you omit this, the default of 50 is used.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token to use when requesting the next set of results. You received this token from a previous <code>ListSegmentReferences</code> operation.
		/// Min length: 1
		/// Max length: 8192
		// </param>
		/// <param name="segment">The ARN of the segment that you want to view information for.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <param name="type">Specifies whether to return information about launches or experiments that use this segment.</param>
		/// <returns>Success</returns>
		public async Task<ListSegmentReferencesResponse> ListSegmentReferencesAsync(int maxResults, string nextToken, string segment, SegmentReferenceResourceType type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "segments/"+ (segment==null? "" : System.Uri.EscapeDataString(segment))+"/references#type?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&type=" + type;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListSegmentReferencesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Displays the tags associated with an Evidently resource.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource that you want to see the tags of.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Assigns one or more tags (key-value pairs) to the specified CloudWatch Evidently resource. Projects, features, launches, and experiments can be tagged.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can use the <code>TagResource</code> action with a resource that already has tags. If you specify a new tag key for the resource, this tag is appended to the list of tags associated with the alarm. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.</p> <p>You can associate as many as 50 tags with a resource.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The ARN of the CloudWatch Evidently resource that you're adding tags to.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TagResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sends performance events to Evidently. These events can be used to evaluate a launch or an experiment.
		/// PutProjectEvents events/projects/{project}
		/// </summary>
		/// <param name="project">The name or ARN of the project to write the events to.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<PutProjectEventsResponse> PutProjectEventsAsync(string project, PutProjectEventsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PutProjectEventsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Starts an existing experiment. To create an experiment, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateExperiment.html">CreateExperiment</a>.
		/// StartExperiment projects/{project}/experiments/{experiment}/start
		/// </summary>
		/// <param name="experiment">The name of the experiment to start.
		/// Min length: 1
		/// Max length: 127
		// </param>
		/// <param name="project">The name or ARN of the project that contains the experiment to start.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<StartExperimentResponse> StartExperimentAsync(string experiment, string project, StartExperimentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/experiments/"+ (experiment==null? "" : System.Uri.EscapeDataString(experiment))+"/start";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartExperimentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Starts an existing launch. To create a launch, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateLaunch.html">CreateLaunch</a>.
		/// StartLaunch projects/{project}/launches/{launch}/start
		/// </summary>
		/// <param name="launch">The name of the launch to start.
		/// Min length: 1
		/// Max length: 127
		// </param>
		/// <param name="project">The name or ARN of the project that contains the launch to start.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<StartLaunchResponse> StartLaunchAsync(string launch, string project, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/launches/"+ (launch==null? "" : System.Uri.EscapeDataString(launch))+"/start";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartLaunchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Stops an experiment that is currently running. If you stop an experiment, you can't resume it or restart it.
		/// StopExperiment projects/{project}/experiments/{experiment}/cancel
		/// </summary>
		/// <param name="experiment">The name of the experiment to stop.
		/// Min length: 1
		/// Max length: 127
		// </param>
		/// <param name="project">The name or ARN of the project that contains the experiment to stop.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<StopExperimentResponse> StopExperimentAsync(string experiment, string project, StopExperimentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/experiments/"+ (experiment==null? "" : System.Uri.EscapeDataString(experiment))+"/cancel";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StopExperimentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Stops a launch that is currently running. After you stop a launch, you will not be able to resume it or restart it. Also, it will not be evaluated as a rule for traffic allocation, and the traffic that was allocated to the launch will instead be available to the feature's experiment, if there is one. Otherwise, all traffic will be served the default variation after the launch is stopped.
		/// StopLaunch projects/{project}/launches/{launch}/cancel
		/// </summary>
		/// <param name="launch">The name of the launch to stop.
		/// Min length: 1
		/// Max length: 127
		// </param>
		/// <param name="project">The name or ARN of the project that contains the launch that you want to stop.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<StopLaunchResponse> StopLaunchAsync(string launch, string project, StopLaunchPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/launches/"+ (launch==null? "" : System.Uri.EscapeDataString(launch))+"/cancel";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StopLaunchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Use this operation to test a rules pattern that you plan to use to create an audience segment. For more information about segments, see <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateSegment.html">CreateSegment</a>.
		/// TestSegmentPattern test-segment-pattern
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TestSegmentPatternResponse> TestSegmentPatternAsync(TestSegmentPatternPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "test-segment-pattern";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TestSegmentPatternResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes one or more tags from the specified resource.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The ARN of the CloudWatch Evidently resource that you're removing tags from.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <param name="tagKeys">The list of tag keys to remove from the resource.
		/// Minimum items: 0
		/// Maximum items: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UntagResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Updates the data storage options for this project. If you store evaluation events, you an keep them and analyze them on your own. If you choose not to store evaluation events, Evidently deletes them after using them to produce metrics and other experiment results that you can view.</p> <p>You can't specify both <code>cloudWatchLogs</code> and <code>s3Destination</code> in the same operation.</p>
		/// UpdateProjectDataDelivery projects/{project}/data-delivery
		/// </summary>
		/// <param name="project">The name or ARN of the project that you want to modify the data storage options for.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateProjectDataDeliveryResponse> UpdateProjectDataDeliveryAsync(string project, UpdateProjectDataDeliveryPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/data-delivery";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateProjectDataDeliveryResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class BatchEvaluateFeaturePostBody
	{
		
		/// <summary>
		/// An array of structures, where each structure assigns a feature variation to one user session.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requests")]
		[System.ComponentModel.DataAnnotations.Length(1, 20)]
		public EvaluationRequest[] Requests { get; set; }
	}
	
	public class CreateExperimentPostBody
	{
		
		/// <summary>
		/// An optional description of the experiment.
		/// Min length: 0
		/// Max length: 160
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.Length(0, 160)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Description { get; set; }
		
		/// <summary>
		/// An array of structures that defines the metrics used for the experiment, and whether a higher or lower value for each metric is the goal.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricGoals")]
		[System.ComponentModel.DataAnnotations.Length(1, 3)]
		public MetricGoalConfig[] MetricGoals { get; set; }
		
		/// <summary>
		/// A name for the new experiment.
		/// Required
		/// Min length: 1
		/// Max length: 127
		/// Pattern: ^[-a-zA-Z0-9._]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.Length(1, 127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[-a-zA-Z0-9._]*$")]
		public string Name { get; set; }
		
		/// <summary>
		/// A structure that contains the configuration of which variation to use as the "control" version. The "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onlineAbConfig")]
		public CreateExperimentPostBodyOnlineAbConfig OnlineAbConfig { get; set; }
		
		/// <summary>
		/// When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the experiment name as the <code>randomizationSalt</code>.
		/// Min length: 0
		/// Max length: 127
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="randomizationSalt")]
		[System.ComponentModel.DataAnnotations.Length(0, 127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string RandomizationSalt { get; set; }
		
		/// <summary>
		/// <p>The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.</p> <p>This is represented in thousandths of a percent. For example, specify 10,000 to allocate 10% of the available audience.</p>
		/// Minimum: 0
		/// Maximum: 100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="samplingRate")]
		[System.ComponentModel.DataAnnotations.Range(0, 100000)]
		public System.Nullable<System.Int32> SamplingRate { get; set; }
		
		/// <summary>
		/// Specifies an audience <i>segment</i> to use in the experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment.
		/// Min length: 0
		/// Max length: 2048
		/// Pattern: (^[-a-zA-Z0-9._]*$)|(arn:[^:]*:[^:]*:[^:]*:[^:]*:segment/[-a-zA-Z0-9._]*)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segment")]
		[System.ComponentModel.DataAnnotations.Length(0, 2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(^[-a-zA-Z0-9._]*$)|(arn:[^:]*:[^:]*:[^:]*:[^:]*:segment/[-a-zA-Z0-9._]*)")]
		public string Segment { get; set; }
		
		/// <summary>
		/// <p>Assigns one or more tags (key-value pairs) to the experiment.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can associate as many as 50 tags with an experiment.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// An array of structures that describe the configuration of each feature variation used in the experiment.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="treatments")]
		[System.ComponentModel.DataAnnotations.Length(0, 5)]
		public TreatmentConfig[] Treatments { get; set; }
	}
	
	public class CreateExperimentPostBodyOnlineAbConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="controlTreatmentName")]
		public string ControlTreatmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treatmentWeights")]
		public TreatmentToWeightMap TreatmentWeights { get; set; }
	}
	
	public class CreateFeaturePostBody
	{
		
		/// <summary>
		/// <p>The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature.</p> <p>This variation must also be listed in the <code>variations</code> structure.</p> <p>If you omit <code>defaultVariation</code>, the first variation listed in the <code>variations</code> structure is used as the default variation.</p>
		/// Min length: 1
		/// Max length: 127
		/// Pattern: ^[-a-zA-Z0-9._]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultVariation")]
		[System.ComponentModel.DataAnnotations.Length(1, 127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[-a-zA-Z0-9._]*$")]
		public string DefaultVariation { get; set; }
		
		/// <summary>
		/// An optional description of the feature.
		/// Min length: 0
		/// Max length: 160
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.Length(0, 160)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Description { get; set; }
		
		/// <summary>
		/// <p>Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.</p> <p>This parameter is limited to 2500 overrides or a total of 40KB. The 40KB limit includes an overhead of 6 bytes per override.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityOverrides")]
		public System.Collections.Generic.Dictionary<string, string> EntityOverrides { get; set; }
		
		/// <summary>
		/// Specify <code>ALL_RULES</code> to activate the traffic allocation specified by any ongoing launches or experiments. Specify <code>DEFAULT_VARIATION</code> to serve the default variation to all users instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evaluationStrategy")]
		public FeatureEvaluationStrategy EvaluationStrategy { get; set; }
		
		/// <summary>
		/// The name for the new feature.
		/// Required
		/// Min length: 1
		/// Max length: 127
		/// Pattern: ^[-a-zA-Z0-9._]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.Length(1, 127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[-a-zA-Z0-9._]*$")]
		public string Name { get; set; }
		
		/// <summary>
		/// <p>Assigns one or more tags (key-value pairs) to the feature.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can associate as many as 50 tags with a feature.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// An array of structures that contain the configuration of the feature's different variations.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="variations")]
		[System.ComponentModel.DataAnnotations.Length(1, 5)]
		public VariationConfig[] Variations { get; set; }
	}
	
	public class CreateLaunchPostBody
	{
		
		/// <summary>
		/// An optional description for the launch.
		/// Min length: 0
		/// Max length: 160
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.Length(0, 160)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Description { get; set; }
		
		/// <summary>
		/// An array of structures that contains the feature and variations that are to be used for the launch.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groups")]
		[System.ComponentModel.DataAnnotations.Length(1, 5)]
		public LaunchGroupConfig[] Groups { get; set; }
		
		/// <summary>
		/// An array of structures that define the metrics that will be used to monitor the launch performance.
		/// Minimum items: 0
		/// Maximum items: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricMonitors")]
		[System.ComponentModel.DataAnnotations.Length(0, 3)]
		public MetricMonitorConfig[] MetricMonitors { get; set; }
		
		/// <summary>
		/// The name for the new launch.
		/// Required
		/// Min length: 1
		/// Max length: 127
		/// Pattern: ^[-a-zA-Z0-9._]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.Length(1, 127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[-a-zA-Z0-9._]*$")]
		public string Name { get; set; }
		
		/// <summary>
		/// When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the launch name as the <code>randomizationSalt</code>.
		/// Min length: 0
		/// Max length: 127
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="randomizationSalt")]
		[System.ComponentModel.DataAnnotations.Length(0, 127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string RandomizationSalt { get; set; }
		
		/// <summary>
		/// An array of structures that define the traffic allocation percentages among the feature variations during each step of a launch. This also defines the start time of each step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledSplitsConfig")]
		public CreateLaunchPostBodyScheduledSplitsConfig ScheduledSplitsConfig { get; set; }
		
		/// <summary>
		/// <p>Assigns one or more tags (key-value pairs) to the launch.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can associate as many as 50 tags with a launch.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateLaunchPostBodyScheduledSplitsConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public ScheduledSplitConfig[] Steps { get; set; }
	}
	
	public class CreateProjectPostBody
	{
		
		/// <summary>
		/// <p>Use this parameter to configure client-side evaluation for your project. Client-side evaluation allows your application to assign variations to user sessions locally instead of by calling the <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_EvaluateFeature.html">EvaluateFeature</a> operation to assign the variations. This mitigates the latency and availability risks that come with an API call.</p> <p> <code>ProjectAppConfigResource</code> is a structure that defines the configuration of how your application integrates with AppConfig to run client-side evaluation.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appConfigResource")]
		public CreateProjectPostBodyAppConfigResource AppConfigResource { get; set; }
		
		/// <summary>
		/// A structure that contains information about where Evidently is to store evaluation events for longer term storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDelivery")]
		public CreateProjectPostBodyDataDelivery DataDelivery { get; set; }
		
		/// <summary>
		/// An optional description of the project.
		/// Min length: 0
		/// Max length: 160
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.Length(0, 160)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Description { get; set; }
		
		/// <summary>
		/// The name for the project.
		/// Required
		/// Min length: 1
		/// Max length: 127
		/// Pattern: ^[-a-zA-Z0-9._]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.Length(1, 127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[-a-zA-Z0-9._]*$")]
		public string Name { get; set; }
		
		/// <summary>
		/// <p>Assigns one or more tags (key-value pairs) to the project.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can associate as many as 50 tags with a project.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateProjectPostBodyAppConfigResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
	}
	
	public class CreateProjectPostBodyDataDelivery
	{
		
		[System.Runtime.Serialization.DataMember(Name="cloudWatchLogs")]
		public CloudWatchLogsDestinationConfig CloudWatchLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Destination")]
		public S3DestinationConfig S3Destination { get; set; }
	}
	
	public class CreateSegmentPostBody
	{
		
		/// <summary>
		/// An optional description for this segment.
		/// Min length: 0
		/// Max length: 160
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.Length(0, 160)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Description { get; set; }
		
		/// <summary>
		/// A name for the segment.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[-a-zA-Z0-9._]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.Length(1, 64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[-a-zA-Z0-9._]*$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The pattern to use for the segment. For more information about pattern syntax, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax.html"> Segment rule pattern syntax</a>.
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pattern")]
		[System.ComponentModel.DataAnnotations.Length(1, 1024)]
		public string Pattern { get; set; }
		
		/// <summary>
		/// <p>Assigns one or more tags (key-value pairs) to the segment.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can associate as many as 50 tags with a segment.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class UpdateExperimentPatchBody
	{
		
		/// <summary>
		/// An optional description of the experiment.
		/// Min length: 0
		/// Max length: 160
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.Length(0, 160)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Description { get; set; }
		
		/// <summary>
		/// An array of structures that defines the metrics used for the experiment, and whether a higher or lower value for each metric is the goal.
		/// Minimum items: 1
		/// Maximum items: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricGoals")]
		[System.ComponentModel.DataAnnotations.Length(1, 3)]
		public MetricGoalConfig[] MetricGoals { get; set; }
		
		/// <summary>
		/// A structure that contains the configuration of which variation to use as the "control" version. The "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onlineAbConfig")]
		public UpdateExperimentPatchBodyOnlineAbConfig OnlineAbConfig { get; set; }
		
		/// <summary>
		/// When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the experiment name as the <code>randomizationSalt</code>.
		/// Min length: 0
		/// Max length: 127
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="randomizationSalt")]
		[System.ComponentModel.DataAnnotations.Length(0, 127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string RandomizationSalt { get; set; }
		
		/// <summary>
		/// Removes a segment from being used in an experiment. You can't use this parameter if the experiment is currently running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeSegment")]
		public System.Nullable<System.Boolean> RemoveSegment { get; set; }
		
		/// <summary>
		/// <p>The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.</p> <p>This is represented in thousandths of a percent. For example, specify 20,000 to allocate 20% of the available audience.</p>
		/// Minimum: 0
		/// Maximum: 100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="samplingRate")]
		[System.ComponentModel.DataAnnotations.Range(0, 100000)]
		public System.Nullable<System.Int32> SamplingRate { get; set; }
		
		/// <summary>
		/// Adds an audience <i>segment</i> to an experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment. You can't use this parameter if the experiment is currently running.
		/// Min length: 0
		/// Max length: 2048
		/// Pattern: (^[-a-zA-Z0-9._]*$)|(arn:[^:]*:[^:]*:[^:]*:[^:]*:segment/[-a-zA-Z0-9._]*)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segment")]
		[System.ComponentModel.DataAnnotations.Length(0, 2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(^[-a-zA-Z0-9._]*$)|(arn:[^:]*:[^:]*:[^:]*:[^:]*:segment/[-a-zA-Z0-9._]*)")]
		public string Segment { get; set; }
		
		/// <summary>
		/// An array of structures that define the variations being tested in the experiment.
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treatments")]
		[System.ComponentModel.DataAnnotations.Length(0, 5)]
		public TreatmentConfig[] Treatments { get; set; }
	}
	
	public class UpdateExperimentPatchBodyOnlineAbConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="controlTreatmentName")]
		public string ControlTreatmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treatmentWeights")]
		public TreatmentToWeightMap TreatmentWeights { get; set; }
	}
	
	public class UpdateFeaturePatchBody
	{
		
		/// <summary>
		/// To update variation configurations for this feature, or add new ones, specify this structure. In this array, include any variations that you want to add or update. If the array includes a variation name that already exists for this feature, it is updated. If it includes a new variation name, it is added as a new variation.
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addOrUpdateVariations")]
		[System.ComponentModel.DataAnnotations.Length(1, 5)]
		public VariationConfig[] AddOrUpdateVariations { get; set; }
		
		/// <summary>
		/// The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature.
		/// Min length: 1
		/// Max length: 127
		/// Pattern: ^[-a-zA-Z0-9._]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultVariation")]
		[System.ComponentModel.DataAnnotations.Length(1, 127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[-a-zA-Z0-9._]*$")]
		public string DefaultVariation { get; set; }
		
		/// <summary>
		/// An optional description of the feature.
		/// Min length: 0
		/// Max length: 160
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.Length(0, 160)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Description { get; set; }
		
		/// <summary>
		/// <p>Specified users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.</p> <p>This parameter is limited to 2500 overrides or a total of 40KB. The 40KB limit includes an overhead of 6 bytes per override.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityOverrides")]
		public System.Collections.Generic.Dictionary<string, string> EntityOverrides { get; set; }
		
		/// <summary>
		/// Specify <code>ALL_RULES</code> to activate the traffic allocation specified by any ongoing launches or experiments. Specify <code>DEFAULT_VARIATION</code> to serve the default variation to all users instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evaluationStrategy")]
		public FeatureEvaluationStrategy EvaluationStrategy { get; set; }
		
		/// <summary>
		/// <p>Removes a variation from the feature. If the variation you specify doesn't exist, then this makes no change and does not report an error.</p> <p>This operation fails if you try to remove a variation that is part of an ongoing launch or experiment.</p>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeVariations")]
		[System.ComponentModel.DataAnnotations.Length(0, 5)]
		public string[] RemoveVariations { get; set; }
	}
	
	public class UpdateLaunchPatchBody
	{
		
		/// <summary>
		/// An optional description for the launch.
		/// Min length: 0
		/// Max length: 160
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.Length(0, 160)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Description { get; set; }
		
		/// <summary>
		/// An array of structures that contains the feature and variations that are to be used for the launch.
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groups")]
		[System.ComponentModel.DataAnnotations.Length(1, 5)]
		public LaunchGroupConfig[] Groups { get; set; }
		
		/// <summary>
		/// An array of structures that define the metrics that will be used to monitor the launch performance.
		/// Minimum items: 0
		/// Maximum items: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricMonitors")]
		[System.ComponentModel.DataAnnotations.Length(0, 3)]
		public MetricMonitorConfig[] MetricMonitors { get; set; }
		
		/// <summary>
		/// When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the launch name as the <code>randomizationSalt</code>.
		/// Min length: 0
		/// Max length: 127
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="randomizationSalt")]
		[System.ComponentModel.DataAnnotations.Length(0, 127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string RandomizationSalt { get; set; }
		
		/// <summary>
		/// An array of structures that define the traffic allocation percentages among the feature variations during each step of a launch. This also defines the start time of each step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledSplitsConfig")]
		public UpdateLaunchPatchBodyScheduledSplitsConfig ScheduledSplitsConfig { get; set; }
	}
	
	public class UpdateLaunchPatchBodyScheduledSplitsConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public ScheduledSplitConfig[] Steps { get; set; }
	}
	
	public class UpdateProjectPatchBody
	{
		
		/// <summary>
		/// <p>Use this parameter to configure client-side evaluation for your project. Client-side evaluation allows your application to assign variations to user sessions locally instead of by calling the <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_EvaluateFeature.html">EvaluateFeature</a> operation to assign the variations. This mitigates the latency and availability risks that come with an API call.</p> <p> <code>ProjectAppConfigResource</code> is a structure that defines the configuration of how your application integrates with AppConfig to run client-side evaluation.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appConfigResource")]
		public UpdateProjectPatchBodyAppConfigResource AppConfigResource { get; set; }
		
		/// <summary>
		/// An optional description of the project.
		/// Min length: 0
		/// Max length: 160
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.Length(0, 160)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Description { get; set; }
	}
	
	public class UpdateProjectPatchBodyAppConfigResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
	}
	
	public class EvaluateFeaturePostBody
	{
		
		/// <summary>
		/// An internal ID that represents a unique user of the application. This <code>entityID</code> is checked against any override rules assigned for this feature.
		/// Required
		/// Min length: 1
		/// Max length: 512
		/// Pattern: .*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		[System.ComponentModel.DataAnnotations.Length(1, 512)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string EntityId { get; set; }
		
		/// <summary>
		/// <p>A JSON object of attributes that you can optionally pass in as part of the evaluation event sent to Evidently from the user session. Evidently can use this value to match user sessions with defined audience segments. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html">Use segments to focus your audience</a>.</p> <p>If you include this parameter, the value must be a JSON object. A JSON array is not supported.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evaluationContext")]
		public string EvaluationContext { get; set; }
	}
	
	public class GetExperimentResultsPostBody
	{
		
		/// <summary>
		/// The statistic used to calculate experiment results. Currently the only valid value is <code>mean</code>, which uses the mean of the collected values as the statistic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseStat")]
		public ExperimentBaseStat BaseStat { get; set; }
		
		/// <summary>
		/// The date and time that the experiment ended, if it is completed. This must be no longer than 30 days after the experiment start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The names of the experiment metrics that you want to see the results of.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricNames")]
		[System.ComponentModel.DataAnnotations.Length(1, 1)]
		public string[] MetricNames { get; set; }
		
		/// <summary>
		/// In seconds, the amount of time to aggregate results together. 
		/// Minimum: 300
		/// Maximum: 90000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="period")]
		[System.ComponentModel.DataAnnotations.Range(300, 90000)]
		public System.Nullable<System.Int32> Period { get; set; }
		
		/// <summary>
		/// The names of the report types that you want to see. Currently, <code>BayesianInference</code> is the only valid value.
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportNames")]
		[System.ComponentModel.DataAnnotations.Length(0, 5)]
		public ExperimentReportName[] ReportNames { get; set; }
		
		/// <summary>
		/// <p>The statistics that you want to see in the returned results.</p> <ul> <li> <p> <code>PValue</code> specifies to use p-values for the results. A p-value is used in hypothesis testing to measure how often you are willing to make a mistake in rejecting the null hypothesis. A general practice is to reject the null hypothesis and declare that the results are statistically significant when the p-value is less than 0.05.</p> </li> <li> <p> <code>ConfidenceInterval</code> specifies a confidence interval for the results. The confidence interval represents the range of values for the chosen metric that is likely to contain the true difference between the <code>baseStat</code> of a variation and the baseline. Evidently returns the 95% confidence interval. </p> </li> <li> <p> <code>TreatmentEffect</code> is the difference in the statistic specified by the <code>baseStat</code> parameter between each variation and the default variation. </p> </li> <li> <p> <code>BaseStat</code> returns the statistical values collected for the metric for each variation. The statistic uses the same statistic specified in the <code>baseStat</code> parameter. Therefore, if <code>baseStat</code> is <code>mean</code>, this returns the mean of the values collected for each variation.</p> </li> </ul>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultStats")]
		[System.ComponentModel.DataAnnotations.Length(0, 5)]
		public ExperimentResultRequestType[] ResultStats { get; set; }
		
		/// <summary>
		/// The date and time that the experiment started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The names of the experiment treatments that you want to see the results for.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="treatmentNames")]
		[System.ComponentModel.DataAnnotations.Length(1, 5)]
		public string[] TreatmentNames { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The list of key-value pairs to associate with the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class PutProjectEventsPostBody
	{
		
		/// <summary>
		/// An array of event structures that contain the performance data that is being sent to Evidently.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="events")]
		[System.ComponentModel.DataAnnotations.Length(0, 50)]
		public Event[] Events { get; set; }
	}
	
	public class StartExperimentPostBody
	{
		
		/// <summary>
		/// The date and time to end the experiment. This must be no more than 30 days after the experiment starts.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="analysisCompleteTime")]
		public System.DateTimeOffset AnalysisCompleteTime { get; set; }
	}
	
	public class StopExperimentPostBody
	{
		
		/// <summary>
		/// Specify whether the experiment is to be considered <code>COMPLETED</code> or <code>CANCELLED</code> after it stops.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredState")]
		public ExperimentStopDesiredState DesiredState { get; set; }
		
		/// <summary>
		/// A string that describes why you are stopping the experiment.
		/// Min length: 0
		/// Max length: 160
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		[System.ComponentModel.DataAnnotations.Length(0, 160)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Reason { get; set; }
	}
	
	public class StopLaunchPostBody
	{
		
		/// <summary>
		/// Specify whether to consider the launch as <code>COMPLETED</code> or <code>CANCELLED</code> after it stops.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredState")]
		public ExperimentStopDesiredState DesiredState { get; set; }
		
		/// <summary>
		/// A string that describes why you are stopping the launch.
		/// Min length: 0
		/// Max length: 160
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		[System.ComponentModel.DataAnnotations.Length(0, 160)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Reason { get; set; }
	}
	
	public class TestSegmentPatternPostBody
	{
		
		/// <summary>
		/// The pattern to test.
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pattern")]
		[System.ComponentModel.DataAnnotations.Length(1, 1024)]
		public string Pattern { get; set; }
		
		/// <summary>
		/// A sample <code>evaluationContext</code> JSON block to test against the specified pattern.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
	}
	
	public class UpdateProjectDataDeliveryPatchBody
	{
		
		/// <summary>
		/// A structure containing the CloudWatch Logs log group where the project stores evaluation events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudWatchLogs")]
		public UpdateProjectDataDeliveryPatchBodyCloudWatchLogs CloudWatchLogs { get; set; }
		
		/// <summary>
		/// If the project stores evaluation events in an Amazon S3 bucket, this structure stores the bucket name and bucket prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="s3Destination")]
		public UpdateProjectDataDeliveryPatchBodyS3Destination S3Destination { get; set; }
	}
	
	public class UpdateProjectDataDeliveryPatchBodyCloudWatchLogs
	{
		
		[System.Runtime.Serialization.DataMember(Name="logGroup")]
		public string LogGroup { get; set; }
	}
	
	public class UpdateProjectDataDeliveryPatchBodyS3Destination
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
