//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Emojis
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Hashtags
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Images
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Instagram
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Link_shortening
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Auto-Emojify
		/// Returns text of the post with emoji added
		/// Auto_Emojify v1/emoji/auto-emojify
		/// </summary>
		/// <param name="text">Text of the post</param>
		/// <returns>OK</returns>
		public async Task Auto_EmojifyAsync(string text, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/emoji/auto-emojify?text=" + (text==null? "" : System.Uri.EscapeDataString(text));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Emoji Suggestions
		/// Returns list of emoji suggestions for a given text of the post
		/// Emoji_Suggestions v1/emoji/suggestions
		/// </summary>
		/// <param name="text">Text of the post</param>
		/// <returns>OK</returns>
		public async Task Emoji_SuggestionsAsync(string text, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/emoji/suggestions?text=" + (text==null? "" : System.Uri.EscapeDataString(text));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Animate Image
		/// Returns URL of an animated GIF.
		/// Animate_Image v1/images/animate
		/// </summary>
		/// <param name="url">URL of the company</param>
		/// <param name="type">URL of the company</param>
		/// <returns>OK</returns>
		public async Task Animate_ImageAsync(string url, string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/images/animate?url=" + (url==null? "" : System.Uri.EscapeDataString(url))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Company Logo
		/// Returns a company logo based on website domain. If the logo is not in our database yet, it will be extracted from the site on the fly. White logo background is automatically removed to make the logo look better on color backgrounds.
		/// 
		/// Note: It is not possible to access our company logo API publicly without authentication. If you wish to do so, you have to create proxy on your own server that calls our API from the server side.
		/// Company_Logo v1/images/logo
		/// </summary>
		/// <param name="domain">URL of the company</param>
		/// <returns>OK</returns>
		public async Task Company_LogoAsync(string domain, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/images/logo?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Text to Image
		/// Returns URL of an image created from text according to given style parameters
		/// Text_to_Image v1/images/quote
		/// </summary>
		/// <param name="quote">Text of the quote</param>
		/// <param name="author">Name of the author/source</param>
		/// <param name="fontSize">Font size for the quote (author font size is calculated automatically)</param>
		/// <param name="quoteFont">Font-family used for quote text</param>
		/// <param name="quoteFontColor">Font color of the quote text</param>
		/// <param name="authorFont">Font-family used for author name</param>
		/// <param name="authorFontColor">Font color of the author</param>
		/// <param name="enableHighlight">Enable highlight on quote text</param>
		/// <param name="highlightColor">Color used for highlight</param>
		/// <param name="bgType">Background type (gradient/solid)</param>
		/// <param name="backgroundColor">Background color for solid background type</param>
		/// <param name="gradientType">Type of gradient background (linear/radial)</param>
		/// <param name="gradientColor1">First color for gradient background type</param>
		/// <param name="gradientColor2">Second color for gradient background type</param>
		/// <param name="brandLogo">URL of the brand logo</param>
		/// <param name="animation">Animation type: none, rays, glint, circle</param>
		/// <param name="showQuoteMark">showing/hiding quote mark</param>
		/// <returns>OK</returns>
		public async Task Text_to_ImageAsync(
					string quote, 
					string author, 
					int fontSize, 
					string quoteFont, 
					string quoteFontColor, 
					string authorFont, 
					string authorFontColor, 
					int enableHighlight, 
					string highlightColor, 
					string bgType, 
					string backgroundColor, 
					string gradientType, 
					string gradientColor1, 
					string gradientColor2, 
					string brandLogo, 
					string animation, 
					int showQuoteMark, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/images/quote?quote=" + (quote==null? "" : System.Uri.EscapeDataString(quote))+"&author=" + (author==null? "" : System.Uri.EscapeDataString(author))+"&fontSize="+fontSize+"&quoteFont=" + (quoteFont==null? "" : System.Uri.EscapeDataString(quoteFont))+"&quoteFontColor=" + (quoteFontColor==null? "" : System.Uri.EscapeDataString(quoteFontColor))+"&authorFont=" + (authorFont==null? "" : System.Uri.EscapeDataString(authorFont))+"&authorFontColor=" + (authorFontColor==null? "" : System.Uri.EscapeDataString(authorFontColor))+"&enableHighlight="+enableHighlight+"&highlightColor=" + (highlightColor==null? "" : System.Uri.EscapeDataString(highlightColor))+"&bgType=" + (bgType==null? "" : System.Uri.EscapeDataString(bgType))+"&backgroundColor=" + (backgroundColor==null? "" : System.Uri.EscapeDataString(backgroundColor))+"&gradientType=" + (gradientType==null? "" : System.Uri.EscapeDataString(gradientType))+"&gradientColor1=" + (gradientColor1==null? "" : System.Uri.EscapeDataString(gradientColor1))+"&gradientColor2=" + (gradientColor2==null? "" : System.Uri.EscapeDataString(gradientColor2))+"&brandLogo=" + (brandLogo==null? "" : System.Uri.EscapeDataString(brandLogo))+"&animation=" + (animation==null? "" : System.Uri.EscapeDataString(animation))+"&showQuoteMark="+showQuoteMark;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List of CTAs
		/// Returns list of available CTA for current user. Requires each user to authenticate with RiteKit
		/// List_of_CTAs v1/link/cta
		/// </summary>
		/// <returns>OK</returns>
		public async Task List_of_CTAsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/link/cta";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Shorten Link
		/// Returns a shorten link with a given CTA.
		/// Shorten_Link v1/link/short-link
		/// </summary>
		/// <param name="url">URL</param>
		/// <param name="cta">cta id</param>
		/// <returns>OK</returns>
		public async Task Shorten_LinkAsync(string url, int cta, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/link/short-link?url=" + (url==null? "" : System.Uri.EscapeDataString(url))+"&cta="+cta;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Trending Hashtags
		/// Returns list of hashtags currently trending on Twitter
		/// Trending_Hashtags v1/search/trending
		/// </summary>
		/// <param name="green">Restrict results only to green hashtags. Hides overused (red) hashtags.</param>
		/// <param name="latin">Restrict results only to hashtags with latin characters</param>
		/// <returns>OK</returns>
		public async Task Trending_HashtagsAsync(bool green, bool latin, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/search/trending?green="+green+"&latin="+latin;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Auto-Hashtag
		/// Returns auto-hashtagged text of the post.
		/// Auto_Hashtag v1/stats/auto-hashtag
		/// </summary>
		/// <param name="post">Text of the post</param>
		/// <param name="maxHashtags">Max number of hashtags.</param>
		/// <param name="hashtagPosition">Position of hashtags: end => at the end, auto => anywhere</param>
		/// <returns>OK</returns>
		public async Task Auto_HashtagAsync(string post, int maxHashtags, string hashtagPosition, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/stats/auto-hashtag?post=" + (post==null? "" : System.Uri.EscapeDataString(post))+"&maxHashtags="+maxHashtags+"&hashtagPosition=" + (hashtagPosition==null? "" : System.Uri.EscapeDataString(hashtagPosition));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Hashtag Suggestions
		/// Returns list of hashtag suggestions for a single-word topic or a shorter text up to 1000 characters. Takes into account both semantic relevancy and real-time hashtag popularity.
		/// Hashtag_Suggestions v1/stats/hashtag-suggestions
		/// </summary>
		/// <param name="text">Topic</param>
		/// <returns>OK</returns>
		public async Task Hashtag_SuggestionsAsync(string text, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/stats/hashtag-suggestions?text=" + (text==null? "" : System.Uri.EscapeDataString(text));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Hashtag History
		/// Returns historical stats for a given hashtag from the last 30 days
		/// Hashtag_History v1/stats/history/{hashtag}
		/// </summary>
		/// <param name="hashtag">Hashtag without # mark</param>
		/// <returns>OK</returns>
		public async Task Hashtag_HistoryAsync(string hashtag, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/stats/history/"+ (hashtag==null? "" : System.Uri.EscapeDataString(hashtag));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Hashtag Stats
		/// Returns real-time stats for up to 100 hashtags (updated hourly).
		/// Hashtag_Stats v1/stats/multiple-hashtags
		/// </summary>
		/// <param name="tags">Hashtag(s) without # mark</param>
		/// <returns>OK</returns>
		public async Task Hashtag_StatsAsync(string[] tags, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/stats/multiple-hashtags?"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Hashtags cleaner
		/// Remove banned hashtags before posting to Instagram
		/// Hashtags_cleaner v2/instagram/hashtags-cleaner
		/// </summary>
		/// <param name="post">post</param>
		/// <returns>OK</returns>
		public async Task Hashtags_cleanerAsync(string post, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/instagram/hashtags-cleaner?post=" + (post==null? "" : System.Uri.EscapeDataString(post));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
