//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// List of Errors generated by the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Errors
	{
		
		/// <summary>
		/// Errors Array
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ErrorsErrors1[] ErrorsErrors1 { get; set; }
	}
	
	public class ErrorsErrors1
	{
		
		/// <summary>
		/// Detail information about the error.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Detail { get; set; }
		
		/// <summary>
		/// Status Code of Error
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Status { get; set; }
		
		/// <summary>
		/// Error Title
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// API Response Links
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Links
	{
		
		/// <summary>
		/// Link to the first group of records from API call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first")]
		public string First { get; set; }
		
		/// <summary>
		/// Link to last set of records from API call. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last")]
		public string Last { get; set; }
		
		/// <summary>
		/// Link to next set of results from API call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// Link to the previous set of records from API call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prev")]
		public string Prev { get; set; }
		
		/// <summary>
		/// Link to this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	/// <summary>
	/// Succesful response of the 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ZipCodeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Zipcode[] Data { get; set; }
		
		/// <summary>
		/// API Response Links
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
		
		/// <summary>
		/// Response Metadata. Provides additional context about the data response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
	}
	
	/// <summary>
	/// Zip Code Data Model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Zipcode
	{
		
		/// <summary>
		/// Array that contains all the city aliases for the given zip code.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cityAliases")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ZipcodeCityAliases[] ZipcodeCityAliases { get; set; }
		
		/// <summary>
		/// FIPS code assigned to the county of the main city of the zip code.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="countyFipsCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string CountyFipsCode { get; set; }
		
		/// <summary>
		/// Division Code. Part of the geographical hierarchy of the US provided by the united states census.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="divisionCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string DivisionCode { get; set; }
		
		/// <summary>
		/// Division Name. Part of the geographical hierarchy of the US provided by the united states census.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="divisionName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string DivisionName { get; set; }
		
		/// <summary>
		/// Zip Code Land Area in square kilometers.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="landAreaKm2")]
		public System.Nullable<System.Double> LandAreaKm2 { get; set; }
		
		/// <summary>
		/// Zip Code Land area in Square Miles
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="landAreaMi2")]
		public System.Nullable<System.Double> LandAreaMi2 { get; set; }
		
		/// <summary>
		/// Zip Code Latitude
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// Zip Code Longitude
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		/// <summary>
		/// 5 digit MSA (Metropolitan Statistical Area) code.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="msaCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string MsaCode { get; set; }
		
		/// <summary>
		/// Name of the defined MSA code.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="msaName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string MsaName { get; set; }
		
		/// <summary>
		/// Region Code. Part of the geographical hierarchy of the US provided by the united states census.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string RegionCode { get; set; }
		
		/// <summary>
		/// Region Name. Part of the geographical hierarchy of the US provided by the united states census.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string RegionName { get; set; }
		
		/// <summary>
		/// Abbreviation for state name.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateAbbr")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string StateAbbr { get; set; }
		
		/// <summary>
		/// Standard 2 character state code.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string StateCode { get; set; }
		
		/// <summary>
		/// Federal Information Processing Standards 2 digit assigned code.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateFipsCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string StateFipsCode { get; set; }
		
		/// <summary>
		/// State Name
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string StateName { get; set; }
		
		/// <summary>
		/// USPS City / Town Name for the main city of the zip code. Title Case Format.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="titleCaseCityName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string TitleCaseCityName { get; set; }
		
		/// <summary>
		/// Main County Name in Title Case
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="titleCaseCountyName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string TitleCaseCountyName { get; set; }
		
		/// <summary>
		/// True = Unique Zip Code Name. False the zip code name is not unique.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uniqueZipNameInd")]
		public bool UniqueZipNameInd { get; set; }
		
		/// <summary>
		/// Description for the carrier route code.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uspsCarrierRouteRateSortDesc")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string UspsCarrierRouteRateSortDesc { get; set; }
		
		/// <summary>
		/// Code for the available carrier route.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uspsCarrierRouteSortCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string UspsCarrierRouteSortCode { get; set; }
		
		/// <summary>
		/// City names with the City State Mailing Name indicator flag set to True are considered part of a complete and standardized address; city names with the flag set to false  file should not be used in a complete and standardized address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uspsCityMailingInd")]
		public bool UspsCityMailingInd { get; set; }
		
		/// <summary>
		/// Name of the county of the main city for the zip code.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uspsCountyName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string UspsCountyName { get; set; }
		
		/// <summary>
		/// Determines if the zip code city has Carrier Routes.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uspsDeliveryCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string UspsDeliveryCode { get; set; }
		
		/// <summary>
		/// Determines if the zip code city has Carrier Routes.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uspsDeliveryDesc")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string UspsDeliveryDesc { get; set; }
		
		/// <summary>
		/// Facility code provided by the USPS. B=Branch, C=Community Post Office, N = Non-Postal Community Name, former postal facility or place name, P= Post Office, S=Station, U = Urbanization
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uspsFacilityCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string UspsFacilityCode { get; set; }
		
		/// <summary>
		/// USPS Facility Name  B=Branch, C=Community Post Office, N = Non-Postal Community Name, former postal facility or place name, P= Post Office, S=Station, U = Urbanization
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uspsFacilityName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string UspsFacilityName { get; set; }
		
		/// <summary>
		/// USPS Provided Finance Number. This code is assigned to postal service facilities.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uspsFinanceNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string UspsFinanceNumber { get; set; }
		
		/// <summary>
		/// USPS City / Town key identifier for the main city of the zip code.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uspsMainCityKey")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string UspsMainCityKey { get; set; }
		
		/// <summary>
		/// USPS City / Town Name for the main city of the zip code. USPS Upper Case Format.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uspsMainCityName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string UspsMainCityName { get; set; }
		
		/// <summary>
		/// Zip Code water area in Square kilometers.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waterAreaKm2")]
		public System.Nullable<System.Double> WaterAreaKm2 { get; set; }
		
		/// <summary>
		/// Zip Code Water Area in Square Miles
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waterAreaMi2")]
		public System.Nullable<System.Double> WaterAreaMi2 { get; set; }
		
		/// <summary>
		/// Code provided by USPS for the type of Zip Code it represents.  P = PO Box Zip, U = Unique Zip, M = APO/FPO Military Zip , null (not provided by USPS),N = Non-Unique Zip.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zipClassificationCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string ZipClassificationCode { get; set; }
		
		/// <summary>
		/// Description of the zip classification code.   P = PO Box Zip, U = Unique Zip, M = APO/FPO Military Zip , null (not provided by USPS), = Non-Unique Zip.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zipClassificationDesc")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string ZipClassificationDesc { get; set; }
		
		/// <summary>
		/// 5 Digit Zip Code. Zone Improvement Plan.
		/// Required
		/// Min length: 5
		/// Max length: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zipCode")]
		[System.ComponentModel.DataAnnotations.Length(5, 5)]
		public string ZipCode { get; set; }
		
		/// <summary>
		/// Available statistics by year of the Zip Code.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zipCodeStatistics")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ZipcodeZipCodeStatistics[] ZipcodeZipCodeStatistics { get; set; }
	}
	
	public class ZipcodeCityAliases
	{
		
		/// <summary>
		/// USPS City / Town Name for the zip code.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="titleCaseCityName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string TitleCaseCityName { get; set; }
		
		/// <summary>
		/// Main city abbreviation provided by USPS. Null if not provided. Uppercase.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uspsCityAbbr")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string UspsCityAbbr { get; set; }
		
		/// <summary>
		/// USPS City / Town key identifier city of the zip code.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uspsCityKey")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string UspsCityKey { get; set; }
		
		/// <summary>
		/// City names with the City State Mailing Name indicator flag set to True are considered part of a complete and standardized address; city names with the flag set to false  file should not be used in a complete and standardized address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uspsCityMailingInd")]
		public bool UspsCityMailingInd { get; set; }
		
		/// <summary>
		/// USPS City / Town Name for the zip code. All uppercase.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uspsCityName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string UspsCityName { get; set; }
		
		/// <summary>
		/// If true, the city name and code is the main zip code city name.  (Preferred USPS city).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uspsMainCityInd")]
		public bool UspsMainCityInd { get; set; }
	}
	
	public class ZipcodeZipCodeStatistics
	{
		
		/// <summary>
		/// Total female population of the zip code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="femalePopulation")]
		public double FemalePopulation { get; set; }
		
		/// <summary>
		/// Total Male population of the zip code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="malePopulation")]
		public double MalePopulation { get; set; }
		
		/// <summary>
		/// Total population of the zip code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPopulation")]
		public double TotalPopulation { get; set; }
		
		/// <summary>
		/// Year for the captured statistic
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="year")]
		public double Year { get; set; }
	}
	
	/// <summary>
	/// Response Metadata. Provides additional context about the data response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Meta
	{
		
		/// <summary>
		/// Total number of records of the response. Note: the data object always has a limit number of records retrieved.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public double Count { get; set; }
		
		/// <summary>
		/// Total number of records returned in the data array. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public double Limit { get; set; }
		
		/// <summary>
		/// Offset position of where the first record returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public double Offset { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Validate License Key
		/// Endpoint used to validate license key only. Returns 204 on Success
		/// Get_zipc_v1 zipc/v1
		/// </summary>
		public async Task Get_zipc_v1Async(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "zipc/v1";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Distance Between 2 Zip Codes
		/// Gets the distance (in miles and kilometers) between 2 zip codes passed as parameters. There are 2 mandatory query parameters (zipCode1 and zipCode2).
		/// Get_distance zipc/v1/distance
		/// </summary>
		/// <param name="zipCode1">Zip Code 1</param>
		/// <param name="zipCode2">Zip Code 2</param>
		/// <returns>OK</returns>
		public async Task<Get_distanceReturn> Get_distanceAsync(string zipCode1, string zipCode2, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "zipc/v1/distance?zipCode1=" + (zipCode1==null? "" : System.Uri.EscapeDataString(zipCode1))+"&zipCode2=" + (zipCode2==null? "" : System.Uri.EscapeDataString(zipCode2));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Get_distanceReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List All MSA Groups
		/// This end point lists all the Metropolitan and Micropolitan Statistical Areas in the United States with the corresponding states and counties that make up the group.
		/// Get_msagroups zipc/v1/msagroups
		/// </summary>
		/// <param name="limit">Number of records to return in each page. Max value: 50.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="offset">Offset is the position in the dataset to start retrieval of records.
		/// Minimum: 0
		// </param>
		/// <param name="stateCode">Parameter for state code.
		/// Min length: 2
		/// Max length: 2
		// </param>
		/// <returns>OK</returns>
		public async Task<Get_msagroupsReturn> Get_msagroupsAsync(int limit, int offset, string stateCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "zipc/v1/msagroups?limit="+limit+"&offset="+offset+"&stateCode=" + (stateCode==null? "" : System.Uri.EscapeDataString(stateCode));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Get_msagroupsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Metro/Micro Statistical Area Details
		/// Gets the details of a single Metropolitan Statistical Area code passed as a path parameter.
		/// Get_msagroups_msacode zipc/v1/msagroups/{msaCode}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Get_msagroups_msacodeReturn> Get_msagroups_msacodeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "zipc/v1/msagroups/{msaCode}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Get_msagroups_msacodeReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Zip Code Radius
		/// Endpoint that returns the zip codes that fall within the specified radius of another zip code. The returned zip codes are sorted by distance.
		/// Get_radius zipc/v1/radius
		/// </summary>
		/// <param name="zipCode">5 Digit US Zip Code
		/// Min length: 5
		/// Max length: 5
		// </param>
		/// <param name="radius">Radius distance.  Max 322 km or 200 mi</param>
		/// <param name="uom">Unit of Measure
		/// Min length: 2
		/// Max length: 2
		// </param>
		/// <returns>OK</returns>
		public async Task<Get_radiusReturn> Get_radiusAsync(string zipCode, int radius, Get_radiusUom uom, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "zipc/v1/radius?zipCode=" + (zipCode==null? "" : System.Uri.EscapeDataString(zipCode))+"&radius="+radius+"&uom=" + uom;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Get_radiusReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all Zip Codes
		/// Returns a list of zip codes. Results are always paginated. Visit the [Zip Code Data API](https://www.metadapi.com/API-Products/API-Product-Details/zip-code-api) product page for information on how to get an API key.
		/// Get_zipcodes zipc/v1/zipcodes
		/// </summary>
		/// <param name="offset">Offset is the position in the dataset to start retrieval of records.
		/// Minimum: 0
		// </param>
		/// <param name="limit">Number of records to return in each page.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="zipcode">5 Digit Zip Code query parameter. Can have multiple values (separated by comma).</param>
		/// <param name="uspsMainCityKey">Parameter for USPS City / Town key identifier for the main city of the zip code.</param>
		/// <param name="zipClassificationCode">Parameter for zipClassificationCode
		/// Min length: 1
		/// Max length: 1
		// </param>
		/// <param name="uspsFacilityCode">Parameter for facility code.</param>
		/// <param name="uspsDeliveryCode">Parameter for delivery code.</param>
		/// <param name="uspsCarrierRouteSortCode">Parameter for carrier route sort code.</param>
		/// <param name="uniqueZipNameInd">Parameter for unique zip name indicator.</param>
		/// <param name="uspsFinanceNumber">Parameter for finance number.</param>
		/// <param name="stateCode">Parameter for state code.
		/// Min length: 2
		/// Max length: 2
		// </param>
		/// <param name="stateFipsCode">Parameter for State FIPS code.</param>
		/// <param name="countyFipsCode">Parameter for county FIPS code.</param>
		/// <param name="divisionCode">Parameter for division code. </param>
		/// <param name="regionCode">Parameter for region code. </param>
		/// <param name="msaCode">Parameter for msaCode.</param>
		/// <returns>OK</returns>
		public async Task<ZipCodeResponse> Get_zipcodesAsync(
					double offset, 
					double limit, 
					string zipcode, 
					string uspsMainCityKey, 
					string zipClassificationCode, 
					string uspsFacilityCode, 
					string uspsDeliveryCode, 
					string uspsCarrierRouteSortCode, 
					bool uniqueZipNameInd, 
					string uspsFinanceNumber, 
					string stateCode, 
					string stateFipsCode, 
					string countyFipsCode, 
					string divisionCode, 
					string regionCode, 
					string msaCode, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "zipc/v1/zipcodes?offset="+offset+"&limit="+limit+"&zipcode=" + (zipcode==null? "" : System.Uri.EscapeDataString(zipcode))+"&uspsMainCityKey=" + (uspsMainCityKey==null? "" : System.Uri.EscapeDataString(uspsMainCityKey))+"&zipClassificationCode=" + (zipClassificationCode==null? "" : System.Uri.EscapeDataString(zipClassificationCode))+"&uspsFacilityCode=" + (uspsFacilityCode==null? "" : System.Uri.EscapeDataString(uspsFacilityCode))+"&uspsDeliveryCode=" + (uspsDeliveryCode==null? "" : System.Uri.EscapeDataString(uspsDeliveryCode))+"&uspsCarrierRouteSortCode=" + (uspsCarrierRouteSortCode==null? "" : System.Uri.EscapeDataString(uspsCarrierRouteSortCode))+"&uniqueZipNameInd="+uniqueZipNameInd+"&uspsFinanceNumber=" + (uspsFinanceNumber==null? "" : System.Uri.EscapeDataString(uspsFinanceNumber))+"&stateCode=" + (stateCode==null? "" : System.Uri.EscapeDataString(stateCode))+"&stateFipsCode=" + (stateFipsCode==null? "" : System.Uri.EscapeDataString(stateFipsCode))+"&countyFipsCode=" + (countyFipsCode==null? "" : System.Uri.EscapeDataString(countyFipsCode))+"&divisionCode=" + (divisionCode==null? "" : System.Uri.EscapeDataString(divisionCode))+"&regionCode=" + (regionCode==null? "" : System.Uri.EscapeDataString(regionCode))+"&msaCode=" + (msaCode==null? "" : System.Uri.EscapeDataString(msaCode));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ZipCodeResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Zip Code Details
		/// Gets the details of a single Zip code.
		/// Get_zipcode zipc/v1/zipcodes/{zipcode}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Get_zipcodeReturn> Get_zipcodeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "zipc/v1/zipcodes/{zipcode}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Get_zipcodeReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class Get_distanceReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Get_distanceReturnData Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Get_distanceReturnLinks Links { get; set; }
	}
	
	public class Get_distanceReturnData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="distanceKm")]
		public double DistanceKm { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="distanceMi")]
		public double DistanceMi { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zipCode1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string ZipCode1 { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zipCode2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string ZipCode2 { get; set; }
	}
	
	public class Get_distanceReturnLinks
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Self { get; set; }
	}
	
	public class Get_msagroupsReturn
	{
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Get_msagroupsReturnData[] Get_msagroupsReturnData { get; set; }
		
		/// <summary>
		/// Response Link Navigation object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Get_msagroupsReturnLinks Links { get; set; }
		
		/// <summary>
		/// Response Metadata Information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get_msagroupsReturnMeta Meta { get; set; }
	}
	
	public class Get_msagroupsReturnData
	{
		
		/// <summary>
		/// 5 digit MSA (Metropolitan Statistical Area) code.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="msaCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string MsaCode { get; set; }
		
		/// <summary>
		/// Name of the defined MSA code.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="msaName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string MsaName { get; set; }
		
		/// <summary>
		/// Array with states and counties that make up MSA Group
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="states")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Get_msagroupsReturnDataStates[] Get_msagroupsReturnDataStates { get; set; }
	}
	
	public class Get_msagroupsReturnDataStates
	{
		
		/// <summary>
		/// Array with counties related to MSA group in the state.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="counties")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Get_msagroupsReturnDataStatesCounties[] Get_msagroupsReturnDataStatesCounties { get; set; }
		
		/// <summary>
		/// Standard 2 character state code.
		/// Required
		/// Min length: 2
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateCode")]
		[System.ComponentModel.DataAnnotations.Length(2, 2)]
		public string StateCode { get; set; }
		
		/// <summary>
		/// Federal Information Processing Standards 2 digit assigned code.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateFipsCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string StateFipsCode { get; set; }
		
		/// <summary>
		/// State Name
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string StateName { get; set; }
	}
	
	public class Get_msagroupsReturnDataStatesCounties
	{
		
		/// <summary>
		/// FIPS code assigned to the county of the main city of the zip code.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="countyFipsCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string CountyFipsCode { get; set; }
		
		/// <summary>
		/// County Name in Title Case
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="titleCaseCountyName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string TitleCaseCountyName { get; set; }
		
		/// <summary>
		/// Name of the county of the main city for the zip code. USPS Standard.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uspsCountyName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string UspsCountyName { get; set; }
	}
	
	public class Get_msagroupsReturnLinks
	{
		
		/// <summary>
		/// Link to the first group of records from API call.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string First { get; set; }
		
		/// <summary>
		/// Link to next set of results from API call.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next { get; set; }
		
		/// <summary>
		/// Link to the previous set of records from API call.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prev")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Prev { get; set; }
		
		/// <summary>
		/// Link to this response.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Self { get; set; }
	}
	
	public class Get_msagroupsReturnMeta
	{
		
		/// <summary>
		/// Total number of records of the response. Note: the data object always has a limit number of records retrieved.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public double Count { get; set; }
		
		/// <summary>
		/// Total number of records returned in the data array. Specified by limit query parameter.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public double Limit { get; set; }
		
		/// <summary>
		/// Offset position of where the first record returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public double Offset { get; set; }
	}
	
	public class Get_msagroups_msacodeReturn
	{
		
		/// <summary>
		/// Response Data array.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Get_msagroups_msacodeReturnData Data { get; set; }
		
		/// <summary>
		/// Response Link Navigation object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Get_msagroups_msacodeReturnLinks Links { get; set; }
		
		/// <summary>
		/// Response Metadata Information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get_msagroups_msacodeReturnMeta Meta { get; set; }
	}
	
	public class Get_msagroups_msacodeReturnData
	{
		
		/// <summary>
		/// 5 digit MSA (Metropolitan Statistical Area) code.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="msaCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string MsaCode { get; set; }
		
		/// <summary>
		/// Name of the defined MSA code.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="msaName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string MsaName { get; set; }
		
		/// <summary>
		/// Array with states and counties that make up MSA Group
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="states")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Get_msagroups_msacodeReturnDataStates[] Get_msagroups_msacodeReturnDataStates { get; set; }
	}
	
	public class Get_msagroups_msacodeReturnDataStates
	{
		
		/// <summary>
		/// Array with counties related to MSA group in the state.
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="counties")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Get_msagroups_msacodeReturnDataStatesCounties[] Get_msagroups_msacodeReturnDataStatesCounties { get; set; }
		
		/// <summary>
		/// Standard 2 character state code.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string StateCode { get; set; }
		
		/// <summary>
		/// Federal Information Processing Standards 2 digit assigned code.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateFipsCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string StateFipsCode { get; set; }
		
		/// <summary>
		/// State Name
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string StateName { get; set; }
	}
	
	public class Get_msagroups_msacodeReturnDataStatesCounties
	{
		
		/// <summary>
		/// FIPS code assigned to the county of the main city of the zip code.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="countyFipsCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string CountyFipsCode { get; set; }
		
		/// <summary>
		/// County Name in Title Case
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="titleCaseCountyName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string TitleCaseCountyName { get; set; }
		
		/// <summary>
		/// Name of the county of the main city for the zip code USPS Standard.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uspsCountyName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string UspsCountyName { get; set; }
	}
	
	public class Get_msagroups_msacodeReturnLinks
	{
		
		/// <summary>
		/// Link to this response.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Self { get; set; }
	}
	
	public class Get_msagroups_msacodeReturnMeta
	{
		
		/// <summary>
		/// Total number of records of the response. Note: the data object always has a limit number of records retrieved.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public double Count { get; set; }
	}
	
	public enum Get_radiusUom
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mi = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		km = 1,
	}
	
	public class Get_radiusReturn
	{
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Get_radiusReturnData[] Get_radiusReturnData { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Get_radiusReturnLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get_radiusReturnMeta Meta { get; set; }
	}
	
	public class Get_radiusReturnData
	{
		
		/// <summary>
		/// Distance to query parameter zip code in kilometers
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="distanceKm")]
		public double DistanceKm { get; set; }
		
		/// <summary>
		/// Distance to query parameter zip code in miles
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="distanceMi")]
		public double DistanceMi { get; set; }
		
		/// <summary>
		/// Zip Code Latitude
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public double Latitude { get; set; }
		
		/// <summary>
		/// Zip Code Longitude
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public double Longitude { get; set; }
		
		/// <summary>
		/// 5 Digit Zip Code. Zone Improvement Plan.
		/// Required
		/// Min length: 5
		/// Max length: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zipCode")]
		[System.ComponentModel.DataAnnotations.Length(5, 5)]
		public string ZipCode { get; set; }
		
		/// <summary>
		/// URL to Zip Code
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zipCodeUrl")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string ZipCodeUrl { get; set; }
	}
	
	public class Get_radiusReturnLinks
	{
		
		/// <summary>
		/// Link to this response.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Self { get; set; }
	}
	
	public class Get_radiusReturnMeta
	{
		
		/// <summary>
		/// Number of zip codes found in the radius
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public double Count { get; set; }
	}
	
	public class Get_zipcodeReturn
	{
		
		/// <summary>
		/// Zip Code Data Model
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Zipcode Data { get; set; }
		
		/// <summary>
		/// API Response Links
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
