//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// <p>Storage Gateway returns the Amazon Resource Name (ARN) of the activated gateway. It is a string made of information such as your account, gateway name, and Amazon Web Services Region. This ARN is used to reference the gateway in other API operations as well as resource-based authorization.</p> <note> <p>For gateways activated prior to September 02, 2015, the gateway ARN contains the gateway name rather than the gateway ID. Changing the name of the gateway has no effect on the gateway ARN.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivateGatewayOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// <p>A JSON object containing one or more of the following fields:</p> <ul> <li> <p> <a>ActivateGatewayInput$ActivationKey</a> </p> </li> <li> <p> <a>ActivateGatewayInput$GatewayName</a> </p> </li> <li> <p> <a>ActivateGatewayInput$GatewayRegion</a> </p> </li> <li> <p> <a>ActivateGatewayInput$GatewayTimezone</a> </p> </li> <li> <p> <a>ActivateGatewayInput$GatewayType</a> </p> </li> <li> <p> <a>ActivateGatewayInput$MediumChangerType</a> </p> </li> <li> <p> <a>ActivateGatewayInput$TapeDriveType</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivateGatewayInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ActivationKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayTimezone { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TapeDriveType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MediumChangerType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// A key-value pair that helps you manage, filter, and search for your resource. Allowed characters: letters, white space, and numbers, representable in UTF-8, and the following characters: + - = . _ : /.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidGatewayRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerError
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddCacheOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddCacheInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] DiskIds { get; set; }
	}
	
	/// <summary>
	/// AddTagsToResourceOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddTagsToResourceOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
	}
	
	/// <summary>
	/// AddTagsToResourceInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddTagsToResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddUploadBufferOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddUploadBufferInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] DiskIds { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the Amazon Resource Name (ARN) of the gateway for which working storage was configured.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddWorkingStorageOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// <p>A JSON object containing one or more of the following fields:</p> <ul> <li> <p> <a>AddWorkingStorageInput$DiskIds</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddWorkingStorageInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] DiskIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssignTapePoolOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TapeARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssignTapePoolInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TapeARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BypassGovernanceRetention { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateFileSystemOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FileSystemAssociationARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateFileSystemInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LocationARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuditDestinationARN { get; set; }
		
		/// <summary>
		/// The refresh cache information for the file share or FSx file systems.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CacheAttributes CacheAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EndpointNetworkConfiguration EndpointNetworkConfiguration { get; set; }
	}
	
	/// <summary>
	/// The refresh cache information for the file share or FSx file systems.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CacheAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CacheStaleTimeoutInSeconds { get; set; }
	}
	
	/// <summary>
	/// Specifies network configuration information for the gateway associated with the Amazon FSx file system.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointNetworkConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] IpAddresses { get; set; }
	}
	
	/// <summary>
	/// AttachVolumeOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttachVolumeOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetARN { get; set; }
	}
	
	/// <summary>
	/// AttachVolumeInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttachVolumeInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DiskId { get; set; }
	}
	
	/// <summary>
	/// CancelArchivalOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelArchivalOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TapeARN { get; set; }
	}
	
	/// <summary>
	/// CancelArchivalInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelArchivalInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TapeARN { get; set; }
	}
	
	/// <summary>
	/// CancelRetrievalOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelRetrievalOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TapeARN { get; set; }
	}
	
	/// <summary>
	/// CancelRetrievalInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelRetrievalInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TapeARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateCachediSCSIVolumeOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateCachediSCSIVolumeInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int VolumeSizeInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceVolumeARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> KMSEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KMSKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// CreateNFSFileShareOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateNFSFileShareOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FileShareARN { get; set; }
	}
	
	/// <summary>
	/// CreateNFSFileShareInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateNFSFileShareInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NFSFileShareDefaults NFSFileShareDefaults { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> KMSEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KMSKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LocationARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultStorageClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectACL ObjectACL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ClientList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Squash { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> GuessMIMETypeEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequesterPays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FileShareName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CacheAttributes CacheAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VPCEndpointDNSName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BucketRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuditDestinationARN { get; set; }
	}
	
	/// <summary>
	/// Describes Network File System (NFS) file share default values. Files and folders stored as Amazon S3 objects in S3 buckets don't, by default, have Unix file permissions assigned to them. Upon discovery in an S3 bucket by Storage Gateway, the S3 objects that represent files and folders are assigned these default Unix permissions. This operation is only supported for S3 File Gateways.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NFSFileShareDefaults
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FileMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectoryMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OwnerId { get; set; }
	}
	
	/// <summary>
	/// A value that sets the access control list (ACL) permission for objects in the S3 bucket that an S3 File Gateway puts objects into. The default value is <code>private</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ObjectACL
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public-read")]
		publicMinusread = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public-read-write")]
		publicMinusreadMinuswrite = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="authenticated-read")]
		authenticatedMinusread = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bucket-owner-read")]
		bucketMinusownerMinusread = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bucket-owner-full-control")]
		bucketMinusownerMinusfullMinuscontrol = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aws-exec-read")]
		awsMinusexecMinusread = 6,
	}
	
	/// <summary>
	/// CreateSMBFileShareOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSMBFileShareOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FileShareARN { get; set; }
	}
	
	/// <summary>
	/// CreateSMBFileShareInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSMBFileShareInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> KMSEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KMSKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LocationARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultStorageClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectACL ObjectACL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> GuessMIMETypeEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequesterPays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SMBACLEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AccessBasedEnumeration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AdminUserList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ValidUserList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InvalidUserList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuditDestinationARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Authentication { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CaseSensitivity CaseSensitivity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FileShareName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CacheAttributes CacheAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VPCEndpointDNSName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BucketRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OplocksEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CaseSensitivity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ClientSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CaseSensitive = 1,
	}
	
	/// <summary>
	/// A JSON object containing the following fields:
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSnapshotOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
	}
	
	/// <summary>
	/// <p>A JSON object containing one or more of the following fields:</p> <ul> <li> <p> <a>CreateSnapshotInput$SnapshotDescription</a> </p> </li> <li> <p> <a>CreateSnapshotInput$VolumeARN</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSnapshotInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceUnavailableError
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSnapshotFromVolumeRecoveryPointOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeRecoveryPointTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSnapshotFromVolumeRecoveryPointInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the following fields:
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateStorediSCSIVolumeOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSizeInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetARN { get; set; }
	}
	
	/// <summary>
	/// <p>A JSON object containing one or more of the following fields:</p> <ul> <li> <p> <a>CreateStorediSCSIVolumeInput$DiskId</a> </p> </li> <li> <p> <a>CreateStorediSCSIVolumeInput$NetworkInterfaceId</a> </p> </li> <li> <p> <a>CreateStorediSCSIVolumeInput$PreserveExistingData</a> </p> </li> <li> <p> <a>CreateStorediSCSIVolumeInput$SnapshotId</a> </p> </li> <li> <p> <a>CreateStorediSCSIVolumeInput$TargetName</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateStorediSCSIVolumeInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DiskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool PreserveExistingData { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> KMSEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KMSKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateTapePoolOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateTapePoolInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PoolName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TapeStorageClass StorageClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RetentionLockType RetentionLockType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RetentionLockTimeInDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TapeStorageClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEEP_ARCHIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLACIER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RetentionLockType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOVERNANCE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 2,
	}
	
	/// <summary>
	/// CreateTapeOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateTapeWithBarcodeOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TapeARN { get; set; }
	}
	
	/// <summary>
	/// CreateTapeWithBarcodeInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateTapeWithBarcodeInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TapeSizeInBytes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TapeBarcode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> KMSEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KMSKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Worm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// CreateTapeOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateTapesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TapeARNs { get; set; }
	}
	
	/// <summary>
	/// CreateTapesInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateTapesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TapeSizeInBytes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int NumTapesToCreate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TapeBarcodePrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> KMSEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KMSKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Worm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteAutomaticTapeCreationPolicyOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteAutomaticTapeCreationPolicyInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the Amazon Resource Name (ARN) of the gateway whose bandwidth rate information was deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBandwidthRateLimitOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// <p>A JSON object containing the following fields:</p> <ul> <li> <p> <a>DeleteBandwidthRateLimitInput$BandwidthType</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBandwidthRateLimitInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BandwidthType { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the following fields:
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteChapCredentialsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InitiatorName { get; set; }
	}
	
	/// <summary>
	/// <p>A JSON object containing one or more of the following fields:</p> <ul> <li> <p> <a>DeleteChapCredentialsInput$InitiatorName</a> </p> </li> <li> <p> <a>DeleteChapCredentialsInput$TargetARN</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteChapCredentialsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InitiatorName { get; set; }
	}
	
	/// <summary>
	/// DeleteFileShareOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteFileShareOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FileShareARN { get; set; }
	}
	
	/// <summary>
	/// DeleteFileShareInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteFileShareInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FileShareARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceDelete { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the ID of the deleted gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteGatewayOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the ID of the gateway to delete.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteGatewayInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSnapshotScheduleOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSnapshotScheduleInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
	}
	
	/// <summary>
	/// DeleteTapeOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteTapeOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TapeARN { get; set; }
	}
	
	/// <summary>
	/// DeleteTapeInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteTapeInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TapeARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BypassGovernanceRetention { get; set; }
	}
	
	/// <summary>
	/// DeleteTapeArchiveOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteTapeArchiveOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TapeARN { get; set; }
	}
	
	/// <summary>
	/// DeleteTapeArchiveInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteTapeArchiveInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TapeARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BypassGovernanceRetention { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteTapePoolOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteTapePoolInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PoolARN { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the Amazon Resource Name (ARN) of the storage volume that was deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteVolumeOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the <a>DeleteVolumeInput$VolumeARN</a> to delete.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteVolumeInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeAvailabilityMonitorTestOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityMonitorTestStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AvailabilityMonitorTestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeAvailabilityMonitorTestInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the following fields:
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBandwidthRateLimitOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AverageUploadRateLimitInBitsPerSec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AverageDownloadRateLimitInBitsPerSec { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the Amazon Resource Name (ARN) of the gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBandwidthRateLimitInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBandwidthRateLimitScheduleOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BandwidthRateLimitInterval[] BandwidthRateLimitIntervals { get; set; }
	}
	
	/// <summary>
	///  Describes a bandwidth rate limit interval for a gateway. A bandwidth rate limit schedule consists of one or more bandwidth rate limit intervals. A bandwidth rate limit interval defines a period of time on one or more days of the week, during which bandwidth rate limits are specified for uploading, downloading, or both. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BandwidthRateLimitInterval
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartHourOfDay { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartMinuteOfHour { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int EndHourOfDay { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int EndMinuteOfHour { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int[] DaysOfWeek { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AverageUploadRateLimitInBitsPerSec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AverageDownloadRateLimitInBitsPerSec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBandwidthRateLimitScheduleInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeCacheOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DiskIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CacheAllocatedInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CacheUsedPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CacheDirtyPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CacheHitPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CacheMissPercentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeCacheInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the following fields:
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeCachediSCSIVolumesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CachediSCSIVolume[] CachediSCSIVolumes { get; set; }
	}
	
	/// <summary>
	/// Describes an iSCSI cached volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CachediSCSIVolume
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeAttachmentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSizeInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> VolumeProgress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceSnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VolumeiSCSIAttributes VolumeiSCSIAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeUsedInBytes { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value can only be set when <code>KMSEncrypted</code> is <code>true</code>. Optional.
		/// Min length: 7
		/// Max length: 2048
		/// Pattern: (^arn:(aws|aws-cn|aws-us-gov):kms:([a-zA-Z0-9-]+):([0-9]+):(key|alias)/(\S+)$)|(^alias/(\S+)$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(7, 2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(^arn:(aws|aws-cn|aws-us-gov):kms:([a-zA-Z0-9-]+):([0-9]+):(key|alias)/(\S+)$)|(^alias/(\S+)$)")]
		public string KMSKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetName { get; set; }
	}
	
	/// <summary>
	/// Lists iSCSI information about a volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VolumeiSCSIAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NetworkInterfacePort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LunNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ChapEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeCachediSCSIVolumesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] VolumeARNs { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the following fields:
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeChapCredentialsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ChapInfo[] ChapCredentials { get; set; }
	}
	
	/// <summary>
	/// Describes Challenge-Handshake Authentication Protocol (CHAP) information that supports authentication between your gateway and iSCSI initiators.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChapInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecretToAuthenticateInitiator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InitiatorName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecretToAuthenticateTarget { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the Amazon Resource Name (ARN) of the iSCSI volume target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeChapCredentialsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeFileSystemAssociationsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FileSystemAssociationInfo[] FileSystemAssociationInfoList { get; set; }
	}
	
	/// <summary>
	/// Describes the object returned by <code>DescribeFileSystemAssociations</code> that describes a created file system association.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileSystemAssociationInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FileSystemAssociationARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocationARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FileSystemAssociationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuditDestinationARN { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// The refresh cache information for the file share or FSx file systems.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CacheAttributes CacheAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EndpointNetworkConfiguration EndpointNetworkConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FileSystemAssociationStatusDetail[] FileSystemAssociationStatusDetails { get; set; }
	}
	
	/// <summary>
	/// Detailed information on file system association status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileSystemAssociationStatusDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeFileSystemAssociationsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] FileSystemAssociationARNList { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the following fields:
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeGatewayInformationOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayTimezone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkInterface[] GatewayNetworkInterfaces { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextUpdateAvailabilityDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastSoftwareUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ec2InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ec2InstanceRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VPCEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CloudWatchLogGroupARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HostEnvironment HostEnvironment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SoftwareUpdatesEndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeprecationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GatewayCapacity GatewayCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GatewayCapacity[] SupportedGatewayCapacities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostEnvironmentId { get; set; }
	}
	
	/// <summary>
	/// Describes a gateway's network interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkInterface
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Ipv4Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MacAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ipv6Address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HostEnvironment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VMWARE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HYPER-V")]
		HYPERMinusV = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KVM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNOWBALL = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GatewayCapacity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Small = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Medium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Large = 2,
	}
	
	/// <summary>
	/// A JSON object containing the ID of the gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeGatewayInformationInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// <p>A JSON object containing the following fields:</p> <ul> <li> <p> <a>DescribeMaintenanceStartTimeOutput$DayOfMonth</a> </p> </li> <li> <p> <a>DescribeMaintenanceStartTimeOutput$DayOfWeek</a> </p> </li> <li> <p> <a>DescribeMaintenanceStartTimeOutput$HourOfDay</a> </p> </li> <li> <p> <a>DescribeMaintenanceStartTimeOutput$MinuteOfHour</a> </p> </li> <li> <p> <a>DescribeMaintenanceStartTimeOutput$Timezone</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeMaintenanceStartTimeOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HourOfDay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinuteOfHour { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DayOfWeek { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DayOfMonth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Timezone { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the Amazon Resource Name (ARN) of the gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeMaintenanceStartTimeInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// DescribeNFSFileSharesOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeNFSFileSharesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NFSFileShareInfo[] NFSFileShareInfoList { get; set; }
	}
	
	/// <summary>
	/// The Unix file permissions and ownership information assigned, by default, to native S3 objects when an S3 File Gateway discovers them in S3 buckets. This operation is only supported in S3 File Gateways.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NFSFileShareInfo
	{
		
		/// <summary>
		/// Describes Network File System (NFS) file share default values. Files and folders stored as Amazon S3 objects in S3 buckets don't, by default, have Unix file permissions assigned to them. Upon discovery in an S3 bucket by Storage Gateway, the S3 objects that represent files and folders are assigned these default Unix permissions. This operation is only supported for S3 File Gateways.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NFSFileShareDefaults NFSFileShareDefaults { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the file share.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string FileShareARN { get; set; }
		
		/// <summary>
		/// The ID of the file share.
		/// Min length: 12
		/// Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(12, 30)]
		public string FileShareId { get; set; }
		
		/// <summary>
		/// <p>The status of the file share.</p> <p>Valid Values: <code>CREATING</code> | <code>UPDATING</code> | <code>AVAILABLE</code> | <code>DELETING</code> </p>
		/// Min length: 3
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(3, 50)]
		public string FileShareStatus { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> KMSEncrypted { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value can only be set when <code>KMSEncrypted</code> is <code>true</code>. Optional.
		/// Min length: 7
		/// Max length: 2048
		/// Pattern: (^arn:(aws|aws-cn|aws-us-gov):kms:([a-zA-Z0-9-]+):([0-9]+):(key|alias)/(\S+)$)|(^alias/(\S+)$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(7, 2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(^arn:(aws|aws-cn|aws-us-gov):kms:([a-zA-Z0-9-]+):([0-9]+):(key|alias)/(\S+)$)|(^alias/(\S+)$)")]
		public string KMSKey { get; set; }
		
		/// <summary>
		/// The file share path used by the NFS client to identify the mount point.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		/// <summary>
		/// The ARN of the IAM role that an S3 File Gateway assumes when it accesses the underlying storage.
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: ^arn:(aws|aws-cn|aws-us-gov):iam::([0-9]+):role/(\S+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(20, 2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:(aws|aws-cn|aws-us-gov):iam::([0-9]+):role/(\S+)$")]
		public string Role { get; set; }
		
		/// <summary>
		/// <p>A custom ARN for the backend storage used for storing data for file shares. It includes a resource ARN with an optional prefix concatenation. The prefix must end with a forward slash (/).</p> <note> <p>You can specify LocationARN as a bucket ARN, access point ARN or access point alias, as shown in the following examples.</p> <p>Bucket ARN:</p> <p> <code>arn:aws:s3:::my-bucket/prefix/</code> </p> <p>Access point ARN:</p> <p> <code>arn:aws:s3:region:account-id:accesspoint/access-point-name/prefix/</code> </p> <p>If you specify an access point, the bucket policy must be configured to delegate access control to the access point. For information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points-policies.html#access-points-delegating-control">Delegating access control to access points</a> in the <i>Amazon S3 User Guide</i>.</p> <p>Access point alias:</p> <p> <code>test-ap-ab123cdef4gehijklmn5opqrstuvuse1a-s3alias</code> </p> </note>
		/// Min length: 16
		/// Max length: 1400
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(16, 1400)]
		public string LocationARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultStorageClass { get; set; }
		
		/// <summary>
		/// A value that sets the access control list (ACL) permission for objects in the S3 bucket that an S3 File Gateway puts objects into. The default value is <code>private</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<NFSFileShareInfoObjectACL> ObjectACL { get; set; }
		
		/// <summary>
		/// The list of clients that are allowed to access the S3 File Gateway. The list must contain either valid IP addresses or valid CIDR blocks.
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 100)]
		public string[] ClientList { get; set; }
		
		/// <summary>
		/// <p>The user mapped to anonymous user. Valid options are the following:</p> <ul> <li> <p> <code>RootSquash</code>: Only root is mapped to anonymous user.</p> </li> <li> <p> <code>NoSquash</code>: No one is mapped to anonymous user.</p> </li> <li> <p> <code>AllSquash</code>: Everyone is mapped to anonymous user.</p> </li> </ul>
		/// Min length: 5
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(5, 15)]
		public string Squash { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> GuessMIMETypeEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequesterPays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FileShareName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CacheAttributes CacheAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VPCEndpointDNSName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BucketRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuditDestinationARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NFSFileShareInfoObjectACL
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public-read")]
		publicMinusread = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public-read-write")]
		publicMinusreadMinuswrite = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="authenticated-read")]
		authenticatedMinusread = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bucket-owner-read")]
		bucketMinusownerMinusread = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bucket-owner-full-control")]
		bucketMinusownerMinusfullMinuscontrol = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aws-exec-read")]
		awsMinusexecMinusread = 6,
	}
	
	/// <summary>
	/// DescribeNFSFileSharesInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeNFSFileSharesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] FileShareARNList { get; set; }
	}
	
	/// <summary>
	/// DescribeSMBFileSharesOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSMBFileSharesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SMBFileShareInfo[] SMBFileShareInfoList { get; set; }
	}
	
	/// <summary>
	/// The Windows file permissions and ownership information assigned, by default, to native S3 objects when S3 File Gateway discovers them in S3 buckets. This operation is only supported for S3 File Gateways.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SMBFileShareInfo
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the file share.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string FileShareARN { get; set; }
		
		/// <summary>
		/// The ID of the file share.
		/// Min length: 12
		/// Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(12, 30)]
		public string FileShareId { get; set; }
		
		/// <summary>
		/// <p>The status of the file share.</p> <p>Valid Values: <code>CREATING</code> | <code>UPDATING</code> | <code>AVAILABLE</code> | <code>DELETING</code> </p>
		/// Min length: 3
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(3, 50)]
		public string FileShareStatus { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> KMSEncrypted { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value can only be set when <code>KMSEncrypted</code> is <code>true</code>. Optional.
		/// Min length: 7
		/// Max length: 2048
		/// Pattern: (^arn:(aws|aws-cn|aws-us-gov):kms:([a-zA-Z0-9-]+):([0-9]+):(key|alias)/(\S+)$)|(^alias/(\S+)$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(7, 2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(^arn:(aws|aws-cn|aws-us-gov):kms:([a-zA-Z0-9-]+):([0-9]+):(key|alias)/(\S+)$)|(^alias/(\S+)$)")]
		public string KMSKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		/// <summary>
		/// The ARN of the IAM role that an S3 File Gateway assumes when it accesses the underlying storage.
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: ^arn:(aws|aws-cn|aws-us-gov):iam::([0-9]+):role/(\S+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(20, 2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:(aws|aws-cn|aws-us-gov):iam::([0-9]+):role/(\S+)$")]
		public string Role { get; set; }
		
		/// <summary>
		/// <p>A custom ARN for the backend storage used for storing data for file shares. It includes a resource ARN with an optional prefix concatenation. The prefix must end with a forward slash (/).</p> <note> <p>You can specify LocationARN as a bucket ARN, access point ARN or access point alias, as shown in the following examples.</p> <p>Bucket ARN:</p> <p> <code>arn:aws:s3:::my-bucket/prefix/</code> </p> <p>Access point ARN:</p> <p> <code>arn:aws:s3:region:account-id:accesspoint/access-point-name/prefix/</code> </p> <p>If you specify an access point, the bucket policy must be configured to delegate access control to the access point. For information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points-policies.html#access-points-delegating-control">Delegating access control to access points</a> in the <i>Amazon S3 User Guide</i>.</p> <p>Access point alias:</p> <p> <code>test-ap-ab123cdef4gehijklmn5opqrstuvuse1a-s3alias</code> </p> </note>
		/// Min length: 16
		/// Max length: 1400
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(16, 1400)]
		public string LocationARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultStorageClass { get; set; }
		
		/// <summary>
		/// A value that sets the access control list (ACL) permission for objects in the S3 bucket that an S3 File Gateway puts objects into. The default value is <code>private</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<SMBFileShareInfoObjectACL> ObjectACL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> GuessMIMETypeEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequesterPays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SMBACLEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AccessBasedEnumeration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AdminUserList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ValidUserList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InvalidUserList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuditDestinationARN { get; set; }
		
		/// <summary>
		/// <p>The authentication method of the file share. The default is <code>ActiveDirectory</code>.</p> <p>Valid Values: <code>ActiveDirectory</code> | <code>GuestAccess</code> </p>
		/// Min length: 5
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(5, 15)]
		public string Authentication { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CaseSensitivity CaseSensitivity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FileShareName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CacheAttributes CacheAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VPCEndpointDNSName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BucketRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OplocksEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SMBFileShareInfoObjectACL
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public-read")]
		publicMinusread = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public-read-write")]
		publicMinusreadMinuswrite = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="authenticated-read")]
		authenticatedMinusread = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bucket-owner-read")]
		bucketMinusownerMinusread = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bucket-owner-full-control")]
		bucketMinusownerMinusfullMinuscontrol = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aws-exec-read")]
		awsMinusexecMinusread = 6,
	}
	
	/// <summary>
	/// DescribeSMBFileSharesInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSMBFileSharesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] FileShareARNList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSMBSettingsOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ActiveDirectoryStatus ActiveDirectoryStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SMBGuestPasswordSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SMBSecurityStrategy SMBSecurityStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FileSharesVisible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SMBLocalGroups SMBLocalGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ActiveDirectoryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCESS_DENIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DETACHED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOINED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOINING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_ERROR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMEOUT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_ERROR = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SMBSecurityStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ClientSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MandatorySigning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MandatoryEncryption = 2,
	}
	
	/// <summary>
	/// A list of Active Directory users and groups that have special permissions for SMB file shares on the gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SMBLocalGroups
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] GatewayAdmins { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSMBSettingsInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSnapshotScheduleOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RecurrenceInHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the <a>DescribeSnapshotScheduleInput$VolumeARN</a> of the volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSnapshotScheduleInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeStorediSCSIVolumesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StorediSCSIVolume[] StorediSCSIVolumes { get; set; }
	}
	
	/// <summary>
	/// Describes an iSCSI stored volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StorediSCSIVolume
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeAttachmentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSizeInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> VolumeProgress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeDiskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceSnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PreservedExistingData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VolumeiSCSIAttributes VolumeiSCSIAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeUsedInBytes { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value can only be set when <code>KMSEncrypted</code> is <code>true</code>. Optional.
		/// Min length: 7
		/// Max length: 2048
		/// Pattern: (^arn:(aws|aws-cn|aws-us-gov):kms:([a-zA-Z0-9-]+):([0-9]+):(key|alias)/(\S+)$)|(^alias/(\S+)$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(7, 2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(^arn:(aws|aws-cn|aws-us-gov):kms:([a-zA-Z0-9-]+):([0-9]+):(key|alias)/(\S+)$)|(^alias/(\S+)$)")]
		public string KMSKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetName { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing a list of <a>DescribeStorediSCSIVolumesInput$VolumeARNs</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeStorediSCSIVolumesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] VolumeARNs { get; set; }
	}
	
	/// <summary>
	/// DescribeTapeArchivesOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeTapeArchivesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TapeArchive[] TapeArchives { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Represents a virtual tape that is archived in the virtual tape shelf (VTS).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TapeArchive
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TapeARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TapeBarcode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TapeCreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TapeSizeInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CompletionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RetrievedTo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TapeStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TapeUsedInBytes { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value can only be set when <code>KMSEncrypted</code> is <code>true</code>. Optional.
		/// Min length: 7
		/// Max length: 2048
		/// Pattern: (^arn:(aws|aws-cn|aws-us-gov):kms:([a-zA-Z0-9-]+):([0-9]+):(key|alias)/(\S+)$)|(^alias/(\S+)$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(7, 2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(^arn:(aws|aws-cn|aws-us-gov):kms:([a-zA-Z0-9-]+):([0-9]+):(key|alias)/(\S+)$)|(^alias/(\S+)$)")]
		public string KMSKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Worm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset RetentionStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset PoolEntryDate { get; set; }
	}
	
	/// <summary>
	/// DescribeTapeArchivesInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeTapeArchivesInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TapeARNs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	/// <summary>
	/// DescribeTapeRecoveryPointsOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeTapeRecoveryPointsOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TapeRecoveryPointInfo[] TapeRecoveryPointInfos { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Describes a recovery point.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TapeRecoveryPointInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TapeARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TapeRecoveryPointTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TapeSizeInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TapeStatus { get; set; }
	}
	
	/// <summary>
	/// DescribeTapeRecoveryPointsInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeTapeRecoveryPointsInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	/// <summary>
	/// DescribeTapesOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeTapesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tape[] Tapes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Describes a virtual tape object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tape
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TapeARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TapeBarcode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TapeCreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TapeSizeInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TapeStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VTLDevice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Progress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TapeUsedInBytes { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value can only be set when <code>KMSEncrypted</code> is <code>true</code>. Optional.
		/// Min length: 7
		/// Max length: 2048
		/// Pattern: (^arn:(aws|aws-cn|aws-us-gov):kms:([a-zA-Z0-9-]+):([0-9]+):(key|alias)/(\S+)$)|(^alias/(\S+)$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(7, 2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(^arn:(aws|aws-cn|aws-us-gov):kms:([a-zA-Z0-9-]+):([0-9]+):(key|alias)/(\S+)$)|(^alias/(\S+)$)")]
		public string KMSKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Worm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset RetentionStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset PoolEntryDate { get; set; }
	}
	
	/// <summary>
	/// DescribeTapesInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeTapesInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TapeARNs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeUploadBufferOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DiskIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UploadBufferUsedInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UploadBufferAllocatedInBytes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeUploadBufferInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// DescribeVTLDevicesOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeVTLDevicesOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VTLDevice[] VTLDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Represents a device object associated with a tape gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VTLDevice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VTLDeviceARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VTLDeviceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VTLDeviceVendor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VTLDeviceProductIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceiSCSIAttributes DeviceiSCSIAttributes { get; set; }
	}
	
	/// <summary>
	/// Lists iSCSI information about a VTL device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceiSCSIAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NetworkInterfacePort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ChapEnabled { get; set; }
	}
	
	/// <summary>
	/// DescribeVTLDevicesInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeVTLDevicesInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VTLDeviceARNs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the following fields:
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeWorkingStorageOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DiskIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> WorkingStorageUsedInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> WorkingStorageAllocatedInBytes { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the Amazon Resource Name (ARN) of the gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeWorkingStorageInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// AttachVolumeOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetachVolumeOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
	}
	
	/// <summary>
	/// AttachVolumeInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetachVolumeInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceDetach { get; set; }
	}
	
	/// <summary>
	/// DisableGatewayOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisableGatewayOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// DisableGatewayInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisableGatewayInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateFileSystemOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FileSystemAssociationARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateFileSystemInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FileSystemAssociationARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceDelete { get; set; }
	}
	
	/// <summary>
	/// JoinDomainOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JoinDomainOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ActiveDirectoryStatus ActiveDirectoryStatus { get; set; }
	}
	
	/// <summary>
	/// JoinDomainInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JoinDomainInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationalUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DomainControllers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeoutInSeconds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAutomaticTapeCreationPoliciesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AutomaticTapeCreationPolicyInfo[] AutomaticTapeCreationPolicyInfos { get; set; }
	}
	
	/// <summary>
	/// Information about the gateway's automatic tape creation policies, including the automatic tape creation rules and the gateway that is using the policies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutomaticTapeCreationPolicyInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AutomaticTapeCreationRule[] AutomaticTapeCreationRules { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// An automatic tape creation policy consists of automatic tape creation rules where each rule defines when and how to create new tapes. For more information about automatic tape creation, see <a href="https://docs.aws.amazon.com/storagegateway/latest/userguide/GettingStartedCreateTapes.html#CreateTapesAutomatically">Creating Tapes Automatically</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutomaticTapeCreationRule
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TapeBarcodePrefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TapeSizeInBytes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MinimumNumTapes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Worm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAutomaticTapeCreationPoliciesInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// ListFileShareOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFileSharesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FileShareInfo[] FileShareInfoList { get; set; }
	}
	
	/// <summary>
	/// Describes a file share. Only supported S3 File Gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileShareInfo
	{
		
		/// <summary>
		/// The type of the file share.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<FileShareInfoFileShareType> FileShareType { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the file share.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string FileShareARN { get; set; }
		
		/// <summary>
		/// The ID of the file share.
		/// Min length: 12
		/// Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(12, 30)]
		public string FileShareId { get; set; }
		
		/// <summary>
		/// <p>The status of the file share.</p> <p>Valid Values: <code>CREATING</code> | <code>UPDATING</code> | <code>AVAILABLE</code> | <code>DELETING</code> </p>
		/// Min length: 3
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(3, 50)]
		public string FileShareStatus { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FileShareInfoFileShareType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NFS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMB = 1,
	}
	
	/// <summary>
	/// ListFileShareInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFileSharesInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFileSystemAssociationsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FileSystemAssociationSummary[] FileSystemAssociationSummaryList { get; set; }
	}
	
	/// <summary>
	/// Gets the summary returned by <code>ListFileSystemAssociation</code>, which is a summary of a created file system association.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileSystemAssociationSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FileSystemAssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FileSystemAssociationARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FileSystemAssociationStatus { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFileSystemAssociationsInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGatewaysOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GatewayInfo[] Gateways { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Describes a gateway object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GatewayInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayOperationalState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ec2InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ec2InstanceRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HostEnvironment HostEnvironment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostEnvironmentId { get; set; }
	}
	
	/// <summary>
	/// <p>A JSON object containing zero or more of the following fields:</p> <ul> <li> <p> <a>ListGatewaysInput$Limit</a> </p> </li> <li> <p> <a>ListGatewaysInput$Marker</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGatewaysInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLocalDisksOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Disk[] Disks { get; set; }
	}
	
	/// <summary>
	/// Represents a gateway's local disk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Disk
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DiskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DiskPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DiskNode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DiskStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DiskSizeInBytes { get; set; }
		
		/// <summary>
		/// <p>One of the <code>DiskAllocationType</code> enumeration values that identifies how a local disk is used.</p> <p>Valid Values: <code>UPLOAD_BUFFER</code> | <code>CACHE_STORAGE</code> </p>
		/// Min length: 3
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(3, 100)]
		public string DiskAllocationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DiskAllocationResource { get; set; }
		
		/// <summary>
		/// A list of values that represents attributes of a local disk.
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(0, 10)]
		public string[] DiskAttributeList { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the Amazon Resource Name (ARN) of the gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLocalDisksInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// ListTagsForResourceOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// ListTagsForResourceInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTapePoolsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PoolInfo[] PoolInfos { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Describes a custom tape pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PoolInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TapeStorageClass StorageClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RetentionLockType RetentionLockType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RetentionLockTimeInDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PoolStatus PoolStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PoolStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTapePoolsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PoolARNs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	/// <summary>
	/// <p>A JSON object containing the following fields:</p> <ul> <li> <p> <a>ListTapesOutput$Marker</a> </p> </li> <li> <p> <a>ListTapesOutput$VolumeInfos</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTapesOutput
	{
		
		/// <summary>
		/// An array of <a>TapeInfo</a> objects, where each object describes a single tape. If there are no tapes in the tape library or VTS, then the <code>TapeInfos</code> is an empty array.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TapeInfo[] TapeInfos { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Describes a virtual tape.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TapeInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TapeARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TapeBarcode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TapeSizeInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TapeStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset RetentionStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset PoolEntryDate { get; set; }
	}
	
	/// <summary>
	/// <p>A JSON object that contains one or more of the following fields:</p> <ul> <li> <p> <a>ListTapesInput$Limit</a> </p> </li> <li> <p> <a>ListTapesInput$Marker</a> </p> </li> <li> <p> <a>ListTapesInput$TapeARNs</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTapesInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of each of the tapes you want to list. If you don't specify a tape ARN, the response lists all tapes in both your VTL and VTS.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] TapeARNs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	/// <summary>
	/// ListVolumeInitiatorsOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVolumeInitiatorsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Initiators { get; set; }
	}
	
	/// <summary>
	/// ListVolumeInitiatorsInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVolumeInitiatorsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVolumeRecoveryPointsOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VolumeRecoveryPointInfo[] VolumeRecoveryPointInfos { get; set; }
	}
	
	/// <summary>
	/// Describes a storage volume recovery point object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VolumeRecoveryPointInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSizeInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeUsageInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeRecoveryPointTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVolumeRecoveryPointsInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// <p>A JSON object containing the following fields:</p> <ul> <li> <p> <a>ListVolumesOutput$Marker</a> </p> </li> <li> <p> <a>ListVolumesOutput$VolumeInfos</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVolumesOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VolumeInfo[] VolumeInfos { get; set; }
	}
	
	/// <summary>
	/// Describes a storage volume object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VolumeInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeId { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSizeInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeAttachmentStatus { get; set; }
	}
	
	/// <summary>
	/// <p>A JSON object that contains one or more of the following fields:</p> <ul> <li> <p> <a>ListVolumesInput$Limit</a> </p> </li> <li> <p> <a>ListVolumesInput$Marker</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVolumesInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotifyWhenUploadedOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the file share.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string FileShareARN { get; set; }
		
		/// <summary>
		/// The randomly generated ID of the notification that was sent. This ID is in UUID format.
		/// Min length: 1
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 2048)]
		public string NotificationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotifyWhenUploadedInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the file share.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string FileShareARN { get; set; }
	}
	
	/// <summary>
	/// RefreshCacheOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RefreshCacheOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the file share.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string FileShareARN { get; set; }
		
		/// <summary>
		/// The randomly generated ID of the notification that was sent. This ID is in UUID format.
		/// Min length: 1
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 2048)]
		public string NotificationId { get; set; }
	}
	
	/// <summary>
	/// RefreshCacheInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RefreshCacheInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FileShareARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] FolderList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Recursive { get; set; }
	}
	
	/// <summary>
	/// RemoveTagsFromResourceOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoveTagsFromResourceOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
	}
	
	/// <summary>
	/// RemoveTagsFromResourceInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoveTagsFromResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResetCacheOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResetCacheInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// RetrieveTapeArchiveOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RetrieveTapeArchiveOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TapeARN { get; set; }
	}
	
	/// <summary>
	/// RetrieveTapeArchiveInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RetrieveTapeArchiveInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TapeARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// RetrieveTapeRecoveryPointOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RetrieveTapeRecoveryPointOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TapeARN { get; set; }
	}
	
	/// <summary>
	/// RetrieveTapeRecoveryPointInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RetrieveTapeRecoveryPointInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TapeARN { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetLocalConsolePasswordOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// SetLocalConsolePasswordInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetLocalConsolePasswordInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LocalConsolePassword { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetSMBGuestPasswordOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// SetSMBGuestPasswordInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetSMBGuestPasswordInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the Amazon Resource Name (ARN) of the gateway that was shut down.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShutdownGatewayOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the Amazon Resource Name (ARN) of the gateway to shut down.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShutdownGatewayInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartAvailabilityMonitorTestOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartAvailabilityMonitorTestInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the Amazon Resource Name (ARN) of the gateway that was restarted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartGatewayOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the Amazon Resource Name (ARN) of the gateway to start.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartGatewayInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateAutomaticTapeCreationPolicyOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateAutomaticTapeCreationPolicyInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutomaticTapeCreationRule[] AutomaticTapeCreationRules { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the Amazon Resource Name (ARN) of the gateway whose throttle information was updated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBandwidthRateLimitOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// <p>A JSON object containing one or more of the following fields:</p> <ul> <li> <p> <a>UpdateBandwidthRateLimitInput$AverageDownloadRateLimitInBitsPerSec</a> </p> </li> <li> <p> <a>UpdateBandwidthRateLimitInput$AverageUploadRateLimitInBitsPerSec</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBandwidthRateLimitInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AverageUploadRateLimitInBitsPerSec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AverageDownloadRateLimitInBitsPerSec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBandwidthRateLimitScheduleOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBandwidthRateLimitScheduleInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BandwidthRateLimitInterval[] BandwidthRateLimitIntervals { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the following fields:
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateChapCredentialsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InitiatorName { get; set; }
	}
	
	/// <summary>
	/// <p>A JSON object containing one or more of the following fields:</p> <ul> <li> <p> <a>UpdateChapCredentialsInput$InitiatorName</a> </p> </li> <li> <p> <a>UpdateChapCredentialsInput$SecretToAuthenticateInitiator</a> </p> </li> <li> <p> <a>UpdateChapCredentialsInput$SecretToAuthenticateTarget</a> </p> </li> <li> <p> <a>UpdateChapCredentialsInput$TargetARN</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateChapCredentialsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SecretToAuthenticateInitiator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InitiatorName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecretToAuthenticateTarget { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFileSystemAssociationOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FileSystemAssociationARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFileSystemAssociationInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FileSystemAssociationARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuditDestinationARN { get; set; }
		
		/// <summary>
		/// The refresh cache information for the file share or FSx file systems.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CacheAttributes CacheAttributes { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the Amazon Resource Name (ARN) of the gateway that was updated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGatewayInformationOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGatewayInformationInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		/// <summary>
		/// The name you configured for your gateway.
		/// Min length: 2
		/// Max length: 255
		/// Pattern: ^[ -\.0-\[\]-~]*[!-\.0-\[\]-~][ -\.0-\[\]-~]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(2, 255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[ -\.0-\[\]-~]*[!-\.0-\[\]-~][ -\.0-\[\]-~]*$")]
		public string GatewayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayTimezone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CloudWatchLogGroupARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GatewayCapacity GatewayCapacity { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the Amazon Resource Name (ARN) of the gateway that was updated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGatewaySoftwareNowOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the Amazon Resource Name (ARN) of the gateway to update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGatewaySoftwareNowInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the Amazon Resource Name (ARN) of the gateway whose maintenance start time is updated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateMaintenanceStartTimeOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	/// <summary>
	/// <p>A JSON object containing the following fields:</p> <ul> <li> <p> <a>UpdateMaintenanceStartTimeInput$DayOfMonth</a> </p> </li> <li> <p> <a>UpdateMaintenanceStartTimeInput$DayOfWeek</a> </p> </li> <li> <p> <a>UpdateMaintenanceStartTimeInput$HourOfDay</a> </p> </li> <li> <p> <a>UpdateMaintenanceStartTimeInput$MinuteOfHour</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateMaintenanceStartTimeInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int HourOfDay { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MinuteOfHour { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DayOfWeek { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DayOfMonth { get; set; }
	}
	
	/// <summary>
	/// UpdateNFSFileShareOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateNFSFileShareOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FileShareARN { get; set; }
	}
	
	/// <summary>
	/// UpdateNFSFileShareInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateNFSFileShareInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FileShareARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> KMSEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KMSKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NFSFileShareDefaults NFSFileShareDefaults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultStorageClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectACL ObjectACL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ClientList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Squash { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> GuessMIMETypeEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequesterPays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FileShareName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CacheAttributes CacheAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuditDestinationARN { get; set; }
	}
	
	/// <summary>
	/// UpdateSMBFileShareOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSMBFileShareOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FileShareARN { get; set; }
	}
	
	/// <summary>
	/// UpdateSMBFileShareInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSMBFileShareInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FileShareARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> KMSEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KMSKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultStorageClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectACL ObjectACL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> GuessMIMETypeEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequesterPays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SMBACLEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AccessBasedEnumeration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AdminUserList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ValidUserList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InvalidUserList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuditDestinationARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CaseSensitivity CaseSensitivity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FileShareName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CacheAttributes CacheAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OplocksEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSMBFileShareVisibilityOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSMBFileShareVisibilityInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool FileSharesVisible { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSMBLocalGroupsOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSMBLocalGroupsInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SMBLocalGroups SMBLocalGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSMBSecurityStrategyOutput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSMBSecurityStrategyInput
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.
		/// Required
		/// Min length: 50
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(50, 500)]
		public string GatewayARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SMBSecurityStrategy SMBSecurityStrategy { get; set; }
	}
	
	/// <summary>
	/// A JSON object containing the Amazon Resource Name (ARN) of the updated storage volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSnapshotScheduleOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
	}
	
	/// <summary>
	/// <p>A JSON object containing one or more of the following fields:</p> <ul> <li> <p> <a>UpdateSnapshotScheduleInput$Description</a> </p> </li> <li> <p> <a>UpdateSnapshotScheduleInput$RecurrenceInHours</a> </p> </li> <li> <p> <a>UpdateSnapshotScheduleInput$StartAt</a> </p> </li> <li> <p> <a>UpdateSnapshotScheduleInput$VolumeARN</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSnapshotScheduleInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VolumeARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int RecurrenceInHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// UpdateVTLDeviceTypeOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateVTLDeviceTypeOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VTLDeviceARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateVTLDeviceTypeInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VTLDeviceARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceType { get; set; }
	}
	
	/// <summary>
	/// The type of the file share.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FileShareType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NFS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMB = 1,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Activates the gateway you previously deployed on your host. In the activation process, you specify information such as the Amazon Web Services Region that you want to use for storing snapshots or tapes, the time zone for scheduled snapshots the gateway snapshot schedule window, an activation key, and a name for your gateway. The activation process also associates your gateway with your account. For more information, see <a>UpdateGatewayInformation</a>.</p> <note> <p>You must turn on the gateway VM before you can activate your gateway.</p> </note>
		/// ActivateGateway #X-Amz-Target=StorageGateway_20130630.ActivateGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ActivateGatewayOutput> ActivateGatewayAsync(ActivateGatewayInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.ActivateGateway";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ActivateGatewayOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Configures one or more gateway local disks as cache for a gateway. This operation is only supported in the cached volume, tape, and file gateway type (see <a href="https://docs.aws.amazon.com/storagegateway/latest/userguide/StorageGatewayConcepts.html">How Storage Gateway works (architecture)</a>.</p> <p>In the request, you specify the gateway Amazon Resource Name (ARN) to which you want to add cache, and one or more disk IDs that you want to configure as cache.</p>
		/// AddCache #X-Amz-Target=StorageGateway_20130630.AddCache
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AddCacheOutput> AddCacheAsync(AddCacheInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.AddCache";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AddCacheOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Adds one or more tags to the specified resource. You use tags to add metadata to resources, which you can use to categorize these resources. For example, you can categorize resources by purpose, owner, environment, or team. Each tag consists of a key and a value, which you define. You can add tags to the following Storage Gateway resources:</p> <ul> <li> <p>Storage gateways of all types</p> </li> <li> <p>Storage volumes</p> </li> <li> <p>Virtual tapes</p> </li> <li> <p>NFS and SMB file shares</p> </li> <li> <p>File System associations</p> </li> </ul> <p>You can create a maximum of 50 tags for each resource. Virtual tapes and storage volumes that are recovered to a new gateway maintain their tags.</p>
		/// AddTagsToResource #X-Amz-Target=StorageGateway_20130630.AddTagsToResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AddTagsToResourceOutput> AddTagsToResourceAsync(AddTagsToResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.AddTagsToResource";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AddTagsToResourceOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Configures one or more gateway local disks as upload buffer for a specified gateway. This operation is supported for the stored volume, cached volume, and tape gateway types.</p> <p>In the request, you specify the gateway Amazon Resource Name (ARN) to which you want to add upload buffer, and one or more disk IDs that you want to configure as upload buffer.</p>
		/// AddUploadBuffer #X-Amz-Target=StorageGateway_20130630.AddUploadBuffer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AddUploadBufferOutput> AddUploadBufferAsync(AddUploadBufferInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.AddUploadBuffer";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AddUploadBufferOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Configures one or more gateway local disks as working storage for a gateway. This operation is only supported in the stored volume gateway type. This operation is deprecated in cached volume API version 20120630. Use <a>AddUploadBuffer</a> instead.</p> <note> <p>Working storage is also referred to as upload buffer. You can also use the <a>AddUploadBuffer</a> operation to add upload buffer to a stored volume gateway.</p> </note> <p>In the request, you specify the gateway Amazon Resource Name (ARN) to which you want to add working storage, and one or more disk IDs that you want to configure as working storage.</p>
		/// AddWorkingStorage #X-Amz-Target=StorageGateway_20130630.AddWorkingStorage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AddWorkingStorageOutput> AddWorkingStorageAsync(AddWorkingStorageInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.AddWorkingStorage";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AddWorkingStorageOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Assigns a tape to a tape pool for archiving. The tape assigned to a pool is archived in the S3 storage class that is associated with the pool. When you use your backup application to eject the tape, the tape is archived directly into the S3 storage class (S3 Glacier or S3 Glacier Deep Archive) that corresponds to the pool.
		/// AssignTapePool #X-Amz-Target=StorageGateway_20130630.AssignTapePool
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssignTapePoolOutput> AssignTapePoolAsync(AssignTapePoolInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.AssignTapePool";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AssignTapePoolOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Associate an Amazon FSx file system with the FSx File Gateway. After the association process is complete, the file shares on the Amazon FSx file system are available for access through the gateway. This operation only supports the FSx File Gateway type.
		/// AssociateFileSystem #X-Amz-Target=StorageGateway_20130630.AssociateFileSystem
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateFileSystemOutput> AssociateFileSystemAsync(AssociateFileSystemInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.AssociateFileSystem";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AssociateFileSystemOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Connects a volume to an iSCSI connection and then attaches the volume to the specified gateway. Detaching and attaching a volume enables you to recover your data from one gateway to a different gateway without creating a snapshot. It also makes it easier to move your volumes from an on-premises gateway to a gateway hosted on an Amazon EC2 instance.
		/// AttachVolume #X-Amz-Target=StorageGateway_20130630.AttachVolume
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AttachVolumeOutput> AttachVolumeAsync(AttachVolumeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.AttachVolume";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AttachVolumeOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Cancels archiving of a virtual tape to the virtual tape shelf (VTS) after the archiving process is initiated. This operation is only supported in the tape gateway type.
		/// CancelArchival #X-Amz-Target=StorageGateway_20130630.CancelArchival
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CancelArchivalOutput> CancelArchivalAsync(CancelArchivalInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.CancelArchival";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CancelArchivalOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Cancels retrieval of a virtual tape from the virtual tape shelf (VTS) to a gateway after the retrieval process is initiated. The virtual tape is returned to the VTS. This operation is only supported in the tape gateway type.
		/// CancelRetrieval #X-Amz-Target=StorageGateway_20130630.CancelRetrieval
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CancelRetrievalOutput> CancelRetrievalAsync(CancelRetrievalInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.CancelRetrieval";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CancelRetrievalOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Creates a cached volume on a specified cached volume gateway. This operation is only supported in the cached volume gateway type.</p> <note> <p>Cache storage must be allocated to the gateway before you can create a cached volume. Use the <a>AddCache</a> operation to add cache storage to a gateway.</p> </note> <p>In the request, you must specify the gateway, size of the volume in bytes, the iSCSI target name, an IP address on which to expose the target, and a unique client token. In response, the gateway creates the volume and returns information about it. This information includes the volume Amazon Resource Name (ARN), its size, and the iSCSI target ARN that initiators can use to connect to the volume target.</p> <p>Optionally, you can provide the ARN for an existing volume as the <code>SourceVolumeARN</code> for this cached volume, which creates an exact copy of the existing volume’s latest recovery point. The <code>VolumeSizeInBytes</code> value must be equal to or larger than the size of the copied volume, in bytes.</p>
		/// CreateCachediSCSIVolume #X-Amz-Target=StorageGateway_20130630.CreateCachediSCSIVolume
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateCachediSCSIVolumeOutput> CreateCachediSCSIVolumeAsync(CreateCachediSCSIVolumeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.CreateCachediSCSIVolume";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateCachediSCSIVolumeOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Creates a Network File System (NFS) file share on an existing S3 File Gateway. In Storage Gateway, a file share is a file system mount point backed by Amazon S3 cloud storage. Storage Gateway exposes file shares using an NFS interface. This operation is only supported for S3 File Gateways.</p> <important> <p>S3 File gateway requires Security Token Service (Amazon Web Services STS) to be activated to enable you to create a file share. Make sure Amazon Web Services STS is activated in the Amazon Web Services Region you are creating your S3 File Gateway in. If Amazon Web Services STS is not activated in the Amazon Web Services Region, activate it. For information about how to activate Amazon Web Services STS, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and deactivating Amazon Web Services STS in an Amazon Web Services Region</a> in the <i>Identity and Access Management User Guide</i>.</p> <p>S3 File Gateways do not support creating hard or symbolic links on a file share.</p> </important>
		/// CreateNFSFileShare #X-Amz-Target=StorageGateway_20130630.CreateNFSFileShare
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateNFSFileShareOutput> CreateNFSFileShareAsync(CreateNFSFileShareInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.CreateNFSFileShare";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateNFSFileShareOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Creates a Server Message Block (SMB) file share on an existing S3 File Gateway. In Storage Gateway, a file share is a file system mount point backed by Amazon S3 cloud storage. Storage Gateway exposes file shares using an SMB interface. This operation is only supported for S3 File Gateways.</p> <important> <p>S3 File Gateways require Security Token Service (Amazon Web Services STS) to be activated to enable you to create a file share. Make sure that Amazon Web Services STS is activated in the Amazon Web Services Region you are creating your S3 File Gateway in. If Amazon Web Services STS is not activated in this Amazon Web Services Region, activate it. For information about how to activate Amazon Web Services STS, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and deactivating Amazon Web Services STS in an Amazon Web Services Region</a> in the <i>Identity and Access Management User Guide</i>.</p> <p>File gateways don't support creating hard or symbolic links on a file share.</p> </important>
		/// CreateSMBFileShare #X-Amz-Target=StorageGateway_20130630.CreateSMBFileShare
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateSMBFileShareOutput> CreateSMBFileShareAsync(CreateSMBFileShareInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.CreateSMBFileShare";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateSMBFileShareOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Initiates a snapshot of a volume.</p> <p>Storage Gateway provides the ability to back up point-in-time snapshots of your data to Amazon Simple Storage (Amazon S3) for durable off-site recovery, and also import the data to an Amazon Elastic Block Store (EBS) volume in Amazon Elastic Compute Cloud (EC2). You can take snapshots of your gateway volume on a scheduled or ad hoc basis. This API enables you to take an ad hoc snapshot. For more information, see <a href="https://docs.aws.amazon.com/storagegateway/latest/userguide/managing-volumes.html#SchedulingSnapshot">Editing a snapshot schedule</a>.</p> <p>In the <code>CreateSnapshot</code> request, you identify the volume by providing its Amazon Resource Name (ARN). You must also provide description for the snapshot. When Storage Gateway takes the snapshot of specified volume, the snapshot and description appears in the Storage Gateway console. In response, Storage Gateway returns you a snapshot ID. You can use this snapshot ID to check the snapshot progress or later use it when you want to create a volume from a snapshot. This operation is only supported in stored and cached volume gateway type.</p> <note> <p>To list or delete a snapshot, you must use the Amazon EC2 API. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSnapshots.html">DescribeSnapshots</a> or <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DeleteSnapshot.html">DeleteSnapshot</a> in the <i>Amazon Elastic Compute Cloud API Reference</i>.</p> </note> <important> <p>Volume and snapshot IDs are changing to a longer length ID format. For more information, see the important note on the <a href="https://docs.aws.amazon.com/storagegateway/latest/APIReference/Welcome.html">Welcome</a> page.</p> </important>
		/// CreateSnapshot #X-Amz-Target=StorageGateway_20130630.CreateSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateSnapshotOutput> CreateSnapshotAsync(CreateSnapshotInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.CreateSnapshot";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateSnapshotOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Initiates a snapshot of a gateway from a volume recovery point. This operation is only supported in the cached volume gateway type.</p> <p>A volume recovery point is a point in time at which all data of the volume is consistent and from which you can create a snapshot. To get a list of volume recovery point for cached volume gateway, use <a>ListVolumeRecoveryPoints</a>.</p> <p>In the <code>CreateSnapshotFromVolumeRecoveryPoint</code> request, you identify the volume by providing its Amazon Resource Name (ARN). You must also provide a description for the snapshot. When the gateway takes a snapshot of the specified volume, the snapshot and its description appear in the Storage Gateway console. In response, the gateway returns you a snapshot ID. You can use this snapshot ID to check the snapshot progress or later use it when you want to create a volume from a snapshot.</p> <note> <p>To list or delete a snapshot, you must use the Amazon EC2 API. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSnapshots.html">DescribeSnapshots</a> or <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DeleteSnapshot.html">DeleteSnapshot</a> in the <i>Amazon Elastic Compute Cloud API Reference</i>.</p> </note>
		/// CreateSnapshotFromVolumeRecoveryPoint #X-Amz-Target=StorageGateway_20130630.CreateSnapshotFromVolumeRecoveryPoint
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateSnapshotFromVolumeRecoveryPointOutput> CreateSnapshotFromVolumeRecoveryPointAsync(CreateSnapshotFromVolumeRecoveryPointInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.CreateSnapshotFromVolumeRecoveryPoint";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateSnapshotFromVolumeRecoveryPointOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Creates a volume on a specified gateway. This operation is only supported in the stored volume gateway type.</p> <p>The size of the volume to create is inferred from the disk size. You can choose to preserve existing data on the disk, create volume from an existing snapshot, or create an empty volume. If you choose to create an empty gateway volume, then any existing data on the disk is erased.</p> <p>In the request, you must specify the gateway and the disk information on which you are creating the volume. In response, the gateway creates the volume and returns volume information such as the volume Amazon Resource Name (ARN), its size, and the iSCSI target ARN that initiators can use to connect to the volume target.</p>
		/// CreateStorediSCSIVolume #X-Amz-Target=StorageGateway_20130630.CreateStorediSCSIVolume
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateStorediSCSIVolumeOutput> CreateStorediSCSIVolumeAsync(CreateStorediSCSIVolumeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.CreateStorediSCSIVolume";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateStorediSCSIVolumeOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new custom tape pool. You can use custom tape pool to enable tape retention lock on tapes that are archived in the custom pool.
		/// CreateTapePool #X-Amz-Target=StorageGateway_20130630.CreateTapePool
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateTapePoolOutput> CreateTapePoolAsync(CreateTapePoolInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.CreateTapePool";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateTapePoolOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Creates a virtual tape by using your own barcode. You write data to the virtual tape and then archive the tape. A barcode is unique and cannot be reused if it has already been used on a tape. This applies to barcodes used on deleted tapes. This operation is only supported in the tape gateway type.</p> <note> <p>Cache storage must be allocated to the gateway before you can create a virtual tape. Use the <a>AddCache</a> operation to add cache storage to a gateway.</p> </note>
		/// CreateTapeWithBarcode #X-Amz-Target=StorageGateway_20130630.CreateTapeWithBarcode
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateTapeWithBarcodeOutput> CreateTapeWithBarcodeAsync(CreateTapeWithBarcodeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.CreateTapeWithBarcode";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateTapeWithBarcodeOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Creates one or more virtual tapes. You write data to the virtual tapes and then archive the tapes. This operation is only supported in the tape gateway type.</p> <note> <p>Cache storage must be allocated to the gateway before you can create virtual tapes. Use the <a>AddCache</a> operation to add cache storage to a gateway.</p> </note>
		/// CreateTapes #X-Amz-Target=StorageGateway_20130630.CreateTapes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateTapesOutput> CreateTapesAsync(CreateTapesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.CreateTapes";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateTapesOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the automatic tape creation policy of a gateway. If you delete this policy, new virtual tapes must be created manually. Use the Amazon Resource Name (ARN) of the gateway in your request to remove the policy.
		/// DeleteAutomaticTapeCreationPolicy #X-Amz-Target=StorageGateway_20130630.DeleteAutomaticTapeCreationPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteAutomaticTapeCreationPolicyOutput> DeleteAutomaticTapeCreationPolicyAsync(DeleteAutomaticTapeCreationPolicyInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DeleteAutomaticTapeCreationPolicy";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteAutomaticTapeCreationPolicyOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the bandwidth rate limits of a gateway. You can delete either the upload and download bandwidth rate limit, or you can delete both. If you delete only one of the limits, the other limit remains unchanged. To specify which gateway to work with, use the Amazon Resource Name (ARN) of the gateway in your request. This operation is supported only for the stored volume, cached volume, and tape gateway types.
		/// DeleteBandwidthRateLimit #X-Amz-Target=StorageGateway_20130630.DeleteBandwidthRateLimit
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteBandwidthRateLimitOutput> DeleteBandwidthRateLimitAsync(DeleteBandwidthRateLimitInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DeleteBandwidthRateLimit";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteBandwidthRateLimitOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes Challenge-Handshake Authentication Protocol (CHAP) credentials for a specified iSCSI target and initiator pair. This operation is supported in volume and tape gateway types.
		/// DeleteChapCredentials #X-Amz-Target=StorageGateway_20130630.DeleteChapCredentials
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteChapCredentialsOutput> DeleteChapCredentialsAsync(DeleteChapCredentialsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DeleteChapCredentials";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteChapCredentialsOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a file share from an S3 File Gateway. This operation is only supported for S3 File Gateways.
		/// DeleteFileShare #X-Amz-Target=StorageGateway_20130630.DeleteFileShare
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteFileShareOutput> DeleteFileShareAsync(DeleteFileShareInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DeleteFileShare";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteFileShareOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Deletes a gateway. To specify which gateway to delete, use the Amazon Resource Name (ARN) of the gateway in your request. The operation deletes the gateway; however, it does not delete the gateway virtual machine (VM) from your host computer.</p> <p>After you delete a gateway, you cannot reactivate it. Completed snapshots of the gateway volumes are not deleted upon deleting the gateway, however, pending snapshots will not complete. After you delete a gateway, your next step is to remove it from your environment.</p> <important> <p>You no longer pay software charges after the gateway is deleted; however, your existing Amazon EBS snapshots persist and you will continue to be billed for these snapshots. You can choose to remove all remaining Amazon EBS snapshots by canceling your Amazon EC2 subscription.  If you prefer not to cancel your Amazon EC2 subscription, you can delete your snapshots using the Amazon EC2 console. For more information, see the <a href="http://aws.amazon.com/storagegateway">Storage Gateway detail page</a>.</p> </important>
		/// DeleteGateway #X-Amz-Target=StorageGateway_20130630.DeleteGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteGatewayOutput> DeleteGatewayAsync(DeleteGatewayInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DeleteGateway";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteGatewayOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Deletes a snapshot of a volume.</p> <p>You can take snapshots of your gateway volumes on a scheduled or ad hoc basis. This API action enables you to delete a snapshot schedule for a volume. For more information, see <a href="https://docs.aws.amazon.com/storagegateway/latest/userguide/backing-up-volumes.html">Backing up your volumes</a>. In the <code>DeleteSnapshotSchedule</code> request, you identify the volume by providing its Amazon Resource Name (ARN). This operation is only supported for cached volume gateway types.</p> <note> <p>To list or delete a snapshot, you must use the Amazon EC2 API. For more information, go to <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSnapshots.html">DescribeSnapshots</a> in the <i>Amazon Elastic Compute Cloud API Reference</i>.</p> </note>
		/// DeleteSnapshotSchedule #X-Amz-Target=StorageGateway_20130630.DeleteSnapshotSchedule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteSnapshotScheduleOutput> DeleteSnapshotScheduleAsync(DeleteSnapshotScheduleInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DeleteSnapshotSchedule";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteSnapshotScheduleOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the specified virtual tape. This operation is only supported in the tape gateway type.
		/// DeleteTape #X-Amz-Target=StorageGateway_20130630.DeleteTape
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteTapeOutput> DeleteTapeAsync(DeleteTapeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DeleteTape";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteTapeOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the specified virtual tape from the virtual tape shelf (VTS). This operation is only supported in the tape gateway type.
		/// DeleteTapeArchive #X-Amz-Target=StorageGateway_20130630.DeleteTapeArchive
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteTapeArchiveOutput> DeleteTapeArchiveAsync(DeleteTapeArchiveInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DeleteTapeArchive";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteTapeArchiveOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a custom tape pool. A custom tape pool can only be deleted if there are no tapes in the pool and if there are no automatic tape creation policies that reference the custom tape pool.
		/// DeleteTapePool #X-Amz-Target=StorageGateway_20130630.DeleteTapePool
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteTapePoolOutput> DeleteTapePoolAsync(DeleteTapePoolInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DeleteTapePool";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteTapePoolOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified storage volume that you previously created using the <a>CreateCachediSCSIVolume</a> or <a>CreateStorediSCSIVolume</a> API. This operation is only supported in the cached volume and stored volume types. For stored volume gateways, the local disk that was configured as the storage volume is not deleted. You can reuse the local disk to create another storage volume.</p> <p>Before you delete a volume, make sure there are no iSCSI connections to the volume you are deleting. You should also make sure there is no snapshot in progress. You can use the Amazon Elastic Compute Cloud (Amazon EC2) API to query snapshots on the volume you are deleting and check the snapshot status. For more information, go to <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/ApiReference-query-DescribeSnapshots.html">DescribeSnapshots</a> in the <i>Amazon Elastic Compute Cloud API Reference</i>.</p> <p>In the request, you must provide the Amazon Resource Name (ARN) of the storage volume you want to delete.</p>
		/// DeleteVolume #X-Amz-Target=StorageGateway_20130630.DeleteVolume
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteVolumeOutput> DeleteVolumeAsync(DeleteVolumeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DeleteVolume";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteVolumeOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns information about the most recent high availability monitoring test that was performed on the host in a cluster. If a test isn't performed, the status and start time in the response would be null.
		/// DescribeAvailabilityMonitorTest #X-Amz-Target=StorageGateway_20130630.DescribeAvailabilityMonitorTest
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAvailabilityMonitorTestOutput> DescribeAvailabilityMonitorTestAsync(DescribeAvailabilityMonitorTestInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DescribeAvailabilityMonitorTest";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeAvailabilityMonitorTestOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Returns the bandwidth rate limits of a gateway. By default, these limits are not set, which means no bandwidth rate limiting is in effect. This operation is supported only for the stored volume, cached volume, and tape gateway types. To describe bandwidth rate limits for S3 file gateways, use <a>DescribeBandwidthRateLimitSchedule</a>.</p> <p>This operation returns a value for a bandwidth rate limit only if the limit is set. If no limits are set for the gateway, then this operation returns only the gateway ARN in the response body. To specify which gateway to describe, use the Amazon Resource Name (ARN) of the gateway in your request.</p>
		/// DescribeBandwidthRateLimit #X-Amz-Target=StorageGateway_20130630.DescribeBandwidthRateLimit
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeBandwidthRateLimitOutput> DescribeBandwidthRateLimitAsync(DescribeBandwidthRateLimitInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DescribeBandwidthRateLimit";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeBandwidthRateLimitOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p> Returns information about the bandwidth rate limit schedule of a gateway. By default, gateways do not have bandwidth rate limit schedules, which means no bandwidth rate limiting is in effect. This operation is supported only for volume, tape and S3 file gateways. FSx file gateways do not support bandwidth rate limits.</p> <p>This operation returns information about a gateway's bandwidth rate limit schedule. A bandwidth rate limit schedule consists of one or more bandwidth rate limit intervals. A bandwidth rate limit interval defines a period of time on one or more days of the week, during which bandwidth rate limits are specified for uploading, downloading, or both. </p> <p> A bandwidth rate limit interval consists of one or more days of the week, a start hour and minute, an ending hour and minute, and bandwidth rate limits for uploading and downloading </p> <p> If no bandwidth rate limit schedule intervals are set for the gateway, this operation returns an empty response. To specify which gateway to describe, use the Amazon Resource Name (ARN) of the gateway in your request.</p>
		/// DescribeBandwidthRateLimitSchedule #X-Amz-Target=StorageGateway_20130630.DescribeBandwidthRateLimitSchedule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeBandwidthRateLimitScheduleOutput> DescribeBandwidthRateLimitScheduleAsync(DescribeBandwidthRateLimitScheduleInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DescribeBandwidthRateLimitSchedule";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeBandwidthRateLimitScheduleOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Returns information about the cache of a gateway. This operation is only supported in the cached volume, tape, and file gateway types.</p> <p>The response includes disk IDs that are configured as cache, and it includes the amount of cache allocated and used.</p>
		/// DescribeCache #X-Amz-Target=StorageGateway_20130630.DescribeCache
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeCacheOutput> DescribeCacheAsync(DescribeCacheInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DescribeCache";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeCacheOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Returns a description of the gateway volumes specified in the request. This operation is only supported in the cached volume gateway types.</p> <p>The list of gateway volumes in the request must be from one gateway. In the response, Storage Gateway returns volume information sorted by volume Amazon Resource Name (ARN).</p>
		/// DescribeCachediSCSIVolumes #X-Amz-Target=StorageGateway_20130630.DescribeCachediSCSIVolumes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeCachediSCSIVolumesOutput> DescribeCachediSCSIVolumesAsync(DescribeCachediSCSIVolumesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DescribeCachediSCSIVolumes";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeCachediSCSIVolumesOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns an array of Challenge-Handshake Authentication Protocol (CHAP) credentials information for a specified iSCSI target, one for each target-initiator pair. This operation is supported in the volume and tape gateway types.
		/// DescribeChapCredentials #X-Amz-Target=StorageGateway_20130630.DescribeChapCredentials
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeChapCredentialsOutput> DescribeChapCredentialsAsync(DescribeChapCredentialsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DescribeChapCredentials";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeChapCredentialsOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the file system association information. This operation is only supported for FSx File Gateways.
		/// DescribeFileSystemAssociations #X-Amz-Target=StorageGateway_20130630.DescribeFileSystemAssociations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeFileSystemAssociationsOutput> DescribeFileSystemAssociationsAsync(DescribeFileSystemAssociationsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DescribeFileSystemAssociations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeFileSystemAssociationsOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns metadata about a gateway such as its name, network interfaces, configured time zone, and the state (whether the gateway is running or not). To specify which gateway to describe, use the Amazon Resource Name (ARN) of the gateway in your request.
		/// DescribeGatewayInformation #X-Amz-Target=StorageGateway_20130630.DescribeGatewayInformation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeGatewayInformationOutput> DescribeGatewayInformationAsync(DescribeGatewayInformationInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DescribeGatewayInformation";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeGatewayInformationOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns your gateway's weekly maintenance start time including the day and time of the week. Note that values are in terms of the gateway's time zone.
		/// DescribeMaintenanceStartTime #X-Amz-Target=StorageGateway_20130630.DescribeMaintenanceStartTime
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeMaintenanceStartTimeOutput> DescribeMaintenanceStartTimeAsync(DescribeMaintenanceStartTimeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DescribeMaintenanceStartTime";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeMaintenanceStartTimeOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a description for one or more Network File System (NFS) file shares from an S3 File Gateway. This operation is only supported for S3 File Gateways.
		/// DescribeNFSFileShares #X-Amz-Target=StorageGateway_20130630.DescribeNFSFileShares
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeNFSFileSharesOutput> DescribeNFSFileSharesAsync(DescribeNFSFileSharesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DescribeNFSFileShares";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeNFSFileSharesOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a description for one or more Server Message Block (SMB) file shares from a S3 File Gateway. This operation is only supported for S3 File Gateways.
		/// DescribeSMBFileShares #X-Amz-Target=StorageGateway_20130630.DescribeSMBFileShares
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeSMBFileSharesOutput> DescribeSMBFileSharesAsync(DescribeSMBFileSharesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DescribeSMBFileShares";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeSMBFileSharesOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a description of a Server Message Block (SMB) file share settings from a file gateway. This operation is only supported for file gateways.
		/// DescribeSMBSettings #X-Amz-Target=StorageGateway_20130630.DescribeSMBSettings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeSMBSettingsOutput> DescribeSMBSettingsAsync(DescribeSMBSettingsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DescribeSMBSettings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeSMBSettingsOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Describes the snapshot schedule for the specified gateway volume. The snapshot schedule information includes intervals at which snapshots are automatically initiated on the volume. This operation is only supported in the cached volume and stored volume types.
		/// DescribeSnapshotSchedule #X-Amz-Target=StorageGateway_20130630.DescribeSnapshotSchedule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeSnapshotScheduleOutput> DescribeSnapshotScheduleAsync(DescribeSnapshotScheduleInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DescribeSnapshotSchedule";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeSnapshotScheduleOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the description of the gateway volumes specified in the request. The list of gateway volumes in the request must be from one gateway. In the response, Storage Gateway returns volume information sorted by volume ARNs. This operation is only supported in stored volume gateway type.
		/// DescribeStorediSCSIVolumes #X-Amz-Target=StorageGateway_20130630.DescribeStorediSCSIVolumes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeStorediSCSIVolumesOutput> DescribeStorediSCSIVolumesAsync(DescribeStorediSCSIVolumesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DescribeStorediSCSIVolumes";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeStorediSCSIVolumesOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Returns a description of specified virtual tapes in the virtual tape shelf (VTS). This operation is only supported in the tape gateway type.</p> <p>If a specific <code>TapeARN</code> is not specified, Storage Gateway returns a description of all virtual tapes found in the VTS associated with your account.</p>
		/// DescribeTapeArchives #X-Amz-Target=StorageGateway_20130630.DescribeTapeArchives
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeTapeArchivesOutput> DescribeTapeArchivesAsync(string Limit, string Marker, DescribeTapeArchivesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DescribeTapeArchives?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeTapeArchivesOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Returns a list of virtual tape recovery points that are available for the specified tape gateway.</p> <p>A recovery point is a point-in-time view of a virtual tape at which all the data on the virtual tape is consistent. If your gateway crashes, virtual tapes that have recovery points can be recovered to a new gateway. This operation is only supported in the tape gateway type.</p>
		/// DescribeTapeRecoveryPoints #X-Amz-Target=StorageGateway_20130630.DescribeTapeRecoveryPoints
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeTapeRecoveryPointsOutput> DescribeTapeRecoveryPointsAsync(string Limit, string Marker, DescribeTapeRecoveryPointsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DescribeTapeRecoveryPoints?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeTapeRecoveryPointsOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a description of the specified Amazon Resource Name (ARN) of virtual tapes. If a <code>TapeARN</code> is not specified, returns a description of all virtual tapes associated with the specified gateway. This operation is only supported in the tape gateway type.
		/// DescribeTapes #X-Amz-Target=StorageGateway_20130630.DescribeTapes
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeTapesOutput> DescribeTapesAsync(string Limit, string Marker, DescribeTapesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DescribeTapes?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeTapesOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Returns information about the upload buffer of a gateway. This operation is supported for the stored volume, cached volume, and tape gateway types.</p> <p>The response includes disk IDs that are configured as upload buffer space, and it includes the amount of upload buffer space allocated and used.</p>
		/// DescribeUploadBuffer #X-Amz-Target=StorageGateway_20130630.DescribeUploadBuffer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeUploadBufferOutput> DescribeUploadBufferAsync(DescribeUploadBufferInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DescribeUploadBuffer";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeUploadBufferOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Returns a description of virtual tape library (VTL) devices for the specified tape gateway. In the response, Storage Gateway returns VTL device information.</p> <p>This operation is only supported in the tape gateway type.</p>
		/// DescribeVTLDevices #X-Amz-Target=StorageGateway_20130630.DescribeVTLDevices
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeVTLDevicesOutput> DescribeVTLDevicesAsync(string Limit, string Marker, DescribeVTLDevicesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DescribeVTLDevices?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeVTLDevicesOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Returns information about the working storage of a gateway. This operation is only supported in the stored volumes gateway type. This operation is deprecated in cached volumes API version (20120630). Use DescribeUploadBuffer instead.</p> <note> <p>Working storage is also referred to as upload buffer. You can also use the DescribeUploadBuffer operation to add upload buffer to a stored volume gateway.</p> </note> <p>The response includes disk IDs that are configured as working storage, and it includes the amount of working storage allocated and used.</p>
		/// DescribeWorkingStorage #X-Amz-Target=StorageGateway_20130630.DescribeWorkingStorage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeWorkingStorageOutput> DescribeWorkingStorageAsync(DescribeWorkingStorageInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DescribeWorkingStorage";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeWorkingStorageOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Disconnects a volume from an iSCSI connection and then detaches the volume from the specified gateway. Detaching and attaching a volume enables you to recover your data from one gateway to a different gateway without creating a snapshot. It also makes it easier to move your volumes from an on-premises gateway to a gateway hosted on an Amazon EC2 instance. This operation is only supported in the volume gateway type.
		/// DetachVolume #X-Amz-Target=StorageGateway_20130630.DetachVolume
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetachVolumeOutput> DetachVolumeAsync(DetachVolumeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DetachVolume";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DetachVolumeOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Disables a tape gateway when the gateway is no longer functioning. For example, if your gateway VM is damaged, you can disable the gateway so you can recover virtual tapes.</p> <p>Use this operation for a tape gateway that is not reachable or not functioning. This operation is only supported in the tape gateway type.</p> <important> <p>After a gateway is disabled, it cannot be enabled.</p> </important>
		/// DisableGateway #X-Amz-Target=StorageGateway_20130630.DisableGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisableGatewayOutput> DisableGatewayAsync(DisableGatewayInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DisableGateway";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DisableGatewayOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Disassociates an Amazon FSx file system from the specified gateway. After the disassociation process finishes, the gateway can no longer access the Amazon FSx file system. This operation is only supported in the FSx File Gateway type.
		/// DisassociateFileSystem #X-Amz-Target=StorageGateway_20130630.DisassociateFileSystem
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateFileSystemOutput> DisassociateFileSystemAsync(DisassociateFileSystemInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.DisassociateFileSystem";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DisassociateFileSystemOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Adds a file gateway to an Active Directory domain. This operation is only supported for file gateways that support the SMB file protocol.
		/// JoinDomain #X-Amz-Target=StorageGateway_20130630.JoinDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<JoinDomainOutput> JoinDomainAsync(JoinDomainInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.JoinDomain";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<JoinDomainOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Lists the automatic tape creation policies for a gateway. If there are no automatic tape creation policies for the gateway, it returns an empty list.</p> <p>This operation is only supported for tape gateways.</p>
		/// ListAutomaticTapeCreationPolicies #X-Amz-Target=StorageGateway_20130630.ListAutomaticTapeCreationPolicies
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListAutomaticTapeCreationPoliciesOutput> ListAutomaticTapeCreationPoliciesAsync(ListAutomaticTapeCreationPoliciesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.ListAutomaticTapeCreationPolicies";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAutomaticTapeCreationPoliciesOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of the file shares for a specific S3 File Gateway, or the list of file shares that belong to the calling user account. This operation is only supported for S3 File Gateways.
		/// ListFileShares #X-Amz-Target=StorageGateway_20130630.ListFileShares
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListFileSharesOutput> ListFileSharesAsync(string Limit, string Marker, ListFileSharesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.ListFileShares?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListFileSharesOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of <code>FileSystemAssociationSummary</code> objects. Each object contains a summary of a file system association. This operation is only supported for FSx File Gateways.
		/// ListFileSystemAssociations #X-Amz-Target=StorageGateway_20130630.ListFileSystemAssociations
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListFileSystemAssociationsOutput> ListFileSystemAssociationsAsync(string Limit, string Marker, ListFileSystemAssociationsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.ListFileSystemAssociations?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListFileSystemAssociationsOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Lists gateways owned by an Amazon Web Services account in an Amazon Web Services Region specified in the request. The returned list is ordered by gateway Amazon Resource Name (ARN).</p> <p>By default, the operation returns a maximum of 100 gateways. This operation supports pagination that allows you to optionally reduce the number of gateways returned in a response.</p> <p>If you have more gateways than are returned in a response (that is, the response returns only a truncated list of your gateways), the response contains a marker that you can specify in your next request to fetch the next page of gateways.</p>
		/// ListGateways #X-Amz-Target=StorageGateway_20130630.ListGateways
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListGatewaysOutput> ListGatewaysAsync(string Limit, string Marker, ListGatewaysInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.ListGateways?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListGatewaysOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Returns a list of the gateway's local disks. To specify which gateway to describe, you use the Amazon Resource Name (ARN) of the gateway in the body of the request.</p> <p>The request returns a list of all disks, specifying which are configured as working storage, cache storage, or stored volume or not configured at all. The response includes a <code>DiskStatus</code> field. This field can have a value of present (the disk is available to use), missing (the disk is no longer connected to the gateway), or mismatch (the disk node is occupied by a disk that has incorrect metadata or the disk content is corrupted).</p>
		/// ListLocalDisks #X-Amz-Target=StorageGateway_20130630.ListLocalDisks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListLocalDisksOutput> ListLocalDisksAsync(ListLocalDisksInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.ListLocalDisks";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListLocalDisksOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the tags that have been added to the specified resource. This operation is supported in storage gateways of all types.
		/// ListTagsForResource #X-Amz-Target=StorageGateway_20130630.ListTagsForResource
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceOutput> ListTagsForResourceAsync(string Limit, string Marker, ListTagsForResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.ListTagsForResource?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Lists custom tape pools. You specify custom tape pools to list by specifying one or more custom tape pool Amazon Resource Names (ARNs). If you don't specify a custom tape pool ARN, the operation lists all custom tape pools.</p> <p>This operation supports pagination. You can optionally specify the <code>Limit</code> parameter in the body to limit the number of tape pools in the response. If the number of tape pools returned in the response is truncated, the response includes a <code>Marker</code> element that you can use in your subsequent request to retrieve the next set of tape pools.</p>
		/// ListTapePools #X-Amz-Target=StorageGateway_20130630.ListTapePools
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTapePoolsOutput> ListTapePoolsAsync(string Limit, string Marker, ListTapePoolsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.ListTapePools?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTapePoolsOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Lists virtual tapes in your virtual tape library (VTL) and your virtual tape shelf (VTS). You specify the tapes to list by specifying one or more tape Amazon Resource Names (ARNs). If you don't specify a tape ARN, the operation lists all virtual tapes in both your VTL and VTS.</p> <p>This operation supports pagination. By default, the operation returns a maximum of up to 100 tapes. You can optionally specify the <code>Limit</code> parameter in the body to limit the number of tapes in the response. If the number of tapes returned in the response is truncated, the response includes a <code>Marker</code> element that you can use in your subsequent request to retrieve the next set of tapes. This operation is only supported in the tape gateway type.</p>
		/// ListTapes #X-Amz-Target=StorageGateway_20130630.ListTapes
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTapesOutput> ListTapesAsync(string Limit, string Marker, ListTapesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.ListTapes?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTapesOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists iSCSI initiators that are connected to a volume. You can use this operation to determine whether a volume is being used or not. This operation is only supported in the cached volume and stored volume gateway types.
		/// ListVolumeInitiators #X-Amz-Target=StorageGateway_20130630.ListVolumeInitiators
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListVolumeInitiatorsOutput> ListVolumeInitiatorsAsync(ListVolumeInitiatorsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.ListVolumeInitiators";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListVolumeInitiatorsOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Lists the recovery points for a specified gateway. This operation is only supported in the cached volume gateway type.</p> <p>Each cache volume has one recovery point. A volume recovery point is a point in time at which all data of the volume is consistent and from which you can create a snapshot or clone a new cached volume from a source volume. To create a snapshot from a volume recovery point use the <a>CreateSnapshotFromVolumeRecoveryPoint</a> operation.</p>
		/// ListVolumeRecoveryPoints #X-Amz-Target=StorageGateway_20130630.ListVolumeRecoveryPoints
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListVolumeRecoveryPointsOutput> ListVolumeRecoveryPointsAsync(ListVolumeRecoveryPointsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.ListVolumeRecoveryPoints";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListVolumeRecoveryPointsOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Lists the iSCSI stored volumes of a gateway. Results are sorted by volume ARN. The response includes only the volume ARNs. If you want additional volume information, use the <a>DescribeStorediSCSIVolumes</a> or the <a>DescribeCachediSCSIVolumes</a> API.</p> <p>The operation supports pagination. By default, the operation returns a maximum of up to 100 volumes. You can optionally specify the <code>Limit</code> field in the body to limit the number of volumes in the response. If the number of volumes returned in the response is truncated, the response includes a Marker field. You can use this Marker value in your subsequent request to retrieve the next set of volumes. This operation is only supported in the cached volume and stored volume gateway types.</p>
		/// ListVolumes #X-Amz-Target=StorageGateway_20130630.ListVolumes
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListVolumesOutput> ListVolumesAsync(string Limit, string Marker, ListVolumesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.ListVolumes?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListVolumesOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Sends you notification through CloudWatch Events when all files written to your file share have been uploaded to S3. Amazon S3.</p> <p>Storage Gateway can send a notification through Amazon CloudWatch Events when all files written to your file share up to that point in time have been uploaded to Amazon S3. These files include files written to the file share up to the time that you make a request for notification. When the upload is done, Storage Gateway sends you notification through an Amazon CloudWatch Event. You can configure CloudWatch Events to send the notification through event targets such as Amazon SNS or Lambda function. This operation is only supported for S3 File Gateways.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/storagegateway/latest/userguide/monitoring-file-gateway.html#get-upload-notification">Getting file upload notification</a> in the <i>Storage Gateway User Guide</i>.</p>
		/// NotifyWhenUploaded #X-Amz-Target=StorageGateway_20130630.NotifyWhenUploaded
		/// </summary>
		/// <returns>Success</returns>
		public async Task<NotifyWhenUploadedOutput> NotifyWhenUploadedAsync(NotifyWhenUploadedInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.NotifyWhenUploaded";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<NotifyWhenUploadedOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Refreshes the cached inventory of objects for the specified file share. This operation finds objects in the Amazon S3 bucket that were added, removed, or replaced since the gateway last listed the bucket's contents and cached the results. This operation does not import files into the S3 File Gateway cache storage. It only updates the cached inventory to reflect changes in the inventory of the objects in the S3 bucket. This operation is only supported in the S3 File Gateway types.</p> <p>You can subscribe to be notified through an Amazon CloudWatch event when your <code>RefreshCache</code> operation completes. For more information, see <a href="https://docs.aws.amazon.com/storagegateway/latest/userguide/monitoring-file-gateway.html#get-notification">Getting notified about file operations</a> in the <i>Storage Gateway User Guide</i>. This operation is Only supported for S3 File Gateways.</p> <p>When this API is called, it only initiates the refresh operation. When the API call completes and returns a success code, it doesn't necessarily mean that the file refresh has completed. You should use the refresh-complete notification to determine that the operation has completed before you check for new files on the gateway file share. You can subscribe to be notified through a CloudWatch event when your <code>RefreshCache</code> operation completes.</p> <p>Throttle limit: This API is asynchronous, so the gateway will accept no more than two refreshes at any time. We recommend using the refresh-complete CloudWatch event notification before issuing additional requests. For more information, see <a href="https://docs.aws.amazon.com/storagegateway/latest/userguide/monitoring-file-gateway.html#get-notification">Getting notified about file operations</a> in the <i>Storage Gateway User Guide</i>.</p> <important> <ul> <li> <p>Wait at least 60 seconds between consecutive RefreshCache API requests.</p> </li> <li> <p>RefreshCache does not evict cache entries if invoked consecutively within 60 seconds of a previous RefreshCache request.</p> </li> <li> <p>If you invoke the RefreshCache API when two requests are already being processed, any new request will cause an <code>InvalidGatewayRequestException</code> error because too many requests were sent to the server.</p> </li> </ul> </important> <note> <p>The S3 bucket name does not need to be included when entering the list of folders in the FolderList parameter.</p> </note> <p>For more information, see <a href="https://docs.aws.amazon.com/storagegateway/latest/userguide/monitoring-file-gateway.html#get-notification">Getting notified about file operations</a> in the <i>Storage Gateway User Guide</i>.</p>
		/// RefreshCache #X-Amz-Target=StorageGateway_20130630.RefreshCache
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RefreshCacheOutput> RefreshCacheAsync(RefreshCacheInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.RefreshCache";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RefreshCacheOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes one or more tags from the specified resource. This operation is supported in storage gateways of all types.
		/// RemoveTagsFromResource #X-Amz-Target=StorageGateway_20130630.RemoveTagsFromResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RemoveTagsFromResourceOutput> RemoveTagsFromResourceAsync(RemoveTagsFromResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.RemoveTagsFromResource";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RemoveTagsFromResourceOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Resets all cache disks that have encountered an error and makes the disks available for reconfiguration as cache storage. If your cache disk encounters an error, the gateway prevents read and write operations on virtual tapes in the gateway. For example, an error can occur when a disk is corrupted or removed from the gateway. When a cache is reset, the gateway loses its cache storage. At this point, you can reconfigure the disks as cache disks. This operation is only supported in the cached volume and tape types.</p> <important> <p>If the cache disk you are resetting contains data that has not been uploaded to Amazon S3 yet, that data can be lost. After you reset cache disks, there will be no configured cache disks left in the gateway, so you must configure at least one new cache disk for your gateway to function properly.</p> </important>
		/// ResetCache #X-Amz-Target=StorageGateway_20130630.ResetCache
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ResetCacheOutput> ResetCacheAsync(ResetCacheInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.ResetCache";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ResetCacheOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Retrieves an archived virtual tape from the virtual tape shelf (VTS) to a tape gateway. Virtual tapes archived in the VTS are not associated with any gateway. However after a tape is retrieved, it is associated with a gateway, even though it is also listed in the VTS, that is, archive. This operation is only supported in the tape gateway type.</p> <p>Once a tape is successfully retrieved to a gateway, it cannot be retrieved again to another gateway. You must archive the tape again before you can retrieve it to another gateway. This operation is only supported in the tape gateway type.</p>
		/// RetrieveTapeArchive #X-Amz-Target=StorageGateway_20130630.RetrieveTapeArchive
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RetrieveTapeArchiveOutput> RetrieveTapeArchiveAsync(RetrieveTapeArchiveInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.RetrieveTapeArchive";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RetrieveTapeArchiveOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Retrieves the recovery point for the specified virtual tape. This operation is only supported in the tape gateway type.</p> <p>A recovery point is a point in time view of a virtual tape at which all the data on the tape is consistent. If your gateway crashes, virtual tapes that have recovery points can be recovered to a new gateway.</p> <note> <p>The virtual tape can be retrieved to only one gateway. The retrieved tape is read-only. The virtual tape can be retrieved to only a tape gateway. There is no charge for retrieving recovery points.</p> </note>
		/// RetrieveTapeRecoveryPoint #X-Amz-Target=StorageGateway_20130630.RetrieveTapeRecoveryPoint
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RetrieveTapeRecoveryPointOutput> RetrieveTapeRecoveryPointAsync(RetrieveTapeRecoveryPointInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.RetrieveTapeRecoveryPoint";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RetrieveTapeRecoveryPointOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sets the password for your VM local console. When you log in to the local console for the first time, you log in to the VM with the default credentials. We recommend that you set a new password. You don't need to know the default password to set a new password.
		/// SetLocalConsolePassword #X-Amz-Target=StorageGateway_20130630.SetLocalConsolePassword
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SetLocalConsolePasswordOutput> SetLocalConsolePasswordAsync(SetLocalConsolePasswordInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.SetLocalConsolePassword";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SetLocalConsolePasswordOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sets the password for the guest user <code>smbguest</code>. The <code>smbguest</code> user is the user when the authentication method for the file share is set to <code>GuestAccess</code>. This operation only supported for S3 File Gateways
		/// SetSMBGuestPassword #X-Amz-Target=StorageGateway_20130630.SetSMBGuestPassword
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SetSMBGuestPasswordOutput> SetSMBGuestPasswordAsync(SetSMBGuestPasswordInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.SetSMBGuestPassword";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SetSMBGuestPasswordOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Shuts down a gateway. To specify which gateway to shut down, use the Amazon Resource Name (ARN) of the gateway in the body of your request.</p> <p>The operation shuts down the gateway service component running in the gateway's virtual machine (VM) and not the host VM.</p> <note> <p>If you want to shut down the VM, it is recommended that you first shut down the gateway component in the VM to avoid unpredictable conditions.</p> </note> <p>After the gateway is shutdown, you cannot call any other API except <a>StartGateway</a>, <a>DescribeGatewayInformation</a>, and <a>ListGateways</a>. For more information, see <a>ActivateGateway</a>. Your applications cannot read from or write to the gateway's storage volumes, and there are no snapshots taken.</p> <note> <p>When you make a shutdown request, you will get a <code>200 OK</code> success response immediately. However, it might take some time for the gateway to shut down. You can call the <a>DescribeGatewayInformation</a> API to check the status. For more information, see <a>ActivateGateway</a>.</p> </note> <p>If do not intend to use the gateway again, you must delete the gateway (using <a>DeleteGateway</a>) to no longer pay software charges associated with the gateway.</p>
		/// ShutdownGateway #X-Amz-Target=StorageGateway_20130630.ShutdownGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ShutdownGatewayOutput> ShutdownGatewayAsync(ShutdownGatewayInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.ShutdownGateway";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ShutdownGatewayOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Start a test that verifies that the specified gateway is configured for High Availability monitoring in your host environment. This request only initiates the test and that a successful response only indicates that the test was started. It doesn't indicate that the test passed. For the status of the test, invoke the <code>DescribeAvailabilityMonitorTest</code> API.</p> <note> <p>Starting this test will cause your gateway to go offline for a brief period.</p> </note>
		/// StartAvailabilityMonitorTest #X-Amz-Target=StorageGateway_20130630.StartAvailabilityMonitorTest
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartAvailabilityMonitorTestOutput> StartAvailabilityMonitorTestAsync(StartAvailabilityMonitorTestInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.StartAvailabilityMonitorTest";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartAvailabilityMonitorTestOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Starts a gateway that you previously shut down (see <a>ShutdownGateway</a>). After the gateway starts, you can then make other API calls, your applications can read from or write to the gateway's storage volumes and you will be able to take snapshot backups.</p> <note> <p>When you make a request, you will get a 200 OK success response immediately. However, it might take some time for the gateway to be ready. You should call <a>DescribeGatewayInformation</a> and check the status before making any additional API calls. For more information, see <a>ActivateGateway</a>.</p> </note> <p>To specify which gateway to start, use the Amazon Resource Name (ARN) of the gateway in your request.</p>
		/// StartGateway #X-Amz-Target=StorageGateway_20130630.StartGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartGatewayOutput> StartGatewayAsync(StartGatewayInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.StartGateway";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartGatewayOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Updates the automatic tape creation policy of a gateway. Use this to update the policy with a new set of automatic tape creation rules. This is only supported for tape gateways.</p> <p>By default, there is no automatic tape creation policy.</p> <note> <p>A gateway can have only one automatic tape creation policy.</p> </note>
		/// UpdateAutomaticTapeCreationPolicy #X-Amz-Target=StorageGateway_20130630.UpdateAutomaticTapeCreationPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateAutomaticTapeCreationPolicyOutput> UpdateAutomaticTapeCreationPolicyAsync(UpdateAutomaticTapeCreationPolicyInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.UpdateAutomaticTapeCreationPolicy";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateAutomaticTapeCreationPolicyOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Updates the bandwidth rate limits of a gateway. You can update both the upload and download bandwidth rate limit or specify only one of the two. If you don't set a bandwidth rate limit, the existing rate limit remains. This operation is supported only for the stored volume, cached volume, and tape gateway types. To update bandwidth rate limits for S3 file gateways, use <a>UpdateBandwidthRateLimitSchedule</a>.</p> <p>By default, a gateway's bandwidth rate limits are not set. If you don't set any limit, the gateway does not have any limitations on its bandwidth usage and could potentially use the maximum available bandwidth.</p> <p>To specify which gateway to update, use the Amazon Resource Name (ARN) of the gateway in your request.</p>
		/// UpdateBandwidthRateLimit #X-Amz-Target=StorageGateway_20130630.UpdateBandwidthRateLimit
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateBandwidthRateLimitOutput> UpdateBandwidthRateLimitAsync(UpdateBandwidthRateLimitInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.UpdateBandwidthRateLimit";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateBandwidthRateLimitOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the bandwidth rate limit schedule for a specified gateway. By default, gateways do not have bandwidth rate limit schedules, which means no bandwidth rate limiting is in effect. Use this to initiate or update a gateway's bandwidth rate limit schedule. This operation is supported only for volume, tape and S3 file gateways. FSx file gateways do not support bandwidth rate limits.
		/// UpdateBandwidthRateLimitSchedule #X-Amz-Target=StorageGateway_20130630.UpdateBandwidthRateLimitSchedule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateBandwidthRateLimitScheduleOutput> UpdateBandwidthRateLimitScheduleAsync(UpdateBandwidthRateLimitScheduleInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.UpdateBandwidthRateLimitSchedule";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateBandwidthRateLimitScheduleOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Updates the Challenge-Handshake Authentication Protocol (CHAP) credentials for a specified iSCSI target. By default, a gateway does not have CHAP enabled; however, for added security, you might use it. This operation is supported in the volume and tape gateway types.</p> <important> <p>When you update CHAP credentials, all existing connections on the target are closed and initiators must reconnect with the new credentials.</p> </important>
		/// UpdateChapCredentials #X-Amz-Target=StorageGateway_20130630.UpdateChapCredentials
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateChapCredentialsOutput> UpdateChapCredentialsAsync(UpdateChapCredentialsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.UpdateChapCredentials";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateChapCredentialsOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a file system association. This operation is only supported in the FSx File Gateways.
		/// UpdateFileSystemAssociation #X-Amz-Target=StorageGateway_20130630.UpdateFileSystemAssociation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateFileSystemAssociationOutput> UpdateFileSystemAssociationAsync(UpdateFileSystemAssociationInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.UpdateFileSystemAssociation";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateFileSystemAssociationOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Updates a gateway's metadata, which includes the gateway's name and time zone. To specify which gateway to update, use the Amazon Resource Name (ARN) of the gateway in your request.</p> <note> <p>For gateways activated after September 2, 2015, the gateway's ARN contains the gateway ID rather than the gateway name. However, changing the name of the gateway has no effect on the gateway's ARN.</p> </note>
		/// UpdateGatewayInformation #X-Amz-Target=StorageGateway_20130630.UpdateGatewayInformation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateGatewayInformationOutput> UpdateGatewayInformationAsync(UpdateGatewayInformationInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.UpdateGatewayInformation";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateGatewayInformationOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Updates the gateway virtual machine (VM) software. The request immediately triggers the software update.</p> <note> <p>When you make this request, you get a <code>200 OK</code> success response immediately. However, it might take some time for the update to complete. You can call <a>DescribeGatewayInformation</a> to verify the gateway is in the <code>STATE_RUNNING</code> state.</p> </note> <important> <p>A software update forces a system restart of your gateway. You can minimize the chance of any disruption to your applications by increasing your iSCSI Initiators' timeouts. For more information about increasing iSCSI Initiator timeouts for Windows and Linux, see <a href="https://docs.aws.amazon.com/storagegateway/latest/userguide/ConfiguringiSCSIClientInitiatorWindowsClient.html#CustomizeWindowsiSCSISettings">Customizing your Windows iSCSI settings</a> and <a href="https://docs.aws.amazon.com/storagegateway/latest/userguide/ConfiguringiSCSIClientInitiatorRedHatClient.html#CustomizeLinuxiSCSISettings">Customizing your Linux iSCSI settings</a>, respectively.</p> </important>
		/// UpdateGatewaySoftwareNow #X-Amz-Target=StorageGateway_20130630.UpdateGatewaySoftwareNow
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateGatewaySoftwareNowOutput> UpdateGatewaySoftwareNowAsync(UpdateGatewaySoftwareNowInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.UpdateGatewaySoftwareNow";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateGatewaySoftwareNowOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a gateway's weekly maintenance start time information, including day and time of the week. The maintenance time is the time in your gateway's time zone.
		/// UpdateMaintenanceStartTime #X-Amz-Target=StorageGateway_20130630.UpdateMaintenanceStartTime
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateMaintenanceStartTimeOutput> UpdateMaintenanceStartTimeAsync(UpdateMaintenanceStartTimeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.UpdateMaintenanceStartTime";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateMaintenanceStartTimeOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Updates a Network File System (NFS) file share. This operation is only supported in S3 File Gateways.</p> <note> <p>To leave a file share field unchanged, set the corresponding input field to null.</p> </note> <p>Updates the following file share settings:</p> <ul> <li> <p>Default storage class for your S3 bucket</p> </li> <li> <p>Metadata defaults for your S3 bucket</p> </li> <li> <p>Allowed NFS clients for your file share</p> </li> <li> <p>Squash settings</p> </li> <li> <p>Write status of your file share</p> </li> </ul>
		/// UpdateNFSFileShare #X-Amz-Target=StorageGateway_20130630.UpdateNFSFileShare
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateNFSFileShareOutput> UpdateNFSFileShareAsync(UpdateNFSFileShareInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.UpdateNFSFileShare";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateNFSFileShareOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Updates a Server Message Block (SMB) file share. This operation is only supported for S3 File Gateways.</p> <note> <p>To leave a file share field unchanged, set the corresponding input field to null.</p> </note> <important> <p>File gateways require Security Token Service (Amazon Web Services STS) to be activated to enable you to create a file share. Make sure that Amazon Web Services STS is activated in the Amazon Web Services Region you are creating your file gateway in. If Amazon Web Services STS is not activated in this Amazon Web Services Region, activate it. For information about how to activate Amazon Web Services STS, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and deactivating Amazon Web Services STS in an Amazon Web Services Region</a> in the <i>Identity and Access Management User Guide</i>.</p> <p>File gateways don't support creating hard or symbolic links on a file share.</p> </important>
		/// UpdateSMBFileShare #X-Amz-Target=StorageGateway_20130630.UpdateSMBFileShare
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateSMBFileShareOutput> UpdateSMBFileShareAsync(UpdateSMBFileShareInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.UpdateSMBFileShare";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateSMBFileShareOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Controls whether the shares on an S3 File Gateway are visible in a net view or browse list. The operation is only supported for S3 File Gateways.
		/// UpdateSMBFileShareVisibility #X-Amz-Target=StorageGateway_20130630.UpdateSMBFileShareVisibility
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateSMBFileShareVisibilityOutput> UpdateSMBFileShareVisibilityAsync(UpdateSMBFileShareVisibilityInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.UpdateSMBFileShareVisibility";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateSMBFileShareVisibilityOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the list of Active Directory users and groups that have special permissions for SMB file shares on the gateway.
		/// UpdateSMBLocalGroups #X-Amz-Target=StorageGateway_20130630.UpdateSMBLocalGroups
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateSMBLocalGroupsOutput> UpdateSMBLocalGroupsAsync(UpdateSMBLocalGroupsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.UpdateSMBLocalGroups";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateSMBLocalGroupsOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Updates the SMB security strategy on a file gateway. This action is only supported in file gateways.</p> <note> <p>This API is called Security level in the User Guide.</p> <p>A higher security level can affect performance of the gateway.</p> </note>
		/// UpdateSMBSecurityStrategy #X-Amz-Target=StorageGateway_20130630.UpdateSMBSecurityStrategy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateSMBSecurityStrategyOutput> UpdateSMBSecurityStrategyAsync(UpdateSMBSecurityStrategyInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.UpdateSMBSecurityStrategy";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateSMBSecurityStrategyOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Updates a snapshot schedule configured for a gateway volume. This operation is only supported in the cached volume and stored volume gateway types.</p> <p>The default snapshot schedule for volume is once every 24 hours, starting at the creation time of the volume. You can use this API to change the snapshot schedule configured for the volume.</p> <p>In the request you must identify the gateway volume whose snapshot schedule you want to update, and the schedule information, including when you want the snapshot to begin on a day and the frequency (in hours) of snapshots.</p>
		/// UpdateSnapshotSchedule #X-Amz-Target=StorageGateway_20130630.UpdateSnapshotSchedule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateSnapshotScheduleOutput> UpdateSnapshotScheduleAsync(UpdateSnapshotScheduleInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.UpdateSnapshotSchedule";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateSnapshotScheduleOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the type of medium changer in a tape gateway. When you activate a tape gateway, you select a medium changer type for the tape gateway. This operation enables you to select a different type of medium changer after a tape gateway is activated. This operation is only supported in the tape gateway type.
		/// UpdateVTLDeviceType #X-Amz-Target=StorageGateway_20130630.UpdateVTLDeviceType
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateVTLDeviceTypeOutput> UpdateVTLDeviceTypeAsync(UpdateVTLDeviceTypeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StorageGateway_20130630.UpdateVTLDeviceType";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateVTLDeviceTypeOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum ActivateGatewayX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.ActivateGateway")]
		StorageGateway_20130630_ActivateGateway = 0,
	}
	
	public enum AddCacheX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.AddCache")]
		StorageGateway_20130630_AddCache = 0,
	}
	
	public enum AddTagsToResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.AddTagsToResource")]
		StorageGateway_20130630_AddTagsToResource = 0,
	}
	
	public enum AddUploadBufferX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.AddUploadBuffer")]
		StorageGateway_20130630_AddUploadBuffer = 0,
	}
	
	public enum AddWorkingStorageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.AddWorkingStorage")]
		StorageGateway_20130630_AddWorkingStorage = 0,
	}
	
	public enum AssignTapePoolX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.AssignTapePool")]
		StorageGateway_20130630_AssignTapePool = 0,
	}
	
	public enum AssociateFileSystemX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.AssociateFileSystem")]
		StorageGateway_20130630_AssociateFileSystem = 0,
	}
	
	public enum AttachVolumeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.AttachVolume")]
		StorageGateway_20130630_AttachVolume = 0,
	}
	
	public enum CancelArchivalX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.CancelArchival")]
		StorageGateway_20130630_CancelArchival = 0,
	}
	
	public enum CancelRetrievalX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.CancelRetrieval")]
		StorageGateway_20130630_CancelRetrieval = 0,
	}
	
	public enum CreateCachediSCSIVolumeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.CreateCachediSCSIVolume")]
		StorageGateway_20130630_CreateCachediSCSIVolume = 0,
	}
	
	public enum CreateNFSFileShareX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.CreateNFSFileShare")]
		StorageGateway_20130630_CreateNFSFileShare = 0,
	}
	
	public enum CreateSMBFileShareX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.CreateSMBFileShare")]
		StorageGateway_20130630_CreateSMBFileShare = 0,
	}
	
	public enum CreateSnapshotX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.CreateSnapshot")]
		StorageGateway_20130630_CreateSnapshot = 0,
	}
	
	public enum CreateSnapshotFromVolumeRecoveryPointX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.CreateSnapshotFromVolumeRecoveryPoint")]
		StorageGateway_20130630_CreateSnapshotFromVolumeRecoveryPoint = 0,
	}
	
	public enum CreateStorediSCSIVolumeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.CreateStorediSCSIVolume")]
		StorageGateway_20130630_CreateStorediSCSIVolume = 0,
	}
	
	public enum CreateTapePoolX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.CreateTapePool")]
		StorageGateway_20130630_CreateTapePool = 0,
	}
	
	public enum CreateTapeWithBarcodeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.CreateTapeWithBarcode")]
		StorageGateway_20130630_CreateTapeWithBarcode = 0,
	}
	
	public enum CreateTapesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.CreateTapes")]
		StorageGateway_20130630_CreateTapes = 0,
	}
	
	public enum DeleteAutomaticTapeCreationPolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DeleteAutomaticTapeCreationPolicy")]
		StorageGateway_20130630_DeleteAutomaticTapeCreationPolicy = 0,
	}
	
	public enum DeleteBandwidthRateLimitX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DeleteBandwidthRateLimit")]
		StorageGateway_20130630_DeleteBandwidthRateLimit = 0,
	}
	
	public enum DeleteChapCredentialsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DeleteChapCredentials")]
		StorageGateway_20130630_DeleteChapCredentials = 0,
	}
	
	public enum DeleteFileShareX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DeleteFileShare")]
		StorageGateway_20130630_DeleteFileShare = 0,
	}
	
	public enum DeleteGatewayX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DeleteGateway")]
		StorageGateway_20130630_DeleteGateway = 0,
	}
	
	public enum DeleteSnapshotScheduleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DeleteSnapshotSchedule")]
		StorageGateway_20130630_DeleteSnapshotSchedule = 0,
	}
	
	public enum DeleteTapeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DeleteTape")]
		StorageGateway_20130630_DeleteTape = 0,
	}
	
	public enum DeleteTapeArchiveX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DeleteTapeArchive")]
		StorageGateway_20130630_DeleteTapeArchive = 0,
	}
	
	public enum DeleteTapePoolX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DeleteTapePool")]
		StorageGateway_20130630_DeleteTapePool = 0,
	}
	
	public enum DeleteVolumeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DeleteVolume")]
		StorageGateway_20130630_DeleteVolume = 0,
	}
	
	public enum DescribeAvailabilityMonitorTestX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DescribeAvailabilityMonitorTest")]
		StorageGateway_20130630_DescribeAvailabilityMonitorTest = 0,
	}
	
	public enum DescribeBandwidthRateLimitX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DescribeBandwidthRateLimit")]
		StorageGateway_20130630_DescribeBandwidthRateLimit = 0,
	}
	
	public enum DescribeBandwidthRateLimitScheduleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DescribeBandwidthRateLimitSchedule")]
		StorageGateway_20130630_DescribeBandwidthRateLimitSchedule = 0,
	}
	
	public enum DescribeCacheX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DescribeCache")]
		StorageGateway_20130630_DescribeCache = 0,
	}
	
	public enum DescribeCachediSCSIVolumesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DescribeCachediSCSIVolumes")]
		StorageGateway_20130630_DescribeCachediSCSIVolumes = 0,
	}
	
	public enum DescribeChapCredentialsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DescribeChapCredentials")]
		StorageGateway_20130630_DescribeChapCredentials = 0,
	}
	
	public enum DescribeFileSystemAssociationsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DescribeFileSystemAssociations")]
		StorageGateway_20130630_DescribeFileSystemAssociations = 0,
	}
	
	public enum DescribeGatewayInformationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DescribeGatewayInformation")]
		StorageGateway_20130630_DescribeGatewayInformation = 0,
	}
	
	public enum DescribeMaintenanceStartTimeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DescribeMaintenanceStartTime")]
		StorageGateway_20130630_DescribeMaintenanceStartTime = 0,
	}
	
	public enum DescribeNFSFileSharesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DescribeNFSFileShares")]
		StorageGateway_20130630_DescribeNFSFileShares = 0,
	}
	
	public enum DescribeSMBFileSharesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DescribeSMBFileShares")]
		StorageGateway_20130630_DescribeSMBFileShares = 0,
	}
	
	public enum DescribeSMBSettingsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DescribeSMBSettings")]
		StorageGateway_20130630_DescribeSMBSettings = 0,
	}
	
	public enum DescribeSnapshotScheduleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DescribeSnapshotSchedule")]
		StorageGateway_20130630_DescribeSnapshotSchedule = 0,
	}
	
	public enum DescribeStorediSCSIVolumesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DescribeStorediSCSIVolumes")]
		StorageGateway_20130630_DescribeStorediSCSIVolumes = 0,
	}
	
	public enum DescribeTapeArchivesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DescribeTapeArchives")]
		StorageGateway_20130630_DescribeTapeArchives = 0,
	}
	
	public enum DescribeTapeRecoveryPointsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DescribeTapeRecoveryPoints")]
		StorageGateway_20130630_DescribeTapeRecoveryPoints = 0,
	}
	
	public enum DescribeTapesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DescribeTapes")]
		StorageGateway_20130630_DescribeTapes = 0,
	}
	
	public enum DescribeUploadBufferX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DescribeUploadBuffer")]
		StorageGateway_20130630_DescribeUploadBuffer = 0,
	}
	
	public enum DescribeVTLDevicesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DescribeVTLDevices")]
		StorageGateway_20130630_DescribeVTLDevices = 0,
	}
	
	public enum DescribeWorkingStorageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DescribeWorkingStorage")]
		StorageGateway_20130630_DescribeWorkingStorage = 0,
	}
	
	public enum DetachVolumeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DetachVolume")]
		StorageGateway_20130630_DetachVolume = 0,
	}
	
	public enum DisableGatewayX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DisableGateway")]
		StorageGateway_20130630_DisableGateway = 0,
	}
	
	public enum DisassociateFileSystemX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.DisassociateFileSystem")]
		StorageGateway_20130630_DisassociateFileSystem = 0,
	}
	
	public enum JoinDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.JoinDomain")]
		StorageGateway_20130630_JoinDomain = 0,
	}
	
	public enum ListAutomaticTapeCreationPoliciesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.ListAutomaticTapeCreationPolicies")]
		StorageGateway_20130630_ListAutomaticTapeCreationPolicies = 0,
	}
	
	public enum ListFileSharesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.ListFileShares")]
		StorageGateway_20130630_ListFileShares = 0,
	}
	
	public enum ListFileSystemAssociationsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.ListFileSystemAssociations")]
		StorageGateway_20130630_ListFileSystemAssociations = 0,
	}
	
	public enum ListGatewaysX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.ListGateways")]
		StorageGateway_20130630_ListGateways = 0,
	}
	
	public enum ListLocalDisksX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.ListLocalDisks")]
		StorageGateway_20130630_ListLocalDisks = 0,
	}
	
	public enum ListTagsForResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.ListTagsForResource")]
		StorageGateway_20130630_ListTagsForResource = 0,
	}
	
	public enum ListTapePoolsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.ListTapePools")]
		StorageGateway_20130630_ListTapePools = 0,
	}
	
	public enum ListTapesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.ListTapes")]
		StorageGateway_20130630_ListTapes = 0,
	}
	
	public enum ListVolumeInitiatorsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.ListVolumeInitiators")]
		StorageGateway_20130630_ListVolumeInitiators = 0,
	}
	
	public enum ListVolumeRecoveryPointsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.ListVolumeRecoveryPoints")]
		StorageGateway_20130630_ListVolumeRecoveryPoints = 0,
	}
	
	public enum ListVolumesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.ListVolumes")]
		StorageGateway_20130630_ListVolumes = 0,
	}
	
	public enum NotifyWhenUploadedX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.NotifyWhenUploaded")]
		StorageGateway_20130630_NotifyWhenUploaded = 0,
	}
	
	public enum RefreshCacheX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.RefreshCache")]
		StorageGateway_20130630_RefreshCache = 0,
	}
	
	public enum RemoveTagsFromResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.RemoveTagsFromResource")]
		StorageGateway_20130630_RemoveTagsFromResource = 0,
	}
	
	public enum ResetCacheX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.ResetCache")]
		StorageGateway_20130630_ResetCache = 0,
	}
	
	public enum RetrieveTapeArchiveX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.RetrieveTapeArchive")]
		StorageGateway_20130630_RetrieveTapeArchive = 0,
	}
	
	public enum RetrieveTapeRecoveryPointX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.RetrieveTapeRecoveryPoint")]
		StorageGateway_20130630_RetrieveTapeRecoveryPoint = 0,
	}
	
	public enum SetLocalConsolePasswordX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.SetLocalConsolePassword")]
		StorageGateway_20130630_SetLocalConsolePassword = 0,
	}
	
	public enum SetSMBGuestPasswordX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.SetSMBGuestPassword")]
		StorageGateway_20130630_SetSMBGuestPassword = 0,
	}
	
	public enum ShutdownGatewayX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.ShutdownGateway")]
		StorageGateway_20130630_ShutdownGateway = 0,
	}
	
	public enum StartAvailabilityMonitorTestX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.StartAvailabilityMonitorTest")]
		StorageGateway_20130630_StartAvailabilityMonitorTest = 0,
	}
	
	public enum StartGatewayX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.StartGateway")]
		StorageGateway_20130630_StartGateway = 0,
	}
	
	public enum UpdateAutomaticTapeCreationPolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.UpdateAutomaticTapeCreationPolicy")]
		StorageGateway_20130630_UpdateAutomaticTapeCreationPolicy = 0,
	}
	
	public enum UpdateBandwidthRateLimitX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.UpdateBandwidthRateLimit")]
		StorageGateway_20130630_UpdateBandwidthRateLimit = 0,
	}
	
	public enum UpdateBandwidthRateLimitScheduleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.UpdateBandwidthRateLimitSchedule")]
		StorageGateway_20130630_UpdateBandwidthRateLimitSchedule = 0,
	}
	
	public enum UpdateChapCredentialsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.UpdateChapCredentials")]
		StorageGateway_20130630_UpdateChapCredentials = 0,
	}
	
	public enum UpdateFileSystemAssociationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.UpdateFileSystemAssociation")]
		StorageGateway_20130630_UpdateFileSystemAssociation = 0,
	}
	
	public enum UpdateGatewayInformationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.UpdateGatewayInformation")]
		StorageGateway_20130630_UpdateGatewayInformation = 0,
	}
	
	public enum UpdateGatewaySoftwareNowX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.UpdateGatewaySoftwareNow")]
		StorageGateway_20130630_UpdateGatewaySoftwareNow = 0,
	}
	
	public enum UpdateMaintenanceStartTimeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.UpdateMaintenanceStartTime")]
		StorageGateway_20130630_UpdateMaintenanceStartTime = 0,
	}
	
	public enum UpdateNFSFileShareX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.UpdateNFSFileShare")]
		StorageGateway_20130630_UpdateNFSFileShare = 0,
	}
	
	public enum UpdateSMBFileShareX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.UpdateSMBFileShare")]
		StorageGateway_20130630_UpdateSMBFileShare = 0,
	}
	
	public enum UpdateSMBFileShareVisibilityX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.UpdateSMBFileShareVisibility")]
		StorageGateway_20130630_UpdateSMBFileShareVisibility = 0,
	}
	
	public enum UpdateSMBLocalGroupsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.UpdateSMBLocalGroups")]
		StorageGateway_20130630_UpdateSMBLocalGroups = 0,
	}
	
	public enum UpdateSMBSecurityStrategyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.UpdateSMBSecurityStrategy")]
		StorageGateway_20130630_UpdateSMBSecurityStrategy = 0,
	}
	
	public enum UpdateSnapshotScheduleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.UpdateSnapshotSchedule")]
		StorageGateway_20130630_UpdateSnapshotSchedule = 0,
	}
	
	public enum UpdateVTLDeviceTypeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StorageGateway_20130630.UpdateVTLDeviceType")]
		StorageGateway_20130630_UpdateVTLDeviceType = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
