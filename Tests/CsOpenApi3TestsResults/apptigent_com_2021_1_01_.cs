//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputCalculateMinMax
	{
		
		/// <summary>
		/// Colllection of values to calculate
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public double[] Input { get; set; }
		
		/// <summary>
		/// Minimum or Maximum
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(InputCalculateMinMaxType.Minimum)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public InputCalculateMinMaxType Type { get; set; } = InputCalculateMinMaxType.Minimum;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputCalculateMinMaxType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minimum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Maximum = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputCalculateNumber
	{
		
		/// <summary>
		/// Round to number of decimal places
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decimals")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public double Decimals { get; set; }
		
		/// <summary>
		/// Numeric value to calculate
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public double Input { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputCalculateNumbers
	{
		
		/// <summary>
		/// Round to number of decimal places
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decimals")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public double Decimals { get; set; }
		
		/// <summary>
		/// Numeric value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public double Input { get; set; }
		
		/// <summary>
		/// Addend, subtrahend, factor, divisor or radicand
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public double Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputCalculatePower
	{
		
		/// <summary>
		/// Round to number of decimal places
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decimals")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public double Decimals { get; set; }
		
		/// <summary>
		/// Number to raise
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public double Input { get; set; }
		
		/// <summary>
		/// Power
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="power")]
		public double Power { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputCalculateSeries
	{
		
		/// <summary>
		/// Round to number of decimal places
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decimals")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public double Decimals { get; set; }
		
		/// <summary>
		/// Colllection of values to calculate
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public double[] Input { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputCaseConversion
	{
		
		/// <summary>
		/// Case of conversion result
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alphacase")]
		public InputCaseConversionAlphacase Alphacase { get; set; }
		
		/// <summary>
		/// String containing the text to convert
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputCaseConversionAlphacase
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Upper = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lower = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Title = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputCollectionConversion
	{
		
		/// <summary>
		/// Collection containing strings to convert
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string[] Input { get; set; }
		
		/// <summary>
		/// Collection name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputCollectionConversionXML
	{
		
		/// <summary>
		/// Name of child XML node(s)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="child")]
		public string Child { get; set; }
		
		/// <summary>
		/// Collection containing strings to convert
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string[] Input { get; set; }
		
		/// <summary>
		/// Name of root XML node
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="root")]
		public string Root { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputCollectionCount
	{
		
		/// <summary>
		/// Collection of items to count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string[] Input { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputCollectionFilter
	{
		
		/// <summary>
		/// Collection of strings to filter
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string[] Input { get; set; }
		
		/// <summary>
		/// Keywords (separate multiple values with commas)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string Keywords { get; set; }
		
		/// <summary>
		/// Match type
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(InputCollectionFilterMatch.Any)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="match")]
		public InputCollectionFilterMatch Match { get; set; } = InputCollectionFilterMatch.Any;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputCollectionFilterMatch
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Any = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputCollectionModify
	{
		
		/// <summary>
		/// Index position for operation (leave blank to specify end of collection)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public string Index { get; set; }
		
		/// <summary>
		/// Collection of values or objects to modify
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string[] Input { get; set; }
		
		/// <summary>
		/// Item (for multiple items, leave blank and use Items)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item")]
		public string Item { get; set; }
		
		/// <summary>
		/// Items (Collection, for a single item leave blank and use Item)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public string[] Items { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputCollectionReplace
	{
		
		/// <summary>
		/// Ignore case
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(InputCollectionReplaceIgnoreCase._true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ignoreCase")]
		public InputCollectionReplaceIgnoreCase IgnoreCase { get; set; } = InputCollectionReplaceIgnoreCase._true;
		
		/// <summary>
		/// Collection of strings
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string[] Input { get; set; }
		
		/// <summary>
		/// Match value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="match")]
		public string Match { get; set; }
		
		/// <summary>
		/// Replacement value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replacement")]
		public string Replacement { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputCollectionReplaceIgnoreCase
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputCollectionSearch
	{
		
		/// <summary>
		/// Ignore case when performing comparison
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignorecase")]
		public System.Nullable<InputCollectionSearchIgnorecase> Ignorecase { get; set; }
		
		/// <summary>
		/// Collection of strings to search
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string[] Input { get; set; }
		
		/// <summary>
		/// Text to match
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="match")]
		public string Match { get; set; }
		
		/// <summary>
		/// Trim white space from comparison string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trim")]
		public System.Nullable<InputCollectionSearchTrim> Trim { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputCollectionSearchIgnorecase
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputCollectionSearchTrim
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputCollectionSearchNumeric
	{
		
		/// <summary>
		/// Collection of strings to search
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public double[] Input { get; set; }
		
		/// <summary>
		/// Number to match
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="match")]
		public double Match { get; set; }
		
		/// <summary>
		/// Type of number - integer or decimal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<InputCollectionSearchNumericType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputCollectionSearchNumericType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Integer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Decimal = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputCollectionSort
	{
		
		/// <summary>
		/// Collection of strings to sort
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string[] Input { get; set; }
		
		/// <summary>
		/// Sort order
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(InputCollectionSortOrder.Ascending)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public InputCollectionSortOrder Order { get; set; } = InputCollectionSortOrder.Ascending;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputCollectionSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Descending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputCollectionSplit
	{
		
		/// <summary>
		/// Index location to split (leave empty to use Match value)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public string Index { get; set; }
		
		/// <summary>
		/// Collection of items to split
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string[] Input { get; set; }
		
		/// <summary>
		/// String to match (explicit, case-insensitive, leave empty to use Index)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="match")]
		public string Match { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputConvertAngle
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public double Input { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public InputConvertAngleSource Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public InputConvertAngleSource Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputConvertAngleSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Arcminute = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Arcsecond = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Centiradian = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deciradian = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Degree = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gradian = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Microdegree = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Microradian = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Millidegree = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Milliradian = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nanodegree = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nanoradian = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Radian = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Revolution = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputConvertArea
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public double Input { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public InputConvertAreaSource Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public InputConvertAreaSource Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputConvertAreaSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Acre = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hectare = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SquareCentimeter = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SquareDecimeter = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SquareFoot = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SquareInch = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SquareKilometer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SquareMeter = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SquareMicrometer = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SquareMile = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SquareMillimeter = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SquareYard = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputConvertDistance
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public double Input { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public InputConvertDistanceSource Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public InputConvertDistanceSource Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputConvertDistanceSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Centimeter = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Decimeter = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fathom = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Foot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hectometer = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inch = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilometer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LightYear = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Meter = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Micrometer = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mile = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Millimeter = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nanometer = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NauticalMile = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yard = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputConvertDuration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public double Input { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public InputConvertDurationSource Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public InputConvertDurationSource Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputConvertDurationSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hour = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Microsecond = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Millisecond = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minute = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nanosecond = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Second = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Year = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputConvertEnergy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public double Input { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public InputConvertEnergySource Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public InputConvertEnergyTarget Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputConvertEnergySource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BritishThermalUnit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Calorie = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ElectronVolt = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FootPound = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GigawattHour = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Joule = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilocalorie = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilojoule = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KilowattHour = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megajoule = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MegawattHour = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TerawattHour = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Therm (EU)")]
		Therm_EU = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Therm (UK)")]
		Therm_UK = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Therm (US)")]
		Therm_US = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WattHour = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputConvertEnergyTarget
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BritishThermalUnit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Calorie = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ElectronVolt = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FootPound = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GigawattHour = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Joule = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilocalorie = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilojoule = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KilowattHour = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megajoule = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MegawattHour = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TerawattHour = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Therm (EU)")]
		Therm_EU = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Therm (UK)")]
		Therm_UK = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Therm (US)")]
		Therm_US = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WattHour = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputConvertPower
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public double Input { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public InputConvertPowerSource Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public InputConvertPowerSource Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputConvertPowerSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BritishThermalUnitPerHour = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Decawatt = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deciwatt = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ElectricalHorsepower = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Femtowatt = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigawatt = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HydraulicHorsepower = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilowatt = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MechanicalHorsepower = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megawatt = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Microwatt = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Milliwatt = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nanowatt = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Petawatt = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Picowatt = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terawatt = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Watt = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputConvertSpeed
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public double Input { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public InputConvertSpeedSource Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public InputConvertSpeedSource Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputConvertSpeedSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CentimeterPerHour = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CentimeterPerMinute = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CentimeterPerSecond = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DecimeterPerMinute = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DecimeterPerSecond = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FootPerHour = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FootPerMinute = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FootPerSecond = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InchPerHour = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InchPerMinute = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InchPerSecond = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KilometerPerHour = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KilometerPerMinute = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KilometerPerSecond = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Knot = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterPerHour = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterPerMinute = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterPerSecond = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MicrometerPerMinute = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MicrometerPerSecond = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MilePerHour = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MillimeterPerHour = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MillimeterPerMinute = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MillimeterPerSecond = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NanometerPerMinute = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NanometerPerSecond = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YardPerHour = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YardPerMinute = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YardPerSecond = 28,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputConvertTemperature
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public double Input { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public InputConvertTemperatureSource Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public InputConvertTemperatureSource Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputConvertTemperatureSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Celsius = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fahrenheit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Newton = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kelvin = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputConvertVolume
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public double Input { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public InputConvertVolumeSource Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public InputConvertVolumeSource Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputConvertVolumeSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Centiliter = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CubicCentimeter = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CubicDecimeter = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CubicFoot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CubicHectometer = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CubicInch = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CubicKilometer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CubicMeter = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CubicMillimeter = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CubicYard = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deciliter = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ImperialBeerBarrel = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ImperialGallon = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ImperialOunce = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ImperialPint = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kiloliter = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Liter = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Microliter = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Milliliter = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gallon = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cup = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ounce = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pint = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quart = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tablespoon = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Teaspoon = 25,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputConvertWeight
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public double Input { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public InputConvertWeightSource Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public InputConvertWeightTarget Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputConvertWeightSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Centigram = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Decagram = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Decigram = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Grain = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gram = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hectogram = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilogram = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Microgram = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Milligram = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nanogram = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ounce = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pound = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stone = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Solar Mass")]
		Solar_Mass = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Earth Mass")]
		Earth_Mass = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Slug = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Short Ton")]
		Short_Ton = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Long Ton")]
		Long_Ton = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ton = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megaton = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Short Hundredweight")]
		Short_Hundredweight = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Long Hundredweight")]
		Long_Hundredweight = 21,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputConvertWeightTarget
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Centigram = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Decagram = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Decigram = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Grain = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gram = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hectogram = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilogram = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Microgram = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Milligram = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nanogram = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ounce = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pound = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stone = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ton = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputCsvConversionJSON
	{
		
		/// <summary>
		/// Include header row
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="header")]
		public bool Header { get; set; } = true;
		
		/// <summary>
		/// CSV string
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputCurrencyConversion
	{
		
		/// <summary>
		/// Amount to convert
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public double Input { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(InputCurrencyConversionSource.USD)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public InputCurrencyConversionSource Source { get; set; } = InputCurrencyConversionSource.USD;
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public InputCurrencyConversionSource Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputCurrencyConversionSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BGN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHF = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CNY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CZK = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DKK = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EUR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GBP = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HKD = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HRK = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HUF = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDR = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ILS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INR = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISK = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JPY = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KRW = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MXN = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYR = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOK = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NZD = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHP = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLN = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RON = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUB = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SGD = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEK = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THB = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRY = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZAR = 32,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputCurrencyFormat
	{
		
		/// <summary>
		/// Amount to format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public double Input { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public InputCurrencyConversionSource Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputDataQuery
	{
		
		/// <summary>
		/// XML or JSON string
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// XPath or JSONPath query
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputDateTimeConversion
	{
		
		/// <summary>
		/// Display format (defaults to 'yyyy-MM-dd HH:mm:ss')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// Source date and time
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(InputDateTimeConversionSource.GMT_Standard_Time_Minus_GMT_Greenwich_Mean_Time__Dublin_Edinburgh_Lisbon_London)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public InputDateTimeConversionSource Source { get; set; } = InputDateTimeConversionSource.GMT_Standard_Time_Minus_GMT_Greenwich_Mean_Time__Dublin_Edinburgh_Lisbon_London;
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(InputDateTimeConversionTarget.GMT_Standard_Time_Minus_GMT_Greenwich_Mean_Time__Dublin_Edinburgh_Lisbon_London)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public InputDateTimeConversionTarget Target { get; set; } = InputDateTimeConversionTarget.GMT_Standard_Time_Minus_GMT_Greenwich_Mean_Time__Dublin_Edinburgh_Lisbon_London;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputDateTimeConversionSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London")]
		GMT_Standard_Time_Minus_GMT_Greenwich_Mean_Time__Dublin_Edinburgh_Lisbon_London = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Greenwich Standard Time - (GMT) Monrovia, Reykjavik")]
		Greenwich_Standard_Time_Minus_GMT_Monrovia_Reykjavik = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="W. Europe Standard Time - (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna")]
		W__Europe_Standard_Time_Minus_GMTPlus0100_Amsterdam_Berlin_Bern_Rome_Stockholm_Vienna = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Central Europe Standard Time - (GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague")]
		Central_Europe_Standard_Time_Minus_GMTPlus0100_Belgrade_Bratislava_Budapest_Ljubljana_Prague = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Central European Standard Time - (GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb")]
		Central_European_Standard_Time_Minus_GMTPlus0100_Sarajevo_Skopje_Warsaw_Zagreb = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="W. Central Africa Standard Time - (GMT+01:00) West Central Africa")]
		W__Central_Africa_Standard_Time_Minus_GMTPlus0100_West_Central_Africa = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GTB Standard Time - (GMT+02:00) Athens, Bucharest, Istanbul")]
		GTB_Standard_Time_Minus_GMTPlus0200_Athens_Bucharest_Istanbul = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Middle East Standard Time - (GMT+02:00) Beirut")]
		Middle_East_Standard_Time_Minus_GMTPlus0200_Beirut = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Egypt Standard Time - (GMT+02:00) Cairo")]
		Egypt_Standard_Time_Minus_GMTPlus0200_Cairo = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="South Africa Standard Time - (GMT+02:00) Harare, Pretoria")]
		South_Africa_Standard_Time_Minus_GMTPlus0200_Harare_Pretoria = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FLE Standard Time - (GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius")]
		FLE_Standard_Time_Minus_GMTPlus0200_Helsinki_Kyiv_Riga_Sofia_Tallinn_Vilnius = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Israel Standard Time - (GMT+02:00) Jerusalem")]
		Israel_Standard_Time_Minus_GMTPlus0200_Jerusalem = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="E. Europe Standard Time - (GMT+02:00) Minsk")]
		E__Europe_Standard_Time_Minus_GMTPlus0200_Minsk = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Namibia Standard Time - (GMT+02:00) Windhoek")]
		Namibia_Standard_Time_Minus_GMTPlus0200_Windhoek = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Arabic Standard Time - (GMT+03:00) Baghdad")]
		Arabic_Standard_Time_Minus_GMTPlus0300_Baghdad = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Arab Standard Time - (GMT+03:00) Kuwait, Riyadh")]
		Arab_Standard_Time_Minus_GMTPlus0300_Kuwait_Riyadh = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Russian Standard Time - (GMT+03:00) Moscow, St. Petersburg, Volgograd")]
		Russian_Standard_Time_Minus_GMTPlus0300_Moscow_St__Petersburg_Volgograd = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="E. Africa Standard Time - (GMT+03:00) Nairobi")]
		E__Africa_Standard_Time_Minus_GMTPlus0300_Nairobi = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Georgian Standard Time - (GMT+03:00) Tbilisi")]
		Georgian_Standard_Time_Minus_GMTPlus0300_Tbilisi = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Iran Standard Time - (GMT+03:30) Tehran")]
		Iran_Standard_Time_Minus_GMTPlus0330_Tehran = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Arabian Standard Time - (GMT+04:00) Abu Dhabi, Muscat")]
		Arabian_Standard_Time_Minus_GMTPlus0400_Abu_Dhabi_Muscat = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Azerbaijan Standard Time - (GMT+04:00) Baku")]
		Azerbaijan_Standard_Time_Minus_GMTPlus0400_Baku = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mauritius Standard Time - (GMT+04:00) Port Louis")]
		Mauritius_Standard_Time_Minus_GMTPlus0400_Port_Louis = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Caucasus Standard Time - (GMT+04:00) Yerevan")]
		Caucasus_Standard_Time_Minus_GMTPlus0400_Yerevan = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Afghanistan Standard Time - (GMT+04:30) Kabul")]
		Afghanistan_Standard_Time_Minus_GMTPlus0430_Kabul = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Ekaterinburg Standard Time - (GMT+05:00) Ekaterinburg")]
		Ekaterinburg_Standard_Time_Minus_GMTPlus0500_Ekaterinburg = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pakistan Standard Time - (GMT+05:00) Islamabad, Karachi")]
		Pakistan_Standard_Time_Minus_GMTPlus0500_Islamabad_Karachi = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="West Asia Standard Time - (GMT+05:00) Tashkent")]
		West_Asia_Standard_Time_Minus_GMTPlus0500_Tashkent = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="India Standard Time - (GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi")]
		India_Standard_Time_Minus_GMTPlus0530_Chennai_Kolkata_Mumbai_New_Delhi = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sri Lanka Standard Time - (GMT+05:30) Sri Jayawardenepura")]
		Sri_Lanka_Standard_Time_Minus_GMTPlus0530_Sri_Jayawardenepura = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nepal Standard Time - (GMT+05:45) Kathmandu")]
		Nepal_Standard_Time_Minus_GMTPlus0545_Kathmandu = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="N. Central Asia Standard Time - (GMT+06:00) Almaty, Novosibirsk")]
		N__Central_Asia_Standard_Time_Minus_GMTPlus0600_Almaty_Novosibirsk = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Central Asia Standard Time - (GMT+06:00) Astana, Dhaka")]
		Central_Asia_Standard_Time_Minus_GMTPlus0600_Astana_Dhaka = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Myanmar Standard Time - (GMT+06:30) Yangon (Rangoon)")]
		Myanmar_Standard_Time_Minus_GMTPlus0630_Yangon_Rangoon = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SE Asia Standard Time - (GMT+07:00) Bangkok, Hanoi, Jakarta")]
		SE_Asia_Standard_Time_Minus_GMTPlus0700_Bangkok_Hanoi_Jakarta = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="North Asia Standard Time - (GMT+07:00) Krasnoyarsk")]
		North_Asia_Standard_Time_Minus_GMTPlus0700_Krasnoyarsk = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="China Standard Time - (GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi")]
		China_Standard_Time_Minus_GMTPlus0800_Beijing_Chongqing_Hong_Kong_Urumqi = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="North Asia East Standard Time - (GMT+08:00) Irkutsk, Ulaan Bataar")]
		North_Asia_East_Standard_Time_Minus_GMTPlus0800_Irkutsk_Ulaan_Bataar = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Singapore Standard Time - (GMT+08:00) Kuala Lumpur, Singapore")]
		Singapore_Standard_Time_Minus_GMTPlus0800_Kuala_Lumpur_Singapore = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="W. Australia Standard Time - (GMT+08:00) Perth")]
		W__Australia_Standard_Time_Minus_GMTPlus0800_Perth = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Taipei Standard Time - (GMT+08:00) Taipei")]
		Taipei_Standard_Time_Minus_GMTPlus0800_Taipei = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tokyo Standard Time - (GMT+09:00) Osaka, Sapporo, Tokyo")]
		Tokyo_Standard_Time_Minus_GMTPlus0900_Osaka_Sapporo_Tokyo = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Korea Standard Time - (GMT+09:00) Seoul")]
		Korea_Standard_Time_Minus_GMTPlus0900_Seoul = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Yakutsk Standard Time - (GMT+09:00) Yakutsk")]
		Yakutsk_Standard_Time_Minus_GMTPlus0900_Yakutsk = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cen. Australia Standard Time - (GMT+09:30) Adelaide")]
		Cen__Australia_Standard_Time_Minus_GMTPlus0930_Adelaide = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUS Central Standard Time - (GMT+09:30) Darwin")]
		AUS_Central_Standard_Time_Minus_GMTPlus0930_Darwin = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="E. Australia Standard Time - (GMT+10:00) Brisbane")]
		E__Australia_Standard_Time_Minus_GMTPlus1000_Brisbane = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUS Eastern Standard Time - (GMT+10:00) Canberra, Melbourne, Sydney")]
		AUS_Eastern_Standard_Time_Minus_GMTPlus1000_Canberra_Melbourne_Sydney = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="West Pacific Standard Time - (GMT+10:00) Guam, Port Moresby")]
		West_Pacific_Standard_Time_Minus_GMTPlus1000_Guam_Port_Moresby = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tasmania Standard Time - (GMT+10:00) Hobart")]
		Tasmania_Standard_Time_Minus_GMTPlus1000_Hobart = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Vladivostok Standard Time - (GMT+10:00) Vladivostok")]
		Vladivostok_Standard_Time_Minus_GMTPlus1000_Vladivostok = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Central Pacific Standard Time - (GMT+11:00) Magadan, Solomon Is., New Caledonia")]
		Central_Pacific_Standard_Time_Minus_GMTPlus1100_Magadan_Solomon_Is__New_Caledonia = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="New Zealand Standard Time - (GMT+12:00) Auckland, Wellington")]
		New_Zealand_Standard_Time_Minus_GMTPlus1200_Auckland_Wellington = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Fiji Standard Time - (GMT+12:00) Fiji, Kamchatka, Marshall Is.")]
		Fiji_Standard_Time_Minus_GMTPlus1200_Fiji_Kamchatka_Marshall_Is_ = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tonga Standard Time - (GMT+13:00) Nuku'alofa")]
		Tonga_Standard_Time_Minus_GMTPlus1300_Nuku_alofa = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Azores Standard Time - (GMT-01:00) Azores")]
		Azores_Standard_Time_Minus_GMTMinus0100_Azores = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cape Verde Standard Time - (GMT-01:00) Cape Verde Is.")]
		Cape_Verde_Standard_Time_Minus_GMTMinus0100_Cape_Verde_Is_ = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mid-Atlantic Standard Time - (GMT-02:00) Mid-Atlantic")]
		MidMinusAtlantic_Standard_Time_Minus_GMTMinus0200_MidMinusAtlantic = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="E. South America Standard Time - (GMT-03:00) Brasilia")]
		E__South_America_Standard_Time_Minus_GMTMinus0300_Brasilia = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Argentina Standard Time - (GMT-03:00) Buenos Aires")]
		Argentina_Standard_Time_Minus_GMTMinus0300_Buenos_Aires = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SA Eastern Standard Time - (GMT-03:00) Georgetown")]
		SA_Eastern_Standard_Time_Minus_GMTMinus0300_Georgetown = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Greenland Standard Time - (GMT-03:00) Greenland")]
		Greenland_Standard_Time_Minus_GMTMinus0300_Greenland = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Montevideo Standard Time - (GMT-03:00) Montevideo")]
		Montevideo_Standard_Time_Minus_GMTMinus0300_Montevideo = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Newfoundland Standard Time - (GMT-03:30) Newfoundland")]
		Newfoundland_Standard_Time_Minus_GMTMinus0330_Newfoundland = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Atlantic Standard Time - (GMT-04:00) Atlantic Time (Canada)")]
		Atlantic_Standard_Time_Minus_GMTMinus0400_Atlantic_Time_Canada = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SA Western Standard Time - (GMT-04:00) La Paz")]
		SA_Western_Standard_Time_Minus_GMTMinus0400_La_Paz = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Central Brazilian Standard Time - (GMT-04:00) Manaus")]
		Central_Brazilian_Standard_Time_Minus_GMTMinus0400_Manaus = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific SA Standard Time - (GMT-04:00) Santiago")]
		Pacific_SA_Standard_Time_Minus_GMTMinus0400_Santiago = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Venezuela Standard Time - (GMT-04:30) Caracas")]
		Venezuela_Standard_Time_Minus_GMTMinus0430_Caracas = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SA Pacific Standard Time - (GMT-05:00) Bogota, Lima, Quito, Rio Branco")]
		SA_Pacific_Standard_Time_Minus_GMTMinus0500_Bogota_Lima_Quito_Rio_Branco = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Eastern Standard Time - (GMT-05:00) Eastern Time (US & Canada)")]
		Eastern_Standard_Time_Minus_GMTMinus0500_Eastern_Time_US_And_Canada = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="US Eastern Standard Time - (GMT-05:00) Indiana (East)")]
		US_Eastern_Standard_Time_Minus_GMTMinus0500_Indiana_East = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Central America Standard Time - (GMT-06:00) Central America")]
		Central_America_Standard_Time_Minus_GMTMinus0600_Central_America = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Central Standard Time - (GMT-06:00) Central Time (US & Canada)")]
		Central_Standard_Time_Minus_GMTMinus0600_Central_Time_US_And_Canada = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Central Standard Time (Mexico) - (GMT-06:00) Guadalajara, Mexico City, Monterrey")]
		Central_Standard_Time_Mexico_Minus_GMTMinus0600_Guadalajara_Mexico_City_Monterrey = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Canada Central Standard Time - (GMT-06:00) Saskatchewan")]
		Canada_Central_Standard_Time_Minus_GMTMinus0600_Saskatchewan = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="US Mountain Standard Time - (GMT-07:00) Arizona")]
		US_Mountain_Standard_Time_Minus_GMTMinus0700_Arizona = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mountain Standard Time (Mexico) - (GMT-07:00) Chihuahua, La Paz, Mazatlan")]
		Mountain_Standard_Time_Mexico_Minus_GMTMinus0700_Chihuahua_La_Paz_Mazatlan = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mountain Standard Time - (GMT-07:00) Mountain Time (US & Canada)")]
		Mountain_Standard_Time_Minus_GMTMinus0700_Mountain_Time_US_And_Canada = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific Standard Time - (GMT-08:00) Pacific Time (US & Canada)")]
		Pacific_Standard_Time_Minus_GMTMinus0800_Pacific_Time_US_And_Canada = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific Standard Time (Mexico) - (GMT-08:00) Tijuana, Baja California")]
		Pacific_Standard_Time_Mexico_Minus_GMTMinus0800_Tijuana_Baja_California = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Alaskan Standard Time - (GMT-09:00) Alaska")]
		Alaskan_Standard_Time_Minus_GMTMinus0900_Alaska = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Hawaiian Standard Time - (GMT-10:00) Hawaii")]
		Hawaiian_Standard_Time_Minus_GMTMinus1000_Hawaii = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Samoa Standard Time - (GMT-11:00) Midway Island, Samoa")]
		Samoa_Standard_Time_Minus_GMTMinus1100_Midway_Island_Samoa = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Dateline Standard Time - (GMT-12:00) International Date Line West")]
		Dateline_Standard_Time_Minus_GMTMinus1200_International_Date_Line_West = 84,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputDateTimeConversionTarget
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London")]
		GMT_Standard_Time_Minus_GMT_Greenwich_Mean_Time__Dublin_Edinburgh_Lisbon_London = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Greenwich Standard Time - (GMT) Monrovia, Reykjavik")]
		Greenwich_Standard_Time_Minus_GMT_Monrovia_Reykjavik = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="W. Europe Standard Time - (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna")]
		W__Europe_Standard_Time_Minus_GMTPlus0100_Amsterdam_Berlin_Bern_Rome_Stockholm_Vienna = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Central Europe Standard Time - (GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague")]
		Central_Europe_Standard_Time_Minus_GMTPlus0100_Belgrade_Bratislava_Budapest_Ljubljana_Prague = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Central European Standard Time - (GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb")]
		Central_European_Standard_Time_Minus_GMTPlus0100_Sarajevo_Skopje_Warsaw_Zagreb = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="W. Central Africa Standard Time - (GMT+01:00) West Central Africa")]
		W__Central_Africa_Standard_Time_Minus_GMTPlus0100_West_Central_Africa = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GTB Standard Time - (GMT+02:00) Athens, Bucharest, Istanbul")]
		GTB_Standard_Time_Minus_GMTPlus0200_Athens_Bucharest_Istanbul = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Middle East Standard Time - (GMT+02:00) Beirut")]
		Middle_East_Standard_Time_Minus_GMTPlus0200_Beirut = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Egypt Standard Time - (GMT+02:00) Cairo")]
		Egypt_Standard_Time_Minus_GMTPlus0200_Cairo = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="South Africa Standard Time - (GMT+02:00) Harare, Pretoria")]
		South_Africa_Standard_Time_Minus_GMTPlus0200_Harare_Pretoria = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FLE Standard Time - (GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius")]
		FLE_Standard_Time_Minus_GMTPlus0200_Helsinki_Kyiv_Riga_Sofia_Tallinn_Vilnius = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Israel Standard Time - (GMT+02:00) Jerusalem")]
		Israel_Standard_Time_Minus_GMTPlus0200_Jerusalem = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="E. Europe Standard Time - (GMT+02:00) Minsk")]
		E__Europe_Standard_Time_Minus_GMTPlus0200_Minsk = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Namibia Standard Time - (GMT+02:00) Windhoek")]
		Namibia_Standard_Time_Minus_GMTPlus0200_Windhoek = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Arabic Standard Time - (GMT+03:00) Baghdad")]
		Arabic_Standard_Time_Minus_GMTPlus0300_Baghdad = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Arab Standard Time - (GMT+03:00) Kuwait, Riyadh")]
		Arab_Standard_Time_Minus_GMTPlus0300_Kuwait_Riyadh = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Russian Standard Time - (GMT+03:00) Moscow, St. Petersburg, Volgograd")]
		Russian_Standard_Time_Minus_GMTPlus0300_Moscow_St__Petersburg_Volgograd = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="E. Africa Standard Time - (GMT+03:00) Nairobi")]
		E__Africa_Standard_Time_Minus_GMTPlus0300_Nairobi = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Georgian Standard Time - (GMT+03:00) Tbilisi")]
		Georgian_Standard_Time_Minus_GMTPlus0300_Tbilisi = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Iran Standard Time - (GMT+03:30) Tehran")]
		Iran_Standard_Time_Minus_GMTPlus0330_Tehran = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Arabian Standard Time - (GMT+04:00) Abu Dhabi, Muscat")]
		Arabian_Standard_Time_Minus_GMTPlus0400_Abu_Dhabi_Muscat = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Azerbaijan Standard Time - (GMT+04:00) Baku")]
		Azerbaijan_Standard_Time_Minus_GMTPlus0400_Baku = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mauritius Standard Time - (GMT+04:00) Port Louis")]
		Mauritius_Standard_Time_Minus_GMTPlus0400_Port_Louis = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Caucasus Standard Time - (GMT+04:00) Yerevan")]
		Caucasus_Standard_Time_Minus_GMTPlus0400_Yerevan = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Afghanistan Standard Time - (GMT+04:30) Kabul")]
		Afghanistan_Standard_Time_Minus_GMTPlus0430_Kabul = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Ekaterinburg Standard Time - (GMT+05:00) Ekaterinburg")]
		Ekaterinburg_Standard_Time_Minus_GMTPlus0500_Ekaterinburg = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pakistan Standard Time - (GMT+05:00) Islamabad, Karachi")]
		Pakistan_Standard_Time_Minus_GMTPlus0500_Islamabad_Karachi = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="West Asia Standard Time - (GMT+05:00) Tashkent")]
		West_Asia_Standard_Time_Minus_GMTPlus0500_Tashkent = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="India Standard Time - (GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi")]
		India_Standard_Time_Minus_GMTPlus0530_Chennai_Kolkata_Mumbai_New_Delhi = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sri Lanka Standard Time - (GMT+05:30) Sri Jayawardenepura")]
		Sri_Lanka_Standard_Time_Minus_GMTPlus0530_Sri_Jayawardenepura = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nepal Standard Time - (GMT+05:45) Kathmandu")]
		Nepal_Standard_Time_Minus_GMTPlus0545_Kathmandu = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="N. Central Asia Standard Time - (GMT+06:00) Almaty, Novosibirsk")]
		N__Central_Asia_Standard_Time_Minus_GMTPlus0600_Almaty_Novosibirsk = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Central Asia Standard Time - (GMT+06:00) Astana, Dhaka")]
		Central_Asia_Standard_Time_Minus_GMTPlus0600_Astana_Dhaka = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Myanmar Standard Time - (GMT+06:30) Yangon (Rangoon)")]
		Myanmar_Standard_Time_Minus_GMTPlus0630_Yangon_Rangoon = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SE Asia Standard Time - (GMT+07:00) Bangkok, Hanoi, Jakarta")]
		SE_Asia_Standard_Time_Minus_GMTPlus0700_Bangkok_Hanoi_Jakarta = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="North Asia Standard Time - (GMT+07:00) Krasnoyarsk")]
		North_Asia_Standard_Time_Minus_GMTPlus0700_Krasnoyarsk = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="China Standard Time - (GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi")]
		China_Standard_Time_Minus_GMTPlus0800_Beijing_Chongqing_Hong_Kong_Urumqi = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="North Asia East Standard Time - (GMT+08:00) Irkutsk, Ulaan Bataar")]
		North_Asia_East_Standard_Time_Minus_GMTPlus0800_Irkutsk_Ulaan_Bataar = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Singapore Standard Time - (GMT+08:00) Kuala Lumpur, Singapore")]
		Singapore_Standard_Time_Minus_GMTPlus0800_Kuala_Lumpur_Singapore = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="W. Australia Standard Time - (GMT+08:00) Perth")]
		W__Australia_Standard_Time_Minus_GMTPlus0800_Perth = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Taipei Standard Time - (GMT+08:00) Taipei")]
		Taipei_Standard_Time_Minus_GMTPlus0800_Taipei = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tokyo Standard Time - (GMT+09:00) Osaka, Sapporo, Tokyo")]
		Tokyo_Standard_Time_Minus_GMTPlus0900_Osaka_Sapporo_Tokyo = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Korea Standard Time - (GMT+09:00) Seoul")]
		Korea_Standard_Time_Minus_GMTPlus0900_Seoul = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Yakutsk Standard Time - (GMT+09:00) Yakutsk")]
		Yakutsk_Standard_Time_Minus_GMTPlus0900_Yakutsk = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cen. Australia Standard Time - (GMT+09:30) Adelaide")]
		Cen__Australia_Standard_Time_Minus_GMTPlus0930_Adelaide = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUS Central Standard Time - (GMT+09:30) Darwin")]
		AUS_Central_Standard_Time_Minus_GMTPlus0930_Darwin = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="E. Australia Standard Time - (GMT+10:00) Brisbane")]
		E__Australia_Standard_Time_Minus_GMTPlus1000_Brisbane = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUS Eastern Standard Time - (GMT+10:00) Canberra, Melbourne, Sydney")]
		AUS_Eastern_Standard_Time_Minus_GMTPlus1000_Canberra_Melbourne_Sydney = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="West Pacific Standard Time - (GMT+10:00) Guam, Port Moresby")]
		West_Pacific_Standard_Time_Minus_GMTPlus1000_Guam_Port_Moresby = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tasmania Standard Time - (GMT+10:00) Hobart")]
		Tasmania_Standard_Time_Minus_GMTPlus1000_Hobart = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Vladivostok Standard Time - (GMT+10:00) Vladivostok")]
		Vladivostok_Standard_Time_Minus_GMTPlus1000_Vladivostok = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Central Pacific Standard Time - (GMT+11:00) Magadan, Solomon Is., New Caledonia")]
		Central_Pacific_Standard_Time_Minus_GMTPlus1100_Magadan_Solomon_Is__New_Caledonia = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="New Zealand Standard Time - (GMT+12:00) Auckland, Wellington")]
		New_Zealand_Standard_Time_Minus_GMTPlus1200_Auckland_Wellington = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Fiji Standard Time - (GMT+12:00) Fiji, Kamchatka, Marshall Is.")]
		Fiji_Standard_Time_Minus_GMTPlus1200_Fiji_Kamchatka_Marshall_Is_ = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tonga Standard Time - (GMT+13:00) Nuku'alofa")]
		Tonga_Standard_Time_Minus_GMTPlus1300_Nuku_alofa = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Azores Standard Time - (GMT-01:00) Azores")]
		Azores_Standard_Time_Minus_GMTMinus0100_Azores = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cape Verde Standard Time - (GMT-01:00) Cape Verde Is.")]
		Cape_Verde_Standard_Time_Minus_GMTMinus0100_Cape_Verde_Is_ = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mid-Atlantic Standard Time - (GMT-02:00) Mid-Atlantic")]
		MidMinusAtlantic_Standard_Time_Minus_GMTMinus0200_MidMinusAtlantic = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="E. South America Standard Time - (GMT-03:00) Brasilia")]
		E__South_America_Standard_Time_Minus_GMTMinus0300_Brasilia = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Argentina Standard Time - (GMT-03:00) Buenos Aires")]
		Argentina_Standard_Time_Minus_GMTMinus0300_Buenos_Aires = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SA Eastern Standard Time - (GMT-03:00) Georgetown")]
		SA_Eastern_Standard_Time_Minus_GMTMinus0300_Georgetown = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Greenland Standard Time - (GMT-03:00) Greenland")]
		Greenland_Standard_Time_Minus_GMTMinus0300_Greenland = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Montevideo Standard Time - (GMT-03:00) Montevideo")]
		Montevideo_Standard_Time_Minus_GMTMinus0300_Montevideo = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Newfoundland Standard Time - (GMT-03:30) Newfoundland")]
		Newfoundland_Standard_Time_Minus_GMTMinus0330_Newfoundland = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Atlantic Standard Time - (GMT-04:00) Atlantic Time (Canada)")]
		Atlantic_Standard_Time_Minus_GMTMinus0400_Atlantic_Time_Canada = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SA Western Standard Time - (GMT-04:00) La Paz")]
		SA_Western_Standard_Time_Minus_GMTMinus0400_La_Paz = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Central Brazilian Standard Time - (GMT-04:00) Manaus")]
		Central_Brazilian_Standard_Time_Minus_GMTMinus0400_Manaus = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific SA Standard Time - (GMT-04:00) Santiago")]
		Pacific_SA_Standard_Time_Minus_GMTMinus0400_Santiago = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Venezuela Standard Time - (GMT-04:30) Caracas")]
		Venezuela_Standard_Time_Minus_GMTMinus0430_Caracas = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SA Pacific Standard Time - (GMT-05:00) Bogota, Lima, Quito, Rio Branco")]
		SA_Pacific_Standard_Time_Minus_GMTMinus0500_Bogota_Lima_Quito_Rio_Branco = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Eastern Standard Time - (GMT-05:00) Eastern Time (US & Canada)")]
		Eastern_Standard_Time_Minus_GMTMinus0500_Eastern_Time_US_And_Canada = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="US Eastern Standard Time - (GMT-05:00) Indiana (East)")]
		US_Eastern_Standard_Time_Minus_GMTMinus0500_Indiana_East = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Central America Standard Time - (GMT-06:00) Central America")]
		Central_America_Standard_Time_Minus_GMTMinus0600_Central_America = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Central Standard Time - (GMT-06:00) Central Time (US & Canada)")]
		Central_Standard_Time_Minus_GMTMinus0600_Central_Time_US_And_Canada = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Central Standard Time (Mexico) - (GMT-06:00) Guadalajara, Mexico City, Monterrey")]
		Central_Standard_Time_Mexico_Minus_GMTMinus0600_Guadalajara_Mexico_City_Monterrey = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Canada Central Standard Time - (GMT-06:00) Saskatchewan")]
		Canada_Central_Standard_Time_Minus_GMTMinus0600_Saskatchewan = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="US Mountain Standard Time - (GMT-07:00) Arizona")]
		US_Mountain_Standard_Time_Minus_GMTMinus0700_Arizona = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mountain Standard Time (Mexico) - (GMT-07:00) Chihuahua, La Paz, Mazatlan")]
		Mountain_Standard_Time_Mexico_Minus_GMTMinus0700_Chihuahua_La_Paz_Mazatlan = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mountain Standard Time - (GMT-07:00) Mountain Time (US & Canada)")]
		Mountain_Standard_Time_Minus_GMTMinus0700_Mountain_Time_US_And_Canada = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific Standard Time - (GMT-08:00) Pacific Time (US & Canada)")]
		Pacific_Standard_Time_Minus_GMTMinus0800_Pacific_Time_US_And_Canada = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific Standard Time (Mexico) - (GMT-08:00) Tijuana, Baja California")]
		Pacific_Standard_Time_Mexico_Minus_GMTMinus0800_Tijuana_Baja_California = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Alaskan Standard Time - (GMT-09:00) Alaska")]
		Alaskan_Standard_Time_Minus_GMTMinus0900_Alaska = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Hawaiian Standard Time - (GMT-10:00) Hawaii")]
		Hawaiian_Standard_Time_Minus_GMTMinus1000_Hawaii = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Samoa Standard Time - (GMT-11:00) Midway Island, Samoa")]
		Samoa_Standard_Time_Minus_GMTMinus1100_Midway_Island_Samoa = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Dateline Standard Time - (GMT-12:00) International Date Line West")]
		Dateline_Standard_Time_Minus_GMTMinus1200_International_Date_Line_West = 84,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputDateTimeDifference
	{
		
		/// <summary>
		/// First date/time value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dateTime1")]
		public string DateTime1 { get; set; }
		
		/// <summary>
		/// Second date/time value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dateTime2")]
		public string DateTime2 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputDateTimeFormat
	{
		
		/// <summary>
		/// Language culture
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(InputDateTimeFormatCulture.enMinusUS)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="culture")]
		public InputDateTimeFormatCulture Culture { get; set; } = InputDateTimeFormatCulture.enMinusUS;
		
		/// <summary>
		/// Output format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// Source date and time
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputDateTimeFormatCulture
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US")]
		enMinusUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="af-ZA")]
		afMinusZA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-AE")]
		arMinusAE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-BH")]
		arMinusBH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-DZ")]
		arMinusDZ = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-EG")]
		arMinusEG = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-IQ")]
		arMinusIQ = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-JO")]
		arMinusJO = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-KW")]
		arMinusKW = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-LB")]
		arMinusLB = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-LY")]
		arMinusLY = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-MA")]
		arMinusMA = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-OM")]
		arMinusOM = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-QA")]
		arMinusQA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-SA")]
		arMinusSA = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-SY")]
		arMinusSY = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-TN")]
		arMinusTN = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-YE")]
		arMinusYE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="az-AZ")]
		azMinusAZ = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="be-BY")]
		beMinusBY = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bg-BG")]
		bgMinusBG = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bs-BA")]
		bsMinusBA = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ca-ES")]
		caMinusES = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cs-CZ")]
		csMinusCZ = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cy-GB")]
		cyMinusGB = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="da-DK")]
		daMinusDK = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-AT")]
		deMinusAT = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-CH")]
		deMinusCH = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-DE")]
		deMinusDE = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-LI")]
		deMinusLI = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-LU")]
		deMinusLU = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="el-GR")]
		elMinusGR = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-AU")]
		enMinusAU = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-BZ")]
		enMinusBZ = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-CA")]
		enMinusCA = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-CB")]
		enMinusCB = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB")]
		enMinusGB = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-IE")]
		enMinusIE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-JM")]
		enMinusJM = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-NZ")]
		enMinusNZ = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-PH")]
		enMinusPH = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-TT")]
		enMinusTT = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-ZA")]
		enMinusZA = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-ZW")]
		enMinusZW = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-AR")]
		esMinusAR = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-BO")]
		esMinusBO = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-CL")]
		esMinusCL = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-CO")]
		esMinusCO = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-CR")]
		esMinusCR = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-DO")]
		esMinusDO = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-EC")]
		esMinusEC = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-ES")]
		esMinusES = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-GT")]
		esMinusGT = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-HN")]
		esMinusHN = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-MX")]
		esMinusMX = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-NI")]
		esMinusNI = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-PA")]
		esMinusPA = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-PE")]
		esMinusPE = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-PR")]
		esMinusPR = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-PY")]
		esMinusPY = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-SV")]
		esMinusSV = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-UY")]
		esMinusUY = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-VE")]
		esMinusVE = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="et-EE")]
		etMinusEE = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eu-ES")]
		euMinusES = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fa-IR")]
		faMinusIR = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fi-FI")]
		fiMinusFI = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fo-FO")]
		foMinusFO = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-BE")]
		frMinusBE = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-CA")]
		frMinusCA = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-CH")]
		frMinusCH = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-FR")]
		frMinusFR = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-LU")]
		frMinusLU = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-MC")]
		frMinusMC = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gl-ES")]
		glMinusES = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gu-IN")]
		guMinusIN = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="he-IL")]
		heMinusIL = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hi-IN")]
		hiMinusIN = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hr-BA")]
		hrMinusBA = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hr-HR")]
		hrMinusHR = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hu-HU")]
		huMinusHU = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hy-AM")]
		hyMinusAM = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="id-ID")]
		idMinusID = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="is-IS")]
		isMinusIS = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="it-CH")]
		itMinusCH = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="it-IT")]
		itMinusIT = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ja-JP")]
		jaMinusJP = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ka-GE")]
		kaMinusGE = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kk-KZ")]
		kkMinusKZ = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kn-IN")]
		knMinusIN = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ko-KR")]
		koMinusKR = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ky-KG")]
		kyMinusKG = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lt-LT")]
		ltMinusLT = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lv-LV")]
		lvMinusLV = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mi-NZ")]
		miMinusNZ = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mn-MN")]
		mnMinusMN = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mr-IN")]
		mrMinusIN = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ms-BN")]
		msMinusBN = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ms-MY")]
		msMinusMY = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mt-MT")]
		mtMinusMT = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nl-BE")]
		nlMinusBE = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nl-NL")]
		nlMinusNL = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nn-NO")]
		nnMinusNO = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ns-ZA")]
		nsMinusZA = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pa-IN")]
		paMinusIN = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pl-PL")]
		plMinusPL = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ps-AR")]
		psMinusAR = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-BR")]
		ptMinusBR = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-PT")]
		ptMinusPT = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ro-RO")]
		roMinusRO = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ru-RU")]
		ruMinusRU = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sa-IN")]
		saMinusIN = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sk-SK")]
		skMinusSK = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sl-SI")]
		slMinusSI = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sq-AL")]
		sqMinusAL = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sr-BA")]
		srMinusBA = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sr-SP")]
		srMinusSP = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sv-FI")]
		svMinusFI = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sv-SE")]
		svMinusSE = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sw-KE")]
		swMinusKE = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ta-IN")]
		taMinusIN = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="te-IN")]
		teMinusIN = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="th-TH")]
		thMinusTH = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tl-PH")]
		tlMinusPH = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tn-ZA")]
		tnMinusZA = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tr-TR")]
		trMinusTR = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uk-UA")]
		ukMinusUA = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ur-PK")]
		urMinusPK = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uz-UZ")]
		uzMinusUZ = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vi-VN")]
		viMinusVN = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-CN")]
		zhMinusCN = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-HK")]
		zhMinusHK = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-MO")]
		zhMinusMO = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-SG")]
		zhMinusSG = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-TW")]
		zhMinusTW = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zu-ZA")]
		zuMinusZA = 135,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputDateTimeInfo
	{
		
		/// <summary>
		/// Language culture
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(InputDateTimeInfoCulture.enMinusUS)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="culture")]
		public InputDateTimeInfoCulture Culture { get; set; } = InputDateTimeInfoCulture.enMinusUS;
		
		/// <summary>
		/// Source date and time
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputDateTimeInfoCulture
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US")]
		enMinusUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="af-ZA")]
		afMinusZA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-AE")]
		arMinusAE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-BH")]
		arMinusBH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-DZ")]
		arMinusDZ = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-EG")]
		arMinusEG = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-IQ")]
		arMinusIQ = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-JO")]
		arMinusJO = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-KW")]
		arMinusKW = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-LB")]
		arMinusLB = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-LY")]
		arMinusLY = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-MA")]
		arMinusMA = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-OM")]
		arMinusOM = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-QA")]
		arMinusQA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-SA")]
		arMinusSA = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-SY")]
		arMinusSY = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-TN")]
		arMinusTN = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-YE")]
		arMinusYE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="az-AZ")]
		azMinusAZ = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="be-BY")]
		beMinusBY = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bg-BG")]
		bgMinusBG = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bs-BA")]
		bsMinusBA = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ca-ES")]
		caMinusES = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cs-CZ")]
		csMinusCZ = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cy-GB")]
		cyMinusGB = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="da-DK")]
		daMinusDK = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-AT")]
		deMinusAT = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-CH")]
		deMinusCH = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-DE")]
		deMinusDE = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-LI")]
		deMinusLI = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-LU")]
		deMinusLU = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="el-GR")]
		elMinusGR = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-AU")]
		enMinusAU = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-BZ")]
		enMinusBZ = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-CA")]
		enMinusCA = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-CB")]
		enMinusCB = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB")]
		enMinusGB = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-IE")]
		enMinusIE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-JM")]
		enMinusJM = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-NZ")]
		enMinusNZ = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-PH")]
		enMinusPH = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-TT")]
		enMinusTT = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-ZA")]
		enMinusZA = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-ZW")]
		enMinusZW = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-AR")]
		esMinusAR = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-BO")]
		esMinusBO = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-CL")]
		esMinusCL = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-CO")]
		esMinusCO = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-CR")]
		esMinusCR = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-DO")]
		esMinusDO = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-EC")]
		esMinusEC = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-ES")]
		esMinusES = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-GT")]
		esMinusGT = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-HN")]
		esMinusHN = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-MX")]
		esMinusMX = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-NI")]
		esMinusNI = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-PA")]
		esMinusPA = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-PE")]
		esMinusPE = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-PR")]
		esMinusPR = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-PY")]
		esMinusPY = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-SV")]
		esMinusSV = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-UY")]
		esMinusUY = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-VE")]
		esMinusVE = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="et-EE")]
		etMinusEE = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eu-ES")]
		euMinusES = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fa-IR")]
		faMinusIR = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fi-FI")]
		fiMinusFI = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fo-FO")]
		foMinusFO = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-BE")]
		frMinusBE = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-CA")]
		frMinusCA = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-CH")]
		frMinusCH = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-FR")]
		frMinusFR = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-LU")]
		frMinusLU = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-MC")]
		frMinusMC = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gl-ES")]
		glMinusES = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gu-IN")]
		guMinusIN = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="he-IL")]
		heMinusIL = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hi-IN")]
		hiMinusIN = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hr-BA")]
		hrMinusBA = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hr-HR")]
		hrMinusHR = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hu-HU")]
		huMinusHU = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hy-AM")]
		hyMinusAM = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="id-ID")]
		idMinusID = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="is-IS")]
		isMinusIS = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="it-CH")]
		itMinusCH = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="it-IT")]
		itMinusIT = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ja-JP")]
		jaMinusJP = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ka-GE")]
		kaMinusGE = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kk-KZ")]
		kkMinusKZ = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kn-IN")]
		knMinusIN = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ko-KR")]
		koMinusKR = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ky-KG")]
		kyMinusKG = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lt-LT")]
		ltMinusLT = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lv-LV")]
		lvMinusLV = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mi-NZ")]
		miMinusNZ = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mn-MN")]
		mnMinusMN = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mr-IN")]
		mrMinusIN = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ms-BN")]
		msMinusBN = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ms-MY")]
		msMinusMY = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mt-MT")]
		mtMinusMT = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nl-BE")]
		nlMinusBE = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nl-NL")]
		nlMinusNL = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nn-NO")]
		nnMinusNO = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ns-ZA")]
		nsMinusZA = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pa-IN")]
		paMinusIN = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pl-PL")]
		plMinusPL = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ps-AR")]
		psMinusAR = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-BR")]
		ptMinusBR = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-PT")]
		ptMinusPT = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ro-RO")]
		roMinusRO = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ru-RU")]
		ruMinusRU = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sa-IN")]
		saMinusIN = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sk-SK")]
		skMinusSK = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sl-SI")]
		slMinusSI = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sq-AL")]
		sqMinusAL = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sr-BA")]
		srMinusBA = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sr-SP")]
		srMinusSP = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sv-FI")]
		svMinusFI = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sv-SE")]
		svMinusSE = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sw-KE")]
		swMinusKE = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ta-IN")]
		taMinusIN = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="te-IN")]
		teMinusIN = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="th-TH")]
		thMinusTH = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tl-PH")]
		tlMinusPH = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tn-ZA")]
		tnMinusZA = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tr-TR")]
		trMinusTR = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uk-UA")]
		ukMinusUA = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ur-PK")]
		urMinusPK = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uz-UZ")]
		uzMinusUZ = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vi-VN")]
		viMinusVN = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-CN")]
		zhMinusCN = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-HK")]
		zhMinusHK = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-MO")]
		zhMinusMO = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-SG")]
		zhMinusSG = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-TW")]
		zhMinusTW = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zu-ZA")]
		zuMinusZA = 135,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputGenerateHash
	{
		
		/// <summary>
		/// Hash algorithm
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public InputGenerateHashAlgorithm Algorithm { get; set; }
		
		/// <summary>
		/// Hash source string
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputGenerateHashAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MD5 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA256 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA384 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA512 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputGenerateUniqueID
	{
		
		/// <summary>
		/// All uppercase alpha characters
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uppercase")]
		public InputGenerateUniqueIDUppercase Uppercase { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputGenerateUniqueIDUppercase
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputJoinStrings
	{
		
		/// <summary>
		/// Collection of strings to be joined
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string[] Input { get; set; }
		
		/// <summary>
		/// Convert strings in collection to lowercase
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lower")]
		public InputJoinStringsLower Lower { get; set; }
		
		/// <summary>
		/// Separator character
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="separator")]
		public string Separator { get; set; }
		
		/// <summary>
		/// Trim strings in collection
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trim")]
		public InputJoinStringsTrim Trim { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputJoinStringsLower
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputJoinStringsTrim
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputJsonConversionCSV
	{
		
		/// <summary>
		/// Include header row
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="header")]
		public bool Header { get; set; } = true;
		
		/// <summary>
		/// JSON array object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// Columns to omit (comma separated)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="omit")]
		public string Omit { get; set; }
		
		/// <summary>
		/// Column order (comma separated)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public string Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputJsonConversionHTML
	{
		
		/// <summary>
		/// Alternate header row markup
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternate")]
		public string Alternate { get; set; }
		
		/// <summary>
		/// Optional table attributes (single quoted values)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		/// <summary>
		/// Include header row
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="header")]
		public bool Header { get; set; } = true;
		
		/// <summary>
		/// JSON array object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// Columns to omit (comma separated)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="omit")]
		public string Omit { get; set; }
		
		/// <summary>
		/// Column order (comma separated)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public string Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputJsonConversionXML
	{
		
		/// <summary>
		/// JSON array object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// Name of root node
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="root")]
		public string Root { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputMarketIndex
	{
		
		/// <summary>
		/// Date (yyyy-MM-dd, leave empty for last trading day)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// Market index
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public InputMarketIndexSymbol Symbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputMarketIndexSymbol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DJA.INDX (Dow Jones Composite Average)")]
		DJA_INDX_Dow_Jones_Composite_Average = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DJI.INDX (Dow Jones Industrial Average)")]
		DJI_INDX_Dow_Jones_Industrial_Average = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DJT.INDX (Dow Jones Transportation)")]
		DJT_INDX_Dow_Jones_Transportation = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DJUS.INDX (Dow Jones US)")]
		DJUS_INDX_Dow_Jones_US = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DXY.INDX (US Dollar Index)")]
		DXY_INDX_US_Dollar_Index = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GDOW.INDX (Global Dow USD)")]
		GDOW_INDX_Global_Dow_USD = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NY.INDX (NYSE US 100 Index)")]
		NY_INDX_NYSE_US_100_Index = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NYA.INDX (NYSE Composite)")]
		NYA_INDX_NYSE_Composite = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IXIC.INDX (NASDAQ Composite)")]
		IXIC_INDX_NASDAQ_Composite = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NDX.INDX (NASDAQ 100)")]
		NDX_INDX_NASDAQ_100 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GSPC.INDX (S&P 500)")]
		GSPC_INDX_SAndP_500 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ES.INDX (S&P 500 Futures)")]
		ES_INDX_SAndP_500_Futures = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MID.INDX (S&P Midcap 400)")]
		MID_INDX_SAndP_Midcap_400 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GPTSE.INDX (S&P TSX Composite Index [Canada])")]
		GPTSE_INDX_SAndP_TSX_Composite_Index__Canada = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FTSE.INDX (FTSE 100 Index [UK])")]
		FTSE_INDX_FTSE_100_Index__UK = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CDAXX.INDX (DAX Composite Index [Germany])")]
		CDAXX_INDX_DAX_Composite_Index__Germany = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GDAXI.INDX (DAX Index [Germany])")]
		GDAXI_INDX_DAX_Index__Germany = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HSCE.INDX (Hang Seng China Enterprise (CEI))")]
		HSCE_INDX_Hang_Seng_China_Enterprise_CEI = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HSI.INDX (Hang Seng Index [Hong Kong])")]
		HSI_INDX_Hang_Seng_Index__Hong_Kong = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="N100.INDX (EuroNext 100)")]
		N100_INDX_EuroNext_100 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="N225.INDX (Nikkei 225 Index)")]
		N225_INDX_Nikkei_225_Index = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RTSI.INDX (RTSI Index [Russia])")]
		RTSI_INDX_RTSI_Index__Russia = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SSEC.INDX (Shanghai Composite)")]
		SSEC_INDX_Shanghai_Composite = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SSMI.INDX (Swiss Market Index)")]
		SSMI_INDX_Swiss_Market_Index = 23,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputNumberRange
	{
		
		/// <summary>
		/// End of range
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="end")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public double End { get; set; }
		
		/// <summary>
		/// Start of range
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public double Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputQRCode
	{
		
		/// <summary>
		/// Text value(s) (vertical bar delimited by type)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// Payload type
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(InputQRCodePayload.Plain_Text_string)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public InputQRCodePayload Payload { get; set; } = InputQRCodePayload.Plain_Text_string;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputQRCodePayload
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Plain Text (string)")]
		Plain_Text_string = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bitcoin Payment (address|amount|label|message)")]
		Bitcoin_Payment_address_amount_label_message = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bookmark (url|title)")]
		Bookmark_url_title = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Calendar Event (subject|description|location|start|end|allDayEvent['true' or 'false']|format ['universal' or 'iCal'])")]
		Calendar_Event_subject_description_location_start_end_allDayEvent__true__or__false__format___universal__or__iCal_ = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Geolocation (latitude|longitude)")]
		Geolocation_latitude_longitude = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mail (recipient|subject|message)")]
		Mail_recipient_subject_message = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Phone Number (string)")]
		Phone_Number_string = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SMS (number|message)")]
		SMS_number_message = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="URL (string)")]
		URL_string = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WiFi (ssid|password|authenticationMode ['WEP', 'WPA' or 'WPA2'])")]
		WiFi_ssid_password_authenticationMode___WEP___WPA__or__WPA2_ = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputRedactString
	{
		
		/// <summary>
		/// Regular expression pattern for matching strings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regex")]
		public string Regex { get; set; }
		
		/// <summary>
		/// String containing the complete text
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Individual string to redact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		/// <summary>
		/// Collection of strings to redact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputReplaceString
	{
		
		/// <summary>
		/// Replacement text
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replacement")]
		public string Replacement { get; set; }
		
		/// <summary>
		/// String containing the text to be replaced
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Text to replace
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputSplitString
	{
		
		/// <summary>
		/// One or more characters that will be used to split the text
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="characters")]
		public string Characters { get; set; }
		
		/// <summary>
		/// Text to split
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputStockPrices
	{
		
		/// <summary>
		/// Date (yyyy-MM-dd, leave empty for latest)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// Stock exchange
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exchange")]
		public System.Nullable<InputStockPricesExchange> Exchange { get; set; }
		
		/// <summary>
		/// Stock ticker symbols (comma-separated, max 20)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="symbols")]
		public string Symbols { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputStockPricesExchange
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XNYS (New York Stock Exchange)")]
		XNYS_New_York_Stock_Exchange = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XNAS (NASDAQ Stock Exchange)")]
		XNAS_NASDAQ_Stock_Exchange = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XBRU (Euronext Brussels)")]
		XBRU_Euronext_Brussels = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XTSE (Toronto Stock Exchange)")]
		XTSE_Toronto_Stock_Exchange = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XCNQ (Candadian Securities Exchange)")]
		XCNQ_Candadian_Securities_Exchange = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XSHG (Shanghai Stock Exchange)")]
		XSHG_Shanghai_Stock_Exchange = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XCSE (Copenhagen Stock Exchange)")]
		XCSE_Copenhagen_Stock_Exchange = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XPAR (Euronext Paris)")]
		XPAR_Euronext_Paris = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XFRA (Deutsche Borse)")]
		XFRA_Deutsche_Borse = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XHKG (Hong Kong Stock Exchange)")]
		XHKG_Hong_Kong_Stock_Exchange = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XNSE (National Stock Exchange India)")]
		XNSE_National_Stock_Exchange_India = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XTAE (Tel Aviv Stock Exchange)")]
		XTAE_Tel_Aviv_Stock_Exchange = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XNGO (Nagoya Stock Exchange)")]
		XNGO_Nagoya_Stock_Exchange = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XFKA (Fukuoka Stock Exchange)")]
		XFKA_Fukuoka_Stock_Exchange = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XSAP (Sapporo Stock Exchange)")]
		XSAP_Sapporo_Stock_Exchange = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XMEX (Mexican Stock Exchange)")]
		XMEX_Mexican_Stock_Exchange = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XNZE (New Zealand Stock Exchange)")]
		XNZE_New_Zealand_Stock_Exchange = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XLIS (Euronext Lisbon)")]
		XLIS_Euronext_Lisbon = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MISX (Moscow Stock Exchange)")]
		MISX_Moscow_Stock_Exchange = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XSES (Singapore Stock Exchange)")]
		XSES_Singapore_Stock_Exchange = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XLON (London Stock Exchange)")]
		XLON_London_Stock_Exchange = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XASE (American Stock Exchange)")]
		XASE_American_Stock_Exchange = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XASX (Australia Stock Exchange)")]
		XASX_Australia_Stock_Exchange = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XDFM (Dubai Financial Market)")]
		XDFM_Dubai_Financial_Market = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XBKK (Stock Exchange of Thailand)")]
		XBKK_Stock_Exchange_of_Thailand = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XSWX (SIX Swiss Exchange)")]
		XSWX_SIX_Swiss_Exchange = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XSTO (Stockholm Stock Exchange)")]
		XSTO_Stockholm_Stock_Exchange = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BMEX (Bolsas y Mercados Españoles)")]
		BMEX_Bolsas_y_Mercados_Españoles = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XJSE (Johannesburg Stock Exchange)")]
		XJSE_Johannesburg_Stock_Exchange = 28,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputString
	{
		
		/// <summary>
		/// String variable or text value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputStringComparison
	{
		
		/// <summary>
		/// Comparison string
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="compare")]
		public string Compare { get; set; }
		
		/// <summary>
		/// Original string
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// Convert strings to lowercase before comparison
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lower")]
		public InputStringComparisonLower Lower { get; set; }
		
		/// <summary>
		/// Trim strings before comparison
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trim")]
		public InputStringComparisonTrim Trim { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputStringComparisonLower
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputStringComparisonTrim
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputStringContains
	{
		
		/// <summary>
		/// Text to match
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="find")]
		public string Find { get; set; }
		
		/// <summary>
		/// Text to search
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// Convert strings to lowercase
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lower")]
		public InputStringContainsLower Lower { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputStringContainsLower
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputStringToFile
	{
		
		/// <summary>
		/// File extension
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(InputStringToFileExtension.TXT)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="extension")]
		public InputStringToFileExtension Extension { get; set; } = InputStringToFileExtension.TXT;
		
		/// <summary>
		/// Name of file (without extension)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		/// <summary>
		/// Text string (body of file)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputStringToFileExtension
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TXT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTML = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XML = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JS = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputTextToSpeech
	{
		
		/// <summary>
		/// Text to convert (10,000 characters max)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Text or file type
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(InputTextToSpeechType.PlainText)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public InputTextToSpeechType Type { get; set; } = InputTextToSpeechType.PlainText;
		
		/// <summary>
		/// Voice locale (must match language of input text)
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(InputTextToSpeechVoice.enMinusUS_Aria_Female)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="voice")]
		public InputTextToSpeechVoice Voice { get; set; } = InputTextToSpeechVoice.enMinusUS_Aria_Female;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputTextToSpeechType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PlainText = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSML = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputTextToSpeechVoice
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-EG, Hoda (Female)")]
		arMinusEG_Hoda_Female = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-SA, Naayf (Male)")]
		arMinusSA_Naayf_Male = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bg-BG, Ivan (Male)")]
		bgMinusBG_Ivan_Male = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ca-ES, Herena (Female)")]
		caMinusES_Herena_Female = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cs-CZ, Jakub (Male)")]
		csMinusCZ_Jakub_Male = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="da-DK, Helle (Female)")]
		daMinusDK_Helle_Female = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-AT, Michael (Male)")]
		deMinusAT_Michael_Male = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-CH, Karsten (Male)")]
		deMinusCH_Karsten_Male = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-DE, Hedda (Female)")]
		deMinusDE_Hedda_Female = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-DE, Stefan (Male)")]
		deMinusDE_Stefan_Male = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="el-GR, Stefanos (Male)")]
		elMinusGR_Stefanos_Male = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-AU, Catherine (Female)")]
		enMinusAU_Catherine_Female = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-AU, Hayley (Female)")]
		enMinusAU_Hayley_Female = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-CA, Heather (Female)")]
		enMinusCA_Heather_Female = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-CA, Linda (Female)")]
		enMinusCA_Linda_Female = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB, George (Male)")]
		enMinusGB_George_Male = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB, Hazel (Female)")]
		enMinusGB_Hazel_Female = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB, Susan (Female)")]
		enMinusGB_Susan_Female = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-IE, Sean (Male)")]
		enMinusIE_Sean_Male = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-IN, Heera (Female)")]
		enMinusIN_Heera_Female = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-IN, Priya (Female)")]
		enMinusIN_Priya_Female = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-IN, Ravi (Male)")]
		enMinusIN_Ravi_Male = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US, Aria (Female)")]
		enMinusUS_Aria_Female = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US, Benjamin (Male)")]
		enMinusUS_Benjamin_Male = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US, Guy (Male)")]
		enMinusUS_Guy_Male = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US, Zira (Female)")]
		enMinusUS_Zira_Female = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-ES, Helena (Female)")]
		esMinusES_Helena_Female = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-ES, Laura (Female)")]
		esMinusES_Laura_Female = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-ES, Pablo (Male)")]
		esMinusES_Pablo_Male = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-MX, Hilda (Female)")]
		esMinusMX_Hilda_Female = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-MX, Raul (Male)")]
		esMinusMX_Raul_Male = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fi-FI, Heidi (Female)")]
		fiMinusFI_Heidi_Female = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-CA, Caroline (Female)")]
		frMinusCA_Caroline_Female = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-CA, Harmonie (Female)")]
		frMinusCA_Harmonie_Female = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-CH, Guillaume (Male)")]
		frMinusCH_Guillaume_Male = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-FR, Hortense (Female)")]
		frMinusFR_Hortense_Female = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-FR, Julie (Female)")]
		frMinusFR_Julie_Female = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-FR, Paul (Male)")]
		frMinusFR_Paul_Male = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="he-IL, Asaf (Male)")]
		heMinusIL_Asaf_Male = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hi-IN, Hemant (Male)")]
		hiMinusIN_Hemant_Male = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hi-IN, Kalpana (Female)")]
		hiMinusIN_Kalpana_Female = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hr-HR, Matej (Male)")]
		hrMinusHR_Matej_Male = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hu-HU, Szabolcs (Male)")]
		huMinusHU_Szabolcs_Male = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="id-ID, Andika (Male)")]
		idMinusID_Andika_Male = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="it-IT, Cosimo (Male)")]
		itMinusIT_Cosimo_Male = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="it-IT, Lucia (Female)")]
		itMinusIT_Lucia_Female = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ja-JP, Ayumi (Female)")]
		jaMinusJP_Ayumi_Female = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ja-JP, Haruka (Female)")]
		jaMinusJP_Haruka_Female = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ja-JP, Ichiro (Male)")]
		jaMinusJP_Ichiro_Male = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ko-KR, Heami (Female)")]
		koMinusKR_Heami_Female = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ms-MY, Rizwan (Male)")]
		msMinusMY_Rizwan_Male = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nb-NO, Hulda (Female)")]
		nbMinusNO_Hulda_Female = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nl-NL, Hanna (Female)")]
		nlMinusNL_Hanna_Female = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pl-PL, Paulina (Female)")]
		plMinusPL_Paulina_Female = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-BR, Daniel (Male)")]
		ptMinusBR_Daniel_Male = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-BR, Heloisa (Female)")]
		ptMinusBR_Heloisa_Female = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-PT, Helia (Female)")]
		ptMinusPT_Helia_Female = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ro-RO, Andrei (Male)")]
		roMinusRO_Andrei_Male = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ru-RU, Ekaterina (Female)")]
		ruMinusRU_Ekaterina_Female = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ru-RU, Irina (Female)")]
		ruMinusRU_Irina_Female = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ru-RU, Pavel (Male)")]
		ruMinusRU_Pavel_Male = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sk-SK, Filip (Male)")]
		skMinusSK_Filip_Male = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sl-SI, Lado (Male)")]
		slMinusSI_Lado_Male = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sv-SE, Hedvig (Female)")]
		svMinusSE_Hedvig_Female = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ta-IN, Valluvar (Male)")]
		taMinusIN_Valluvar_Male = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="te-IN, Chitra (Female)")]
		teMinusIN_Chitra_Female = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="th-TH, Pattara (Male)")]
		thMinusTH_Pattara_Male = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tr-TR, Seda (Female)")]
		trMinusTR_Seda_Female = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vi-VN, An (Male)")]
		viMinusVN_An_Male = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-CN, Huihui (Female)")]
		zhMinusCN_Huihui_Female = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-CN, Kangkang (Male)")]
		zhMinusCN_Kangkang_Male = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-CN, Yaoyao (Female)")]
		zhMinusCN_Yaoyao_Female = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-HK, Danny (Male)")]
		zhMinusHK_Danny_Male = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-HK, Tracy (Female)")]
		zhMinusHK_Tracy_Female = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-TW, HanHan (Female)")]
		zhMinusTW_HanHan_Female = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-TW, Yating (Female)")]
		zhMinusTW_Yating_Female = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-TW, Zhiwei (Male)")]
		zhMinusTW_Zhiwei_Male = 76,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputTranslateString
	{
		
		/// <summary>
		/// String containing the text to be translated
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// Translation language
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="language")]
		public InputTranslateStringLanguage Language { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputTranslateStringLanguage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Arabic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Chinese (Simplified)")]
		Chinese_Simplified = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Czech = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Danish = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dutch = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		English = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Finnish = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		French = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		German = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Greek = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hindi = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hungarian = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Italian = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Japanese = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Klingon = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Korean = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Norweigan = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Polish = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Portuguese = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Russian = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Spanish = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Swedish = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Turkish = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vietnamese = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Welsh = 24,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputTrimString
	{
		
		/// <summary>
		/// String containing the text to be trimmed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Type of white space to remove
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public InputTrimStringType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputTrimStringType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Start = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		End = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Both = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputVerifyHash
	{
		
		/// <summary>
		/// Hash algorithm
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public InputGenerateHashAlgorithm Algorithm { get; set; }
		
		/// <summary>
		/// Hashed result
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public string Hash { get; set; }
		
		/// <summary>
		/// Original source string
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputXmlConversionJSON
	{
		
		/// <summary>
		/// XML string
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputBoolean
	{
		
		/// <summary>
		/// Result
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public System.Nullable<System.Boolean> Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputCollectionNumber
	{
		
		/// <summary>
		/// First Value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item")]
		public System.Nullable<System.Double> Item { get; set; }
		
		/// <summary>
		/// All Values
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public double[] Items { get; set; }
		
		/// <summary>
		/// Success
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Boolean> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputCollectionResult
	{
		
		/// <summary>
		/// Modified collection result
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string[] Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputCollectionString
	{
		
		/// <summary>
		/// First Value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item")]
		public string Item { get; set; }
		
		/// <summary>
		/// All Values
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public string[] Items { get; set; }
		
		/// <summary>
		/// Success
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Boolean> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputDateDifference
	{
		
		/// <summary>
		/// Days
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="days")]
		public System.Nullable<System.Double> Days { get; set; }
		
		/// <summary>
		/// Hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public System.Nullable<System.Double> Hours { get; set; }
		
		/// <summary>
		/// Milliseconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="milliseconds")]
		public System.Nullable<System.Double> Milliseconds { get; set; }
		
		/// <summary>
		/// Minutes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutes")]
		public System.Nullable<System.Double> Minutes { get; set; }
		
		/// <summary>
		/// Months
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="months")]
		public System.Nullable<System.Double> Months { get; set; }
		
		/// <summary>
		/// Ticks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ticks")]
		public System.Nullable<System.Double> Ticks { get; set; }
		
		/// <summary>
		/// Total Days
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalDays")]
		public System.Nullable<System.Double> TotalDays { get; set; }
		
		/// <summary>
		/// Total Hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalHours")]
		public System.Nullable<System.Double> TotalHours { get; set; }
		
		/// <summary>
		/// Total Milliseconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalMilliseconds")]
		public System.Nullable<System.Double> TotalMilliseconds { get; set; }
		
		/// <summary>
		/// Total Minutes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalMinutes")]
		public System.Nullable<System.Double> TotalMinutes { get; set; }
		
		/// <summary>
		/// Total Months
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalMonths")]
		public System.Nullable<System.Double> TotalMonths { get; set; }
		
		/// <summary>
		/// Total Seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSeconds")]
		public System.Nullable<System.Double> TotalSeconds { get; set; }
		
		/// <summary>
		/// Total Years
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalYears")]
		public System.Nullable<System.Double> TotalYears { get; set; }
		
		/// <summary>
		/// Years
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="years")]
		public System.Nullable<System.Double> Years { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputDateInfo
	{
		
		/// <summary>
		/// DayOfWeek
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DayOfWeek { get; set; }
		
		/// <summary>
		/// DayOfYear
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DayOfYear { get; set; }
		
		/// <summary>
		/// MinutesInDay
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MinutesInDay { get; set; }
		
		/// <summary>
		/// SecondsInDay
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SecondsInDay { get; set; }
		
		/// <summary>
		/// Ticks
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Ticks { get; set; }
		
		/// <summary>
		/// WeekOfYear
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> WeekOfYear { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputFileByte
	{
		
		/// <summary>
		/// Result
		/// Pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
		public string Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputMarketIndex
	{
		
		/// <summary>
		/// Adjusted close value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adj_close")]
		public System.Nullable<System.Double> Adj_close { get; set; }
		
		/// <summary>
		/// Adjusted high value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adj_high")]
		public System.Nullable<System.Double> Adj_high { get; set; }
		
		/// <summary>
		/// Adjusted low value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adj_low")]
		public System.Nullable<System.Double> Adj_low { get; set; }
		
		/// <summary>
		/// Adjusted open value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adj_open")]
		public System.Nullable<System.Double> Adj_open { get; set; }
		
		/// <summary>
		/// Adjusted trading volume
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adj_volume")]
		public System.Nullable<System.Double> Adj_volume { get; set; }
		
		/// <summary>
		/// Close value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="close")]
		public System.Nullable<System.Double> Close { get; set; }
		
		/// <summary>
		/// Date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// Market exchange
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exchange")]
		public string Exchange { get; set; }
		
		/// <summary>
		/// High value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="high")]
		public System.Nullable<System.Double> High { get; set; }
		
		/// <summary>
		/// Low value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="low")]
		public System.Nullable<System.Double> Low { get; set; }
		
		/// <summary>
		/// Open value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="open")]
		public System.Nullable<System.Double> Open { get; set; }
		
		/// <summary>
		/// Index symbol
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		/// <summary>
		/// Trading volume
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volume")]
		public System.Nullable<System.Double> Volume { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputMultiCollection
	{
		
		/// <summary>
		/// First collection result
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result1")]
		public string[] Result1 { get; set; }
		
		/// <summary>
		/// Second collection result
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result2")]
		public string[] Result2 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputNumber
	{
		
		/// <summary>
		/// Result
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public System.Nullable<System.Double> Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputStockPrice
	{
		
		/// <summary>
		/// Stock price information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public OutputStockPriceResult[] OutputStockPriceResult { get; set; }
	}
	
	public class OutputStockPriceResult
	{
		
		/// <summary>
		/// Close
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="close")]
		public System.Nullable<System.Double> Close { get; set; }
		
		/// <summary>
		/// Date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// Stock exchange
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exchange")]
		public string Exchange { get; set; }
		
		/// <summary>
		/// High
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="high")]
		public System.Nullable<System.Double> High { get; set; }
		
		/// <summary>
		/// Low
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="low")]
		public System.Nullable<System.Double> Low { get; set; }
		
		/// <summary>
		/// Open
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="open")]
		public System.Nullable<System.Double> Open { get; set; }
		
		/// <summary>
		/// Ticker symbol
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		/// <summary>
		/// Volume
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volume")]
		public System.Nullable<System.Double> Volume { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputString
	{
		
		/// <summary>
		/// Result
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputStringArray
	{
		
		/// <summary>
		/// data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Collections - Add to collection
		/// Add an item to a collection
		/// AddToCollection AddToCollection
		/// </summary>
		/// <param name="requestBody">Collection modification parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputCollectionResult> AddToCollectionAsync(InputCollectionModify requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "AddToCollection";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputCollectionResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Data - CSV to JSON
		/// Convert a CSV string to a JSON array
		/// CsvToJson CSVtoJSON
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> CsvToJsonAsync(InputCsvConversionJSON requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CSVtoJSON";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Calculate Absolute
		/// Calculate the absolute value of a number
		/// CalculateAbsolute CalculateAbsolute
		/// </summary>
		/// <param name="requestBody">Number calculation parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputNumber> CalculateAbsoluteAsync(InputCalculateNumber requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CalculateAbsolute";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Calculate Addition
		/// Calculate the sum of two numbers
		/// CalculateAddition CalculateAddition
		/// </summary>
		/// <param name="requestBody">Number calculation parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputNumber> CalculateAdditionAsync(InputCalculateNumbers requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CalculateAddition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Calculate average
		/// Calculate the average of two or more numbers
		/// CalculateAverage CalculateAverage
		/// </summary>
		/// <param name="requestBody">Series calculation parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputNumber> CalculateAverageAsync(InputCalculateSeries requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CalculateAverage";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Calculate Cosine
		/// Calculate the cosine value of an angle
		/// CalculateCosine CalculateCosine
		/// </summary>
		/// <param name="requestBody">Number calculation parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputNumber> CalculateCosineAsync(InputCalculateNumber requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CalculateCosine";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Calculate Division
		/// Calculate the quotient of two numbers
		/// CalculateDivision CalculateDivision
		/// </summary>
		/// <param name="requestBody">Number calculation parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputNumber> CalculateDivisionAsync(InputCalculateNumbers requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CalculateDivision";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Calculate Logarithm
		/// Calculate the logarithm of a number
		/// CalculateLogarithm CalculateLogarithm
		/// </summary>
		/// <param name="requestBody">Number calculation parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputNumber> CalculateLogarithmAsync(InputCalculateNumber requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CalculateLogarithm";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Calculate median
		/// Calculate the median of two or more numbers
		/// CalculateMedian CalculateMedian
		/// </summary>
		/// <param name="requestBody">Series calculation parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputNumber> CalculateMedianAsync(InputCalculateSeries requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CalculateMedian";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Calculate minimum or maximum
		/// Calculate the minimum or maximum value in a sequence of numbers
		/// CalculateMinMax CalculateMinMax
		/// </summary>
		/// <param name="requestBody">Series calculation parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputNumber> CalculateMinMaxAsync(InputCalculateMinMax requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CalculateMinMax";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Calculate Modulo
		/// Calculate the remainder of dividing two numbers
		/// CalculateModulo CalculateModulo
		/// </summary>
		/// <param name="requestBody">Number calculation parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputNumber> CalculateModuloAsync(InputCalculateNumbers requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CalculateModulo";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Calculate Multiplication
		/// Calculate the product of two numbers
		/// CalculateMultiplication CalculateMultiplication
		/// </summary>
		/// <param name="requestBody">Number calculation parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputNumber> CalculateMultiplicationAsync(InputCalculateNumbers requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CalculateMultiplication";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Calculate Nth Root
		/// Calculate the n-th root of a number
		/// CalculateNthRoot CalculateNthRoot
		/// </summary>
		/// <param name="requestBody">Number calculation parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputNumber> CalculateNthRootAsync(InputCalculateNumbers requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CalculateNthRoot";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Calculate power
		/// Raise number to a specified power
		/// CalculatePower CalculatePower
		/// </summary>
		/// <param name="requestBody">Power calculation parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputNumber> CalculatePowerAsync(InputCalculatePower requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CalculatePower";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Calculate Sine
		/// Calculate the sine value of an angle
		/// CalculateSine CalculateSine
		/// </summary>
		/// <param name="requestBody">Number calculation parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputNumber> CalculateSineAsync(InputCalculateNumber requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CalculateSine";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Calculate Square Root
		/// Calculate the square root of a number
		/// CalculateSquareRoot CalculateSquareRoot
		/// </summary>
		/// <param name="requestBody">Number calculation parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputNumber> CalculateSquareRootAsync(InputCalculateNumber requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CalculateSquareRoot";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Calculate Subtraction
		/// Calculate the difference between two numbers
		/// CalculateSubtraction CalculateSubtraction
		/// </summary>
		/// <param name="requestBody">Number calculation parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputNumber> CalculateSubtractionAsync(InputCalculateNumbers requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CalculateSubtraction";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Calculate sum
		/// Calculate the sum of two or more numbers
		/// CalculateSum CalculateSum
		/// </summary>
		/// <param name="requestBody">Series calculation parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputNumber> CalculateSumAsync(InputCalculateSeries requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CalculateSum";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Calculate Tangent
		/// Calculate the tangent value of an angle
		/// CalculateTangent CalculateTangent
		/// </summary>
		/// <param name="requestBody">Number calculation parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputNumber> CalculateTangentAsync(InputCalculateNumber requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CalculateTangent";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Calculate variance
		/// Calculate the statistical variance of two or more numbers
		/// CalculateVariance CalculateVariance
		/// </summary>
		/// <param name="requestBody">Series calculation parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputNumber> CalculateVarianceAsync(InputCalculateSeries requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CalculateVariance";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Collections - Contains number
		/// Determine if a collection contains a specific number
		/// CollectionContainsNumber CollectionContainsNumber
		/// </summary>
		/// <param name="requestBody">Collection search parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputCollectionNumber> CollectionContainsNumberAsync(InputCollectionSearchNumeric requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CollectionContainsNumber";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputCollectionNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Collections - Contains string
		/// Determine if any items in a collection contain a specific string
		/// CollectionContainsString CollectionContainsString
		/// </summary>
		/// <param name="requestBody">Collection search parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputCollectionString> CollectionContainsStringAsync(InputCollectionSearch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CollectionContainsString";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputCollectionString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Collections - Ends with string
		/// Determine if any items in a collection end with a specific string
		/// CollectionEndsWithString CollectionEndsWithString
		/// </summary>
		/// <param name="requestBody">Collection search parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputCollectionString> CollectionEndsWithStringAsync(InputCollectionSearch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CollectionEndsWithString";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputCollectionString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Collections - Starts with string
		/// Determine if any items in a collection start with a specific string
		/// CollectionStartsWithString CollectionStartsWithString
		/// </summary>
		/// <param name="requestBody">Collection search parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputCollectionString> CollectionStartsWithStringAsync(InputCollectionSearch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CollectionStartsWithString";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputCollectionString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Collections - Collection to JSON
		/// Convert a collection to a named JSON object
		/// CollectionToJSON CollectionToJSON
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> CollectionToJSONAsync(InputCollectionConversion requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CollectionToJSON";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Collections - Collection to XML
		/// Convert a collection to an XML string
		/// CollectionToXml CollectionToXML
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> CollectionToXmlAsync(InputCollectionConversionXML requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CollectionToXML";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Text - Compare strings
		/// Perform a comparison of two strings
		/// CompareStrings CompareStrings
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> CompareStringsAsync(InputStringComparison requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CompareStrings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Text - Contains string
		/// Determine if a string contains another string
		/// ContainsString ContainsString
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> ContainsStringAsync(InputStringContains requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ContainsString";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Convert angle
		/// Convert value from one angle measurement to another
		/// ConvertAngle ConvertAngle
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputNumber> ConvertAngleAsync(InputConvertAngle requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ConvertAngle";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Convert area
		/// Convert value from one area measurement to another
		/// ConvertArea ConvertArea
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputNumber> ConvertAreaAsync(InputConvertArea requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ConvertArea";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Text - Convert case
		/// Convert string to upper, lower or title case
		/// ConvertCase ConvertCase
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> ConvertCaseAsync(InputCaseConversion requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ConvertCase";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Currency - Convert currency
		/// Calculate monetary value in a different currency
		/// ConvertCurrency ConvertCurrency
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputNumber> ConvertCurrencyAsync(InputCurrencyConversion requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ConvertCurrency";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Convert distance
		/// Convert value from one distance measurement to another
		/// ConvertDistance ConvertDistance
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputNumber> ConvertDistanceAsync(InputConvertDistance requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ConvertDistance";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Convert duration
		/// Convert value from one duration measurement to another
		/// ConvertDuration ConvertDuration
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputNumber> ConvertDurationAsync(InputConvertDuration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ConvertDuration";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Convert energy
		/// Convert value from one energy measurement to another
		/// ConvertEnergy ConvertEnergy
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputNumber> ConvertEnergyAsync(InputConvertEnergy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ConvertEnergy";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Convert power
		/// Convert value from one power measurement to another
		/// ConvertPower ConvertPower
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputNumber> ConvertPowerAsync(InputConvertPower requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ConvertPower";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Convert speed
		/// Convert value from one speed measurement to another
		/// ConvertSpeed ConvertSpeed
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputNumber> ConvertSpeedAsync(InputConvertSpeed requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ConvertSpeed";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Convert temperature
		/// Convert value from one temperature measurement to another
		/// ConvertTemperature ConvertTemperature
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputNumber> ConvertTemperatureAsync(InputConvertTemperature requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ConvertTemperature";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Convert volume
		/// Convert value from one volume measurement to another
		/// ConvertVolume ConvertVolume
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputNumber> ConvertVolumeAsync(InputConvertVolume requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ConvertVolume";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Convert weight
		/// Convert value from one weight measurement to another
		/// ConvertWeight ConvertWeight
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputNumber> ConvertWeightAsync(InputConvertWeight requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ConvertWeight";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Collections - Count collection
		/// Count a collection of items
		/// CountCollection CountCollection
		/// </summary>
		/// <param name="requestBody">Count collection parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputNumber> CountCollectionAsync(InputCollectionCount requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CountCollection";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// DateTime - DateTime difference
		/// Calculate the difference between two dates
		/// DateTimeDifference DateTimeDifference
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputDateDifference> DateTimeDifferenceAsync(InputDateTimeDifference requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DateTimeDifference";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputDateDifference>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// DateTime - Get date and time information
		/// Retrieve useful date and time information, such as day of year, total seconds and ticks
		/// DateTimeInfo DateTimeInfo
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputDateInfo> DateTimeInfoAsync(InputDateTimeInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DateTimeInfo";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputDateInfo>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Text - Decode string
		/// Decode a string encoded with Base64 encoding
		/// DecodeString DecodeString
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> DecodeStringAsync(DecodeStringPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DecodeString";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Text - Encode string
		/// Encode a string using Base64 encoding
		/// EncodeString EncodeString
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> EncodeStringAsync(InputString requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "EncodeString";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Collections - Filter collection
		/// Filter a collection of strings by keyword
		/// FilterCollection FilterCollection
		/// </summary>
		/// <param name="requestBody">Filter collection parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputCollectionResult> FilterCollectionAsync(InputCollectionFilter requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "FilterCollection";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputCollectionResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Currency - Format currency
		/// Apply currency symbol to a numeric value
		/// FormatCurrency FormatCurrency
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> FormatCurrencyAsync(InputCurrencyFormat requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "FormatCurrency";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// DateTime - Format date and time
		/// Create a date/time string in a specific format
		/// FormatDateTime FormatDateTime
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> FormatDateTimeAsync(InputDateTimeFormat requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "FormatDateTime";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Text - Generate GUID
		/// Generate a globally unique identifier
		/// GenerateGuid GenerateGuid
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> GenerateGuidAsync(InputGenerateUniqueID requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GenerateGuid";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Text - Generate hash
		/// Generate a hash value from a string
		/// GenerateHash GenerateHash
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> GenerateHashAsync(InputGenerateHash requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GenerateHash";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Files - Generate QR code
		/// Generate a QR code image
		/// GenerateQRCode GenerateQRCode
		/// </summary>
		/// <returns>OK</returns>
		public async Task GenerateQRCodeAsync(InputQRCode requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GenerateQRCode";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Data - JSON to CSV
		/// Convert a JSON array to CSV string
		/// JsonToCsv JSONtoCSV
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> JsonToCsvAsync(InputJsonConversionCSV requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "JSONtoCSV";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Data - JSON to HTML Table
		/// Convert a JSON array to an HTML table
		/// JsonToHtml JSONtoHTML
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> JsonToHtmlAsync(InputJsonConversionHTML requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "JSONtoHTML";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Data - JSON to XML
		/// Convert a JSON object to an XML string
		/// JsonToXml JSONtoXML
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> JsonToXmlAsync(InputJsonConversionXML requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "JSONtoXML";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Text - Join strings
		/// Join a collection of strings
		/// JoinStrings JoinStrings
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> JoinStringsAsync(InputJoinStrings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "JoinStrings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Finance - Market index
		/// Get current and historical market index information
		/// MarketIndex MarketIndex
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputMarketIndex> MarketIndexAsync(InputMarketIndex requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "MarketIndex";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputMarketIndex>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Data - Query JSON
		/// Query a JSON object using a JSONPath expression
		/// QueryJson QueryJSON
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> QueryJsonAsync(InputDataQuery requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "QueryJSON";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Data - Query XML
		/// Query an XML string using an XPath expression
		/// QueryXml QueryXML
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> QueryXmlAsync(InputDataQuery requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "QueryXML";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Random number
		/// Generate a random number within a specified range
		/// RandomNumber RandomNumber
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputNumber> RandomNumberAsync(InputNumberRange requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "RandomNumber";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Text - Redact string
		/// Redact a strng containing sensitive content
		/// RedactString RedactString
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> RedactStringAsync(InputRedactString requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "RedactString";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Collections - Remove from collection
		/// Remove an item from a collection
		/// RemoveFromCollection RemoveFromCollection
		/// </summary>
		/// <param name="requestBody">Collection modification parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputCollectionResult> RemoveFromCollectionAsync(InputCollectionModify requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "RemoveFromCollection";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputCollectionResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Text - Replace string
		/// Replace one value with another in a string
		/// ReplaceString ReplaceString
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> ReplaceStringAsync(InputReplaceString requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ReplaceString";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Collections - Replace values in collection
		/// Replace whole or partial strings in a collection
		/// ReplaceValuesInCollection ReplaceValuesInCollection
		/// </summary>
		/// <param name="requestBody">Replace values in collection parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputCollectionResult> ReplaceValuesInCollectionAsync(InputCollectionReplace requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ReplaceValuesInCollection";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputCollectionResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Round number
		/// Round a numeric value up or down
		/// RoundNumber RoundNumber
		/// </summary>
		/// <param name="requestBody">Numeric calculation parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputNumber> RoundNumberAsync(InputCalculateNumber requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "RoundNumber";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Text - Shorten hyperlink
		/// Generate a simple, short URL from a complex URL
		/// ShortenLink ShortenLink
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> ShortenLinkAsync(ShortenLinkPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ShortenLink";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Collections - Sort collection
		/// Sort a collection of strings
		/// SortCollection SortCollection
		/// </summary>
		/// <param name="requestBody">Sort collection parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputCollectionResult> SortCollectionAsync(InputCollectionSort requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "SortCollection";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputCollectionResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Collections - Split collection
		/// Split a collection of items by matching value or index
		/// SplitCollection SplitCollection
		/// </summary>
		/// <param name="requestBody">Split collection parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputMultiCollection> SplitCollectionAsync(InputCollectionSplit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "SplitCollection";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputMultiCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Text - Split string
		/// Split a string based upon one or more characters
		/// SplitString SplitString
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputStringArray> SplitStringAsync(InputSplitString requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "SplitString";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputStringArray>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Math - Calculate standard deviation
		/// Calculate the standard deviation of two or more numbers
		/// StandardDeviation StandardDeviation
		/// </summary>
		/// <param name="requestBody">Series calculation parameters</param>
		/// <returns>OK</returns>
		public async Task<OutputNumber> StandardDeviationAsync(InputCalculateSeries requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StandardDeviation";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputNumber>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Finance - Stock prices
		/// Get current and historical stock price information
		/// StockPrices StockPrices
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputStockPrice> StockPricesAsync(InputStockPrices requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StockPrices";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputStockPrice>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Text - String to File
		/// Convert text string to file
		/// StringToFile StringToFile
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> StringToFileAsync(InputStringToFile requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StringToFile";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Text - Text to Speech
		/// Convert text to an audio file using AI-driven speech synthesis.
		/// TextToSpeech TextToSpeech
		/// </summary>
		/// <returns>OK</returns>
		public async Task TextToSpeechAsync(InputTextToSpeech requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "TextToSpeech";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Text - Translate string
		/// Translate a string into a different language
		/// TranslateString TranslateString
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> TranslateStringAsync(InputTranslateString requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "TranslateString";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Text - Trim string
		/// Trim leading or trailing whitespace from a string
		/// TrimString TrimString
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> TrimStringAsync(InputTrimString requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "TrimString";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Text - Decode URL
		/// Decode an encoded URL
		/// UrlDecode URLDecode
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> UrlDecodeAsync(UrlDecodePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "URLDecode";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Text - Encode URL
		/// Generate an encoded string from a complex hyperlink
		/// UrlEncode URLEncode
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> UrlEncodeAsync(InputString requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "URLEncode";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Text - Validate email
		/// Determine if an email address is valid
		/// ValidateEmail ValidateEmail
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> ValidateEmailAsync(ValidateEmailPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ValidateEmail";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Text - Verify hash
		/// Verify a hashed value against the original source string
		/// VerifyHash VerifyHash
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputBoolean> VerifyHashAsync(InputVerifyHash requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "VerifyHash";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputBoolean>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// DateTime - Get world time
		/// Convert date and time from one time zone to another
		/// WorldTime WorldTime
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> WorldTimeAsync(InputDateTimeConversion requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "WorldTime";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Data - XML to JSON
		/// Convert an XML string to a JSON object
		/// XmlToJson XMLtoJSON
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OutputString> XmlToJsonAsync(InputXmlConversionJSON requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "XMLtoJSON";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OutputString>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class DecodeStringPostBody
	{
		
		/// <summary>
		/// Encoded string variable or text value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	public class ShortenLinkPostBody
	{
		
		/// <summary>
		/// String variable or text value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	public class UrlDecodePostBody
	{
		
		/// <summary>
		/// Encoded string variable or text value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	public class ValidateEmailPostBody
	{
		
		/// <summary>
		/// String variable or text value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
