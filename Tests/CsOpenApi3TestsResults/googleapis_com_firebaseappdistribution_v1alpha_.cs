//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A release of a Firebase app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1Release
	{
		
		/// <summary>
		/// Output only. A signed link (which expires in one hour) to directly download the app binary (IPA/APK/AAB) file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="binaryDownloadUri")]
		public string BinaryDownloadUri { get; set; }
		
		/// <summary>
		/// Output only. Build version of the release. For an Android release, the build version is the `versionCode`. For an iOS release, the build version is the `CFBundleVersion`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildVersion")]
		public string BuildVersion { get; set; }
		
		/// <summary>
		/// Output only. The time the release was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. Display version of the release. For an Android release, the display version is the `versionName`. For an iOS release, the display version is the `CFBundleShortVersionString`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayVersion")]
		public string DisplayVersion { get; set; }
		
		/// <summary>
		/// Output only. A link to the Firebase console displaying a single release.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firebaseConsoleUri")]
		public string FirebaseConsoleUri { get; set; }
		
		/// <summary>
		/// The name of the release resource. Format: `projects/{project_number}/apps/{app_id}/releases/{release_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Notes that belong to a release.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releaseNotes")]
		public GoogleFirebaseAppdistroV1ReleaseNotes ReleaseNotes { get; set; }
		
		/// <summary>
		/// Output only. A link to the release in the tester web clip or Android app that lets testers (which were granted access to the app) view release notes and install the app onto their devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testingUri")]
		public string TestingUri { get; set; }
	}
	
	/// <summary>
	/// Notes that belong to a release.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1ReleaseNotes
	{
		
		/// <summary>
		/// The text of the release notes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Operation metadata for `UploadRelease`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1UploadReleaseMetadata
	{
	}
	
	/// <summary>
	/// Response message for `UploadRelease`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1UploadReleaseResponse
	{
		
		/// <summary>
		/// A release of a Firebase app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="release")]
		public GoogleFirebaseAppdistroV1Release Release { get; set; }
		
		/// <summary>
		/// Result of upload release.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public System.Nullable<GoogleFirebaseAppdistroV1UploadReleaseResponseResult> Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirebaseAppdistroV1UploadReleaseResponseResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPLOAD_RELEASE_RESULT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELEASE_CREATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELEASE_UPDATED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELEASE_UNMODIFIED = 3,
	}
	
	/// <summary>
	/// App bundle test certificate
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaAabCertificate
	{
		
		/// <summary>
		/// MD5 hash of the certificate used to resign the AAB
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateHashMd5")]
		public string CertificateHashMd5 { get; set; }
		
		/// <summary>
		/// SHA1 hash of the certificate used to resign the AAB
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateHashSha1")]
		public string CertificateHashSha1 { get; set; }
		
		/// <summary>
		/// SHA256 hash of the certificate used to resign the AAB
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateHashSha256")]
		public string CertificateHashSha256 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaApp
	{
		
		/// <summary>
		/// App bundle test certificate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aabCertificate")]
		public GoogleFirebaseAppdistroV1alphaAabCertificate AabCertificate { get; set; }
		
		/// <summary>
		/// App bundle state. Only valid for android apps. The app_view field in the request must be set to FULL in order for this to be populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aabState")]
		public System.Nullable<GoogleFirebaseAppdistroV1alphaAppAabState> AabState { get; set; }
		
		/// <summary>
		/// Firebase gmp app id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Bundle identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundleId")]
		public string BundleId { get; set; }
		
		/// <summary>
		/// Developer contact email for testers to reach out to about privacy or support issues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactEmail")]
		public string ContactEmail { get; set; }
		
		/// <summary>
		/// iOS or Android
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string Platform { get; set; }
		
		/// <summary>
		/// Project number of the Firebase project, for example 300830567303.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectNumber")]
		public string ProjectNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirebaseAppdistroV1alphaAppAabState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAB_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAY_ACCOUNT_NOT_LINKED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_APP_WITH_GIVEN_BUNDLE_ID_IN_PLAY_ACCOUNT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_NOT_PUBLISHED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAB_STATE_UNAVAILABLE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAY_IAS_TERMS_NOT_ACCEPTED = 6,
	}
	
	/// <summary>
	/// An app crash that occurred during an automated test.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaAppCrash
	{
		
		/// <summary>
		/// Output only. The message associated with the crash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Output only. The raw stack trace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackTrace")]
		public string StackTrace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaCreateReleaseNotesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="releaseNotes")]
		public GoogleFirebaseAppdistroV1alphaReleaseNotes ReleaseNotes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaReleaseNotes
	{
		
		[System.Runtime.Serialization.DataMember(Name="releaseNotes")]
		public string ReleaseNotes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaCreateReleaseNotesResponse
	{
	}
	
	/// <summary>
	/// The results of running an automated test on a particular device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaDeviceExecution
	{
		
		/// <summary>
		/// An app crash that occurred during an automated test.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appCrash")]
		public GoogleFirebaseAppdistroV1alphaAppCrash AppCrash { get; set; }
		
		/// <summary>
		/// Output only. A URI to an image of the Robo crawl graph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crawlGraphUri")]
		public string CrawlGraphUri { get; set; }
		
		/// <summary>
		/// A device on which automated tests can be run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device")]
		public GoogleFirebaseAppdistroV1alphaTestDevice Device { get; set; }
		
		/// <summary>
		/// Output only. The reason why the test failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedReason")]
		public System.Nullable<GoogleFirebaseAppdistroV1alphaDeviceExecutionFailedReason> FailedReason { get; set; }
		
		/// <summary>
		/// Output only. The reason why the test was inconclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inconclusiveReason")]
		public System.Nullable<GoogleFirebaseAppdistroV1alphaDeviceExecutionInconclusiveReason> InconclusiveReason { get; set; }
		
		/// <summary>
		/// Output only. The path to a directory in Cloud Storage that will eventually contain the results for this execution. For example, gs://bucket/Nexus5-18-en-portrait.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultsStoragePath")]
		public string ResultsStoragePath { get; set; }
		
		/// <summary>
		/// Statistics collected during a Robo test.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roboStats")]
		public GoogleFirebaseAppdistroV1alphaRoboStats RoboStats { get; set; }
		
		/// <summary>
		/// Output only. A list of screenshot image URIs taken from the Robo crawl. The file names are numbered by the order in which they were taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenshotUris")]
		public string[] ScreenshotUris { get; set; }
		
		/// <summary>
		/// Output only. The state of the test.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<GoogleFirebaseAppdistroV1alphaDeviceExecutionState> State { get; set; }
		
		/// <summary>
		/// Output only. A URI to a video of the test run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoUri")]
		public string VideoUri { get; set; }
	}
	
	/// <summary>
	/// A device on which automated tests can be run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaTestDevice
	{
		
		/// <summary>
		/// Optional. The locale of the device (e.g. "en_US" for US English) during the test.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// Required. The device model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// Optional. The orientation of the device during the test.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orientation")]
		public string Orientation { get; set; }
		
		/// <summary>
		/// Required. The version of the device (API level on Android).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirebaseAppdistroV1alphaDeviceExecutionFailedReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_REASON_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRASHED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_INSTALLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNABLE_TO_CRAWL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_OUT_OF_MEMORY = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirebaseAppdistroV1alphaDeviceExecutionInconclusiveReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCONCLUSIVE_REASON_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUOTA_EXCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFRASTRUCTURE_FAILURE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_NOT_ACTIVATED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_SIGNATURE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_LAUNCHER_ACTIVITY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORBIDDEN_PERMISSIONS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_ADMIN_RECEIVER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_CODE_APK = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_APK_PREVIEW_SDK = 9,
	}
	
	/// <summary>
	/// Statistics collected during a Robo test.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaRoboStats
	{
		
		/// <summary>
		/// Output only. Number of actions that crawler performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionsPerformed")]
		public System.Nullable<System.Int32> ActionsPerformed { get; set; }
		
		/// <summary>
		/// Output only. Duration of crawl.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crawlDuration")]
		public string CrawlDuration { get; set; }
		
		/// <summary>
		/// Output only. Number of distinct screens visited.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distinctVisitedScreens")]
		public System.Nullable<System.Int32> DistinctVisitedScreens { get; set; }
		
		/// <summary>
		/// Output only. Whether the main activity crawl timed out.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainActivityCrawlTimedOut")]
		public System.Nullable<System.Boolean> MainActivityCrawlTimedOut { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirebaseAppdistroV1alphaDeviceExecutionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCONCLUSIVE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaEnableAccessOnReleaseRequest
	{
		
		/// <summary>
		/// Optional. Ignored. Used to be build version of the app release if an instance identifier was provided for the release_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildVersion")]
		public string BuildVersion { get; set; }
		
		/// <summary>
		/// Optional. Ignored. Used to be display version of the app release if an instance identifier was provided for the release_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayVersion")]
		public string DisplayVersion { get; set; }
		
		/// <summary>
		/// Optional. An email address which should get access to this release, for example rebeccahe@google.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emails")]
		public string[] Emails { get; set; }
		
		/// <summary>
		/// Optional. A repeated list of group aliases to enable access to a release for Note: This field is misnamed, but can't be changed because we need to maintain compatibility with old build tools
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupIds")]
		public string[] GroupIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaEnableAccessOnReleaseResponse
	{
	}
	
	/// <summary>
	/// Response object to get the release given a upload hash
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaGetReleaseByUploadHashResponse
	{
		
		/// <summary>
		/// Proto defining a release object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="release")]
		public GoogleFirebaseAppdistroV1alphaRelease Release { get; set; }
	}
	
	/// <summary>
	/// Proto defining a release object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaRelease
	{
		
		/// <summary>
		/// Release build version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildVersion")]
		public string BuildVersion { get; set; }
		
		/// <summary>
		/// Release version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayVersion")]
		public string DisplayVersion { get; set; }
		
		/// <summary>
		/// Timestamp when the release was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distributedAt")]
		public string DistributedAt { get; set; }
		
		/// <summary>
		/// Release Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Instance id of the release
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Last activity timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastActivityAt")]
		public string LastActivityAt { get; set; }
		
		/// <summary>
		/// Number of testers who have open invitations for the release
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openInvitationCount")]
		public System.Nullable<System.Int32> OpenInvitationCount { get; set; }
		
		/// <summary>
		/// unused. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receivedAt")]
		public string ReceivedAt { get; set; }
		
		/// <summary>
		/// Release notes summary
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releaseNotesSummary")]
		public string ReleaseNotesSummary { get; set; }
		
		/// <summary>
		/// Count of testers added to the release
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testerCount")]
		public System.Nullable<System.Int32> TesterCount { get; set; }
		
		/// <summary>
		/// Number of testers who have installed the release
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testerWithInstallCount")]
		public System.Nullable<System.Int32> TesterWithInstallCount { get; set; }
	}
	
	/// <summary>
	/// Response containing the UDIDs of tester iOS devices in a project
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaGetTesterUdidsResponse
	{
		
		/// <summary>
		/// The UDIDs of tester iOS devices in a project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testerUdids")]
		public GoogleFirebaseAppdistroV1alphaTesterUdid[] TesterUdids { get; set; }
	}
	
	/// <summary>
	/// The UDIDs of a tester's iOS device
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaTesterUdid
	{
		
		/// <summary>
		/// The name of the tester's device
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The platform of the tester's device
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string Platform { get; set; }
		
		/// <summary>
		/// The UDID of the tester's device
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="udid")]
		public string Udid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaGetUploadStatusResponse
	{
		
		/// <summary>
		/// The error code associated with (only set on "FAILURE")
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public System.Nullable<GoogleFirebaseAppdistroV1alphaGetUploadStatusResponseErrorCode> ErrorCode { get; set; }
		
		/// <summary>
		/// Any additional context for the given upload status (e.g. error message) Meant to be displayed to the client
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Proto defining a release object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="release")]
		public GoogleFirebaseAppdistroV1alphaRelease Release { get; set; }
		
		/// <summary>
		/// The status of the upload
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<GoogleFirebaseAppdistroV1alphaGetUploadStatusResponseStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirebaseAppdistroV1alphaGetUploadStatusResponseErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_ZIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_PLIST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_PROFILE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERSION_TOO_LONG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_UUIDS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_RESOURCES = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_MANIFEST = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOS_METADATA_ERROR = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID_METADATA_ERROR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_PLATFORM_TYPE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUNDLE_ID_MISMATCH = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APK_NOT_ZIP_ALIGNED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_CERTIFICATE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APK_TOO_LARGE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAB_NOT_PUBLISHED = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_PLIST_DEVICE_FAMILIES = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAB_TOS_NOT_ACCEPTED = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_NAME_TOO_LONG = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAB_DEVELOPER_ACCOUNT_NOT_LINKED = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAB_NO_APP_WITH_GIVEN_PACKAGE_NAME_IN_ACCOUNT = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAB_UPLOAD_ERROR = 21,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirebaseAppdistroV1alphaGetUploadStatusResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALREADY_UPLOADED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaJwt
	{
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	/// <summary>
	/// The response message for `ListReleaseTests`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaListReleaseTestsResponse
	{
		
		/// <summary>
		/// A short-lived token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The tests listed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releaseTests")]
		public GoogleFirebaseAppdistroV1alphaReleaseTest[] ReleaseTests { get; set; }
	}
	
	/// <summary>
	/// The results of running an automated test on a release.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaReleaseTest
	{
		
		/// <summary>
		/// Output only. Timestamp when the test was run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Required. The results of the test on each device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceExecutions")]
		public GoogleFirebaseAppdistroV1alphaDeviceExecution[] DeviceExecutions { get; set; }
		
		/// <summary>
		/// Login credential for automated tests
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginCredential")]
		public GoogleFirebaseAppdistroV1alphaLoginCredential LoginCredential { get; set; }
		
		/// <summary>
		/// The name of the release test resource. Format: `projects/{project_number}/apps/{app_id}/releases/{release_id}/tests/{test_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Login credential for automated tests
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaLoginCredential
	{
		
		/// <summary>
		/// Hints to the crawler for identifying input fields
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldHints")]
		public GoogleFirebaseAppdistroV1alphaLoginCredentialFieldHints FieldHints { get; set; }
		
		/// <summary>
		/// Optional. Are these credentials for Google?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="google")]
		public System.Nullable<System.Boolean> Google { get; set; }
		
		/// <summary>
		/// Optional. Password for automated tests
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Optional. Username for automated tests
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Hints to the crawler for identifying input fields
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaLoginCredentialFieldHints
	{
		
		/// <summary>
		/// Required. The Android resource name of the password UI element. For example, in Java: R.string.foo in xml: @string/foo Only the "foo" part is needed. Reference doc: https://developer.android.com/guide/topics/resources/accessing-resources.html
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordResourceName")]
		public string PasswordResourceName { get; set; }
		
		/// <summary>
		/// Required. The Android resource name of the username UI element. For example, in Java: R.string.foo in xml: @string/foo Only the "foo" part is needed. Reference doc: https://developer.android.com/guide/topics/resources/accessing-resources.html
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usernameResourceName")]
		public string UsernameResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaProvisionAppResponse
	{
	}
	
	/// <summary>
	/// Configuration for Robo crawler
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaRoboCrawler
	{
		
		/// <summary>
		/// Login credential for automated tests
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginCredential")]
		public GoogleFirebaseAppdistroV1alphaLoginCredential LoginCredential { get; set; }
	}
	
	/// <summary>
	/// Configuration for automated tests
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1alphaTestConfig
	{
		
		/// <summary>
		/// Identifier. The name of the test configuration resource. Format: `projects/{project_number}/apps/{app_id}/testConfig`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Configuration for Robo crawler
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roboCrawler")]
		public GoogleFirebaseAppdistroV1alphaRoboCrawler RoboCrawler { get; set; }
		
		/// <summary>
		/// Optional. Tests will be run on this list of devices
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testDevices")]
		public GoogleFirebaseAppdistroV1alphaTestDevice[] TestDevices { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get the app, if it exists
		/// Firebaseappdistribution_apps_get v1alpha/apps/{mobilesdkAppId}
		/// </summary>
		/// <param name="mobilesdkAppId">Unique id for a Firebase app of the format: {version}:{project_number}:{platform}:{hash(bundle_id)} Example: 1:581234567376:android:aa0a3c7b135e90289</param>
		/// <param name="appView">App view. When unset or set to BASIC, returns an App with everything set except for aab_state. When set to FULL, returns an App with aab_state set.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1alphaApp> Firebaseappdistribution_apps_getAsync(string mobilesdkAppId, Firebaseappdistribution_apps_getAppView appView, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (mobilesdkAppId==null? "" : System.Uri.EscapeDataString(mobilesdkAppId))+"&appView=" + appView;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppdistroV1alphaApp>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Provision app distribution for an existing Firebase app, enabling it to subsequently be used by appdistro.
		/// Firebaseappdistribution_apps_provisionApp v1alpha/apps/{mobilesdkAppId}
		/// </summary>
		/// <param name="mobilesdkAppId">Unique id for a Firebase app of the format: {version}:{project_number}:{platform}:{hash(bundle_id)} Example: 1:581234567376:android:aa0a3c7b135e90289</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1alphaProvisionAppResponse> Firebaseappdistribution_apps_provisionAppAsync(string mobilesdkAppId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (mobilesdkAppId==null? "" : System.Uri.EscapeDataString(mobilesdkAppId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppdistroV1alphaProvisionAppResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a JWT token
		/// Firebaseappdistribution_apps_getJwt v1alpha/apps/{mobilesdkAppId}/jwt
		/// </summary>
		/// <param name="mobilesdkAppId">Unique id for a Firebase app of the format: {version}:{project_number}:{platform}:{hash(bundle_id)} Example: 1:581234567376:android:aa0a3c7b135e90289</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1alphaJwt> Firebaseappdistribution_apps_getJwtAsync(string mobilesdkAppId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (mobilesdkAppId==null? "" : System.Uri.EscapeDataString(mobilesdkAppId))+"/jwt";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppdistroV1alphaJwt>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// GET Release by binary upload hash
		/// Firebaseappdistribution_apps_release_by_hash_get v1alpha/apps/{mobilesdkAppId}/release_by_hash/{uploadHash}
		/// </summary>
		/// <param name="mobilesdkAppId">Unique id for a Firebase app of the format: {version}:{project_number}:{platform}:{hash(bundle_id)} Example: 1:581234567376:android:aa0a3c7b135e90289</param>
		/// <param name="uploadHash">The hash for the upload</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1alphaGetReleaseByUploadHashResponse> Firebaseappdistribution_apps_release_by_hash_getAsync(string mobilesdkAppId, string uploadHash, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (mobilesdkAppId==null? "" : System.Uri.EscapeDataString(mobilesdkAppId))+"/release_by_hash/"+ (uploadHash==null? "" : System.Uri.EscapeDataString(uploadHash));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppdistroV1alphaGetReleaseByUploadHashResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Enable access on a release for testers.
		/// Firebaseappdistribution_apps_releases_enable_access v1alpha/apps/{mobilesdkAppId}/releases/{releaseId}/enable_access
		/// </summary>
		/// <param name="mobilesdkAppId">Unique id for a Firebase app of the format: {version}:{project_number}:{platform}:{hash(bundle_id)} Example: 1:581234567376:android:aa0a3c7b135e90289</param>
		/// <param name="releaseId">Release identifier</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1alphaEnableAccessOnReleaseResponse> Firebaseappdistribution_apps_releases_enable_accessAsync(string mobilesdkAppId, string releaseId, GoogleFirebaseAppdistroV1alphaEnableAccessOnReleaseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (mobilesdkAppId==null? "" : System.Uri.EscapeDataString(mobilesdkAppId))+"/releases/"+ (releaseId==null? "" : System.Uri.EscapeDataString(releaseId))+"/enable_access";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppdistroV1alphaEnableAccessOnReleaseResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create release notes on a release.
		/// Firebaseappdistribution_apps_releases_notes_create v1alpha/apps/{mobilesdkAppId}/releases/{releaseId}/notes
		/// </summary>
		/// <param name="mobilesdkAppId">Unique id for a Firebase app of the format: {version}:{project_number}:{platform}:{hash(bundle_id)} Example: 1:581234567376:android:aa0a3c7b135e90289</param>
		/// <param name="releaseId">Release identifier</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1alphaCreateReleaseNotesResponse> Firebaseappdistribution_apps_releases_notes_createAsync(string mobilesdkAppId, string releaseId, GoogleFirebaseAppdistroV1alphaCreateReleaseNotesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (mobilesdkAppId==null? "" : System.Uri.EscapeDataString(mobilesdkAppId))+"/releases/"+ (releaseId==null? "" : System.Uri.EscapeDataString(releaseId))+"/notes";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppdistroV1alphaCreateReleaseNotesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get UDIDs of tester iOS devices in a project
		/// Firebaseappdistribution_apps_testers_getTesterUdids v1alpha/apps/{mobilesdkAppId}/testers:getTesterUdids
		/// </summary>
		/// <param name="mobilesdkAppId">Unique id for a Firebase app of the format: {version}:{project_number}:{platform}:{hash(bundle_id)} Example: 1:581234567376:android:aa0a3c7b135e90289</param>
		/// <param name="project">The name of the project, which is the parent of testers Format: `projects/{project_number}`</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1alphaGetTesterUdidsResponse> Firebaseappdistribution_apps_testers_getTesterUdidsAsync(string mobilesdkAppId, string project, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (mobilesdkAppId==null? "" : System.Uri.EscapeDataString(mobilesdkAppId))+"/testers:getTesterUdids&project=" + (project==null? "" : System.Uri.EscapeDataString(project));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppdistroV1alphaGetTesterUdidsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// GET Binary upload status by token
		/// Firebaseappdistribution_apps_upload_status_get v1alpha/apps/{mobilesdkAppId}/upload_status/{uploadToken}
		/// </summary>
		/// <param name="mobilesdkAppId">Unique id for a Firebase app of the format: {version}:{project_number}:{platform}:{hash(bundle_id)} Example: 1:581234567376:android:aa0a3c7b135e90289</param>
		/// <param name="uploadToken">The token for the upload</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1alphaGetUploadStatusResponse> Firebaseappdistribution_apps_upload_status_getAsync(string mobilesdkAppId, string uploadToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (mobilesdkAppId==null? "" : System.Uri.EscapeDataString(mobilesdkAppId))+"/upload_status/"+ (uploadToken==null? "" : System.Uri.EscapeDataString(uploadToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppdistroV1alphaGetUploadStatusResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get results for automated test run on release.
		/// Firebaseappdistribution_projects_apps_releases_tests_get v1alpha/{name}
		/// </summary>
		/// <param name="name">Required. The name of the release test resource. Format: `projects/{project_number}/apps/{app_id}/releases/{release_id}/tests/{test_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1alphaReleaseTest> Firebaseappdistribution_projects_apps_releases_tests_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppdistroV1alphaReleaseTest>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a release.
		/// Firebaseappdistribution_projects_apps_updateTestConfig v1alpha/{name}
		/// </summary>
		/// <param name="name">Identifier. The name of the test configuration resource. Format: `projects/{project_number}/apps/{app_id}/testConfig`</param>
		/// <param name="updateMask">Optional. The list of fields to update.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1alphaTestConfig> Firebaseappdistribution_projects_apps_updateTestConfigAsync(string name, string updateMask, GoogleFirebaseAppdistroV1alphaTestConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppdistroV1alphaTestConfig>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List results for automated tests run on release.
		/// Firebaseappdistribution_projects_apps_releases_tests_list v1alpha/{parent}/tests
		/// </summary>
		/// <param name="parent">Required. The name of the release resource, which is the parent of the tests Format: `projects/{project_number}/apps/{app_id}/releases/{release_id}`</param>
		/// <param name="pageSize">Optional. The maximum number of tests to return. The service may return fewer than this value.</param>
		/// <param name="pageToken">Optional. A page token, received from a previous `ListReleaseTests` call. Provide this to retrieve the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1alphaListReleaseTestsResponse> Firebaseappdistribution_projects_apps_releases_tests_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/tests&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppdistroV1alphaListReleaseTestsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Run automated test(s) on release.
		/// Firebaseappdistribution_projects_apps_releases_tests_create v1alpha/{parent}/tests
		/// </summary>
		/// <param name="parent">Required. The name of the release resource, which is the parent of the test Format: `projects/{project_number}/apps/{app_id}/releases/{release_id}`</param>
		/// <param name="releaseTestId">Optional. The ID to use for the test, which will become the final component of the tests's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. If it is not provided one will be automatically generated.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1alphaReleaseTest> Firebaseappdistribution_projects_apps_releases_tests_createAsync(string parent, string releaseTestId, GoogleFirebaseAppdistroV1alphaReleaseTest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/tests&releaseTestId=" + (releaseTestId==null? "" : System.Uri.EscapeDataString(releaseTestId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppdistroV1alphaReleaseTest>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get UDIDs of tester iOS devices in a project
		/// Firebaseappdistribution_projects_testers_getUdids v1alpha/{project}/testers:udids
		/// </summary>
		/// <param name="project">The name of the project, which is the parent of testers Format: `projects/{project_number}`</param>
		/// <param name="mobilesdkAppId">Unique id for a Firebase app of the format: {version}:{project_number}:{platform}:{hash(bundle_id)} Example: 1:581234567376:android:aa0a3c7b135e90289</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1alphaGetTesterUdidsResponse> Firebaseappdistribution_projects_testers_getUdidsAsync(string project, string mobilesdkAppId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/testers:udids&mobilesdkAppId=" + (mobilesdkAppId==null? "" : System.Uri.EscapeDataString(mobilesdkAppId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppdistroV1alphaGetTesterUdidsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum Firebaseappdistribution_apps_getAppView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_VIEW_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
