//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Anomaly
	{
		
		/// <summary>
		/// Eta (arcsec) - easterly component of deflection of vertical.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eta")]
		public AnomalyEta Eta { get; set; }
		
		/// <summary>
		/// Gravity anomaly (mGal)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gravity_anomaly")]
		public AnomalyGravity_anomaly Gravity_anomaly { get; set; }
		
		/// <summary>
		/// Xi (arcsec) - northerly component of deflection of vertical.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xi")]
		public AnomalyXi Xi { get; set; }
	}
	
	public class AnomalyEta
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class AnomalyGravity_anomaly
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class AnomalyXi
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Height
	{
		
		/// <summary>
		/// Geoid height (m)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public HeightHeight1 Height1 { get; set; }
	}
	
	public class HeightHeight1
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Calculate the geoid height
		/// 
		/// for a given latitude / longitude.
		/// 
		/// App_api_egm2008_endpoints_EGM2008_calculate_height egm2008/geoid_height
		/// </summary>
		/// <param name="latitude">Geographic latitude (-90 to 90 deg).</param>
		/// <param name="longitude">Geographic longitude (-180 to 180 deg).</param>
		/// <returns>Successful geoid height calculation</returns>
		public async Task<Height> App_api_egm2008_endpoints_EGM2008_calculate_heightAsync(double latitude, double longitude, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "egm2008/geoid_height?latitude="+latitude+"&longitude="+longitude;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Height>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Calculate gravity anomaly values
		/// 
		/// for a given latitude / longitude.
		/// 
		/// App_api_egm2008_endpoints_EGM2008_calculate_anomaly egm2008/gravity_anomaly
		/// </summary>
		/// <param name="latitude">Geographic latitude (-90 to 90 deg).</param>
		/// <param name="longitude">Geographic longitude (-180 to 180 deg).</param>
		/// <returns>Successful anomaly calculation</returns>
		public async Task<Anomaly> App_api_egm2008_endpoints_EGM2008_calculate_anomalyAsync(double latitude, double longitude, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "egm2008/gravity_anomaly?latitude="+latitude+"&longitude="+longitude;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Anomaly>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
