//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIError
	{
		
		/// <summary>
		/// API error code. If set and > 0 then an API error has occurred your request could not be completed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api-error")]
		public int Api_error { get; set; }
		
		/// <summary>
		/// API error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api-error-msg")]
		public string Api_error_msg { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BINLookupResponse
	{
		
		/// <summary>
		/// The BIN or IIN number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bin-number")]
		public string Bin_number { get; set; }
		
		/// <summary>
		/// The card brand (e.g. Visa or Mastercard)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card-brand")]
		public string Card_brand { get; set; }
		
		/// <summary>
		/// The card category. There are many different card categories the most common card categories are: CLASSIC, BUSINESS, CORPORATE, PLATINUM, PREPAID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card-category")]
		public string Card_category { get; set; }
		
		/// <summary>
		/// The card type, will always be one of: DEBIT, CREDIT, CHARGE CARD
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card-type")]
		public string Card_type { get; set; }
		
		/// <summary>
		/// The full country name of the issuer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The ISO 2-letter country code of the issuer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country-code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// The ISO 3-letter country code of the issuer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country-code3")]
		public string Country_code3 { get; set; }
		
		/// <summary>
		/// ISO 4217 currency code associated with the country of the issuer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency-code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// True if the customers IP is listed on one of our blocklists, see the <a href="http://www.neutrinoapi.com/api/ip-blocklist/">IP Blocklist API</a>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ip-blocklisted")]
		public bool Ip_blocklisted { get; set; }
		
		/// <summary>
		/// An array of strings indicating which blocklists this IP is listed on
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ip-blocklists")]
		public string[] Ip_blocklists { get; set; }
		
		/// <summary>
		/// The city of the customers IP (if detectable)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ip-city")]
		public string Ip_city { get; set; }
		
		/// <summary>
		/// The country of the customers IP
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ip-country")]
		public string Ip_country { get; set; }
		
		/// <summary>
		/// The ISO 2-letter country code of the customers IP
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ip-country-code")]
		public string Ip_country_code { get; set; }
		
		/// <summary>
		/// The ISO 3-letter country code of the customers IP
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ip-country-code3")]
		public string Ip_country_code3 { get; set; }
		
		/// <summary>
		/// True if the customers IP country matches the BIN country
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ip-matches-bin")]
		public bool Ip_matches_bin { get; set; }
		
		/// <summary>
		/// The region of the customers IP (if detectable)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ip-region")]
		public string Ip_region { get; set; }
		
		/// <summary>
		/// Is this a commercial/business use card
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-commercial")]
		public bool Is_commercial { get; set; }
		
		/// <summary>
		/// Is this a prepaid or prepaid reloadable card
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-prepaid")]
		public bool Is_prepaid { get; set; }
		
		/// <summary>
		/// The card issuer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issuer")]
		public string Issuer { get; set; }
		
		/// <summary>
		/// The card issuers phone number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issuer-phone")]
		public string Issuer_phone { get; set; }
		
		/// <summary>
		/// The card issuers website
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issuer-website")]
		public string Issuer_website { get; set; }
		
		/// <summary>
		/// Is this a valid BIN or IIN number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="valid")]
		public bool Valid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BadWordFilterResponse
	{
		
		/// <summary>
		/// An array of the bad words found
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bad-words-list")]
		public string[] Bad_words_list { get; set; }
		
		/// <summary>
		/// Total number of bad words detected
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bad-words-total")]
		public int Bad_words_total { get; set; }
		
		/// <summary>
		/// The censored content (only set if censor-character has been set)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="censored-content")]
		public string Censored_content { get; set; }
		
		/// <summary>
		/// Does the text contain bad words
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-bad")]
		public bool Is_bad { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Blacklist
	{
		
		/// <summary>
		/// True if the host is currently black-listed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-listed")]
		public bool Is_listed { get; set; }
		
		/// <summary>
		/// The hostname of the DNSBL
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list-host")]
		public string List_host { get; set; }
		
		/// <summary>
		/// The name of the DNSBL
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list-name")]
		public string List_name { get; set; }
		
		/// <summary>
		/// The list rating [1-3] with 1 being the best rating and 3 the lowest rating
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list-rating")]
		public int List_rating { get; set; }
		
		/// <summary>
		/// The DNSBL server response time in milliseconds
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="response-time")]
		public int Response_time { get; set; }
		
		/// <summary>
		/// The specific return code for this listing (only set if listed)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return-code")]
		public string Return_code { get; set; }
		
		/// <summary>
		/// The TXT record returned for this listing (only set if listed)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txt-record")]
		public string Txt_record { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BlocklistSensor
	{
		
		/// <summary>
		/// The primary blocklist category this sensor belongs to
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="blocklist")]
		public string Blocklist { get; set; }
		
		/// <summary>
		/// Contains details about the sensor source and what type of malicious activity was detected
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The sensor ID. This is a permanent and unique ID for each sensor
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BrowserBotResponse
	{
		
		/// <summary>
		/// The complete raw, decompressed and decoded page content. Usually will be either HTML, JSON or XML
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// Array containing all the elements matching the supplied selector. <br>Each element object will contain the text content, HTML content and all current element attributes
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="elements")]
		public string[] Elements { get; set; }
		
		/// <summary>
		/// Contains the error message if an error has occurred ('is-error' will be true)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="error-message")]
		public string Error_message { get; set; }
		
		/// <summary>
		/// If you executed any JavaScript this array holds the results as objects
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exec-results")]
		public string[] Exec_results { get; set; }
		
		/// <summary>
		/// The redirected URL if the URL responded with an HTTP redirect
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="http-redirect-url")]
		public string Http_redirect_url { get; set; }
		
		/// <summary>
		/// The HTTP status code the URL returned
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="http-status-code")]
		public int Http_status_code { get; set; }
		
		/// <summary>
		/// The HTTP status message the URL returned
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="http-status-message")]
		public string Http_status_message { get; set; }
		
		/// <summary>
		/// True if an error has occurred loading the page. Check the 'error-message' field for details
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-error")]
		public bool Is_error { get; set; }
		
		/// <summary>
		/// True if the HTTP status is OK (200)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-http-ok")]
		public bool Is_http_ok { get; set; }
		
		/// <summary>
		/// True if the URL responded with an HTTP redirect
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-http-redirect")]
		public bool Is_http_redirect { get; set; }
		
		/// <summary>
		/// True if the page is secured using TLS/SSL
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-secure")]
		public bool Is_secure { get; set; }
		
		/// <summary>
		/// True if a timeout occurred while loading the page. You can set the timeout with the request parameter 'timeout'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-timeout")]
		public bool Is_timeout { get; set; }
		
		/// <summary>
		/// The ISO 2-letter language code of the page. Extracted from either the HTML document or via HTTP headers
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="language-code")]
		public string Language_code { get; set; }
		
		/// <summary>
		/// The number of seconds taken to load the page (from initial request until DOM ready)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="load-time")]
		public double Load_time { get; set; }
		
		/// <summary>
		/// The document MIME type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mime-type")]
		public string Mime_type { get; set; }
		
		/// <summary>
		/// Map containing all the HTTP response headers the URL responded with
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="response-headers")]
		public System.Collections.Generic.Dictionary<string, string> Response_headers { get; set; }
		
		/// <summary>
		/// Map containing details of the TLS/SSL setup
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="security-details")]
		public System.Collections.Generic.Dictionary<string, string> Security_details { get; set; }
		
		/// <summary>
		/// The HTTP servers IP address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="server-ip")]
		public string Server_ip { get; set; }
		
		/// <summary>
		/// The document title
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The page URL
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConvertResponse
	{
		
		/// <summary>
		/// The type of the value being converted from
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from-type")]
		public string From_type { get; set; }
		
		/// <summary>
		/// The value being converted from
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from-value")]
		public string From_value { get; set; }
		
		/// <summary>
		/// The result of the conversion in string format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
		
		/// <summary>
		/// The result of the conversion as a floating-point number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="result-float")]
		public double Result_float { get; set; }
		
		/// <summary>
		/// The type being converted to
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to-type")]
		public string To_type { get; set; }
		
		/// <summary>
		/// True if the conversion was successful and produced a valid result
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="valid")]
		public bool Valid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainLookupResponse
	{
		
		/// <summary>
		/// The number of days since the domain was registered. A domain age of under 90 days is generally considered to be potentially risky. A value of 0 indicates no registration date was found for this domain
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="age")]
		public int Age { get; set; }
		
		/// <summary>
		/// An array of strings indicating which blocklist categories this domain is listed on. Current categories are: phishing, malware, spam, anonymizer, nefarious
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="blocklists")]
		public string[] Blocklists { get; set; }
		
		/// <summary>
		/// The primary domain of the DNS provider for this domain
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dns-provider")]
		public string Dns_provider { get; set; }
		
		/// <summary>
		/// The primary domain name excluding any subdomains. This is also referred to as the second-level domain (SLD)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// The fully qualified domain name (FQDN)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fqdn")]
		public string Fqdn { get; set; }
		
		/// <summary>
		/// This domain is hosting adult content such as porn, webcams, escorts, etc
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-adult")]
		public bool Is_adult { get; set; }
		
		/// <summary>
		/// Is this domain under a government or military TLD
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-gov")]
		public bool Is_gov { get; set; }
		
		/// <summary>
		/// Consider this domain malicious as it is currently listed on at least 1 blocklist
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-malicious")]
		public bool Is_malicious { get; set; }
		
		/// <summary>
		/// Is this domain under an OpenNIC TLD
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-opennic")]
		public bool Is_opennic { get; set; }
		
		/// <summary>
		/// True if this domain is unseen and is currently being processed in the background. This field only matters when the 'live' lookup setting has been explicitly disabled and indicates that not all domain data my be present yet
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-pending")]
		public bool Is_pending { get; set; }
		
		/// <summary>
		/// Is the FQDN a subdomain of the primary domain
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-subdomain")]
		public bool Is_subdomain { get; set; }
		
		/// <summary>
		/// The primary domain of the email provider for this domain. An empty value indicates the domain has no valid MX records
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mail-provider")]
		public string Mail_provider { get; set; }
		
		/// <summary>
		/// The domains estimated global traffic rank with the highest rank being 1. A value of 0 indicates the domain is currently ranked outside of the top 1M of domains
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public int Rank { get; set; }
		
		/// <summary>
		/// The ISO date this domain was registered or first seen on the internet. An empty value indicates we could not reliably determine the date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="registered-date")]
		public string Registered_date { get; set; }
		
		/// <summary>
		/// The IANA registrar ID (0 if no registrar ID was found)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="registrar-id")]
		public int Registrar_id { get; set; }
		
		/// <summary>
		/// The name of the domain registrar owning this domain
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="registrar-name")]
		public string Registrar_name { get; set; }
		
		/// <summary>
		/// An array of objects containing details on which specific blocklist sensors have detected this domain
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sensors")]
		public BlocklistSensor[] Sensors { get; set; }
		
		/// <summary>
		/// The top-level domain (TLD)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tld")]
		public string Tld { get; set; }
		
		/// <summary>
		/// For a country code top-level domain (ccTLD) this will contain the associated ISO 2-letter country code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tld-cc")]
		public string Tld_cc { get; set; }
		
		/// <summary>
		/// True if a valid domain was found. For a domain to be considered valid it must be registered and have valid DNS NS records
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="valid")]
		public bool Valid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmailValidateResponse
	{
		
		/// <summary>
		/// The email domain
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// True if this address has a domain error (e.g. no valid mail server records)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain-error")]
		public bool Domain_error { get; set; }
		
		/// <summary>
		/// The email address. If you have used the fix-typos option then this will be the fixed address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// True if this address is a disposable, temporary or darknet related email address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-disposable")]
		public bool Is_disposable { get; set; }
		
		/// <summary>
		/// True if this address is a free-mail address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-freemail")]
		public bool Is_freemail { get; set; }
		
		/// <summary>
		/// True if this address belongs to a person. False if this is a role based address, e.g. admin@, help@, office@, etc.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-personal")]
		public bool Is_personal { get; set; }
		
		/// <summary>
		/// The email service provider domain
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// True if this address has a syntax error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="syntax-error")]
		public bool Syntax_error { get; set; }
		
		/// <summary>
		/// True if typos have been fixed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typos-fixed")]
		public bool Typos_fixed { get; set; }
		
		/// <summary>
		/// Is this a valid email
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="valid")]
		public bool Valid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmailVerifyResponse
	{
		
		/// <summary>
		/// The email domain
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// True if this address has a domain error (e.g. no valid mail server records)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain-error")]
		public bool Domain_error { get; set; }
		
		/// <summary>
		/// The email address. If you have used the fix-typos option then this will be the fixed address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// True if this email domain has a catch-all policy (it will accept mail for any username)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-catch-all")]
		public bool Is_catch_all { get; set; }
		
		/// <summary>
		/// True if the mail server responded with a temporary failure (either a 4xx response code or unresponsive server). You can retry this address later, we recommend waiting at least 15 minutes before retrying
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-deferred")]
		public bool Is_deferred { get; set; }
		
		/// <summary>
		/// True if this address is a disposable, temporary or darknet related email address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-disposable")]
		public bool Is_disposable { get; set; }
		
		/// <summary>
		/// True if this address is a free-mail address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-freemail")]
		public bool Is_freemail { get; set; }
		
		/// <summary>
		/// True if this address is for a person. False if this is a role based address, e.g. admin@, help@, office@, etc.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-personal")]
		public bool Is_personal { get; set; }
		
		/// <summary>
		/// The email service provider domain
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// The raw SMTP response message received during verification
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smtp-response")]
		public string Smtp_response { get; set; }
		
		/// <summary>
		/// The SMTP verification status for the address: <br> <ul> <li>ok - SMTP verification was successful, this is a real address that can receive mail</li> <li>invalid - this is not a valid email address (has either a domain or syntax error)</li> <li>absent - this address is not registered with the email service provider</li> <li>unresponsive - the mail server(s) for this address timed-out or refused to open an SMTP connection</li> <li>unknown - sorry, we could not reliably determine the real status of this address (this address may or may not exist)</li> </ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smtp-status")]
		public string Smtp_status { get; set; }
		
		/// <summary>
		/// True if this address has a syntax error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="syntax-error")]
		public bool Syntax_error { get; set; }
		
		/// <summary>
		/// True if typos have been fixed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typos-fixed")]
		public bool Typos_fixed { get; set; }
		
		/// <summary>
		/// Is this a valid email address (syntax and domain is valid)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="valid")]
		public bool Valid { get; set; }
		
		/// <summary>
		/// True if this address has passed SMTP verification. Check the smtp-status and smtp-response fields for specific verification details
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="verified")]
		public bool Verified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeocodeAddressResponse
	{
		
		/// <summary>
		/// The number of possible matching locations found
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="found")]
		public int Found { get; set; }
		
		/// <summary>
		/// Array of matching location objects
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Location
	{
		
		/// <summary>
		/// The complete address using comma-separated values
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// The components which make up the address such as road, city, state, etc
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address-components")]
		public System.Collections.Generic.Dictionary<string, string> Address_components { get; set; }
		
		/// <summary>
		/// The city of the location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The country of the location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The ISO 2-letter country code of the location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country-code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// The ISO 3-letter country code of the location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country-code3")]
		public string Country_code3 { get; set; }
		
		/// <summary>
		/// ISO 4217 currency code associated with the country
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency-code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// The location latitude
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public double Latitude { get; set; }
		
		/// <summary>
		/// Array of strings containing any location tags associated with the address. Tags are additional pieces of metadata about a specific location, there are thousands of different tags. Some examples of tags: shop, office, cafe, bank, pub
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location-tags")]
		public string[] Location_tags { get; set; }
		
		/// <summary>
		/// The detected location type ordered roughly from most to least precise, possible values are: <br> <ul> <li>address - indicates a precise street address</li> <li>street - accurate to the street level but may not point to the exact location of the house/building number</li> <li>city - accurate to the city level, this includes villages, towns, suburbs, etc</li> <li>postal-code - indicates a postal code area (no house or street information present)</li> <li>railway - location is part of a rail network such as a station or railway track</li> <li>natural - indicates a natural feature, for example a mountain peak or a waterway</li> <li>island - location is an island or archipelago</li> <li>administrative - indicates an administrative boundary such as a country, state or province</li> </ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location-type")]
		public string Location_type { get; set; }
		
		/// <summary>
		/// The location longitude
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public double Longitude { get; set; }
		
		/// <summary>
		/// The formatted address using local standards suitable for printing on an envelope
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="postal-address")]
		public string Postal_address { get; set; }
		
		/// <summary>
		/// The postal code for the location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="postal-code")]
		public string Postal_code { get; set; }
		
		/// <summary>
		/// The ISO 3166-2 region code for the location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="region-code")]
		public string Region_code { get; set; }
		
		/// <summary>
		/// The state of the location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Map containing timezone details
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public Timezone Timezone { get; set; }
	}
	
	/// <summary>
	/// Map containing timezone details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Timezone
	{
		
		/// <summary>
		/// The time zone abbreviation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="abbr")]
		public string Abbr { get; set; }
		
		/// <summary>
		/// The current date at the time zone (ISO 8601 format 'YYYY-MM-DD')
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// The time zone ID as per the IANA time zone database (tzdata)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The full time zone name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The UTC offset for the time zone (ISO 8601 format '±hh:mm')
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public string Offset { get; set; }
		
		/// <summary>
		/// The current time at the time zone (ISO 8601 format 'hh:mm:ss.sss')
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeocodeReverseResponse
	{
		
		/// <summary>
		/// The complete address using comma-separated values
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// The components which make up the address such as road, city, state, etc
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address-components")]
		public System.Collections.Generic.Dictionary<string, string> Address_components { get; set; }
		
		/// <summary>
		/// The city of the location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The country of the location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The ISO 2-letter country code of the location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country-code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// The ISO 3-letter country code of the location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country-code3")]
		public string Country_code3 { get; set; }
		
		/// <summary>
		/// ISO 4217 currency code associated with the country
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency-code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// True if these coordinates map to a real location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="found")]
		public bool Found { get; set; }
		
		/// <summary>
		/// The location latitude
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public double Latitude { get; set; }
		
		/// <summary>
		/// Array of strings containing any location tags associated with the address. Tags are additional pieces of metadata about a specific location, there are thousands of different tags. Some examples of tags: shop, office, cafe, bank, pub
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location-tags")]
		public string[] Location_tags { get; set; }
		
		/// <summary>
		/// The detected location type ordered roughly from most to least precise, possible values are: <br> <ul> <li>address - indicates a precise street address</li> <li>street - accurate to the street level but may not point to the exact location of the house/building number</li> <li>city - accurate to the city level, this includes villages, towns, suburbs, etc</li> <li>postal-code - indicates a postal code area (no house or street information present)</li> <li>railway - location is part of a rail network such as a station or railway track</li> <li>natural - indicates a natural feature, for example a mountain peak or a waterway</li> <li>island - location is an island or archipelago</li> <li>administrative - indicates an administrative boundary such as a country, state or province</li> </ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location-type")]
		public string Location_type { get; set; }
		
		/// <summary>
		/// The location longitude
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public double Longitude { get; set; }
		
		/// <summary>
		/// The formatted address using local standards suitable for printing on an envelope
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="postal-address")]
		public string Postal_address { get; set; }
		
		/// <summary>
		/// The postal code for the location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="postal-code")]
		public string Postal_code { get; set; }
		
		/// <summary>
		/// The ISO 3166-2 region code for the location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="region-code")]
		public string Region_code { get; set; }
		
		/// <summary>
		/// The state of the location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Map containing timezone details for the location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public System.Collections.Generic.Dictionary<string, Timezone> Timezone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HLRLookupResponse
	{
		
		/// <summary>
		/// The phone number country
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The number location as an ISO 2-letter country code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country-code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// The number location as an ISO 3-letter country code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country-code3")]
		public string Country_code3 { get; set; }
		
		/// <summary>
		/// ISO 4217 currency code associated with the country
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency-code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// The currently used network/carrier name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="current-network")]
		public string Current_network { get; set; }
		
		/// <summary>
		/// The HLR lookup status, possible values are: <br> <ul> <li>ok - the HLR lookup was successful and the device is connected</li> <li>absent - the number was once registered but the device has been switched off or out of network range for some time</li> <li>unknown - the number is not known by the mobile network</li> <li>invalid - the number is not a valid mobile MSISDN number</li> <li>fixed-line - the number is a registered fixed-line not mobile</li> <li>voip - the number has been detected as a VOIP line</li> <li>failed - the HLR lookup has failed, we could not determine the real status of this number</li> </ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hlr-status")]
		public string Hlr_status { get; set; }
		
		/// <summary>
		/// Was the HLR lookup successful. If true then this is a working and registered cell-phone or mobile device (SMS and phone calls will be delivered)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hlr-valid")]
		public bool Hlr_valid { get; set; }
		
		/// <summary>
		/// The mobile IMSI number (International Mobile Subscriber Identity)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imsi")]
		public string Imsi { get; set; }
		
		/// <summary>
		/// The international calling code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="international-calling-code")]
		public string International_calling_code { get; set; }
		
		/// <summary>
		/// The number represented in full international format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="international-number")]
		public string International_number { get; set; }
		
		/// <summary>
		/// True if this is a mobile number (only true with 100% certainty, if the number type is unknown this value will be false)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-mobile")]
		public bool Is_mobile { get; set; }
		
		/// <summary>
		/// Has this number been ported to another network
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-ported")]
		public bool Is_ported { get; set; }
		
		/// <summary>
		/// Is this number currently roaming from its origin country
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-roaming")]
		public bool Is_roaming { get; set; }
		
		/// <summary>
		/// The number represented in local dialing format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="local-number")]
		public string Local_number { get; set; }
		
		/// <summary>
		/// The number location. Could be a city, region or country depending on the type of number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The mobile MCC number (Mobile Country Code)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mcc")]
		public string Mcc { get; set; }
		
		/// <summary>
		/// The mobile MNC number (Mobile Network Code)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mnc")]
		public string Mnc { get; set; }
		
		/// <summary>
		/// The mobile MSC number (Mobile Switching Center)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="msc")]
		public string Msc { get; set; }
		
		/// <summary>
		/// The mobile MSIN number (Mobile Subscription Identification Number)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="msin")]
		public string Msin { get; set; }
		
		/// <summary>
		/// The number type, possible values are: <br> <ul> <li>mobile</li> <li>fixed-line</li> <li>premium-rate</li> <li>toll-free</li> <li>voip</li> <li>unknown</li> </ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number-type")]
		public string Number_type { get; set; }
		
		/// <summary>
		/// True if this a valid phone number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number-valid")]
		public bool Number_valid { get; set; }
		
		/// <summary>
		/// The origin network/carrier name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="origin-network")]
		public string Origin_network { get; set; }
		
		/// <summary>
		/// The ported to network/carrier name (only set if the number has been ported)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ported-network")]
		public string Ported_network { get; set; }
		
		/// <summary>
		/// If the number is currently roaming, the ISO 2-letter country code of the roaming in country
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roaming-country-code")]
		public string Roaming_country_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HostReputationResponse
	{
		
		/// <summary>
		/// The IP address or host name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		/// <summary>
		/// Is this host blacklisted
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-listed")]
		public bool Is_listed { get; set; }
		
		/// <summary>
		/// The number of DNSBLs the host is listed on
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list-count")]
		public int List_count { get; set; }
		
		/// <summary>
		/// Array of objects for each DNSBL checked
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lists")]
		public Blacklist[] Lists { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IPBlocklistResponse
	{
		
		/// <summary>
		/// An array of strings indicating which blocklist categories this IP is listed on
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="blocklists")]
		public string[] Blocklists { get; set; }
		
		/// <summary>
		/// The CIDR address for this listing (only set if the IP is listed)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cidr")]
		public string Cidr { get; set; }
		
		/// <summary>
		/// The IP address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ip")]
		public string Ip { get; set; }
		
		/// <summary>
		/// IP is hosting a malicious bot or is part of a botnet. This is a broad category which includes brute-force crackers
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-bot")]
		public bool Is_bot { get; set; }
		
		/// <summary>
		/// IP has been flagged as a significant attack source by DShield (dshield.org)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-dshield")]
		public bool Is_dshield { get; set; }
		
		/// <summary>
		/// IP is hosting an exploit finding bot or is running exploit scanning software
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-exploit-bot")]
		public bool Is_exploit_bot { get; set; }
		
		/// <summary>
		/// IP is part of a hijacked netblock or a netblock controlled by a criminal organization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-hijacked")]
		public bool Is_hijacked { get; set; }
		
		/// <summary>
		/// Is this IP on a blocklist
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-listed")]
		public bool Is_listed { get; set; }
		
		/// <summary>
		/// IP is involved in distributing or is running malware
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-malware")]
		public bool Is_malware { get; set; }
		
		/// <summary>
		/// IP has been detected as an anonymous web proxy or anonymous HTTP proxy
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-proxy")]
		public bool Is_proxy { get; set; }
		
		/// <summary>
		/// IP address is hosting a spam bot, comment spamming or any other spamming type software
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-spam-bot")]
		public bool Is_spam_bot { get; set; }
		
		/// <summary>
		/// IP is running a hostile web spider / web crawler
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-spider")]
		public bool Is_spider { get; set; }
		
		/// <summary>
		/// IP is involved in distributing or is running spyware
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-spyware")]
		public bool Is_spyware { get; set; }
		
		/// <summary>
		/// IP is a Tor node or running a Tor related service
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-tor")]
		public bool Is_tor { get; set; }
		
		/// <summary>
		/// IP belongs to a public VPN provider (only set if the 'vpn-lookup' option is enabled)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-vpn")]
		public bool Is_vpn { get; set; }
		
		/// <summary>
		/// The unix time when this IP was last seen on any blocklist. IPs are automatically removed after 7 days therefor this value will never be older than 7 days
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="last-seen")]
		public int Last_seen { get; set; }
		
		/// <summary>
		/// The number of blocklists the IP is listed on
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list-count")]
		public int List_count { get; set; }
		
		/// <summary>
		/// An array of objects containing details on which specific sensors detected the IP
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sensors")]
		public BlocklistSensor[] Sensors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IPInfoResponse
	{
		
		/// <summary>
		/// Name of the city (if detectable)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// ISO 2-letter continent code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="continent-code")]
		public string Continent_code { get; set; }
		
		/// <summary>
		/// Full country name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// ISO 2-letter country code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country-code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// ISO 3-letter country code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country-code3")]
		public string Country_code3 { get; set; }
		
		/// <summary>
		/// ISO 4217 currency code associated with the country
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency-code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// The IPs host domain (only set if reverse-lookup has been used)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="host-domain")]
		public string Host_domain { get; set; }
		
		/// <summary>
		/// The IPs full hostname (only set if reverse-lookup has been used)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
		
		/// <summary>
		/// The IP address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ip")]
		public string Ip { get; set; }
		
		/// <summary>
		/// True if this is a bogon IP address such as a private network, local network or reserved address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-bogon")]
		public bool Is_bogon { get; set; }
		
		/// <summary>
		/// True if this is a <a href="https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses">IPv4 mapped IPv6 address</a>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-v4-mapped")]
		public bool Is_v4_mapped { get; set; }
		
		/// <summary>
		/// True if this is a IPv6 address. False if IPv4
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-v6")]
		public bool Is_v6 { get; set; }
		
		/// <summary>
		/// Location latitude
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public double Latitude { get; set; }
		
		/// <summary>
		/// Location longitude
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public double Longitude { get; set; }
		
		/// <summary>
		/// Name of the region (if detectable)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// ISO 3166-2 region code (if detectable)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="region-code")]
		public string Region_code { get; set; }
		
		/// <summary>
		/// Map containing timezone details
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public Timezone Timezone { get; set; }
		
		/// <summary>
		/// True if this is a valid IPv4 or IPv6 address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="valid")]
		public bool Valid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IPProbeResponse
	{
		
		/// <summary>
		/// The age of the autonomous system (AS) in number of years since registration
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="as-age")]
		public int As_age { get; set; }
		
		/// <summary>
		/// The autonomous system (AS) CIDR range
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="as-cidr")]
		public string As_cidr { get; set; }
		
		/// <summary>
		/// The autonomous system (AS) ISO 2-letter country code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="as-country-code")]
		public string As_country_code { get; set; }
		
		/// <summary>
		/// The autonomous system (AS) ISO 3-letter country code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="as-country-code3")]
		public string As_country_code3 { get; set; }
		
		/// <summary>
		/// The autonomous system (AS) description / company name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="as-description")]
		public string As_description { get; set; }
		
		/// <summary>
		/// Array of all the domains associated with the autonomous system (AS)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="as-domains")]
		public string[] As_domains { get; set; }
		
		/// <summary>
		/// The autonomous system (AS) number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="asn")]
		public string Asn { get; set; }
		
		/// <summary>
		/// Full city name (if detectable)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// ISO 2-letter continent code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="continent-code")]
		public string Continent_code { get; set; }
		
		/// <summary>
		/// Full country name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// ISO 2-letter country code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country-code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// ISO 3-letter country code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country-code3")]
		public string Country_code3 { get; set; }
		
		/// <summary>
		/// ISO 4217 currency code associated with the country
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency-code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// The IPs host domain
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="host-domain")]
		public string Host_domain { get; set; }
		
		/// <summary>
		/// The IPs full hostname (PTR)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
		
		/// <summary>
		/// The IP address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ip")]
		public string Ip { get; set; }
		
		/// <summary>
		/// True if this is a bogon IP address such as a private network, local network or reserved address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-bogon")]
		public bool Is_bogon { get; set; }
		
		/// <summary>
		/// True if this IP belongs to a hosting company. Note that this can still be true even if the provider type is VPN/proxy, this occurs in the case that the IP is detected as both types
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-hosting")]
		public bool Is_hosting { get; set; }
		
		/// <summary>
		/// True if this IP belongs to an internet service provider. Note that this can still be true even if the provider type is VPN/proxy, this occurs in the case that the IP is detected as both types
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-isp")]
		public bool Is_isp { get; set; }
		
		/// <summary>
		/// True if this IP ia a proxy
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-proxy")]
		public bool Is_proxy { get; set; }
		
		/// <summary>
		/// True if this is a <a href="https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses">IPv4 mapped IPv6 address</a>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-v4-mapped")]
		public bool Is_v4_mapped { get; set; }
		
		/// <summary>
		/// True if this is a IPv6 address. False if IPv4
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-v6")]
		public bool Is_v6 { get; set; }
		
		/// <summary>
		/// True if this IP ia a VPN
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-vpn")]
		public bool Is_vpn { get; set; }
		
		/// <summary>
		/// A description of the provider (usually extracted from the providers website)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider-description")]
		public string Provider_description { get; set; }
		
		/// <summary>
		/// The domain name of the provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider-domain")]
		public string Provider_domain { get; set; }
		
		/// <summary>
		/// The detected provider type, possible values are: <br> <ul> <li>isp - IP belongs to an internet service provider. This includes both mobile, home and business internet providers</li> <li>hosting - IP belongs to a hosting company. This includes website hosting, cloud computing platforms and colocation facilities</li> <li>vpn - IP belongs to a VPN provider</li> <li>proxy - IP belongs to a proxy service. This includes HTTP/SOCKS proxies and browser based proxies</li> <li>university - IP belongs to a university/college/campus</li> <li>government - IP belongs to a government department. This includes military facilities</li> <li>commercial - IP belongs to a commercial entity such as a corporate headquarters or company office</li> <li>unknown - could not identify the provider type</li> </ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider-type")]
		public string Provider_type { get; set; }
		
		/// <summary>
		/// The website URL for the provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider-website")]
		public string Provider_website { get; set; }
		
		/// <summary>
		/// Full region name (if detectable)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// ISO 3166-2 region code (if detectable)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="region-code")]
		public string Region_code { get; set; }
		
		/// <summary>
		/// True if this is a valid IPv4 or IPv6 address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="valid")]
		public bool Valid { get; set; }
		
		/// <summary>
		/// The domain of the VPN provider (may be empty if the VPN domain is not detectable)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vpn-domain")]
		public string Vpn_domain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PhonePlaybackResponse
	{
		
		/// <summary>
		/// True if the call is being made now
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="calling")]
		public bool Calling { get; set; }
		
		/// <summary>
		/// True if this a valid phone number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number-valid")]
		public bool Number_valid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PhoneValidateResponse
	{
		
		/// <summary>
		/// The phone number country
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The phone number country as an ISO 2-letter country code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country-code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// The phone number country as an ISO 3-letter country code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country-code3")]
		public string Country_code3 { get; set; }
		
		/// <summary>
		/// ISO 4217 currency code associated with the country
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency-code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// The international calling code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="international-calling-code")]
		public string International_calling_code { get; set; }
		
		/// <summary>
		/// The number represented in full international format (E.164)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="international-number")]
		public string International_number { get; set; }
		
		/// <summary>
		/// True if this is a mobile number. If the number type is unknown this value will be false
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-mobile")]
		public bool Is_mobile { get; set; }
		
		/// <summary>
		/// The number represented in local dialing format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="local-number")]
		public string Local_number { get; set; }
		
		/// <summary>
		/// The phone number location. Could be the city, region or country depending on the type of number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The network/carrier who owns the prefix (this only works for some countries, use HLR lookup for global network detection)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prefix-network")]
		public string Prefix_network { get; set; }
		
		/// <summary>
		/// The number type based on the number prefix. <br>Possible values are: <br> <ul> <li>mobile</li> <li>fixed-line</li> <li>premium-rate</li> <li>toll-free</li> <li>voip</li> <li>unknown (use HLR lookup)</li> </ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Is this a valid phone number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="valid")]
		public bool Valid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PhoneVerifyResponse
	{
		
		/// <summary>
		/// True if the call is being made now
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="calling")]
		public bool Calling { get; set; }
		
		/// <summary>
		/// True if this a valid phone number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number-valid")]
		public bool Number_valid { get; set; }
		
		/// <summary>
		/// The security code generated, you can save this code to perform your own verification or you can use the <a href="https://www.neutrinoapi.com/api/verify-security-code/">Verify Security Code API</a>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="security-code")]
		public string Security_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SMSVerifyResponse
	{
		
		/// <summary>
		/// True if this a valid phone number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number-valid")]
		public bool Number_valid { get; set; }
		
		/// <summary>
		/// The security code generated, you can save this code to perform your own verification or you can use the <a href="https://www.neutrinoapi.com/api/verify-security-code/">Verify Security Code API</a>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="security-code")]
		public string Security_code { get; set; }
		
		/// <summary>
		/// True if the SMS has been sent
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sent")]
		public bool Sent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UALookupResponse
	{
		
		/// <summary>
		/// If the client is a web browser which underlying browser engine does it use
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="browser-engine")]
		public string Browser_engine { get; set; }
		
		/// <summary>
		/// If the client is a web browser which year was this browser version released
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="browser-release")]
		public string Browser_release { get; set; }
		
		/// <summary>
		/// The device brand / manufacturer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="device-brand")]
		public string Device_brand { get; set; }
		
		/// <summary>
		/// The device display height in CSS 'px'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="device-height-px")]
		public double Device_height_px { get; set; }
		
		/// <summary>
		/// The device model
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="device-model")]
		public string Device_model { get; set; }
		
		/// <summary>
		/// The device model code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="device-model-code")]
		public string Device_model_code { get; set; }
		
		/// <summary>
		/// The device display pixel ratio (the ratio of the resolution in physical pixels to the resolution in CSS pixels)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="device-pixel-ratio")]
		public double Device_pixel_ratio { get; set; }
		
		/// <summary>
		/// The device display PPI (pixels per inch)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="device-ppi")]
		public double Device_ppi { get; set; }
		
		/// <summary>
		/// The average device price on release in USD
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="device-price")]
		public double Device_price { get; set; }
		
		/// <summary>
		/// The year when this device model was released
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="device-release")]
		public string Device_release { get; set; }
		
		/// <summary>
		/// The device display resolution in physical pixels (e.g. 720x1280)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="device-resolution")]
		public string Device_resolution { get; set; }
		
		/// <summary>
		/// The device display width in CSS 'px'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="device-width-px")]
		public double Device_width_px { get; set; }
		
		/// <summary>
		/// Is this a mobile device (e.g. a phone or tablet)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-mobile")]
		public bool Is_mobile { get; set; }
		
		/// <summary>
		/// Is this a WebView / embedded software client
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-webview")]
		public bool Is_webview { get; set; }
		
		/// <summary>
		/// The client software name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The full operating system name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="os")]
		public string Os { get; set; }
		
		/// <summary>
		/// The operating system family. The major OS families are: Android, Windows, macOS, iOS, Linux
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="os-family")]
		public string Os_family { get; set; }
		
		/// <summary>
		/// The operating system full version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="os-version")]
		public string Os_version { get; set; }
		
		/// <summary>
		/// The operating system major version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="os-version-major")]
		public string Os_version_major { get; set; }
		
		/// <summary>
		/// The user agent type, possible values are: <br> <ul> <li>desktop</li> <li>phone</li> <li>tablet</li> <li>wearable</li> <li>tv</li> <li>console</li> <li>email</li> <li>library</li> <li>robot</li> <li>unknown</li> </ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The user agent string
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ua")]
		public string Ua { get; set; }
		
		/// <summary>
		/// The client software full version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		/// <summary>
		/// The client software major version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version-major")]
		public string Version_major { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class URLInfoResponse
	{
		
		/// <summary>
		/// The actual content this URL responded with. Only set if the 'fetch-content' option was used
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The encoding format the URL uses
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content-encoding")]
		public string Content_encoding { get; set; }
		
		/// <summary>
		/// The size of the URL content in bytes
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content-size")]
		public int Content_size { get; set; }
		
		/// <summary>
		/// The content-type this URL serves
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content-type")]
		public string Content_type { get; set; }
		
		/// <summary>
		/// True if this URL responded with an HTTP OK (200) status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="http-ok")]
		public bool Http_ok { get; set; }
		
		/// <summary>
		/// True if this URL responded with an HTTP redirect
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="http-redirect")]
		public bool Http_redirect { get; set; }
		
		/// <summary>
		/// The HTTP status code this URL responded with. An HTTP status of 0 indicates a network level issue
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="http-status")]
		public int Http_status { get; set; }
		
		/// <summary>
		/// The HTTP status message assoicated with the status code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="http-status-message")]
		public int Http_status_message { get; set; }
		
		/// <summary>
		/// True if an error occurred while loading the URL. This includes network errors, TLS errors and timeouts
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-error")]
		public bool Is_error { get; set; }
		
		/// <summary>
		/// True if a timeout occurred while loading the URL. You can set the timeout with the request parameter 'timeout'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is-timeout")]
		public bool Is_timeout { get; set; }
		
		/// <summary>
		/// The ISO 2-letter language code of the page. Extracted from either the HTML document or via HTTP headers
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="language-code")]
		public string Language_code { get; set; }
		
		/// <summary>
		/// The time taken to load the URL content in seconds
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="load-time")]
		public double Load_time { get; set; }
		
		/// <summary>
		/// A key-value map of the URL query paramaters
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="query")]
		public System.Collections.Generic.Dictionary<string, string> Query { get; set; }
		
		/// <summary>
		/// Is this URL actually serving real content
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="real")]
		public bool Real { get; set; }
		
		/// <summary>
		/// The servers IP geo-location: full city name (if detectable)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="server-city")]
		public string Server_city { get; set; }
		
		/// <summary>
		/// The servers IP geo-location: full country name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="server-country")]
		public string Server_country { get; set; }
		
		/// <summary>
		/// The servers IP geo-location: ISO 2-letter country code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="server-country-code")]
		public string Server_country_code { get; set; }
		
		/// <summary>
		/// The servers hostname (PTR record)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="server-hostname")]
		public string Server_hostname { get; set; }
		
		/// <summary>
		/// The IP address of the server hosting this URL
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="server-ip")]
		public string Server_ip { get; set; }
		
		/// <summary>
		/// The name of the server software hosting this URL
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="server-name")]
		public string Server_name { get; set; }
		
		/// <summary>
		/// The servers IP geo-location: full region name (if detectable)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="server-region")]
		public string Server_region { get; set; }
		
		/// <summary>
		/// The document title
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The fully qualified URL. This may be different to the URL requested if http-redirect is true
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The URL path
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url-path")]
		public string Url_path { get; set; }
		
		/// <summary>
		/// The URL port
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url-port")]
		public int Url_port { get; set; }
		
		/// <summary>
		/// The URL protocol, usually http or https
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url-protocol")]
		public string Url_protocol { get; set; }
		
		/// <summary>
		/// Is this a valid well-formed URL
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="valid")]
		public bool Valid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifySecurityCodeResponse
	{
		
		/// <summary>
		/// True if the code is valid
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="verified")]
		public bool Verified { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// BIN List Download
		/// Download our entire BIN database for direct use on your own systems
		/// BINListDownload bin-list-download
		/// </summary>
		/// <param name="include_iso3">Include ISO 3-letter country codes and ISO 3-letter currency codes in the data. These will be added to columns 10 and 11 respectively</param>
		/// <param name="include_8digit">Include 8-digit and higher BIN codes. This option includes all 6-digit BINs and all 8-digit and higher BINs (including some 9, 10 and 11 digit BINs where available)</param>
		public async Task<string> BINListDownloadAsync(bool include_iso3, bool include_8digit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bin-list-download?include-iso3="+include_iso3+"&include-8digit="+include_8digit;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// BIN Lookup
		/// Perform a BIN (Bank Identification Number) or IIN (Issuer Identification Number) lookup
		/// BINLookup bin-lookup
		/// </summary>
		/// <param name="bin_number">The BIN or IIN number. This is the first 6, 8 or 10 digits of a card number, use 8 (or more) digits for the highest level of accuracy</param>
		/// <param name="customer_ip">Pass in the customers IP address and we will return some extra information about them</param>
		public async Task<BINLookupResponse> BINLookupAsync(string bin_number, string customer_ip, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bin-lookup?bin-number=" + (bin_number==null? "" : System.Uri.EscapeDataString(bin_number))+"&customer-ip=" + (customer_ip==null? "" : System.Uri.EscapeDataString(customer_ip));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BINLookupResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Convert
		/// A currency and unit conversion tool
		/// Convert convert
		/// </summary>
		/// <param name="from_value">The value to convert from (e.g. 10.95)</param>
		/// <param name="from_type">The type of the value to convert from (e.g. USD)</param>
		/// <param name="to_type">The type to convert to (e.g. EUR)</param>
		public async Task<ConvertResponse> ConvertAsync(string from_value, string from_type, string to_type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "convert?from-value=" + (from_value==null? "" : System.Uri.EscapeDataString(from_value))+"&from-type=" + (from_type==null? "" : System.Uri.EscapeDataString(from_type))+"&to-type=" + (to_type==null? "" : System.Uri.EscapeDataString(to_type));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ConvertResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Domain Lookup
		/// Retrieve domain name details and detect potentially malicious or dangerous domains
		/// DomainLookup domain-lookup
		/// </summary>
		/// <param name="host">A domain name, hostname, FQDN, URL, HTML link or email address to lookup</param>
		/// <param name="live">For domains that we have never seen before then perform various live checks and realtime reconnaissance. <br>NOTE: this option may add additional non-deterministic delay to the request, if you require consistently fast API response times or just want to check our domain blocklists then you can disable this option</param>
		public async Task<DomainLookupResponse> DomainLookupAsync(string host, bool live, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domain-lookup?host=" + (host==null? "" : System.Uri.EscapeDataString(host))+"&live="+live;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DomainLookupResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Email Validate
		/// Parse, validate and clean an email address
		/// EmailValidate email-validate
		/// </summary>
		/// <param name="email">An email address</param>
		/// <param name="fix_typos">Automatically attempt to fix typos in the address</param>
		public async Task<EmailValidateResponse> EmailValidateAsync(string email, bool fix_typos, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email-validate?email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&fix-typos="+fix_typos;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EmailValidateResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Email Verify
		/// SMTP based email address verification
		/// EmailVerify email-verify
		/// </summary>
		/// <param name="email">An email address</param>
		/// <param name="fix_typos">Automatically attempt to fix typos in the address</param>
		public async Task<EmailVerifyResponse> EmailVerifyAsync(string email, bool fix_typos, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email-verify?email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&fix-typos="+fix_typos;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EmailVerifyResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Geocode Address
		/// Geocode an address, partial address or just the name of a place
		/// GeocodeAddress geocode-address
		/// </summary>
		/// <param name="address">The full address, partial address or name of a place to try and locate. Comma separated address components are preferred.</param>
		/// <param name="house_number">The house/building number to locate</param>
		/// <param name="street">The street/road name to locate</param>
		/// <param name="city">The city/town name to locate</param>
		/// <param name="county">The county/region name to locate</param>
		/// <param name="state">The state name to locate</param>
		/// <param name="postal_code">The postal code to locate</param>
		/// <param name="country_code">Limit result to this country (the default is no country bias)</param>
		/// <param name="language_code">The language to display results in, available languages are: <ul> <li>de, en, es, fr, it, pt, ru, zh</li> </ul></param>
		/// <param name="fuzzy_search">If no matches are found for the given address, start performing a recursive fuzzy search until a geolocation is found. This option is recommended for processing user input or implementing auto-complete. We use a combination of approximate string matching and data cleansing to find possible location matches</param>
		public async Task<GeocodeAddressResponse> GeocodeAddressAsync(string address, string house_number, string street, string city, string county, string state, string postal_code, string country_code, string language_code, bool fuzzy_search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "geocode-address?address=" + (address==null? "" : System.Uri.EscapeDataString(address))+"&house-number=" + (house_number==null? "" : System.Uri.EscapeDataString(house_number))+"&street=" + (street==null? "" : System.Uri.EscapeDataString(street))+"&city=" + (city==null? "" : System.Uri.EscapeDataString(city))+"&county=" + (county==null? "" : System.Uri.EscapeDataString(county))+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&postal-code=" + (postal_code==null? "" : System.Uri.EscapeDataString(postal_code))+"&country-code=" + (country_code==null? "" : System.Uri.EscapeDataString(country_code))+"&language-code=" + (language_code==null? "" : System.Uri.EscapeDataString(language_code))+"&fuzzy-search="+fuzzy_search;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GeocodeAddressResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Geocode Reverse
		/// Convert a geographic coordinate (latitude and longitude) into a real world address
		/// GeocodeReverse geocode-reverse
		/// </summary>
		/// <param name="latitude">The location latitude in decimal degrees format</param>
		/// <param name="longitude">The location longitude in decimal degrees format</param>
		/// <param name="language_code">The language to display results in, available languages are: <ul> <li>de, en, es, fr, it, pt, ru</li> </ul></param>
		/// <param name="zoom">The zoom level to respond with: <br> <ul> <li>address - the most precise address available</li> <li>street - the street level</li> <li>city - the city level</li> <li>state - the state level</li> <li>country - the country level</li> </ul></param>
		public async Task<GeocodeReverseResponse> GeocodeReverseAsync(string latitude, string longitude, string language_code, string zoom, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "geocode-reverse?latitude=" + (latitude==null? "" : System.Uri.EscapeDataString(latitude))+"&longitude=" + (longitude==null? "" : System.Uri.EscapeDataString(longitude))+"&language-code=" + (language_code==null? "" : System.Uri.EscapeDataString(language_code))+"&zoom=" + (zoom==null? "" : System.Uri.EscapeDataString(zoom));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GeocodeReverseResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// HLR Lookup
		/// Connect to the global mobile cellular network and retrieve the status of a mobile device
		/// HLRLookup hlr-lookup
		/// </summary>
		/// <param name="number">A phone number</param>
		/// <param name="country_code">ISO 2-letter country code, assume numbers are based in this country. <br>If not set numbers are assumed to be in international format (with or without the leading + sign)</param>
		public async Task<HLRLookupResponse> HLRLookupAsync(string number, string country_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hlr-lookup?number=" + (number==null? "" : System.Uri.EscapeDataString(number))+"&country-code=" + (country_code==null? "" : System.Uri.EscapeDataString(country_code));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HLRLookupResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Host Reputation
		/// Check the reputation of an IP address, domain name or URL against a comprehensive list of blacklists and blocklists
		/// HostReputation host-reputation
		/// </summary>
		/// <param name="host">An IP address, domain name, FQDN or URL. <br>If you supply a domain/URL it will be checked against the URI DNSBL lists</param>
		/// <param name="list_rating">Only check lists with this rating or better</param>
		/// <param name="zones">Only check these DNSBL zones/hosts. Multiple zones can be supplied as comma-separated values</param>
		public async Task<HostReputationResponse> HostReputationAsync(string host, int list_rating, string zones, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "host-reputation?host=" + (host==null? "" : System.Uri.EscapeDataString(host))+"&list-rating="+list_rating+"&zones=" + (zones==null? "" : System.Uri.EscapeDataString(zones));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HostReputationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// IP Blocklist
		/// The IP Blocklist API will detect potentially malicious or dangerous IP addresses
		/// IPBlocklist ip-blocklist
		/// </summary>
		/// <param name="ip">An IPv4 or IPv6 address. Accepts standard IP notation (with or without port number), CIDR notation and IPv6 compressed notation. If multiple IPs are passed using comma-separated values the first non-bogon address on the list will be checked</param>
		/// <param name="vpn_lookup">Include public VPN provider IP addresses. <br><b>NOTE</b>: For more advanced VPN detection including the ability to identify private and stealth VPNs use the <a href="https://www.neutrinoapi.com/api/ip-probe/">IP Probe API</a></param>
		public async Task<IPBlocklistResponse> IPBlocklistAsync(string ip, bool vpn_lookup, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ip-blocklist?ip=" + (ip==null? "" : System.Uri.EscapeDataString(ip))+"&vpn-lookup="+vpn_lookup;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<IPBlocklistResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// IP Blocklist Download
		/// This API is a direct feed to our IP blocklist data
		/// IPBlocklistDownload ip-blocklist-download
		/// </summary>
		/// <param name="format">The data format. Can be either CSV or TXT</param>
		/// <param name="include_vpn">Include public VPN provider addresses, this option is only available for Tier 3 or higher accounts. Adds any IPs which are solely listed as VPN providers, IPs that are listed on multiple sensors will still be included without enabling this option. <br><b>WARNING</b>: This adds at least an additional 8 million IP addresses to the download if not using CIDR notation</param>
		/// <param name="cidr">Output IPs using CIDR notation. This option should be preferred but is off by default for backwards compatibility</param>
		/// <param name="ip6">Output the IPv6 version of the blocklist, the default is to output IPv4 only. Note that this option enables CIDR notation too as this is the only notation currently supported for IPv6</param>
		public async Task<string> IPBlocklistDownloadAsync(string format, bool include_vpn, bool cidr, bool ip6, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ip-blocklist-download?format=" + (format==null? "" : System.Uri.EscapeDataString(format))+"&include-vpn="+include_vpn+"&cidr="+cidr+"&ip6="+ip6;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// IP Info
		/// Get location information about an IP address and do reverse DNS (PTR) lookups
		/// IPInfo ip-info
		/// </summary>
		/// <param name="ip">IPv4 or IPv6 address</param>
		/// <param name="reverse_lookup">Do a reverse DNS (PTR) lookup. This option can add extra delay to the request so only use it if you need it</param>
		public async Task<IPInfoResponse> IPInfoAsync(string ip, bool reverse_lookup, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ip-info?ip=" + (ip==null? "" : System.Uri.EscapeDataString(ip))+"&reverse-lookup="+reverse_lookup;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<IPInfoResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// IP Probe
		/// Execute a realtime network probe against an IPv4 or IPv6 address
		/// IPProbe ip-probe
		/// </summary>
		/// <param name="ip">IPv4 or IPv6 address</param>
		public async Task<IPProbeResponse> IPProbeAsync(string ip, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ip-probe?ip=" + (ip==null? "" : System.Uri.EscapeDataString(ip));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<IPProbeResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Phone Validate
		/// Parse, validate and get location information about a phone number
		/// PhoneValidate phone-validate
		/// </summary>
		/// <param name="number">A phone number. This can be in international format (E.164) or local format. If passing local format you must also set either the 'country-code' OR 'ip' options as well</param>
		/// <param name="country_code">ISO 2-letter country code, assume numbers are based in this country. If not set numbers are assumed to be in international format (with or without the leading + sign)</param>
		/// <param name="ip">Pass in a users IP address and we will assume numbers are based in the country of the IP address</param>
		public async Task<PhoneValidateResponse> PhoneValidateAsync(string number, string country_code, string ip, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "phone-validate?number=" + (number==null? "" : System.Uri.EscapeDataString(number))+"&country-code=" + (country_code==null? "" : System.Uri.EscapeDataString(country_code))+"&ip=" + (ip==null? "" : System.Uri.EscapeDataString(ip));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PhoneValidateResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// UA Lookup
		/// Parse, validate and get detailed user-agent information from a user agent string or from client hints
		/// UALookup ua-lookup
		/// </summary>
		/// <param name="ua">The user-agent string to lookup. For client hints use the 'UA' header or the JSON data directly from 'navigator.userAgentData.brands' or 'navigator.userAgentData.getHighEntropyValues()'</param>
		/// <param name="ua_version">For client hints this corresponds to the 'UA-Full-Version' header or 'uaFullVersion' from NavigatorUAData</param>
		/// <param name="ua_platform">For client hints this corresponds to the 'UA-Platform' header or 'platform' from NavigatorUAData</param>
		/// <param name="ua_platform_version">For client hints this corresponds to the 'UA-Platform-Version' header or 'platformVersion' from NavigatorUAData</param>
		/// <param name="ua_mobile">For client hints this corresponds to the 'UA-Mobile' header or 'mobile' from NavigatorUAData</param>
		/// <param name="device_model">For client hints this corresponds to the 'UA-Model' header or 'model' from NavigatorUAData. <br>You can also use this parameter to lookup a device directly by its model name, model code or hardware code, on android you can get the model name from: https://developer.android.com/reference/android/os/Build.html#MODEL</param>
		/// <param name="device_brand">This parameter is only used in combination with 'device-model' when doing direct device lookups without any user-agent data. Set this to the brand or manufacturer name, this is required for accurate device detection with ambiguous model names. On android you can get the device brand from: https://developer.android.com/reference/android/os/Build#MANUFACTURER</param>
		public async Task<UALookupResponse> UALookupAsync(string ua, string ua_version, string ua_platform, string ua_platform_version, string ua_mobile, string device_model, string device_brand, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ua-lookup?ua=" + (ua==null? "" : System.Uri.EscapeDataString(ua))+"&ua-version=" + (ua_version==null? "" : System.Uri.EscapeDataString(ua_version))+"&ua-platform=" + (ua_platform==null? "" : System.Uri.EscapeDataString(ua_platform))+"&ua-platform-version=" + (ua_platform_version==null? "" : System.Uri.EscapeDataString(ua_platform_version))+"&ua-mobile=" + (ua_mobile==null? "" : System.Uri.EscapeDataString(ua_mobile))+"&device-model=" + (device_model==null? "" : System.Uri.EscapeDataString(device_model))+"&device-brand=" + (device_brand==null? "" : System.Uri.EscapeDataString(device_brand));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UALookupResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// URL Info
		/// Parse, analyze and retrieve content from the supplied URL
		/// URLInfo url-info
		/// </summary>
		/// <param name="url">The URL to probe</param>
		/// <param name="fetch_content">If this URL responds with html, text, json or xml then return the response. This option is useful if you want to perform further processing on the URL content (e.g. with the HTML Extract or HTML Clean APIs)</param>
		/// <param name="ignore_certificate_errors">Ignore any TLS/SSL certificate errors and load the URL anyway</param>
		/// <param name="timeout">Timeout in seconds. Give up if still trying to load the URL after this number of seconds</param>
		/// <param name="retry">If the request fails for any reason try again this many times</param>
		public async Task<URLInfoResponse> URLInfoAsync(string url, bool fetch_content, bool ignore_certificate_errors, int timeout, int retry, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "url-info?url=" + (url==null? "" : System.Uri.EscapeDataString(url))+"&fetch-content="+fetch_content+"&ignore-certificate-errors="+ignore_certificate_errors+"&timeout="+timeout+"&retry="+retry;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<URLInfoResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Verify Security Code
		/// Check if a security code sent via SMS Verify or Phone Verify is valid
		/// VerifySecurityCode verify-security-code
		/// </summary>
		/// <param name="security_code">The security code to verify</param>
		/// <param name="limit_by">If set then enable additional brute-force protection by limiting the number of attempts by the supplied value. This can be set to any unique identifier you would like to limit by, for example a hash of the users email, phone number or IP address. Requests to this API will be ignored after approximately 10 failed verification attempts</param>
		public async Task<VerifySecurityCodeResponse> VerifySecurityCodeAsync(string security_code, string limit_by, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "verify-security-code?security-code=" + (security_code==null? "" : System.Uri.EscapeDataString(security_code))+"&limit-by=" + (limit_by==null? "" : System.Uri.EscapeDataString(limit_by));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<VerifySecurityCodeResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
