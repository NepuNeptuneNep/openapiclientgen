//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateGameResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GameDetails Game { get; set; }
	}
	
	/// <summary>
	/// Details about a game.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GameDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableTerminationProtection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GameState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GameState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SnapshotDetails Snapshot { get; set; }
	}
	
	/// <summary>
	/// Properties that provide details of a snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SnapshotDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Sections Sections { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Sections
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateStageResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StageDetails Stage { get; set; }
	}
	
	/// <summary>
	/// Properties that provide details of a stage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StageDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GameKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LogGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GameState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteGameResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteStageResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisconnectPlayerResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DisconnectFailures { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DisconnectSuccesses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetExtensionResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ExtensionDetails Extension { get; set; }
	}
	
	/// <summary>
	/// Details about the extension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExtensionDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetExtensionVersionResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ExtensionVersionDetails ExtensionVersion { get; set; }
	}
	
	/// <summary>
	/// Details about the extension version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExtensionVersionDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetGameResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GameDetails Game { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetGameConfigurationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GameConfigurationDetails GameConfiguration { get; set; }
	}
	
	/// <summary>
	/// <p>Details about the game configuration.</p> <p> The game configuration is organized into named sections, where the schema of each section is defined by an extension. The schema for these sections can be retrieved using the <code>GetExtensionVersion</code> operation. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GameConfigurationDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Sections Sections { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetGeneratedCodeJobResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GeneratedCodeJobDetails GeneratedCodeJob { get; set; }
	}
	
	/// <summary>
	/// Details about a generated code job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeneratedCodeJobDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ExpirationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GeneratedCodeJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GeneratedCodeJobState Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GeneratedCodeJobState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPlayerConnectionStatusResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Connection[] Connections { get; set; }
	}
	
	/// <summary>
	/// Details about a WebSocket connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Connection
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SnapshotDetails Snapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetStageResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StageDetails Stage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetStageDeploymentResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StageDeploymentDetails StageDeployment { get; set; }
	}
	
	/// <summary>
	/// Properties that provide details of a stage deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StageDeploymentDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentAction DeploymentAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentResult DeploymentResult { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentState DeploymentState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeploymentAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNDEPLOY = 1,
	}
	
	/// <summary>
	/// The result of the deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResultCode ResultCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ResultCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_ROLE_FAILURE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED_FAILURE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeploymentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportGameConfigurationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GameConfigurationDetails GameConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListExtensionVersionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ExtensionVersionDetails[] ExtensionVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListExtensionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ExtensionDetails[] Extensions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGamesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GameSummary[] Games { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The summary of the properties of a game.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GameSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GameState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGeneratedCodeJobsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GeneratedCodeJobDetails[] GeneratedCodeJobs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSnapshotsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnapshotSummary[] Snapshots { get; set; }
	}
	
	/// <summary>
	/// The summary of the properties of a snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SnapshotSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStageDeploymentsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StageDeploymentSummary[] StageDeployments { get; set; }
	}
	
	/// <summary>
	/// The summary of the properties of a stage deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StageDeploymentSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentAction DeploymentAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentResult DeploymentResult { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentState DeploymentState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStagesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StageSummary[] Stages { get; set; }
	}
	
	/// <summary>
	/// The summary of the properties of a stage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StageSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GameKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GameState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartGeneratedCodeJobResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GeneratedCodeJobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartStageDeploymentResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StageDeploymentDetails StageDeployment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGameResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GameDetails Game { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGameConfigurationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GameConfigurationDetails GameConfiguration { get; set; }
	}
	
	/// <summary>
	/// A single modification to the configuration section.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SectionModification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Operation Operation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Section { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Document Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Operation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLACE = 2,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Document
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SnapshotDetails Snapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateStageResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StageDetails Stage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateGameRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GameName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSnapshotRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateStageRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteGameRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteStageRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisconnectPlayerRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportSnapshotRequest
	{
	}
	
	/// <summary>
	/// Properties that specify the code generator for a generated code job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Generator
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GameSdkVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetPlatform { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetExtensionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetExtensionVersionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetGameConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetGameRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetGeneratedCodeJobRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPlayerConnectionStatusRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSnapshotRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetStageDeploymentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetStageRequest
	{
	}
	
	/// <summary>
	/// The source used to import configuration sections.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportGameConfigurationSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string File { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportGameConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ImportGameConfigurationSource ImportSource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListExtensionVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListExtensionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGamesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGeneratedCodeJobsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSnapshotsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStageDeploymentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStagesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	/// <summary>
	/// The configuration section.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Section
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Document Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StageState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartGeneratedCodeJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Generator Generator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartStageDeploymentRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGameConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SectionModification[] Modifications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGameRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSnapshotRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateStageRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a new game with an empty configuration. After creating your game, you can update the configuration using <code>UpdateGameConfiguration</code> or <code>ImportGameConfiguration</code>.
		/// CreateGame game
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateGameResult> CreateGameAsync(CreateGamePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateGameResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a paginated list of games.
		/// ListGames game
		/// </summary>
		/// <param name="MaxResults"><p>The maximum number of results to return.</p> <p> Use this parameter with NextToken to get results as a set of sequential pages. </p>
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="NextToken"><p>The token that indicates the start of the next sequential page of results.</p> <p> Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. </p>
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <returns>Success</returns>
		public async Task<ListGamesResult> ListGamesAsync(int MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game?MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListGamesResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a snapshot of the game configuration.
		/// CreateSnapshot game/{GameName}/snapshot
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateSnapshotResult> CreateSnapshotAsync(string GameName, CreateSnapshotPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName))+"/snapshot";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateSnapshotResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a paginated list of snapshot summaries from the game.
		/// ListSnapshots game/{GameName}/snapshot
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="MaxResults"><p>The maximum number of results to return.</p> <p> Use this parameter with NextToken to get results as a set of sequential pages. </p>
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="NextToken"><p>The token that indicates the start of the next sequential page of results.</p> <p> Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. </p>
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <returns>Success</returns>
		public async Task<ListSnapshotsResult> ListSnapshotsAsync(string GameName, int MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName))+"/snapshot&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListSnapshotsResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new stage for stage-by-stage game development and deployment.
		/// CreateStage game/{GameName}/stage
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateStageResult> CreateStageAsync(string GameName, CreateStagePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName))+"/stage";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateStageResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a paginated list of stage summaries from the game.
		/// ListStages game/{GameName}/stage
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="MaxResults"><p>The maximum number of results to return.</p> <p> Use this parameter with NextToken to get results as a set of sequential pages. </p>
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="NextToken"><p>The token that indicates the start of the next sequential page of results.</p> <p> Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. </p>
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <returns>Success</returns>
		public async Task<ListStagesResult> ListStagesAsync(string GameName, int MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName))+"/stage&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListStagesResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a game.
		/// DeleteGame game/{GameName}
		/// </summary>
		/// <param name="GameName">The name of the game to delete.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteGameResult> DeleteGameAsync(string GameName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteGameResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets details about a game.
		/// GetGame game/{GameName}
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetGameResult> GetGameAsync(string GameName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetGameResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates details of the game.
		/// UpdateGame game/{GameName}
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateGameResult> UpdateGameAsync(string GameName, UpdateGamePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateGameResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a stage from a game, along with the associated game runtime.
		/// DeleteStage game/{GameName}/stage/{StageName}
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="StageName">The name of the stage to delete.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteStageResult> DeleteStageAsync(string GameName, string StageName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName))+"/stage/"+ (StageName==null? "" : System.Uri.EscapeDataString(StageName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteStageResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets information about a stage.
		/// GetStage game/{GameName}/stage/{StageName}
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="StageName">The name of the stage.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetStageResult> GetStageAsync(string GameName, string StageName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName))+"/stage/"+ (StageName==null? "" : System.Uri.EscapeDataString(StageName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetStageResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the metadata of a stage.
		/// UpdateStage game/{GameName}/stage/{StageName}
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="StageName">The name of the stage.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateStageResult> UpdateStageAsync(string GameName, string StageName, UpdateStagePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName))+"/stage/"+ (StageName==null? "" : System.Uri.EscapeDataString(StageName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateStageResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Disconnects a player from the game runtime.</p> <p> If a player has multiple connections, this operation attempts to close all of them. </p>
		/// DisconnectPlayer runtime/game/{GameName}/stage/{StageName}/player/{PlayerId}/disconnect
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="PlayerId">The unique identifier representing a player.
		/// Min length: 1
		/// Max length: 44
		// </param>
		/// <param name="StageName">The name of the stage.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<DisconnectPlayerResult> DisconnectPlayerAsync(string GameName, string PlayerId, string StageName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "runtime/game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName))+"/stage/"+ (StageName==null? "" : System.Uri.EscapeDataString(StageName))+"/player/"+ (PlayerId==null? "" : System.Uri.EscapeDataString(PlayerId))+"/disconnect";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DisconnectPlayerResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Exports a game configuration snapshot.
		/// ExportSnapshot game/{GameName}/snapshot/{SnapshotId}/export
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="SnapshotId">The identifier of the snapshot to export.
		/// Min length: 33
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<ExportSnapshotResult> ExportSnapshotAsync(string GameName, string SnapshotId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName))+"/snapshot/"+ (SnapshotId==null? "" : System.Uri.EscapeDataString(SnapshotId))+"/export";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ExportSnapshotResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets details about a specified extension.
		/// GetExtension extension/{Namespace}/{Name}
		/// </summary>
		/// <param name="Name">The name of the extension.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="Namespace">The namespace (qualifier) of the extension.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetExtensionResult> GetExtensionAsync(string Name, string Namespace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "extension/"+ (Namespace==null? "" : System.Uri.EscapeDataString(Namespace))+"/"+ (Name==null? "" : System.Uri.EscapeDataString(Name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetExtensionResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets details about a specified extension version.
		/// GetExtensionVersion extension/{Namespace}/{Name}/version/{ExtensionVersion}
		/// </summary>
		/// <param name="ExtensionVersion">The version of the extension.
		/// Min length: 0
		/// Max length: 20
		// </param>
		/// <param name="Name">The name of the extension.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="Namespace">The namespace (qualifier) of the extension.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetExtensionVersionResult> GetExtensionVersionAsync(string ExtensionVersion, string Name, string Namespace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "extension/"+ (Namespace==null? "" : System.Uri.EscapeDataString(Namespace))+"/"+ (Name==null? "" : System.Uri.EscapeDataString(Name))+"/version/"+ (ExtensionVersion==null? "" : System.Uri.EscapeDataString(ExtensionVersion));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetExtensionVersionResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the configuration of the game.
		/// GetGameConfiguration game/{GameName}/configuration
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="Sections">The list of sections to return.
		/// Minimum items: 1
		/// Maximum items: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<GetGameConfigurationResult> GetGameConfigurationAsync(string GameName, string[] Sections, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName))+"/configuration&"+string.Join("&", Sections.Select(z => $"Sections={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetGameConfigurationResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Imports a game configuration.</p> <p> This operation replaces the current configuration of the game with the provided input. This is not a reversible operation. If you want to preserve the previous configuration, use <code>CreateSnapshot</code> to make a new snapshot before importing. </p>
		/// ImportGameConfiguration game/{GameName}/configuration
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<ImportGameConfigurationResult> ImportGameConfigurationAsync(string GameName, ImportGameConfigurationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName))+"/configuration";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ImportGameConfigurationResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates one or more sections of the game configuration.
		/// UpdateGameConfiguration game/{GameName}/configuration
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateGameConfigurationResult> UpdateGameConfigurationAsync(string GameName, UpdateGameConfigurationPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName))+"/configuration";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateGameConfigurationResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets details about a job that is generating code for a snapshot.
		/// GetGeneratedCodeJob game/{GameName}/snapshot/{SnapshotId}/generated-sdk-code-job/{JobId}
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="JobId">The identifier of the code generation job.</param>
		/// <param name="SnapshotId">The identifier of the snapshot for the code generation job.
		/// Min length: 33
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetGeneratedCodeJobResult> GetGeneratedCodeJobAsync(string GameName, string JobId, string SnapshotId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName))+"/snapshot/"+ (SnapshotId==null? "" : System.Uri.EscapeDataString(SnapshotId))+"/generated-sdk-code-job/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetGeneratedCodeJobResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Gets the status of a player's connection to the game runtime.</p> <p> It's possible for a single player to have multiple connections to the game runtime. If a player is not connected, this operation returns an empty list. </p>
		/// GetPlayerConnectionStatus runtime/game/{GameName}/stage/{StageName}/player/{PlayerId}/connection
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="PlayerId">The unique identifier representing a player.
		/// Min length: 1
		/// Max length: 44
		// </param>
		/// <param name="StageName">The name of the stage.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetPlayerConnectionStatusResult> GetPlayerConnectionStatusAsync(string GameName, string PlayerId, string StageName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "runtime/game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName))+"/stage/"+ (StageName==null? "" : System.Uri.EscapeDataString(StageName))+"/player/"+ (PlayerId==null? "" : System.Uri.EscapeDataString(PlayerId))+"/connection";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetPlayerConnectionStatusResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a copy of the game configuration in a snapshot.
		/// GetSnapshot game/{GameName}/snapshot/{SnapshotId}
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="Sections">The list of game configuration sections to be described.
		/// Minimum items: 1
		/// Maximum items: 100
		// </param>
		/// <param name="SnapshotId">The identifier of the snapshot.
		/// Min length: 33
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetSnapshotResult> GetSnapshotAsync(string GameName, string[] Sections, string SnapshotId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName))+"/snapshot/"+ (SnapshotId==null? "" : System.Uri.EscapeDataString(SnapshotId))+"&"+string.Join("&", Sections.Select(z => $"Sections={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetSnapshotResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the metadata of a GameSparks snapshot.
		/// UpdateSnapshot game/{GameName}/snapshot/{SnapshotId}
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="SnapshotId">The identifier of the snapshot.
		/// Min length: 33
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateSnapshotResult> UpdateSnapshotAsync(string GameName, string SnapshotId, UpdateSnapshotPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName))+"/snapshot/"+ (SnapshotId==null? "" : System.Uri.EscapeDataString(SnapshotId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateSnapshotResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets information about a stage deployment.
		/// GetStageDeployment game/{GameName}/stage/{StageName}/deployment
		/// </summary>
		/// <param name="DeploymentId"> The identifier of the stage deployment. <code>StartStageDeployment</code> returns the identifier that you use here. 
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="StageName">The name of the stage.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetStageDeploymentResult> GetStageDeploymentAsync(string DeploymentId, string GameName, string StageName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName))+"/stage/"+ (StageName==null? "" : System.Uri.EscapeDataString(StageName))+"/deployment?DeploymentId=" + (DeploymentId==null? "" : System.Uri.EscapeDataString(DeploymentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetStageDeploymentResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Deploys a snapshot to the stage and creates a new game runtime.</p> <p> After you call this operation, you can check the deployment status by using <code>GetStageDeployment</code>. </p> <p> If there are any players connected to the previous game runtime, then both runtimes persist. Existing connections to the previous runtime are maintained. When players disconnect and reconnect, they connect to the new runtime. After there are no connections to the previous game runtime, it is deleted. </p>
		/// StartStageDeployment game/{GameName}/stage/{StageName}/deployment
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="StageName">The name of the stage to deploy the snapshot onto.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<StartStageDeploymentResult> StartStageDeploymentAsync(string GameName, string StageName, StartStageDeploymentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName))+"/stage/"+ (StageName==null? "" : System.Uri.EscapeDataString(StageName))+"/deployment";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartStageDeploymentResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Gets a paginated list of available versions for the extension.</p> <p> Each time an API change is made to an extension, the version is incremented. The list retrieved by this operation shows the versions that are currently available. </p>
		/// ListExtensionVersions extension/{Namespace}/{Name}/version
		/// </summary>
		/// <param name="MaxResults"><p>The maximum number of results to return.</p> <p> Use this parameter with NextToken to get results as a set of sequential pages. </p>
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="Name">The name of the extension.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="Namespace">The namespace (qualifier) of the extension.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="NextToken"><p>The token that indicates the start of the next sequential page of results.</p> <p> Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. </p>
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <returns>Success</returns>
		public async Task<ListExtensionVersionsResult> ListExtensionVersionsAsync(int MaxResults, string Name, string Namespace, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "extension/"+ (Namespace==null? "" : System.Uri.EscapeDataString(Namespace))+"/"+ (Name==null? "" : System.Uri.EscapeDataString(Name))+"/version?MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListExtensionVersionsResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Gets a paginated list of available extensions.</p> <p> Extensions provide features that games can use from scripts. </p>
		/// ListExtensions extension
		/// </summary>
		/// <param name="MaxResults"><p>The maximum number of results to return.</p> <p> Use this parameter with NextToken to get results as a set of sequential pages. </p>
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="NextToken"><p>The token that indicates the start of the next sequential page of results.</p> <p> Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. </p>
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <returns>Success</returns>
		public async Task<ListExtensionsResult> ListExtensionsAsync(int MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "extension?MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListExtensionsResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a paginated list of code generation jobs for a snapshot.
		/// ListGeneratedCodeJobs game/{GameName}/snapshot/{SnapshotId}/generated-sdk-code-jobs
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="MaxResults"><p>The maximum number of results to return.</p> <p> Use this parameter with NextToken to get results as a set of sequential pages. </p>
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="NextToken"><p>The token that indicates the start of the next sequential page of results.</p> <p> Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. </p>
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <param name="SnapshotId">The identifier of the snapshot.
		/// Min length: 33
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<ListGeneratedCodeJobsResult> ListGeneratedCodeJobsAsync(string GameName, int MaxResults, string NextToken, string SnapshotId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName))+"/snapshot/"+ (SnapshotId==null? "" : System.Uri.EscapeDataString(SnapshotId))+"/generated-sdk-code-jobs&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListGeneratedCodeJobsResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a paginated list of stage deployment summaries from the game.
		/// ListStageDeployments game/{GameName}/stage/{StageName}/deployments
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="MaxResults"><p>The maximum number of results to return.</p> <p> Use this parameter with NextToken to get results as a set of sequential pages. </p>
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="NextToken"><p>The token that indicates the start of the next sequential page of results.</p> <p> Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. </p>
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <param name="StageName">The name of the stage.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<ListStageDeploymentsResult> ListStageDeploymentsAsync(string GameName, int MaxResults, string NextToken, string StageName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName))+"/stage/"+ (StageName==null? "" : System.Uri.EscapeDataString(StageName))+"/deployments&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListStageDeploymentsResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the tags associated with a GameSparks resource.
		/// ListTagsForResource tags/{ResourceArn}
		/// </summary>
		/// <param name="ResourceArn">The Amazon Resource Name (ARN) of the GameSparks resource.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResult> ListTagsForResourceAsync(string ResourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (ResourceArn==null? "" : System.Uri.EscapeDataString(ResourceArn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Adds tags to a GameSparks resource.
		/// TagResource tags/{ResourceArn}
		/// </summary>
		/// <param name="ResourceArn">The Amazon Resource Name (ARN) of the resource to add the tags to.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResult> TagResourceAsync(string ResourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (ResourceArn==null? "" : System.Uri.EscapeDataString(ResourceArn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TagResourceResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Starts an asynchronous process that generates client code for system-defined and custom messages. The resulting code is collected as a .zip file and uploaded to a pre-signed Amazon S3 URL.
		/// StartGeneratedCodeJob game/{GameName}/snapshot/{SnapshotId}/generated-sdk-code-job
		/// </summary>
		/// <param name="GameName">The name of the game.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="SnapshotId">The identifier of the snapshot for which to generate code.
		/// Min length: 33
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<StartGeneratedCodeJobResult> StartGeneratedCodeJobAsync(string GameName, string SnapshotId, StartGeneratedCodeJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/"+ (GameName==null? "" : System.Uri.EscapeDataString(GameName))+"/snapshot/"+ (SnapshotId==null? "" : System.Uri.EscapeDataString(SnapshotId))+"/generated-sdk-code-job";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartGeneratedCodeJobResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes tags from a GameSparks resource.
		/// UntagResource tags/{ResourceArn}#tagKeys
		/// </summary>
		/// <param name="ResourceArn">The Amazon Resource Name (ARN) of the resource to remove the tags from.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="tagKeys">The keys of the tags to remove.
		/// Minimum items: 1
		/// Maximum items: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResult> UntagResourceAsync(string ResourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (ResourceArn==null? "" : System.Uri.EscapeDataString(ResourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UntagResourceResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class CreateGamePostBody
	{
		
		/// <summary>
		///  A client-defined token. With an active client token in the request, this action is idempotent. 
		/// Min length: 33
		/// Max length: 126
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(33)]
		[System.ComponentModel.DataAnnotations.MaxLength(126)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The description of the game.
		/// Min length: 0
		/// Max length: 250
		/// Pattern: ^\S(.*\S)?$|^$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S(.*\S)?$|^$")]
		public string Description { get; set; }
		
		/// <summary>
		/// The name of the game.
		/// Required
		/// Min length: 1
		/// Max length: 36
		/// Pattern: ^[a-zA-Z0-9_-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9_-]+$")]
		public string GameName { get; set; }
		
		/// <summary>
		/// The list of tags to apply to the game.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateSnapshotPostBody
	{
		
		/// <summary>
		/// The description of the snapshot.
		/// Min length: 0
		/// Max length: 250
		/// Pattern: ^\S(.*\S)?$|^$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S(.*\S)?$|^$")]
		public string Description { get; set; }
	}
	
	public class CreateStagePostBody
	{
		
		/// <summary>
		///  A client-defined token. With an active client token in the request, this action is idempotent. 
		/// Min length: 33
		/// Max length: 126
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(33)]
		[System.ComponentModel.DataAnnotations.MaxLength(126)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The description of the stage.
		/// Min length: 0
		/// Max length: 250
		/// Pattern: ^\S(.*\S)?$|^$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S(.*\S)?$|^$")]
		public string Description { get; set; }
		
		/// <summary>
		///  The Amazon Resource Name (ARN) of the role to run the game with. This role can be a game-defined role or the default role that GameSparks created. 
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/.+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/.+$")]
		public string Role { get; set; }
		
		/// <summary>
		/// The name of the stage.
		/// Required
		/// Min length: 1
		/// Max length: 36
		/// Pattern: ^[a-zA-Z0-9_-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9_-]+$")]
		public string StageName { get; set; }
		
		/// <summary>
		/// The list of tags to apply to the stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class UpdateGamePatchBody
	{
		
		/// <summary>
		/// The description of the game.
		/// Min length: 0
		/// Max length: 250
		/// Pattern: ^\S(.*\S)?$|^$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S(.*\S)?$|^$")]
		public string Description { get; set; }
	}
	
	public class UpdateStagePatchBody
	{
		
		/// <summary>
		/// The description of the stage.
		/// Min length: 0
		/// Max length: 250
		/// Pattern: ^\S(.*\S)?$|^$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S(.*\S)?$|^$")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the role to use for the game snapshots deployed to this stage.
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/.+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/.+$")]
		public string Role { get; set; }
	}
	
	public class ImportGameConfigurationPutBody
	{
		
		/// <summary>
		/// The source used to import configuration sections.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ImportGameConfigurationPutBodyImportSource ImportSource { get; set; }
	}
	
	public class ImportGameConfigurationPutBodyImportSource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string File { get; set; }
	}
	
	public class UpdateGameConfigurationPatchBody
	{
		
		/// <summary>
		/// The list of modifications to make.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public SectionModification[] Modifications { get; set; }
	}
	
	public class UpdateSnapshotPatchBody
	{
		
		/// <summary>
		/// The description of the snapshot.
		/// Min length: 0
		/// Max length: 250
		/// Pattern: ^\S(.*\S)?$|^$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S(.*\S)?$|^$")]
		public string Description { get; set; }
	}
	
	public class StartStageDeploymentPostBody
	{
		
		/// <summary>
		///  A client-defined token. With an active client token in the request, this action is idempotent. 
		/// Min length: 33
		/// Max length: 126
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(33)]
		[System.ComponentModel.DataAnnotations.MaxLength(126)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The identifier of the snapshot to deploy.
		/// Required
		/// Min length: 33
		/// Max length: 36
		/// Pattern: ^Snapshot_\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3,6}Z$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(33)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^Snapshot_\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3,6}Z$")]
		public string SnapshotId { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The tags to add to the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class StartGeneratedCodeJobPostBody
	{
		
		/// <summary>
		/// Properties that specify the code generator for a generated code job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StartGeneratedCodeJobPostBodyGenerator Generator { get; set; }
	}
	
	public class StartGeneratedCodeJobPostBodyGenerator
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GameSdkVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetPlatform { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
